ResultType.OK という列挙型が、"1" ではなく "OK"という文字でシリアル化できるようになります。
構造化されていないシンプルな、文字を出力するだけのログです。
StringComparison.Ordinal を用いて比較することでカレントカルチャに依存しない文字列比較を行うことができます。
StringComparison.OrdinalIgnoreCaseを用いると大文字小文字を区別せず、かつカレントカルチャに依存しない文字列比較を行えます。
FormatConvertedBitmapによりBgr24に変換したビットマップをOpenCvSharp.Matに変換してImShow()しています。
アプリのSendボタンを押すたびに、受け取ったコマンドがそれぞれのコンソールに表示される。
ここではIDの値が2で割り切れるかどうかで判別しています。
App.xaml.csでAddModuleするときに、モジュール同士の依存関係を明示するRealProxyを用いてSample処理の処理前と処理後にログを入力するサンプルコードです。
DapperExtensionのClassMapを使い、大文字小文字とアンダーバーのマッピングを行う。
変数tがホストとクライアントで一致すれば完全な位置同期となります。
クライアント側はRpcで来たホストの時刻を元に、通信ラグを計算します。
このクラスをさらにSQL Serverのデータに変換して書き込む。
このSystem.Windows.Forms.TextBox.GetLineFromCharIndex(Int32)は論理行ではなく画面上の表示行を返します。
インスタンスを複数生成しても、そのインスタンスが持つstaticメソッドの処理はどのインスタンスも同じ動作になります。
今度はテクスチャとして使う範囲を黒ではなく青にするためにTextureCoordinatesに入れる値を[0-1]から[1/8-7/8]に変更します。
各プロパティにはJson時のプロパティとParse先を定義してあげます。
Contextクラスで状態を管理して（セットして）、その状態に応じた処理が動いていることが分かります。
このクラスに線分を囲う矩形の左上の点をLeftTopプロパティとして設けようと思います。
スーパークラス(Templateクラス)のPlayメソッドにて朝昼夜の処理の流れを決めます。
Test1クラスのGetStringメソッドは引数をそのまま返却し、Test2クラスのGetString2メソッドはTest1クラスのGetStringメソッドを用い。て"GetString2"という文字列を返却します。
まずはコンストラクタの上の部分で変数宣言をして、認証に必要な４つの情報をそれぞれ代入しておきます。
Singletonクラスはフィールドで初期化し、GetInstanceメソッド経由で取得します。
MakeContentAppearAtが先述の"AR Session Originを動かして原点と画像マーカーの位置を合わせる処理"を実行してくれる関数です。
Nullチェックをした後に、sourceがよく使われる特定の型だった場合には専用のIEnumerableを返し、そうでなければ汎用的な実装である。SelectEnumerableIteratorを返すという形になっています。
enterキーを押すたびに、FizzBuzzメソッドから得られる文字列をひとつずつ出力しています。
ダイヤログは、モデルのObservableをもとにToReactivePropertyしてつくられた。
_reactivePropertyAAと_reactivePropertyBBをもっている。
global usingを使用すると、プロジェクト全体の使用が可能になり、各ファイルを書き込む必要がなくなります。
このようになる理由は、dynamic DynamA=val;及びdynamic DynamB=val;は、共々Valのコピーをボクシングしているので、片方のValueを動かしてももう片方が影響を受けることは無い。
上記のHomeControllerで設定したメッセージを表示します。
ただ、propInfo.GetValueメソッドの戻りはobjectからintへのUnboxingが発生しているし、propInfo.SetValueメソッドの第2引数もintからobjectへのBoxingが発生している。
数値型プロパティのフィールドに英字を含めると、CsvHelper.TypeConversion.CsvTypeConverterException例外が発生する。
MainPage.xaml.csからランタイムコンポーネント側にwebViewへの参照を渡しておいて、ランタイムコンポーネント側からInvokeScriptAsyncするとystem.Exception とか System.UnauthorizedAccessException になる。
IXLWorksheet.RangeUsedメソッドは、シート内の使われている範囲のみを取得する便利なメソッド。
実行すると、先ほど追加した3レコードのDisplayNameプロパティが標準出力に出力される。
OnPostprocessBuild()は、XCodeビルド直後に呼ばれるイベントです。
Buttonには、Clickedというパラメータがあり、そこにdelegateを追加しています。
描画が完了してからでないとエラーが出るので、コルーチンで yield return new WaitForEndOfFrame() の後に処理するか、OnPostRender 内で行うと良い。
Xamarin.Mediaをusingし、MediaPickerインスタンスを作成。
ポインタはC#ではあまりみないですが要するにm_firstCharは先頭アドレスになっていて、そこからm_stringLength*2バイトの範囲が文字列の実態ということになります。
Arg0 に MainWindow がバインドされ、 EventTrigger で Load イベント発生時にif (Arg0.ActualWidth > Arg0.ActualHeight) ... が実行されます。
Nancy.NancyModule を継承したクラスを作成して、GETリクエストされたら "Hello World!" を返すようにルートを定義します。
次はモジュールで 前回作成した "Hello World!" してたやつを View を返すように変更します。
GET /api/HelloWorld/で文字列Hello Worldが返ってくるAPIを作ります。
あとは、FacebookClientでのGetTaskAsync()呼び出し時に上で定義したAboutMeResultクラスを渡してあげます。
ちなみにposはVector3型ですがVector2に代入すると勝手にzが消されるので好都合です。
GET /api/pruductsのようなエラーレスポンスを返さないAPIは任意の型を使うのが簡単
ConfigureConventions() をオーバーライドして処理を追加しています。
Selectメソッドには、シーケンスの各要素にインデックスを付けて射影する機能があるのでそれを利用して、インデックスをブロックの長さで割った値をキーに、要素の値とのペア（KeyValuePair<int, T>型）を生成します。
AcitionFilterをHttpConfigurationに登録すると、すべてのアクションに適用できます。
UWPアプリからシリアル通信できるようにするために、Package.appxmanifestにDeviceCapabilityを追加します。
主キーidはDogConrtrollerのおかげで自動でインクリメントされます。
復元ポイントを有効にする
Action名+Async()という名前のメソッドが実行される
関数にはPublicでは無いprivateの関数も存在しますが、UnityEngineで定義されたclassを用いる場合、利用できるのはPublicのみになります。
if文にて、ContainsKeyがfalseであり、dictonaryの中身を読み取る前に判定している
startで繰り返し文を使い、各マスに石を置き、"StoneManager"の"SetState"で"SetActive()"をコントロールし、最初に置いておきたい石には予め"eStoneState"を"BLACK"か"WHITE"にしておくよう記述しておけば、ゲーム開始時に下記の画像のように石が配置されます。
なお、代わりにSetClipSamplePosition()やLoopClip()を同時に使うことで所望の挙動が得られます。
アクティブなEditorはActiveEditorTracker.sharedTracker.activeEditorsでアクセスできるので、以下のように定義してRepaint()すればよいですね。
FinalizeMethodにCubeを破壊する処理と、おもむろにThreadのIdを出力する処理を追加しました。
複数のOriginを許可するには.WithOrigins()に配列でURLを指定する
無駄な空白がある文字列のトリミングを行うことも可能
大雑把に説明すると「1回の処理でここまでやってね」というブロックになります。
out引数で用いる変数をインラインで宣言する（値も使える）コーディングとして次のようなものもあります。
つまりSomeIntPropertyへの変更はsomeIntPropertyEntityの値の変更になり、ReactivePropertyであるsomeIntPropertyEntityの値が変更された結果SomeIntReactivePropertyとして発火することになります。
SqlQuery メソッドを使うことで、生のSQLクエリを直接指定して実行することもできます。
既定のログプロバイダを削除したり、任意のログプロバイダを追加するには、IHostBuilder.ConfigureLogging メソッドに実装します。
ただし、これはdouble型で得られるため、スライダーと連動したいならfloat型に変換しないといけないので注意。
DbContextクラスを継承したクラスを作成し、「OnConfiguring」をオーバーライドします。
その過程で、誰かが 引数に null を与えてはいけないメソッドに null を与えた ことで例外がスローされた。
0～100000のランダムな整数の入った要素数１０万のListを宣言してその中から最小値を取得、
Profiler.BeginSample/EndSampleで、最小値を取得する部分だけを計測しています。
この記事では、自分が勉強した復習をかねて、ReactivePropertyとgong-wpf-dragdropを利用した実装を書かせていただきます
今回はそれについて調べたのでメモします
もし変なところがあったら教えて下さい
以前転職活動をしたときに面接官（たぶん現役のバリバリの技術屋さん）に「ボクシングって知っていますか？」と聞かれてスポーツのボクシングしか頭に浮かばなかったことを思い出したのでお勉強してみました
今回は夏休みの自由研究と称して7SegLEDにCPU使用率を表示してみたいと思います
ゲーム制作をしていると何かと制限時間をつけたいと思う機会は多いのではないでしょうか
そこで、これまではxUnitテストを使用していたのですが、異動後の部署はNUnitテストを使用しているとのことだったので、違いやら書き方やらがちょっと気になり調べてみました
Enumを毎回定義するのがめんどうなシチュエーションがありました
Azure Cognitive Services の Text Analytics API を利用した NLP アプリがありまして、どうも期待通りに使えず、何が原因かと探る一環として、自分でも同 API を試してみることにしました
恥ずかしながら今まではViewDataやViewBagを利用してControllerからViewへデータを渡す方法しか知りませんでした
はじめは同じに見えましたがよくよく調べるとしっかりと違いがありました
初めて使用する際にいろいろとわからないことが多かったのでメモを残しておきます
WireMock.NetというHTTP APIのモックツールを紹介する
調べる前はARPlaneManagerにRemovePlaneやStopRecognitionなどが実装されていることをイメージしてましたが見当たりませんでした
また、同時に間違いなども指摘してもらえると嬉しいです
とりあえず、以下のコードを見てほしい
この実装方法がアンチパターンではないこと祈ります
画面がフォーカスロストしたタイミングで対象の画面を閉じる必要があり、ハマったので備忘録用に
既にDIを使い倒している方には今更な内容かと思いますが、私のように古いシステムのメンテナンスをしていた人には有用かと思います
まずは問題の条件をしっかりを読んで理解すること
ちょっと詰まったので、色々調査しました、メモ
GUIを勉強し始めた頃に悩んだので、記録としてここに残します
あくまで参考としてご覧ください。
C#でcsvファイルを扱うモジュールであるCsvHelperを使って読み込んでみた。
[メモ書き]
App.xaml.csを以下のように書き換える。
メンテナンスするのは簡単！
これについてはYamlDotNetの3.8.0では解消しているようです！