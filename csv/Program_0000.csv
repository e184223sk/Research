＜プログラム＞
private void ShowCalendar()
{
    List&lt;UserRecord&gt; userList = GetUserList(); //ネットワーク通信その1
    foreach (var user in userList)
    {
        var startDate = new DateTime(2020, 9, 12);
        for (var i = 0; i &lt; 21; i++)
        {
            var date = startDate.AddDays(i);
            var taskList = GetTaskList(date); //ネットワーク通信その2
            foreach (var task in taskList)
            {
                CreateTaskTableCell(task);
            }
        }
    }
}
private void CreateTaskTableCell(TaskRecord record)
{
    //HOT PATH!!!!!!

    // Get color of Task
    var color = GetColorFromDatabase(); //ネットワーク通信その3
}
,
var cn = new SqlConnection();
var cm = new SqlCommand("insert into Table1.....");
cm.Connection = cn;
cn.Open(); //ネットワーク通信が発生しているかも？調べてみてね。
cm.ExecuteNonQuery(); //ネットワーク通信が発生！
,
var cl = new HttpClient();
var res = await cl.GetAsync("https://www.hignull.com"); //ネットワーク通信が発生！
,
var credential = new ServiceAccountCredential(
new ServiceAccountCredential.Initializer(serviceAccountEmail)
{
    Scopes = new[] { CalendarService.Scope.Calendar }
});
var sv = new CalendarService(new BaseClientService.Initializer()
{
    HttpClientInitializer = credential,
    ApplicationName = "MyApp1",
});
var req = new EventsResouce.ListRequest(sv, "calendarID");
var eventList = req.Execute(); //ネットワーク通信が発生！
,
CloudStorageAccount account = CloudStorageAccount.Parse("My connection string");
var cl = account.CreateCloudBlobClient();
var container = cl.GetContainerReference("My Container name");
var list = container.ListBlobs(); //ネットワーク通信が発生！
,
var text = System.IO.File.ReadAllText("C:\\Doc\\MyMemo.txt");
,
FileStream fs = new FileStream("C:\\Doc\\MyMemo1.txt", FileMode.Create);
StreamWriter sw = new StreamWriter(fs);
sw.WriteLine("WIFI Number 1234-5678-4563");
sw.Close();
fs.Close();
,
private void Main()
{
    List&lt;UserRecord&gt; userList = new List&lt;UserRecord&gt;();
    userList = GetUserList();
}
private List&lt;UserRecord&gt; GetUserList()
{
    List&lt;UserRecord&gt; userList = new List&lt;UserRecord&gt;();
    // get user list...
    return userList;
}
,
var s1 = "a";
var s2 = "A";
var isSameString = s1.ToLower() == s2.ToLower(); //メモリが浪費される
,
var s1 = "a";
var s2 = "A";
var isSameString = String.Compare(s1, s2, StringComparison.CurrentCultureIgnoreCase);
,
int x = 10;
object o = x; //ボクシング発生！
,
struct MyStruct : IComparer&lt;int&gt;
{
    public int Compare(int x, int y)
    {
        return x.CompareTo(y);
    }
}
private Main()
{
    int s = new MyStruct();
    IComparer&lt;int&gt; comparer = s; //ボクシング発生！
    s.Compare(0, 1); 
}
,
string s = "Hello";
s = "Hello World!";
,
StringBuilder sb = new StringBuilder();
sb.Append("Hello");
sb.Append("World!");
,
List&lt;TaskRecord&gt; taskList = new List&lt;TaskRecord&gt;(50);
,
    public class List&lt;T&gt; : IList&lt;T&gt;, System.Collections.IList, IReadOnlyList&lt;T&gt;
    {
        private const int _defaultCapacity = 4;

        static readonly T[]  _emptyArray = new T[0];        
        public List() {
            _items = _emptyArray;
        }
        public List(int capacity) {
            if (capacity &lt; 0) ThrowHelper.ThrowArgumentOutOfRangeException(ExceptionArgument.capacity, ExceptionResource.ArgumentOutOfRange_NeedNonNegNum);
            Contract.EndContractBlock();

            if (capacity == 0)
                _items = _emptyArray;
            else
                _items = new T[capacity];
        }        

        // 省略.............................

        public void Add(T item) {
            if (_size == _items.Length) EnsureCapacity(_size + 1);
            _items[_size++] = item;
            _version++;
        }                
        private void EnsureCapacity(int min) {
            if (_items.Length &lt; min) {
                int newCapacity = _items.Length == 0? _defaultCapacity : _items.Length * 2;
                if ((uint)newCapacity &gt; Array.MaxArrayLength) newCapacity = Array.MaxArrayLength;
                if (newCapacity &lt; min) newCapacity = min;
                Capacity = newCapacity;
            }
        }        
,
public Action GetWriteLineAction(int number)
{
    return () =&gt; Console.WriteLine(number);
}
,
public class __GeneratedClass
{
    public int number;
    public void GeneratedMethod()
    {
        Console.WriteLine(number);
    }
}
public Action GetWriteLineAction(int number)
{
    var c = new __GeneratedClass();
    c.number = number;
    return c.GeneratedMethod;
}
,
static void Main(string[] args)
{
    var textList = new List&lt;String&gt;();
    textList.Add("   "); //Empty
    textList.Add("Higty");
    //....いくつか追加
    textList.Where(String.IsNullOrWhiteSpace); //静的メソッド
    textList.Where(x =&gt; String.IsNullOrWhiteSpace( x ) ); //ラムダで囲む
}
,
textList.Where(new Func&lt;String, Boolean&gt;(string.IsNullOrWhiteSpace));
,
class __GeneratedClass
{
    static Func&lt;String, Boolean&gt; _ActionCache = null;
    internal Boolean __GeneratedMethod(String text)
    {
        return String.IsNullOrWhiteSpace(text);
    }
}
static void Main(string[] args)
{
    if (__GeneratedClass._ActionCache == null)
    {
        __GeneratedClass._ActionCache = __GeneratedClass.__GeneratedMethod;
    }
    textList.Where(__GeneratedClass._ActionCache);
}
,
private Int32? GetNumber(String text)
{
    try
    {
        var x = Int32.Parse(text);
        return x;
    }
    catch (Exception ex)
    {
        return null;
    }
}
,
private Int32? GetNumber(String text)
{
    if (Int32.TryParse(text, out var x))
    {
        return x;
    }
    return null;
}
,
private voi Send()
{
    var buffer = new Byte[1024];
    socket.BeginSend(buffer, ...);
}
,
List&lt;UserRecord&gt; userList = GetUserList();
foreach (var user in userList)
{
    PropertyInfo namePropertyInfo = Typeof(UserRecord).GetProperty("Name"); //非常に遅い！
    String userName = (String)namePropertyInfo.GetValue(u);
}
,
PropertyInfo namePropertyInfo = Typeof(UserRecord).GetProperty("Name");

List&lt;UserRecord&gt; userList = GetUserList();
foreach (var user in userList)
{
    String userName = (String)namePropertyInfo.GetValue(u);
}
,
public override String ToString()
{
    return Enum.InternalFormat((RuntimeType)GetType(), GetValue());
}
//************************省略***************************
private void GetEnumData(out string[] enumNames, out Array enumValues)
{
    Contract.Ensures(Contract.ValueAtReturn&lt;String[]&gt;(out enumNames) != null);
    Contract.Ensures(Contract.ValueAtReturn&lt;Array&gt;(out enumValues) != null);

    FieldInfo[] flds = GetFields(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static);

    object[] values = new object[flds.Length];
    string[] names = new string[flds.Length];

    for (int i = 0; i &lt; flds.Length; i++)
    {
        names[i] = flds[i].Name;
        values[i] = flds[i].GetRawConstantValue();
    }

    // Insertion Sort these values in ascending order.
    // We use this O(n^2) algorithm, but it turns out that most of the time the elements are already in sorted order and
    // the common case performance will be faster than quick sorting this.
    IComparer comparer = Comparer.Default;
    for (int i = 1; i &lt; values.Length; i++)
    {
        int j = i;
        string tempStr = names[i];
        object val = values[i];
        bool exchanged = false;

        // Since the elements are sorted we only need to do one comparision, we keep the check for j inside the loop.
        while (comparer.Compare(values[j - 1], val) &gt; 0)
        {
            names[j] = names[j - 1];
            values[j] = values[j - 1];
            j--;
            exchanged = true;
            if (j == 0)
                break;
        }

        if (exchanged)
        {
            names[j] = tempStr;
            values[j] = val;
        }
    }

    enumNames = names;
    enumValues = values;
}
,
var numberList = new Int32[40000];
for (var i = 0; i &lt; numberList.Length; i++)
{
    numberList[i] += 1;
}
,
var numberList = new Int32[40000];
for (var i = 0; i &lt; 10000; i = i + 4)
{
    numberList[i] += 1;
    numberList[i + 1] += 1;
    numberList[i + 2] += 1;
    numberList[i + 3] += 1;
}
,
var numbers = GetNumbers();
int total = numbers.Where(n =&gt; n % 2 == 0).Sum(n =&gt; n * 2);
return total;
,
var numbers = GetNumbers();
int total = 0;
foreach (var number in numbers)
{
    if (number % 2 == 0)
    {
        total += number * 2;
    }
}
return total;
,
int hash = 0;
for (int i=0; i&lt; a.Length; i++)
{
    hash += a[i];
}
,
int hash = 0;
int length = a.length;
for (int i=0; i&lt; length; i++)
{
    hash += a[i];
}
,
for (int i = 0; i &lt; _map.Length; i++)
{
    for (int n = 0; n &lt; _map.Length; n++)
    {
        if (_map[i][n] &gt; 0)
        {
            result++;
        }
    }
}
,
for (int i = 0; i &lt; _map.Length; i++)
{
    for (int n = 0; n &lt; _map.Length; n++)
    {
        if (_map[n][i] &gt; 0)
        {
            result++;
        }
    }
}
,
public class CacheData
{
    public static Dictionary&lt;String, String&gt; TextList = new Dictionary&lt;String, String&gt;();
}
,
,

