    
ここの仕様が変わった？ 以前は "cw.Configuration.RegisterClassMap" のようにしていたと思う
            
 UIを消す処理
                    m_texture.SetPixel( x, y, Color.black ); 
点を描画
        
認証Cookieとは別物です。デフォルトCookie名は「.AspNetCore.Session」
        
0°から90°まで
// data_1,data_2は必ず存在するので、そのまま代入
data_1.number = data_2.number = ResultData.no.Tostring();
if (data_3 != null){ data_3,data_4は存在しない可能性があるため、nullでない場合に代入
            
 ...
                    
 appsettings.jsonから"CorsUrl"の値を取得して設定。
        
IEnumerable&lt;int[]&gt; ls3    = ls.Select(x =&gt; new int[x]);   戻り値は配列のコレクション//出力
40

                    
 DataGridに出力
                
 選択できる日付の区間内は、1日ずつ判定して、含まれていなければ BlackoutDates に追加
            
 ================================
//変更前の環境変数Pathの値を全て取得
string base_paths = System.Environment.GetEnvironmentVariable("Path",
//環境パス設定
Environment.SetEnvironmentVariable("Path",

                
} else error
        iSample.Paint(); 
出力 --&gt; "Change Paint method"
        
 処理が終了したらこのイベントが発生する
            var conversationId = "&lt;ConversationID&gt;";
API経由で取得したConversationID
    
p =&gt; p."columnName"というラムダ式を格納した式ツリーを返す
    
 MSサンプルそのまま(streamに文字列を読み書きしてくれるクラス)// こっから下は実験１と同じ
,,,

    
 f1とf2がテスト済みなら、f3のテストは1個でいいでしょ？
                
 falseにしたら、まだ未処理ということで例外を再throwする。
            
 Slack に出力する
        
  new Square(); に変更したら Assert に引っかかるようになる。しかもコンパイルエラーにならない。
    await Addressables.InitializeAsync(); 
 ここ重要
        
カメラを移動
xmlns:behavior="clr-namespace:ControlTest.Behaviors"  
 この名前は任意で
            
    .AddEntityFrameworkStores&lt;ApplicationDbContext&gt;();
            csvDatas.Add(cell.Split(','));  
 ','を目安にリストに格納していく   
    String Name = info.Element("Name").Value; 
 ここで例外発生
                    
 WeightedSelectorからアイテムを選択する。
            
 処理を追加  ここまで
        SceneManager.LoadScene(sceneName);
シーンチェンジ
        
ボタンが存在すれば削除
            
 キー入力を待機 (下記説明1)
        
 ==指定したルーム名と同じルーム名が存在している場合、PhotonNetworkの方で作成できないようになっている==
            
第一引数に実行Viewのパスを指定することが可能。
    
....
            
 後略
xmlns:materialDesign="http:
materialdesigninxaml.netwinfxxamlthemes"
    
 コルーチン処理
            
memoryStreamの内容を読み込んで、全ての文字列をファイルに書き出す
        [Authorize] 
追加
  
 有効な値が無い時
                if (e.ErrorCode != 49) 
 エラー コード 49 は「認証失敗」
            
    .AddEntityFrameworkStores&lt;ApplicationDbContext&gt;();
            
 エンコード未指定時はShift-JISを仮置き
    
 Update is called once per frame
            
 閾値超えのマッチ箇所を強調させておく
        String url = "https:
hagehogepic_save.php";httpにandroid端末から送る場合はパーミッション関連で何か必要だったような･･･
        
 RB を押しながら A ボタンを押したら
            
距離が離れている時の処理を記述
                
 202101のパッチだけ取得
    
 Start is called before the first frame update
        
 メッセージループを記述したメソッド
            
ss.Wait();    C     Aが後に実行される（同期）
                
 後略
    
 appSettings.jsonのTest1キーが9999以外の時は1が返却される
    var group = range.Group(); 
 &lt;-- ここで落ちる
        AppTheme apptheme; 
AppTheme:enum Dark, Light
            
ExecuteSqlRawとSaveChangesの部分を以下のように変更しました。
    
 Start is called before the first frame update
    
取得したメッセージのURLを返す
            
 追加ここまで
tryとcatchで囲って()キャストする方法static void Cast(object[] vs){foreach (object o in vs){try{A v = (A)o;}catch{}}}//asキーワードで変換してからnullチェックする方法static void AsIf(object[] vs){foreach (object o in vs){A v = o as A;if (v == null) { }}}//isキーワードで変換できるかをチェックし、そのまま変換する方法static void IfIs(object[] vs){foreach (object o in vs){if (o is A v) { }}}//isキーワードでチェックしてから()キャストする方法static void IfIsCast(object[] vs){foreach (object o in vs){if (o is A){A v = (A)o;}}}//isキーワードでチェックしてからasキーワードで変換する方法static void IfIsAs(object[] vs){foreach (object o in vs){if (o is A){A v = o as A;}}}//５つの変換方法を試すstatic void TryMethods(int percentageOfA){int separator = (int)(percentageOfA / 100f * ss.Length);object[] vs = ss.Select((s, i) =&gt; i &lt; separator ? (object)new A(s) : new B(s)).ToArray();Console.WriteLine($"{percentageOfA}%");Console.WriteLine($"Cast:\t\t{Measure(count, () =&gt; Cast(vs))}");Console.WriteLine($"AsIf:\t\t{Measure(count, () =&gt; AsIf(vs))}");Console.WriteLine($"IfIs:\t\t{Measure(count, () =&gt; IfIs(vs))}");Console.WriteLine($"IfIsCast:\t{Measure(count, () =&gt; IfIsCast(vs))}");Console.WriteLine($"IfIsAs:\t\t{Measure(count, () =&gt; IfIsAs(vs))}");Console.WriteLine();}static int count = 3000;static string[] ss = new string[10000000];//エントリポイントpublic static void Entry(){Random random = new Random();for (int i = 0; i &lt; ss.Length; i++){int length = random.Next(10);for (int j = 0; j &lt; length; j++){ss[i] += (char)random.Next('A', 'z');}}Console.WriteLine($"count:\t{count}");Console.WriteLine($"length:\t{ss.Length}");Console.WriteLine();TryMethods(0);TryMethods(20);TryMethods(40);TryMethods(60);TryMethods(80);TryMethods(100);}//関数の処理にかかる時間を計測するpublic static TimeSpan Measure(int count, Action action){DateTime time = DateTime.Now;for (int i = 0; i &lt; count; i++){action();}return DateTime.Now - time;},,,//tryとcatchで囲って()キャストする方法
static void Cast(object[] vs)
asキーワードで変換してからnullチェックする方法static void AsIf(object[] vs){foreach (object o in vs){A v = o as A;if (v == null) { }}}//isキーワードで変換できるかをチェックし、そのまま変換する方法static void IfIs(object[] vs){foreach (object o in vs){if (o is A v) { }}}//isキーワードでチェックしてから()キャストする方法static void IfIsCast(object[] vs){foreach (object o in vs){if (o is A){A v = (A)o;}}}//isキーワードでチェックしてからasキーワードで変換する方法static void IfIsAs(object[] vs){foreach (object o in vs){if (o is A){A v = o as A;}}}//５つの変換方法を試すstatic void TryMethods(int percentageOfA){int separator = (int)(percentageOfA / 100f * ss.Length);object[] vs = ss.Select((s, i) =&gt; i &lt; separator ? (object)new A(s) : new B(s)).ToArray();Console.WriteLine($"{percentageOfA}%");Console.WriteLine($"Cast:\t\t{Measure(count, () =&gt; Cast(vs))}");Console.WriteLine($"AsIf:\t\t{Measure(count, () =&gt; AsIf(vs))}");Console.WriteLine($"IfIs:\t\t{Measure(count, () =&gt; IfIs(vs))}");Console.WriteLine($"IfIsCast:\t{Measure(count, () =&gt; IfIsCast(vs))}");Console.WriteLine($"IfIsAs:\t\t{Measure(count, () =&gt; IfIsAs(vs))}");Console.WriteLine();}static int count = 3000;static string[] ss = new string[10000000];//エントリポイントpublic static void Entry(){Random random = new Random();for (int i = 0; i &lt; ss.Length; i++){int length = random.Next(10);for (int j = 0; j &lt; length; j++){ss[i] += (char)random.Next('A', 'z');}}Console.WriteLine($"count:\t{count}");Console.WriteLine($"length:\t{ss.Length}");Console.WriteLine();TryMethods(0);TryMethods(20);TryMethods(40);TryMethods(60);TryMethods(80);TryMethods(100);}//関数の処理にかかる時間を計測するpublic static TimeSpan Measure(int count, Action action){DateTime time = DateTime.Now;for (int i = 0; i &lt; count; i++){action();}return DateTime.Now - time;},,,//asキーワードで変換してからnullチェックする方法
static void AsIf(object[] vs)
isキーワードで変換できるかをチェックし、そのまま変換する方法static void IfIs(object[] vs){foreach (object o in vs){if (o is A v) { }}}//isキーワードでチェックしてから()キャストする方法static void IfIsCast(object[] vs){foreach (object o in vs){if (o is A){A v = (A)o;}}}//isキーワードでチェックしてからasキーワードで変換する方法static void IfIsAs(object[] vs){foreach (object o in vs){if (o is A){A v = o as A;}}}//５つの変換方法を試すstatic void TryMethods(int percentageOfA){int separator = (int)(percentageOfA / 100f * ss.Length);object[] vs = ss.Select((s, i) =&gt; i &lt; separator ? (object)new A(s) : new B(s)).ToArray();Console.WriteLine($"{percentageOfA}%");Console.WriteLine($"Cast:\t\t{Measure(count, () =&gt; Cast(vs))}");Console.WriteLine($"AsIf:\t\t{Measure(count, () =&gt; AsIf(vs))}");Console.WriteLine($"IfIs:\t\t{Measure(count, () =&gt; IfIs(vs))}");Console.WriteLine($"IfIsCast:\t{Measure(count, () =&gt; IfIsCast(vs))}");Console.WriteLine($"IfIsAs:\t\t{Measure(count, () =&gt; IfIsAs(vs))}");Console.WriteLine();}static int count = 3000;static string[] ss = new string[10000000];//エントリポイントpublic static void Entry(){Random random = new Random();for (int i = 0; i &lt; ss.Length; i++){int length = random.Next(10);for (int j = 0; j &lt; length; j++){ss[i] += (char)random.Next('A', 'z');}}Console.WriteLine($"count:\t{count}");Console.WriteLine($"length:\t{ss.Length}");Console.WriteLine();TryMethods(0);TryMethods(20);TryMethods(40);TryMethods(60);TryMethods(80);TryMethods(100);}//関数の処理にかかる時間を計測するpublic static TimeSpan Measure(int count, Action action){DateTime time = DateTime.Now;for (int i = 0; i &lt; count; i++){action();}return DateTime.Now - time;},,,//isキーワードで変換できるかをチェックし、そのまま変換する方法
static void IfIs(object[] vs)
isキーワードでチェックしてから()キャストする方法static void IfIsCast(object[] vs){foreach (object o in vs){if (o is A){A v = (A)o;}}}//isキーワードでチェックしてからasキーワードで変換する方法static void IfIsAs(object[] vs){foreach (object o in vs){if (o is A){A v = o as A;}}}//５つの変換方法を試すstatic void TryMethods(int percentageOfA){int separator = (int)(percentageOfA / 100f * ss.Length);object[] vs = ss.Select((s, i) =&gt; i &lt; separator ? (object)new A(s) : new B(s)).ToArray();Console.WriteLine($"{percentageOfA}%");Console.WriteLine($"Cast:\t\t{Measure(count, () =&gt; Cast(vs))}");Console.WriteLine($"AsIf:\t\t{Measure(count, () =&gt; AsIf(vs))}");Console.WriteLine($"IfIs:\t\t{Measure(count, () =&gt; IfIs(vs))}");Console.WriteLine($"IfIsCast:\t{Measure(count, () =&gt; IfIsCast(vs))}");Console.WriteLine($"IfIsAs:\t\t{Measure(count, () =&gt; IfIsAs(vs))}");Console.WriteLine();}static int count = 3000;static string[] ss = new string[10000000];//エントリポイントpublic static void Entry(){Random random = new Random();for (int i = 0; i &lt; ss.Length; i++){int length = random.Next(10);for (int j = 0; j &lt; length; j++){ss[i] += (char)random.Next('A', 'z');}}Console.WriteLine($"count:\t{count}");Console.WriteLine($"length:\t{ss.Length}");Console.WriteLine();TryMethods(0);TryMethods(20);TryMethods(40);TryMethods(60);TryMethods(80);TryMethods(100);}//関数の処理にかかる時間を計測するpublic static TimeSpan Measure(int count, Action action){DateTime time = DateTime.Now;for (int i = 0; i &lt; count; i++){action();}return DateTime.Now - time;},,,//isキーワードでチェックしてから()キャストする方法
static void IfIsCast(object[] vs)
isキーワードでチェックしてからasキーワードで変換する方法static void IfIsAs(object[] vs){foreach (object o in vs){if (o is A){A v = o as A;}}}//５つの変換方法を試すstatic void TryMethods(int percentageOfA){int separator = (int)(percentageOfA / 100f * ss.Length);object[] vs = ss.Select((s, i) =&gt; i &lt; separator ? (object)new A(s) : new B(s)).ToArray();Console.WriteLine($"{percentageOfA}%");Console.WriteLine($"Cast:\t\t{Measure(count, () =&gt; Cast(vs))}");Console.WriteLine($"AsIf:\t\t{Measure(count, () =&gt; AsIf(vs))}");Console.WriteLine($"IfIs:\t\t{Measure(count, () =&gt; IfIs(vs))}");Console.WriteLine($"IfIsCast:\t{Measure(count, () =&gt; IfIsCast(vs))}");Console.WriteLine($"IfIsAs:\t\t{Measure(count, () =&gt; IfIsAs(vs))}");Console.WriteLine();}static int count = 3000;static string[] ss = new string[10000000];//エントリポイントpublic static void Entry(){Random random = new Random();for (int i = 0; i &lt; ss.Length; i++){int length = random.Next(10);for (int j = 0; j &lt; length; j++){ss[i] += (char)random.Next('A', 'z');}}Console.WriteLine($"count:\t{count}");Console.WriteLine($"length:\t{ss.Length}");Console.WriteLine();TryMethods(0);TryMethods(20);TryMethods(40);TryMethods(60);TryMethods(80);TryMethods(100);}//関数の処理にかかる時間を計測するpublic static TimeSpan Measure(int count, Action action){DateTime time = DateTime.Now;for (int i = 0; i &lt; count; i++){action();}return DateTime.Now - time;},,,//isキーワードでチェックしてからasキーワードで変換する方法
static void IfIsAs(object[] vs)
５つの変換方法を試すstatic void TryMethods(int percentageOfA){int separator = (int)(percentageOfA / 100f * ss.Length);object[] vs = ss.Select((s, i) =&gt; i &lt; separator ? (object)new A(s) : new B(s)).ToArray();Console.WriteLine($"{percentageOfA}%");Console.WriteLine($"Cast:\t\t{Measure(count, () =&gt; Cast(vs))}");Console.WriteLine($"AsIf:\t\t{Measure(count, () =&gt; AsIf(vs))}");Console.WriteLine($"IfIs:\t\t{Measure(count, () =&gt; IfIs(vs))}");Console.WriteLine($"IfIsCast:\t{Measure(count, () =&gt; IfIsCast(vs))}");Console.WriteLine($"IfIsAs:\t\t{Measure(count, () =&gt; IfIsAs(vs))}");Console.WriteLine();}static int count = 3000;static string[] ss = new string[10000000];//エントリポイントpublic static void Entry(){Random random = new Random();for (int i = 0; i &lt; ss.Length; i++){int length = random.Next(10);for (int j = 0; j &lt; length; j++){ss[i] += (char)random.Next('A', 'z');}}Console.WriteLine($"count:\t{count}");Console.WriteLine($"length:\t{ss.Length}");Console.WriteLine();TryMethods(0);TryMethods(20);TryMethods(40);TryMethods(60);TryMethods(80);TryMethods(100);}//関数の処理にかかる時間を計測するpublic static TimeSpan Measure(int count, Action action){DateTime time = DateTime.Now;for (int i = 0; i &lt; count; i++){action();}return DateTime.Now - time;},,,//５つの変換方法を試す
static void TryMethods(int percentageOfA)
エントリポイントpublic static void Entry(){Random random = new Random();for (int i = 0; i &lt; ss.Length; i++){int length = random.Next(10);for (int j = 0; j &lt; length; j++){ss[i] += (char)random.Next('A', 'z');}}Console.WriteLine($"count:\t{count}");Console.WriteLine($"length:\t{ss.Length}");Console.WriteLine();TryMethods(0);TryMethods(20);TryMethods(40);TryMethods(60);TryMethods(80);TryMethods(100);}//関数の処理にかかる時間を計測するpublic static TimeSpan Measure(int count, Action action){DateTime time = DateTime.Now;for (int i = 0; i &lt; count; i++){action();}return DateTime.Now - time;},,,//エントリポイント
public static void Entry()
関数の処理にかかる時間を計測するpublic static TimeSpan Measure(int count, Action action){DateTime time = DateTime.Now;for (int i = 0; i &lt; count; i++){action();}return DateTime.Now - time;},,,//関数の処理にかかる時間を計測する
public static TimeSpan Measure(int count, Action action)

        
 HandleErrorメソッドできちんと処理が行われることが前提。極力使わない。
                
 Chrome拡張機能から受け取った「Action」によって処理を分ける
//C#9.0以降のトップレベルステートメントを利用しています
using System;
//カレントカルチャ（日本）に依存する比較
Console.WriteLine(string.Compare(str1, str2));
//カレントカルチャ（日本）に依存しない比較
Console.WriteLine(string.Compare(str1, str2, StringComparison.Ordinal));
//カレントカルチャ（日本）に依存する比較
Console.WriteLine(string.Compare(str1, str3));
//カレントカルチャ（日本）に依存しない比較（大文字小文字を区別しない）
Console.WriteLine(string.Compare(str1, str3, StringComparison.OrdinalIgnoreCase));

            
 List activities.
            
xには２つの値の差が入る
    
クエリをかけるときには、名前空間付きの XML であることに要注意です。
        
--- ここまで追加 ---
                { 
-360~0
    
 こうすると、CustomActionDataに"A_PROPERTY=[A_PROPERTYの値];B_PROPERTY=[B_PROPERTYの値]"のように、値が格納される
//　１．共通クラスライブラリ（DLL）
  ネットのどこかにあるDebugLogのオーバーラップクラス
// UnityのどこかのDebugLog出力ソースコード
 参照設定やUsingは不要（でーん！）
ログ出力レベルの変更void ChangeDebugLoglevel(Ground.LogLevel level){Ground.In.Value = level;},,,// ログ出力レベルの変更
void ChangeDebugLoglevel(Ground.LogLevel level)

            
保存します。
        
 更新ユーザID
                    
アクセス日時の設定
        
 Do something about data
    
 ... 略 ...
                        
 Execute the command with the name passed as an argument.
            
 初期値は"+"
            
ツイート
        
Constructor
    
 テーマ・カラーの両方を設定する
xmlns:materialDesign="http:
materialdesigninxaml.netwinfxxamlthemes"
            
ヒットした部位に応じてカーソルの形状を変更する
        
 更新ユーザID
         
先頭の16byte分ずらしたところから8byte分だけ切り取る
                if (wParam.ToInt32() == 0) { 
 なにかする(※WM_PAINTはwParamもlParamもなにも入ってない) }
        
 ここで true を返すとナビゲーション時に View が再利用されるので断固拒否
// 値がひとつだけの場合
var single = Console.ReadLine();
// 複数ある場合
var multiple = Console.ReadLine().Split(",");

    
 ... ここで ToListAsync()とかやる
    
 こんなことができればよかったのに　
byte[] responseBytes = client.UploadFile("https:
slack.comapifiles.upload",Filename);//結果を取得
String responseString = Encoding.UTF8.GetString(responseBytes);

    
...
        
ローカル変数(isChanging)にアクセスするため、ローカル関数で記述
  Console.WriteLine(task.Result);               
(4)
                    
 クリップボードに対して何らかの処理を行う場所。
Console.WriteLine(gengoName);
 平成
xmlns:mc="http:
schemas.openxmlformats.orgmarkup-compatibility2006"
        
 check input***************************************************************public abstract partial class Player : IPlayer{public bool isGrounded (){return this.controller.isGrounded;}public To direction (){var form = this.transform;var diffF = (-(this.fAnchorTransform.forward) - form.forward).sqrMagnitude;var diffL = (this.fAnchorTransform.right - form.forward).sqrMagnitude;var diffB = (this.fAnchorTransform.forward - form.forward).sqrMagnitude;var diffR = (-(this.fAnchorTransform.right) - form.forward).sqrMagnitude;var minDiff = diffF;var minTo = To.F;if (diffL &lt; minDiff){minDiff = diffL;minTo = To.L;}if (diffB &lt; minDiff){minDiff = diffB;minTo = To.B;}if (diffR &lt; minDiff){minDiff = diffR;minTo = To.R;}return minTo;}public void move (To to, float dTime){var direction = Vector3.zero;switch (to){case To.F:direction = this.fAnchorTransform.forward;break;case To.L:direction = -(this.fAnchorTransform.right);break;case To.B:direction = -(this.fAnchorTransform.forward);break;case To.R:direction = this.fAnchorTransform.right;break;}var v3 = direction * this.moveSpeed ();this.controller.Move (v3 * dTime);}public void jump (){if (this.isGrounded ()){this.ySpeed += Mathf.Sqrt (this.jumpHeight () * 3.0f * this.gravity ());}}public void turn (To to){var direction = Vector3.zero;switch (to){case To.F:direction = this.fAnchorTransform.forward;break;case To.L:direction = -(this.fAnchorTransform.right);break;case To.B:direction = -(this.fAnchorTransform.forward);break;case To.R:direction = this.fAnchorTransform.right;break;}var v3 = new Vector3 (direction.x, 0, direction.z);this.mainCamera.transform.parent = null;this.transform.forward = -(v3);this.mainCamera.transform.parent = this.transform;}public void lookL (float deltaTime){this.mainCamera.transform.RotateAround (this.transform.position, -(Vector3.up), this.lookSpeed () * deltaTime);}public void lookR (float deltaTime){this.mainCamera.transform.RotateAround (this.transform.position, Vector3.up, this.lookSpeed () * deltaTime);}public void lookU (float deltaTime){this.mainCamera.transform.RotateAround (this.transform.position, -(this.fAnchorTransform.right), this.lookSpeed () * deltaTime);}public void lookD (float deltaTime){this.mainCamera.transform.RotateAround (this.transform.position, this.fAnchorTransform.right, this.lookSpeed () * deltaTime);}}//***************************************************************// DefaultW.cs//***************************************************************// W (default)public class DefaultW : Input{public KeyControl key (){return current.wKey;}public void onStart (IPlayer player){player.turn (To.F);}public void onMiddle (IPlayer player, float deltaTime){player.move (To.F, deltaTime);}public void onEnd (IPlayer player){}}//***************************************************************// DefaultA.cs//***************************************************************// A (default)public class DefaultA : Input{public KeyControl key (){return current.aKey;}public void onStart (IPlayer player){player.turn (To.L);}public void onMiddle (IPlayer player, float deltaTime){player.move (To.L, deltaTime);}public void onEnd (IPlayer player){}}//***************************************************************// DefaultS.cs//***************************************************************// S (default)public class DefaultS : Input{public KeyControl key (){return current.sKey;}public void onStart (IPlayer player){player.turn (To.B);}public void onMiddle (IPlayer player, float deltaTime){player.move (To.B, deltaTime);}public void onEnd (IPlayer player){ }}//***************************************************************// DefaultD.cs//***************************************************************// D (default)public class DefaultD : Input{public KeyControl key (){return current.dKey;}public void onStart (IPlayer player){player.turn (To.R);}public void onMiddle (IPlayer player, float deltaTime){player.move (To.R, deltaTime);}public void onEnd (IPlayer player){ }}//***************************************************************// DefaultSpace.cs//***************************************************************// Space (default)public class DefaultSpace : Input{public KeyControl key (){return current.spaceKey;}public void onStart (IPlayer player){player.jump ();}public void onMiddle (IPlayer player, float deltaTime){ }public void onEnd (IPlayer player){ }}//***************************************************************// DefaultI.cs//***************************************************************// I (default)public class DefaultI : Input{public KeyControl key (){return current.iKey;}public void onStart (IPlayer player){ }public void onMiddle (IPlayer player, float deltaTime){player.lookU (deltaTime);}public void onEnd (IPlayer player){ }}//***************************************************************// DefaultK.cs//***************************************************************// K (default)public class DefaultK : Input{public KeyControl key (){return current.kKey;}public void onStart (IPlayer player){ }public void onMiddle (IPlayer player, float deltaTime){player.lookD (deltaTime);}public void onEnd (IPlayer player){ }}//***************************************************************// DefaultL.cs//***************************************************************// L (default)public class DefaultL : Input{public KeyControl key (){return current.lKey;}public void onStart (IPlayer player){ }public void onMiddle (IPlayer player, float deltaTime){player.lookR (deltaTime);}public void onEnd (IPlayer player){ }}//***************************************************************// DefaultJ.cs//***************************************************************// J (default)public class DefaultJ : Input{public KeyControl key (){return current.jKey;}public void onStart (IPlayer player){ }public void onMiddle (IPlayer player, float deltaTime){player.lookL (deltaTime);}public void onEnd (IPlayer player){ }},,,W (default)public class DefaultW : Input{public KeyControl key (){return current.wKey;}public void onStart (IPlayer player){player.turn (To.F);}public void onMiddle (IPlayer player, float deltaTime){player.move (To.F, deltaTime);}public void onEnd (IPlayer player){}}//***************************************************************// DefaultA.cs//***************************************************************// A (default)public class DefaultA : Input{public KeyControl key (){return current.aKey;}public void onStart (IPlayer player){player.turn (To.L);}public void onMiddle (IPlayer player, float deltaTime){player.move (To.L, deltaTime);}public void onEnd (IPlayer player){}}//***************************************************************// DefaultS.cs//***************************************************************// S (default)public class DefaultS : Input{public KeyControl key (){return current.sKey;}public void onStart (IPlayer player){player.turn (To.B);}public void onMiddle (IPlayer player, float deltaTime){player.move (To.B, deltaTime);}public void onEnd (IPlayer player){ }}//***************************************************************// DefaultD.cs//***************************************************************// D (default)public class DefaultD : Input{public KeyControl key (){return current.dKey;}public void onStart (IPlayer player){player.turn (To.R);}public void onMiddle (IPlayer player, float deltaTime){player.move (To.R, deltaTime);}public void onEnd (IPlayer player){ }}//***************************************************************// DefaultSpace.cs//***************************************************************// Space (default)public class DefaultSpace : Input{public KeyControl key (){return current.spaceKey;}public void onStart (IPlayer player){player.jump ();}public void onMiddle (IPlayer player, float deltaTime){ }public void onEnd (IPlayer player){ }}//***************************************************************// DefaultI.cs//***************************************************************// I (default)public class DefaultI : Input{public KeyControl key (){return current.iKey;}public void onStart (IPlayer player){ }public void onMiddle (IPlayer player, float deltaTime){player.lookU (deltaTime);}public void onEnd (IPlayer player){ }}//***************************************************************// DefaultK.cs//***************************************************************// K (default)public class DefaultK : Input{public KeyControl key (){return current.kKey;}public void onStart (IPlayer player){ }public void onMiddle (IPlayer player, float deltaTime){player.lookD (deltaTime);}public void onEnd (IPlayer player){ }}//***************************************************************// DefaultL.cs//***************************************************************// L (default)public class DefaultL : Input{public KeyControl key (){return current.lKey;}public void onStart (IPlayer player){ }public void onMiddle (IPlayer player, float deltaTime){player.lookR (deltaTime);}public void onEnd (IPlayer player){ }}//***************************************************************// DefaultJ.cs//***************************************************************// J (default)public class DefaultJ : Input{public KeyControl key (){return current.jKey;}public void onStart (IPlayer player){ }public void onMiddle (IPlayer player, float deltaTime){player.lookL (deltaTime);}public void onEnd (IPlayer player){ }},,,A (default)public class DefaultA : Input{public KeyControl key (){return current.aKey;}public void onStart (IPlayer player){player.turn (To.L);}public void onMiddle (IPlayer player, float deltaTime){player.move (To.L, deltaTime);}public void onEnd (IPlayer player){}}//***************************************************************// DefaultS.cs//***************************************************************// S (default)public class DefaultS : Input{public KeyControl key (){return current.sKey;}public void onStart (IPlayer player){player.turn (To.B);}public void onMiddle (IPlayer player, float deltaTime){player.move (To.B, deltaTime);}public void onEnd (IPlayer player){ }}//***************************************************************// DefaultD.cs//***************************************************************// D (default)public class DefaultD : Input{public KeyControl key (){return current.dKey;}public void onStart (IPlayer player){player.turn (To.R);}public void onMiddle (IPlayer player, float deltaTime){player.move (To.R, deltaTime);}public void onEnd (IPlayer player){ }}//***************************************************************// DefaultSpace.cs//***************************************************************// Space (default)public class DefaultSpace : Input{public KeyControl key (){return current.spaceKey;}public void onStart (IPlayer player){player.jump ();}public void onMiddle (IPlayer player, float deltaTime){ }public void onEnd (IPlayer player){ }}//***************************************************************// DefaultI.cs//***************************************************************// I (default)public class DefaultI : Input{public KeyControl key (){return current.iKey;}public void onStart (IPlayer player){ }public void onMiddle (IPlayer player, float deltaTime){player.lookU (deltaTime);}public void onEnd (IPlayer player){ }}//***************************************************************// DefaultK.cs//***************************************************************// K (default)public class DefaultK : Input{public KeyControl key (){return current.kKey;}public void onStart (IPlayer player){ }public void onMiddle (IPlayer player, float deltaTime){player.lookD (deltaTime);}public void onEnd (IPlayer player){ }}//***************************************************************// DefaultL.cs//***************************************************************// L (default)public class DefaultL : Input{public KeyControl key (){return current.lKey;}public void onStart (IPlayer player){ }public void onMiddle (IPlayer player, float deltaTime){player.lookR (deltaTime);}public void onEnd (IPlayer player){ }}//***************************************************************// DefaultJ.cs//***************************************************************// J (default)public class DefaultJ : Input{public KeyControl key (){return current.jKey;}public void onStart (IPlayer player){ }public void onMiddle (IPlayer player, float deltaTime){player.lookL (deltaTime);}public void onEnd (IPlayer player){ }},,,S (default)public class DefaultS : Input{public KeyControl key (){return current.sKey;}public void onStart (IPlayer player){player.turn (To.B);}public void onMiddle (IPlayer player, float deltaTime){player.move (To.B, deltaTime);}public void onEnd (IPlayer player){ }}//***************************************************************// DefaultD.cs//***************************************************************// D (default)public class DefaultD : Input{public KeyControl key (){return current.dKey;}public void onStart (IPlayer player){player.turn (To.R);}public void onMiddle (IPlayer player, float deltaTime){player.move (To.R, deltaTime);}public void onEnd (IPlayer player){ }}//***************************************************************// DefaultSpace.cs//***************************************************************// Space (default)public class DefaultSpace : Input{public KeyControl key (){return current.spaceKey;}public void onStart (IPlayer player){player.jump ();}public void onMiddle (IPlayer player, float deltaTime){ }public void onEnd (IPlayer player){ }}//***************************************************************// DefaultI.cs//***************************************************************// I (default)public class DefaultI : Input{public KeyControl key (){return current.iKey;}public void onStart (IPlayer player){ }public void onMiddle (IPlayer player, float deltaTime){player.lookU (deltaTime);}public void onEnd (IPlayer player){ }}//***************************************************************// DefaultK.cs//***************************************************************// K (default)public class DefaultK : Input{public KeyControl key (){return current.kKey;}public void onStart (IPlayer player){ }public void onMiddle (IPlayer player, float deltaTime){player.lookD (deltaTime);}public void onEnd (IPlayer player){ }}//***************************************************************// DefaultL.cs//***************************************************************// L (default)public class DefaultL : Input{public KeyControl key (){return current.lKey;}public void onStart (IPlayer player){ }public void onMiddle (IPlayer player, float deltaTime){player.lookR (deltaTime);}public void onEnd (IPlayer player){ }}//***************************************************************// DefaultJ.cs//***************************************************************// J (default)public class DefaultJ : Input{public KeyControl key (){return current.jKey;}public void onStart (IPlayer player){ }public void onMiddle (IPlayer player, float deltaTime){player.lookL (deltaTime);}public void onEnd (IPlayer player){ }},,,D (default)public class DefaultD : Input{public KeyControl key (){return current.dKey;}public void onStart (IPlayer player){player.turn (To.R);}public void onMiddle (IPlayer player, float deltaTime){player.move (To.R, deltaTime);}public void onEnd (IPlayer player){ }}//***************************************************************// DefaultSpace.cs//***************************************************************// Space (default)public class DefaultSpace : Input{public KeyControl key (){return current.spaceKey;}public void onStart (IPlayer player){player.jump ();}public void onMiddle (IPlayer player, float deltaTime){ }public void onEnd (IPlayer player){ }}//***************************************************************// DefaultI.cs//***************************************************************// I (default)public class DefaultI : Input{public KeyControl key (){return current.iKey;}public void onStart (IPlayer player){ }public void onMiddle (IPlayer player, float deltaTime){player.lookU (deltaTime);}public void onEnd (IPlayer player){ }}//***************************************************************// DefaultK.cs//***************************************************************// K (default)public class DefaultK : Input{public KeyControl key (){return current.kKey;}public void onStart (IPlayer player){ }public void onMiddle (IPlayer player, float deltaTime){player.lookD (deltaTime);}public void onEnd (IPlayer player){ }}//***************************************************************// DefaultL.cs//***************************************************************// L (default)public class DefaultL : Input{public KeyControl key (){return current.lKey;}public void onStart (IPlayer player){ }public void onMiddle (IPlayer player, float deltaTime){player.lookR (deltaTime);}public void onEnd (IPlayer player){ }}//***************************************************************// DefaultJ.cs//***************************************************************// J (default)public class DefaultJ : Input{public KeyControl key (){return current.jKey;}public void onStart (IPlayer player){ }public void onMiddle (IPlayer player, float deltaTime){player.lookL (deltaTime);}public void onEnd (IPlayer player){ }},,,Space (default)public class DefaultSpace : Input{public KeyControl key (){return current.spaceKey;}public void onStart (IPlayer player){player.jump ();}public void onMiddle (IPlayer player, float deltaTime){ }public void onEnd (IPlayer player){ }}//***************************************************************// DefaultI.cs//***************************************************************// I (default)public class DefaultI : Input{public KeyControl key (){return current.iKey;}public void onStart (IPlayer player){ }public void onMiddle (IPlayer player, float deltaTime){player.lookU (deltaTime);}public void onEnd (IPlayer player){ }}//***************************************************************// DefaultK.cs//***************************************************************// K (default)public class DefaultK : Input{public KeyControl key (){return current.kKey;}public void onStart (IPlayer player){ }public void onMiddle (IPlayer player, float deltaTime){player.lookD (deltaTime);}public void onEnd (IPlayer player){ }}//***************************************************************// DefaultL.cs//***************************************************************// L (default)public class DefaultL : Input{public KeyControl key (){return current.lKey;}public void onStart (IPlayer player){ }public void onMiddle (IPlayer player, float deltaTime){player.lookR (deltaTime);}public void onEnd (IPlayer player){ }}//***************************************************************// DefaultJ.cs//***************************************************************// J (default)public class DefaultJ : Input{public KeyControl key (){return current.jKey;}public void onStart (IPlayer player){ }public void onMiddle (IPlayer player, float deltaTime){player.lookL (deltaTime);}public void onEnd (IPlayer player){ }},,,I (default)public class DefaultI : Input{public KeyControl key (){return current.iKey;}public void onStart (IPlayer player){ }public void onMiddle (IPlayer player, float deltaTime){player.lookU (deltaTime);}public void onEnd (IPlayer player){ }}//***************************************************************// DefaultK.cs//***************************************************************// K (default)public class DefaultK : Input{public KeyControl key (){return current.kKey;}public void onStart (IPlayer player){ }public void onMiddle (IPlayer player, float deltaTime){player.lookD (deltaTime);}public void onEnd (IPlayer player){ }}//***************************************************************// DefaultL.cs//***************************************************************// L (default)public class DefaultL : Input{public KeyControl key (){return current.lKey;}public void onStart (IPlayer player){ }public void onMiddle (IPlayer player, float deltaTime){player.lookR (deltaTime);}public void onEnd (IPlayer player){ }}//***************************************************************// DefaultJ.cs//***************************************************************// J (default)public class DefaultJ : Input{public KeyControl key (){return current.jKey;}public void onStart (IPlayer player){ }public void onMiddle (IPlayer player, float deltaTime){player.lookL (deltaTime);}public void onEnd (IPlayer player){ }},,,K (default)public class DefaultK : Input{public KeyControl key (){return current.kKey;}public void onStart (IPlayer player){ }public void onMiddle (IPlayer player, float deltaTime){player.lookD (deltaTime);}public void onEnd (IPlayer player){ }}//***************************************************************// DefaultL.cs//***************************************************************// L (default)public class DefaultL : Input{public KeyControl key (){return current.lKey;}public void onStart (IPlayer player){ }public void onMiddle (IPlayer player, float deltaTime){player.lookR (deltaTime);}public void onEnd (IPlayer player){ }}//***************************************************************// DefaultJ.cs//***************************************************************// J (default)public class DefaultJ : Input{public KeyControl key (){return current.jKey;}public void onStart (IPlayer player){ }public void onMiddle (IPlayer player, float deltaTime){player.lookL (deltaTime);}public void onEnd (IPlayer player){ }},,,L (default)public class DefaultL : Input{public KeyControl key (){return current.lKey;}public void onStart (IPlayer player){ }public void onMiddle (IPlayer player, float deltaTime){player.lookR (deltaTime);}public void onEnd (IPlayer player){ }}//***************************************************************// DefaultJ.cs//***************************************************************// J (default)public class DefaultJ : Input{public KeyControl key (){return current.jKey;}public void onStart (IPlayer player){ }public void onMiddle (IPlayer player, float deltaTime){player.lookL (deltaTime);}public void onEnd (IPlayer player){ }},,,J (default)public class DefaultJ : Input{public KeyControl key (){return current.jKey;}public void onStart (IPlayer player){ }public void onMiddle (IPlayer player, float deltaTime){player.lookL (deltaTime);}public void onEnd (IPlayer player){ }},,,
        
受信したチャットをログに追加
            
 Tagに設定された文字サイズをメインコンテンツのテキストに設定
            
 常にマーカーを描画
                    
 結果取得(0:正常終了)// コマンドプロンプトを表示して実行する場合
Process.Start("java", "-jar (.jarファイル名orパス) (引数) (引数)…"))
// コマンドプロンプトを表示せずに実行する場合
Process.Start("javaw", "-jar (.jarファイル名orパス) (引数) (引数)…"))
// 終了待ち
jar.WaitForExit();
// 結果取得(0:正常終了)
jar.ExitCode();

    
ControllerBaseクラスを継承しているため、その中のRequestプロパティを利用。
        
var response = await ret.Content.ReadFromJsonAsync&lt;Author&gt;();
    
Mouseの移動量に変換したIReactivePropertyを公開
    await MouseActionMethod(); 
 何かしらの処理を呼び出し
date3.ToString("T"); 
 12:24:36 PM
            
 デシリアライズ
                            graphicSwitch[a].FillRectangle(brush, 0, 0, canvasSwitch[a].Width, canvasSwitch[a].Height);        
pictureBoxSwitchと同じサイズの四角形をGrayで塗りつぶし
{P1: a, P2: a}{P1: a, P2: a}{P1: b, P2: b}{P1: b, P2: c}// {P1: a, P2: a} の重複が取り除かれていないvar array3 = source.GroupBy(x =&gt; new { x.P1, x.P2 }).Select(x =&gt; x.First());foreach (var x in array3)Console.Write($"{{P1: {x.P1}, P2: {x.P2}}}");// {P1: a, P2: a}{P1: b, P2: b}{P1: b, P2: c}// *OK,,,// {P1: a, P2: a} の重複が取り除かれていない


        
 } end of debug code
            
動画を保存します。
    
 コルーチンは好きなように書く
         
 .GetLength(1)の場合は 2 が取得できる// 出力結果
 N = 7

            string secretName = "SecretName";
シークレット名
    public int baudRate = 115200;  
 ボーレート(Arduinoに記述したものに合わせる)
 
指定したタイミングに切り替えてjobHandle.Complete();される// 実装
public static UniTask&lt;AsyncGPUReadbackRequest&gt; ToUniTask(this AsyncGPUReadbackRequest asyncOperation, PlayerLoopTiming timing = PlayerLoopTiming.Update, CancellationToken cancellationToken = default(CancellationToken))

                
コンソールに出力
// set of attributes. Change these attribute values to modify the information// associated with an assembly. General Information about an assembly is controlled through the following
var partSum = jojo.Sum(el =&gt; el.Value.Part);  
 36
        CSharpArgumentInfo.Create(None, null), 
 0個目はダミーになるif (DelegateCache == null){ ↓
                
 設定ファイルなし
            main = lua.GetFunction("main");
実行する関数名
    
 Exit時に Service と Reader も Dispose される。
            
 Yに係数をかけて前後のSpeedとする
                
 TODO: 今回の確認では IsPartitionEOF を発生させることができなかった。
            
 1000行挿入ごとに少し待つ。
            }).ToArray();   
 即時実行
            
testウィンドウにRenderTargetBitmapを表示する
            
 ポートBCに接続されたLargeモーターを同時にスピード100で360度回転させる
            
 古いcurvepointを保存する
            
 ポートBCに接続されたLargeモーターを同時にスピード100で360度回転させる
    
 ログのフィルタを構成テレメトリチャネルをInMemoryChannelに設定services.Configure&lt;TelemetryConfiguration&gt;((config) =&gt; { config.TelemetryChannel = new InMemoryChannel(); });,,,// サービスプロバイダーを構築IServiceProvider serviceProvider = services.BuildServiceProvider();// Loggerを取得ILogger&lt;Program&gt; logger = serviceProvider.GetRequiredService&lt;ILogger&lt;Program&gt;&gt;();// テレメトリクライアントを取得var telemetryClient = serviceProvider.GetRequiredService&lt;TelemetryClient&gt;();,,,telemetryClient.Flush();,,,// テレメトリチャネルをInMemoryChannelに設定
services.Configure&lt;TelemetryConfiguration&gt;(
// サービスプロバイダーを構築
IServiceProvider serviceProvider = services.BuildServiceProvider();
// Loggerを取得
ILogger&lt;Program&gt; logger = serviceProvider.GetRequiredService&lt;ILogger&lt;Program&gt;&gt;();
// テレメトリクライアントを取得
var telemetryClient = serviceProvider.GetRequiredService&lt;TelemetryClient&gt;();

        var uri = new Uri("https:
{サービスで利用するホスト名}", localPath);
        if (Input.GetKeyDown("r")) 
このif文を追記
        
ベクトル同士の演算も可能。結果は、(2, 4, 6)
        
Regionを使った当たり判定を使用するように指定
            
 衝突判定時のアクションをここに書く
            tokens.PostContent("https:
api.twitter.com1.1direct_messageseventsnew.json", "applicationjson", jsonData);
                
ファイナライザを抑止
    
…省略//SubClass型の型引数をもつのインターフェイスに、BaseClass型の型引数を持つ実体クラスを代入
ISomeInterface&lt;SubClass&gt; sub = new SomeClass&lt;BaseClass&gt;();
//subの実体の型引数はBaseClassだが、より具体的なSubClassを入力されるぶんには何も問題がない
sub.SetValue(new SubClass());
//書き込み専用じゃなくて読み取りができると…
subの実体はBaseClassなので、SubClassが出てくるという補償はないのに、SubClassで受けられてしまう！

FastLogger.Verbose?.Invoke("value: " + 1); 
 ログ出力
                    
 空ページ表示
            
smartPlug.OutletPowered = false;  Turn off relay
        File.Delete(args[0]); 
 activate.txtを削除
        
子にコライダーだけ持つオブジェクトを作成する
.Pipe(String.Join("\n", _)) 
 こうとか書けたらもっと楽だなあという妄想
    public void Sleep(GameObject sobj){
使い終わった後の処理
        
関数が返す文字列をコンソールに表示
// 上記事前準備で作成されたアプリケーションID
static string APPLICATION_ID = "";
// APIのURL
static string API_URL = "https:xxxxxxx-api.azurewebsites.net";
// Azure ADのテナント
var AUTHORITY = "xxxxxx.onmicrosoft.com";
// 上記で作成したREST API用アプリケーションID（メモ帳に保存しているはず）
var CLIENT_ID = "";
// 上記で作成したREST APIキー（メモ帳に保存しているはず）
var CLIENT_SECRET = "";
// 96行目の結果は１回目はfalseで、２回目以降はtrueになる
var canUserAccessWorkbench = await GatewayApi.Instance.CanCurrentUserCreateContractsForWorkflow(WORKFLOW_ID);
１３０行目にアセット情報を設定する。workflowAction.WorkflowActionParameters.Add(new WorkflowActionParameter() { Name = "description", Value = "Computer" });workflowAction.WorkflowActionParameters.Add(new WorkflowActionParameter() { Name = "price", Value = "999" });,,,// １３０行目にアセット情報を設定する。
workflowAction.WorkflowActionParameters.Add(new WorkflowActionParameter() { Name = "description", Value = "Computer" });

// これはLINQ中に副作用のあるメソッドを呼んでいる良くないコード
var account = accounts

        () =&gt; ChartValues.RemoveAt(0)); 
ChartValuesの書き換えをUIスレッドでしか行わないようにすることでスレッドセーフでないChartValuesを安全に操作する
    
インストールされていない
            
 一定時間ごとにリプランニング
arrayData3.SequenceEqual(pokemons); 
False
            
 Indexをフォーカスする
    
 終わりの位置
        
 テキストボックス → プロパティ
const string RegionsUri = "https:
earthquake.usgs.govwsgeoserveregions.json";
        
 相対カメラの位置ベクトル = ゲームオブジェクトの位置ベクトル + offset位置ベクトルtransform.position = target.position + offset;,,, 相対カメラの位置ベクトル = ゲームオブジェクトの位置ベクトル + offset
            
 HttpHelpers はUtilで定義
        
}
long value = 4294967296L;
0b100000000000000000000000000000000
        Database.EnsureCreated(); 
 &lt;-- 追記
        
 JSON日付変換
    
 省略
    
 以下省略
            keyLook = true; 
 キー操作をロックする
Vector3 vn = v.Normalize(); 
 エラー
            var data = Enumerable.Range(1, 10).Select(static x =&gt; x * p).ToArray(); 
ヒープアロケーションを回避
    
 中略// コンソール出力: True
,,,

    
--省略--
            
_を外してHTMLデコードして投げる
                            
 キーボードアップの場合は、2
//出力結果
Hello, World
//出力結果
Hello
//出力結果
HelloWorld
//出力結果
My friends are Taro and Hanako
//出力結果
20
//出力結果
The range of integers is -2147483648 to 2147483647
//出力結果
The answer is greater than 10.
//出力結果
The answer is not greater than 10
//出力結果
The counter is 0
//出力結果
The counter is 0

                 transform.Rotate(new Vector3(0, 0, 0));
タイヤ回転停止
    
bp~経由でbufferをこね回す重い処理が以降に入る
            
 Updateで実行する処理をここに記述します。
             client.BaseAddress = new Uri("http:
localhost:7071api");
    private float gravity = 20;
9.81f;  
                    
Blobストレージから取得したファイルをコピー
    
 実際には存在しないメソッドです
Debug.WriteLine($"{w1}"); 
elseブロックをコメントアウトすると、w1は"未割当"エラーになる
"Echo".RemoveRichText(); 
リッチテキストを取り除く
    
OK,xが保持しているStringBuilderへの参照を元にして参照先を操作している。
            
 set DefaultText if nothing else selected
123,567.111string numFormat = string.Format("{0:#,0.000}", 123456.111111);,,,// 0.000string numFormat = string.Format("{0:#,0.000}", 0);,,,// 0string numFormat = string.Format("{0:#,0.###}", 0);,,,// stringl.Emptystring numFormat = string.Format("{0:#,#.###}", 0);,,,// 0123string numFormat = string.Format("{0:0000}", 123);,,,// 2021/01/01 13:01:01.123string dateFormat = string.Format(@"{0:yyyy/MM/dd HH:mm:ss.fff}", DateTime.Now);,,,0.000string numFormat = string.Format("{0:#,0.000}", 0);,,,// 0string numFormat = string.Format("{0:#,0.###}", 0);,,,// stringl.Emptystring numFormat = string.Format("{0:#,#.###}", 0);,,,// 0123string numFormat = string.Format("{0:0000}", 123);,,,// 2021/01/01 13:01:01.123string dateFormat = string.Format(@"{0:yyyy/MM/dd HH:mm:ss.fff}", DateTime.Now);,,,0string numFormat = string.Format("{0:#,0.###}", 0);,,,// stringl.Emptystring numFormat = string.Format("{0:#,#.###}", 0);,,,// 0123string numFormat = string.Format("{0:0000}", 123);,,,// 2021/01/01 13:01:01.123string dateFormat = string.Format(@"{0:yyyy/MM/dd HH:mm:ss.fff}", DateTime.Now);,,,stringl.Emptystring numFormat = string.Format("{0:#,#.###}", 0);,,,// 0123string numFormat = string.Format("{0:0000}", 123);,,,// 2021/01/01 13:01:01.123string dateFormat = string.Format(@"{0:yyyy/MM/dd HH:mm:ss.fff}", DateTime.Now);,,,0123string numFormat = string.Format("{0:0000}", 123);,,,// 2021/01/01 13:01:01.123string dateFormat = string.Format(@"{0:yyyy/MM/dd HH:mm:ss.fff}", DateTime.Now);,,,2021/01/01 13:01:01.123string dateFormat = string.Format(@"{0:yyyy/MM/dd HH:mm:ss.fff}", DateTime.Now);,,,
    return Math.Ceiling(diffTotalDays * oneDayPricipal);
 年利で発生した金額private double GetDifferenceTotalDays(int index){ 現在日から支払日の差
    
 ※ 数値の場合、定義されていない値でもTryParseが成功してしまうため
        
再び値を発行させる
                    
copy file - alle systems except Android
        animator.SetTrigger("Death");   
倒れるアニメに移行
        
_com23 = new MySerialPort("COM23");   &lt;-- TeraTermを使うときはコメントアウト
    public override void Write() 
overrideを使って定義し直す
        SceneManager.LoadSceneAsync("ScreenBreak");                                 
 シーンを遷移する
containerRegistry.RegisterForNavigation&lt;MyTabbedPage, MyTabbedPageViewModel&gt;(); 
 TabbedPage
        
 以下全く同じのため省略
[XmlRoot("feed", Namespace = "http:
www.w3.org2005Atom")]
            
 オブジェクトのプロパティにアクセス// AssemblyInfo.csの内容
 アセンブリのバージョン情報は次の 4 つの値で構成されています:
//      メジャー バージョン
      マイナー バージョン
//      ビルド番号
      リビジョン

        
 公式サンプル方法: https:firebase.google.comdocsdatabaseunitysave-data?authuser=0#write_update_or_delete_data_at_a_reference
             webBuilder.UseUrls("http:
*:5000");  &lt;- 新たに追加
    
...
    
ここに図形描画の処理を記述します。
            
 If you use interface, it will explicit interface. 
    
　ここで追加しよう！
//json読み込み
JObject jObject = ReadJsonFile(Path.Combine(startupPath, "test.json"));
//category要素をテーブル名とする
string tableName = jObject["category"].ToString();
//Insertするデータと、テーブル名を指定する
executer.DynamicInsert(jObject, tableName);
//xml（XMLを読込んで、Jsonに変換）
XmlDocument doc = new XmlDocument();

            
 Array.Clone の戻り値は Object なのでキャストが必要// ディープコピー：実行結果
original.Id     = 10      original.Name    = AAA
// 値を変更：実行結果
original.Id     = 99      original.Name    = Hello, World!

} 
*1
    
 Update is called once per frame
        var response = await Http.GetAsync(@"https:
hatenaXXXXXXX");
            
 更新処理スキップ判定用に諸々キャッシュ
                
 処理を実行
    
ここから下はforeachで回せるようにIEnumerableの実装をしている
} 
*1
  
 ↓↓↓OK:new側で型の明示を省略。
        
verticalはそのままの値を使いたい
        public string Name { get; set; } 
署名
        
 更新button event
p2.Attack(); 
ゼニガメの攻撃処理が実行される
    
 なにかしらの処理
            
 Android API 25(Android7.1)以降は新しい方式で実装
        
 品詞とチャンクとの照合
   
 コンパニオン モジュールへデータを渡す
        
 データ読み込み
         
 イベントを使い終わった// 赤色にする
GUI.backgroundColor = Color.red;
// コントロールする名前を設定する
GUI.SetNextControlName("Focus String");
// 指定した名前にフォーカスする
GUI.FocusControl("Focus String");
// フォーカスされている名前を取得する
var focusString = GUI.GetNameOfFocusedControl()

            
 ドキュメントを更新する
            
 string.Empty と断定し通報
        
 スクリプトが終了する、または途中で中断(yield)されたり、一定の処理時間が経過するまで処理が実行されます
        
 敵死亡時の処理
                mail.HtmlBody.AddLink("パスワード更新フォーム", Properties.Resources.Password_Updater); 
 UploaderのPath
            
 例外処理
//レポートの印刷
oAccess = new Microsoft.Office.Interop.Access.ApplicationClass();

            
 (補足：ViewAはUserControl型で定義されたコントロール)
                
 swap
        
整数型配列の各要素の出力
        
 但し、不要な（無意味な）引数を添付しても、エラーとはせず無視するだけとしている
                
 トークンを取得
    
コンストラクタ代わりに実行される
            
return (T)(value ?? throw new ArgumentNullException());
            
子リストのデータソースをセットする。
      
 削除行は灰色で…というああいう感じの
            
 ディレクトリでなければ、指定を解除する
                
 エラーが起きてたら何か処理
　　　
自転車運転する
var content = JsonContent.Create&lt;Message&gt;(message); 
 Content-Type: applicationjson; charset=utf-8
} 
*1
    
 処理
// テストコード
string text = "適当な値";
コンパイルエラー@Html.Label(dynamicObj, htmlAttributes: new { @class = "control-label" })//コンパイルOK@Html.Label(dynamicObj.Value as string, htmlAttributes: new { @class = "control-label" }),,,//コンパイルエラー
@Html.Label(dynamicObj, htmlAttributes: new { @class = "control-label" })
コンパイルOK@Html.Label(dynamicObj.Value as string, htmlAttributes: new { @class = "control-label" }),,,//コンパイルOK
@Html.Label(dynamicObj.Value as string, htmlAttributes: new { @class = "control-label" })

    
フェードアウト処理
        
解放
                
 とかいろいろできるので活用しよう！// 地中PGA画像データへのURLを作成
WebApiUrlGenerator.Generate(WebApiUrlType.RealtimeImg, targetTime, RealtimeDataType.Pga, true);
// 地上1.0Hz応答速度画像データへのURLを作成
WebApiUrlGenerator.Generate(WebApiUrlType.RealtimeImg, targetTime, RealtimeDataType.Response_1Hz);
// P/S波画像データへのURLを作成
WebApiUrlGenerator.Generate(WebApiUrlType.PSWave, targetTime);
// 緊急地震速報情報のURLを作成
WebApiUrlGenerator.Generate(WebApiUrlType.EewJson, targetTime);

    
 ↑に比べてループ部分は10分の1ぐらいで終わった
                        
 生座標は動きすぎるので適当に調整
        } 
 MssSampleExtensionAction
        
 '0' == 48
通常のメソッドint Add(int a, int b) {return a + b;}// ラムダ式(int a, int b) =&gt; { return a + b; };,,,// 通常のメソッド
int Add(int a, int b) {
ラムダ式(int a, int b) =&gt; { return a + b; };,,,// ラムダ式
(int a, int b) =&gt; { return a + b; };

        
 最小化してたら通常の大きさに戻す
//ノーツの移動速度の計算方法
speed  = "曲のノーツスピード" * "プレイヤーが設定したノーツスピード" * "曲のBPM" / 60;
//この際、曲のノーツスピードは基本値を１にしておくこと
,,,

    
 遷移条件の設定
    
 ...
...var client = new DiscordSocketClient(new DiscordSocketConfig{WebSocketProvider = WS4NetProvider.Instance,UdpSocketProvider = UDPClientProvider.Instance,});,,,
C# 8.0public string? Remarks { get; }// C# 7.3public string Remarks { get; },,,// C# 8.0public static bool operator &gt; (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &gt; r.Id,({}, null) =&gt; true,(null, {}) =&gt; false,(null, null) =&gt; false};// C# 7.3public static bool operator &gt; (ImmutableValueClass left, ImmutableValueClass right)=&gt; !(left is null) &amp;&amp; (right is null || left.Id &gt; right.Id);,,,// C# 7.3public bool Equals(ImmutableValueClass other)=&gt; !(other is null)&amp;&amp; (Id, Name, Remarks, ParentId) == (other.Id, other.Name, other.Remarks, other.ParentId);// C# 7.2public bool Equals(ImmutableValueClass other)=&gt; !(other is null)&amp;&amp; Id == other.Id&amp;&amp; Name == other.Name&amp;&amp; Remarks == other.Remarks&amp;&amp; ParentId == other.ParentId;,,,// C# 7.1public ImmutableValueClass(int id, string name, string remarks = null, int? parentId = default)// C# 7.0public ImmutableValueClass(int id, string name, string remarks = null, int? parentId = default(int?)),,,// C# 7.0public ImmutableValueClass(int id, string name, string remarks = null, int? parentId = default(int?))=&gt; (Id, Name, Remarks, ParentId) = (id, name ?? throw new ArgumentNullException(nameof(name)), remarks, parentId);// C# 6public ImmutableValueClass(int id, string name, string remarks = null, int? parentId = default(int?)){Id = id;if (ReferenceEquals(name, null))throw new ArgumentNullException(nameof(name));Name = name;Remarks = remarks;ParentId = parentId;},,,// C# 7.0public void Deconstract(out int id, out string name, out string remarks, out int? parentId)=&gt; (id, name, remarks, parentId) = (Id, Name, Remarks, ParentId);// C# 6public void Deconstract(out int id, out string name, out string remarks, out int? parentId){id = Id;name = Name;remarks = Remarks;parentId = ParentId;},,,// C# 7.0public bool Equals(ImmutableValueClass other)=&gt; !(other is null)&amp;&amp; Id == other.Id&amp;&amp; Name == other.Name&amp;&amp; Remarks == other.Remarks&amp;&amp; ParentId == other.ParentId;public override bool Equals(object obj)=&gt; obj is ImmutableValueClass other &amp;&amp; Equals(other);// C# 6public bool Equals(ImmutableValueClass other)=&gt; !ReferenceEquals(other, null)&amp;&amp; Id == other.Id&amp;&amp; Name == other.Name&amp;&amp; Remarks == other.Remarks&amp;&amp; ParentId == other.ParentId;public override bool Equals(object obj)=&gt; Equals(obj as ImmutableValueClass);,,,// C# 6public int Id { get; }// C# 5private readonly int _id;public int Id { get { return _id; } }// orpublic int Id { get; private set; },,,// C# 6public override bool Equals(object obj)=&gt; Equals(obj as ImmutableValueClass);// C# 5public override bool Equals(object obj){return Equals(obj as ImmutableValueClass);},,,// C# 6public override string ToString()=&gt; $"{nameof(ImmutableValueClass)}: {{ {nameof(Id)}: {Id}, {nameof(Name)}: {Name}, {nameof(Remarks)}: {Remarks}, {nameof(ParentId)}: {ParentId} }}";// C# 5public override string ToString(){return string.Format("ImmutableValueClass: {{ Id: {0}, Name: {1}, Remarks: {2}, ParentId: {3} }}", Id, Name, Remarks, ParentId);},,,// C# 6if (ReferenceEquals(name, null))throw new ArgumentNullException(nameof(name));// C# 5if (ReferenceEquals(name, null))throw new ArgumentNullException("name");,,,// C# 4public ImmutableValueClass(int id, string name, string remarks = null, int? parentId = default(int?))// C# 3public ImmutableValueClass(int id, string name) : this(id, name, null, default(int?)) {}public ImmutableValueClass(int id, string name, string remarks) : this(id, name, remarks, default(int?)) {}public ImmutableValueClass(int id, string name, int? parentId) : this(id, name, null, parentId) {}public ImmutableValueClass(int id, string name, string remarks, int? parentId),,,// C# 3public string Remarks { get; private set; }// C# 2private readonly string _remarks;public string Remarks { get { return _remarks; } },,,// C# 3var other = obj as ImmutableValueClass;// C# 2ImmutableValueClass other = obj as ImmutableValueClass;,,,// C# 2public class ImmutableValueClass : IEquatable&lt;ImmutableValueClass&gt;, IComparable, IComparable&lt;ImmutableValueClass&gt;// C# 1public class ImmutableValueClass : IComparable,,,// C# 2public ImmutableValueClass(int id, string name) : this(id, name, null, default(int?))public ImmutableValueClass(int id, string name, string remarks) : this(id, name, remarks, default(int?))// C# 1public ImmutableValueClass(int id, string name) : this(id, name, null, new NullableInt())public ImmutableValueClass(int id, string name, string remarks) : this(id, name, remarks, new NullableInt()),,,using System;namespace CSharp80{public record ImmutableValueClass(int Id,string Name,string? Remarks = null,int? ParentId = default) : IComparable, IComparable&lt;ImmutableValueClass&gt;{public int CompareTo(object? obj)=&gt; obj is null ? 1: obj is ImmutableValueClass other ? CompareTo(other): throw new ArgumentException(nameof(obj) + " is not a " + nameof(ImmutableValueClass), nameof(obj));public int CompareTo(ImmutableValueClass? other)=&gt; other is null ? 1 : Id - other.Id;public static bool operator &gt; (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &gt; r.Id,({}, null) =&gt; true,(null, {}) =&gt; false,(null, null) =&gt; false};public static bool operator &lt; (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &lt; r.Id,({}, null) =&gt; false,(null, {}) =&gt; true,(null, null) =&gt; false};public static bool operator &gt;= (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &gt;= r.Id,({}, null) =&gt; true,(null, {}) =&gt; false,(null, null) =&gt; true};public static bool operator &lt;= (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &lt;= r.Id,({}, null) =&gt; false,(null, {}) =&gt; true,(null, null) =&gt; true};}},,,C# 7.3public string Remarks { get; },,,// C# 8.0public static bool operator &gt; (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &gt; r.Id,({}, null) =&gt; true,(null, {}) =&gt; false,(null, null) =&gt; false};// C# 7.3public static bool operator &gt; (ImmutableValueClass left, ImmutableValueClass right)=&gt; !(left is null) &amp;&amp; (right is null || left.Id &gt; right.Id);,,,// C# 7.3public bool Equals(ImmutableValueClass other)=&gt; !(other is null)&amp;&amp; (Id, Name, Remarks, ParentId) == (other.Id, other.Name, other.Remarks, other.ParentId);// C# 7.2public bool Equals(ImmutableValueClass other)=&gt; !(other is null)&amp;&amp; Id == other.Id&amp;&amp; Name == other.Name&amp;&amp; Remarks == other.Remarks&amp;&amp; ParentId == other.ParentId;,,,// C# 7.1public ImmutableValueClass(int id, string name, string remarks = null, int? parentId = default)// C# 7.0public ImmutableValueClass(int id, string name, string remarks = null, int? parentId = default(int?)),,,// C# 7.0public ImmutableValueClass(int id, string name, string remarks = null, int? parentId = default(int?))=&gt; (Id, Name, Remarks, ParentId) = (id, name ?? throw new ArgumentNullException(nameof(name)), remarks, parentId);// C# 6public ImmutableValueClass(int id, string name, string remarks = null, int? parentId = default(int?)){Id = id;if (ReferenceEquals(name, null))throw new ArgumentNullException(nameof(name));Name = name;Remarks = remarks;ParentId = parentId;},,,// C# 7.0public void Deconstract(out int id, out string name, out string remarks, out int? parentId)=&gt; (id, name, remarks, parentId) = (Id, Name, Remarks, ParentId);// C# 6public void Deconstract(out int id, out string name, out string remarks, out int? parentId){id = Id;name = Name;remarks = Remarks;parentId = ParentId;},,,// C# 7.0public bool Equals(ImmutableValueClass other)=&gt; !(other is null)&amp;&amp; Id == other.Id&amp;&amp; Name == other.Name&amp;&amp; Remarks == other.Remarks&amp;&amp; ParentId == other.ParentId;public override bool Equals(object obj)=&gt; obj is ImmutableValueClass other &amp;&amp; Equals(other);// C# 6public bool Equals(ImmutableValueClass other)=&gt; !ReferenceEquals(other, null)&amp;&amp; Id == other.Id&amp;&amp; Name == other.Name&amp;&amp; Remarks == other.Remarks&amp;&amp; ParentId == other.ParentId;public override bool Equals(object obj)=&gt; Equals(obj as ImmutableValueClass);,,,// C# 6public int Id { get; }// C# 5private readonly int _id;public int Id { get { return _id; } }// orpublic int Id { get; private set; },,,// C# 6public override bool Equals(object obj)=&gt; Equals(obj as ImmutableValueClass);// C# 5public override bool Equals(object obj){return Equals(obj as ImmutableValueClass);},,,// C# 6public override string ToString()=&gt; $"{nameof(ImmutableValueClass)}: {{ {nameof(Id)}: {Id}, {nameof(Name)}: {Name}, {nameof(Remarks)}: {Remarks}, {nameof(ParentId)}: {ParentId} }}";// C# 5public override string ToString(){return string.Format("ImmutableValueClass: {{ Id: {0}, Name: {1}, Remarks: {2}, ParentId: {3} }}", Id, Name, Remarks, ParentId);},,,// C# 6if (ReferenceEquals(name, null))throw new ArgumentNullException(nameof(name));// C# 5if (ReferenceEquals(name, null))throw new ArgumentNullException("name");,,,// C# 4public ImmutableValueClass(int id, string name, string remarks = null, int? parentId = default(int?))// C# 3public ImmutableValueClass(int id, string name) : this(id, name, null, default(int?)) {}public ImmutableValueClass(int id, string name, string remarks) : this(id, name, remarks, default(int?)) {}public ImmutableValueClass(int id, string name, int? parentId) : this(id, name, null, parentId) {}public ImmutableValueClass(int id, string name, string remarks, int? parentId),,,// C# 3public string Remarks { get; private set; }// C# 2private readonly string _remarks;public string Remarks { get { return _remarks; } },,,// C# 3var other = obj as ImmutableValueClass;// C# 2ImmutableValueClass other = obj as ImmutableValueClass;,,,// C# 2public class ImmutableValueClass : IEquatable&lt;ImmutableValueClass&gt;, IComparable, IComparable&lt;ImmutableValueClass&gt;// C# 1public class ImmutableValueClass : IComparable,,,// C# 2public ImmutableValueClass(int id, string name) : this(id, name, null, default(int?))public ImmutableValueClass(int id, string name, string remarks) : this(id, name, remarks, default(int?))// C# 1public ImmutableValueClass(int id, string name) : this(id, name, null, new NullableInt())public ImmutableValueClass(int id, string name, string remarks) : this(id, name, remarks, new NullableInt()),,,using System;namespace CSharp80{public record ImmutableValueClass(int Id,string Name,string? Remarks = null,int? ParentId = default) : IComparable, IComparable&lt;ImmutableValueClass&gt;{public int CompareTo(object? obj)=&gt; obj is null ? 1: obj is ImmutableValueClass other ? CompareTo(other): throw new ArgumentException(nameof(obj) + " is not a " + nameof(ImmutableValueClass), nameof(obj));public int CompareTo(ImmutableValueClass? other)=&gt; other is null ? 1 : Id - other.Id;public static bool operator &gt; (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &gt; r.Id,({}, null) =&gt; true,(null, {}) =&gt; false,(null, null) =&gt; false};public static bool operator &lt; (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &lt; r.Id,({}, null) =&gt; false,(null, {}) =&gt; true,(null, null) =&gt; false};public static bool operator &gt;= (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &gt;= r.Id,({}, null) =&gt; true,(null, {}) =&gt; false,(null, null) =&gt; true};public static bool operator &lt;= (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &lt;= r.Id,({}, null) =&gt; false,(null, {}) =&gt; true,(null, null) =&gt; true};}},,,C# 6public ImmutableValueClass(int id, string name, string remarks = null, int? parentId = default(int?)){Id = id;if (ReferenceEquals(name, null))throw new ArgumentNullException(nameof(name));Name = name;Remarks = remarks;ParentId = parentId;},,,// C# 7.0public void Deconstract(out int id, out string name, out string remarks, out int? parentId)=&gt; (id, name, remarks, parentId) = (Id, Name, Remarks, ParentId);// C# 6public void Deconstract(out int id, out string name, out string remarks, out int? parentId){id = Id;name = Name;remarks = Remarks;parentId = ParentId;},,,// C# 7.0public bool Equals(ImmutableValueClass other)=&gt; !(other is null)&amp;&amp; Id == other.Id&amp;&amp; Name == other.Name&amp;&amp; Remarks == other.Remarks&amp;&amp; ParentId == other.ParentId;public override bool Equals(object obj)=&gt; obj is ImmutableValueClass other &amp;&amp; Equals(other);// C# 6public bool Equals(ImmutableValueClass other)=&gt; !ReferenceEquals(other, null)&amp;&amp; Id == other.Id&amp;&amp; Name == other.Name&amp;&amp; Remarks == other.Remarks&amp;&amp; ParentId == other.ParentId;public override bool Equals(object obj)=&gt; Equals(obj as ImmutableValueClass);,,,// C# 6public int Id { get; }// C# 5private readonly int _id;public int Id { get { return _id; } }// orpublic int Id { get; private set; },,,// C# 6public override bool Equals(object obj)=&gt; Equals(obj as ImmutableValueClass);// C# 5public override bool Equals(object obj){return Equals(obj as ImmutableValueClass);},,,// C# 6public override string ToString()=&gt; $"{nameof(ImmutableValueClass)}: {{ {nameof(Id)}: {Id}, {nameof(Name)}: {Name}, {nameof(Remarks)}: {Remarks}, {nameof(ParentId)}: {ParentId} }}";// C# 5public override string ToString(){return string.Format("ImmutableValueClass: {{ Id: {0}, Name: {1}, Remarks: {2}, ParentId: {3} }}", Id, Name, Remarks, ParentId);},,,// C# 6if (ReferenceEquals(name, null))throw new ArgumentNullException(nameof(name));// C# 5if (ReferenceEquals(name, null))throw new ArgumentNullException("name");,,,// C# 4public ImmutableValueClass(int id, string name, string remarks = null, int? parentId = default(int?))// C# 3public ImmutableValueClass(int id, string name) : this(id, name, null, default(int?)) {}public ImmutableValueClass(int id, string name, string remarks) : this(id, name, remarks, default(int?)) {}public ImmutableValueClass(int id, string name, int? parentId) : this(id, name, null, parentId) {}public ImmutableValueClass(int id, string name, string remarks, int? parentId),,,// C# 3public string Remarks { get; private set; }// C# 2private readonly string _remarks;public string Remarks { get { return _remarks; } },,,// C# 3var other = obj as ImmutableValueClass;// C# 2ImmutableValueClass other = obj as ImmutableValueClass;,,,// C# 2public class ImmutableValueClass : IEquatable&lt;ImmutableValueClass&gt;, IComparable, IComparable&lt;ImmutableValueClass&gt;// C# 1public class ImmutableValueClass : IComparable,,,// C# 2public ImmutableValueClass(int id, string name) : this(id, name, null, default(int?))public ImmutableValueClass(int id, string name, string remarks) : this(id, name, remarks, default(int?))// C# 1public ImmutableValueClass(int id, string name) : this(id, name, null, new NullableInt())public ImmutableValueClass(int id, string name, string remarks) : this(id, name, remarks, new NullableInt()),,,using System;namespace CSharp80{public record ImmutableValueClass(int Id,string Name,string? Remarks = null,int? ParentId = default) : IComparable, IComparable&lt;ImmutableValueClass&gt;{public int CompareTo(object? obj)=&gt; obj is null ? 1: obj is ImmutableValueClass other ? CompareTo(other): throw new ArgumentException(nameof(obj) + " is not a " + nameof(ImmutableValueClass), nameof(obj));public int CompareTo(ImmutableValueClass? other)=&gt; other is null ? 1 : Id - other.Id;public static bool operator &gt; (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &gt; r.Id,({}, null) =&gt; true,(null, {}) =&gt; false,(null, null) =&gt; false};public static bool operator &lt; (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &lt; r.Id,({}, null) =&gt; false,(null, {}) =&gt; true,(null, null) =&gt; false};public static bool operator &gt;= (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &gt;= r.Id,({}, null) =&gt; true,(null, {}) =&gt; false,(null, null) =&gt; true};public static bool operator &lt;= (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &lt;= r.Id,({}, null) =&gt; false,(null, {}) =&gt; true,(null, null) =&gt; true};}},,,C# 6public void Deconstract(out int id, out string name, out string remarks, out int? parentId){id = Id;name = Name;remarks = Remarks;parentId = ParentId;},,,// C# 7.0public bool Equals(ImmutableValueClass other)=&gt; !(other is null)&amp;&amp; Id == other.Id&amp;&amp; Name == other.Name&amp;&amp; Remarks == other.Remarks&amp;&amp; ParentId == other.ParentId;public override bool Equals(object obj)=&gt; obj is ImmutableValueClass other &amp;&amp; Equals(other);// C# 6public bool Equals(ImmutableValueClass other)=&gt; !ReferenceEquals(other, null)&amp;&amp; Id == other.Id&amp;&amp; Name == other.Name&amp;&amp; Remarks == other.Remarks&amp;&amp; ParentId == other.ParentId;public override bool Equals(object obj)=&gt; Equals(obj as ImmutableValueClass);,,,// C# 6public int Id { get; }// C# 5private readonly int _id;public int Id { get { return _id; } }// orpublic int Id { get; private set; },,,// C# 6public override bool Equals(object obj)=&gt; Equals(obj as ImmutableValueClass);// C# 5public override bool Equals(object obj){return Equals(obj as ImmutableValueClass);},,,// C# 6public override string ToString()=&gt; $"{nameof(ImmutableValueClass)}: {{ {nameof(Id)}: {Id}, {nameof(Name)}: {Name}, {nameof(Remarks)}: {Remarks}, {nameof(ParentId)}: {ParentId} }}";// C# 5public override string ToString(){return string.Format("ImmutableValueClass: {{ Id: {0}, Name: {1}, Remarks: {2}, ParentId: {3} }}", Id, Name, Remarks, ParentId);},,,// C# 6if (ReferenceEquals(name, null))throw new ArgumentNullException(nameof(name));// C# 5if (ReferenceEquals(name, null))throw new ArgumentNullException("name");,,,// C# 4public ImmutableValueClass(int id, string name, string remarks = null, int? parentId = default(int?))// C# 3public ImmutableValueClass(int id, string name) : this(id, name, null, default(int?)) {}public ImmutableValueClass(int id, string name, string remarks) : this(id, name, remarks, default(int?)) {}public ImmutableValueClass(int id, string name, int? parentId) : this(id, name, null, parentId) {}public ImmutableValueClass(int id, string name, string remarks, int? parentId),,,// C# 3public string Remarks { get; private set; }// C# 2private readonly string _remarks;public string Remarks { get { return _remarks; } },,,// C# 3var other = obj as ImmutableValueClass;// C# 2ImmutableValueClass other = obj as ImmutableValueClass;,,,// C# 2public class ImmutableValueClass : IEquatable&lt;ImmutableValueClass&gt;, IComparable, IComparable&lt;ImmutableValueClass&gt;// C# 1public class ImmutableValueClass : IComparable,,,// C# 2public ImmutableValueClass(int id, string name) : this(id, name, null, default(int?))public ImmutableValueClass(int id, string name, string remarks) : this(id, name, remarks, default(int?))// C# 1public ImmutableValueClass(int id, string name) : this(id, name, null, new NullableInt())public ImmutableValueClass(int id, string name, string remarks) : this(id, name, remarks, new NullableInt()),,,using System;namespace CSharp80{public record ImmutableValueClass(int Id,string Name,string? Remarks = null,int? ParentId = default) : IComparable, IComparable&lt;ImmutableValueClass&gt;{public int CompareTo(object? obj)=&gt; obj is null ? 1: obj is ImmutableValueClass other ? CompareTo(other): throw new ArgumentException(nameof(obj) + " is not a " + nameof(ImmutableValueClass), nameof(obj));public int CompareTo(ImmutableValueClass? other)=&gt; other is null ? 1 : Id - other.Id;public static bool operator &gt; (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &gt; r.Id,({}, null) =&gt; true,(null, {}) =&gt; false,(null, null) =&gt; false};public static bool operator &lt; (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &lt; r.Id,({}, null) =&gt; false,(null, {}) =&gt; true,(null, null) =&gt; false};public static bool operator &gt;= (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &gt;= r.Id,({}, null) =&gt; true,(null, {}) =&gt; false,(null, null) =&gt; true};public static bool operator &lt;= (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &lt;= r.Id,({}, null) =&gt; false,(null, {}) =&gt; true,(null, null) =&gt; true};}},,,C# 6public int Id { get; }// C# 5private readonly int _id;public int Id { get { return _id; } }// orpublic int Id { get; private set; },,,// C# 6public override bool Equals(object obj)=&gt; Equals(obj as ImmutableValueClass);// C# 5public override bool Equals(object obj){return Equals(obj as ImmutableValueClass);},,,// C# 6public override string ToString()=&gt; $"{nameof(ImmutableValueClass)}: {{ {nameof(Id)}: {Id}, {nameof(Name)}: {Name}, {nameof(Remarks)}: {Remarks}, {nameof(ParentId)}: {ParentId} }}";// C# 5public override string ToString(){return string.Format("ImmutableValueClass: {{ Id: {0}, Name: {1}, Remarks: {2}, ParentId: {3} }}", Id, Name, Remarks, ParentId);},,,// C# 6if (ReferenceEquals(name, null))throw new ArgumentNullException(nameof(name));// C# 5if (ReferenceEquals(name, null))throw new ArgumentNullException("name");,,,// C# 4public ImmutableValueClass(int id, string name, string remarks = null, int? parentId = default(int?))// C# 3public ImmutableValueClass(int id, string name) : this(id, name, null, default(int?)) {}public ImmutableValueClass(int id, string name, string remarks) : this(id, name, remarks, default(int?)) {}public ImmutableValueClass(int id, string name, int? parentId) : this(id, name, null, parentId) {}public ImmutableValueClass(int id, string name, string remarks, int? parentId),,,// C# 3public string Remarks { get; private set; }// C# 2private readonly string _remarks;public string Remarks { get { return _remarks; } },,,// C# 3var other = obj as ImmutableValueClass;// C# 2ImmutableValueClass other = obj as ImmutableValueClass;,,,// C# 2public class ImmutableValueClass : IEquatable&lt;ImmutableValueClass&gt;, IComparable, IComparable&lt;ImmutableValueClass&gt;// C# 1public class ImmutableValueClass : IComparable,,,// C# 2public ImmutableValueClass(int id, string name) : this(id, name, null, default(int?))public ImmutableValueClass(int id, string name, string remarks) : this(id, name, remarks, default(int?))// C# 1public ImmutableValueClass(int id, string name) : this(id, name, null, new NullableInt())public ImmutableValueClass(int id, string name, string remarks) : this(id, name, remarks, new NullableInt()),,,using System;namespace CSharp80{public record ImmutableValueClass(int Id,string Name,string? Remarks = null,int? ParentId = default) : IComparable, IComparable&lt;ImmutableValueClass&gt;{public int CompareTo(object? obj)=&gt; obj is null ? 1: obj is ImmutableValueClass other ? CompareTo(other): throw new ArgumentException(nameof(obj) + " is not a " + nameof(ImmutableValueClass), nameof(obj));public int CompareTo(ImmutableValueClass? other)=&gt; other is null ? 1 : Id - other.Id;public static bool operator &gt; (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &gt; r.Id,({}, null) =&gt; true,(null, {}) =&gt; false,(null, null) =&gt; false};public static bool operator &lt; (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &lt; r.Id,({}, null) =&gt; false,(null, {}) =&gt; true,(null, null) =&gt; false};public static bool operator &gt;= (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &gt;= r.Id,({}, null) =&gt; true,(null, {}) =&gt; false,(null, null) =&gt; true};public static bool operator &lt;= (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &lt;= r.Id,({}, null) =&gt; false,(null, {}) =&gt; true,(null, null) =&gt; true};}},,,C# 5private readonly int _id;public int Id { get { return _id; } }// orpublic int Id { get; private set; },,,// C# 6public override bool Equals(object obj)=&gt; Equals(obj as ImmutableValueClass);// C# 5public override bool Equals(object obj){return Equals(obj as ImmutableValueClass);},,,// C# 6public override string ToString()=&gt; $"{nameof(ImmutableValueClass)}: {{ {nameof(Id)}: {Id}, {nameof(Name)}: {Name}, {nameof(Remarks)}: {Remarks}, {nameof(ParentId)}: {ParentId} }}";// C# 5public override string ToString(){return string.Format("ImmutableValueClass: {{ Id: {0}, Name: {1}, Remarks: {2}, ParentId: {3} }}", Id, Name, Remarks, ParentId);},,,// C# 6if (ReferenceEquals(name, null))throw new ArgumentNullException(nameof(name));// C# 5if (ReferenceEquals(name, null))throw new ArgumentNullException("name");,,,// C# 4public ImmutableValueClass(int id, string name, string remarks = null, int? parentId = default(int?))// C# 3public ImmutableValueClass(int id, string name) : this(id, name, null, default(int?)) {}public ImmutableValueClass(int id, string name, string remarks) : this(id, name, remarks, default(int?)) {}public ImmutableValueClass(int id, string name, int? parentId) : this(id, name, null, parentId) {}public ImmutableValueClass(int id, string name, string remarks, int? parentId),,,// C# 3public string Remarks { get; private set; }// C# 2private readonly string _remarks;public string Remarks { get { return _remarks; } },,,// C# 3var other = obj as ImmutableValueClass;// C# 2ImmutableValueClass other = obj as ImmutableValueClass;,,,// C# 2public class ImmutableValueClass : IEquatable&lt;ImmutableValueClass&gt;, IComparable, IComparable&lt;ImmutableValueClass&gt;// C# 1public class ImmutableValueClass : IComparable,,,// C# 2public ImmutableValueClass(int id, string name) : this(id, name, null, default(int?))public ImmutableValueClass(int id, string name, string remarks) : this(id, name, remarks, default(int?))// C# 1public ImmutableValueClass(int id, string name) : this(id, name, null, new NullableInt())public ImmutableValueClass(int id, string name, string remarks) : this(id, name, remarks, new NullableInt()),,,using System;namespace CSharp80{public record ImmutableValueClass(int Id,string Name,string? Remarks = null,int? ParentId = default) : IComparable, IComparable&lt;ImmutableValueClass&gt;{public int CompareTo(object? obj)=&gt; obj is null ? 1: obj is ImmutableValueClass other ? CompareTo(other): throw new ArgumentException(nameof(obj) + " is not a " + nameof(ImmutableValueClass), nameof(obj));public int CompareTo(ImmutableValueClass? other)=&gt; other is null ? 1 : Id - other.Id;public static bool operator &gt; (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &gt; r.Id,({}, null) =&gt; true,(null, {}) =&gt; false,(null, null) =&gt; false};public static bool operator &lt; (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &lt; r.Id,({}, null) =&gt; false,(null, {}) =&gt; true,(null, null) =&gt; false};public static bool operator &gt;= (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &gt;= r.Id,({}, null) =&gt; true,(null, {}) =&gt; false,(null, null) =&gt; true};public static bool operator &lt;= (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &lt;= r.Id,({}, null) =&gt; false,(null, {}) =&gt; true,(null, null) =&gt; true};}},,,orpublic int Id { get; private set; },,,// C# 6public override bool Equals(object obj)=&gt; Equals(obj as ImmutableValueClass);// C# 5public override bool Equals(object obj){return Equals(obj as ImmutableValueClass);},,,// C# 6public override string ToString()=&gt; $"{nameof(ImmutableValueClass)}: {{ {nameof(Id)}: {Id}, {nameof(Name)}: {Name}, {nameof(Remarks)}: {Remarks}, {nameof(ParentId)}: {ParentId} }}";// C# 5public override string ToString(){return string.Format("ImmutableValueClass: {{ Id: {0}, Name: {1}, Remarks: {2}, ParentId: {3} }}", Id, Name, Remarks, ParentId);},,,// C# 6if (ReferenceEquals(name, null))throw new ArgumentNullException(nameof(name));// C# 5if (ReferenceEquals(name, null))throw new ArgumentNullException("name");,,,// C# 4public ImmutableValueClass(int id, string name, string remarks = null, int? parentId = default(int?))// C# 3public ImmutableValueClass(int id, string name) : this(id, name, null, default(int?)) {}public ImmutableValueClass(int id, string name, string remarks) : this(id, name, remarks, default(int?)) {}public ImmutableValueClass(int id, string name, int? parentId) : this(id, name, null, parentId) {}public ImmutableValueClass(int id, string name, string remarks, int? parentId),,,// C# 3public string Remarks { get; private set; }// C# 2private readonly string _remarks;public string Remarks { get { return _remarks; } },,,// C# 3var other = obj as ImmutableValueClass;// C# 2ImmutableValueClass other = obj as ImmutableValueClass;,,,// C# 2public class ImmutableValueClass : IEquatable&lt;ImmutableValueClass&gt;, IComparable, IComparable&lt;ImmutableValueClass&gt;// C# 1public class ImmutableValueClass : IComparable,,,// C# 2public ImmutableValueClass(int id, string name) : this(id, name, null, default(int?))public ImmutableValueClass(int id, string name, string remarks) : this(id, name, remarks, default(int?))// C# 1public ImmutableValueClass(int id, string name) : this(id, name, null, new NullableInt())public ImmutableValueClass(int id, string name, string remarks) : this(id, name, remarks, new NullableInt()),,,using System;namespace CSharp80{public record ImmutableValueClass(int Id,string Name,string? Remarks = null,int? ParentId = default) : IComparable, IComparable&lt;ImmutableValueClass&gt;{public int CompareTo(object? obj)=&gt; obj is null ? 1: obj is ImmutableValueClass other ? CompareTo(other): throw new ArgumentException(nameof(obj) + " is not a " + nameof(ImmutableValueClass), nameof(obj));public int CompareTo(ImmutableValueClass? other)=&gt; other is null ? 1 : Id - other.Id;public static bool operator &gt; (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &gt; r.Id,({}, null) =&gt; true,(null, {}) =&gt; false,(null, null) =&gt; false};public static bool operator &lt; (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &lt; r.Id,({}, null) =&gt; false,(null, {}) =&gt; true,(null, null) =&gt; false};public static bool operator &gt;= (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &gt;= r.Id,({}, null) =&gt; true,(null, {}) =&gt; false,(null, null) =&gt; true};public static bool operator &lt;= (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &lt;= r.Id,({}, null) =&gt; false,(null, {}) =&gt; true,(null, null) =&gt; true};}},,,C# 5public override bool Equals(object obj){return Equals(obj as ImmutableValueClass);},,,// C# 6public override string ToString()=&gt; $"{nameof(ImmutableValueClass)}: {{ {nameof(Id)}: {Id}, {nameof(Name)}: {Name}, {nameof(Remarks)}: {Remarks}, {nameof(ParentId)}: {ParentId} }}";// C# 5public override string ToString(){return string.Format("ImmutableValueClass: {{ Id: {0}, Name: {1}, Remarks: {2}, ParentId: {3} }}", Id, Name, Remarks, ParentId);},,,// C# 6if (ReferenceEquals(name, null))throw new ArgumentNullException(nameof(name));// C# 5if (ReferenceEquals(name, null))throw new ArgumentNullException("name");,,,// C# 4public ImmutableValueClass(int id, string name, string remarks = null, int? parentId = default(int?))// C# 3public ImmutableValueClass(int id, string name) : this(id, name, null, default(int?)) {}public ImmutableValueClass(int id, string name, string remarks) : this(id, name, remarks, default(int?)) {}public ImmutableValueClass(int id, string name, int? parentId) : this(id, name, null, parentId) {}public ImmutableValueClass(int id, string name, string remarks, int? parentId),,,// C# 3public string Remarks { get; private set; }// C# 2private readonly string _remarks;public string Remarks { get { return _remarks; } },,,// C# 3var other = obj as ImmutableValueClass;// C# 2ImmutableValueClass other = obj as ImmutableValueClass;,,,// C# 2public class ImmutableValueClass : IEquatable&lt;ImmutableValueClass&gt;, IComparable, IComparable&lt;ImmutableValueClass&gt;// C# 1public class ImmutableValueClass : IComparable,,,// C# 2public ImmutableValueClass(int id, string name) : this(id, name, null, default(int?))public ImmutableValueClass(int id, string name, string remarks) : this(id, name, remarks, default(int?))// C# 1public ImmutableValueClass(int id, string name) : this(id, name, null, new NullableInt())public ImmutableValueClass(int id, string name, string remarks) : this(id, name, remarks, new NullableInt()),,,using System;namespace CSharp80{public record ImmutableValueClass(int Id,string Name,string? Remarks = null,int? ParentId = default) : IComparable, IComparable&lt;ImmutableValueClass&gt;{public int CompareTo(object? obj)=&gt; obj is null ? 1: obj is ImmutableValueClass other ? CompareTo(other): throw new ArgumentException(nameof(obj) + " is not a " + nameof(ImmutableValueClass), nameof(obj));public int CompareTo(ImmutableValueClass? other)=&gt; other is null ? 1 : Id - other.Id;public static bool operator &gt; (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &gt; r.Id,({}, null) =&gt; true,(null, {}) =&gt; false,(null, null) =&gt; false};public static bool operator &lt; (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &lt; r.Id,({}, null) =&gt; false,(null, {}) =&gt; true,(null, null) =&gt; false};public static bool operator &gt;= (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &gt;= r.Id,({}, null) =&gt; true,(null, {}) =&gt; false,(null, null) =&gt; true};public static bool operator &lt;= (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &lt;= r.Id,({}, null) =&gt; false,(null, {}) =&gt; true,(null, null) =&gt; true};}},,,C# 6public override string ToString()=&gt; $"{nameof(ImmutableValueClass)}: {{ {nameof(Id)}: {Id}, {nameof(Name)}: {Name}, {nameof(Remarks)}: {Remarks}, {nameof(ParentId)}: {ParentId} }}";// C# 5public override string ToString(){return string.Format("ImmutableValueClass: {{ Id: {0}, Name: {1}, Remarks: {2}, ParentId: {3} }}", Id, Name, Remarks, ParentId);},,,// C# 6if (ReferenceEquals(name, null))throw new ArgumentNullException(nameof(name));// C# 5if (ReferenceEquals(name, null))throw new ArgumentNullException("name");,,,// C# 4public ImmutableValueClass(int id, string name, string remarks = null, int? parentId = default(int?))// C# 3public ImmutableValueClass(int id, string name) : this(id, name, null, default(int?)) {}public ImmutableValueClass(int id, string name, string remarks) : this(id, name, remarks, default(int?)) {}public ImmutableValueClass(int id, string name, int? parentId) : this(id, name, null, parentId) {}public ImmutableValueClass(int id, string name, string remarks, int? parentId),,,// C# 3public string Remarks { get; private set; }// C# 2private readonly string _remarks;public string Remarks { get { return _remarks; } },,,// C# 3var other = obj as ImmutableValueClass;// C# 2ImmutableValueClass other = obj as ImmutableValueClass;,,,// C# 2public class ImmutableValueClass : IEquatable&lt;ImmutableValueClass&gt;, IComparable, IComparable&lt;ImmutableValueClass&gt;// C# 1public class ImmutableValueClass : IComparable,,,// C# 2public ImmutableValueClass(int id, string name) : this(id, name, null, default(int?))public ImmutableValueClass(int id, string name, string remarks) : this(id, name, remarks, default(int?))// C# 1public ImmutableValueClass(int id, string name) : this(id, name, null, new NullableInt())public ImmutableValueClass(int id, string name, string remarks) : this(id, name, remarks, new NullableInt()),,,using System;namespace CSharp80{public record ImmutableValueClass(int Id,string Name,string? Remarks = null,int? ParentId = default) : IComparable, IComparable&lt;ImmutableValueClass&gt;{public int CompareTo(object? obj)=&gt; obj is null ? 1: obj is ImmutableValueClass other ? CompareTo(other): throw new ArgumentException(nameof(obj) + " is not a " + nameof(ImmutableValueClass), nameof(obj));public int CompareTo(ImmutableValueClass? other)=&gt; other is null ? 1 : Id - other.Id;public static bool operator &gt; (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &gt; r.Id,({}, null) =&gt; true,(null, {}) =&gt; false,(null, null) =&gt; false};public static bool operator &lt; (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &lt; r.Id,({}, null) =&gt; false,(null, {}) =&gt; true,(null, null) =&gt; false};public static bool operator &gt;= (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &gt;= r.Id,({}, null) =&gt; true,(null, {}) =&gt; false,(null, null) =&gt; true};public static bool operator &lt;= (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &lt;= r.Id,({}, null) =&gt; false,(null, {}) =&gt; true,(null, null) =&gt; true};}},,,C# 5public override string ToString(){return string.Format("ImmutableValueClass: {{ Id: {0}, Name: {1}, Remarks: {2}, ParentId: {3} }}", Id, Name, Remarks, ParentId);},,,// C# 6if (ReferenceEquals(name, null))throw new ArgumentNullException(nameof(name));// C# 5if (ReferenceEquals(name, null))throw new ArgumentNullException("name");,,,// C# 4public ImmutableValueClass(int id, string name, string remarks = null, int? parentId = default(int?))// C# 3public ImmutableValueClass(int id, string name) : this(id, name, null, default(int?)) {}public ImmutableValueClass(int id, string name, string remarks) : this(id, name, remarks, default(int?)) {}public ImmutableValueClass(int id, string name, int? parentId) : this(id, name, null, parentId) {}public ImmutableValueClass(int id, string name, string remarks, int? parentId),,,// C# 3public string Remarks { get; private set; }// C# 2private readonly string _remarks;public string Remarks { get { return _remarks; } },,,// C# 3var other = obj as ImmutableValueClass;// C# 2ImmutableValueClass other = obj as ImmutableValueClass;,,,// C# 2public class ImmutableValueClass : IEquatable&lt;ImmutableValueClass&gt;, IComparable, IComparable&lt;ImmutableValueClass&gt;// C# 1public class ImmutableValueClass : IComparable,,,// C# 2public ImmutableValueClass(int id, string name) : this(id, name, null, default(int?))public ImmutableValueClass(int id, string name, string remarks) : this(id, name, remarks, default(int?))// C# 1public ImmutableValueClass(int id, string name) : this(id, name, null, new NullableInt())public ImmutableValueClass(int id, string name, string remarks) : this(id, name, remarks, new NullableInt()),,,using System;namespace CSharp80{public record ImmutableValueClass(int Id,string Name,string? Remarks = null,int? ParentId = default) : IComparable, IComparable&lt;ImmutableValueClass&gt;{public int CompareTo(object? obj)=&gt; obj is null ? 1: obj is ImmutableValueClass other ? CompareTo(other): throw new ArgumentException(nameof(obj) + " is not a " + nameof(ImmutableValueClass), nameof(obj));public int CompareTo(ImmutableValueClass? other)=&gt; other is null ? 1 : Id - other.Id;public static bool operator &gt; (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &gt; r.Id,({}, null) =&gt; true,(null, {}) =&gt; false,(null, null) =&gt; false};public static bool operator &lt; (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &lt; r.Id,({}, null) =&gt; false,(null, {}) =&gt; true,(null, null) =&gt; false};public static bool operator &gt;= (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &gt;= r.Id,({}, null) =&gt; true,(null, {}) =&gt; false,(null, null) =&gt; true};public static bool operator &lt;= (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &lt;= r.Id,({}, null) =&gt; false,(null, {}) =&gt; true,(null, null) =&gt; true};}},,,if (ReferenceEquals(name, null))throw new ArgumentNullException(nameof(name)); C# 6if (ReferenceEquals(name, null))throw new ArgumentNullException("name"); C# 5C# 3public ImmutableValueClass(int id, string name) : this(id, name, null, default(int?)) {}public ImmutableValueClass(int id, string name, string remarks) : this(id, name, remarks, default(int?)) {}public ImmutableValueClass(int id, string name, int? parentId) : this(id, name, null, parentId) {}public ImmutableValueClass(int id, string name, string remarks, int? parentId),,,// C# 3public string Remarks { get; private set; }// C# 2private readonly string _remarks;public string Remarks { get { return _remarks; } },,,// C# 3var other = obj as ImmutableValueClass;// C# 2ImmutableValueClass other = obj as ImmutableValueClass;,,,// C# 2public class ImmutableValueClass : IEquatable&lt;ImmutableValueClass&gt;, IComparable, IComparable&lt;ImmutableValueClass&gt;// C# 1public class ImmutableValueClass : IComparable,,,// C# 2public ImmutableValueClass(int id, string name) : this(id, name, null, default(int?))public ImmutableValueClass(int id, string name, string remarks) : this(id, name, remarks, default(int?))// C# 1public ImmutableValueClass(int id, string name) : this(id, name, null, new NullableInt())public ImmutableValueClass(int id, string name, string remarks) : this(id, name, remarks, new NullableInt()),,,using System;namespace CSharp80{public record ImmutableValueClass(int Id,string Name,string? Remarks = null,int? ParentId = default) : IComparable, IComparable&lt;ImmutableValueClass&gt;{public int CompareTo(object? obj)=&gt; obj is null ? 1: obj is ImmutableValueClass other ? CompareTo(other): throw new ArgumentException(nameof(obj) + " is not a " + nameof(ImmutableValueClass), nameof(obj));public int CompareTo(ImmutableValueClass? other)=&gt; other is null ? 1 : Id - other.Id;public static bool operator &gt; (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &gt; r.Id,({}, null) =&gt; true,(null, {}) =&gt; false,(null, null) =&gt; false};public static bool operator &lt; (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &lt; r.Id,({}, null) =&gt; false,(null, {}) =&gt; true,(null, null) =&gt; false};public static bool operator &gt;= (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &gt;= r.Id,({}, null) =&gt; true,(null, {}) =&gt; false,(null, null) =&gt; true};public static bool operator &lt;= (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &lt;= r.Id,({}, null) =&gt; false,(null, {}) =&gt; true,(null, null) =&gt; true};}},,,C# 3public string Remarks { get; private set; }// C# 2private readonly string _remarks;public string Remarks { get { return _remarks; } },,,// C# 3var other = obj as ImmutableValueClass;// C# 2ImmutableValueClass other = obj as ImmutableValueClass;,,,// C# 2public class ImmutableValueClass : IEquatable&lt;ImmutableValueClass&gt;, IComparable, IComparable&lt;ImmutableValueClass&gt;// C# 1public class ImmutableValueClass : IComparable,,,// C# 2public ImmutableValueClass(int id, string name) : this(id, name, null, default(int?))public ImmutableValueClass(int id, string name, string remarks) : this(id, name, remarks, default(int?))// C# 1public ImmutableValueClass(int id, string name) : this(id, name, null, new NullableInt())public ImmutableValueClass(int id, string name, string remarks) : this(id, name, remarks, new NullableInt()),,,using System;namespace CSharp80{public record ImmutableValueClass(int Id,string Name,string? Remarks = null,int? ParentId = default) : IComparable, IComparable&lt;ImmutableValueClass&gt;{public int CompareTo(object? obj)=&gt; obj is null ? 1: obj is ImmutableValueClass other ? CompareTo(other): throw new ArgumentException(nameof(obj) + " is not a " + nameof(ImmutableValueClass), nameof(obj));public int CompareTo(ImmutableValueClass? other)=&gt; other is null ? 1 : Id - other.Id;public static bool operator &gt; (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &gt; r.Id,({}, null) =&gt; true,(null, {}) =&gt; false,(null, null) =&gt; false};public static bool operator &lt; (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &lt; r.Id,({}, null) =&gt; false,(null, {}) =&gt; true,(null, null) =&gt; false};public static bool operator &gt;= (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &gt;= r.Id,({}, null) =&gt; true,(null, {}) =&gt; false,(null, null) =&gt; true};public static bool operator &lt;= (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &lt;= r.Id,({}, null) =&gt; false,(null, {}) =&gt; true,(null, null) =&gt; true};}},,,C# 2private readonly string _remarks;public string Remarks { get { return _remarks; } },,,// C# 3var other = obj as ImmutableValueClass;// C# 2ImmutableValueClass other = obj as ImmutableValueClass;,,,// C# 2public class ImmutableValueClass : IEquatable&lt;ImmutableValueClass&gt;, IComparable, IComparable&lt;ImmutableValueClass&gt;// C# 1public class ImmutableValueClass : IComparable,,,// C# 2public ImmutableValueClass(int id, string name) : this(id, name, null, default(int?))public ImmutableValueClass(int id, string name, string remarks) : this(id, name, remarks, default(int?))// C# 1public ImmutableValueClass(int id, string name) : this(id, name, null, new NullableInt())public ImmutableValueClass(int id, string name, string remarks) : this(id, name, remarks, new NullableInt()),,,using System;namespace CSharp80{public record ImmutableValueClass(int Id,string Name,string? Remarks = null,int? ParentId = default) : IComparable, IComparable&lt;ImmutableValueClass&gt;{public int CompareTo(object? obj)=&gt; obj is null ? 1: obj is ImmutableValueClass other ? CompareTo(other): throw new ArgumentException(nameof(obj) + " is not a " + nameof(ImmutableValueClass), nameof(obj));public int CompareTo(ImmutableValueClass? other)=&gt; other is null ? 1 : Id - other.Id;public static bool operator &gt; (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &gt; r.Id,({}, null) =&gt; true,(null, {}) =&gt; false,(null, null) =&gt; false};public static bool operator &lt; (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &lt; r.Id,({}, null) =&gt; false,(null, {}) =&gt; true,(null, null) =&gt; false};public static bool operator &gt;= (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &gt;= r.Id,({}, null) =&gt; true,(null, {}) =&gt; false,(null, null) =&gt; true};public static bool operator &lt;= (ImmutableValueClass? left, ImmutableValueClass? right)=&gt; (left, right) switch{(ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &lt;= r.Id,({}, null) =&gt; false,(null, {}) =&gt; true,(null, null) =&gt; true};}},,,
    
 [SerializeField, AssetsOnly] GameObject target;
        
 予約可能かどうか判定する?
            
public void DrawImage (System.Drawing.Image image, int x, int y, System.Drawing.Rectangle srcRect, System.Drawing.GraphicsUnit srcUnit);
            BaseAddress = new Uri("https:
localhost:59320api")
            
btnSave.Enabled = false;
        
Application.Run(new XmlTreeView(@"hogehoge.xml"));
    
コンストラクタをこちらで定義した場合自動生成対象外
    lastnameText.SetFocus();
今のところそんなメソッドはない。
    
シリーズ画面//今回リファクタリングまで終わった実装
[TestMethod]

    public UnityEngine.UI.Button retryButton; 
 Inspectorで設定
            
今立ち上げているサーバーにプレイヤーを追加登録
    
 以下メンバ変数にはblendshape名が含まれる
    
 -------省略--------
    
 Update is called once per frame
            
接触していない時は跳ねないように
        
 ソースコード
xmlns:mc="http:
schemas.openxmlformats.orgmarkup-compatibility2006"
        
 図形を描画する。
        
 データが取得できたので、その位置にオブジェクトを生成する生成されて一定時間で消えるゲームオブジェクトの例public class SampleObject : MonoBehaviour{const float lifeTimeMax = 0.5f;float lifeTime = lifeTimeMax;void Update(){lifeTime -= Time.deltaTime;if (lifeTime &lt; 0){Destroy(this.gameObject);}}},,,// 生成されて一定時間で消えるゲームオブジェクトの例
public class SampleObject : MonoBehaviour

            return tcs.Task;  
--- 完了が通知されるTaskを返す
        
 取得したデータ数とデータ総数を渡す
        Selection.objects = originalSelectedObjects; 
 操作前の選択状態に戻す。
    
 publicなフィールドだからこれは良くない
    
 Update is called once per frame
    object Version9() { return new(); } 
 C# 9 target-typed new 
        var data2 = default(Data); 
 1 = current, 2 = prev
        [Page(Url = "http:
www.selenium.academyExamplesInteraction.html")]
        
 省略
    
 従来の場合 c を何度も書く必要があった
        
右スティックでの回転
            
保存します。
                    
数式のあるセルを出力します。
            subwindow.ShowDialog(); 
Show()にすると後ろにあるMainWindowの操作が可能
// ネイティブ関数呼び出し
StringBuilder.ReplaceBufferInternal

    
 作成情報をEditorPrefsへ保存しておく。
    
 例外に対応した処理
        
 あとは読み込んだ値を使って諸々セットなどの処理を行う
    (null, null) =&gt; "まだまだだね", 
 網羅性チェックのためにあえて null, null。条件漏れ防いでる// input が NRT 対応で string?
 ひそかに target-typed 条件演算子で value : null が成り立ってる

                        
 過密
                
 The default HSTS value is 30 days. You may want to change this for production scenarios, see https:aka.msaspnetcore-hsts.
                
shiftjisは可変長なので、2バイトで区切るとくしゃくしゃになる
            
 コンソールに出力
    
 バイト配列を渡し、バイト配列の戻り値を受け取る
// 現在のHierarchyのRootにあるGameObjectの一覧
var currentSceneGameObjects = SceneManager.GetActiveScene().GetRootGameObjects();
// まずDontDestroyOnLoadされたGameObjectを作る
var go = new GameObject(string.Empty);
// DontDestroyOnLoadはSceneの一種なので,GameObject.sceneから取得することができる
var dontDestroyOnLoadGameObjects = go.scene.GetRootGameObjects();

    
 public override Enemy Create () { return new BossEnemy(); }
 
保存します。
                    
 読み込んで画面に表示
            int WAIT_TIME = 10; 
 seconds
            animator.speed = 0; 
 再生をポーズ
    TestContext.CurrentTestOutcome  
〇:本来こっちには何も入れてない気がするが、このインスタンスはその時動いたテスト情報が入る
                            
 白
            
 カレントディレクトリを元の場所に戻す
        
ILSpy generated this explicit interface implementation from .override directive in SetStateMachine
        
var anyText = Encoding.ASCII.GetString(buff, 0, 80);
// 以下同じようなコードが続いていた
,,,

        
 戻りの型引数は必須
    
 do something another type
var uri = new Uri("http:
httpbin.orgpost");Responseの表示var responseContent = await msg.Content.ReadAsStringAsync();Console.WriteLine($"{responseContent}");,,,// Responseの表示
var responseContent = await msg.Content.ReadAsStringAsync();

        
 KeyValuePairのValueはJToken?型のため、stringに変換する。// emojisがJObject
 emojisの実態は、
foreach (var emoji in emojis){ というKeyとValueの羅列
        
 解放
            
 単一行モード
        
非同期処理
        
 以下省略
    
 OCR実行
        lineRenderer.SetColors(lineColor,lineColor);    
 色の設定
            
 sec というパラメータに入れた数字を秒数として、その時間だけ実行する
// Document objectを作成します。
Document document = new Document();
// Wordファイルをロードします。
document.LoadFromFile("Input.docx");
foreach(Section section in document.Sections){文書をループして、段落全体を削除します。//保存します。
document.SaveToFile("RemoveAllParagraphs.docx", FileFormat.Docx2013);
//Document objectを作成します。
Document document = new Document();
//Wordファイルをロードします。
document.LoadFromFile("Input.docx");
//一つ目の段落を削除します。
document.Sections[0].Paragraphs.RemoveAt(0);
//保存します。
document.SaveToFile("RemoveParagraph.docx", FileFormat.Docx2013);

    float theta = 0.08f; 
閾値。設定は微妙なので要調整。
            
 Postgres
//PPTを作成します。
Presentation ppt = new Presentation();
//プロパティを設定します。
ppt.DocumentProperty.Title = "パンダについて";
//保存します。
ppt.SaveToFile("プロパティ.pptx", FileFormat.Pptx2013);
//PPTをロードします。
Presentation ppt = new Presentation();
//プロパティを読み込みます。
Console.WriteLine("タイトル: " + ppt.DocumentProperty.Title);

        
line に一行ずつ入る （改行コードは入っていない）
        
    .CreateLogger();
        } 
 コンストラクタが呼ばれたら New !! を出力する// Module2, 3 も共通
,,,

            
DIされた内容が配列として渡ってきます
  
ファイルの有無確認
        
 選択変更時のコマンド
// Streamから
public static PdfDocumentBase MergeFiles(Stream[] streams);
//Stringから
public static PdfDocumentBase MergeFiles(string[] InputFiles);
//指定するパスから
public static PdfDocumentBase MergeFiles(string firstInputFile, string secInputFile);

        
write decrypted data to file
        airStayTime = 0.7f;　
滞空時間を延長
        
参照型を参照渡しでインスタンス置き換え
    private readonly string _endpoint = "https:
api.bing.microsoft.comv7.0";
    Player.player.playerHp--;
クラス名.変数名.変数で、Playerクラスの変数を取得できる。Playerで宣言したこと(int playerHp等)がplayerに入っているイメージ
        using ( var sw = new System.IO.StreamWriter("SampleOutput.xml", false, new System.Text.UTF8Encoding(false)) ) 
 BOMなしUTF-8
    
frame.Navigate(typeof(AnotherPage));
        
報酬を与える
            
 特定フォルダ名は除外
    
 OK
        
配列に入れたTransformを順に巡る．AIを使っていればスムーズに曲がるがこれは鋭角に曲がる
        
[DllImport("dlltest")]
            
保存します。
//印刷範囲を設定します。

//タイトルを印刷します。

//印刷の順を設定します。

// PrintDialogを設定します。

//片面印刷します。

//印刷範囲を設定します。

//部数を設定します。

//プリンターの名前を設定します。

//印刷します。

//Excelをロードします。

//サイレント印刷します。


            
 Function input comes from the request content.
        
 2. 該当する画面のカメラでワールド座標に変換
            
 WebViewのサイズを変更する。
              if(notesTime =&lt; 0)
判定位置に来たら
    
 JPEGとして保存
    
同様に3項、4項...の実装があると便利かも
    
↓属性設定が無いとエラーになります
            Source = new Uri("https:
www.google.co.jp"),
// API keyとAPI secret keyを用意する
string apiKey = "abcdefg";
// API keyとAPI secret keyをコロンでつなぐ
string strBearerTokenCredentials = apiKey + ":" + apiSecretKey;
// byteの配列に変換する
byte[] byteBearerTokenCredentials = Encoding.ASCII.GetBytes(strBearerTokenCredentials);
// stringのbase64に変換する
string strBearerTokenCredentialsBase64 = Convert.ToBase64String(byteBearerTokenCredentials);

        Hash = SHA256.Create(); 
dummy//ハッシュ値を算出
byte[] namebyte = Encoding.UTF8.GetBytes(name);
//ソルトを作成(最低8byte必要)
byte[] salt1 = new byte[8];
//ハッシュ値を算出
string hashstring = string.Empty;
ストレッチングの反復処理回数1000、アルゴリズムにSHA256using (Rfc2898DeriveBytes pbkdf2 = new Rfc2898DeriveBytes(name, salt1, 1000, HashAlgorithmName.SHA256)){byte[] hashbyte = pbkdf2.GetBytes(32);hashstring = BitConverter.ToString(hashbyte);}//出力Console.WriteLine($"今からお前の名前は{hashstring}だ。いいかい、{hashstring}だよ。分かったら返事をするんだ、{hashstring}!!");Console.WriteLine($"そして、これがソルトだよ！：{BitConverter.ToString(salt1)}");,,,using System;using System.Security.Cryptography;string name = "千尋";//前回決めたソルトstring salt = "AF-70-37-73-C6-E3-22-A9";//前回求めたハッシュ値string prevhash = "19-A3-4B-9E-D8-25-4E-A7-12-02-86-D7-AB-6D-D7-7B-8D-C6-CB-B9-0C-C8-70-18-44-64-6F-DF-2D-63-AF-C6";//ソルトをbyte配列に変換string[] saltstrings = salt.Split("-");byte[] saltbytes = new byte[saltstrings.Length];for (int i=0; i &lt; saltstrings.Length; i++){saltbytes[i] = Convert.ToByte(saltstrings[i], 16);}//ハッシュ値を算出string hashstring = string.Empty;using (Rfc2898DeriveBytes pbkdf2 = new Rfc2898DeriveBytes(name, saltbytes, 1000, HashAlgorithmName.SHA256)){byte[] hashbyte = pbkdf2.GetBytes(32);hashstring = BitConverter.ToString(hashbyte);}//結果判定を出力if (prevhash.Equals(hashstring)){Console.WriteLine("OK");} else{Console.WriteLine("NG");},,,using System;using Bcrypt = BCrypt.Net.BCrypt;Console.WriteLine("契約書だよ。そこに名前を書きな。");var name = Console.ReadLine();Console.WriteLine($"フン。{name}というのかい。贅沢な名だねぇ。");//ハッシュ値を算出int cost = 11; //ストレッチングの回数 (2^11回)string hashstring = Bcrypt.EnhancedHashPassword(name, cost);//出力Console.WriteLine($"今からお前の名前は{hashstring}だ。いいかい、{hashstring}だよ。分かったら返事をするんだ、{hashstring}!!");,,,bool validate = Bcrypt.EnhancedVerify(name, hashstring);Console.WriteLine(validate);,,,using System;using Isopoh.Cryptography.Argon2;Console.WriteLine("契約書だよ。そこに名前を書きな。");var name = Console.ReadLine();Console.WriteLine($"フン。{name}というのかい。贅沢な名だねぇ。");//ハッシュ値を算出string hashstring = Argon2.Hash(name);//出力Console.WriteLine($"今からお前の名前は{hashstring}だ。いいかい、{hashstring}だよ。分かったら返事をするんだ、{hashstring}!!");,,,bool validate = Argon2.Verify(hashstring, name);Console.WriteLine(validate);,,,//ストレッチングの反復処理回数1000、アルゴリズムにSHA256
using (Rfc2898DeriveBytes pbkdf2 = new Rfc2898DeriveBytes(name, salt1, 1000, HashAlgorithmName.SHA256))
出力Console.WriteLine($"今からお前の名前は{hashstring}だ。いいかい、{hashstring}だよ。分かったら返事をするんだ、{hashstring}!!");Console.WriteLine($"そして、これがソルトだよ！：{BitConverter.ToString(salt1)}");,,,using System;using System.Security.Cryptography;string name = "千尋";//前回決めたソルトstring salt = "AF-70-37-73-C6-E3-22-A9";//前回求めたハッシュ値string prevhash = "19-A3-4B-9E-D8-25-4E-A7-12-02-86-D7-AB-6D-D7-7B-8D-C6-CB-B9-0C-C8-70-18-44-64-6F-DF-2D-63-AF-C6";//ソルトをbyte配列に変換string[] saltstrings = salt.Split("-");byte[] saltbytes = new byte[saltstrings.Length];for (int i=0; i &lt; saltstrings.Length; i++){saltbytes[i] = Convert.ToByte(saltstrings[i], 16);}//ハッシュ値を算出string hashstring = string.Empty;using (Rfc2898DeriveBytes pbkdf2 = new Rfc2898DeriveBytes(name, saltbytes, 1000, HashAlgorithmName.SHA256)){byte[] hashbyte = pbkdf2.GetBytes(32);hashstring = BitConverter.ToString(hashbyte);}//結果判定を出力if (prevhash.Equals(hashstring)){Console.WriteLine("OK");} else{Console.WriteLine("NG");},,,using System;using Bcrypt = BCrypt.Net.BCrypt;Console.WriteLine("契約書だよ。そこに名前を書きな。");var name = Console.ReadLine();Console.WriteLine($"フン。{name}というのかい。贅沢な名だねぇ。");//ハッシュ値を算出int cost = 11; //ストレッチングの回数 (2^11回)string hashstring = Bcrypt.EnhancedHashPassword(name, cost);//出力Console.WriteLine($"今からお前の名前は{hashstring}だ。いいかい、{hashstring}だよ。分かったら返事をするんだ、{hashstring}!!");,,,bool validate = Bcrypt.EnhancedVerify(name, hashstring);Console.WriteLine(validate);,,,using System;using Isopoh.Cryptography.Argon2;Console.WriteLine("契約書だよ。そこに名前を書きな。");var name = Console.ReadLine();Console.WriteLine($"フン。{name}というのかい。贅沢な名だねぇ。");//ハッシュ値を算出string hashstring = Argon2.Hash(name);//出力Console.WriteLine($"今からお前の名前は{hashstring}だ。いいかい、{hashstring}だよ。分かったら返事をするんだ、{hashstring}!!");,,,bool validate = Argon2.Verify(hashstring, name);Console.WriteLine(validate);,,,//出力
Console.WriteLine($"今からお前の名前は{hashstring}だ。いいかい、{hashstring}だよ。分かったら返事をするんだ、{hashstring}!!");
//前回決めたソルト
string salt = "AF-70-37-73-C6-E3-22-A9";
//前回求めたハッシュ値
string prevhash = "19-A3-4B-9E-D8-25-4E-A7-12-02-86-D7-AB-6D-D7-7B-8D-C6-CB-B9-0C-C8-70-18-44-64-6F-DF-2D-63-AF-C6";
//ソルトをbyte配列に変換
string[] saltstrings = salt.Split("-");
//ハッシュ値を算出
string hashstring = string.Empty;
if (prevhash.Equals(hashstring)){結果判定を出力//ハッシュ値を算出
int cost = 11; ストレッチングの回数 (2^11回)
出力Console.WriteLine($"今からお前の名前は{hashstring}だ。いいかい、{hashstring}だよ。分かったら返事をするんだ、{hashstring}!!");,,,bool validate = Bcrypt.EnhancedVerify(name, hashstring);Console.WriteLine(validate);,,,using System;using Isopoh.Cryptography.Argon2;Console.WriteLine("契約書だよ。そこに名前を書きな。");var name = Console.ReadLine();Console.WriteLine($"フン。{name}というのかい。贅沢な名だねぇ。");//ハッシュ値を算出string hashstring = Argon2.Hash(name);//出力Console.WriteLine($"今からお前の名前は{hashstring}だ。いいかい、{hashstring}だよ。分かったら返事をするんだ、{hashstring}!!");,,,bool validate = Argon2.Verify(hashstring, name);Console.WriteLine(validate);,,,//出力
Console.WriteLine($"今からお前の名前は{hashstring}だ。いいかい、{hashstring}だよ。分かったら返事をするんだ、{hashstring}!!");
//ハッシュ値を算出
string hashstring = Argon2.Hash(name);
出力Console.WriteLine($"今からお前の名前は{hashstring}だ。いいかい、{hashstring}だよ。分かったら返事をするんだ、{hashstring}!!");,,,bool validate = Argon2.Verify(hashstring, name);Console.WriteLine(validate);,,,//出力
Console.WriteLine($"今からお前の名前は{hashstring}だ。いいかい、{hashstring}だよ。分かったら返事をするんだ、{hashstring}!!");

        
 反映
            
 jsonが読み込めない時
            
保存します。
                
 ChargeRateInMilliwattsが－なら放電中(SC)
        public int BirthDay { get; set; }  
  誕生日
.Where(p =&gt; p.Id != current.Id) 
 ←自分以外を指定(プロセス名は同じでも、プロセスIDはそれぞれ異なる)
        
Case2：まとめて記述する場合
            Console.WriteLine(s);
 赤 黄 青
    
 接続中
    
 void* pointer
    
通知受信時の処理を行うように命令する。
@product.Name 
 Pen
            
 (ブロックチェーンへの書き込み)
            
 ブラウザを閉じる
                    
 イベントを投げる方
        root.Add(ce);  
 ...2
            
 以下は、取得したAPIキーに置き換えてください。
            
TypeのGUIDから64bit用のレジストリを検索する。
IEnumerable&lt;int&gt; vs = uniReadOnlyCollection; 
エラー！インターフェイスが絡んでいるので暗黙的な型変換が行われない
StartCoroutine(ExecuteTaskCoroutin()); 
 エンジンの初期化タイミング（ユーザーコードが走りだす前に）
// 値が等しい
実際の値.Sholud().Be(期待値);
// 値がNULL
実際の値.Sholud().BeNull();
// 値がNULLではない
実際の値.Sholud().NotBeNull();
// 値がTrue
実際の値.Sholud().BeTrue();
// 値がFalse
実際の値.Sholud().BeFalse();
// 値が同じオブジェクト
実際の値.Should().BeSameAs(期待値);
// 同じ要素を含む
実際の値.Should().BeEquivalentTo(期待値);
// 空のコレクション
実際の値.Should().BeEmpty();
// 期待値より後
実際の値.Should().BeAfter(期待値);
実際の値.Should().BeBefore(期待値); 期待値より前// 期待値とズレ(単位:ms)の範囲内
実際の値.Should().BeCloseTo(期待値,　ズレ);

    
 自作した例外の場合は発生した例外を InnerException に入れておくためのコンストラクタを作成する
        
 SampleMethod()実行
        callerContext.Post(() =&gt; 
 呼び出し元のContext（≒スレッド）に戻す
                
 Generate Keys
foo(new("Tanaka")); 
 PropertyChangedEventArgs の new とかで使いそう
        
 ヘッダーを名前で指定することでマッピングできる
        
 英語は発音記号1文字毎の処理で良い
            
前進処理
        img.CacheOption = BitmapCacheOption.OnLoad; 
 ←ここが重要
  if (T != null)  
 取得できなかったら`null`になる。// StaticとNonPublicを両方指定しないといけない。
var info = MyClass.GetProperty("Prop", BindingFlags.Static | BindingFlags.NonPublic);
// ここでも`BindingFlags.Static`が必要。
dynamic val = info.GetValue(MyClass, BindingFlags.Static, null, null, null);
// 取得した`val`で何かする
,,,

        
 GET: HomeControllerDetails5
                
 動画フォルダ読み込み直後のメモリ使用量を確かめたい。
    
 staticメソッド呼び出し
        .Take(10) 
 上位 10 件
// .NET 5 RC 1 以降


 
VBの「ReDimPreserve」と等価で代入済みの値を維持する
        
...(中略)...
            
 トグルボタンを押すたびにstartstopする
            
「一つ前の」スタックを参照する
        
（※厳密には、タイトルバーと枠線を考慮に入れていないので収まらない）
                
画像を保存
                    
 Read the stream as a string, and write the string to the console.
                
 何もしない// 別ソリューションで作成します。
 Assemblyが読み込めることが確認できれば良いので中身は空っぽです。

        FormClosed += (s,e)=&gt;{Value = txt.Text;}; 
 SubFormが閉じられたときにデータをセットしておく
        var offset = 50; 
 取得した通りの値だと動きすぎるので少し調整してやります
            
 ((IInitializeWithWindow)(object)picker).Initialize(...);
            
 既存モデルの頭部を非表示にする
                driver.Navigate().GoToUrl("https:
www.google.co.jp");
        string curDir = Environment.CurrentDirectory; 
 Directory.GetCurrentDirectory() でも同様
            
 dateA の翌日が欲しかったが 31 日であることに気付かず日付に 1 を足してしまった。
                            .Max();                                                 
 一番新しい日付のものを取り出す
            
 終了処理をキャンセル
        private const int WS_MAXIMIZEBOX = 0x0001_0000; 
 C#7より前の場合は 0x00010000
    
 この一文を追加する。
    
怒られずにnullチェック済みのxを使って処理が可能
    
 PDF頁を追加// 結合するPDFを閉じる
inputDocument.Close();
// PDF保存
document.Save(selectedPath);
// PDFを閉じる
document.Close();

                driver.Navigate().GoToUrl("https:
developer.mozilla.orgjadocsWebHTMLElementselect");
            var uri = new Uri(string.Format("https:
{0}{1}", RelayNamespace, ConnectionName));
Console.WriteLine(t); 
 "hoge"
            WordWrap = false, 
 折り返し表示をしない
        
 ※13の階乗(13!)は C#の intの最大値 (2^31)-1 を超えてオーバーフローする
            FormattingEnabled = true, 
 頂いたコメントを受けて追加しました！
        lsv.Items.Clear(); 
 ※Itemsを忘れると列ヘッダごと消えます
    
 タッチされた時に呼ばれる関数
    
▼対象のテストクラス
        
private int sec = 0;
                
 The default HSTS value is 30 days. You may want to change this for production scenarios, see https:aka.msaspnetcore-hsts.
        toDown = xxxCtrl.ToDown; 
IXXXControlの実装が保証されている！
        
 length of the argument `s` must be even value. 
    
 値型の参照渡し
        return "OK"; 
input?.ToUpper();
    
 loop = 何らかの処理
                
 コントロールの再描画要求
            new OpcodeDef("Jarl disp22,reg2"             ,true  ,RelJmp,   "rrrrr11110dddddd","ddddddddddddddd0",FormatId.V    ,DescReg123           ), 
 仮desc
    
イベントハンドラ2
anoはタプルではない！匿名型var ano = strList.Select((str, index) =&gt; new { str, index });,,,//↓NG : '&lt;anonymous type: string str, int index&gt;'を'(string str, int index)'に暗黙的に変換できません//(string str, int index) val = ano.FirstOrDefault();,,,List&lt;string&gt; strList = new List&lt;string&gt;() { "AAA", "BBB", "CCC", "DDD", "EEE"};//tupはタプル！var tup = strList.Select((str, index) =&gt; (str, index));,,,//↓OK(string str, int index) val = tup.FirstOrDefault();,,,//anoはタプルではない！匿名型
var ano = strList.Select((str, index) =&gt; new { str, index });
//↓NG : '&lt;anonymous type: string str, int index&gt;'を'(string str, int index)'に暗黙的に変換できません
(string str, int index) val = ano.FirstOrDefault();
//tupはタプル！
var tup = strList.Select((str, index) =&gt; (str, index));

        Controls.Add(menuStrip);   
 注意：panel より先に登録してしまうと、panelとmenuStripが重なって表示されてしまう。
        
 Encode texture into PNG
            
  バブルソートの実行。この処理内でソート処理のアニメーションが実行される。
// Dictionary&lt;キー型, 値型&gt;
Dictionary&lt;int, string&gt; dic = new Dictionary&lt;int, string&gt;();

        
保存します。
PersonRecord { LastName = Wagner, FirstName = Bill }  
 PersonRecordのToString
SEE: https:github.com/andeart/UnityLabs.ReorderableListEditornamespace Andeart.ReorderableListEditor{/// &lt;summary&gt;/// Custom editor to allow re-orderable lists/arrays in Unity Inspector automatically./// This custom editor overrides Unity's default SerializedProperty drawing for arrays and lists./// This is inspired by Valentin Simonov's blog article here:/// http://va.lent.in/unity-make-your-lists-functional-with-reorderablelist/ , along with additional tweaks/functionality./// &lt;/summary&gt;/// &lt;inheritdoc /&gt;[CustomEditor(typeof(Object), true)][CanEditMultipleObjects]public class ReorderableListEditor : Editor{private Dictionary&lt;string, ReorderableListProperty&gt; _reorderableListDict;protected virtual void OnEnable(){_reorderableListDict = new Dictionary&lt;string, ReorderableListProperty&gt;();}protected virtual void OnDestroy(){_reorderableListDict.Clear();_reorderableListDict = null;}public override void OnInspectorGUI(){var propertyValueColor = GUI.color;serializedObject.Update();var property = serializedObject.GetIterator();if (property.NextVisible(true)){do{GUI.color = propertyValueColor;DrawProperty(property);} while (property.NextVisible(false));}serializedObject.ApplyModifiedProperties();}private void DrawProperty(SerializedProperty property){var isPropertyMonoBehaviourId = property.name.Equals("m_Script")&amp;&amp; property.type.Equals("PPtr&lt;MonoScript&gt;")&amp;&amp; (property.propertyType == SerializedPropertyType.ObjectReference)&amp;&amp; property.propertyPath.Equals("m_Script");if (isPropertyMonoBehaviourId){EditorGUI.BeginDisabledGroup(true);EditorGUILayout.PropertyField(property);EditorGUI.EndDisabledGroup();return;}if (property.isArray &amp;&amp; property.propertyType != SerializedPropertyType.String){this.DrawListProperty(property);}else{EditorGUILayout.PropertyField(property, property.isExpanded);}}private void DrawListProperty(SerializedProperty property){var reorderableListProperty = this.GetReorderableList(property);if (reorderableListProperty.property.isExpanded == false){reorderableListProperty.DoListHeader();}else{reorderableListProperty.DoLayoutList();}EditorGUILayout.GetControlRect(true, -2f);}private ReorderableListProperty GetReorderableList(SerializedProperty property){if (_reorderableListDict.TryGetValue(property.name, out var reorderableListProperty)){reorderableListProperty.property = property;return reorderableListProperty;}reorderableListProperty = new ReorderableListProperty(property);_reorderableListDict[property.name] = reorderableListProperty;return reorderableListProperty;}private class ReorderableListProperty{private const float HeaderLeftMargin = 10f;private const float ElementTopMargin = 2f;private const float ElementLeftMargin = 9f;private const float ElementVerticalMargin = 4f;private static readonly FieldInfo ReorderableListDefaultsField = typeof(ReorderableList).GetField("s_Defaults", BindingFlags.Static | BindingFlags.NonPublic);private static readonly MethodInfo DoListHeaderMethod = typeof(ReorderableList).GetMethod("DoListHeader", BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.InvokeMethod);private ReorderableList _list;private SerializedProperty _property;public SerializedProperty property{get =&gt; _property;set{_property = value;_list.serializedProperty = _property;}}public ReorderableListProperty(SerializedProperty property){_property = property;_list = new ReorderableList(_property.serializedObject, _property, true, true, true, true);_list.drawHeaderCallback += this.OnDrawHeader;_list.drawElementCallback += this.OnDrawElement;_list.elementHeightCallback += this.OnElementHeight;_list.onCanRemoveCallback += this.OnCanRemove;}~ReorderableListProperty(){_property = null;_list = null;}private void OnDrawHeader(Rect rect){_property.isExpanded = EditorGUI.Foldout(new Rect(rect.x + HeaderLeftMargin, rect.y, rect.width, rect.height),_property.isExpanded,_property.displayName,true,EditorStyles.foldout);}private void OnDrawElement(Rect rect, int index, bool active, bool focused){rect.y += ElementTopMargin;rect.height = EditorGUIUtility.singleLineHeight;var propertyChild = _property.GetArrayElementAtIndex(index);if (propertyChild.propertyType == SerializedPropertyType.Generic){rect.x += ElementLeftMargin;rect.width -= ElementLeftMargin;EditorGUI.LabelField(rect, propertyChild.displayName);}EditorGUI.PropertyField(rect, propertyChild, GUIContent.none, true);_list.elementHeight = rect.height + ElementVerticalMargin;}private float OnElementHeight(int index){return Mathf.Max(EditorGUIUtility.singleLineHeight,EditorGUI.GetPropertyHeight(_property.GetArrayElementAtIndex(index), GUIContent.none, true)) + ElementVerticalMargin;}private bool OnCanRemove(ReorderableList list){return 0 &lt; _list.count;}public void DoListHeader(){if (ReorderableListDefaultsField.GetValue(null) == null){ReorderableListDefaultsField.SetValue(null, new ReorderableList.Defaults());}var rect = GUILayoutUtility.GetRect(0.0f, _list.headerHeight, GUILayout.ExpandWidth(true));DoListHeaderMethod.Invoke(_list, new object[] {rect});}public void DoLayoutList(){_list.DoLayoutList();}}}}#endif,,,
    
 -----
            
 HttpHelpers はUtilで定義
            
ToSVGStream(Stream stream)メソッドでシートを別々にSVGで保存   
                
 Librdkafka debug options               
    
 return;
        
プレイヤーの正面始まりなので、表示のための計算にはラジアンをπ2だけ移動させる
    
 Test OK.
        
 これはひとまず気にしないでいい
            spl2.SplitterDistance = 200; 
 分割線の位置を指定[pixel] Verticalの場合は左端からの位置
            
defaultsに指定しているクラスのcontrollerプロパティを[Home]→[SubSystemHome]に変更
    
 新規追加
        private MainPageViewModel ViewModel { get; } = new MainPageViewModel(); 
 add
        
CameraのRenderTextureを元に画像を作成して保存
        
 wavファイルを削除
Console.WriteLine(++a); 
 a = a + 1してからaを表示
// credential の作成
var credentials = SdkContext.AzureCredentialsFactory
// Azure オブジェクトの作成
var azure = Microsoft.Azure.Management.Fluent.Azure
// WebApps の config を取得
var siteConfig = (await azure.WebApps.Inner.GetConfigurationWithHttpMessagesAsync(resourceGroupName, functionAppName)).Body;
// config から CORS の一覧を取得
var corsList = siteConfig.Cors.AllowedOrigins;
COSR の一覧に登録するドメインを追加var additionalDomain = "{登録するドメイン}";corsList.Add(additionalDomain);// CORS の一覧を設定var newSiteConfig = new SiteConfigResourceInner() { Cors = new CorsSettings() };newSiteConfig.Cors.AllowedOrigins = corsList;// WebApps の config を更新await azure.WebApps.Inner.CreateOrUpdateConfigurationWithHttpMessagesAsync(resourceGroupName, functionAppName, newSiteConfig);,,,// COSR の一覧に登録するドメインを追加
var additionalDomain = "{登録するドメイン}";
CORS の一覧を設定var newSiteConfig = new SiteConfigResourceInner() { Cors = new CorsSettings() };newSiteConfig.Cors.AllowedOrigins = corsList;// WebApps の config を更新await azure.WebApps.Inner.CreateOrUpdateConfigurationWithHttpMessagesAsync(resourceGroupName, functionAppName, newSiteConfig);,,,// CORS の一覧を設定
var newSiteConfig = new SiteConfigResourceInner() { Cors = new CorsSettings() };
// WebApps の config を更新
await azure.WebApps.Inner.CreateOrUpdateConfigurationWithHttpMessagesAsync(resourceGroupName, functionAppName, newSiteConfig);

        public int Price { get; set; } 
 新しく追加したカラム
            
 HttpHelpers はUtilで定義
                        
Console.Write("trail: " + trail + "\n");
int d = (int)c        
 エラー（オーバーフロー）// コンパイルエラー
   型 'double' を 'int' に暗黙的に変換できません。
//   明示的な変換が存在します (cast が不足していないかどうかを確認してください)）
,,,

            Minimum =  Int32.MinValue, 
 -0x80000000
                
 例外を発生させる文言をセット
    
処理
        
 解析処理
    
 使用例以下エラーとなる[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 20)]public string txt { get; set; },,,// 以下エラーとなる
[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 20)]

        if (time &gt;= 0.5f)  
timeが0.5秒経ったらGameMainに遷移される
    
 呼び出す
                
 CSVのフォーマットが不正な場合に発生
        
 Do something
    
 メソッドも同様に書いていく// 最大HP計算用の定数
private const int PIEACE_AMOUNT = 4;
コンストラクタpublic PlayerHp(int initialHeartCount){if (initialHeartCount &lt;= 0){throw new TypeInitializationException(typeof(PlayerHp).FullName,new ArgumentOutOfRangeException());}int initHp = initialHeartCount * PIEACE_AMOUNT;maxHp = initHp;currentHp = initHp;}// 以下略,,,// コンストラクタ
public PlayerHp(int initialHeartCount)
// 以下略
,,,

            
 Function input comes from the request content.
                
 appSettings.json の Admins にオブジェクト ID が含まれているか評価
    
 Test OK.
    
クリックしたら親オブジェクトの駒を移動する
            
 アウトラインを抽出して合成
[TestCase("^[0-9]{3}hoge[A-Z]{3}$", "ABChoge123")]
 Test OK.
        
描画する（自作関数）
        
StartCor()を使ってMove.csのMoveToを開始
        
 ここでもちいてるcontextは利用しているクラス(HandlerとかPageとか)に応じて適当なものを利用してください
        
 応力ベクトルを計算する
    
 多重起動
            player = ConvertExtension.ChangeType&lt;Player&gt;(data[nameof(player)]) 
 nullableなMapデータをPlayerに変換する
    
子要素クラスを使用して配列を作成//シリアライズされた子要素クラス
[System.Serializable]

    
戻り値のドキュメントに対する処理// Taskリストの初期化
var tasks = new List&lt;Task&gt;();
for (var i = 0; i &lt;100; i++){ 同期的にタスクを作成し、リストに格納（これらのタスクはまだスケジュールされていません）// リスト中の全てのタスクの完了を待つ
await Task.WhenAll(tasks);
foreach (var task in tasks){ リストから順次、結果を受け取る
    app.UseAuthentication(); 
認証ミドルウェアの追加
    
 Insert the access token in the request
            
 Test NG.
                driver.Navigate().GoToUrl("https:
www.google.co.jp");    
            
 元画像 3:差分画像 7 で合成
            
 メッセージを表示する// 配列の要素数(ここでは11個)
private const int ElementNum = 11;

public void eventMaking()            
 Kazumi75Button.csクリックイベントの実体(参照するリストボックスに文言テキストを追加)public void doClickEvent(object sender, EventArgs e){this.targetLbox.Items.Add(this.buttonMsg);},,,// 配列の要素数(ここでは8個)private const int ElementNum = 8;…(中略)…string[] msgs = new string[ElementNum];msgs[0] = "浦賀";msgs[1] = "鎌倉";msgs[2] = "三崎";msgs[3] = "観音崎";msgs[4] = "横須賀中央";msgs[5] = "城ヶ島";msgs[6] = "七里ガ浜";msgs[7] = "馬堀";,,,// クリックイベントの実体(参照するリストボックスに文言テキストを追加)
public void doClickEvent(object sender, EventArgs e)
// 配列の要素数(ここでは8個)
private const int ElementNum = 8;

            
攻撃力が100以上のものを、強武器とする
    
データベースを表示
            element.Focus(); 
 フォーカスを当てる
            
});
    
 log(b)_base:a を計算する// 対数関数の値のreturnの1行だけであれば、以下の省略型も可
culc2tests[5] = (int a, int b) =&gt; Math.Log((double)b, (double)a);

                
 結果を閉じる
      
 FullName プロパティに AutoNotify がついてるので、FullName プロパティで参照しているプロパティが変更されたときに自動で変更通知とばす
    throw new 例外クラス(例外オブジェクトの詳細メッセージ);    
メッセージは省略可呼び出されたメソッド内の例外ハンドラから呼び出し元に再度例外を投げる(例外の再throw)catch (Exception e) {例外処理throw;}//投げられた例外は呼び出し元の例外ハンドラで例外処理される,,,//呼び出されたメソッド内の例外ハンドラから呼び出し元に再度例外を投げる(例外の再throw)
catch (Exception e) {
//投げられた例外は呼び出し元の例外ハンドラで例外処理される
,,,

            
 1秒に一回"ev1"イベントが発生する
                        
弾が当たったときの処理
            
ローカルファイルの開放
        
 100万回ガチャを引いて、排出確率を調べてみる
            
 値が不一致の場合
            
 カメラから画像取り込んで表示
    
 リクエストを送信する
// frameはtexture情報をバイナリで保持している独自クラス
var texture2D = new Texture2D(frame.Width, frame.Height, TextureFormat.RGBA32, false);
// これを追加した
Destroy(material.mainTexture);

                        
 it works!
        
入力値の判定結果（文言）を返すメソッド
            
 ヌケニンのHPは常に1
            
 略
        
 This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
    
 標準出力へ書き出し
    
（デフォルトはEnvironment.NewLine ※WindowsならCRLF、MacLinuxならLF）
        
 (月 + 日) % 6 の余り
    trans.Rollback();                   
 例外発生時はロールバック
        
 チャットのメッセージを取得
//ジェネリック自体の型を取得
t.MakeGenericType(指定したい型のType);
//ジェネリック自体の型を取得
Type t2 = t.MakeGenericType(指定したい型のType);

                
 post SQL query
    
 ToStringの実装にも使える// 内部的にはこんな感じ
 バリュータプルを使っているけど、内部的にはバリュータプルは生成されませんhttps:sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+ABATARgFgAoE7AZgAI9KAFAewEsA7GSgbxMu+qpbYAaHSgHM4MANyUAvlx4VK/SgE1hYyTLnctvOk1YAKJQA8ki1pQCeASkoBeAHyUDAs8tt3npq9YklZxEA===
public class Point//{//    [CompilerGenerated]//    [DebuggerBrowsable(DebuggerBrowsableState.Never)]//    private readonly int &lt;X&gt;k__BackingField;////    [CompilerGenerated]//    [DebuggerBrowsable(DebuggerBrowsableState.Never)]//    private readonly int &lt;Y&gt;k__BackingField;////    public int X//    {//        [CompilerGenerated]//        get//        {//            return &lt;X&gt;k__BackingField;//        }//    }////    public int Y//    {//        [CompilerGenerated]//        get//        {//            return &lt;Y&gt;k__BackingField;//        }//    }////    public Point(int x, int y)//    {//        &lt;X&gt;k__BackingField = x;//        &lt;Y&gt;k__BackingField = y;//    }//},,,//    public int X//    {//        [CompilerGenerated]//        get//        {//            return &lt;X&gt;k__BackingField;//        }//    }////    public int Y//    {//        [CompilerGenerated]//        get//        {//            return &lt;Y&gt;k__BackingField;//        }//    }////    public Point(int x, int y)//    {//        &lt;X&gt;k__BackingField = x;//        &lt;Y&gt;k__BackingField = y;//    }//},,,public int X//    {//        [CompilerGenerated]//        get//        {//            return &lt;X&gt;k__BackingField;//        }//    }////    public int Y//    {//        [CompilerGenerated]//        get//        {//            return &lt;Y&gt;k__BackingField;//        }//    }////    public Point(int x, int y)//    {//        &lt;X&gt;k__BackingField = x;//        &lt;Y&gt;k__BackingField = y;//    }//},,,[CompilerGenerated]//        get//        {//            return &lt;X&gt;k__BackingField;//        }//    }////    public int Y//    {//        [CompilerGenerated]//        get//        {//            return &lt;Y&gt;k__BackingField;//        }//    }////    public Point(int x, int y)//    {//        &lt;X&gt;k__BackingField = x;//        &lt;Y&gt;k__BackingField = y;//    }//}get//        {//            return &lt;X&gt;k__BackingField;//        }//    }//    public int Y//    {//        [CompilerGenerated]//        get//        {//            return &lt;Y&gt;k__BackingField;//        }//    }////    public Point(int x, int y)//    {//        &lt;X&gt;k__BackingField = x;//        &lt;Y&gt;k__BackingField = y;//    }//}public int Y//    {//        [CompilerGenerated]//        get//        {//            return &lt;Y&gt;k__BackingField;//        }//    }////    public Point(int x, int y)//    {//        &lt;X&gt;k__BackingField = x;//        &lt;Y&gt;k__BackingField = y;//    }//}[CompilerGenerated]//        get//        {//            return &lt;Y&gt;k__BackingField;//        }//    }get//        {//            return &lt;Y&gt;k__BackingField;//        }//    }//    public Point(int x, int y)//    {//        &lt;X&gt;k__BackingField = x;//        &lt;Y&gt;k__BackingField = y;//    }//}public Point(int x, int y)//    {//        &lt;X&gt;k__BackingField = x;//        &lt;Y&gt;k__BackingField = y;//    }//}
            var service = provider.GetService&lt;IAppService&gt;(); 
 IAppService型のサービスを取得
                if (service.Name == name) {        
 プロパティでサービスを判定
        
C#側は、DataGridオブジェクトにデータを設定して、Bindするだけ。
//enumを利用したほうがわかりやすいと思いますが、今回はintで分岐処理を行います。

//type = 2: WASAPI(排他)
type = 3: WASAPI(共有)

                        
ファイルへ書き出し
    
 100は適当な大きな数値でOK
     
 裏画面の内容を表画面に反映する
    xmlns:x="http:
schemas.microsoft.comwinfx2006xaml"
    
 イベントを実行
        
中心を基準として円弧を補間する
        
DumpTextOfActiveSheet();
                SurfaceType.Ceiling, 
 天井.
                
handle remove
    
 ServerEp.Address  ServerEp.Port でサーバのIPポート番号を取得
                &lt;#= CreateSwitchFields(0, count) #&gt;  
★Indexのフィールドを参照
        
 [Authorize]を付与するとログイン必要となる
            Console.WriteLine($"AsyncMethod end : {Thread.CurrentThread.ManagedThreadId}");                 
 5 (スレッドB)
            
cast to see if we are looking at the floor:
// Androidバージョンによってはエラーが発生する書き方
var context = Android.App.Application.Context;
// 正常に動作する書き方
var context = (Context)Plugin.CurrentActivity.CrossCurrentActivity.Current.Activity;

            
インデックス用カウンターを進める
                    udpClient.Send(buff, buff.Length, endPoint); 
 受信内容をエコー
        
前回の入力座標をリセット
    
 右のリストボックスにアイテムを追加
        
 また、IDEのリネーム機能を使った場合、↓の内容もリネーム対象となる
            
画像の解放
    
 現在のステートを実行
            inputs[2*k+1].Type = 1; 
 KeyBoard = 1
            
まだ存在してなかったら作成
                
 MySqlの接続エラー処理をここに書く
        StreamWriter writer = new StreamWriter(filePath, false); 
true追記、false上書き
    
! SelectedItemsの中身を取り出すメソッド
                if (sc is SC_MOVE or SC_MAXIMIZE or SC_MINIMIZE) 
 C# 9.0 の書き方なので、それより前の場合は == と || 使って書いて
        
実行時コンパイルの有効化
        
 三つ選択がある（SelectedItems.Count=3）としたら、3回ループして欲しい（n=0,1,2）ので n &lt; SelectedItems.count
        
 中身の確認
        _list.RemoveRange(0, result);                               
リストのインデックス 0～result を削除
        
構成情報の参照
    
明示的なインターフェイスの実装
        
青色→赤色へLerpExampleと同じ補間値で推移
        
テクスチャをスプライトに変換
        fileSystemMock.File.Exists(expectedRenamedFilePath)   
☆変更
    
 省略
// [exit]を送信するまでは何度でもプロットでき、その都度、画像データを取得できます。

// --- 省略 ---

// --- 省略 ---
,,,

        
 移行の処理は実行されません。
    static T Gcd(T a, T b) =&gt; b &gt; a ? Gcd(b, a) : (b == 0 ? a : Gcd(b, a % b)); 
 この行がコンパイル不能// LongOperator, UIntOperator, ULongOperator なども同様に定義
,,,

                endpoints.MapRazorPages();   
認証の為のページ遷移設定の読み込み
  [Table("blogs", Schema = "blogging")] 
スキーマの設定
    
 機体の移動
    
 ・・・Modelから通知を受けたり、コマンドを受けてModelを実行したりだけ
            
 以下 2 行を追加
                        
 オブジェクトを受け入れる.
Console.WriteLine(string.Join(",",ary)); 
aryを連結して出力// numsの要素の中で２より大きい値の3,4,5が出力される
,,,

    
ポールにランダムな傾きを与えるキーボードから操作する場合public override void Heuristic(float[] actionsOut){actionsOut[0] = Input.GetAxis("Horizontal");},,,//キーボードから操作する場合
public override void Heuristic(float[] actionsOut)

 
privateShellTextBoxShell;
    
 Start is called before the first frame update
    } 
****
//改行も入ります
var num = 20;
//コンマ区切り
Console.WriteLine(string.Join(",", array));
//スペース区切り
Console.WriteLine(string.Join(" ", array));
//改行区切り
Console.WriteLine(string.Join("\r\n", array));

        
テキストファイルを読み込んだ結果を返す処理
Register default client as HttpClientservices.TryAddTransient(s =&gt;{return s.GetRequiredService&lt;IHttpClientFactory&gt;().CreateClient(string.Empty);});,,,
  
xx@xx.com
    
 Start is called before the first frame update
    public void GenerateTextPrefab()
テキストプレハブのテキストにインプットフィールドのテキストを代入して生成し、スピードを設定する。
    
このscriptに登録されているオブジェクトをX方向に-mouse_yの値分、回転する
    
毎フレーム行われる処理
            
 画面遷移元から、この画面に遷移したときにパラメータを受け取れる。
                    SetReward (0f); 
 引き分け報酬
        
 プロパティ変更通知しないと新しいReactivePropertyが機能しない
                    
範囲内のオブジェクトのRigidbodyに爆破の力を作用させる
    if(条件) await Task.Delay(~); 
特定の条件下で発行間隔を増やす
            DX.SetDrawScreen(DX.DX_SCREEN_BACK); 
裏画面処理を設定する
                DX.ScreenFlip(); 
2つの画面を入れ替える
                .CombineLatestValuesAreAllFalse()   
 すべてエラーなしの場合にアクティブ設定
driver.Navigate().GoToUrl("https:
www.google.co.jp");
        
 TODO : GameObjectとの紐付け( これ以外の方法があるかはまだわからない ).
//ログイン処理
.

    
 ここではvalueをnull非許容として扱える
            
 なんらかの処理が続く
        
 プラットフォームからの落下
        return json;
使いやすいように変換してください
        private static readonly List&lt;int&gt; numList;          
 検証リスト
            
タッチキーボードの位置・サイズを取得し、幅0なら非表示とみなす
            e = e % 2;  
  eに、eを2で割った余りを代入する
        
 Setup で指定した引数設定と同一のため、呼び出されず Returns で設定した戻り値が返却されている
        
 Write the binary AudioContent of the response to an MP3 file.
            if(gray&gt;158){ 
閾値は、適当に
    
 時間で行ったり来たりする
    
 Digest認証の設定// JSONシリアライザーの設定（今回はUtf8Jsonを使用）
client.UseUtf8Json();
// リクエストの生成（Resourceとレスポンスのデータフォーマットを設定）
var request = new RestRequest("foobaz", DataFormat.Json);
// 同期呼び出し
var response = client.Get(request);
// JSONデータをデシリアライズ
var result = new Utf8JsonSerializer().Deserialize&lt;Foo&gt;(response);
// 非同期呼び出し（resultがFoo型として返ってくる）
var result = await client.GetAsync&lt;Foo&gt;(request);

    
 ここで nonPrintableCharacterTexts を調整
        
pythonから出力があるたびに呼び出される
        
レイが当たったか判定
            dynamic lnk = shell.CreateShortcut(fullPath);
 IWshRuntimeLibrary.IWshShortcut
                
 フォーカス移動失敗
        
 ILogger logger = new FileLogger("log.txt");
        
通知の送信処理...//--省略
var affectedRecordCount = await sp.ExecuteNonQuery();

            
Another your mapping rule.
        
 Since the elements are sorted we only need to do one comparision, we keep the check for j inside the loop.
var reference = databaseRoot.Child("users").Child(UserId).Child("backup"); 
 user-id直ではなく、backupに保存// Action&lt;bool&gt; callback = xxx //何かコールバック関数を定義
string data = JsonUtility.ToJson(saveData);
//UIスレッドを触る可能性があるので、コールバックを渡すためのコンテキストを退避しておく
var context = System.Threading.SynchronizationContext.Current;
// Action&lt;UserSaveData&gt; callback = xxx //何かコールバック関数を定義
UIスレッドを触る可能性があるので、コールバックを渡すためのコンテキストを退避しておく

            if (String.Compare(Path.GetFileName(        win.FullName), "EXPLORER.EXE", true)==0) { 
 キャスト無し
        
リネーム保存実行
            
 受信処理
            
 それぞれの平均値を出力
    yield return _button.OnClickAsync().ToCoroutine(); 
 OnClickAsync()はUniTaskの機能です
    
 ・
            uint t2Cast = (uint)t2; 
 ここで例外が発生する
        
874f9960c5d2b7a9b5fad383e1ba44719ebb743a
                
 ここで無理やり0番地にデータをコピーするようにした
            
 試しにテキトーな鍵で復号してみる
            
 201 Created を返す。レスポンスヘッダにLocationを追加しリソースのURLを返す。
                
 ユーザー認証 失敗
// 日付・時刻あり
string strDateTime = "2020/10/22 15:01:11";
// 時刻省略
string strDate = "2020/10/22";
// 日付省略
string strTime = "15:01:11";

ビュー表示用public ActionResult Input(InputContents input){ViewBag.SelectOptions = new SelectListItem[]{new SelectListItem(){Value="1",Text="text1"},new SelectListItem(){Value="2",Text="text2"},new SelectListItem(){Value="3",Text="text3"}};return View(input);}//キャンセルボタンが押されたときに呼び出される[HttpPost][MultipleButton(Name = "action", Argument = "Cancel")]public ActionResult Cancel(InputContents input){return View("Input", input);}//保存ボタンが押されたときに呼び出される[HttpPost][MultipleButton(Name = "action", Argument = "Save")]public ActionResult Save(InputContents input){return View("Input", input);},,,//ビュー表示用
public ActionResult Input(InputContents input)
//キャンセルボタンが押されたときに呼び出される
[HttpPost]
//保存ボタンが押されたときに呼び出される
[HttpPost]

                
series.Color = Color.Tomato;
            driver.Navigate().GoToUrl(@"https:
www.google.co.jp");
        inputs[1].Type = 1; 
 KeyBoard = 1
                    
ImageオブジェクトのGraphicsオブジェクトを作成する
        NativeMethods.SetProcessDPIAware(); 
 高解像度のスケーリング座標に対応するため
        
 取得されたジェスチャ.
                
 初期設定できてないので初期設定画面を表示
            
 切断中
    [Route("~
About")]  e.g https:localhost:5001About
    HttpResponseMessage responseMessage = await Http.PostAsJsonAsync&lt;SomeType&gt;("https:
localhost:12345apiGetPdf", parameter);
        
読み込み
            
 再作成時、古いHICONは必ず廃棄する！
        
targer以上の要素の個数を返す
{ 
以下略
    
 ミドルウェアのコレクション
    IOSTClient = new Client("https:
api.iost.io");
        .ValidateEagerly(); 
 起動時に設定を検証する StartupFilter を DI に追加
            
視点の回転
// こうは書けません。
 int? value = text == null ? null : 100;

        t.Type = 0; 
 MOUSE = 0
        
 snip...
        string TweetURL = "https:
twitter.comintenttweet?text=" + esctext + "&amp;hashtags=" + esctag + "&amp;url=" + url;
                
 The default HSTS value is 30 days. You may want to change this for production scenarios, see https:aka.msaspnetcore-hsts.
プロパティ宣言public ReactiveCommand CloseWindow { get; } = new ReactiveCommand();// コンストラクタ内CloseWindow.Subscribe(x =&gt; ((System.Windows.Window)x).Close());,,,// コンストラクタ内OK.Subscribe(x =&gt; {result = MessageBox.Show("ウィンドウを閉じてもよろしいですか？", "確認メッセージ", MessageBoxButtons.OKCancel);if (result == DialogResult.Cancel)return;elseCloseWindow.Execute(x);});,,,// プロパティ宣言
public ReactiveCommand CloseWindow { get; } = new ReactiveCommand();
// コンストラクタ内
CloseWindow.Subscribe(x =&gt; ((System.Windows.Window)x).Close());
コンストラクタ内OK.Subscribe(x =&gt; {result = MessageBox.Show("ウィンドウを閉じてもよろしいですか？", "確認メッセージ", MessageBoxButtons.OKCancel);if (result == DialogResult.Cancel)return;elseCloseWindow.Execute(x);});,,,// コンストラクタ内
OK.Subscribe(x =&gt; {

        
 Wait 2 seconds then destroy the prefab.
    
 取得する手（右手か左手か任意の手）
    inSerializer.Populate(jObject.CreateReader(), result); 
 これでOK
    return actressSearch.ToActressList();                                              
データベース用クラス変換
            driver.Navigate().GoToUrl($"https:
translate.google.com?sl=en&amp;tl=ja");
    var response = await client.GetAsync("http:
localhost:5001testsync");
                
 画像の保存
        
 挨拶を表示する処理
                
 指定のパスに既に同名のファイルが存在する場合は更新
            using (UnityWebRequest www = UnityWebRequestMultimedia.GetAudioClip("file:
" + filename, AudioType.OGGVORBIS))
                    
口の動きを同期通信させる
// 月～金が表示される
}

                        
 Append page_info
            
FindElement"s"  で複数形
    
 this.pipe.EndWaitForConnection(result);
                
 encInfo = "*************************";
usingは省略。Prismを使用していますnamespace MyNamespace{public class MainWindowViewModel : BindableBase{private Visibility _MyUserControlVisibility = Visibility.Hidden;public Visibility MyUserControlVisibility{get { return _MyUserControlVisibility; }set { SetProperty(ref _MyUserControlVisibility, value); }}}public class MainWindow : Window{public MainWindow(){InitializeComponent();}}},,,// usingは省略namespace MyNamespace{public class MyUserControlViewModel : BindableBase{private Visibility _Visibility = Visibility.Hidden;public Visibility Visibility{get { return _Visibility; }set { SetProperty(ref _Visibility, value); }}}public class MyUserControl : UserControl{public MyUserControl(){InitializeComponent();}}},,,// usingは省略namespace MyNamespace{public class MainWindowViewModel{private MyUserControlViewModel _MyControl1VM;public MyUserControlViewModel MyControl1VM{get { return _MyControl1VM; }set { SetProperty(ref _MyControl1VM, value); }}public class MainWindow : Window{public MainWindow(){InitializeComponent();MainWindowViewModel VM = DataContext;VM.MyControl1VM = MyControl1.DataContext;}}},,,// usingは省略。Prismを使用しています
namespace MyNamespace
usingは省略namespace MyNamespace{public class MyUserControlViewModel : BindableBase{private Visibility _Visibility = Visibility.Hidden;public Visibility Visibility{get { return _Visibility; }set { SetProperty(ref _Visibility, value); }}}public class MyUserControl : UserControl{public MyUserControl(){InitializeComponent();}}},,,// usingは省略namespace MyNamespace{public class MainWindowViewModel{private MyUserControlViewModel _MyControl1VM;public MyUserControlViewModel MyControl1VM{get { return _MyControl1VM; }set { SetProperty(ref _MyControl1VM, value); }}public class MainWindow : Window{public MainWindow(){InitializeComponent();MainWindowViewModel VM = DataContext;VM.MyControl1VM = MyControl1.DataContext;}}},,,// usingは省略
namespace MyNamespace
usingは省略namespace MyNamespace{public class MainWindowViewModel{private MyUserControlViewModel _MyControl1VM;public MyUserControlViewModel MyControl1VM{get { return _MyControl1VM; }set { SetProperty(ref _MyControl1VM, value); }}public class MainWindow : Window{public MainWindow(){InitializeComponent();MainWindowViewModel VM = DataContext;VM.MyControl1VM = MyControl1.DataContext;}}},,,// usingは省略
namespace MyNamespace

// 重複をチェックする
var result1 = collection.HasDuplicate(c =&gt; c);
// 重複を除去する
var result2 = collection.DistinctByKey(c =&gt; c);

        IndexName = "Date-Time-index" 
 利用する GSI を指定
        
 libgrpc_csharp_ext missing bitcode. as BITCODE exand binary size to 250MB.
            
セッションIDを持っていなければクッキーに埋め込む
                
 Mouse tends to be even more sensitive in WebGL due to mouse acceleration, so reduce it even more
            
保存
        
 
            
イメージで保存します。
            
Regionが「USEast1」なのは作成したPoolIDのプレフィックスと同じにしている為
        
2～5秒の間でランダムに再接続を試みる
            
Index.razorから参照するのでインスタンス生成をしておかないとエラーとなる
  
ラベルをパネルの子要素として追加//テキストボックスを生成するメソッド
引数にはName属性、ボックスの表示位置、ボックスの大きさを渡す
//ボタンを生成するメソッド
引数にはName属性、ボタンに表示されるテキスト、ボタンの表示位置、ボタンの大きさを渡す

comboBox.DataSource = ItemList; 
ItemListは、DBからSELECTしたエンティティクラスのリスト//上記のコードを実行すると、System.ArgumentOutOfRangeException が発生する。
Unhandled exception. System.ArgumentOutOfRangeException: '0' の InvalidArgument=Value は 'SelectedIndex' に対して有効ではありません。 (Parameter 'value')

    
 処理// 直接叩く
ObserveCPUTick(null, EventArgs.Empty);

            }                                                          
 対策コード
    Console.WriteLine(ex.SqlState);    
42703
            
PdfA3Bで保存します。
    .Range(1, 3)    
 1～3の数値を取得するawait channel.Writer.WriteAsync($"Producer:{producerNumber} Message {i}");channel.Writer.TryWrite($"Producer:{producerNumber} Message {i}");,,,
    
 name "Fix" is recursive
        
 メソッド内でなにか処理をできる
            
 プロセスが終了するかタイムアウトするまで待つ。
            
 キャッシュはファクトリー側が管理するので、すべてTransient
        transform.position += new Vector3(-x, 0, -z); 
　上下左右を反転させて、押したキーとキャラクターの動きにイメージとのズレがないようマイナス記号をつけた
        if (lastDragHoverd == null || !lastDragHoverd.SequenceEqual (eventData.hovered)) { 
 異なるときだけ
            
 結果を出力
source.OnComplete(); 
 ソースが終了したタイミングで現在の値も Dispose される
// 値の設定
Properties.Settings.Default.Setting1 = "a"
// 全部まとめて保存
Properties.Settings.Default.Save();

                
各マスの設定できる数字の初期化
    case ".mp3":
This is fall through so it's not that i forget break;
    LogFilePath = Path.Combine(LogDirPath, "Application.log"); 
 出力ファイル名
   
 コマンドライン引数はありません
                        
new ListViewItem(new string[]{"コメント", id3v2.Comment}),
            services.AddDbContext&lt;Models.wbContext&gt;(); 
この行
        xmlns:mc="http:
schemas.openxmlformats.orgmarkup-compatibility2006"
    Root myDeserializedClass = JsonConvert.DeserializeObject&lt;Root&gt;(myJsonResponse); 
デシリアライズコード
    
 ReadOnlyReactivePropertySlim 化// first を元に SomeDisposableClass が作られる
source.OnNext("first");
// second を元に SomeDisposableClass が作られる
 first を元に作られた SomeDisposableClass は Dispose が呼ばれる
// OnComplete が呼ばれると最新の値に対して Dispose が呼ばれる
source.OnComplete();

            
 end speed test
    string windowName = "net_clock"; 
 Unityで設定するアプリ名とそろえる。
   
 ここまで
        
CCCタブを選択状態にする
cashDrawer.OpenDrawer(); 
 キャッシュドロアを開く
posPrinter.PrintMemoryBitmap(PrinterStation.Receipt, newBmp, PosPrinter.PrinterBitmapAsIs, PosPrinter.PrinterBitmapRight); 
 これでOK
}; 
...(A)
    
 セッションのロックが解除されたとき、リモート接続されたとき
                
 archive.CreateEntryFromFile( @"C:\Test.txt", "a.txt", CompressionLevel.Optimal );
        
 各ジェスチャを登録.
Console.WriteLine(RpnCalculator&lt;double&gt;.Calculate("-1 0 
"));    -∞
  
 今回の ViewModel は不要になったタイミングで Dispose が呼ばれる想定
            
ソケットを終了している。
            
Z軸周りで回転
            Console.WriteLine(rp.Value); 
 okazuki のまま
            
 メールによる確認を有効にした認証を有効にする
            
 基本的に指定のないページはすべて認証が必要になるように設定
// Configureメソッド内
app.UseDefaultFiles();

        
2番目に食べたものを記憶するOriginatorpublic class Food{private string _morningFood;public void PrepareFood(string morningFood) =&gt; _morningFood = morningFood;public string DisplayFood() =&gt; _morningFood;public Memento CreateMemento() =&gt; new(_morningFood);public void SetMemento(Memento memento) =&gt; _morningFood = memento.Str;}// Mementopublic class Memento{public string Str { get; }public Memento(string str) =&gt; Str = str;},,,Mementopublic class Memento{public string Str { get; }public Memento(string str) =&gt; Str = str;},,,
            
 仮引数で View のインスタンスを取得できるため、ここに対応を一元化させます。
            var channel = GrpcChannel.ForAddress("https:
kaotagrpcweb.azurewebsites.net", new GrpcChannelOptions
Sound.Mute = false; 
 音を戻す
var pokomon4 = pokomonLibrary["アネﾞデパミ"];    
 6
        
 型の情報をドキュメントに出力します
    
 TODO: ヒーロー達を取得した __後で__ メッセージを送るようにする
        top.enabled = viewportRect.max.y &gt;= contentBound.max.y; 
 上までスクロールされているか？
            
Rayが当たったオブジェクトのtagがPlanetだったら
                catch (ExternalException) { }   
 makeshiftly ignore "System.Runtime.InteropServices.ExternalException (0x800401D0)" error
        
}
            
 押した時と離れたときの間隔が shortTapThreshold 以下のときだけ通す
    
 いいね
        Console.WriteLine(BitOperations.PopCount(2049));  
2
            var debugdummy = "dummy";   
 デバッグ用（ブラウザ表示した状態でブレークするため）ダミー行
    sf.SetStringAlignment(ContentAlignment.BottomCenter);  
  ContentAlignemnetからsfにAlignmentをコピー
 
表示位置被りがないかオブジェクトの大きさでチェック
            cam.GetComponent&lt;RippleEffect&gt;().SetNewRipplePosition(target); 
新しい波紋を生成
        double  val8  = 1.23; 
 1.23dと明示的に表記してもOK
// デシリアライズ
var hoge = JsonSerializer.Deserialize&lt;Hoge&gt;(File.ReadAllText(@"C:\hoge.json"), options);
// シリアライズ
var json = JsonSerializer.Serialize&lt;Hoge&gt;(hoge, options);

    
 Titleが「更」で始まるもの
        Console.WriteLine("Hello world"); 
 文字を表示
//integer 型の使用例

// 初期値 5

// 初期値 11

//クラス名(クラスのオブジェクト名).メソッド名


初期化public int Sum{ get; set; } = int.MinValue;//Getter定義public int Sum2 =&gt;  10 + int.MinValue;public string Str { get { return $"===={Sum2}===="; } set { } },,,prop + tabpublic int MyProperty { get; set; }propg + tabpublic int MyProperty { get; private set; },,,//初期化
public int Sum{ get; set; } = int.MinValue;
Getter定義public int Sum2 =&gt;  10 + int.MinValue;public string Str { get { return $"===={Sum2}===="; } set { } },,,prop + tabpublic int MyProperty { get; set; }propg + tabpublic int MyProperty { get; private set; },,,//Getter定義
public int Sum2 =&gt;  10 + int.MinValue;

    
 OperationService depends on each of the other Operation types.
        app.UseStaticFiles(); 
追加
    
なぜかCollectionViewが追加中・編集中のことがある。
            Debug.Print(new Uri(new Uri(@"http:
localhost:9999"), "api5").AbsoluteUri);
var res = await client.GetStringAsync("https:
www.jma.go.jpjpweek319.html");// HTML をパース
var parser = new HtmlParser();
// セレクターで目的の要素をゲット
var nodes = doc.QuerySelectorAll("#infotablefont tr:nth-child(4) td");
// 整形して出力
var tokyoWeathers = string.Join(", ", nodes.Select(x =&gt; x.TextContent.Trim()));

       
 Note that this check works even when _items.Length overflowed thanks to the (uint) cast
wc.Dispose();
 オブジェクトを破棄
// null かもしれない参照型の非同期メソッドを呼び出す
string content = await httpResponse.Content?.ReadAsStringAsync();
// ※実行順序を正しくするため`await`する内容を`()`で囲む必要があります。
string content = await (httpResponse.Content?.ReadAsStringAsync() ?? Task.FromResult(string.Enmpty));

  
メイン関数 アプリケーションラン実行のみ
    
 イベント引数に設定されている値を使うようにすることもできる
var memory = arr1.AsMemory()[1..^1];    
 System.Memory&lt;int&gt; : [0]|2, [1]|3, [2]|0
        
 wait for first update// 即座にDispose
context.Dispose();
// beforeprivate GameObject[] _liveStocks; アバターを管理する配列// beforeDestroy(_liveStocks[changeIndex]); アバターの破棄処理// 拡張メソッドなので、こんな感じで読んでおけば自動でDisposeしてくれる
context.AutoDispose();

var horizontalAlignment = (HorizontalAlignment) 4; 
 HorizontalAlignmentの正常値は1～3
        
 C）クラス内メソッドを作って中身をいじる   
        
 コンピュートシェーダを実行する
        
 リクエストに失敗した場合
                
 より実運用に近いと思われるメモリからの読み込みにします
Console.WriteLine(L2.SelfIntroduction);     
 実行結果：私はキラです
        
 Fell off platform
            var endpoint = "https:
api.freee.co.jphrapiv1employees" + employeeId + "time_clocks";
            
Task.Run(() =&gt; Only_FFmpeg(token), token);
                
Enterを送って保存
        int h = ClientSize.Height;
 - txtContent.Top;
var fruit3 = Fruit.FromId(3);       
 Fruit[Id = 3, Name = "メロン"]// 通常の静的メソッド呼び出し(前置き記法)
var display1 = string.Join(", ", pieces);    string["飛車, 角, 金, 銀, 桂馬, 香車"]
// 拡張メソッド呼び出し(後置き記法)
var display2 = pieces.Join(", ");            string["飛車, 角, 金, 銀, 桂馬, 香車"]

    
省略
                
 添付ファイルを設定
            pattern: "{controller=Hello}
{action=Index}{id?}"); Home =&gt; Hello
型に依存していない場合public class SampleJeneric&lt;VAR&gt;{public VAR Test(VAR a1){ return a1; }}//型に依存しているメソッドを呼び出す場合public class SampleJeneric&lt;VAR&gt;where VAR : struct{public VAR Test(VAR a1){ return a1; }},,,int Min&lt;T&gt;(int a, int y)where int : IComparable{return a.ComparaTo(b) &lt; 10 ? a : b;},,,//型に依存していない場合
public class SampleJeneric&lt;VAR&gt;
//型に依存しているメソッドを呼び出す場合
public class SampleJeneric&lt;VAR&gt;

                
 イベントを投げる方
    Console.WriteLine(i); 
0,1,2,3,4が出力される
        
 ストリームから文字列を読みだすため、StreamReaderを生成する
    
 大文字に変換
    
 Update is called once per frame
    
 Bufferに画像のピクセルを書き込む// チャンネル数
int channel = bitsPerPixel / 8;
// C#側の領域を用意する
byte[] buffer = new byte[width * height * channel];
// GCによって移動しないように固定する。必ず開放する。
GCHandle handle = GCHandle.Alloc(buffer, GCHandleType.Pinned);
// 確保したバッファのアドレス
IntPtr bufferPtr = handle.AddrOfPinnedObject();
// クリップボードからコピーする
bool successCopy = false;
// 解放
handle.Free();
if(channel == 4){ BGRAelse if (channel == 3){ BGR
    
 IL initblk instruction
Console.WriteLine(expression.Compile()("f42")); 
 Unhandled exception. System.InvalidOperationException: variable 'a' of type 'System.String' referenced from scope '', but it is not defined
Debug.Log("左下の座標は " + sqSr.bounds.min + " です");
左下の座標は (-1.0, -0.8, -0.1) です
    
AddLocalizationより前にDbStringLocalizerFactoryを登録する
            
 インスタンスを提供してくれる人を作る
                    
コントロールの表示を変更する
            
 画像をPNG形式で保存する。
    isEnableBackKeyComp = null; 
 one shot
    new SomeApplication(new SomeRepository()) 
 今回は未登場だけど Application は Repository にさらに依存するとしたらこんな感じのコードになる
        
 M(60.8)R(103.4)Y(167.1)G(240.8)C(283.4)B(347.1)
        
アタッチしたオブジェクトに反映したいテキストを紐づける。
    
 Update is called once per frame
    
 Update is called once per frame
    
3:条件演算子の2,3つ目の引数
        
 T must has ToString(format) method.
    
 Update is called once per frame
    
例外が発生した場合の処理を記述
        string WindowClassName,     
 ここがstringになっている
var c = new Container(); 
 Container クラスが DI コンテナだとする// アプリの起動時あたりで、以下のようにアプリで使うインターフェースと実装クラスを登録していく
c.RegisterType&lt;ISettingsProvider, SettingsProvider&gt;();
// インスタンスが欲しいときは、コンテナから取得
var productOrderService = c.Resolve&lt;IProductOrderService&gt;();

(int a1, int a2[,int ……]) =&gt; uhen  
型宣言ありの変数
            
 リストの内部情報はType.GetFieldsから解析する事ができないので、自前で解析する。
    
 Start is called before the first frame update
            return Content("Hello World!"); 
修正箇所
      
 要素を増やせば、増やした分の多角形となる
    
このように、並列処理内で対処すると良い。
        
省略
                    
 交換フラグをtrueにします。
    .Select(x =&gt; x * x); 
 2 乗する// 表示
Console.WriteLine("結果を表示します！！");
// 元データかわちゃった
list.Add(100);

        
 接続文字列
        
他のクライアントの同期オブジェクトの設定
using System.Windows.Media.Media3D; 
3D行列使用
    Debug.Log($"{int1}, {int2}"); 
 「1, 1」が出力される
                    
 Application now has readwrite access to the picked file
    
 TODO: ヒーロー達を取得した __後で__ メッセージを送るようにするprivate void NotifyChange() =&gt; OnChange?.Invoke();,,, ハンドラが登録されていれば変更を通知
//外積に使用　各指の根元
private OVRSkeleton.BoneId _middleFingerRoot = OVRSkeleton.BoneId.Hand_Middle1;
//外積に利用するベクトル
Vector3 pinkyToMiddleDirection =
//外積　手のひら正面方向　中指の根本を手のひらってことにする
Vector3 handForward =
//外積に使用　各指の根元
private OVRSkeleton.BoneId _middleFingerRoot = OVRSkeleton.BoneId.Hand_Middle1;
//外積に利用するベクトル
Vector3 pinkyToMiddleDirection =
//外積　手のひら正面方向　中指の根本を手のひらってことにする
Vector3 handForward =

            labelValue.Text   = comboBox1.SelectedValue.ToString();
値はそのまま取りだせる
            
 秒の針
_context.SendBroadcast(new Intent(Intent.ActionMediaScannerScanFile, Android.Net.Uri.Parse("file:
" + imagePath)));
MessageBox.Show(("ここに表示したい文字列を入力します。"));
ポップアップwindowを表示する
        
ログインボタンをクリック
RedirectToAction(); 
 処理が成功した後に遷移したいページに遷移
        
Sortした結果を返す
        
Sortした結果を返す
var path_b = path_a 
 "b";  c:\a\b
    Debug.WriteLine(count_trailing_zeros(100.00M)); 
 -&gt; 2
            
で代用可能。
      m_worker.Dispose(); 
終了時に破棄する
                
return Math.Round(result, decimal_part);
                
 ブック一覧とExcelオブジェクトの解放は最後に一回行っていい// 列一覧の定義
cells = sheet.Columns;
// 2列目の選択
range = cells[2];
for (int i = 0; i &lt; 3; i++){ 3列を挿入する// セル一覧の定義
cells = sheet.Cells;
// セル[2, 2]の選択
range1 = cells[2, 2];
// セル[2, 4]の選択
range2 = cells[2, 4];
// セル[2, 2]から[2, 4]までの範囲の選択
range3 = sheet.Range[range1,range2];
// セルの結合
range3.Merge();
// セル[B2]から[D2]までの範囲の選択
range = sheet.Range["B2:D2"];
// セルの結合
range.Merge();
// フォントオブジェクトの定義
Excel.Font font = null;
// ... 略
 セル一覧の定義
// セル[2,1]の選択
range = cells[2, 1];
// セル[2,1]のフォントの選択
font = range.Font;
// 文字色を赤にする
font.Color = System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.Red);
// 罫線オブジェクトの定義
Excel.Borders border = null;
// ... 略
 セル一覧の定義
// セル[2,2]の選択
range = cells[2, 2];
// セル[2,2]の罫線選択
border = range.Borders;
// 罫線を実線に設定する
border.LineStyle = Excel.XlLineStyle.xlContinuous;
// 罫線の太さの設定
border.Weight = 2d;

        
省略...
    
↓これを呼び出せばDontDestroyObjectにできます
            
if (source == null) throw Error.ArgumentNull("source");
    
for TextAnalytics
    
for TextAnalytics
                
 境界部での丸め込み
        
id「1」に紐づいた商品情報を取得
 
GitHubIssueの取得// Issueを作成し、本文を設定
var createIssue = new NewIssue(issueTitle);
// Issueを追加
var newIssue = await client.Issue.Create(settings.Owner, settings.Repository, createIssue);

        
それ以外はそのまま
何のイベントハンドラが動いたのか、またイベントのArgの中身を表示する。private void root_Loaded(object sender, RoutedEventArgs e){SystemEvents.SessionSwitch          += ((sender, e) =&gt; { AddLog("SessionSwitch       :" + e.Reason.ToString()); });SystemEvents.SessionEnding          += ((sender, e) =&gt; { AddLog("SessionEnding       :" + e.Reason.ToString()); });SystemEvents.SessionEnded           += ((sender, e) =&gt; { AddLog("SessionEnded        :" + e.Reason.ToString()); });SystemEvents.PowerModeChanged       += ((sender, e) =&gt; { AddLog("PowerModeChanged    :" + e.Mode.ToString()); });SystemEvents.EventsThreadShutdown   += ((sender, e) =&gt; { AddLog("EventsThreadShutdown:" + e.ToString()); });},,,// 何のイベントハンドラが動いたのか、またイベントのArgの中身を表示する。
private void root_Loaded(object sender, RoutedEventArgs e)

        
ボーンのリストに受け取った値を反映
    
フルスクリーンにするための追加メソッド//appにはMainActivityでロードするAppクラスのオブジェクトを入れておく．

//WebViewRednererのOnElementChanged内
reloadActionはWebView側の変数
//thisTabbedPageはTabbedPageのオブジェクト
falseをtrueにすると，スライドによるタブ切替えができるようになる．

if (list2.Any() &amp;&amp; list2.All(n =&gt; n &gt; 0)) 
 ← false
            sw.Start(); 
計測開始
        
 Sha256ハッシュ
　　　　　
 await を使うことで、結果を同期的に扱える。
            
 フォームに表示
                    
 ロールバック
// 警告
List&lt;DateTime&gt; date = null;
// 警告
player.hp -= atk;
if (player != null){ OK// 警告
player = null;

            
 StackFrameクラスでstackを2階層戻る
            
int size = 
        title = type.Name.Replace("Node", "");  
クラス名から "Node" を削除したもの
            
 Point追加時に自動でOnPropertyChangedしてくれるようにする
    
 ノイズ除去
            
 全体のモーション方向を黄色い線で描画
                                       var dayOfWeek = DateTime.Now.DayOfWeek; 
曜日
        
この後に、外部アプリ終了後に実行したいコードを書く
        static void Main(string[] args) 
 メソッドの宣言
                
Q入力でプログラム終了
            
 コントロールを指定して添付プロパティを取得、設定する
        
 CLR ラッパープロパティ
            
 Get the SoftwareBitmap representation of the fileIAsyncOperationのGetAwaiterがないとか謎のコンパイルエラーがでたので、その対策として実装したpublic static class MyWaitUtil&lt;T&gt;{public static async Task&lt;T&gt; GetResultWithWaiting(IAsyncOperation&lt;T&gt; task){while(task.Status != AsyncStatus.Completed){if (task.Status == AsyncStatus.Error || task.Status == AsyncStatus.Canceled){Console.WriteLine("Error or Canceled");return default(T);}await Task.Delay(1);};return task.GetResults();}},,,// IAsyncOperationのGetAwaiterがないとか謎のコンパイルエラーがでたので、その対策として実装した
public static class MyWaitUtil&lt;T&gt;

              
それに対応するには別途拡張した仕組みを用意する必要があります。
static void Resize(Rectangle baseRect, int requiredWidth, int requiredHeight)  
 同上
        
 終了時刻
                    
動画から1フレーム取得し、Bitmapオブジェクトを作成してメモリコピー
 
処理
            
 データを更新したことを通知する// 例えば、ナビゲーターの項目を押したタイミングで、HogeDataの内容を更新する
var hogeData = Application.Current.Resources["HogeDataInstance"] as HogeData;

        
 コンストラクタ
Console.WriteLine(ReferenceEquals(r1, r2)); 
 True
本筋public void Main(List&lt;dynamic&gt; args){var func = GetMethod();args.ForEach(input =&gt; func(input).Work(input));},,,//本筋に書きたくない部分public Func&lt;dynamic,IWorker&gt; GetMethod(){IWorker human = null, robot = null;return (input) =&gt;{return input is int? (human ?? (human = new Human())): (robot ?? (robot = new Robot()));};},,,public interface IWorker{void Work(dynamic value);}//数字の時に働くpublic class Human : IWorker{public Human() =&gt; Console.WriteLine("Human new!!");public void Work(dynamic value) =&gt;  Console.WriteLine("human " + value);}//文字の時に動くpublic class Robot : IWorker{public Robot() =&gt; Console.WriteLine("Robot Created!!");public void Work(dynamic value) =&gt; Console.WriteLine("robot " + value);},,,var values = new List&lt;dynamic&gt; { 1, "1", 2, "test", 3, 4, "5" };,,,//本筋
public void Main(List&lt;dynamic&gt; args)
本筋に書きたくない部分public Func&lt;dynamic,IWorker&gt; GetMethod(){IWorker human = null, robot = null;return (input) =&gt;{return input is int? (human ?? (human = new Human())): (robot ?? (robot = new Robot()));};},,,public interface IWorker{void Work(dynamic value);}//数字の時に働くpublic class Human : IWorker{public Human() =&gt; Console.WriteLine("Human new!!");public void Work(dynamic value) =&gt;  Console.WriteLine("human " + value);}//文字の時に動くpublic class Robot : IWorker{public Robot() =&gt; Console.WriteLine("Robot Created!!");public void Work(dynamic value) =&gt; Console.WriteLine("robot " + value);},,,var values = new List&lt;dynamic&gt; { 1, "1", 2, "test", 3, 4, "5" };,,,//本筋に書きたくない部分
public Func&lt;dynamic,IWorker&gt; GetMethod()
数字の時に働くpublic class Human : IWorker{public Human() =&gt; Console.WriteLine("Human new!!");public void Work(dynamic value) =&gt;  Console.WriteLine("human " + value);}//文字の時に動くpublic class Robot : IWorker{public Robot() =&gt; Console.WriteLine("Robot Created!!");public void Work(dynamic value) =&gt; Console.WriteLine("robot " + value);},,,var values = new List&lt;dynamic&gt; { 1, "1", 2, "test", 3, 4, "5" };,,,//数字の時に働く
public class Human : IWorker
文字の時に動くpublic class Robot : IWorker{public Robot() =&gt; Console.WriteLine("Robot Created!!");public void Work(dynamic value) =&gt; Console.WriteLine("robot " + value);},,,var values = new List&lt;dynamic&gt; { 1, "1", 2, "test", 3, 4, "5" };,,,//文字の時に動く
public class Robot : IWorker

            
 constr["Trusted_Connection"] = true;
        stepMouseUp.Type = 0; 
 MOUSE = 0
        
ページソースの出力
            int endPageIndex   = Int32.MaxValue-1; 
 no limit
00100 == (00100) 
 =&gt; true
            
保存します。
        
ページソースの出力
Random rnd = new Random(3);      
 Randomオブジェクトを作成
        
 static関数内でセットするとstaticのスレッドに適用されてしまうので、こちらに出しました。
//sqlの用意
string sql = @"
パラメータの用意var param = new{empId = "E0010",firstName = "たろー",createdAt = DateTime.Now,updatedAt = DateTime.Now,};//実行database.Execute(sql, param);,,,public class EmpAndDeptNameDto{public string EmpName { get; set; }public string DeptName { get; set; }public override string ToString(){return $"[EmpName={EmpName}, DeptName={DeptName}]";}},,,//sqlの用意string sql = @"SELECTe.family_name || e.first_name AS emp_name,d.dept_nameFROMemp eLEFT OUTER JOINdept dON (e.dept_code = d.dept_code)WHEREe.dept_code = @deptCodeORDER BYe.emp_id";//パラメータの用意var param = new{deptCode = "001"};//実行List&lt;EmpAndDeptNameDto&gt; results = database.Fetch&lt;EmpAndDeptNameDto&gt;(sql, param);results.ForEach(Console.WriteLine);,,,string sql1 = @"WHEREemp_id = @empId";var param1 = new{empId = "E0001"};database.SingleOrDefault&lt;Emp&gt;(sql1, param1);,,,string sql2 = @"FROMempWHEREemp_id = @empId";var param2 = new{empId = "E0001"};database.SingleOrDefault&lt;Emp&gt;(sql2, param2);,,,//パラメータの用意
var param = new
//実行
database.Execute(sql, param);
//sqlの用意
string sql = @"
パラメータの用意var param = new{deptCode = "001"};//実行List&lt;EmpAndDeptNameDto&gt; results = database.Fetch&lt;EmpAndDeptNameDto&gt;(sql, param);results.ForEach(Console.WriteLine);,,,string sql1 = @"WHEREemp_id = @empId";var param1 = new{empId = "E0001"};database.SingleOrDefault&lt;Emp&gt;(sql1, param1);,,,string sql2 = @"FROMempWHEREemp_id = @empId";var param2 = new{empId = "E0001"};database.SingleOrDefault&lt;Emp&gt;(sql2, param2);,,,//パラメータの用意
var param = new
//実行
List&lt;EmpAndDeptNameDto&gt; results = database.Fetch&lt;EmpAndDeptNameDto&gt;(sql, param);

        
 await opened;
    
テキスト描画
            
保存します。
        
ページソースの出力
            
 メッセージを表示する
//文字列で指定
[PrimaryKey("col1,col2")]
配列で指定[PrimaryKey(new string[] { "col1", "col2" })],,,Emp insEmp = new Emp{EmpId = "E0001",FirstName = "太郎",FamilyName = "Nぽこ",DeptCode = "001",CreatedAt = DateTime.Now,UpdatedAt = DateTime.Now,};database.Insert(insEmp);,,,//主キー指定で既存データの取得Emp updEmp = database.SingleOrDefaultById&lt;Emp&gt;("E0001");updEmp.FirstName = "次郎";updEmp.UpdatedAt = DateTime.Now;database.Update(updEmp);,,,Emp updEmp = database.SingleOrDefaultById&lt;Emp&gt;("E0001");//スナップショットの取得var snapshot = database.StartSnapshot(updEmp);updEmp.FirstName = "次郎";updEmp.UpdatedAt = DateTime.Now;//更新対象列を指定したアップデート//UpdatedColumnsメソッドで変更のある列の一覧を取得できる。database.Update(updEmp, snapshot.UpdatedColumns());,,,database.Update(updEmp, snapshot);,,,Emp delEmp = database.SingleOrDefaultById&lt;Emp&gt;("E0001");database.Delete(delEmp);,,,database.DeleteMany&lt;Emp&gt;().Where(x =&gt; x.DeptCode == "X01").Where(x =&gt; x.FirstName.StartsWith("太")).Execute();,,,database.SingleById&lt;Emp&gt;("E0001");database.SingleOrDefaultById&lt;Emp&gt;("E0001");,,,database.Query&lt;Emp&gt;().Where(x =&gt; x.DeptCode == "001").OrderBy(x =&gt; x.EmpId).ToList();,,,//配列で指定
[PrimaryKey(new string[] { "col1", "col2" })]
//主キー指定で既存データの取得
Emp updEmp = database.SingleOrDefaultById&lt;Emp&gt;("E0001");
//スナップショットの取得
var snapshot = database.StartSnapshot(updEmp);
//更新対象列を指定したアップデート
UpdatedColumnsメソッドで変更のある列の一覧を取得できる。

    
 Update is called once per frame
        
解放
            
マテリアルを手に適用
        
 候補の単語を列挙する
            
 throw new NotImplementedException();
    
 #4 引数が一つなら()も省略（0はダメらしい）
workbook.LockStructure();            
ワークブックの構造を保護(ただしパスワードはかからない)
    driver.Navigate().GoToUrl("https:
www.google.com");
            DisplayRootViewFor&lt;ShellViewModel&gt;(); 
←後半でエラーとなる警告がでるが、そのまま（後述）
            
位置検出パターン
    
 Update is called once per frame
        
Throw(1, 90, (o, pip) =&gt; Debug.Log(pip)); right(x+)方向に投げて1が出る。サイコロが止まったらコンソールに1を出す。
        
 GET: api&lt;IdController&gt;
    
ボタンクリック用イベント
                if(pnl.RunModal() == 1) 
 OK : 1, Cancel : 0
                    command.CommandTimeout = 60000; 
 コマンドがタイムアウトする場合は秒数を変更(ms) デフォルトは 30秒
            
Delegateで実行
        
上のコードの続き 
                
...
        
処理を終了
                    command.CommandTimeout = 60000; 
 コマンドがタイムアウトする場合は秒数を変更(ms) デフォルトは 30秒
//文字列でコルーチンの名前を書く
StartCoroutine("Test");
//コルーチンを関数呼び出しのように書く
StartCoroutine(Test());
//コルーチンを関数呼び出しのように書く
StartCoroutine(Test(10,"名前"));
//処理を止めて次のフレームに処理を開始する場所
yield return null;
//処理を止めて次のフレームに処理を開始する場所
yield return 0;
//ここで処理を強制的に止めます
yield break;
//処理をここで止めて引数で渡した数値秒経ったら処理をここから再開
yield return new WaitForSeconds(1f);

// アニメーション情報を読み込む
var animationInfoHandle = Addressables.LoadAssetAsync&lt;SSpriteAnimationInfo&gt;(ScriptableResources.SPRITE_ANIMATION);

                
例外時はロールバック
                    command.CommandTimeout = 60000; 
 コマンドがタイムアウトする場合は秒数を変更(ms) デフォルトは 30秒
            Console.WriteLine("--ExitEveryRule"); 
 {0},{1}--",context.Start,context.Stop);
list.Remove(42); 
 will ALWAYS return true (otherwise, assertion failure at the line above)
  bool ret3 = Config.Entry.Exists("設定1","子階層"); 
 =&gt; true
                    
 残弾数が0になっていたら停止間隔をカウンタに設定
        
 同じようにPublisherも直接取得して即時イベント発行
for (int j = 0; j &lt; types.Length; j++){ コンポーネントの初期値設定をする
                
 return Resources.IconForThisComponent;
        
 敵ごとのコンポーネント一覧を取得する
                
 TODO Retry
    
 Compute root mean square over samples.
    var htmlCode = GenerateHtml(textFor) 
 Inserts textFor to html code. Details are omitted here.
var list = XDocument.Load("https:
some.blob.core.windows.nethealthcheck?restype=container&amp;comp=list")
        
 ここまで追加
    public string uri = "http:
weather.livedoor.comforecastwebservicejsonv1?city=130010";
// ViewEnginesの削除・登録
ViewEngines.Engines.Clear();
// Controller.ControllerContextにMockオブジェクトを設定
var controller = new TestController();

    [Authorize(Roles = "Admin")] 
 変更
    
transform.DOCurveAround(Vector3.up, new Vector3(2, 0, 0), 90, 3);
        
 skipのパラメーターをいじると任意の行を指定できる
actions.Click(panel);       
 panel1をクリック
    
 Activatorによるインスタンス生成をすることで型制約を回避する
    
 このコードを変更しないでください。クリーンアップ コードを 'Dispose(bool disposing)' メソッドに記述します
// 配列の要素からインデックスの値を引いた値は同じになることを利用してグルーピングしています
var result = number.Select((x , index) =&gt; (x , index))

            
 nullの可能性があります。
        
接続文字列
            
PostgreSQLへ接続
        
 「member」「member2」テーブル両方に存在する行を取得
                
 pointerの中身は2バイト（文字数N）＋N*2バイト（UTF-16文字列）の配列
app.UseStaticFiles(); 
 for wwwrootswaggerui
    
 リストの初期化など
        
以下略
                
5を乗算した値を追加
            
 IHttpClientFactory を使用する
    
 ラムダ式
            Console.WriteLine("result: {0}", d.loop(6)); 
 result: 40
        
 3.作成した情報をもとに画像をAtlas化
        
マウス左クリックを待つ処理
簡易バージョンpublic static List&lt;T&gt; Read&lt;T&gt;(string filepath){using (var reader = new StreamReader(filepath))using (var csv = new CsvReader(reader, CultureInfo.CurrentCulture))return csv.GetRecords&lt;T&gt;().ToList();}public static void Write&lt;T&gt;(IEnumerable&lt;T&gt; obj, string filepath){using (var reader = new StreamWriter(filepath))using (var csv = new CsvWriter(reader, CultureInfo.CurrentCulture))csv.WriteRecords&lt;T&gt;(obj);}//encoderと区切り文字設定できるバージョンpublic static List&lt;T&gt; Read&lt;T&gt;(string filepath, Encoding encoding, string delimiter){using (var reader = new StreamReader(filepath,encoding))using (var csv = new CsvReader(reader, CultureInfo.CurrentCulture)){csv.Configuration.Delimiter = delimiter;return csv.GetRecords&lt;T&gt;().ToList();}}public static void Write&lt;T&gt;(IEnumerable&lt;T&gt; obj, string filepath, Encoding encoding, string delimiter){using (var reader = new StreamWriter(filepath, false, encoding))using (var csv = new CsvWriter(reader, CultureInfo.CurrentCulture)){csv.Configuration.Delimiter = delimiter;csv.WriteRecords&lt;T&gt;(obj);}}}//簡易バージョン
public static List&lt;T&gt; Read&lt;T&gt;(string filepath)
encoderと区切り文字設定できるバージョンpublic static List&lt;T&gt; Read&lt;T&gt;(string filepath, Encoding encoding, string delimiter){using (var reader = new StreamReader(filepath,encoding))using (var csv = new CsvReader(reader, CultureInfo.CurrentCulture)){csv.Configuration.Delimiter = delimiter;return csv.GetRecords&lt;T&gt;().ToList();}}public static void Write&lt;T&gt;(IEnumerable&lt;T&gt; obj, string filepath, Encoding encoding, string delimiter){using (var reader = new StreamWriter(filepath, false, encoding))using (var csv = new CsvWriter(reader, CultureInfo.CurrentCulture)){csv.Configuration.Delimiter = delimiter;csv.WriteRecords&lt;T&gt;(obj);}}}//encoderと区切り文字設定できるバージョン
public static List&lt;T&gt; Read&lt;T&gt;(string filepath, Encoding encoding, string delimiter)
var data=CsvParser.Read&lt;MyClass&gt;(@"filepath.csv",Encoding.GetEncoding("Shift_JIS"), ",");//読み込んだデータをタブ区切りで新しいファイルに書き込むShift-JISでカンマ区切りのデータを読み込むCsvParser.Write&lt;MyClass&gt;(data,@"filepath.tsv",Encoding.GetEncoding("Shift_JIS"), "\t");読み込んだデータをタブ区切りで新しいファイルに書き込む
    
 滑らかに移動するために固めの線形補間を使う
        
 mesh.TextureCoordinates.Add(new System.Windows.Point(0.0, 0.0));
); 
 from net 5; otherwise you need to implement it. 
cefBrowser = new ChromiumWebBrowser("https:
www.google.co.jp");
            var repeatPoint = point * repeat; 
 繰り返し位置
            var repeatPoint = point * repeat; 
 繰り返し位置
            var ratio = (float)i 
 itemCount;  周期の位置 (1.0 = 100% の時 2π となる)
            
 メッセージを表示する処理
System.Diagnostics.Process.Start(@"C:\Program Files\Google\Chrome\Application\chrome.exe", "https:
google.com");// 第1引数にブラウザのアプリケーションの絶対パス、第2引数にURL
,,,

            
 サーバー側では、順序保障してないのでローカルでソートしてアサート
    
 COMのクラスが使える
    
 値を加工する機能を追加
    
 (snip)
                        if (cred != null) 
 取得に成功したデータを表示
            
 取得するだけで何も使わない
            
 Javascriptの実行
    
 (snip)
        
    var filePath = @"C:\Example\Greeting";
        Console.WriteLine("2");          
 2
            return sales;                                       
結果を返す
        
ダイアログを表示する
            
 イベントを処理済みとして扱うなら新しいウィンドウは開きません。デフォルトはfalseです。
        
税金メソッド
            
 create runbook job. This gives back the Job
    
 SQLiteデータをbyte配列で読み込む
            
 必要なサービスのDIを記載する
            
 省略
            
 更新イベントを起こす
            
 wait until table rendered
    bmpImage.CacheOption = BitmapCacheOption.OnLoad;  
 ここが重要
        return (int)Mathf.Abs(val); 
絶対値にしてintで返すメソッド、なおエラーを吐く
    
一度削除して、1つ少ないのIndexに入れ直す
       
int型
        
Playerに初速を与える
        Console.WriteLine(calc(1, 2));    
3
// 例として面倒だから定義直下で判定してるけどメンバ変数として持って使用してる場合を想定
GameObject gobj;

            
 1秒待って次の値を取りに行く
                
 色を指定
#pragma warning disable CS4014 
 この呼び出しは待機されなかったため、現在のメソッドの実行は呼び出しの完了を待たずに続行されます
            catch (Exception ex) 
 (7)
                    command.CommandTimeout = 60000; 
 コマンドがタイムアウトする場合は秒数を変更(ms) デフォルトは 30秒
                
 強制的にViewのOnMeasureイベントを発火
        StopAllCoroutines(); 
 全てのコルーチンを止める
    group.AllowMembersEditMembership = true;                
 グループのメンバーシップを編集できるユーザー：グループメンバー
    
なので、大文字小文字だけの変更の場合は一度別のファイル名に変更する
                    
 力を与える
                
フィルタのリセットボタンを追加する場合に設定する。
            
 仮想モードの表示する数が一つ減ったので更新
Boot状態をトリガーにして、周波数２０ヘルツを出力。Set( Trig: "Boot", SineWave: new SineWave() { Freq = "20.0", Gain = "0.5" } );// Boot状態をトリガーにして、２秒後にA1状態に遷移。Wait( Trig: "Boot", Next: "A1", Time: 2.0 );// A1状態をトリガーにして、周波数６０ヘルツを出力。Set( Trig: "A1", SineWave: new SineWave() { Freq = "60.0", Gain = "0.5" } );// A1状態をトリガーにして、２秒後にA2状態に遷移。Wait( Trig: "A1", Next: "A2", Time: 2.0 );// A2状態をトリガーにして、周波数４０ヘルツを出力。Set( Trig: "A2", SineWave: new SineWave() { Freq = "40.0", Gain = "0.5" } );// A2状態をトリガーにして、４秒後にEnd状態に遷移。Wait( Trig: "A2", Next: "End", Time: 4.0 );// Boot から End まで波形取得GetWave( Trig: "Boot", Stop: "End", FileName: "test.wav", InId: "0, 1, 2, 3, 4, 5", OutId: "0");,,,// Boot状態をトリガーにして、周波数２０ヘルツを出力。
Set( Trig: "Boot", SineWave: new SineWave() { Freq = "20.0", Gain = "0.5" } );
// Boot状態をトリガーにして、２秒後にA1状態に遷移。
Wait( Trig: "Boot", Next: "A1", Time: 2.0 );
A1状態をトリガーにして、周波数６０ヘルツを出力。Set( Trig: "A1", SineWave: new SineWave() { Freq = "60.0", Gain = "0.5" } );// A1状態をトリガーにして、２秒後にA2状態に遷移。Wait( Trig: "A1", Next: "A2", Time: 2.0 );// A2状態をトリガーにして、周波数４０ヘルツを出力。Set( Trig: "A2", SineWave: new SineWave() { Freq = "40.0", Gain = "0.5" } );// A2状態をトリガーにして、４秒後にEnd状態に遷移。Wait( Trig: "A2", Next: "End", Time: 4.0 );// Boot から End まで波形取得GetWave( Trig: "Boot", Stop: "End", FileName: "test.wav", InId: "0, 1, 2, 3, 4, 5", OutId: "0");,,,// A1状態をトリガーにして、周波数６０ヘルツを出力。
Set( Trig: "A1", SineWave: new SineWave() { Freq = "60.0", Gain = "0.5" } );
// A1状態をトリガーにして、２秒後にA2状態に遷移。
Wait( Trig: "A1", Next: "A2", Time: 2.0 );
A2状態をトリガーにして、周波数４０ヘルツを出力。Set( Trig: "A2", SineWave: new SineWave() { Freq = "40.0", Gain = "0.5" } );// A2状態をトリガーにして、４秒後にEnd状態に遷移。Wait( Trig: "A2", Next: "End", Time: 4.0 );// Boot から End まで波形取得GetWave( Trig: "Boot", Stop: "End", FileName: "test.wav", InId: "0, 1, 2, 3, 4, 5", OutId: "0");,,,// A2状態をトリガーにして、周波数４０ヘルツを出力。
Set( Trig: "A2", SineWave: new SineWave() { Freq = "40.0", Gain = "0.5" } );
// A2状態をトリガーにして、４秒後にEnd状態に遷移。
Wait( Trig: "A2", Next: "End", Time: 4.0 );
// Boot から End まで波形取得
GetWave( Trig: "Boot", Stop: "End", FileName: "test.wav", InId: "0, 1, 2, 3, 4, 5", OutId: "0");

            states.Add(name, c); 
 例外出すため// playerがダメージをうけたら
playerState.SendMessage(PlayerMessage.TakeDamage);

    
 by visiting https:aka.msxamarinforms-previewer
        
初期化処理 
    
 行列homを用いてSrcに射影変換を適用する。
            
 端数を結果に戻す
                        
...中略
        ((A)b).Test_New(); 
 a.Test_New()と同等
        
 その他の処理
                    command.CommandTimeout = 60000; 
 コマンドがタイムアウトする場合は秒数を変更(ms) デフォルトは 30秒
            
 要素の作成
    たけし.防御する(100); 
 HP=450
        
 表示
   Prod 
 本番環境
        
 https:docs.microsoft.comja-jpuwpapiwindows.media.ocr.ocrresult.lines?view=winrt-19041
+            
 The default HSTS value is 30 days. You may want to change this for production scenarios, see https:aka.msaspnetcore-hsts.
...(中略)...class SiteModel : Microsoft.Azure.Management.WebSites.Models.Site{public string type = "Microsoft.Web/sites";public string apiVersion = "2019-08-01";public SiteModel(){},,,public SiteModel(string location, string name) : base(location: location, name: name){},,,using Newtonsoft.Json;using System;namespace jsontest2{class Program{static void Main(string[] args){var site = new SiteModel(location: "Japan East", name: "testSite");string json = JsonConvert.SerializeObject(site, Formatting.Indented);Console.WriteLine(json);}}},,,string jsonExcludeNull = JsonConvert.SerializeObject(site, new JsonSerializerSettings {NullValueHandling = NullValueHandling.Ignore,Formatting = Formatting.Indented });,,,//...(中略)...
class SiteModel : Microsoft.Azure.Management.WebSites.Models.Site

        
 このメソッドを呼び出せばダイアログを表示できる
            
 If we got this far, something failed, redisplay form     
                    
 押し下げ継続時は持続フレームをインクリメント
    
 アセンブリ中の編集でなければ、常にtrueDebugSystem.Diagnostics.Debug.WriteLine($"{nameof(inActiveOccurrence)} : {inActiveOccurrence}");,,,
  
マップクラス 
    
 初回はカタログファイルのダウンロードが入るので、bundleファイルの通信のみ取得するようにする
                    Directory = "PictureTest", Name = $"{DateTime.UtcNow}.jpg" 
 保存ファイル名
    
ランダムに決定した分(360度表記)回転させた後、向いた方向へ進める。//Vector3.right に積をとることで、横報告へ移動します。
また、歩いているように見せたいので、deltaTimeの和を取得し、1秒を超えたらイメージのSpriteを差し替える、かつ、
}else if(moveType == "walk"){わかりにくいですが足音を鳴らしています(apearClipは足音です)。
            
Destroyして、Instantiateするってのもありかも
//文字列の場合
Print("xxx");
//nがそのままpathになります。

→　{0}GH_path(0,0)//　→　{0,0},,,//ブランチDataTree.Branch(GH_path);//GH_pathで指定したlistを抽出する//DataTreeに要素を追加DataTree.Add(x, GH_path);// x:追加したいオブジェクト// listをまとめて追加はできないのでforeachで入れるforeach(class item in List){xxx.Add(x, GH_path);},,,Script Exception: オブジェクト参照がオブジェクト　インスタンスに設定されていません,,,if(Crv.Count() &gt; 1){CrvList.Add(Crv);},,,//ブランチ
DataTree.Branch(GH_path);
//GH_pathで指定したlistを抽出する

//DataTreeに要素を追加
DataTree.Add(x, GH_path);
// x:追加したいオブジェクト

foreach(class item in List){ listをまとめて追加はできないのでforeachで入れる
            
 constr["Trusted_Connection"] = true;
        
レベルに応じてUI画像入れ替え
       　　　 
 OpenDocumentファイルで保存します。
// バリデーションが追加されている ReactiveProperty&lt;T&gt; 型の MyProp のバリデーションエラーメッセージを ReadOnlyReactiveProperty にするコード
ReadOnlyReactiveProperty&lt;string&gt; MyPropErrorMessage = MyProp.ObserveValidationErrorMessage()

        
イベント受信登録
 
DisplayAlert("Tapped",tx.Name,"OK");
using SeedingInMemoryDb.Models;public class SampleInMemoryDbContext : DbContext {public SampleInMemoryDbContext(DbContextOptions options) : base(options) { }public DbSet&lt;Book&gt; Books { get; set; }protected override void OnModelCreating(ModelBuilder modelBuilder) =&gt;modelBuilder.Entity&lt;Book&gt;().HasData(new Book { ID = 1, Name = "アンドロイドは電気羊の夢を見るか?" },new Book { ID = 2, Name = "幼年期の終り" },new Book { ID = 3, Name = "一九八四年" });},,,// using Microsoft.EntityFrameworkCore;// using Microsoft.Extensions.DependencyInjection;public void ConfigureServices(IServiceCollection services) {services.AddDbContext&lt;SampleInMemoryDbContext&gt;(options =&gt;options.UseInMemoryDatabase("sample_in_memory_db"););services.AddControllers();},,,// using Microsoft.AspNetCore.Hosting;// using Microsoft.Extensions.DependencyInjection;// using Microsoft.Extensions.Hosting;// using System.Threading.Tasks;public class Program {public static async Task Main(string[] args) {IHost host = BuildHost(args);using IServiceScope scope = host.Services.CreateScope();IServiceProvider provider = scope.ServiceProvider;using var context = provider.GetRequiredService&lt;SampleInMemoryDbContext&gt;();await context.Database.EnsureCreatedAsync();host.Run();}public static IHost BuildHost(string[] args) =&gt;Host.CreateDefaultBuilder(args).ConfigureWebHostDefaults(web =&gt; web.UseStartup&lt;Startup&gt;().Build();},,,// using Microsoft.AspNetCore.Mvc;// using Microsoft.EntityFrameworkCore;// using SeedingInMemoryDb.Models;// using System.Collections.Generic;// using System.Threading.Tasks;[Route("api/[controller]")]public class BooksController : Controller {private readonly SampleInMemoryDbContext _db;public BooksController(SampleInMemoryDbContext db) =&gt; _db = db;[HttpGet]public async Task&lt;ActionResult&lt;IEnumerable&lt;Book&gt;&gt;&gt; Get() =&gt;await _db.Books.ToListAsync();},,,using Microsoft.Extensions.DependencyInjection;public void ConfigureServices(IServiceCollection services) {services.AddDbContext&lt;SampleInMemoryDbContext&gt;(options =&gt;options.UseInMemoryDatabase("sample_in_memory_db"););services.AddControllers();},,,// using Microsoft.AspNetCore.Hosting;// using Microsoft.Extensions.DependencyInjection;// using Microsoft.Extensions.Hosting;// using System.Threading.Tasks;public class Program {public static async Task Main(string[] args) {IHost host = BuildHost(args);using IServiceScope scope = host.Services.CreateScope();IServiceProvider provider = scope.ServiceProvider;using var context = provider.GetRequiredService&lt;SampleInMemoryDbContext&gt;();await context.Database.EnsureCreatedAsync();host.Run();}public static IHost BuildHost(string[] args) =&gt;Host.CreateDefaultBuilder(args).ConfigureWebHostDefaults(web =&gt; web.UseStartup&lt;Startup&gt;().Build();},,,// using Microsoft.AspNetCore.Mvc;// using Microsoft.EntityFrameworkCore;// using SeedingInMemoryDb.Models;// using System.Collections.Generic;// using System.Threading.Tasks;[Route("api/[controller]")]public class BooksController : Controller {private readonly SampleInMemoryDbContext _db;public BooksController(SampleInMemoryDbContext db) =&gt; _db = db;[HttpGet]public async Task&lt;ActionResult&lt;IEnumerable&lt;Book&gt;&gt;&gt; Get() =&gt;await _db.Books.ToListAsync();},,,using System.Threading.Tasks;public class Program {public static async Task Main(string[] args) {IHost host = BuildHost(args);using IServiceScope scope = host.Services.CreateScope();IServiceProvider provider = scope.ServiceProvider;using var context = provider.GetRequiredService&lt;SampleInMemoryDbContext&gt;();await context.Database.EnsureCreatedAsync();host.Run();}public static IHost BuildHost(string[] args) =&gt;Host.CreateDefaultBuilder(args).ConfigureWebHostDefaults(web =&gt; web.UseStartup&lt;Startup&gt;().Build();},,,// using Microsoft.AspNetCore.Mvc;// using Microsoft.EntityFrameworkCore;// using SeedingInMemoryDb.Models;// using System.Collections.Generic;// using System.Threading.Tasks;[Route("api/[controller]")]public class BooksController : Controller {private readonly SampleInMemoryDbContext _db;public BooksController(SampleInMemoryDbContext db) =&gt; _db = db;[HttpGet]public async Task&lt;ActionResult&lt;IEnumerable&lt;Book&gt;&gt;&gt; Get() =&gt;await _db.Books.ToListAsync();},,,
            
PCLファイルで保存します。
                    
 Execute local
                
 正常なコンパイルメッセージを表示します。
            
保存
    
 挨拶のメソッド
    
 by visiting https:aka.msxamarinforms-previewer
    
 リフレクションを使用し、ソート対象となるプロパティ値を引っ張り出す。メソッド形式var sortKeySortTypePairs = new Dictionary&lt;string, SortType&gt;{{ "Property4.PropertyW.PropertyD.PropertyK.Property4.PropertyW.PropertyD.PropertyI", SortType.Desc },{ "Property1", SortType.Asc },{ "Property4.PropertyW.PropertyA", SortType.Desc },{ "Property2", SortType.Asc },{ "Property4.PropertyW.PropertyD.PropertyJ", SortType.Asc },}MagicSorter.Sort(ref targetList, sortKeySortTypePairs);,,,// Linq風形式var sortedList = targetList.OrderBy(new Dictionary&lt;string, SortType&gt;{{ "Property4.PropertyW.PropertyD.PropertyK.Property4.PropertyW.PropertyD.PropertyI", SortType.Desc },{ "Property1", SortType.Asc },{ "Property4.PropertyW.PropertyA", SortType.Desc },{ "Property2", SortType.Asc },{ "Property4.PropertyW.PropertyD.PropertyJ", SortType.Asc },}).ToList();,,,// メソッド形式
var sortKeySortTypePairs = new Dictionary&lt;string, SortType&gt;
// Linq風形式
var sortedList = targetList

            
 コマンド終了
            services.AddSingleton&lt;DefaultAzureCredential&gt;();  
 追加
                
 Errors will be thrown as exceptions.
            
 (snip)
        ilMain.EmitCall(OpCodes.Call, Type.GetType("System.Console").GetMethod("WriteLine", new Type[] { typeof(string) }), null);
呼び出す
        Screen.autorotateToPortraitUpsideDown = false; 
 上下逆        
                        
 試しにmarker0の位置を変換(画像座標系→ロボット座標系)
            
子供側でfade inout して一定時間過ぎたら自身をcloseする
//カッコで囲まれた文字を抽出する
string target = "4984988946484986486 (452E3D09047C8276)";
//結果：body="452E3D09047C8276"

//IPアドレスが該当しているか（122.10.*.*）[正規表現]
string target2 = "122.10.1.1";
//結果：result=true;

//カンマ区切り文字列を配列にする
string stCsvData = "csv1,csv2,csv3";
//タブ区切り文字列を配列にする
string stTsvData = "tsv1    tsv2    tsv3";
//期間の開始日と終了日を分けて表示する
string kikan = "2018/08/08 - 2020/07/09";

    
ファイルの存在確認
            string[] animals = {"dog","cat"};   
変数は全て型を指定
                    c.ii = i; 
 クロージャにiを束縛
                
 Dictionaryに格納する
    public int Value; 
 3が入る
                
 引数に指定した内容がファイルに書き込まれる
                loss();            
パラメータ更新後、最終的な出力を得、表示。
// 取得対象の設定
var htmlUrl = $"https:weather.yahoo.co.jp/weather/jp/13/4410.html";
// HTMLドキュメントの取得
var document = BrowsingContext.New(Configuration.Default.WithDefaultLoader()).OpenAsync(htmlUrl).Result;
// クエリセレクタでデータの取得
var element = document.QuerySelector(querySelector);

            
 AudioClipを再生
        
 ReSharper disable once RedundantEnumerableCastCall// 素朴な方法
var numbers1 = array

    
 Text-to-Speech レスポンス（音声ファイル）の保存
    public class Monster { 
 内部クラス
                        
errorInfoList.Add(e.Message);
        var ns = (NamespaceDeclarationSyntax)m; 
 Microsoft.CodeAnalysis.CSharp.Syntax
    
どこかしらでBindする
Client(利用者)public class Program{static void Main(){IWakeUp wakeUp = new WakeUpProxy();wakeUp.MorningCall();wakeUp.WakeUpMorning();}}// Subject(主体・本人)public interface IWakeUp{public void MorningCall() =&gt; Console.WriteLine("--- 朝 ---");public void WakeUpMorning();}// RealSubject(真の主体・本人)public class WakeUp : IWakeUp{public WakeUp() =&gt; Console.WriteLine($"{nameof(WakeUp)}インスタンスが生成されました。");public void WakeUpMorning(){Thread.Sleep(2000);Console.WriteLine("眠いけど頑張って起きよう(´Д⊂ヽ");}}// Proxy(代理人)// WakeupMorningメソッドが呼ばれるまでは重い処理のあるWakeUpクラスのインスタンスは生成されません。public class WakeUpProxy : IWakeUp{private WakeUp _wakeUp;public WakeUpProxy() =&gt; Console.WriteLine($"{nameof(WakeUpProxy)}インスタンスが生成されました。");public void WakeUpMorning(){_wakeUp ??= new WakeUp();_wakeUp.WakeUpMorning();}},,,// Client(利用者)
public class Program
Subject(主体・本人)public interface IWakeUp{public void MorningCall() =&gt; Console.WriteLine("--- 朝 ---");public void WakeUpMorning();}// RealSubject(真の主体・本人)public class WakeUp : IWakeUp{public WakeUp() =&gt; Console.WriteLine($"{nameof(WakeUp)}インスタンスが生成されました。");public void WakeUpMorning(){Thread.Sleep(2000);Console.WriteLine("眠いけど頑張って起きよう(´Д⊂ヽ");}}// Proxy(代理人)// WakeupMorningメソッドが呼ばれるまでは重い処理のあるWakeUpクラスのインスタンスは生成されません。public class WakeUpProxy : IWakeUp{private WakeUp _wakeUp;public WakeUpProxy() =&gt; Console.WriteLine($"{nameof(WakeUpProxy)}インスタンスが生成されました。");public void WakeUpMorning(){_wakeUp ??= new WakeUp();_wakeUp.WakeUpMorning();}},,,// Subject(主体・本人)
public interface IWakeUp
RealSubject(真の主体・本人)public class WakeUp : IWakeUp{public WakeUp() =&gt; Console.WriteLine($"{nameof(WakeUp)}インスタンスが生成されました。");public void WakeUpMorning(){Thread.Sleep(2000);Console.WriteLine("眠いけど頑張って起きよう(´Д⊂ヽ");}}// Proxy(代理人)// WakeupMorningメソッドが呼ばれるまでは重い処理のあるWakeUpクラスのインスタンスは生成されません。public class WakeUpProxy : IWakeUp{private WakeUp _wakeUp;public WakeUpProxy() =&gt; Console.WriteLine($"{nameof(WakeUpProxy)}インスタンスが生成されました。");public void WakeUpMorning(){_wakeUp ??= new WakeUp();_wakeUp.WakeUpMorning();}},,,// RealSubject(真の主体・本人)
public class WakeUp : IWakeUp
// Proxy(代理人)
 WakeupMorningメソッドが呼ばれるまでは重い処理のあるWakeUpクラスのインスタンスは生成されません。

            
 クラス名からコントロールを取得する。メモ帳の場合はEditコントロールが編集領域。
            
 スライドイン表示
        
その他の項目は省略...
            Sp.Speak(n); 
喋らせる
        
カードの生成とデータの受け渡し
    
Bindingしていた場合はItemsSource、違うならItemsから削除する
            this.scopes = new[] { "https:
graph.microsoft.com.default" };
    

        
 このメソッドを呼び出せばダイアログを表示できる
        
 壁紙にしたい画像のパス
        
 処理を抜ける戻り値ありpublic int Hoge(){~}// 戻り値なしpublic void Hoge(){~},,,string stringValue1 = "abc";string stringValue2 = "def";// abcdefConsole.WriteLine(stringValue1 + stringValue2);,,,// 条件式 ? 条件式True : 条件式Falseint intValue = 10;string res;res = (intValue &gt;= 0) ? "nonnegative" : "negative";,,,// 戻り値あり
public int Hoge()
戻り値なしpublic void Hoge(){~},,,string stringValue1 = "abc";string stringValue2 = "def";// abcdefConsole.WriteLine(stringValue1 + stringValue2);,,,// 条件式 ? 条件式True : 条件式Falseint intValue = 10;string res;res = (intValue &gt;= 0) ? "nonnegative" : "negative";,,,// 戻り値なし
public void Hoge()
// 条件式 ? 条件式True : 条件式False
int intValue = 10;

                
 引数（コールバック）の変換
            if (NewWindowPos.Y + (Height * G.SR) + G.marginsize &gt; G.SH) NewWindowPos.Y = G.SH - (Height * G.SR);  
底辺への吸着
                
 通常と透過を使い分けて色とテクスチャを反映
XNamespace ns= "http:
www.test";
                    
 A-Zの変換が0-25になっているため1を足して、A-Zが1-26になるようにする
        
 スクロール（拡縮というか前後）
        
 親クラスのプロパティ情報を一気に取得して使用する。
    
SMTPサーバから切断する
    
 Update is called once per frame
// FullNameを大文字にしたgetter onlyプロパティを作る
this.UpperFullName = this.FullName.Select(s =&gt; s?.ToUpper()).ToReadOnlyReactiveProperty().AddTo(_cd);

                
フォルダを開けて見せてあげる
            
 Set the XmlRoot property to the XmlRoot object.
                  
・・・中略・・・
            
 capture the frame
            
 無限に待機する.
}
class WinMain : Form
        
 &lt;summary&gt;
        
 ここ、正しくは、「改行されそう！」ですが、そんなことは気にしない。
    new PropertyMetadata(false, OnShowMessage)  
 ここの第1引数
list.Add(new MyObjectClass()); 
 OK!// 型引数なしの方で定義されたメンバーのみ参照可能
list.ForEach(item =&gt; Console.WriteLine(item.GetValueAsString()));

            
喋らせる
        

    
 項目を消すボタン
        
Cyan == Aqua, Magenta == Fuchsia
    
 コマンドが成功した場合は 0、失敗した場合は -1
            
 データ内にあるIDをNameに置き換える。対応するものがなかったら空文字。
    drawContent.DrawEllipse(Brushes.Yellow, new Pen(Brushes.Green, 3), new Point(50, 50), 10, 10);  
 丸を描く// 色々書き込んだものを使って、DrawingImageをつくって画面表示にセット
MyImage.Source = new DrawingImage(drawingGroup);

                
 レジストリ・キーまたは値が存在しない
                
 The default HSTS value is 30 days. You may want to change this for production scenarios, see https:aka.msaspnetcore-hsts.
                            There are no external authentication services configured. See &lt;a href="https:
go.microsoft.comfwlink?LinkID=532715"&gt;this article&lt;a&gt;
            | RigidbodyConstraints.FreezePositionY;  
PositionのYのみオンcollisionに接触している場合はRotationは全てオン、PositionはY軸のみオンにする。void OnCollisionStay(Collision collision){rb.constraints = RigidbodyConstraints.FreezeRotation| RigidbodyConstraints.FreezePositionY;}//collisionに接触してない時はPositionのY軸はオフ。Rotationは全てオンのまま。void OnCollisionExit(){rb.constraints = RigidbodyConstraints.FreezeRotation;},,,//collisionに接触している場合はRotationは全てオン、PositionはY軸のみオンにする。
void OnCollisionStay(Collision collision)
collisionに接触してない時はPositionのY軸はオフ。Rotationは全てオンのまま。void OnCollisionExit(){rb.constraints = RigidbodyConstraints.FreezeRotation;},,,//collisionに接触してない時はPositionのY軸はオフ。Rotationは全てオンのまま。
void OnCollisionExit()

            
 音声開始コマンドをMainActivityに送信
}
end namespace XMLClasses
            
加速ONで倍率2倍
            
 画像をPNG形式で保存する。
     
 ....
    Console.WriteLine("key2={0}", key1Item["key2"]); 
 value1, value2
    
 セッターがないのでこれは怒られる
string[][] teams = {          
2次元配列
        
ChangeType.Modifiedだったら変更された部分だけハイライトしたいのでSubPieceからいろいろやる
                
 ここまで来たら同点
Console.WriteLine(vm.FullName.Value); 
 空白
                
 not
    
 接続されたクライアントの情報を格納するクラス
        
 これ以降、サーバー側のサービスコントラクトがローカルなクラスのように扱える
// Fontという名のフィールドがすでにあるとする

// 適当なBitmapを生成
var bitmap = new Bitmap(16, 16);
// 適当なGraphicsを生成
var graphics = Graphics.FromImage(bitmap);
// 謎の空白付きの文字列のサイズを計測。
var graphicsSize = graphics.MeasureString("成就した恋ほど語るに値しないものはない。", Font);
// ちゃんとした文字列のサイズを計測。
var trueGraphicsSize = graphics.MeasureString("成就した恋ほど語るに値しないものはない。", Font, (int)graphicsSize.Width, StringFormat.GenericTypographic);

        
 追加したコンソールのメニューアイテム２番を選択した時のイベントハンドラ
        
 ラベルを作るイベントハンドラー
        
MemoryStreamからDesirializeして書き込む
    private Vector3 StagePos;  
StagePos変数を設定
                
シーン読み込み、アニメーション読み込みなどなど
    private Vector3 offset;
カメラとの距離
                
ここで処理を行う
                
 アプリ終了
    
 戻るボタンを処理したことを通知する
// textBlock に添付プロパティを設定
Canvas.SetTop(textBlock, 10);
Label は Xamarin.Forms で文字列を表示するためのコントロールnew Label{Text = "Hello world",}.Row(1).Column(2).ColumnSpan(2);,,,// Label は Xamarin.Forms で文字列を表示するためのコントロール
new Label

            
 プロパティの値が変わったことを PropertyChanged イベントで外部に通知
#pragma warning restore Uno0001 
 Uno type or member is not implemented
        
カメラとプレイヤーの位置を同じにする
            
余白部の作成
            
MainContent = new SomeViewModel());
            this.listener.Prefixes.Add(String.Format("http:
+:{0}{1}", Settings.Default.API_PORT, Settings.Default.API_PATH));
            
余白部の作成
                Resource = "pfrn:api--
ClientGetContentDownloadUrl",   ←ポリシーを変更する API 名
            SceneManager.LoadScene("GameClear");  
クリアシーンを表示
    
 INotifyPropertyChnagedの実装（省略）
            
色情報を復元
            
 タイマーインタラプトルーチン
        
 GET: opkeys
        
受信用Thread
        
 PLINQ
            
評価対象クラスで関数コール
        
GameObject obj = Instantiate(PrefabObject, pos, Quaternion.identity);
            
SetNumber.Subscribe(x =&gt; Number.Value = (int)x).AddTo(Disposable);
        
ボタンがクリックされたときの処理
            
 応答をリダイレクト
    var force = new Vector3(a, 0f, b);
(x, y, z)平面方向がx,z上空方向がy
                
 [apiName]から先が必要かどうかはレスポンスの構造に応じて変更する必要あり
            var url = $"https:
login.microsoftonline.com{Config.OAuth.TenantID}oauth2v2.0token";
現在のスクロール位置Console.WriteLine("Hello World! {0}", rangeValuePattern.Current.Value);// スクロール位置の変更rangeValuePattern.SetValue(50000);,,,// 現在のスクロール位置
Console.WriteLine("Hello World! {0}", rangeValuePattern.Current.Value);
// スクロール位置の変更
rangeValuePattern.SetValue(50000);

            string url = "https:
hogehoge.comwebhook";
//拡張メソッドは、以下と同等の為、引数無しデリゲート型として渡せないと思われる。
Func(TestExt.IsTrue(true));
//以下は可能
Func(() =&gt; true.IsTrue());
//おそらく以下のように取り扱われているから？
Func(TestExt.IsTrue(true));

            
DapperExtensionを使った処理
    
 by visiting https:aka.msxamarinforms-previewer
 private void form1_Closing(object sender, FormClosingEventArgs e) 
×ボタン押下時
    
 縮んでいく比率
                    
 古いログファイルを削除する
            String url = "http:
api.openweathermap.orgdata2.5weather?q=Tokyo,jp&amp;units=metric&amp;APPID={Your API Key}";
    Console.WriteLine(i); 
1,2,3,4,5if(num == 3){カッコがいる//3じゃないよ
,,,
戻り値の型 関数名(型 引数名)int plusWithNum(int num1, int num2){return num1 + num2;}//普通に引数の型と同じものを入れたらよいplusWithNum(1,5)//6//追記// 名前付き引数での呼び出しPlusWithNum(num1: 1, num2: 5);// 名前付き引数の場合, 順番を前後させても問題ないPlusWithNum(num2: 5, num1: 1);,,,//戻り値の型 関数名(型 引数名)
int plusWithNum(int num1, int num2)
//普通に引数の型と同じものを入れたらよい
plusWithNum(1,5)
//追記
 名前付き引数での呼び出し
// 名前付き引数の場合, 順番を前後させても問題ない
PlusWithNum(num2: 5, num1: 1);

// デノイズ処理を行い，その結果からエッジを抽出
texture.ToRenderTexture().GaussianFilter5X5().ExtractEdge();

            var ユーザー = new ユーザー(new ユーザーId(100), 
 以下省略...
                    
未選択時はNormal
            
 こんどは"おはようございます"は存在するので削除できる
      SecValue = v ^ Seed;
あとはお好きに
            
 Themeが変わった
            get { return _num; } 
外部に値を返す
  
 念の為PhotonVoiceSettingも変更しておくMacで実行されていたらtrueprivate bool IsMacOs() {#if UNITY_STANDALONE_OSX || UNITY_EDITOR_OSXreturn true;#endifreturn false;},,,// Macで実行されていたらtrue
private bool IsMacOs() {

            
 Assert
            
 要求がathorization_codepasswordrefresh_tokenの場合、access_tokenrefresh_tokenを返す
var cert = new X509Certificate2(file, pfxFilePassward);//秘密鍵の取り出しpfxファイルを読み込み//秘密鍵の取り出し
var rsa = (RSACryptoServiceProvider)cert.PrivateKey;
//署名実行
!!! 例外発生 !!!!
var cert = new X509Certificate2(file);//公開鍵の取り出しcrtファイルを読み込み//公開鍵の取り出し
var rsa = (RSACryptoServiceProvider)cert.PublicKey.Key;
var result = rsa.VerifyData(byteData, HashAlgorithm.Create("SHA256"), signature);,,, 検証実行var cert = new X509Certificate2(file, pfxFilePassward);//秘密鍵の取り出しpfxファイルを読み込み//秘密鍵の取り出し
var rsa = (RSACryptoServiceProvider)cert.PrivateKey;
//以下の処理を行わないとSHA256アルゴリズムが使用できない
var enhCsp = new RSACryptoServiceProvider().CspKeyContainerInfo;
// 署名実行
var signature = privKey.SignData(byteData, HashAlgorithm.Create("SHA256"));

    
 MemberwiseCloneメソッドはobject型で返却するのでSample型へキャストする必要があります。
    
 今回は平日の過ごし方を夏休み用にカスタマイズしました。
        Status = 0;  
0だったらCllisionのif文が実行される
    public int X 
 自動実装プロパティにすべきだが説明用
    
 appsettings.json の値を入れるよう
                
 エラーが発生したら「ここ」のエラー情報じゃなくて発生元のエラーを投げる
    
値を読み込む
            myPolygon.StrokeThickness = 1 
 1.25;    ここは解像度に変更
        
JSON側からデシリアライズ
            
 日付、リクエストのユーザーエージェントを出力
        helloText.enabled = true; 
 表示する
            var orderedNumber = number.OrderBy(x =&gt; x) 
.OrderByDescending(x =&gt; x)// 配列のように添え字でアクセスできます
int item = list[1];

                            
 Render the frames.
                
WriteLine(num);
        
当たったものが"weapon"だったらこのオブジェクトを破壊
var hoge = Hoge(); 
 taskが完了したかなど関係なく普通に進んでいく
    
 Update is called once per frame
            "https:
blazorsignin.onmicrosoft.comxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxxxxAPI.Manage");// これを追加
@using Microsoft.AspNetCore.Components.Authorization

//100個のint型要素が入る配列を生成。
int[] arr = new int[100];
for (int i = 0; i &lt; arr.length; i++){1~100までの整数をランダムに生成し、配列に格納する
        
略
        AssetDatabase.Refresh (); 
 アセットを更新
    
 今回はプロジェクトプロパティのResource画像から
            
 レンダリングしてないので重い処理を実行
            else if (e.KeyChar == 's' &amp;&amp; paddlePos.Right &lt; this.Width) 
S押下時
    
dに複数の数字を入力一つの文字列を受け渡すstatic string onestring(){return Console.ReadLine();}//複数の文字列を配列で受け渡す//文字列と文字列の間は" "で区切るstatic string[] arraystring(){return Console.ReadLine().Split(' ');}//一つの数字を受け渡すstatic int oneint(){return int.Parse(Console.ReadLine());}//複数の数字を配列で受け渡す//数字と数字の間は" "で区切るstatic int[] arrayint(){String[] input_line = Console.ReadLine().Split(' ');int[] input_num = new int[input_line.Length];for(int i = 0; i &lt; input_line.Length; i++){input_num[i] = int.Parse(input_line[i]);}return input_num;},,,//一つの文字列を受け渡す
static string onestring()
//複数の文字列を配列で受け渡す
文字列と文字列の間は" "で区切る
一つの数字を受け渡すstatic int oneint(){return int.Parse(Console.ReadLine());}//複数の数字を配列で受け渡す//数字と数字の間は" "で区切るstatic int[] arrayint(){String[] input_line = Console.ReadLine().Split(' ');int[] input_num = new int[input_line.Length];for(int i = 0; i &lt; input_line.Length; i++){input_num[i] = int.Parse(input_line[i]);}return input_num;},,,//一つの数字を受け渡す
static int oneint()
//複数の数字を配列で受け渡す
数字と数字の間は" "で区切る

            
円弧を計算
                    listView.Items[i] = fld;      
こんな感じで配列をそのまま突っ込む
                
 ymlファイルを読み来み計算パラメータを取得
    
 上のプロパティは以下のように短縮できる
    .ToArray();
配列にする
        
拡張メソッドだと項数が一致しない。
                
 エラーメッセージを表示
            
 画面を終了する
    
 保存する
C#//ある日あるときの配列int[][] bingo = { new int[] { 0, 1, 2 }, new int[] { 3, 4, 5 }, new int[] { 6, 7, 8 }, new int[] { 0, 3, 6 }, new int[] { 1, 4, 7 }, new int[] { 2, 5, 8 }, new int[] { 0, 4, 8 }, new int[] { 2, 4, 6 } };//他のある日の配列int[,] day = new int[2,3];,,,//C#//要素数が一定でないときの配列の使い方//要素数が3個の配列(中身{0,1,2})と2個の配列(中身{3,4})を、同じ配列に入れているint[][] arr1 = { new int[] { 0, 1, 2 }, new int[] { 3, 4 }};//要素数が一定な時の配列の使い方//前者と同じように中身を定義することもできる(定義していないと全部中身は0になる)int[,] arr2 = new int[2,3]{ { 0, 1, 2 } { 3, 4, 5} };,,,ある日あるときの配列int[][] bingo = { new int[] { 0, 1, 2 }, new int[] { 3, 4, 5 }, new int[] { 6, 7, 8 }, new int[] { 0, 3, 6 }, new int[] { 1, 4, 7 }, new int[] { 2, 5, 8 }, new int[] { 0, 4, 8 }, new int[] { 2, 4, 6 } };//他のある日の配列int[,] day = new int[2,3];,,,//C#//要素数が一定でないときの配列の使い方//要素数が3個の配列(中身{0,1,2})と2個の配列(中身{3,4})を、同じ配列に入れているint[][] arr1 = { new int[] { 0, 1, 2 }, new int[] { 3, 4 }};//要素数が一定な時の配列の使い方//前者と同じように中身を定義することもできる(定義していないと全部中身は0になる)int[,] arr2 = new int[2,3]{ { 0, 1, 2 } { 3, 4, 5} };,,,//ある日あるときの配列
int[][] bingo = { new int[] { 0, 1, 2 }, new int[] { 3, 4, 5 }, new int[] { 6, 7, 8 }, new int[] { 0, 3, 6 }, new int[] { 1, 4, 7 }, new int[] { 2, 5, 8 }, new int[] { 0, 4, 8 }, new int[] { 2, 4, 6 } };
//他のある日の配列
int[,] day = new int[2,3];
C#//要素数が一定でないときの配列の使い方//要素数が3個の配列(中身{0,1,2})と2個の配列(中身{3,4})を、同じ配列に入れているint[][] arr1 = { new int[] { 0, 1, 2 }, new int[] { 3, 4 }};//要素数が一定な時の配列の使い方//前者と同じように中身を定義することもできる(定義していないと全部中身は0になる)int[,] arr2 = new int[2,3]{ { 0, 1, 2 } { 3, 4, 5} };,,,要素数が一定でないときの配列の使い方//要素数が3個の配列(中身{0,1,2})と2個の配列(中身{3,4})を、同じ配列に入れているint[][] arr1 = { new int[] { 0, 1, 2 }, new int[] { 3, 4 }};//要素数が一定な時の配列の使い方//前者と同じように中身を定義することもできる(定義していないと全部中身は0になる)int[,] arr2 = new int[2,3]{ { 0, 1, 2 } { 3, 4, 5} };,,,//要素数が一定でないときの配列の使い方
要素数が3個の配列(中身{0,1,2})と2個の配列(中身{3,4})を、同じ配列に入れている
要素数が一定な時の配列の使い方//前者と同じように中身を定義することもできる(定義していないと全部中身は0になる)int[,] arr2 = new int[2,3]{ { 0, 1, 2 } { 3, 4, 5} };,,,//要素数が一定な時の配列の使い方
前者と同じように中身を定義することもできる(定義していないと全部中身は0になる)

　　　　　
実際の結果
    var roleArn = $"AwsRoleArnAws{(byte)accountNo}";    
accountNo: 1~N
actual.AssertIs(new { Foo = "Foo1", Bar = new[] { 1, 2 } });  
 成功！
    await GeotagHelper.SetGeotagAsync(stbmp, gps);
 →こっちは、拡張子はjpgだが実はbmpでjpgではないので、geotag付与時に例外発生
    
 保存パス
                panel2.Controls.Remove(deletingArrow);  
 panel2に登録されたArrow型のオブジェクトを消す
    
 Retrieve a reference to a container.
  
 パスワードのチェックのみなので、ReadOnlyモードで開きます。
        return (T)binaryFormatter.Deserialize(memoryStream); 
 デシリアライズ//値型を代入
int b = a;
//stringの代入（stringは参照型だが、例外的にディープコピーとなる）
string b = a;
//値型のListをコンストラクタでnew
List&lt;int&gt; b = new List&lt;int&gt;(a);
//配列、リスト等の参照型を代入
int[] b = a;
//多重Listをコンストラクタでnew
List&lt;List&lt;int&gt;&gt; b = new List&lt;List&lt;int&gt;&gt;(a);
foreach(var member in a)//gourpbyの中身（下の例でgroupaを変更すると、aも変更される）foreachの中身（下の例でmemberを変更すると、aも変更される）//gourpbyの中身（下の例でgroupaを変更すると、aも変更される）
var groupa = a.Groupby(c =&gt; c.key)

    app.UseAuthentication(); 
 この1行を追加
    
標準偏差 = 分散の平方根
            
四則演算可能な型の一覧//メディアン(int)
Console.WriteLine(iList.Median().ToString());
//メディアン(double)
Console.WriteLine(dList.Median().ToString());
//メディアン(DateTime)
Console.WriteLine(dtList.Median().ToString());

    const int WEEK_MAX = 7;
マジックナンバーは禁止
        
 .csprojの内容を置換
        
 関数本体の宣言
                                .OrderBy(x =&gt; x) 
.OrderByDescending(x =&gt; x)
            
 ドロワーを出す
            else MessageBox.Show("選択したのはPictureBoxではありません！");     
 (追加変更）
    
 文字列をパースしてDictionary&lt;string,string&gt;に変換する// 出力
 key:i value:100
// テンプレートからキーの部分のみを取り出す
var keys = GetKeys(template);
// DictionaryBuilder.Createでテンプレートを作成
 ネストも可能
foreach (var kv in builder.ToDictionary((30, 40))){ テンプレートを元にDictionaryを作成// SetTextを行うとTextMeshProが内部に持っているバッファに文字情報が設定される
 内部に持っているバッファはcharの配列なので文字列をアロケーションする必要がない
逆に言うと文字列にできないのでフォーマットのパースやchar配列への変換などは全部自力でやらなければならないtext.SetText("i: {0} j: {1}", 1, 2);,,,// 文字情報を内部のchar配列にためるBuildervar sb = new CharBufferedStringBuilder();// 文字列補間からテンプレートの作成var fsb = new FormatStringBuilder&lt;(int i, int j)&gt;(p =&gt; $"i: {p.P(t =&gt; t.i)}, j: {p.P(t =&gt; t.j)}");// テンプレートを適用// バッファサイズが足りなくならない限りはゼロアロケーション// 適用時に毎回パースしなくて済むので多少効率的(かもしれない)fsb.Apply(sb, (100, 200));Console.WriteLine(new string(sb.Buffer, 0, sb.Length));/* outputi: 100, j: 200*/,,,// 逆に言うと文字列にできないのでフォーマットのパースやchar配列への変換などは全部自力でやらなければならない
text.SetText("i: {0} j: {1}", 1, 2);
// 文字情報を内部のchar配列にためるBuilder
var sb = new CharBufferedStringBuilder();
文字列補間からテンプレートの作成var fsb = new FormatStringBuilder&lt;(int i, int j)&gt;(p =&gt; $"i: {p.P(t =&gt; t.i)}, j: {p.P(t =&gt; t.j)}");// テンプレートを適用// バッファサイズが足りなくならない限りはゼロアロケーション// 適用時に毎回パースしなくて済むので多少効率的(かもしれない)fsb.Apply(sb, (100, 200));Console.WriteLine(new string(sb.Buffer, 0, sb.Length));/* outputi: 100, j: 200*/,,,// 文字列補間からテンプレートの作成
var fsb = new FormatStringBuilder&lt;(int i, int j)&gt;(p =&gt; $"i: {p.P(t =&gt; t.i)}, j: {p.P(t =&gt; t.j)}");
// テンプレートを適用
 バッファサイズが足りなくならない限りはゼロアロケーション
// 適用時に毎回パースしなくて済むので多少効率的(かもしれない)
fsb.Apply(sb, (100, 200));

        
 デシリアライズ
            
 集計するのはcashの平均値
            child[i] = parent.transform.GetChild(i).gameObject;
子オブジェクト取得
        
 都合いい感じに印刷処理を書く
            Regex re = new Regex(@"https:
qiita-image-store.s3.amazonaws.com.*\.png");
        
 3. Query execution.
            
MaterialPropertyBlockで色を変更　元のマテリアルの色はそのまま
    
!演算子をつければ警告は出ない
            
  .HasForeignKey(x =&gt; new { x.Gaibuki });
        
何かしらの処理
            while (!isAllBingo)     
全てのカードがビンゴするまで繰り返す
    
 Layout Groupみたいに「Some values driven by 〜」とInspector上の編集を禁止する
    
 これはだめ。フィールドはもてない
            string ISS = "http:
localhost:5000op";
// .csxだと直値を出力とかはできない. 以下はエラーとなるので注意.
 "Hello, World!!"
// 以下を追記して、VSCodeで開きなおす
#r "nuget: Utf8Json"

        
爆発エフェクトを生成//Instantiate(第１関数,第２関数,第３関数);
,,,
//InvokeRepeating(第１関数, n, m);
,,,
GameObject effect = Instantiate(explosionPrefab, transform.position, Quaternion.identity) as GameObject;Destroy(effect, 1.0f);爆発エフェクトを生成
            
 access_tokenを返す
    int directionInt = 0; 
 0:上
        
Debug.Log(arrayInt.Length);
      issuer: "http:
localhost:5000op",public class myopContext : DbContext//  {public DbSet&lt;Client&gt; Clients { get; set; }public DbSet&lt;Token&gt; Tokens { get; set; }public DbSet&lt;Code&gt; Codes { get; set; }//        protected override void OnConfiguring(DbContextOptionsBuilder options)//            =&gt; options.UseSqlite("Data Source=app.db");}public class Client{[Key][DisplayName("client_id")]public string ClientId { get; set; }[DisplayName("client_secret")]public string ClientSecret { get; set; }[DisplayName("access_type")]public string AccessType { get; set; }[DisplayName("redirect_uris")]public string RedirectUris { get; set; }[DisplayName("grant_types")]public string GrantTypes { get; set; }[DisplayName("allowed_scope")]public string AllowedScope { get; set; }[DisplayName("client_name")]public string ClientName { get; set; }[DisplayName("auth_method")]public string AuthMethod { get; set; }[DisplayName("iat")]public DateTime Iat { get; set; }}public class Token{[Key][DisplayName("user_id")]public string UserId { get; set; }[DisplayName("access_token")]public string AccessToken { get; set; }[DisplayName("client_id")]public string ClientId { get; set; }[DisplayName("refresh_token")]public string RefreshToken { get; set; }[DisplayName("scope")]public string Scope { get; set; }[DisplayName("iat")]public DateTime Iat { get; set; }}public class Code{[Key][DisplayName("code")]public string CodeId { get; set; }[DisplayName("user_id")]public string UserId { get; set; }[DisplayName("client_id")]public string ClientId { get; set; }[DisplayName("nonce")]public string Nonce { get; set; }[DisplayName("iat")]public DateTime Iat { get; set; }}},,,// &lt;auto-generated /&gt;using System;using Microsoft.EntityFrameworkCore;using Microsoft.EntityFrameworkCore.Infrastructure;using Microsoft.EntityFrameworkCore.Storage.ValueConversion;using myop.Models;namespace myop.Migrations{[DbContext(typeof(ApplicationDbContext))]partial class myopContextModelSnapshot : ModelSnapshot{protected override void BuildModel(ModelBuilder modelBuilder){#pragma warning disable 612, 618modelBuilder.HasAnnotation("ProductVersion", "3.1.3");modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =&gt;{b.Property&lt;string&gt;("Id").HasColumnType("TEXT");b.Property&lt;string&gt;("ConcurrencyStamp").IsConcurrencyToken().HasColumnType("TEXT");b.Property&lt;string&gt;("Name").HasColumnType("TEXT").HasMaxLength(256);b.Property&lt;string&gt;("NormalizedName").HasColumnType("TEXT").HasMaxLength(256);b.HasKey("Id");b.HasIndex("NormalizedName").IsUnique().HasName("RoleNameIndex");b.ToTable("AspNetRoles");});modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim&lt;string&gt;", b =&gt;{b.Property&lt;int&gt;("Id").ValueGeneratedOnAdd().HasColumnType("INTEGER");b.Property&lt;string&gt;("ClaimType").HasColumnType("TEXT");b.Property&lt;string&gt;("ClaimValue").HasColumnType("TEXT");b.Property&lt;string&gt;("RoleId").IsRequired().HasColumnType("TEXT");b.HasKey("Id");b.HasIndex("RoleId");b.ToTable("AspNetRoleClaims");});modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =&gt;{b.Property&lt;string&gt;("Id").HasColumnType("TEXT");b.Property&lt;int&gt;("AccessFailedCount").HasColumnType("INTEGER");b.Property&lt;string&gt;("ConcurrencyStamp").IsConcurrencyToken().HasColumnType("TEXT");b.Property&lt;string&gt;("Email").HasColumnType("TEXT").HasMaxLength(256);b.Property&lt;bool&gt;("EmailConfirmed").HasColumnType("INTEGER");b.Property&lt;bool&gt;("LockoutEnabled").HasColumnType("INTEGER");b.Property&lt;DateTimeOffset?&gt;("LockoutEnd").HasColumnType("TEXT");b.Property&lt;string&gt;("NormalizedEmail").HasColumnType("TEXT").HasMaxLength(256);b.Property&lt;string&gt;("NormalizedUserName").HasColumnType("TEXT").HasMaxLength(256);b.Property&lt;string&gt;("PasswordHash").HasColumnType("TEXT");b.Property&lt;string&gt;("PhoneNumber").HasColumnType("TEXT");b.Property&lt;bool&gt;("PhoneNumberConfirmed").HasColumnType("INTEGER");b.Property&lt;string&gt;("SecurityStamp").HasColumnType("TEXT");b.Property&lt;bool&gt;("TwoFactorEnabled").HasColumnType("INTEGER");b.Property&lt;string&gt;("UserName").HasColumnType("TEXT").HasMaxLength(256);b.HasKey("Id");b.HasIndex("NormalizedEmail").HasName("EmailIndex");b.HasIndex("NormalizedUserName").IsUnique().HasName("UserNameIndex");b.ToTable("AspNetUsers");});modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim&lt;string&gt;", b =&gt;{b.Property&lt;int&gt;("Id").ValueGeneratedOnAdd().HasColumnType("INTEGER");b.Property&lt;string&gt;("ClaimType").HasColumnType("TEXT");b.Property&lt;string&gt;("ClaimValue").HasColumnType("TEXT");b.Property&lt;string&gt;("UserId").IsRequired().HasColumnType("TEXT");b.HasKey("Id");b.HasIndex("UserId");b.ToTable("AspNetUserClaims");});modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin&lt;string&gt;", b =&gt;{b.Property&lt;string&gt;("LoginProvider").HasColumnType("TEXT").HasMaxLength(128);b.Property&lt;string&gt;("ProviderKey").HasColumnType("TEXT").HasMaxLength(128);b.Property&lt;string&gt;("ProviderDisplayName").HasColumnType("TEXT");b.Property&lt;string&gt;("UserId").IsRequired().HasColumnType("TEXT");b.HasKey("LoginProvider", "ProviderKey");b.HasIndex("UserId");b.ToTable("AspNetUserLogins");});modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole&lt;string&gt;", b =&gt;{b.Property&lt;string&gt;("UserId").HasColumnType("TEXT");b.Property&lt;string&gt;("RoleId").HasColumnType("TEXT");b.HasKey("UserId", "RoleId");b.HasIndex("RoleId");b.ToTable("AspNetUserRoles");});modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken&lt;string&gt;", b =&gt;{b.Property&lt;string&gt;("UserId").HasColumnType("TEXT");b.Property&lt;string&gt;("LoginProvider").HasColumnType("TEXT").HasMaxLength(128);b.Property&lt;string&gt;("Name").HasColumnType("TEXT").HasMaxLength(128);b.Property&lt;string&gt;("Value").HasColumnType("TEXT");b.HasKey("UserId", "LoginProvider", "Name");b.ToTable("AspNetUserTokens");});modelBuilder.Entity("myop.Models.Client", b =&gt;{b.Property&lt;string&gt;("ClientId").HasColumnType("TEXT");b.Property&lt;string&gt;("AccessType").HasColumnType("TEXT");b.Property&lt;string&gt;("AllowedScope").HasColumnType("TEXT");b.Property&lt;string&gt;("AuthMethod").HasColumnType("TEXT");b.Property&lt;string&gt;("ClientName").HasColumnType("TEXT");b.Property&lt;string&gt;("ClientSecret").HasColumnType("TEXT");b.Property&lt;string&gt;("GrantTypes").HasColumnType("TEXT");b.Property&lt;DateTime&gt;("Iat").HasColumnType("TEXT");b.Property&lt;string&gt;("RedirectUris").HasColumnType("TEXT");b.HasKey("ClientId");b.ToTable("Clients");});modelBuilder.Entity("myop.Models.Code", b =&gt;{b.Property&lt;string&gt;("CodeId").HasColumnType("TEXT");b.Property&lt;string&gt;("ClientId").HasColumnType("TEXT");b.Property&lt;DateTime&gt;("Iat").HasColumnType("TEXT");b.Property&lt;string&gt;("Nonce").HasColumnType("TEXT");b.Property&lt;string&gt;("UserId").HasColumnType("TEXT");b.HasKey("CodeId");b.ToTable("Codes");});modelBuilder.Entity("myop.Models.Token", b =&gt;{b.Property&lt;string&gt;("UserId").HasColumnType("TEXT");b.Property&lt;string&gt;("AccessToken").HasColumnType("TEXT");b.Property&lt;string&gt;("ClientId").HasColumnType("TEXT");b.Property&lt;DateTime&gt;("Iat").HasColumnType("TEXT");b.Property&lt;string&gt;("RefreshToken").HasColumnType("TEXT");b.Property&lt;string&gt;("Scope").HasColumnType("TEXT");b.HasKey("UserId");b.ToTable("Tokens");});modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim&lt;string&gt;", b =&gt;{b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null).WithMany().HasForeignKey("RoleId").OnDelete(DeleteBehavior.Cascade).IsRequired();});modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim&lt;string&gt;", b =&gt;{b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null).WithMany().HasForeignKey("UserId").OnDelete(DeleteBehavior.Cascade).IsRequired();});modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin&lt;string&gt;", b =&gt;{b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null).WithMany().HasForeignKey("UserId").OnDelete(DeleteBehavior.Cascade).IsRequired();});modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole&lt;string&gt;", b =&gt;{b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null).WithMany().HasForeignKey("RoleId").OnDelete(DeleteBehavior.Cascade).IsRequired();b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null).WithMany().HasForeignKey("UserId").OnDelete(DeleteBehavior.Cascade).IsRequired();});modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken&lt;string&gt;", b =&gt;{b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null).WithMany().HasForeignKey("UserId").OnDelete(DeleteBehavior.Cascade).IsRequired();});#pragma warning restore 612, 618}}},,,{public DbSet&lt;Client&gt; Clients { get; set; }public DbSet&lt;Token&gt; Tokens { get; set; }public DbSet&lt;Code&gt; Codes { get; set; }//        protected override void OnConfiguring(DbContextOptionsBuilder options)//            =&gt; options.UseSqlite("Data Source=app.db");}public class Client{[Key][DisplayName("client_id")]public string ClientId { get; set; }[DisplayName("client_secret")]public string ClientSecret { get; set; }[DisplayName("access_type")]public string AccessType { get; set; }[DisplayName("redirect_uris")]public string RedirectUris { get; set; }[DisplayName("grant_types")]public string GrantTypes { get; set; }[DisplayName("allowed_scope")]public string AllowedScope { get; set; }[DisplayName("client_name")]public string ClientName { get; set; }[DisplayName("auth_method")]public string AuthMethod { get; set; }[DisplayName("iat")]public DateTime Iat { get; set; }}public class Token{[Key][DisplayName("user_id")]public string UserId { get; set; }[DisplayName("access_token")]public string AccessToken { get; set; }[DisplayName("client_id")]public string ClientId { get; set; }[DisplayName("refresh_token")]public string RefreshToken { get; set; }[DisplayName("scope")]public string Scope { get; set; }[DisplayName("iat")]public DateTime Iat { get; set; }}public class Code{[Key][DisplayName("code")]public string CodeId { get; set; }[DisplayName("user_id")]public string UserId { get; set; }[DisplayName("client_id")]public string ClientId { get; set; }[DisplayName("nonce")]public string Nonce { get; set; }[DisplayName("iat")]public DateTime Iat { get; set; }}},,,// &lt;auto-generated /&gt;using System;using Microsoft.EntityFrameworkCore;using Microsoft.EntityFrameworkCore.Infrastructure;using Microsoft.EntityFrameworkCore.Storage.ValueConversion;using myop.Models;namespace myop.Migrations{[DbContext(typeof(ApplicationDbContext))]partial class myopContextModelSnapshot : ModelSnapshot{protected override void BuildModel(ModelBuilder modelBuilder){#pragma warning disable 612, 618modelBuilder.HasAnnotation("ProductVersion", "3.1.3");modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =&gt;{b.Property&lt;string&gt;("Id").HasColumnType("TEXT");b.Property&lt;string&gt;("ConcurrencyStamp").IsConcurrencyToken().HasColumnType("TEXT");b.Property&lt;string&gt;("Name").HasColumnType("TEXT").HasMaxLength(256);b.Property&lt;string&gt;("NormalizedName").HasColumnType("TEXT").HasMaxLength(256);b.HasKey("Id");b.HasIndex("NormalizedName").IsUnique().HasName("RoleNameIndex");b.ToTable("AspNetRoles");});modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim&lt;string&gt;", b =&gt;{b.Property&lt;int&gt;("Id").ValueGeneratedOnAdd().HasColumnType("INTEGER");b.Property&lt;string&gt;("ClaimType").HasColumnType("TEXT");b.Property&lt;string&gt;("ClaimValue").HasColumnType("TEXT");b.Property&lt;string&gt;("RoleId").IsRequired().HasColumnType("TEXT");b.HasKey("Id");b.HasIndex("RoleId");b.ToTable("AspNetRoleClaims");});modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =&gt;{b.Property&lt;string&gt;("Id").HasColumnType("TEXT");b.Property&lt;int&gt;("AccessFailedCount").HasColumnType("INTEGER");b.Property&lt;string&gt;("ConcurrencyStamp").IsConcurrencyToken().HasColumnType("TEXT");b.Property&lt;string&gt;("Email").HasColumnType("TEXT").HasMaxLength(256);b.Property&lt;bool&gt;("EmailConfirmed").HasColumnType("INTEGER");b.Property&lt;bool&gt;("LockoutEnabled").HasColumnType("INTEGER");b.Property&lt;DateTimeOffset?&gt;("LockoutEnd").HasColumnType("TEXT");b.Property&lt;string&gt;("NormalizedEmail").HasColumnType("TEXT").HasMaxLength(256);b.Property&lt;string&gt;("NormalizedUserName").HasColumnType("TEXT").HasMaxLength(256);b.Property&lt;string&gt;("PasswordHash").HasColumnType("TEXT");b.Property&lt;string&gt;("PhoneNumber").HasColumnType("TEXT");b.Property&lt;bool&gt;("PhoneNumberConfirmed").HasColumnType("INTEGER");b.Property&lt;string&gt;("SecurityStamp").HasColumnType("TEXT");b.Property&lt;bool&gt;("TwoFactorEnabled").HasColumnType("INTEGER");b.Property&lt;string&gt;("UserName").HasColumnType("TEXT").HasMaxLength(256);b.HasKey("Id");b.HasIndex("NormalizedEmail").HasName("EmailIndex");b.HasIndex("NormalizedUserName").IsUnique().HasName("UserNameIndex");b.ToTable("AspNetUsers");});modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim&lt;string&gt;", b =&gt;{b.Property&lt;int&gt;("Id").ValueGeneratedOnAdd().HasColumnType("INTEGER");b.Property&lt;string&gt;("ClaimType").HasColumnType("TEXT");b.Property&lt;string&gt;("ClaimValue").HasColumnType("TEXT");b.Property&lt;string&gt;("UserId").IsRequired().HasColumnType("TEXT");b.HasKey("Id");b.HasIndex("UserId");b.ToTable("AspNetUserClaims");});modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin&lt;string&gt;", b =&gt;{b.Property&lt;string&gt;("LoginProvider").HasColumnType("TEXT").HasMaxLength(128);b.Property&lt;string&gt;("ProviderKey").HasColumnType("TEXT").HasMaxLength(128);b.Property&lt;string&gt;("ProviderDisplayName").HasColumnType("TEXT");b.Property&lt;string&gt;("UserId").IsRequired().HasColumnType("TEXT");b.HasKey("LoginProvider", "ProviderKey");b.HasIndex("UserId");b.ToTable("AspNetUserLogins");});modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole&lt;string&gt;", b =&gt;{b.Property&lt;string&gt;("UserId").HasColumnType("TEXT");b.Property&lt;string&gt;("RoleId").HasColumnType("TEXT");b.HasKey("UserId", "RoleId");b.HasIndex("RoleId");b.ToTable("AspNetUserRoles");});modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken&lt;string&gt;", b =&gt;{b.Property&lt;string&gt;("UserId").HasColumnType("TEXT");b.Property&lt;string&gt;("LoginProvider").HasColumnType("TEXT").HasMaxLength(128);b.Property&lt;string&gt;("Name").HasColumnType("TEXT").HasMaxLength(128);b.Property&lt;string&gt;("Value").HasColumnType("TEXT");b.HasKey("UserId", "LoginProvider", "Name");b.ToTable("AspNetUserTokens");});modelBuilder.Entity("myop.Models.Client", b =&gt;{b.Property&lt;string&gt;("ClientId").HasColumnType("TEXT");b.Property&lt;string&gt;("AccessType").HasColumnType("TEXT");b.Property&lt;string&gt;("AllowedScope").HasColumnType("TEXT");b.Property&lt;string&gt;("AuthMethod").HasColumnType("TEXT");b.Property&lt;string&gt;("ClientName").HasColumnType("TEXT");b.Property&lt;string&gt;("ClientSecret").HasColumnType("TEXT");b.Property&lt;string&gt;("GrantTypes").HasColumnType("TEXT");b.Property&lt;DateTime&gt;("Iat").HasColumnType("TEXT");b.Property&lt;string&gt;("RedirectUris").HasColumnType("TEXT");b.HasKey("ClientId");b.ToTable("Clients");});modelBuilder.Entity("myop.Models.Code", b =&gt;{b.Property&lt;string&gt;("CodeId").HasColumnType("TEXT");b.Property&lt;string&gt;("ClientId").HasColumnType("TEXT");b.Property&lt;DateTime&gt;("Iat").HasColumnType("TEXT");b.Property&lt;string&gt;("Nonce").HasColumnType("TEXT");b.Property&lt;string&gt;("UserId").HasColumnType("TEXT");b.HasKey("CodeId");b.ToTable("Codes");});modelBuilder.Entity("myop.Models.Token", b =&gt;{b.Property&lt;string&gt;("UserId").HasColumnType("TEXT");b.Property&lt;string&gt;("AccessToken").HasColumnType("TEXT");b.Property&lt;string&gt;("ClientId").HasColumnType("TEXT");b.Property&lt;DateTime&gt;("Iat").HasColumnType("TEXT");b.Property&lt;string&gt;("RefreshToken").HasColumnType("TEXT");b.Property&lt;string&gt;("Scope").HasColumnType("TEXT");b.HasKey("UserId");b.ToTable("Tokens");});modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim&lt;string&gt;", b =&gt;{b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null).WithMany().HasForeignKey("RoleId").OnDelete(DeleteBehavior.Cascade).IsRequired();});modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim&lt;string&gt;", b =&gt;{b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null).WithMany().HasForeignKey("UserId").OnDelete(DeleteBehavior.Cascade).IsRequired();});modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin&lt;string&gt;", b =&gt;{b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null).WithMany().HasForeignKey("UserId").OnDelete(DeleteBehavior.Cascade).IsRequired();});modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole&lt;string&gt;", b =&gt;{b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null).WithMany().HasForeignKey("RoleId").OnDelete(DeleteBehavior.Cascade).IsRequired();b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null).WithMany().HasForeignKey("UserId").OnDelete(DeleteBehavior.Cascade).IsRequired();});modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken&lt;string&gt;", b =&gt;{b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null).WithMany().HasForeignKey("UserId").OnDelete(DeleteBehavior.Cascade).IsRequired();});#pragma warning restore 612, 618}}},,,
            
 Inputs
            
描画した頂点座標を確認
            int[] lastBusinessDays = new int[7]; 
日、月、火、水、木、金、土
    
 基本クラスの抽象メソッドは必ずオーバーライドする
            while(date.CompareTo(endDate) == -1) 
-1で以前、0で同じ、1で以後
                    
 verify
            
 先ほど実装したRequestHandlerをインスタンス化
                
year年month月13日が金曜日ですか？
    
 SqlInjectionTest で使う入力データ列
                cal[line][column] = string.Format("{0,2}", day); 
プラスで右寄せ、マイナスで左寄せ
            
Paintボタンが押されたらFunctionステートを変更
    MessageBox.Show("エラー:\n\n" + ex);

            
panel4
  
名前を取り出す。名前は別テーブルに入ってるのでHogeCodeを元に取得
            
 DataGridへセット
        
 &gt;&gt;&gt; 13
                
bitmap =&gt;iconHandler =&gt; icon
                
 ブラケットに合致しなければ処理なし
            int separater = 10;     
分割ライン高さ
    
 受信したら OnReceiveData が発火し、電文が渡される
            
 Outputs
var isEqual = actual == expect 
 False
    
リニア化　(minx,miny,解像度xに対する横の割合,解像度yに対する高さの割合)
        
以下　演算子オーバーロード
            
 元に戻す
                        
leftを増やす、oneとzeroを調整
            input = Console.ReadLine().Split(' '); 
1なら休業日、0なら営業日
B::hoge(); 
 HOGEHOGE namespace内にあるBクラス。読み込み可
    prepos = pos; 
今のフレームの位置を次のフレームにおける前のフレームの位置として保存
            
アクティブなオブジェクト"damaged_transporter_01"をまず見つけ出し、その子オブジェクトを探索して"damage_level1"を見つける
    
 Dangerous
        
 イベントの呼び出し
  DoubleAccounting = 34 
 二重下線(会計)
    
 以下処理
            
（中略）
            
時針描画
    items.Select(a =&gt; a + 10).ToArray();  
 =&gt; [11, 12, 13]
        
正面方向に回転
    
 oがHogeの場合はhに代入されている// 式中でi,jを宣言して足し算する
 1 + 2 = 3;
// 再帰関数も作れる
 null is var は常にtrueになるので変数宣言に使用できる

Console.WriteLine(getCount()); 
 536870911
         
 Func&lt;int, float&gt; に Reciprocal()を登録逆数を返す関数private float Reciprocal(int x){return 1.0f / x;},,,// 逆数を返す関数
private float Reciprocal(int x)

            
 抽出したindexから抽選して返します
Console.WriteLine(increment()); 
 =&gt; 102
This method gets called by the runtime. Use this method to add services to the container.public void ConfigureServices(IServiceCollection services){services.AddApiVersioning();services.AddControllers();},,,[Route("api/v{version:apiVersion}/[controller]")]public class WeatherForecastController : ControllerBase{...},,,[ApiVersion("1.0")][Route("api/v{version:apiVersion}/[controller]")]public class WeatherForecastController : ControllerBase{...},,,[ApiVersion("1.0")][ApiVersion("1.1")][Route("api/v{version:apiVersion}/[controller]")]public class WeatherForecastController : ControllerBase{...},,,[HttpGet, MapToApiVersion("1.1")]public IEnumerable&lt;WeatherForecast&gt; GetV11(){var rng = new Random();return Enumerable.Range(1, 1).Select(index =&gt; new WeatherForecast{Date = DateTime.Now.AddDays(index),TemperatureC = rng.Next(-20, 55),Summary = Summaries[rng.Next(Summaries.Length)]}).ToArray();},,,
Debug.Log("&lt;color=#ff0000ff&gt;numの値は&lt;
color&gt;" + num + "&lt;size=20&gt;です&lt;size&gt;");  とコンソール画面に表示されます
            _ = 1;    
ブレークポイントを置くためのタミープログラム
            
Debug
            if (x is { }) Console.WriteLine("Never pass");  
 recursive pattern is not match null
             var multi = new int[5][]; 
 ok 
    
 残りは割愛
平日の具体的な状態を作成します。public class Weekday : IState{public void Morning() =&gt; Console.WriteLine("朝：早起きをします。");public void Afternoon() =&gt; Console.WriteLine("昼：仕事を一生懸命します。");}// 休日の具体的な状態を作成します。public class Holiday : IState{public void Morning() =&gt; Console.WriteLine("朝：寝ます。");public void Afternoon() =&gt; Console.WriteLine("昼：寝ます。");}// 状態を管理するクラスです。public class Context{private IState _state;public void SetState(string dayOfWeek){switch (dayOfWeek){case "Saturday" or "Sunday":_state = new Holiday();break;default:_state = new Weekday();break;}}public void GetMorning() =&gt; _state.Morning();public void GetAfternoon() =&gt; _state.Afternoon();},,,// 平日の具体的な状態を作成します。
public class Weekday : IState
休日の具体的な状態を作成します。public class Holiday : IState{public void Morning() =&gt; Console.WriteLine("朝：寝ます。");public void Afternoon() =&gt; Console.WriteLine("昼：寝ます。");}// 状態を管理するクラスです。public class Context{private IState _state;public void SetState(string dayOfWeek){switch (dayOfWeek){case "Saturday" or "Sunday":_state = new Holiday();break;default:_state = new Weekday();break;}}public void GetMorning() =&gt; _state.Morning();public void GetAfternoon() =&gt; _state.Afternoon();},,,// 休日の具体的な状態を作成します。
public class Holiday : IState
状態を管理するクラスです。public class Context{private IState _state;public void SetState(string dayOfWeek){switch (dayOfWeek){case "Saturday" or "Sunday":_state = new Holiday();break;default:_state = new Weekday();break;}}public void GetMorning() =&gt; _state.Morning();public void GetAfternoon() =&gt; _state.Afternoon();},,,// 状態を管理するクラスです。
public class Context

        
 45回回ったら終了
        
 ja や en でアクセスされたらその値をクッキーに保存。
            int[] date = nextBusinessDate(M, D, d);　
date[0]: 月、 date[1]: 日
            
var iconleft = GetMousePosition().X - temppos;
            
縦横比率を変更してでも全画面に合わせる。
  
 HogeHoge-
        
各月の最終日を返す
                businessHours: true, 
 display business hours
            
INotifyPropertyChanged.PropertyChangedイベントを発生させる
            
 Qiita2WPプロジェクトの方の処理を使いまわす
        
ここでPlayerのAttack関数を実行したい
    
xmlns:ItemというnamespaceのRegionNameクラスにあるRingoプロパティ
                
 エラーメッセージ
  
 引数を指定しない場合は[DiagnosticName("[メソッド名]")]と等価
        
 以下、略 ...
        
 more details see https:aka.msRazorPagesCRUD.
        return sum 
 count;  合計個数
                
 Qiitaの記事をWordPressに反映
    
 Update is called once per frame
        
 以下でもOK
                
 Qiitaの記事をWordPressに反映
                
 0以外の4の倍数の時に例外をスロー
    
 読み込みますよ
builder.Services.AddScoped&lt;AppState&gt;(); 
&lt;-追加
        
(略)可変長配列を使った演算(Ls)
                
一日ずつ進める
        
1段階で分裂したそれぞれの弾が分裂(p1とp2からそれぞれ分裂)
        
 クロージャを返す
        
翌日の年月日を返す
                
 パラメータをバインド
        
 ･･･
                
isInit = true;
                        return new Uri("http:
localhost:8080");
            
4で割り切れるならうるう年
                
 イベント削除
            
 参照しているChildのフィールド値も含めて一致することを確認
    
 iを使用した処理
        
 Win32のWindowとDirectX12の終了処理
                
 イベント追加
                    
 こんな感じで投入データを書き加えていく。
                    
戻ってくるのが配列なので空じゃないか確認
                
 UNICODEエスケープシーケンスにしない対象を指定。やらないと、ASCII文字以外すべてが　あ → \u3042　みたいな感じでエスケープされる。
                        
コマンド送信用UUIDを使ってキャラクタリスティックを取得
        
 throw で呼ばれる
    Direction direction = Direction.DOWN; 
 ここはDirection.DOWNでなくてもOK
            
 List events.
        
 BmpBitmapEncoderからSystem.Drawing.Bitmapをつくる
            Console.WriteLine(addDelegate());     
(4-2)
    
 UIの無効化など
                
 何かキーを押したら終了させる。
    string uri = "http:
localhost";
    
 行ごとにループメインpublic static void Main{MySqlConnection mySqlConnection = new MySqlConnection("ConnectionString");mySqlConnection.Open();var tableA = getTable("tableA");var tableB = getTable("tableB");}// 取得public async Task&lt;DataReader&gt; getTable(string tableName){using (var command = mySqlConnection.CreateCommand()) {command.CommandText = $"SELECT * FROM {tableName}";using (var reader = command.ExecuteReaderAsync()) {return reader;}}},,,static MySqlConnection mySqlConnection;public static void Main{mySqlConnection = new MySqlConnection("ConnectionString");mySqlConnection.Open();var tableA = getTable("tableA");var tableB = getTable("tableB");}// 取得public Dictionary&lt;string, Dictionary&lt;string, string&gt;&gt; getTable(string tableName){using (var command = mySqlConnection.CreateCommand()) {command.CommandText = $"SELECT * FROM {tableName}";using (var reader = command.ExecuteReader()) {if (reader.HasRows) {while (reader.Read()) {JObject line = new JObject();for (int i = 0; i &lt; reader.FieldCount; i++) {line.Add(reader.GetName(i), reader.GetString(i));}ret.Add(reader.GetString("id"), line);}}}}return ret;},,,public static void Main{var tableA = getTable("tableA");var tableB = getTable("tableB");}// 取得public Dictionary&lt;string, Dictionary&lt;string, string&gt;&gt; getTable(string tableName){using (MySqlConnection mySqlConnection = new MySqlConnection("ConnectionString")) {mySqlConnection.Open();using (var command = mySqlConnection.CreateCommand()) {command.CommandText = $"SELECT * FROM {tableName}";using (var reader = command.ExecuteReader()) {if (reader.HasRows) {while (reader.Read()) {var line = new Dictionary&lt;string, string&gt;();for (int i = 0; i &lt; reader.FieldCount; i++) {line.Add(reader.GetName(i), reader.GetString(i));}ret.Add(reader.GetString("id"), line);}}}}}return ret;},,,public static void Main{var tableA = getTable("tableA");var tableB = getTable("tableB");}public DataTable getTable(string tableName) {DataTable tbl = new DataTable();using(MySqlConnection mySqlConnection = new MySqlConnection(builder.ConnectionString)) {mySqlConnection.Open();using(var command = mySqlConnection.CreateCommand()) {command.CommandText = $"SELECT * FROM {tableName}";using(var reader = command.ExecuteReader()) {tbl.Load(reader);}}}return tbl;},,,// メイン
public static void Main{
取得public async Task&lt;DataReader&gt; getTable(string tableName){using (var command = mySqlConnection.CreateCommand()) {command.CommandText = $"SELECT * FROM {tableName}";using (var reader = command.ExecuteReaderAsync()) {return reader;}}},,,static MySqlConnection mySqlConnection;public static void Main{mySqlConnection = new MySqlConnection("ConnectionString");mySqlConnection.Open();var tableA = getTable("tableA");var tableB = getTable("tableB");}// 取得public Dictionary&lt;string, Dictionary&lt;string, string&gt;&gt; getTable(string tableName){using (var command = mySqlConnection.CreateCommand()) {command.CommandText = $"SELECT * FROM {tableName}";using (var reader = command.ExecuteReader()) {if (reader.HasRows) {while (reader.Read()) {JObject line = new JObject();for (int i = 0; i &lt; reader.FieldCount; i++) {line.Add(reader.GetName(i), reader.GetString(i));}ret.Add(reader.GetString("id"), line);}}}}return ret;},,,public static void Main{var tableA = getTable("tableA");var tableB = getTable("tableB");}// 取得public Dictionary&lt;string, Dictionary&lt;string, string&gt;&gt; getTable(string tableName){using (MySqlConnection mySqlConnection = new MySqlConnection("ConnectionString")) {mySqlConnection.Open();using (var command = mySqlConnection.CreateCommand()) {command.CommandText = $"SELECT * FROM {tableName}";using (var reader = command.ExecuteReader()) {if (reader.HasRows) {while (reader.Read()) {var line = new Dictionary&lt;string, string&gt;();for (int i = 0; i &lt; reader.FieldCount; i++) {line.Add(reader.GetName(i), reader.GetString(i));}ret.Add(reader.GetString("id"), line);}}}}}return ret;},,,public static void Main{var tableA = getTable("tableA");var tableB = getTable("tableB");}public DataTable getTable(string tableName) {DataTable tbl = new DataTable();using(MySqlConnection mySqlConnection = new MySqlConnection(builder.ConnectionString)) {mySqlConnection.Open();using(var command = mySqlConnection.CreateCommand()) {command.CommandText = $"SELECT * FROM {tableName}";using(var reader = command.ExecuteReader()) {tbl.Load(reader);}}}return tbl;},,,// 取得
public async Task&lt;DataReader&gt; getTable(string tableName){
取得public Dictionary&lt;string, Dictionary&lt;string, string&gt;&gt; getTable(string tableName){using (var command = mySqlConnection.CreateCommand()) {command.CommandText = $"SELECT * FROM {tableName}";using (var reader = command.ExecuteReader()) {if (reader.HasRows) {while (reader.Read()) {JObject line = new JObject();for (int i = 0; i &lt; reader.FieldCount; i++) {line.Add(reader.GetName(i), reader.GetString(i));}ret.Add(reader.GetString("id"), line);}}}}return ret;},,,public static void Main{var tableA = getTable("tableA");var tableB = getTable("tableB");}// 取得public Dictionary&lt;string, Dictionary&lt;string, string&gt;&gt; getTable(string tableName){using (MySqlConnection mySqlConnection = new MySqlConnection("ConnectionString")) {mySqlConnection.Open();using (var command = mySqlConnection.CreateCommand()) {command.CommandText = $"SELECT * FROM {tableName}";using (var reader = command.ExecuteReader()) {if (reader.HasRows) {while (reader.Read()) {var line = new Dictionary&lt;string, string&gt;();for (int i = 0; i &lt; reader.FieldCount; i++) {line.Add(reader.GetName(i), reader.GetString(i));}ret.Add(reader.GetString("id"), line);}}}}}return ret;},,,public static void Main{var tableA = getTable("tableA");var tableB = getTable("tableB");}public DataTable getTable(string tableName) {DataTable tbl = new DataTable();using(MySqlConnection mySqlConnection = new MySqlConnection(builder.ConnectionString)) {mySqlConnection.Open();using(var command = mySqlConnection.CreateCommand()) {command.CommandText = $"SELECT * FROM {tableName}";using(var reader = command.ExecuteReader()) {tbl.Load(reader);}}}return tbl;},,,// 取得
public Dictionary&lt;string, Dictionary&lt;string, string&gt;&gt; getTable(string tableName){
取得public Dictionary&lt;string, Dictionary&lt;string, string&gt;&gt; getTable(string tableName){using (MySqlConnection mySqlConnection = new MySqlConnection("ConnectionString")) {mySqlConnection.Open();using (var command = mySqlConnection.CreateCommand()) {command.CommandText = $"SELECT * FROM {tableName}";using (var reader = command.ExecuteReader()) {if (reader.HasRows) {while (reader.Read()) {var line = new Dictionary&lt;string, string&gt;();for (int i = 0; i &lt; reader.FieldCount; i++) {line.Add(reader.GetName(i), reader.GetString(i));}ret.Add(reader.GetString("id"), line);}}}}}return ret;},,,public static void Main{var tableA = getTable("tableA");var tableB = getTable("tableB");}public DataTable getTable(string tableName) {DataTable tbl = new DataTable();using(MySqlConnection mySqlConnection = new MySqlConnection(builder.ConnectionString)) {mySqlConnection.Open();using(var command = mySqlConnection.CreateCommand()) {command.CommandText = $"SELECT * FROM {tableName}";using(var reader = command.ExecuteReader()) {tbl.Load(reader);}}}return tbl;},,,// 取得
public Dictionary&lt;string, Dictionary&lt;string, string&gt;&gt; getTable(string tableName){

            
 SQLの実行はココ insertなのでExecuteNonQueryクラスを利用
    
 任意のブラウザ操作処理 ↑↑↑
using UniRx.Triggers; 
これ必要
                
一定以下のalphaはゼロにする
        
y軸となす角度によって距離が変動するため、毎フレーム更新
    
 パラメーターを使用してキュー メッセージを作成するコードを追加
        
+値が0になるまでJudgeで足す
            var secretValue = _configuration[secretName]; 
 ★配列みたいなもので一致しているものだけとっている？
const string ServiceBusConnectionString = "Endpoint=sb:
***********.servicebus.windows.net;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=***********";
            
 To generate a valid multipass login token, you need the secret given to you in your Shopify admin. 
        return DateTime.Today.Year - this.birth.Year + 1; 
 数え年
            else if (i == columns.Length - 1) sql.Append($", {column} = :{column.ToPascal()} ");　
 最後
        
 3つずつ列挙する10個のオブジェクトを返すprivate static async IAsyncEnumerable&lt;SampleData&gt; GetSampleData(){await Task.Yield();for (int i = 0; i &lt; 10; ++i){yield return new SampleData(i);}}public class SampleData{public SampleData(int value){Value = value;}public int Value { get; }},,,public static class AsyncEnumerableExtensions{/// &lt;summary&gt;/// 指定された非同期ストリームから一定個数ずつオブジェクトを列挙します。/// &lt;/summary&gt;/// &lt;param name="enumerable"&gt;列挙対象の非同期ストリーム&lt;/param&gt;/// &lt;param name="chunkSize"&gt;一度に取得する個数&lt;/param&gt;/// &lt;param name="cancellationToken"&gt;キャンセルトークン&lt;/param&gt;/// &lt;returns&gt;一定個数ずつオブジェクトを列挙する非同期ストリーム&lt;/returns&gt;public static IAsyncEnumerable&lt;IAsyncEnumerable&lt;T&gt;&gt; Chunk&lt;T&gt;(this IAsyncEnumerable&lt;T&gt; enumerable, int chunkSize, CancellationToken cancellationToken = default){return Chunk(enumerable, chunkSize, new NullState(), cancellationToken);}/// &lt;summary&gt;/// 指定された非同期ストリームから一定個数ずつオブジェクトを列挙します。/// &lt;/summary&gt;/// &lt;param name="enumerable"&gt;列挙対象の非同期ストリーム&lt;/param&gt;/// &lt;param name="chunkSize"&gt;一度に取得する個数&lt;/param&gt;/// &lt;param name="state"&gt;列挙状態を管理するオブジェクト&lt;/param&gt;/// &lt;param name="cancellationToken"&gt;キャンセルトークン&lt;/param&gt;/// &lt;returns&gt;一定個数ずつオブジェクトを列挙する非同期ストリーム&lt;/returns&gt;public static async IAsyncEnumerable&lt;IAsyncEnumerable&lt;T&gt;&gt; Chunk&lt;T&gt;(this IAsyncEnumerable&lt;T&gt; enumerable, int chunkSize, IAsyncEnumerablorState state, [EnumeratorCancellation]CancellationToken cancellationToken = default){await using IAsyncEnumerator&lt;T&gt; enumerator = enumerable.GetAsyncEnumerator(cancellationToken);while (!state.IsEof){yield return new ChunkAsyncEnumerable&lt;T&gt;(enumerator, chunkSize, state);}}private class NullState : IAsyncEnumerablorState{bool IAsyncEnumerablorState.IsEof { get; set; }void IAsyncEnumerablorState.OnMoveNext() {}}private readonly struct ChunkAsyncEnumerable&lt;T&gt; : IAsyncEnumerable&lt;T&gt;{internal ChunkAsyncEnumerable(IAsyncEnumerator&lt;T&gt; enumerator, int chunkSize, IAsyncEnumerablorState state){m_Enumerator = enumerator;m_ChunkSize = chunkSize;m_State = state;}private readonly IAsyncEnumerator&lt;T&gt; m_Enumerator;private readonly int m_ChunkSize;private readonly IAsyncEnumerablorState m_State;private async IAsyncEnumerable&lt;T&gt; Enumerate(){int count = 0;while (await m_Enumerator.MoveNextAsync().ConfigureAwait(false)){yield return m_Enumerator.Current;++count;m_State.OnMoveNext();if (count &gt;= m_ChunkSize) { yield break; }}m_State.IsEof = true;}public IAsyncEnumerator&lt;T&gt; GetAsyncEnumerator(CancellationToken cancellationToken = default){return Enumerate().GetAsyncEnumerator(cancellationToken);}}}public interface IAsyncEnumerablorState{bool IsEof { get; set; }void OnMoveNext();},,,// 10個のオブジェクトを返す
private static async IAsyncEnumerable&lt;SampleData&gt; GetSampleData()

            
 (仮にここでMyTextPropを書き換えたとしても画面側(DispText)には伝わらない！！！！)
        
表示
                .Build();  
 誕生日をセットしていないのでコンパイルエラーにしたい
    
色の値を設定するための関数
                    ... 
 必要ならここになにかを記述
        
指定したキーの押上
                
 xml保存
    
 RenderTextureからTexture2Dに変換// 3角ポリゴンをつくる3頂点のインデックスを取得
int p1Index = Triangles[id.x * 3];
// 3頂点に対応したuv座標を取得
float2 uv1 = UVs[p1Index];
// テクスチャの座標に変換
uint2 p1Pos = uint2(uv1.x * Width, uv1.y * Height);
2点間に線を引くvoid drawline(uint2 p1, uint2 p2, float4 color) {int2 diffp12 = int2(p2.x-p1.x, p2.y-p1.y);float distp12 = distance(p1, p2);for (int i = 0; i &lt; distp12; i++){UVMap[p1 + diffp12 / distp12 * i] = color;}},,,ComputeShader cs = Instantiate(Resources.Load&lt;ComputeShader&gt;("getUVMap")) as ComputeShader;int kernel = cs.FindKernel("CSMain");,,,var triangleBuffer = new ComputeBuffer(triangles.Count(), sizeof(int));var uvBuffer = new ComputeBuffer(uvs.Count(), Marshal.SizeOf(typeof(Vector2)));triangleBuffer.SetData(triangles);uvBuffer.SetData(uvs);cs.SetTexture(kernel, "UVMap", uvMapRT);cs.SetInt("Width", texture.width);cs.SetInt("Height", texture.height);cs.SetBuffer(kernel, "Triangles", triangleBuffer);cs.SetBuffer(kernel, "UVs", uvBuffer);,,,cs.Dispatch(kernel, triangles.Length / 3, 1, 1);,,,//　2点間に線を引く
void drawline(uint2 p1, uint2 p2, float4 color) {

        
 アクションメソッド実行後処理
    
 Update is called once per frame
            
 最後に時刻文字列に戻してList化している。
    rb.AddForce(1.0f, 2.0f, -1.0f); 
 加える力のベクトルをVectorで入れる
    
 ジェネリックパラメーターで object を指定する
                        
指を離した時
// localScaleを表すベクトルをワールドの向きに変換
var worldDirectedLocalScale
// ワールド上で上記ベクトルを示す場合のローカル上での表現方法を算出
 これがlocalScale設定値の大きさをワールド上で実現するために必要なlocalScaleとなる

            var newReader = jobject.CreateReader(); 
As JsonReader cannot be used twice, create new one and pass it.
            
 割り切れたら最小公倍数public static int Lcm(int a, int b){var x = Gcd(a, b);return a * b / x;},,,using System;public static void Main(){var a = 10;var b = 20;Console.WriteLine(Gcd(a,b));Console.WriteLine(Lcm(a,b));},,,// 最小公倍数
public static int Lcm(int a, int b)

    
 JSON文字列に戻す
    
 呼び出すラベル
                
 UTF-8で１バイトならASCII範囲の文字
                
アタッチさせたいオブジェクト名を書く
        
 データの中身からグループのヘッダに出すものを決める
    
 適当な後続処理...
        
 先頭の引数は繰り返し回数を表すものとする
            
 Do we configure just once or do we configure and then watch?
                click = true; 
クリックされた判定にする
                                        .OrderByDescending(s =&gt; s.id)   
 IDの降順
using CustomInput; 
自分で定義したやつ
        
 ボタンをおしたらデータの中身を追加
            
 Note disposing has been done.
        
値を保存する処理など
        options.RespectBrowserAcceptHeader = true; 
 false by default
            
 あんまり使わない
        
 MyTextBox フィールドのアクセス指定子を internal にしておけば、このように別のクラスから触れる。
        
 ボタンをおしたらデータの中身を追加
        
テキストUIに年・月・日・秒を表示させる
        
 右小指
                        s =&gt; s.Created);                
 結果出力用
            
 データ挿入
            
 保持したデータを画面に出力
    
前略
            
 電卓プロセスを終了させます
スーパークラスで処理の枠組みを決めます。public abstract class Template{protected abstract void Morning();protected abstract void Afternoon();protected abstract void Night();public void Play(){Morning();Afternoon();Night();}}public class Weekday : Template{protected override void Morning(){Console.WriteLine("朝：行きの電車に乗る");}protected override void Afternoon(){Console.WriteLine("昼：会社でお仕事をする");}protected override void Night(){Console.WriteLine("夜：帰りの電車に乗る");}}public class Holiday : Template{protected override void Morning(){Console.WriteLine("朝：朝寝をする");}protected override void Afternoon(){Console.WriteLine("昼：昼寝をする");}protected override void Night(){Console.WriteLine("夜：夜寝をする");}},,,//スーパークラスで処理の枠組みを決めます。
public abstract class Template

            
プロパティ出力
    
   ここから上省略
    
 右端は常に0
            
 のようなコードとしてコンパイルされます。
// または
HogeAttribute hoge = Attribute.GetAttribute(typeof(TargetClass), typeof(HogeAttribute)) as HogeAttribute;

// TypeForwadedToによりAssemblyBのFoo.Barへ転送される
[assembly: System.Runtime.CompilerServices.TypeForwardedTo(typeof(Foo.Bar))]

            
 正規表現で分割
// 例外発生
TimeSpan ts = TimeSpan.Parse("30:00");

                
 テキスト開始位置をこの時点で取得
        
衝突した時の処理
        
 Tween破棄
                    
先頭まで戻ってきたら終わり
        
名前を言え、メソッド
      "https:
api.github.comgraphql",
//以下略
var esk = new Youmu();

            
クリアボタン
                
 GameObjectだったりScriptableObjectだったり.
        
敵に当たったら音が鳴ってマテリアル変更→無敵時間を作って終わったらマテリアルを元に戻す
        GeneratedResolver.Instance 
 今回事前生成しようとしているResolver
        
波形表示
Console.WriteLine(pe.StandardOutput); 
標準出力の結果を出力
    return false; 
3
            
 公開されている機能を実行すると、その機能の実行結果として、公開されているUserControlの値が更新されるサンプル
        
WebGL
                
 通信～デシリアライズ前とは逆の変換
            
 二度目は何も変わっていないが，メソッドは再び呼ばれている．
            
ひっくり返す処理
GameObject hogeGameObject = new GameObject(origin); 
Hogeを複製
            
 標準出力エリアのクリア
        
 データグリッドで自動で見せない列
    .RepeatSafe(); 
 判定が終わったら繰り返し
                
 石を64枚EMPTYで生成
            
SceneFadeManagerの中のフェードアウト開始関数を呼び出し
            
コンパイルしてキャッシュしつつ返す
    EditorApplication.update -= Repaint; 
増殖を防ぐ//キャッシュ
static readonly FieldInfo fi_m_NativeObjectPtr = typeof(SerializedObject)

        
 context.Post(state =&gt; DestroyCube(), null);
          
 ↓追加↓
    class Class1 : INotifyPropertyChanged  
 バインディングさせるソースは、INotifyPropertyChangedが必要
以下のような変数を定義するとstring food = "     apple     ";Console.WriteLine($"[{food}]");// このように出力される→ [     apple     ],,,string trimFood = food.Trim();Console.WriteLine($"[{trimFood}]");→ [apple]// 先頭のみトリミングtrimFood = food.TrimStart();Console.WriteLine($"[{trimFood}]");→ [apple     ]// 末尾のみトリミングtrimFood = food.TrimEnd();Console.WriteLine($"[{trimFood}]");→ [     apple],,,string fav = "Like Movie";Console.WriteLine(fav);→ Like Movie//置き換えを行う時はReplaceメソッドを使用するfav = fav.Replace("Movie", "Running");Console.WriteLine(fav);→ Like Running,,,Console.WriteLine(fav.ToUpper());→ LIKE RUNNINGConsole.WriteLine(fav.ToLower());→ like runnning,,,string intro = "I have no friends, but live strongly";// ContainsConsole.WriteLine(intro.Containts("friends"));Console.WriteLine(intro.Containts("foods"));// StartsWithConsole.WriteLine(intro.StartsWith("I"));Console.WriteLine(intro.StartsWith("friends"));// EndsWithConsole.WriteLine(intro.EndsWith("stringly"));Console.WriteLine(intro.EndsWith("friends"));→ True→ False→ True→ False→ True→ False,,,// 以下のような変数を定義すると
string food = "     apple     ";
// このように出力される
→ [     apple     ]
先頭のみトリミングtrimFood = food.TrimStart();Console.WriteLine($"[{trimFood}]");→ [apple     ]// 末尾のみトリミングtrimFood = food.TrimEnd();Console.WriteLine($"[{trimFood}]");→ [     apple],,,string fav = "Like Movie";Console.WriteLine(fav);→ Like Movie//置き換えを行う時はReplaceメソッドを使用するfav = fav.Replace("Movie", "Running");Console.WriteLine(fav);→ Like Running,,,Console.WriteLine(fav.ToUpper());→ LIKE RUNNINGConsole.WriteLine(fav.ToLower());→ like runnning,,,string intro = "I have no friends, but live strongly";// ContainsConsole.WriteLine(intro.Containts("friends"));Console.WriteLine(intro.Containts("foods"));// StartsWithConsole.WriteLine(intro.StartsWith("I"));Console.WriteLine(intro.StartsWith("friends"));// EndsWithConsole.WriteLine(intro.EndsWith("stringly"));Console.WriteLine(intro.EndsWith("friends"));→ True→ False→ True→ False→ True→ False,,,// 先頭のみトリミング
trimFood = food.TrimStart();
末尾のみトリミングtrimFood = food.TrimEnd();Console.WriteLine($"[{trimFood}]");→ [     apple],,,string fav = "Like Movie";Console.WriteLine(fav);→ Like Movie//置き換えを行う時はReplaceメソッドを使用するfav = fav.Replace("Movie", "Running");Console.WriteLine(fav);→ Like Running,,,Console.WriteLine(fav.ToUpper());→ LIKE RUNNINGConsole.WriteLine(fav.ToLower());→ like runnning,,,string intro = "I have no friends, but live strongly";// ContainsConsole.WriteLine(intro.Containts("friends"));Console.WriteLine(intro.Containts("foods"));// StartsWithConsole.WriteLine(intro.StartsWith("I"));Console.WriteLine(intro.StartsWith("friends"));// EndsWithConsole.WriteLine(intro.EndsWith("stringly"));Console.WriteLine(intro.EndsWith("friends"));→ True→ False→ True→ False→ True→ False,,,// 末尾のみトリミング
trimFood = food.TrimEnd();
//置き換えを行う時はReplaceメソッドを使用する
fav = fav.Replace("Movie", "Running");

    
 iEnumerator.Reset(); &lt;- NotSupportedExceptionがスローされる
↓マウスの位置を補足するメソッド(){}四角を塗るメソッド(){},,,四角に色を塗るか判断するメソッド(){マウスの位置を補足するメソッド();if(マウスの位置が四角の中なら){四角を塗るメソッド();}}マウスの位置を補足するメソッド(){}四角を塗るメソッド(){},,,四角の枠を描写するメソッド(){},,,マウスが動いたときのイベント(){四角に色を塗るか判断するメソッド();}四角に色を塗るか判断するメソッド(){マウスの位置を補足するメソッド();if(マウスの位置が四角の中なら){四角を塗るメソッド();}}マウスの位置を補足するメソッド(){}四角を塗るメソッド(){}四角の枠を描写するメソッド(){},,,
  
パスワードなどを設定、しなければ初期値でセーブします。
            if (!DateTime.TryParse(inputText2, out DateTime _)) 
 CS8183:「暗黙的に型指定された破棄の型を推論できません」対策として型を指定（ここでは、out の次の DateTime）
    
 ReactivePropertyとして参照したい箇所ではこれを参照
    
処理//呼出し側
y = method(ref x)

        
 割愛
            _httpClient.PostAsync("https:
api.line.mev2botmessagereply", stringContent).Wait();
        
1フレーム後にPauseする
        
foreachで要素数の数だけ繰り返す
            
変数iのが3の時はcontinue以下の処理は実行しない
    
 削除内容の保存
    driver.Navigate().GoToUrl("https:
www.google.com");
        
}
            min = randamValues[i] &lt; min ? randamValues[i] : min;
←ここの書き方で差は出るの？
            _context.Remove(d); 
 先頭を削除する
            base.Close(); 
 必須
    
INotifyPropertyChangedに定義されているイベント
            

        
 略
        
 ushort Reserved4;
                context.Result = new UnauthorizedResult(); 
 未認証なら401を返す
        
そのシーンをロードする
        
lanceNameが存在するなら該当する装備を取得//以下省略
}

        if (collision.gameObject.CompareTag("gravity"))
オブジェクトにgravityタグ
        
バイナリに変換こんな配列がint[] hoge = { 0, 1, 2, 3, 4 };//こうするとConsole.WriteLine(hoge);//こうなるから//Output: System.Int32//自作関数でラップするとPrintArray(hoge);//いい感じに出力される//Output: [ 0, 1, 2, 3, 4 ],,,//int文字列から特定の位置にある数字を取り出す//12345// ↑indexN//return 2/// &lt;summary&gt;/// Integer から指定されたインデックスにある数値を取り出します。/// 12345678 の インデックス 5 の場合 返り値は 5 です。/// &lt;/summary&gt;/// &lt;param name="source"&gt;ソース元である数値&lt;/param&gt;/// &lt;param name="indexN"&gt;インデックス&lt;/param&gt;/// &lt;returns&gt;取り出された数値&lt;/returns&gt;private int StrMid(int source, int indexN){var s = source.ToString().Substring(indexN, 1);return int.Parse(s);},,,using (SHA256NotManaged sha256 = SHA256NotManaged.Create()){var plainText = textBox1.Text;var encryptedText = sha256.ComputeHash(plainText);textBox2.Text = encryptedText;},,,using (SHA256NotManaged sha256 = SHA256NotManaged.Create()){TimeSpan elapsed = StopwatchEx.Context(() =&gt; { sha256.ComputeHash("abc"); }, 1000);Console.WriteLine($"自作: {elapsed.TotalMilliseconds}");}using (System.Security.Cryptography.SHA256 sha256_ = System.Security.Cryptography.SHA256.Create()){TimeSpan elapsed = StopwatchEx.Context(() =&gt; { sha256_.ComputeHash(abc); }, 1000);Console.WriteLine($"本家: {elapsed.TotalMilliseconds}");},,,//ブロックが複数ある場合も想定されるので、//n*512から512先までをコピーしなければいけない。Array.Copy(plain_bits, n * BLOCK_SIZE, block, 0, BLOCK_SIZE);,,,var test = s.SelectMany((v) =&gt; BitConverter.GetBytes(v).Reverse()).ToArray();,,,var test = s.SelectMany((v) =&gt; BitConverter.GetBytes(v).Reverse()).ToArray();var makehash_fixed_test = test.SelectMany((v) =&gt; Convert.ToString(v, 16)).ToArray();var t = string.Join("", test.Select(v =&gt; $"{v:X2}"));Console.WriteLine(string.Format("MakeHashFixed?: ({0}) : {1}", t.Length, t.ToLower()));,,,//これも不具合発生.private string MakeHash(uint[] s){var n = s.Select((v) =&gt; $"{v:X2}");return string.Join("", n).ToLower();},,,//こんな配列が
int[] hoge = { 0, 1, 2, 3, 4 };
//こうすると
Console.WriteLine(hoge);
//こうなるから
Output: System.Int32
//自作関数でラップすると
PrintArray(hoge);
//いい感じに出力される
Output: [ 0, 1, 2, 3, 4 ]
//int文字列から特定の位置にある数字を取り出す
12345
//ブロックが複数ある場合も想定されるので、
n*512から512先までをコピーしなければいけない。
これも不具合発生.private string MakeHash(uint[] s){var n = s.Select((v) =&gt; $"{v:X2}");return string.Join("", n).ToLower();},,,//これも不具合発生.
private string MakeHash(uint[] s)

      
解析するやつ
        &lt;a href="https:
docs.microsoft.comen-usaspnet" target="_blank"&gt;About&lt;a&gt;
                
 Then
            
 全てのテキストボックスの値をクリアする
            s.Prefixes.Add("http:
IPアドレス:ポート番号");
    
other.transform.position = saveThisObjPosition;
        
Source追加//Gridタグを消去
,,,
NavigationWindowに変更public partial class MainWindow : NavigationWindow {public MainWindow() {InitializeComponent();}},,,&lt;Page 略//追加:LoadedTitle="Page1" Loaded="Page1_Loaded"&gt;//追加&lt;Grid&gt;&lt;StackPanel Orientation="Vertical" Margin="10,0"&gt;&lt;Label&gt;名前を入力して下さい&lt;/Label&gt;&lt;TextBox x:Name="_name" Width="100" HorizontalAlignment="Left"&gt;&lt;/TextBox&gt;&lt;Button Click="Btn_Click" Width="100" HorizontalAlignment="Left" Margin="0,10"&gt;送信&lt;/Button&gt;&lt;/StackPanel&gt;&lt;/Grid&gt;,,,//追加public partial class Page1 : Page {private NavigationService _navigation;public Page1() {InitializeComponent();}private void Btn_Click(object sender, RoutedEventArgs e) {Application.Current.Properties["Name"] = _name.Text;var _page2 = new Page2();_navigation.Navigate(_page2);}private void Page1_Loaded(object sender, RoutedEventArgs e) {_navigation = this.NavigationService;}},,,//追加&lt;Grid&gt;&lt;StackPanel Orientation="Horizontal" Margin="10,0"&gt;&lt;Label Name="_named" Margin="0,10"&gt;&lt;/Label&gt;&lt;Label Margin="0,10"&gt;さん。ようこそ。&lt;/Label&gt;&lt;/StackPanel&gt;&lt;/Grid&gt;,,,//変更public partial class Page2 : Page {public Page2() {InitializeComponent();_named.Content = Application.Current.Properties["Name"];}},,,//NavigationWindowに変更
public partial class MainWindow : NavigationWindow {
//追加:Loaded
Title="Page1" Loaded="Page1_Loaded"&gt;
//追加
&lt;Grid&gt;
追加public partial class Page1 : Page {private NavigationService _navigation;public Page1() {InitializeComponent();}private void Btn_Click(object sender, RoutedEventArgs e) {Application.Current.Properties["Name"] = _name.Text;var _page2 = new Page2();_navigation.Navigate(_page2);}private void Page1_Loaded(object sender, RoutedEventArgs e) {_navigation = this.NavigationService;}},,,//追加&lt;Grid&gt;&lt;StackPanel Orientation="Horizontal" Margin="10,0"&gt;&lt;Label Name="_named" Margin="0,10"&gt;&lt;/Label&gt;&lt;Label Margin="0,10"&gt;さん。ようこそ。&lt;/Label&gt;&lt;/StackPanel&gt;&lt;/Grid&gt;,,,//変更public partial class Page2 : Page {public Page2() {InitializeComponent();_named.Content = Application.Current.Properties["Name"];}},,,//追加
public partial class Page1 : Page {
//追加
&lt;Grid&gt;
変更public partial class Page2 : Page {public Page2() {InitializeComponent();_named.Content = Application.Current.Properties["Name"];}},,,//変更
public partial class Page2 : Page {

            
 標準出力エリアのクリア
//使うusingのみでOKです。
using System;

            driver.Navigate().GoToUrl("http:
localhoststest.html");
        
 サービスを登録
        num 
= 2; この部分を変更
    
 変換の本体
// using System.Linq;が必要


            
 string will be generated automatically.
// クラスをインスタンス化し、クラスの変数(あれ、ポインタじゃない？)に格納
ClassA classA = new ClassA();
// int型のmember_aをUnityのコンソールへ出力
Debug.Log(classA.member_a);
// インスタンスを削除
classA = null;

            string dirPath = Application.dataPath + $"
EditorLocalisations{lang}.lproj";  project内に設置したパスを指定// 似たような関数があるので注意　project.GetUnityFrameworkTargetGuidではない
string targetGuid = project.GetUnityMainTargetGuid();

    blockObj.transform.parent = parentBlockObj.transform; 
 生成したブロックの親が誰かを教える
    
 Age[1-5]プロパティに動的にアクセスし、値を設定
        
MEMO : 面積で区切ってゴミを除去してます。
                
 SQLを実行
                            receiveBuffer.Length); 
 data buffer
            
 拡大実施
            
 Map data into ProductModel
this.DataContext = this;
 Windowのクラス自身をDataContextにする
--------------------------------------------------------------------public class    file_io{// --------------------------------------------------------------------public static string file_to_str_proc (string file_in){StreamReader fp_in = new StreamReader (file_in);string  buff;StringBuilder stb = new StringBuilder ();while ((buff = fp_in.ReadLine ()) != null){stb.Append (buff);}fp_in.Close();string  str_in = stb.ToString ();return  str_in;}}// --------------------------------------------------------------------,,,--------------------------------------------------------------------public static string file_to_str_proc (string file_in){StreamReader fp_in = new StreamReader (file_in);string  buff;StringBuilder stb = new StringBuilder ();while ((buff = fp_in.ReadLine ()) != null){stb.Append (buff);}fp_in.Close();string  str_in = stb.ToString ();return  str_in;}}// --------------------------------------------------------------------,,,
        
NameSpaceTest名前空間内にある
                    
 いろいろたくさん
            
 ---------------------------------------------------------------------------
            matrix.ScaleAt(scaleDelta, scaleDelta, orgX, orgY);
中心を指定して対象を拡大
        
アプリケーション設定のいろいろ
        
 リソースの破棄
driver.FindElement(By.XPath("
ol[@id='b_results']lih2a[contains(text(), 'Microsoft Azure')]")).Click();
        
 get file uri  
名前をカウントするpublic int GetNameCount(Creature creature){return creature.GetName().Length;}// 全員スペシャルアタック！public void AllSpecialAttack(IEnumerable&lt;Creature&gt; creatures){foreach (var creature in creatures){creature.SpecialAttack();}},,,// 名前をカウントする
public int GetNameCount(Creature creature)
全員スペシャルアタック！public void AllSpecialAttack(IEnumerable&lt;Creature&gt; creatures){foreach (var creature in creatures){creature.SpecialAttack();}},,,// 全員スペシャルアタック！
public void AllSpecialAttack(IEnumerable&lt;Creature&gt; creatures)

    
 throughout the class.
            
 Mutex開放
        
後始末をする
    
 ※ BreakRoleInheritance メソッドの copyRoleAssignments を false にするfor (var index = securableObject.RoleAssignments.Count - 1; index &gt;= 0; index--){ 実行ユーザーしか残ってないので、for 文は実質 1 回しか繰り返すことがない
        
 ◆追加：ここまで２
            
 ロガーの終了。プロセスを終了する前にログを送信するために必要
 
Getareferencetoacontainernamed"sample-container"andthencreateitOpen the file and upload its datausing (FileStream file = File.OpenRead(path)){await blob.UploadAsync(file);},,,// Verify we uploaded some contentBlobProperties properties = await blob.GetPropertiesAsync();Assert.AreEqual(SampleFileContent.Length, properties.ContentLength);,,,// Clean up after the test when we're finishedawait container.DeleteAsync();,,,// Download the blob's contents and save it to a fileBlobDownloadInfo download = await blob.DownloadAsync();using (FileStream file = File.OpenWrite(downloadPath)){await download.Content.CopyToAsync(file);},,,// Verify the contentsAssert.AreEqual(SampleFileContent, File.ReadAllText(downloadPath));,,,List&lt;string&gt; names = new List&lt;string&gt;();await foreach (BlobItem blob in container.GetBlobsAsync()){names.Add(blob.Name);},,,
            
CSVFile終端まで繰り返し
                if ( (ts!=prevTs) &amp;&amp; tms == 0 ) { 
 xx.xxx から yy.000 になったときに表示
        var attack = new SlashAttack(); 
 ここを変えるだけ
        
 Aの値が0なら透明ピクセル
                
空白行
        m_tr.minVertexDistance = 0.01f; 
頂点間の距離 曲線の滑らかさに起因
    
 サイトのアクセス許可レベルを読み込むforeach (var roleDefinition in web.RoleDefinitions){ サイトのアクセス許可レベルを出力// 出力結果
 Administrator | 2147483646 | フル コントロール || 完全な制御が可能です。
// WebDesigner | 1012866479 | デザイン || 表示、追加、更新、削除、承認、カスタマイズができます。
 Editor | 1011031199 | 編集 || リストを追加、編集、削除できます。リスト アイテムとドキュメントを表示、追加、更新、削除できます。
// Contributor | 1011029151 | 投稿 || リスト アイテムとドキュメントを表示、追加、更新、および削除できます。
 Reader | 138613009 | 閲覧 || ページとリスト アイテム の表示、およびドキュメントのダウンロードができます。
// Guest | 134287408 | 制限付きアクセス || 権限を与えられている場合は、特定のリスト、ドキュメント ライブラリ、リスト アイテム、フォルダー、またはドキュメントを表示できます。
 None | 1011029151 | 投稿コピー ||

            
 ・・・一部省略・・・
  
 To avoid this, reset the indexer if it exists
        $"https:
script.google.commacross{gasId}exec",
            
 eularAngleのxz成分を0にすることで穴の向きを合わせる
            
 AutofacではPrism.Moduleを使えない
// SharePoint リストオブジェクトを取得すると同時に
 既定でアクセスできない HasUniqueRoleAssignments プロパティを読み込む
// 2行で書くバージョン
context.Load(listCsomByTitle);
// 1行で書くバージョン
context.Load(listCsomByTitle, l =&gt; l, l =&gt; l.HasUniqueRoleAssignments);

                
 cancel
                
 別のアプリケーションがミューテックスを解放しないで終了した時
    var results = client.DownloadString( $@"https:
qiita.com:443apiv2items?page={(i+1)}&amp;per_page={DocumentPerPage}" );
        
 Assert
        
 呼び出しごとに戦略(ストラテジー)を切り替える
                
StatusCode リダイレクトのときの処理
            
 (ドキュメントはよく読もう)
     
 retrying. For this simple demo, we just log the failed document keys and continue.
                
 cancel
        
end new code
                
 string responseBody = await client.GetStringAsync(uri);
  
hogehoge
            
 pingの送信
        
 スクリーン座標系の値をUI座標系の値に変換する
    
 filePathをパラメータに指定して「notepad」でファイルを開く
DelayTimerのTickイベントハンドラprivate LoadingDelayTimer_Tick(object sender, EventArgs e){LoadingDelayTimer.Stop();LoadData();}//ListViewのSelectedIndexChangedイベントハンドラprivate ListView_SelectedIndexChanged(object sender, EventArgs e){LoadingDelayTimer.Stop();LoadingDelayTimer.Start();}//データ呼び出し処理private void LoadData(){...},,,//DelayTimerのTickイベントハンドラ
private LoadingDelayTimer_Tick(object sender, EventArgs e)
ListViewのSelectedIndexChangedイベントハンドラprivate ListView_SelectedIndexChanged(object sender, EventArgs e){LoadingDelayTimer.Stop();LoadingDelayTimer.Start();}//データ呼び出し処理private void LoadData(){...},,,//ListViewのSelectedIndexChangedイベントハンドラ
private ListView_SelectedIndexChanged(object sender, EventArgs e)
データ呼び出し処理private void LoadData(){...},,,//データ呼び出し処理
private void LoadData()

                    
byte[] set_data = ;
    await Task.Delay(200); 
 何秒ごとにフラグが変わるかのポーリングの秒数なのでお好きにどうぞ
        istr = new C&lt;object&gt;(); 
 NG コンパイルエラー
    
 Key hookをセット
        
 DELETE apivalues5
    
 解放処理が漏れている。 Marshal.FreeCoTaskMem とかで解放してください。
    
  "index (6) cannot be greater than array.Length - 1 (5)."簡略化前IEnumerable&lt;KeyValuePair&lt;string, int&gt;&gt; Headers = new[]{new KeyValuePair&lt;string, string&gt;("Hoge", 1),new KeyValuePair&lt;string, string&gt;("Piyo", 3),}// 簡略化後IEnumerable&lt;KeyValuePair&lt;string, string&gt;&gt; Headers = new KeyValuePair&lt;string, string&gt;[]{new("Hoge", 1),new("Piyo", 3),}// 更に簡略化後IEnumerable&lt;KeyValuePair&lt;string, string&gt;&gt; Headers = new[]{new("Hoge", 1),new("Piyo", 3),},,,// 簡略化前
IEnumerable&lt;KeyValuePair&lt;string, int&gt;&gt; Headers = new[]
簡略化後IEnumerable&lt;KeyValuePair&lt;string, string&gt;&gt; Headers = new KeyValuePair&lt;string, string&gt;[]{new("Hoge", 1),new("Piyo", 3),}// 更に簡略化後IEnumerable&lt;KeyValuePair&lt;string, string&gt;&gt; Headers = new[]{new("Hoge", 1),new("Piyo", 3),},,,// 簡略化後
IEnumerable&lt;KeyValuePair&lt;string, string&gt;&gt; Headers = new KeyValuePair&lt;string, string&gt;[]
更に簡略化後IEnumerable&lt;KeyValuePair&lt;string, string&gt;&gt; Headers = new[]{new("Hoge", 1),new("Piyo", 3),},,,// 更に簡略化後
IEnumerable&lt;KeyValuePair&lt;string, string&gt;&gt; Headers = new[]

    
 ディレクトリ内のテストデータを読んでテストする
            
上記の条件に当てはまらない場合//宣言
var list = new List&lt;string&gt;();
//var オブジェクト名　= new List&lt;型&gt;(要素数);

//追加
list.Add("Tokyo");
//削除
list.Remove("Osaka");
出力Console.WriteLine("[{0}]", string.Join(", ", list));Console.WriteLine(list[1]);//出力結果&gt;&gt;&gt; [Tokyo, Nagoya]Nagoya,,,Dictionary&lt;int,String&gt; dict = new Dictionary&lt;int,String&gt;();//Dictionary&lt;Keyの型名, Valueの型名&gt; オブジェクト名 = new Dictionary&lt;Keyの型名, Valueの型名&gt;()//追加dict.Add(1,"aaa");dict.Add(2,"bbb");dict.Add(3"ccc");//削除dict.Remove(2)//出力Console.WriteLine(dict[3])&gt;&gt;&gt; ccc//全件出力foreach (KeyValuePair&lt;int, string&gt; item in dict){Console.WriteLine("[{0}:{1}]", item.Key, item.Value);}&gt;&gt;&gt; [1:aaa][2:bbb],,,//出力
Console.WriteLine("[{0}]", string.Join(", ", list));
//出力結果
&gt;&gt;&gt; [Tokyo, Nagoya]
//Dictionary&lt;Keyの型名, Valueの型名&gt; オブジェクト名 = new Dictionary&lt;Keyの型名, Valueの型名&gt;()

//追加
dict.Add(1,"aaa");
//削除
dict.Remove(2)
//出力
Console.WriteLine(dict[3])
foreach (KeyValuePair&lt;int, string&gt; item in dict){Console.WriteLine("[{0}:{1}]", item.Key, item.Value);全件出力
        
 プロセスを開始する.
                
StatusCode リダイレクトのときの処理
        
 GET: Hello
        
 腰の位置を上下させる
   
 2つの整数の加算結果を返すメソッド
        webView.Source = "https:
5ce07f72.ngrok.io";
これまでの書き方void Test(string s){if(s is null){throw new ArgumentNullException(nameof(s));}...}// C# 9.0で提案されている書き方void Test(string s!){...},,,// これまでの書き方
void Test(string s)
C# 9.0で提案されている書き方void Test(string s!){...},,,// C# 9.0で提案されている書き方
void Test(string s!)

//セグメントの総数
int NumKeys;
距離からtに変換float DistanceToT(float distance){float d = distance / DistanceStepSize;int index = Mathf.FloorToInt(d);if(index&gt;=DistanceToTArray.Length-1)return DistanceToTArray[DistanceToTArray.Length-1];float t = d - index;return Mathf.Lerp(DistanceToTArray[index], DistanceToTArray[index+1], t);}//tをSegmentに分割して進んだ距離を配列に入れて返すfloat[] CalcTToDistance(){var tToDistance = new float[NumKeys];var pp = Paths[0].Pos;float t = 0;for (int n = 1; n &lt; NumKeys; n++){t += 1f / Segment;Vector3 p = CalcPos(t);float d = Vector3.Distance(pp, p);PathLength += d;pp = p;tToDistance[n] = PathLength;}return tToDistance;}//距離をSegmentに分割してその位置のtを配列に入れて返すfloat[] CalcDistanceToT(float[] tToDistance){var distanceToT = new float[NumKeys];distanceToT[0] = 0;DistanceStepSize = PathLength/(NumKeys-1);float distance = 0;int tIndex=1;for (int i = 1; i &lt; NumKeys; i++){distance += DistanceStepSize;var d = tToDistance[tIndex];while (d &lt; distance &amp;&amp; tIndex &lt; NumKeys - 1){tIndex++;d = tToDistance[tIndex];}var prevD = tToDistance[tIndex - 1];float delta = d - prevD;float t = (distance - prevD) / delta;distanceToT[i] = (1f/Segment)*(t + tIndex - 1);}return distanceToT;}Vector3 CalcPos(float t){var indexA = Mathf.FloorToInt(Mathf.Min(Paths.Length - 1, t));var indexB = Mathf.FloorToInt(Mathf.Min(Paths.Length - 1, indexA+1));return Bezier3(t-indexA,Paths[indexA].Pos,Paths[indexA].Pos + Paths[indexA].Tangent,Paths[indexB].Pos - Paths[indexB].Tangent,Paths[indexB].Pos);},,,//距離からtに変換
float DistanceToT(float distance)
tをSegmentに分割して進んだ距離を配列に入れて返すfloat[] CalcTToDistance(){var tToDistance = new float[NumKeys];var pp = Paths[0].Pos;float t = 0;for (int n = 1; n &lt; NumKeys; n++){t += 1f / Segment;Vector3 p = CalcPos(t);float d = Vector3.Distance(pp, p);PathLength += d;pp = p;tToDistance[n] = PathLength;}return tToDistance;}//距離をSegmentに分割してその位置のtを配列に入れて返すfloat[] CalcDistanceToT(float[] tToDistance){var distanceToT = new float[NumKeys];distanceToT[0] = 0;DistanceStepSize = PathLength/(NumKeys-1);float distance = 0;int tIndex=1;for (int i = 1; i &lt; NumKeys; i++){distance += DistanceStepSize;var d = tToDistance[tIndex];while (d &lt; distance &amp;&amp; tIndex &lt; NumKeys - 1){tIndex++;d = tToDistance[tIndex];}var prevD = tToDistance[tIndex - 1];float delta = d - prevD;float t = (distance - prevD) / delta;distanceToT[i] = (1f/Segment)*(t + tIndex - 1);}return distanceToT;}Vector3 CalcPos(float t){var indexA = Mathf.FloorToInt(Mathf.Min(Paths.Length - 1, t));var indexB = Mathf.FloorToInt(Mathf.Min(Paths.Length - 1, indexA+1));return Bezier3(t-indexA,Paths[indexA].Pos,Paths[indexA].Pos + Paths[indexA].Tangent,Paths[indexB].Pos - Paths[indexB].Tangent,Paths[indexB].Pos);},,,//tをSegmentに分割して進んだ距離を配列に入れて返す
float[] CalcTToDistance()
距離をSegmentに分割してその位置のtを配列に入れて返すfloat[] CalcDistanceToT(float[] tToDistance){var distanceToT = new float[NumKeys];distanceToT[0] = 0;DistanceStepSize = PathLength/(NumKeys-1);float distance = 0;int tIndex=1;for (int i = 1; i &lt; NumKeys; i++){distance += DistanceStepSize;var d = tToDistance[tIndex];while (d &lt; distance &amp;&amp; tIndex &lt; NumKeys - 1){tIndex++;d = tToDistance[tIndex];}var prevD = tToDistance[tIndex - 1];float delta = d - prevD;float t = (distance - prevD) / delta;distanceToT[i] = (1f/Segment)*(t + tIndex - 1);}return distanceToT;}Vector3 CalcPos(float t){var indexA = Mathf.FloorToInt(Mathf.Min(Paths.Length - 1, t));var indexB = Mathf.FloorToInt(Mathf.Min(Paths.Length - 1, indexA+1));return Bezier3(t-indexA,Paths[indexA].Pos,Paths[indexA].Pos + Paths[indexA].Tangent,Paths[indexB].Pos - Paths[indexB].Tangent,Paths[indexB].Pos);},,,//距離をSegmentに分割してその位置のtを配列に入れて返す
float[] CalcDistanceToT(float[] tToDistance)

            
return FFF&lt;int&gt;.PPT(14);
                    
 Refresh original values to bypass next concurrency check
        
目的地を設定
        
特定のキー入力で文字を1文字ずつ出す機能を止める
            string ret_text = System.Text.Encoding.Unicode.GetString(buf);  
 Unicodeは .Net では UTF-16 と同義です。
    .ToUniTask(); 
 UniTask&lt;T[]&gt;
        
JSON作成とアプリのデータパスに保存します。
// 「左辺」 = 「右辺」
builder = JWTBuilder.Create()

    
 Update is called once per frame
        
 計算結果を持つプロパティ。入力が変われば割引後価格が変わり、計算結果も連動して変わる。
if(isIndexStraight &amp;&amp; !isMiddleStraight  &amp;&amp; !isRingStraight  &amp;&amp; !isPinkyStraight ){ 
人差し指だけまっすぐで、その他が曲がっている
            
 APIを呼び出して情報を取得
    
 stringのnameとintのlevel// 古いC#では冗長
Player player = LoadPlayer();
// 新しいC#ではこんな感じに簡潔に書ける
var targetMonsterName = player?.Target?.Name;
// 古いC#の書き方
Player player = LoadPlayer();
// 新しいC#ではこんな感じに簡潔に書ける
var targetMonsterName = player?.Target?.Name ?? "Default Target Name";
objはどんな型がくるかわからないpublic static void SwitchExample0(object obj){switch (obj){case int n when n &lt; 0:Debug.Log("負の数だよ！");break;case 7:Debug.Log("ラッキーセブンだよ！");break;case int n:Debug.Log($"整数だよ！ {n}");break;case string s:Debug.Log($"文字列だよ : {s}");break;case null:Debug.Log("nullだよ");break;default:Debug.Log("それ意外だよ");break;}},,,public abstract class Shape{public abstract double Area { get; }}public class Rect : Shape{public int Height { get; set; }public int Width { get; set; }public override double Area =&gt; Width * Height;}public class Circle : Shape{public int Radius { get; set; }public override double Area =&gt; Radius * Radius * Math.PI;},,,// 抽象型のShape。列挙型じゃないよ！public static void SwitchExample0(Shape shape){switch (shape){case Rect r when r.Width == r.Height:Debug.Log($"正方形だよ！ 面積: {r.Area}");break;case Rect r:Debug.Log($"長方形だよ！ 面積 : {r.Area}");break;case Circle c:Debug.Log($"円だよ！ {c.Area}");break;}},,,// objはどんな型がくるかわからない
public static void SwitchExample0(object obj)
抽象型のShape。列挙型じゃないよ！public static void SwitchExample0(Shape shape){switch (shape){case Rect r when r.Width == r.Height:Debug.Log($"正方形だよ！ 面積: {r.Area}");break;case Rect r:Debug.Log($"長方形だよ！ 面積 : {r.Area}");break;case Circle c:Debug.Log($"円だよ！ {c.Area}");break;}},,,// 抽象型のShape。列挙型じゃないよ！
public static void SwitchExample0(Shape shape)

    
 引数で渡されたConnectionを使用してホストと通信する。
    
 Use this for initialization
    
 Start is called before the first frame update
    
大安→赤口→先勝→友引→先負→仏滅
    
 Update is called once per frame
        var castA = new CastA(); 
 CastA型でインスタンス化する
        
Application.EnableVisualStyles();
        
 yamlデータのオブジェクトを作成
            
 returns ["Hello Tokyo!", "Hello Seattle!", "Hello London!"]
// 並列処理オプションの設定
ParallelOptions parallelOptions = new ParallelOptions();
並列処理実行Parallel.ForEach(list, parallelOptions, (value) =&gt;{Console.Write(value);});,,,// 並列処理実行
Parallel.ForEach(list, parallelOptions, (value) =&gt;

        m_Nodes.Remove(node);  
 順序を保持するためのリストから削除
    
 処理
            pr.BeginOutputReadLine(); 
非同期で標準出力読み取り
            y = 2; 
Bai(1)を2に置き換えた
    
 ここはワーカースレッド1// ここは UI スレッド
,,,

    
 add metadata signaling key// こんな感じ
var texture = ScreenCapture.CaptureScreenshotAsTexture(1);

            
JSON文字列をテキストファイルに保存
            
こいつは、ExternalLibにあるグローバル名前空間にいたNoEnveloped
        
署名する
    
 以下省略
    
のようにして、Constraintを有効にする
    
これを作ることによってListでの管理が可能になる。本物の実装ではFragmentを用いているのでちょっと形式が違うと思います…public override View OnCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState){var view = inflater.Inflate(Resource.Layout.Suggest, container, false);var button = view.FindViewById&lt;Button&gt;(Resource.Id.updateButton/* ボタンのId */);button.Click += Clicked;return view;}private void Clicked(object sender, EventArgs e)//ここにクリック時の処理を記述...}//本物の実装ではFragmentを用いているのでちょっと形式が違うと思います…
public override View OnCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
//ここにクリック時の処理を記述...
}
//本当はDictionaryを用いたかったが、JavaList&lt;IDictionary&lt;string, object&gt;&gt;()へのキャストでExceptionを吐いてしまうためJavaDictionaryを用いた,
private JavaDictionary&lt;string, string&gt; dic = new JavaDictionary&lt;string, string&gt;();
//アダプター作成とセット
var lsView = View.FindViewById&lt;ListView&gt;(Resource.Id.outputView);

          .Replace("\n", string.Empty); 
 Windowsだったらこの行は不要かも
speak.cancelPlay();
音声再生をキャンセルする
        set { _text = value; PropertiesUpdated?.Invoke();}  
プロパティの変更を通知する
                serializer.Serialize(writer, app, ns); 
 空白のnamespaceを使ってシリアライズ
    
 Tweenの破棄
            
 Assert
            
 モーターをブレーキする.
    
下で参照する項目を指定することで値を格納し表示する
        
 Using a DependencyProperty as the backing store for SelectedItemsProxy.  This enables animation, styling, binding, etc...
    
 Timeout
//そのプロセス名のプロセスを全部取得し
System.Diagnostics.Process[] ps = System.Diagnostics.Process.GetProcessesByName(ProcessName);
foreach (System.Diagnostics.Process p in ps){取得したプロセスのIDと名前を順にコレクションに格納
                
 衝突したオブジェクトのTagがEnemyならreturn
                
 ここで入力ブロッキングOff
                
レスポンス生成
    
 Update is called once per frame
Debug.Log(history.Where(x =&gt; x % 2 == 0).Count()); 
 linqも使える
        
DumpTextOfActiveSheet();
        
 エラーは無視
    
非同期で実行したモーダルボタン押下の処理が完全に終了するのを待つ
            
単に白色に置き換えると返って浮く場合は色を調整
        
　自身のクラスのインスタンスを初期化
            int step = 2;
(BUFFER_SIZE+WIDTH-1)WIDTH;
    
+1して返すだけの関数//というのがあったとすると

//とつかうとGetOne()内で直接B.One()というメソッドが呼ばれます

//とつかうとGetOne()内ではIA.One()から仮想関数として呼ばれる
,,,

            
 例外処理：引くくじが残っていない
    
 サンプルなので雑管理だけど許して欲しい
// #error version -&gt; コンパイラ バージョン: '3.7.0-6.20371.12 (917b9dfa)'。言語バージョン: default。
 いや、default ってなんや。

string deploymentUrl = "&lt;https:
***.***.jphoge.vsto";&gt;
            
});
    Marshal.FreeCoTaskMem(pStructure);
確保したアンマネージドメモリの解放
                    
 | NativeMethods.AnimateWindowFlags.AW_VER_NEGATIVE
            
UdpClientを閉じる
        
 同じ名前のUIElementsが複数存在する(名前空間が違う等)場合の警告。
    
各タイル座標に属性を付与
            
 変数名, 設置する座標X, 設置する座標Y, 画像の幅Width, 画像の高さHeight);
        _ =&gt; first, 
 EQ// × 自然な定義だけどこれは無限再帰して動かない
T Fix&lt;T&gt;(Func&lt;T, T&gt; f)
// ○ 値を関数で包んで評価タイミングを調整可能にしたもの
Func&lt;T&gt; Fix&lt;T&gt;(Func&lt;Func&lt;T&gt;, Func&lt;T&gt;&gt; f)
// ◎ さらにパラメータを任意の T に一般化した形
Func&lt;T, TResult&gt; Fix&lt;T, TResult&gt;(Func&lt;Func&lt;T, TResult&gt;, Func&lt;T, TResult&gt;&gt; f)

        
認証済みの場合
        
 コンパイルを実行し、dllを生成します.
            
 Vignette
        
 Jpenの保存品質。小さいほど悪い
                    
ファイルに格納する
        
 シーン変更検知,Unityの仕様上beforeには何も入っていない,afterにロードされたシーンがある.
               @"^s?https?:
[-_.!~*'()a-zA-Z0-9;?:@&amp;=+$,%#]+$"
            
自分のアバターのみLayerを変更して視界に映らないようにする
    
 AssertTest casesTestCase(1, "D", expected: "01234567-89ab-cdef-0123-456789abcdef");TestCase(2, "B", expected: "{01234567-89ab-cdef-0123-456789abcdef}");TestCase(3, "P", expected: "(01234567-89ab-cdef-0123-456789abcdef)");TestCase(4, "N", expected: "0123456789abcdef0123456789abcdef");TestCase(5, "A", expectedExceptionType: typeof(FormatException));,,,TestActual&lt;string&gt; actual = TestAA.Act(() =&gt; guid.ToString("A"));// actual.Return: default(string)// actual.Exception: FormatException instance,,,actual.Assert(@return: default(string), exception: typeof(FormatException));,,,// Arrangevar guid = new Guid("01234567-89ab-cdef-0123-456789abcdef");TestAA.Act(() =&gt; guid.ToString("D")).Assert("01234567-89ab-cdef-0123-456789abcdef");,,,// Arrange...// Act...// Assert...,,,
    
 by visiting https:aka.msxamarinforms-previewer
        
 削除処理
                                            
 await fl.CommitAsync(csrc.Token).ConfigureAwait(false);
        
 呼び出して結果を出力
    
 タスクの名前
    
 DefaultCommandまたはRegisterKeywordで選ばれたときしか呼ばれない。
        float distance = Mathf.Abs(Vector2.Distance(mousePos, prevMousePos)); 
 マウスの移動した距離
            
 殴る武器の処理
    
 数値に関してはClosedXMLの読み取るとdoubleで取得される
    Action close = () =&gt; writer.Dispose();                 
 閉じる。
// CurrentUICulture の変更。
System.Threading.Thread.CurrentThread.CurrentUICulture = new System.Globalization.CultureInfo("en-GB");

                    
チェックが通ったものの場合j - 1個ひっくり返す。
    
 デバッグ以外ならprivateに設定鍵を生成するpublic void GenerateKeys(int k){p = GenerateRandomPrime(k);Console.WriteLine("ランダムな素数p = {0}", p);g = GenerateGroupGen(k, p);Console.WriteLine("原始元g = {0}", g);x = GenerateRandom(k, 0, p - 2);Console.WriteLine("ランダムな非負整数x = {0}", x);y = BigInteger.ModPow(g, x, p);Console.WriteLine("y = g^x mod p = {0}", y);}// 原始元を生成するpublic static int GenerateGroupGen(int k, BigInteger p){for (int g = 2; ; g++){bool isGen = true;BigInteger a = 1;for (int i = 1; i &lt;= p - 2; i++){a *= g;if (a &gt;= p) a %= p;if (a == 1){isGen = false;break;}}if (isGen){return g;}}},,,// 暗号化するpublic (BigInteger c1, BigInteger c2) Encrypt(BigInteger m){var r = GenerateRandom(K, 0, p - 2);Console.WriteLine("ランダムな数r = {0}", r);var c1 = BigInteger.ModPow(g, r, p);var c2 = (m * BigInteger.ModPow(y, r, p)) % p;return (c1, c2);},,,// 復号するpublic BigInteger Decrypt((BigInteger c1, BigInteger c2) c){return (c.c2 * BigInteger.ModPow(c.c1, p - 1 - x, p)) % p;},,,// 鍵を生成する
public void GenerateKeys(int k)
原始元を生成するpublic static int GenerateGroupGen(int k, BigInteger p){for (int g = 2; ; g++){bool isGen = true;BigInteger a = 1;for (int i = 1; i &lt;= p - 2; i++){a *= g;if (a &gt;= p) a %= p;if (a == 1){isGen = false;break;}}if (isGen){return g;}}},,,// 暗号化するpublic (BigInteger c1, BigInteger c2) Encrypt(BigInteger m){var r = GenerateRandom(K, 0, p - 2);Console.WriteLine("ランダムな数r = {0}", r);var c1 = BigInteger.ModPow(g, r, p);var c2 = (m * BigInteger.ModPow(y, r, p)) % p;return (c1, c2);},,,// 復号するpublic BigInteger Decrypt((BigInteger c1, BigInteger c2) c){return (c.c2 * BigInteger.ModPow(c.c1, p - 1 - x, p)) % p;},,,// 原始元を生成する
public static int GenerateGroupGen(int k, BigInteger p)
暗号化するpublic (BigInteger c1, BigInteger c2) Encrypt(BigInteger m){var r = GenerateRandom(K, 0, p - 2);Console.WriteLine("ランダムな数r = {0}", r);var c1 = BigInteger.ModPow(g, r, p);var c2 = (m * BigInteger.ModPow(y, r, p)) % p;return (c1, c2);},,,// 復号するpublic BigInteger Decrypt((BigInteger c1, BigInteger c2) c){return (c.c2 * BigInteger.ModPow(c.c1, p - 1 - x, p)) % p;},,,// 暗号化する
public (BigInteger c1, BigInteger c2) Encrypt(BigInteger m)
復号するpublic BigInteger Decrypt((BigInteger c1, BigInteger c2) c){return (c.c2 * BigInteger.ModPow(c.c1, p - 1 - x, p)) % p;},,,// 復号する
public BigInteger Decrypt((BigInteger c1, BigInteger c2) c)

static readonly Uri BaseURL = new Uri("https:
api.openweathermap.org");
    
 Update is called once per frame
    
ブックを保存
    
 update text
        
..例外処理..
            
 Oneofに含まれるフィールドの処理
    
 ----- 一部抜粋 ----- 
        
 位置と向き
  
 bc.txt, d.txtというファイルがoutput.zipファイルに圧縮される
        ILogger logger = LogManager.GetCurrentClassLogger(); 
 例えばNLogに出力 
                
 ファイルパスからExcelを読み込む
    
 ...省略...
                            break; 
置いたら抜ける
        ExtraModuleNames.AddRange( new string[] { "TestModuleEd" } );    
 ←ここを追加
    
 ...略
            var globals = new Globals { foo = foo, bar = bar }; 
 匿名型にしたいけれど、アクセスできないのでこうしてます
            
 結果表示
    
 イベントダイアログを閉じる
    
 例. マッチングしたプレイヤーの情報を表示、チャットメッセージを表示// アセットバンドルロードシステム
[Inject]

            
 シングルトンの場合
            obj = rect;     
 パースした結果はobjに格納する。
        
 右クリックはcontextmenuを表示させるので、ここでは何もしない
    
結局stringかオブジェクトだったらsubstringしちゃうかー
...Registry.GetContainer().RegisterServices(v =&gt;{v.AddTransient&lt;IA&gt;(v =&gt; new A1());});// ...,,,
    
 親のGameObjectの名前を手前に連結していく。
Debug.WriteLine(code) 
=&gt; Success
            
messages.AddRange(fieldIdentifier, validationResults.Errors.Select(error =&gt; error.ErrorMessage));
    
 Update is called once per frame
        count++; 
 腹筋カウント
            
 対象のバイト列を渡し暗号化した結果のバイト列を受け取る
    
 ...
                
Counterが指定のデータ数に到達したらループを抜ける
                
 new Model();
        new object[] {"https:
yahoo.co.jp", 200},
// 文字列の入力
string s = Console.ReadLine();
// 整数の入力
long n = long.Parse(Console.ReadLine());
// 文字列配列の入力
string[] inputStrArray = Console.ReadLine().Split(' ');
// 整数配列の入力
long[] inputLongArray = Console.ReadLine().Split(' ').Select(i =&gt; long.Parse(i)).ToArray();

        
Console.WriteLine(e.Result.Text);
                
 The default HSTS value is 30 days. You may want to change this for production scenarios, see https:aka.msaspnetcore-hsts.
    target.transform.rotation = rot * target.transform.rotation; 
 左から掛ける
            
 テストから任意のタイミングでAwakeを呼べるようにする
初期化と同時に設定VisualElement label = new Label("Hello World! From C#"){style = {fontSize = 64,color = new StyleColor(Color.magenta)}};//要素ごとに設定VisualElement label2 = new Label("Hello World! From C#");label2.style.fontSize = 64;label2.style.color = new StyleColor(Color.magenta);,,,VisualElement frame = new VisualElement();frame.style.borderColor = new StyleColor(Color.red);,,,VisualElement frame = new VisualElement();frame.style.borderColor = new StyleColor(Color.red);frame.style.borderBottomWidth = 5;frame.style.borderTopWidth = 5;frame.style.borderRightWidth = 5;frame.style.borderLeftWidth = 5;,,,frame.style.borderBottomLeftRadius = 15;frame.style.borderBottomRightRadius = 15;frame.style.borderTopLeftRadius = 15;frame.style.borderTopRightRadius = 15;,,,frame.style.paddingTop = 10;frame.style.paddingBottom = 10;,,,frame.style.paddingTop = 10;frame.style.paddingBottom = 10;frame.style.marginRight = 10;frame.style.marginLeft = 10;,,,frame.style.flexDirection = new StyleEnum&lt;FlexDirection&gt;(FlexDirection.Column);frame.style.flexDirection = new StyleEnum&lt;FlexDirection&gt;(FlexDirection.Row);,,,Label label3 = new Label("ABCDEFG");label3.style.fontSize = 32;root.Add(label3);,,,label3.style.color = new StyleColor(Color.green);,,,label3.style.backgroundColor = new StyleColor(Color.magenta);,,,label3.style.unityTextAlign = new StyleEnum&lt;TextAnchor&gt;(TextAnchor.LowerRight);,,,foreach (var child in textField.Children()){//子オブジェクトに左上整列を指示child.style.unityTextAlign = new StyleEnum&lt;TextAnchor&gt;(TextAnchor.UpperLeft);},,,textField.isPasswordField = true;,,,//初期化と同時に設定
VisualElement label = new Label("Hello World! From C#")
//要素ごとに設定
VisualElement label2 = new Label("Hello World! From C#");
//子オブジェクトに左上整列を指示
child.style.unityTextAlign = new StyleEnum&lt;TextAnchor&gt;(TextAnchor.UpperLeft);

       
 不要なUpdate関数は削除しましょう
            
var array = new Fruit[] { Apple, Banana, Cherry };
           
 ファイルの保存（別タスクで非同期処理　続けて処理をおこなうときはWait()を削除する）
        
 結果の判定
        Console.WriteLine("visibleじゃないよ"); 
ifの計算の結果は0となっている。
        
 VisualElements objects can contain other VisualElement following a tree hierarchy.
            
 2, 3繰り返すデリゲートをわざわざ定義しなくて良いIEnumerator LoadImage(string _imagePath, Action&lt;Texture2D&gt; _callback){},,,// デリゲートをわざわざ定義しなくて良い
IEnumerator LoadImage(string _imagePath, Action&lt;Texture2D&gt; _callback)

        tasklist.Start(); 
 まとめて実行
        anotherList.AddRange(list); 
 2回入れている
            MessageBox.Show("Cannot find end mark\r\n
 %%kob58im-ToolEnd%%");
            
 NullView を持たせてあるクローンのほうの BattleContext を渡す
            
三項演算子,x.GenderがtrueであればIsMancheckedをみて、falseであればIsWomanCheckを見る。
    
 ref T AsRef&lt;T&gt;(in T value) =&gt; ref value;
    
 自動実装ではないプロパティを除外する。
                
StatusCode リダイレクトのときの処理
        var b = new byte[W,H]; 
 new
   
最後にintを返す
            return null; 
 置換対象ではない
                    
 復号用にIVの値をファイル先頭に出力する
クラス定義[JsonObject("skill")]class Skill{[JsonProperty("language")]public string language {get; set;}[JsonProperty("ex_year")]public int exyear {get; set;}public Skill(string lang,int year){this.language = lang;this.exyear = year;}}[JsonObject("engineer")]class Engineer{[JsonProperty("name")]public string name {get; set;}[JsonProperty("skilllist")]public List&lt;Skill&gt; skill {get; set;}public Engineer(string Name,List&lt;Skill&gt; skilllist){this.name = Name;this.skill = skilllist;}}//JSONファイルを作るList&lt;Skill&gt; skillList= new List&lt;Skill&gt;();Skill cplus = new Skill("C++",4)Skill java = new Skill("Java",3)Skill csharp = new Skill("C#",2)skillList.Add(cplus);skillList.Add(java);skillList.Add(csharp);Engineer engineer = new Engineer("Akira",skillList);string json = Newtonsoft.Json.JsonConvert.SerializeObject(engineer);,,,String sql;sql = $"DECLARE @json NVARCHAR(MAX) = '{json}';" +$"DECLARE @name = 'SELECT name FROM OPENJSON(@json)WITH(name varchar(10) '$.name');'" +$"INSERT INTO table SELECT @name, language, ex_year FROM OPENJSON(@json,'$.engineer')" +$"WITH(language varchar(10) '$.language', ex_year varchar(2) '$.ex_year)",,,//クラス定義
[JsonObject("skill")]
//JSONファイルを作る
List&lt;Skill&gt; skillList= new List&lt;Skill&gt;();

                
Pdfで保存します。
        
 なので無理矢理ランダムなVector3を生成する
        
Console.WriteLine("CheckToken('"+s+"')");
    
起動できなかった時
    
 保存
    
 保存
    
POSTする情報
        
子要素がいなければ終了
            
htmlで保存します。
            Handler.URL = "http:
localhostapiindex.php";
        
 MyIconUtil.DestroyIcon(tmpIcon);
        
 its own copy of the icon accessible through the Form.Icon property.
 ); 
20191121 01:23:45
    
POSTする情報
        
0は除きたい（横インデックス1から埋め込んでいく）ので x は 1 2 3 のみに絞る
    
 1レコードずつ取り出す処理 
dgv.ColumnHeadersHeight = 0; 
これは、うまくいかない// dgv は、DataGridView（を継承したクラス）のインスタンス
dgv.GetType().BaseType

            for (double n = 1; n &lt; 1e9;) 
 l = 11 - 13 + 15 - 17 + ... 11e9
   
ここにセーブフォルダを追加すれば楽になるかも
                    
Firebase初期化
            
 コントロール配列のイベントを個々のコントロールに結び付ける
                
uiElement = (T)obj;
        
 依存関係のため_addedRaycasterから先に削除する
                    if ( s.EndsWith(".lnk", true, null) ) {
 Note: 第2引数はignoreCase
            this.Invalidate(); 
 to repaint
    
 See also:https:docs.unity3d.comja2019.1ManualExecutionOrder.html
        
}
                
 rad in right
    
 JsonHandlerAttributeの設定
            Console.WriteLine(b);    
 &lt;-- "GetString2"と出力される//using Tests;  &lt;-- Program.csでglobal usingをしているのでコメントアウト(削除)しても大丈夫


using System.Reflection; 
 これだけ先頭に追加。他はTestCodeクラス内
    
 クリップボードにテキストがコピーされると呼び出される
string d = (string)b;          
 objectをstringにキャスト　dには"Hello"が入る(ボックス解除？)
        
 TrackにバインドされたGameObjectをTestMixerBehaviourに渡す
    private object lock_count2 = new object();    
 同じ
        
 左インデントボタン
            Destroy(gameObject);
オブジェクトを消す
        
 ReverseClassで基本クラス制約をかける
      
KeyとValueのPairを取得して表示
 
初期位置とzoomレベル
  }
End class Program
Log(msg + "_"); 
 引数を処理させるためにちょいと加工
            if (mi == null) { 
 Stringクラスを引数とするRunメソッドがあるかをチェック
        
str1 = str1.Replace("Ω", "\t");
       
public string Title { get; set; }
        
selectedLabelが変化した瞬間を検知する
                    Task.Run(() =&gt; CheckDevice());      
デバイスをチェック
            
 True
            
return (uint)IPAddress.NetworkToHostOrder(networkOrder); 
DMatch[] good_matches = new DMatch[good_match_length];
閾値以下の要素数で定義//good_matchesに格納していく
int j = 0;

        
 再び取り出せるようになる
            
　ディスプレイに出力
                
 四角
    
 リフレクションでプロパティやフィールドの型を取得した場合はNullable&lt;T&gt;になる
        
 Provides a unique color based on the type of Issue
                
 なお、確実にChildrenの第1要素がButtonである場合は以下のように取得できています。
                            
ビットマップにして表示
            
 var result = contexts.PetModels.First(y=&gt;y.Id==1);
    
 Update is called once per frame
httpClient.DeleteAsync(new URI("http:
samplebucket.s3.amazonaws.com"));
  
--------------------------------------------------
            
 奇数桁で終わっている場合は末尾に'0'を補填する( = (上位nibble&lt;&lt;4) + 0)
        pg.WriteIndirectObj(5,"&lt;&lt;
Font &lt;&lt;F0 &lt;&lt;Type Font BaseFont Times-Roman Subtype Type1 &gt;&gt; &gt;&gt; &gt;&gt;");  [5] Resources
            
}
    modalViewController.ChangeText("hogehoge"); 
 ChangeTextメソッド自体はprivateじゃないので呼び出せる
    public static void Sort(Dictionary&lt;GameObject,float&gt; itemTable) 
取得したオブジェクトと距離のデータを距離が近い順でソートするメソッド
        
 何も検知できなかった場合、処理を中断し、falseを返す
        
 こっちはDisposeではなくDisable(）
            Hoge hoge; 
 ローカル変数
    
 サーマル画像を作成// EEPROM読み出し
this.MLX90640_DumpEE();

        
 POSTメソッドで渡すパラメータ
    
str1 = str1.Replace("Ω", "\t");
    
 ジャンル一覧を生成
  var html = wc.DownloadString( $@"https:
www.nike.comjp" ); OK!!!
                    Dispose(); 
 -&gt; &lt;&gt;m__Finally1() -&gt; &lt;&gt;7__wrap1.Dispose()
            _mediaPlayer.URL = @"sound.wav";
 mp3も使用可能
    
 この中でも、dataEnumerator.MoveNext()を呼び出して、値をいくつか消費する。
            bCube.TargetPosition = aCube.transform.localPosition; 
入れ替えたいキューブの位置を直接指定
  numBytesRequested: 256 
 8);   ハッシュの長さハッシュ値を 16 進数文字列に変換します。string hashed = string.Concat(hash.Select(b =&gt; $"{b:x2}")); // -&gt; 93541bd68ccf06f3d4f9cf56a3ca415f1d2d315f3f672ecec9f52b0c7c3ad9fc,,,// ハッシュ値を 16 進数文字列に変換します。
string hashed = string.Concat(hash.Select(b =&gt; $"{b:x2}"));  -&gt; 93541bd68ccf06f3d4f9cf56a3ca415f1d2d315f3f672ecec9f52b0c7c3ad9fc

        
 まとめてコミットコンテキストクラスpublic class NorthwindContext : DbContext{:/// &lt;summary&gt;/// コンストラクタ。/// &lt;/summary&gt;/// &lt;param name="existingConnection"&gt;コンテキストで使用する接続。&lt;/param&gt;/// &lt;param name="contextOwnsConnection"&gt;false を指定すると、コンテキストが Dispose されたときに接続を Dispose しない。&lt;/param&gt;public NorthwindContext(DbConnection existingConnection, bool contextOwnsConnection): base(existingConnection, contextOwnsConnection){}/// &lt;summary&gt;/// 接続文字列を取得する。/// &lt;/summary&gt;/// &lt;returns&gt;&lt;/returns&gt;public static string GetConnectionString(){using (var context = new NorthwindContext()){return context.Database.Connection.ConnectionString;}}:},,,// コンテキストクラス
public class NorthwindContext : DbContext

  
 センサに反応があった場合
            
スレッドの終了を待機
                
 "aab"とかだと "aaab"から検索していると"aa"のあと"ab"から検索が始まってとりこぼすおそれがある。
        MemoryStream src  = new MemoryStream(plain, false); 
 第2引数=falseでreadonly
            
この時点でcs.Task.IsCompletedはTrue
        Console.WriteLine(catNoProblem == GenbaCatType.NoProblem); 
True
        string action = "Item"; 
 Attack,Defense,Magic,Item,Escapeのどれかを""の中に入れる
//プレイヤーのモデルは主にchildのところにいますので、ご忘れないように追加しま//しょう…
public GameObject PlayerModel;

// 木構造の構築
 ITreeItem を実装するクラスのリストと、 ITreeItem から ITreeNode を生成するメソッドを渡す。
// 渡す ITreeItem のリストは、Left順にソートしてある必要がある。
 木構造が構築されて、ルートノードのリストが返ってくる。
// 木構造を表示したり、何らかの操作を加える

// Left、Rightの更新
 ルートノードのリストと、ITreeNode から ITreeItem を取得するメソッドを渡す。
// ITreeItem はnodeの中に持っておくと便利。もしくはディクショナリにでもしておく。
TreeBuilder.Update(roots, node =&gt; node.Item);

    
 結果
            
 不正解
                    return;   
 DB has been seeded
    
 OxyColorから通常のColorのBrushに戻すコンバータ。
using (var certificate = await GetCertificateAsync("https:
qiita.com"))
        
 メソッドの呼び出し.
            
 use middleware and launch server for Vue  
    e.Handled = true;         
　追加
            
Console.WriteLine(t);
        
 フレームカウンタ値による位置更新
            Console.WriteLine(str.Substring(index+length)); 
 $'
        proj.AddBuildProperty(target, "OTHER_LDFLAGS", "-ObjC");
　必須！
    
 省略
            
 コマンド生成：④
[SerializeField] public float eyeHeight = 1.0f; 
 ターゲットの視点の高さ
        
 (開発者が順番を気にしなくても良いように設計するのがホントは望ましい)
    
 IL2CPP AOT エラーが発生する場合があるので、Poolクラスは明確に定義する必要がある。
            model.SelectId = id;    
 選択したくじ番号をセット
            
 受け取ったTempDataからデータを取得する
        
 more details see https:aka.msRazorPagesCRUD.
            
 くじコントローラーを呼ぶ
  const string sayConst; 
 変数と区別するためにsayの後ろにConstを加えました例void Start() {string say = "Hello World";Debug.Log(say);const string sayConst = "Hello World2";Debug.Log(say);},,,// 例
void Start() {

                        
 データグリッドビューに結果を追加し、連番をカウントアップする
    
 上のテキストによる検証と同じになるので省略します。
        
 生成
        
データクラスから呼び出す。
var tokenResponse = await context.AcquireTokenAsync("https:
management.azure.com", clientCredential);// 注意：Microsoft.Azure.Management.Storage.Fluent ではない


        
if ( x == (int)'\n' ) { return "\n"; }
        
 DumpSystemFontNames();
            sf.LineAlignment = StringAlignment.Center; 
 縦中央
        
 コンストラクタ血液型のソート.OrderBy(value =&gt; Array.IndexOf(new[] { "O", "A", "AB", "B" }, value.BloodType))// 組のソート.ThenBy(value =&gt; Array.IndexOf(new[] { "B", "C", "A" }, value.Department)),,,,,,// 血液型のソート
.OrderBy(value =&gt; Array.IndexOf(new[] { "O", "A", "AB", "B" }, value.BloodType))
組のソート.ThenBy(value =&gt; Array.IndexOf(new[] { "B", "C", "A" }, value.Department)),,,,,,// 組のソート
.ThenBy(value =&gt; Array.IndexOf(new[] { "B", "C", "A" }, value.Department))

        
 SCardStatus status values
    
 Update is called once per frame
using System.Windows.Forms;           
 フォーム: Form, Button, TextBox, ...
    
 Update is called once per frame
    Position = 0  
 先頭位置からの再生を意味するが、streamを新規にnewするときは不要なはず// 再生
player.Play();
while (player.PlaybackState == PlaybackState.Playing){ 待ち（ここ調査不足）// 停止
player.Stop();

                
 回転停止(ストップ)
        
カメラの中心を拡大率に比例してカーソル方向に動かす
        
 色指定有り、カメラ指定無し
interfaceinterface ISampleService{void DoSomething(ConsoleAppOptions options);}// implementationusing Microsoft.Extensions.Logging;using Microsoft.Extensions.Options;public class SampleService : ISampleService{private readonly SampleSettings sampleSettings;private readonly ILogger&lt;SampleService&gt; logger;public SampleService(IOptions&lt;SampleSettings&gt; settings, ILogger&lt;SampleService&gt; logger){this.sampleSettings = settings.Value;this.logger = logger;}public void DoSomething(ConsoleAppOptions options){logger.LogTrace($"execute {nameof(DoSomething)}");logger.LogTrace($"options {nameof(options.Name)} {options.Name}");logger.LogTrace($"options {nameof(options.Value)} {options.Value}");logger.LogTrace($"settings {nameof(sampleSettings.Id)} {sampleSettings.Id}");logger.LogTrace($"settings {nameof(sampleSettings.Name)} {sampleSettings.Name}");}},,,public class ConsoleAppOptions{public string Name { get; set; }public string Value { get; set; }},,,public class SampleSettings{public int Id { get; set; }public string Name { get; set; }},,,
    {      
enumの定義
            
終端文字を追加する。
        
 中央値を取得
        objPool.SetActive(new Vector3(0f, 10f, 0f));    
 使用
        
 ステージが跳ねる
            
現在のタッチしているVector3値とStartFrickの差分で角度を変更する
        static RestSharp.RestClient client= new RestSharp.RestClient("http:
weather.livedoor.comforecastwebservicejsonv1");
        
 指定したControlType属性に一致する要素をすべて返します
                
 星画像を非表示にする
            itemList[index] = ITEM.NONE; 
 アイテムを使用したので空にする;
                Debug.Log(code.ToString() + " のボタンが押されたよ！！"); 
 コンソールに表示
        
 星座
            
 for Microsoft.Office.Interop.Excel
            
 Set our view from the "main" layout resource
var list = mat.SelectMany(r =&gt; r).ToList();  
 flatten
    Debug.Log(i); 
→ 32768 
    
 Indent Width 4
            
 コンソールで何の処理を行うかをユーザに尋ねる
    {      
enumの定義
            
カメラが前後左右のどこを向いているか取得
            
 アトリビュートの追加
    
 Start is called before the first frame update
            
 どこに設定ファイルが保存されたかを出力
        
どのTextObjectがクリックされたか受け取る
    
子が存在するか
        input.Type = 0; 
 MOUSE = 0
    
   ただし、期待通りに動作しているかは確認していない。(そもそも要るのか不明。。)
            
 終わり
            
 クローズする
        return 3; 
戻り値を返す命令
        
 This method gets called by the runtime. Use this method to add services to the container.
            
 タイマー開始
            Employee empl_1 = new Employee("ichiro", 25, 123456, "system"); 
インスタンスを生成
        
 This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            
 名前を付けて保存する
this.Controls.Add(pdfOcx);    
 フォームにコントロールを追加// PDF ブラウザコントロールに指定したPDFファイルを表示する
pdfOcx.LoadFile(@"E:\test.pdf");

  
None:いかなるデータもドロップ先が受け付けようとしない状態
    
 Start is called before the first frame update
    
 ★★数値tableに100を足す計算をSelectで行い、それをTask.WhenAllで包む★★100加算して返す(実験的に5秒待つ)private async Task&lt;int&gt; Add100(int a){Debug.WriteLine($"input is {a}. Start Calc...");await Task.Delay(1000);Debug.WriteLine($"input is {a}. End Calc.");return a + 100;},,,// 100加算して返す(実験的に5秒待つ)
private async Task&lt;int&gt; Add100(int a)

        itemBoxImages[index].sprite = null; 
index番目に何も表示しない
            image.sprite = lightOFF;   
imageの画像をlightOFFにする
    
 Orderのソート順(Dirプロパティ)から、Enumとして得る
            
 var value = _span.ReadBigEndian&lt;byte&gt;();
                
保存されたキャプチャ画像の出力
       
処理内容
// CodeGenerationSample プロジェクトの参照アセンブリの名前とパスを取得
IDictionary&lt;string, string&gt; refs = GetReferences("CodeGenerationSample");

                    agent.GetComponent&lt;AgentController&gt;().className = belongs;  
 所属しているクラスの情報をAgentControllerに渡す
    
左手と右手で取得すべきボーンが違うから判定
                        ptr[y*bd.Stride + 4*x + 3] = 0;
 alpha = 0 (透過)
    
 Update is called once per frame
            
 目的地を指定(目的地のオブジェクトの位置情報を渡す）
    
このメソッドは引用させていただきました
            
全部いっぺんにするだけ
            Debug.Log("キックされました。");   
退室ボタンを押していないが退室した→つまりキックされた
                
Console.WriteLine(dev.DeviceName);
    }).ToArray(); 
 無理矢理。。
        var csvData = ...; 
 Csv のデータ
Console.WriteLine(sp.IntColumn);
データベースで生成された値がセット済み。
// ※using、Dispose文は省略
var bitmap = new Bitmap(1280, 200);
// 透過
bitmap.MakeTransparent();
// BitmapからGraphicsを生成
var graphics = Graphics.FromImage(bitmap);
// どんなに長くて単語の区切りが良くても改行しない
stringFormat.FormatFlags = StringFormatFlags.NoWrap;
// どんなに長くてもトリミングしない
stringFormat.Trimming = StringTrimming.None;
// ハイクオリティレンダリング
graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;
// アンチエイリアスをかける
graphics.SmoothingMode = SmoothingMode.HighQuality;
// GraphicsPathを生成
var gp = new GraphicsPath();
// パスに文字を追加
gp.AddString("山路を登りながら、智に働けば角が立つ。", new FontFamily("メイリオ"), 0, 46, new Point(8, 8), stringFormat);
// 縁取りをする。
graphics.DrawPath(new Pen(Color.Black, 16), gp);
// 文字を塗りつぶす。
graphics.FillPath(new SolidBrush(Color.White), gp);
// テスト用にBitmapの内容をD:\result.pngに出力
bitmap.Save("D:\\result.png", System.Drawing.Imaging.ImageFormat.Png);

        
 make sure that appsettings.json is filled with the necessary details of the azure storage
        itemBoxImages[index].sprite = null;  
index番目に何も表示しない
    
 ボタンを押したらパネルを全て非表示
    bar(); 
任意の処理
    
 電球の画像をクリックすると電球画像を非表示にする
        pcPanel.SetActive(true);             
PCパネルをアクティブにする
        
 なお直接 Executor = new PhysicExecutor(); としてもポリモーフィズムが働かないのは変わらない
                    
ここにクリア時の処理
        
 https:stackoverflow.comquestions50582769windowsaccessbridge-for-java-automation-using-c-sharp
Console(a%b) 
 1
    
 バナー非表示//〜〜省略〜〜
,,,

    
 次の処理
        Debug.Log("ボタンが押されたよ！！"); 
 コンソールに表示
        
 randomPointの位置に該当するキーを返すIHaveWeightを継承する！！public class Item : IHaveWeight{public string Name;private float _weight;public float Weight =&gt; _weight;public Item(string name, float weight){Name = name;_weight = weight;}}public class DropItem : MonoBehaviour{private static readonly List&lt;Item&gt; itemDict = new List&lt;Item&gt;(){new Item("無し", 60f),new Item("鉄の剣", 30f),new Item("鋼の剣", 15f),new Item("銀の剣", 5f)};private void Start(){var item = RandomWithWeight.Lotto&lt;Item&gt;(itemDict);if(item.Name != "無し"){Debug.Log($"{item.Name}がドロップしました");} else {Debug.Log($"ドロップはありません");}}},,,// IHaveWeightを継承する！！
public class Item : IHaveWeight

        
 This method gets called by the runtime. Use this method to add services to the container.
    
 フォームの送信で呼ばれる
public MvcBasicContext (DbContextOptions options) : base(options) {}public DbSet&lt;Member&gt; Members { get; set; }protected override void OnConfiguring(DbContextOptionsBuilder options)=&gt; options.UseSqlite("Data Source=members.db");}
        if (i * i == n) return EnumResult.Success; 
 結果の整数が返せない
        RegistryKey regKey = rootKey.OpenSubKey(keyname, true); 
 書き込み権限で開く
            
 画像をPNG形式で保存する。
    
 コールバック方式の非同期メソッドの例
                
return false;
        
 あるクリップの最後のフレームで呼ばれる
        
 This method gets called by the runtime. Use this method to add services to the container.
                
 Camera画面から受け取ったパラメータを照合してバインドさせる
    
カメラの方向の代入
// Labelを作成し、そこに出力するサンプル
label.Content = "(x, y) = ("+ p.X +", "+ p.Y +")";  p.X, p.Yで取得できます。

    
....
    
Debug.WriteLine(JsonStr);天気概況（明後日まで）用のクラスclass jsonweather{public string publishingOffice { get; set; }public string reportDatetime { get; set; }public string targetArea { get; set; }public string headlineText { get; set; }public string text { get; set; }}// 天気概況（週間）用のクラスclass jsonweek{public string publishingOffice { get; set; }public string reportDatetime { get; set; }public string headTitle { get; set; }public string text { get; set; }},,,// 天気概況（明後日まで）用のクラス
class jsonweather
天気概況（週間）用のクラスclass jsonweek{public string publishingOffice { get; set; }public string reportDatetime { get; set; }public string headTitle { get; set; }public string text { get; set; }},,,// 天気概況（週間）用のクラス
class jsonweek

                
Console.WriteLine(dateLabel);
                
  やらかし例：ソースにパスワード埋め込んだままGitHubなどでうっかり公開したりとか
nums.Length 
length
                options.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver(); 
 Camel形式
        return true;        
すべてのウィンドウを列挙する
    ExtendBoth      
 3
    
 See also:https:docs.unity3d.comja2019.1ManualExecutionOrder.html
            
 OR の場合
                        
あるかないか
// dummyは処置待ち用のダミー。locationの操作が目的
var dummy = location

                Console.WriteLine("\n"); 
 Friendly linespacing.
} 
 namespace Qiita
        
 引数を入替えて自分を呼び出す
    
入力コンテキストへのアクセスが終了したらロックを解除する
            
外部キーを有効にする
            
 ～以下略～
            
イベントの一括生成
anime.Rewind("アニメーション名");   
0フレーム目に巻き戻す
         
アクセス 戻り値 this[型 引数]
//～～省略～～
conn = DbConnect();
//～～省略～～
,,,
//～～省略～～
conn = DbConnect();
//～～省略～～
,,,

    
ルーム作成失敗したときの動作。
        
結局再帰的にどこかにNullが出てきてしまうパージされたなど弁別したいときは増やせるprivate sealed class PurgedRoot : ITree{public ITree Parent =&gt; throw new InvalidOperationException("Purged root doesn't have Parent element.");public IReadOnlyList&lt;ITree&gt; Children =&gt; throw new InvalidOperationException("Purged root doesn't have Children.");}public static ITree Root{get;}=new ImaginaryRoot();public static ITree Purged{get;}=new PurgedRoot();public ITree Parent {get;}public IReadOnlyList&lt;ITree&gt; Children {get;}}//パージされたなど弁別したいときは増やせる
private sealed class PurgedRoot : ITree

// アセンブリに関する一般情報は以下の属性セットをとおして制御されます。
 アセンブリに関連付けられている情報を変更するには、
// これらの属性値を変更してください。
[assembly: AssemblyTitle("Test Target")]
// アセンブリに関する一般情報は以下の属性セットをとおして制御されます。
 アセンブリに関連付けられている情報を変更するには、
// これらの属性値を変更してください。
[assembly: AssemblyTitle("Test Target")]

        
１文字追加するたびに現在の文字列を出力する
            
 Min 最小値
        
 匿名メソッド
    
 ジェネリックなクラスを定義する。
            
 数値 -&gt; Enum型
        
 Overrideが必須。
        
 引数で渡したインデックスの次のインデックスを返却する。
        
 読み取り専用
        
 tupleによる複数の戻り値の設定。
　　　　　   
 ローカル関数
       
 ZIPファイルを解凍します
// 以下と同じ
var products = db.Query&lt;Product&gt;("Select * From Product")

                                    
 not supported
            
UdpClientを閉じる
            
まばたき3回目。ここでは2回連続でまばたきをする。
            
 敵を移動する
           
 mc2.ClassId is 2
        agent.SetDestination(target.transform.position);
☆追加
    
 ここで向きたい方向に回転させてます
        string path = @"";  
 CSVファイルのパス
        
 中央にスプライト領域を描画
int a = "string"; 
 int型にStringを入れようとしている エラー
nullを許容しないvoid Do&lt;T&gt;(T item)where T : struct { }// 引数でnullを許容するvoid Do&lt;T&gt;(T? item)where T : struct { },,,// 型引数も引数もnull不許容参照型void Do0&lt;T&gt;(T item)where T : class { }// 型引数はnull不許容参照型で、引数はnull許容参照型void Do1&lt;T&gt;(T? item)where T : class { }// 型引数がnull許容参照型ならば、引数もnull許容参照型// 型引数がnull不許容参照型ならば、引数もnull不許容参照型void Do2&lt;T&gt;(T item)where T : class? { }// これは書けない// void Do3&lt;T&gt;(T? item)//     where T : class? { },,,void Do&lt;T&gt;(T item)where T : notnull { }// これは書けない//void Do&lt;T&gt;(T? item)//    where T : notnull { },,,public abstract class Enum : ValueType {}// 独自定義したとするenum MyEnum { ... },,,// nullを許容しない
void Do&lt;T&gt;(T item)
引数でnullを許容するvoid Do&lt;T&gt;(T? item)where T : struct { },,,// 型引数も引数もnull不許容参照型void Do0&lt;T&gt;(T item)where T : class { }// 型引数はnull不許容参照型で、引数はnull許容参照型void Do1&lt;T&gt;(T? item)where T : class { }// 型引数がnull許容参照型ならば、引数もnull許容参照型// 型引数がnull不許容参照型ならば、引数もnull不許容参照型void Do2&lt;T&gt;(T item)where T : class? { }// これは書けない// void Do3&lt;T&gt;(T? item)//     where T : class? { },,,void Do&lt;T&gt;(T item)where T : notnull { }// これは書けない//void Do&lt;T&gt;(T? item)//    where T : notnull { },,,public abstract class Enum : ValueType {}// 独自定義したとするenum MyEnum { ... },,,// 引数でnullを許容する
void Do&lt;T&gt;(T? item)
型引数も引数もnull不許容参照型void Do0&lt;T&gt;(T item)where T : class { }// 型引数はnull不許容参照型で、引数はnull許容参照型void Do1&lt;T&gt;(T? item)where T : class { }// 型引数がnull許容参照型ならば、引数もnull許容参照型// 型引数がnull不許容参照型ならば、引数もnull不許容参照型void Do2&lt;T&gt;(T item)where T : class? { }// これは書けない// void Do3&lt;T&gt;(T? item)//     where T : class? { },,,void Do&lt;T&gt;(T item)where T : notnull { }// これは書けない//void Do&lt;T&gt;(T? item)//    where T : notnull { },,,public abstract class Enum : ValueType {}// 独自定義したとするenum MyEnum { ... },,,// 型引数も引数もnull不許容参照型
void Do0&lt;T&gt;(T item)
型引数はnull不許容参照型で、引数はnull許容参照型void Do1&lt;T&gt;(T? item)where T : class { }// 型引数がnull許容参照型ならば、引数もnull許容参照型// 型引数がnull不許容参照型ならば、引数もnull不許容参照型void Do2&lt;T&gt;(T item)where T : class? { }// これは書けない// void Do3&lt;T&gt;(T? item)//     where T : class? { },,,void Do&lt;T&gt;(T item)where T : notnull { }// これは書けない//void Do&lt;T&gt;(T? item)//    where T : notnull { },,,public abstract class Enum : ValueType {}// 独自定義したとするenum MyEnum { ... },,,// 型引数はnull不許容参照型で、引数はnull許容参照型
void Do1&lt;T&gt;(T? item)
// 型引数がnull許容参照型ならば、引数もnull許容参照型
 型引数がnull不許容参照型ならば、引数もnull不許容参照型
これは書けない// void Do3&lt;T&gt;(T? item)//     where T : class? { },,,void Do&lt;T&gt;(T item)where T : notnull { }// これは書けない//void Do&lt;T&gt;(T? item)//    where T : notnull { },,,public abstract class Enum : ValueType {}// 独自定義したとするenum MyEnum { ... },,,// これは書けない
 void Do3&lt;T&gt;(T? item)
これは書けない//void Do&lt;T&gt;(T? item)//    where T : notnull { },,,public abstract class Enum : ValueType {}// 独自定義したとするenum MyEnum { ... },,,// これは書けない
void Do&lt;T&gt;(T? item)
where T : notnull { },,,public abstract class Enum : ValueType {}// 独自定義したとするenum MyEnum { ... },,,独自定義したとするenum MyEnum { ... },,,// 独自定義したとする
enum MyEnum { ... }

                
フォロワーのプロフィール画像を表示する処理
            
Excelで保存します。
    
 これはOK
                    
 データベースの接続終了
        
 空いている領域の面積を列挙する。
        
Clamp関数で制限する
                return this.name; 
現在のname取得Program.cspublic Monkey(){},,,using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace Sano{class Program{static void Main(string[] args){Console.Write("現在の体重は？");int now = int.Parse(Console.ReadLine());Console.Write("目標体重は？");int goal = int.Parse(Console.ReadLine());Human h1 = new Human(now,goal,now);while (true){Console.Write("目標に向けて今日は何キロ走りますか？1…10km、2…20km、3…30km、4…現在の情報、5…終了&gt;");var select = int.Parse(Console.ReadLine());switch (select){case 1:h1.Run10();break;case 2:h1.Run20();break;case 3:h1.Run30();break;case 4:h1.ShowInfo();break;case 5:h1.End();return;}if (h1.GoalWeight &gt;= h1.NowWeight){Console.WriteLine("目標達成ですCongratulation!");break;}}}}},,,using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace Sano{class Human{public int NowWeight { get; set; }public int GoalWeight { get; set; }public int Weight { get; set; }public Human(int weight, int weight2, int weight3){this.NowWeight = weight;this.GoalWeight = weight2;this.Weight = weight3;}public void Run10(){NowWeight--;if (GoalWeight &lt; NowWeight){Console.WriteLine("1kg減りました！この調子で頑張りましょう！");}}public void Run20(){NowWeight -= 5;if (GoalWeight &lt; NowWeight){Console.WriteLine("5kg減りました！この調子で頑張りましょう！");}}public void Run30(){NowWeight -= 10;if (GoalWeight &lt; NowWeight){Console.WriteLine("10kg減りました！この調子で頑張りましょう！");}}public void ShowInfo(){Console.WriteLine($"{Weight - NowWeight}kg痩せてます！残り{(NowWeight - GoalWeight)}kgです！頑張りましょう！");}public void End(){Console.WriteLine("アプリケーションを終了します");}}},,,using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;namespace Nagasawa {class Program {const int MAX_TURN = 5;static void Main(string[] args) {Deck d1 = new Deck();Deck d2 = new Deck();for(int i = 0; i &lt; MAX_TURN; i++) {string c1 = d1.Draw();string c2 = d2.Draw();if (c1 == c2) {Console.WriteLine("成功ですおめでとう");return;}else if(c1=="ジョーカー" &amp;&amp; c2 == "ジョーカー") {Console.WriteLine("あなたの負けですゲーム終了");return;}else if(c1=="ジョーカー" || c2 == "ジョーカー") {Console.WriteLine("引ける回数が一回増えました");i--;} else {Console.WriteLine("残念");}Console.ReadLine();}Console.WriteLine("あなたの負けですゲーム終了");}}public class Deck {public List&lt;string&gt; Cards { get; set; }public Deck() {CreateDeck();}public void CreateDeck() {var temp = new List&lt;string&gt;();for (int i = 0; i &lt; 54; i++) {if (i &lt; 52) {temp.Add( i % 13 + 1 + "");} else {temp.Add( "ジョーカー");}}Cards = temp.OrderBy(i =&gt; Guid.NewGuid()).ToList();}public string Draw() {var card = Cards[0];Console.WriteLine(card + "をドローした");Cards.RemoveAt(0);return card;}}},,,
//範囲は-128~127で、符号付き8ビット整数//
short a=0;
//範囲は-32768~32767で、符号付き16ビット整数//
int a=0;
//範囲は-2147483648~2147483647で、符号付き32ビット整数//
long a=0;
//範囲は-9223372036854770000~9223372036854775807で、符号付き64ビット整数//
byte a=0;
//範囲は0~255で、符号なしビット整数//
ushort a=0;
//範囲は0~65535で、符号なし16ビット整数//
uint a=0;
//範囲は0~4294967295で、符号なし32ビット整数//
ulong a=0;
//範囲は0~18446744073709551615で、符号なし64ビット整数//
float a=1.5;
//浮動小数点型//
範囲は±1.5e-45~±3.4e38(おおよその範囲)で、有効桁数7桁
//浮動小数点型//
範囲は±5.0e-324~±1.7e308(おおよその範囲)で、有効桁数15~16桁
//true/false(ブール値)//
真か偽の格納のみを目的とした変数の作成にはbool型が適している
//範囲はU+0000~U+ffffで、Unicode16ビット文字//
decimal a = 199.9m;
//範囲は±1.0×10-28~±7.9×1028で、有効桁数28~29桁の型がある。//
string a = "b " + "c";
文字列型int[,]a={{1,2,3},{4,5,6}//多次元配列1//a[1,2]=9;//多次元配列2////javaは[][]だが,で区切るだけ//,,,//文字列型//
int[,]a={{1,2,3},{4,5,6}
//多次元配列1//
a[1,2]=9;
//多次元配列2//
javaは[][]だが,で区切るだけ

} 
 MssGetStructureAndValidateValue
                    _is_hide = true; 
 表示状況を反転
    
 経験値獲得処理
    
名前やメールアドレスを取得できる
            
 Results in a QueryRoot instance
//横並びにしたいGUI達
GUILayout.EndHorizontal();

                        
System.Console.WriteLine(line);
        [System.Security.SecuritySafeCritical]  
 auto-generated
    
 Start is called before the first frame update
        
 // 第一引数はBind変数、第二引数は値、第三引数はカラムの型に合わせたもの
dbControlt.SetBindVariable("hobby", "山登り", DbControl.VARCHAR2);

    
 Update is called once per frame
            
UdpClientを閉じる
    
 ~~~一次元のT型配列＋シェイプを表すint型配列から作りますvar ndarray1 = NdArray.Create(new double[24], new int[]{2, 3, 4});// 多次元配列を直接渡しても作れますvar ndarray2 = NdArray.Create(new double[2, 3, 4]);var element1 = ndarray1[1, 2, 3];var element2 = ndarray1.GetByFlattenIndex(23);// これ作ったときにはスライス構文はまだプロポーザルの段階だったので独自実装で無理やり。C# 8.0にはそのうちちゃんと対応したい・・・var sliced = ndarray1[new Index(1), Range.Whole, new Range(0, 4, 2)];,,,var mndarray1 = NdArray.CreateMutable(new double[2, 3, 4]);var mndarray2 = ndarray1.ToMutable();// ToImmutableはコピーによる生成。var ndarray3 = mndarray1.ToImmutable();// MoveToImmutableはムーブによる生成。効率がいい代わりにもとのMutableNdArray&lt;T&gt;を破壊します。var ndarray4 = mndarray2.MoveToImmutable();,,,var A = SomeNdArrayA();var B = SomeNdArrayB();// LinqのZipメソッドの適用var result1 = A.Zip(B, (a, b) =&gt; a + b);// これも上の式と全く同じ演算var result2 = (A, B).Zip((a, b) =&gt; a + b);,,,// System.Threading.Tasks.Parallel.Forによる並列化var result = (ndarray1, ndarray2).Zip((x, y) =&gt; x + y, ParallelIterationStrategy.Instance);,,,var A = SomeNdArrayA();var B = SomeNdArrayB();var sum  = A.Sum();var mean = A.Mean();var max  = A.Max();var det = A.Determinant();var dot = A.Dot(B);,,,// 一次元のT型配列＋シェイプを表すint型配列から作ります
var ndarray1 = NdArray.Create(new double[24], new int[]{2, 3, 4});
// 多次元配列を直接渡しても作れます
var ndarray2 = NdArray.Create(new double[2, 3, 4]);
// これ作ったときにはスライス構文はまだプロポーザルの段階だったので独自実装で無理やり。C# 8.0にはそのうちちゃんと対応したい・・・
var sliced = ndarray1[new Index(1), Range.Whole, new Range(0, 4, 2)];
// ToImmutableはコピーによる生成。
var ndarray3 = mndarray1.ToImmutable();
// MoveToImmutableはムーブによる生成。効率がいい代わりにもとのMutableNdArray&lt;T&gt;を破壊します。
var ndarray4 = mndarray2.MoveToImmutable();
// LinqのZipメソッドの適用
var result1 = A.Zip(B, (a, b) =&gt; a + b);
// これも上の式と全く同じ演算
var result2 = (A, B).Zip((a, b) =&gt; a + b);
// System.Threading.Tasks.Parallel.Forによる並列化
var result = (ndarray1, ndarray2).Zip((x, y) =&gt; x + y, ParallelIterationStrategy.Instance);

    
https:github.comrailsrailsblob66cabeda2c46c582d19738e1318be8d59584cc5bactivesupportlibactive_supportinflections.rb
    B(3
2);      OK
            CreateNoWindow = CreateNoWindow    
 コンソール・ウィンドウを開かない
        
 Set the subsystem to GUI
        
 ex) Tuple&lt;Int32, Boolean&gt;
            output = Unity.MatToTexture(processor.Image, output);   
 if output is valid texture it's buffer will be re-used, otherwise it will be re-created
            originalPixels[i++]=255;
α
        
URLに接続して結果が戻ってくるまで待機
        
 SubjectPoolに追加
            
 テキスト変換の開始
        
 描画サイズの計算
    
 Start is called before the first frame update
            
 書き込んだ内容を読み込んでコンソール出力
            
 書き込んだファイルを開いて内容をコンソール出力する
                
下だけボーダー表示
            FireTime = DateTime.Now.AddSeconds(30), 
 10 秒後に通知
    
 Use data accessor
            
 スラックに投稿
q.Dequeue(); 
Id:40, Name:Name40, Age:20
    
 a[第1引数][0番目]
        
 Something
    
 普通にラムダ式で呼び出し、変数のキャプチャ有り
        
 IDと時間を保持しておくクラス。内容は表示用のおまけ。
        
 OouraFFT
            
 result = view.Contains('DocumentType'); 
    bufferSize: 4096, useAsync: true)) 
 useAsync=true もしくは options=FileOptions.Asynchronous
            
 カスタムモデルを文字列にシリアライズ
            
AssociatedObject.MouseDown -= AssociatedObject_MouseDown;
            
 generic type
            
 ~~~~~~~~
            
検索ボタンをクリック
        
 マウスが離れたときのイベントハンドラ
    
 button2 省略
        
 2019.12.27追記: AllocCoTaskMemに対する解放処理が漏れている
            
 p.X==c.X なら、p.Y==c.Yであり、先の例外処理でこのifには入らないのでゼロ除算は回避できる(W&gt;0が前提)
                    
 Perform database operations
            FastestMedian(InputGrayImage , MedianImage ,5);
入力，出力，n*nのブロックでフィルタ
        
dlg.CheckPathExists = true;
                        previewImageUrl = "https:
sqlvaidccykhi26mlc.blob.core.windows.netmisc-sho-junkboxcoast-preview.jpg"
                
cos(a+b)
        
thisいらないけど、自分のだよ、ということで説明のために
        Console.WriteLine(instance1 == instance2); 
 &lt;-- True が出力される
    public void Guard() {
防御処理}
                
 直角コーナー
            ExecuteAnotherApp("FusaFusa.exe","hage husa husahusa", false, true);
"hage husa husa"引数は三つ．なしのときは""でいい
    
 Update is called once per frame
    
 問題なく動く
        
 ...
                DirectorySize += GetDirectorySize(di);
サブフォルダのサイズを合算
            
 省略
string.Format()var text2 = string.Format("Value is {0}",v);var text1 = string.Format("Value is {0},{1},{2}",v ,v2 ,v3);,,,// string interpolationvar text0 = $"Value is {v}";var text1 = $"Value is {v},{v1},{v2}");,,,string text = $"My value is {10.22445:F3}";Console.WriteLine(text);// &gt;&gt; My value is 10.224,,,string interpolationvar text0 = $"Value is {v}";var text1 = $"Value is {v},{v1},{v2}");,,,string text = $"My value is {10.22445:F3}";Console.WriteLine(text);// &gt;&gt; My value is 10.224,,,
            var tleHtml = wc.DownloadString("https:
celestrak.comsatcattle.php?CATNR=27424");
        
 ログイン中のメッセージを追加
        startEvent.Invoke(); 
ここにトリガーをオンにするイベントを登録
                terrainData.SetHeightsDelayLOD(hx, hy, heights); 
 ハイトマップに反映
        
 引数でルーム名を指定できる
                    if ( (m=rxp.Match(s)).Success ) { 
 透過色指定
            
 タグに「required="required"」と「required-err-msg="&lt;エラーメッセジ&gt;"」を設定する// (class InputModelの部分を抜粋)


    
   foreach(string fmt in data.GetFormats(){Console.WriteLine(fmt);}// Mainメソッドに [STAThread] つけ忘れなきよう・・・


        
 DELETE apivalues5
            
検索ボタンをクリック
        if (novelListIndex &lt; messageList.Count)
全ての会話を表示していない場合
    Console.WriteLine(y3);  
 255
string authValue = ((int)Authority.ReadWrite).ToString(); 
 こんな感じ
    
pictureBox1に表示
    return Redirect ("https:
dongsu.dev");
    
 Update is called once per frame
var clipInfo = animator.GetCurrentAnimatorClipInfo(0)[0];   
 引数はLayer番号、配列の0番目
            var h = domainObject.Height 
 100.0F;  cm -&gt; m
        
頂点情報をもとに法線を計算
    
 定義したカスタムルート制約
        
 ちゃんと条件式を書く必要がある。
                    
エフェクト表示
string exeName = ExeFileName; 
 実行ファイル名
        
 3. Action Methodの定義
        
 ここでは speed 変数は存在しない
// 抽出結果を格納したい
var result = new List&lt;string&gt;();
16進数文字列を2文字ずつ取得var matches = Regex.Matches("0123abcdXyx", "[0-9a-fA-F]{2}");// MatchCollectionクラスはIEnumerableでIEnumerable&lt;T&gt;じゃないので// そのままだとLinqが使えないのでIEnumerable&lt;Match&gt;にキャストしてから使う。result.AddRange(matches.Cast&lt;Match&gt;().Select(m =&gt; m.Value));// 結果は『01』『23』『ab』『cd』,,,// 16進数文字列を2文字ずつ取得
var matches = Regex.Matches("0123abcdXyx", "[0-9a-fA-F]{2}");
// MatchCollectionクラスはIEnumerableでIEnumerable&lt;T&gt;じゃないので
 そのままだとLinqが使えないのでIEnumerable&lt;Match&gt;にキャストしてから使う。
// 結果は『01』『23』『ab』『cd』


            
 Nullの場合だけインスタンス生成
    
 Update is called once per frame
    Screen s = Screen.AllScreens[1];     
 セカンダリ（今回撮るのはこっち）
                
 ComboBox以外にも通知する
            
fileop.fFlags = FOF_ALLOWUNDO | FOF_NOCONFIRMATION;
        
 C#もこの書き方でOK
    var outerUrl = $"https:
twitter.comintenttweet?text={UnityWebRequest.EscapeURL (outerMessage)}&amp;url={UnityWebRequest.EscapeURL (innerUrl)}";
                
PPTテンプレートに「[置き換え対象文字列]」の書式で設定したものを変換
            
 リソースの解放
                    
 レコード複数件
            builder.Services.Configure&lt;DefaultUIOptions&gt;(o =&gt; o.UIFramework = UIFramework.Bootstrap3);  
 これは将来的にIdentity画面を変更してBootstrapを利用しないなら不要かと思う
      
 }
// 記事:
 "c\qiita\qiita.txt"
// 記事:
 "c\qiita\qiita.txt"
// 記事: {c\qiita\qiita.txt}


            
Console.WriteLine(Encrypt(Encoding.UTF8.GetBytes("test"), "passw0rd"));
        
 正五角形(3D)
                
 初期のユーザーとロールの作成
            
 スプライトを順に切り替え
            
 サービスのDI設定を行う
    
 Update is called once per frame
                        MyImage.Source = bitmapImage;   
 「MyImage」は、xamlの&lt;Image Name="MyImage"&gt;より。砂嵐を張り付けるImageの名前。
var hex = Convert.ToInt32("1a", 16); 
 16進数// 上から3, 9, 26になる
,,,
// 123456789に変換される

// 1230000に変換される
,,,

        
 リトライ間隔を適当にあけておく
            
 使用したCOMオブジェクトを解放その２
                        
 再描画を依頼する
var template = config.logFormat;
まぁ、こんな感じで↑の&lt;logFormat&gt;~&lt;logFormat&gt;が取れるとしよう。
                return RedirectToAction(nameof(Index2)); 
 Getで定義されたActionがないのでエラー
    
HMDがトラッキングされるまで待つ
            else { 
 unknown type
        for(int i = 0; i &lt; Paneles.Count; i++) 
確認用の表記
            var assembly = Assembly.LoadFrom(asmPath); 
"C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System\v4.0_4.0.0.0__b77a5c561934e089\System.dll");(assemblyName);
        
 ----------------------------------------
        
using Excel = Microsoft.Office.Interop.Excel;
            return string.Compare(s1, s2, true); 
 第3引数の true は、大文字小文字の差異を無視する指定(ignore case)
            
 labelFromUXML.styleSheets.Add(styleSheet);
            
 メッセージ
    
 ex) 文字列 "MySQL" が入力されると、列挙体の要素 Engine.MySQL が返ってくる。
    
 Update is called once per frame
                    if ( !(y &gt;= -20.0 &amp;&amp; y &lt;= 20.0) ) { 
 !でとることで0除算での不定値をはじく
        else 
消えかけると激しく点滅
    
 アドレス取得
        
 (回転行列) * 親のrotation
            catch ( Microsoft.JScript.JScriptException e ) { 
 コンパイルにするには Microsoft.Vsa.dll を参照に追加する必要がある
                options.UseNpgsql( 
 &lt;= この部分を変更
                
 Dump(t);
    string url = "https:
stocks.finance.yahoo.co.jpstockshistory?code=998407.O";
    
 作成したEmbedをbotに送信させる。
        
 今回値を覚えておく
                bw.Write(bMessage); 
文字列のbyte配列
        
 Gstreamerのパイプライン生成文字列を入れる.
    
 OK
        
デバッグキー
            
 Must be set as TemporaryFolder to read files from HoloLens.
        return true;        
すべてのウィンドウを列挙する
    
 Start is called before the first frame update
        yield return new WaitUntil (() =&gt; Purchaser.Valid || Purchaser.Unavailable); 
 初期化完了を待つ
                
itemの取得
                    
 HTMLを表示する
            
 AppNameを書き換える。
        gameObject.AddComponent&lt;ResetTest&gt;().Reset();   
 Reset()はpublicで定義
                
 UWPアプリでない
    
メソッドが呼び出されたインスタンス自身を返す
    public TEnum this [TObj o] { get { return (TEnum) Array.IndexOf (objects, o); } } 
 エラーこの例は、やりたいことを端的に表現したもので、やりたいことそのものではありません。,,,public class EnumeratedArray&lt;TEnum, TObj&gt; where TEnum : Enum {private TObj [] objects;public TObj this [TEnum n] { get { return objects [Convert.ToInt32 (n)]; } }public TEnum this [TObj o] { get { return (TEnum) Enum.ToObject (typeof (TEnum), Array.IndexOf (objects, o)); } }},,,using System;using System.Collections.Generic;/// &lt;summary&gt;EnumでインデックスするList&lt;/summary&gt;/// &lt;typeparam name="TEnum"&gt;インデックスの型&lt;/typeparam&gt;/// &lt;typeparam name="TObj"&gt;要素の型&lt;/typeparam&gt;public class EnumeratedList&lt;TEnum, TObj&gt; : List&lt;TObj&gt; where TEnum : Enum {/// &lt;summary&gt;インデックスが範囲内か調べる&lt;/summary&gt;public bool ContainsKey (TEnum n) {var index = Convert.ToInt32 (n);return (index &gt;= 0 &amp;&amp; index &lt; this.Count);}/// &lt;summary&gt;正引き&lt;/summary&gt;public TObj this [TEnum n] =&gt; this [Convert.ToInt32 (n)];/// &lt;summary&gt;逆引き&lt;/summary&gt;public TEnum EnumOf (TObj o) =&gt; (TEnum) Enum.ToObject (typeof (TEnum), this.IndexOf (o));},,,// この例は、やりたいことを端的に表現したもので、やりたいことそのものではありません。
,,,

    
 エラー時の処理
            
 エラー扱いにするため、1以上を返しても良い
        
 staticなprivateメソッドのテスト
   
移動処理とか
        
 変更通知
            
ここでオブジェクトがとれている（略）
            
 then complete the deferral.
string cachePath = "file:
" + Application.temporaryCachePath + "tmp.wav";
    
 Update is called once per frame
            
 And to our database through the facade
                        writer.WriteInt16(5);
 設定値を作成(ここでは5秒)
                    
 表示
                 
 Reflectionを利用してパラメータを操作.
            
 小さいと-1を返す
      
 1日前～現在までのデータを取得
            rewardBasedVideo.Show (); 
リワード動画を表示
using Microsoft.Extensions.DependencyInjection;   
 CreateScope
public int X { get; set; }    
 まさかの一行！！// 「= 3」の部分が初期化子。
 ここでは、初期値3を入れている
// コンストラクタか、初期化詞を遣えば、1度だけ設定できる。
 以後値が変わることはない。
// 「get {return 3;}」と同じ意味。
,,,

Create a HeroCard with options for the user to interact with the bot.var card = new HeroCard{Text = "よくある質問を以下に表示します。",Buttons = new List&lt;CardAction&gt;{// Note that some channels require different values to be used in order to get buttons to display text.// In this code the emulator is accounted for with the 'title' parameter, but in other channels you may// need to provide a value for other parameters like 'text' or 'displayText'.new CardAction(ActionTypes.ImBack, title: "1. Windows 10とは何ですか？", value: "Windows 10"),new CardAction(ActionTypes.ImBack, title: "2. Surface Proとは何ですか？", value: "Surface Pro"),new CardAction(ActionTypes.ImBack, title: "3. Cortanaとは何ですか？", value: "Cortana"),},};var reply = MessageFactory.Attachment(card.ToAttachment());await turnContext.SendActivityAsync(reply, cancellationToken);,,,// In this code the emulator is accounted for with the 'title' parameter, but in other channels you may// need to provide a value for other parameters like 'text' or 'displayText'. Note that some channels require different values to be used in order to get buttons to display text.// need to provide a value for other parameters like 'text' or 'displayText'.new CardAction(ActionTypes.ImBack, title: "1. Windows 10とは何ですか？", value: "Windows 10"), In this code the emulator is accounted for with the 'title' parameter, but in other channels you may
            
保存します。
                
 デシリアイズします。
            
 管理者用
            Task.Run(async () =&gt; await Electron.WindowManager.CreateWindowAsync());  
 ☆ 起動時にElectronを使用するように、この行を追加
        

                
 ここでパラメーター設定行う
                    
 implicitly rollback if transaction still valid
            
.xlsxで保存します。
        
テキストのポジションを調整
            
 復元後の状態でテキストを表示
        
 推論を実行
    
 背景色の相対輝度が境界値以上なら黒文字、未満なら白文字
        
 This method gets called by the runtime. Use this method to add services to the container.
    
 数回繰り返す（省略）
                
 ダイアログ表示.
// 結果は"xyz\xyz\xyz"になる
,,,

    
 public Example _object;// 自身を持つGameObjectにアタッチされた、他のコンポーネントを取得する場合
var cmp = this.gameObject.GetComponent&lt;/*欲しいコンポーネント*/&gt;();
// CUBE という名前のGameObjectから取得したい場合
var cmp = GameObject.Find("CUBE").GetComponent&lt;/*欲しいコンポーネント*/&gt;();
// シーン内にある、指定したコンポーネントの1つを取得する
var cmp = FindObjectOfType&lt;/*欲しいコンポーネント*/&gt;();
// シーン内にある指定したコンポーネント全てを取得する
var cmp = FindObjectsOfType&lt;/*欲しいコンポーネント*/&gt;();

各種 keepalive 関連のオプションを設定するList&lt;ChannelOption&gt; options = new List&lt;ChannelOption&gt; {new ChannelOption("grpc.keepalive_time_ms", 2000),new ChannelOption("grpc.keepalive_timeout_ms", 3000),new ChannelOption("grpc.http2.min_time_between_pings_ms", 5000),};// gRPC チャネル生成時の第3引数に IEnumerable でオプションを指定するchannel = new Channel(m_MagicOnionHost, 12345, ChannelCredentials.Insecure, options);,,,// 各種 keepalive 関連のオプションを設定するList&lt;ChannelOption&gt; options = new List&lt;ChannelOption&gt; {new ChannelOption("grpc.keepalive_time_ms", 2000),new ChannelOption("grpc.keepalive_timeout_ms", 3000),new ChannelOption("grpc.http2.min_time_between_pings_ms", 5000),};// `UseMagicOnion` 関数の第3引数に IEnumerable でオプションを指定するawait MagicOnionHost.CreateDefaultBuilder().UseMagicOnion(new MagicOnionOptions(isReturnExceptionStackTraceInErrorDetail: true),new ServerPort("0.0.0.0", 12345, ServerCredentials.Insecure),options).RunConsoleAsync();,,,// 各種 keepalive 関連のオプションを設定する
List&lt;ChannelOption&gt; options = new List&lt;ChannelOption&gt; {
// gRPC チャネル生成時の第3引数に IEnumerable でオプションを指定する
channel = new Channel(m_MagicOnionHost, 12345, ChannelCredentials.Insecure, options);
各種 keepalive 関連のオプションを設定するList&lt;ChannelOption&gt; options = new List&lt;ChannelOption&gt; {new ChannelOption("grpc.keepalive_time_ms", 2000),new ChannelOption("grpc.keepalive_timeout_ms", 3000),new ChannelOption("grpc.http2.min_time_between_pings_ms", 5000),};// `UseMagicOnion` 関数の第3引数に IEnumerable でオプションを指定するawait MagicOnionHost.CreateDefaultBuilder().UseMagicOnion(new MagicOnionOptions(isReturnExceptionStackTraceInErrorDetail: true),new ServerPort("0.0.0.0", 12345, ServerCredentials.Insecure),options).RunConsoleAsync();,,,// 各種 keepalive 関連のオプションを設定する
List&lt;ChannelOption&gt; options = new List&lt;ChannelOption&gt; {
// `UseMagicOnion` 関数の第3引数に IEnumerable でオプションを指定する
await MagicOnionHost.CreateDefaultBuilder()

            
 {"Hoge":1,"Foo":10}
                
Console.ReadKey();
    
 持っている
            
 書き込みロック解放
        return "https:
drive.google.comuc?id=" + url;
             xmlns:x="http:
schemas.microsoft.comwinfx2006xaml"
    
 (範囲先端をより過去なので先端の日付に補正)// 2019年8月1日～8月31日を選択不可能にする
calendar.BlackoutDates.Add(inputRange);

            
 Get a reference to a blob
searcher.Start();              
 検索開始while(false == isFinished){ 検索が終わるまでここで待つ// イベントハンドラ破棄
searcher.Finished -= finish;

        
列挙定数をテキスト表示に。
        
一周したら停止
            
 実際はファイル ストリームに書き出す
        
 オーナー以外の場合
        
 Poolの生成イベントを書き換える// 文字列で指定
PhotonNetwork.Instantiate("BigAsteroid", Vector3.zero, Quaternion.identity, 0);
// Prefabの名前で指定
PhotonNetwork.Instantiate(prefab.name, Vector3.zero, Quaternion.identity, 0);

  
 Release
                    SendMessage(imwd, WM_IME_CONTROL, (IntPtr)IMC_SETCONVERSIONMODE, (IntPtr)CMode_Hiragana); 
 ひらがなモードに設定
                
 ListAdd
public Task&lt;T&gt; FooAsync() =&gt; Task.Run(() =&gt; Foo); 
 必要？
        
test the cards in the deck:
            
 取得した type を使用して CreateInstance でインスタンスを作成する// Nested Type の場合 Declaring Type の後に「+」を付けてそのあとに名前を指定します
 Generics の具体的な型の指定は Declaring Type も Nested Type もまとめて配列で指定します

  
 Fizz Buzzの実装
    
  この変数はなにをカウントしているのかが変数名のみで判断できる
        
 キャリブレーションで使用するアルゴリズムを設定
#pragma warning restore CS0219 
 変数は割り当てられていますが、その値は使用されていません
                
 ここでtimedurationを表示するなど
    
バイクのロール角に応じて体や膝の角度の調整
    
 ,:0
        B = "XXX" 
 実際は何かのデータを取得 ...
            co++;   
coは一度だけ選択を合わせるために使用している、これがないとUpdateなので、常に選択され続ける。
    
 ★ここで、「Dll1＿Win32.dll」「Dll1_x64.dll」とか分けずにDll1を使える！！
        
 validation
                
midiFile -&gt; 作成したmidiファイルの相対パス
        
テキストの行数を超えないように制限、テキストをカウントに併せて変更。
    
パーティクルの当たった箇所でオブジェクト出現
    
 コントラスト比が大きい文字色を採用// textColor = Color.White が選ばれる
Color textColor = chooseTextColor(125, 40, 80);
// textColor = Color.Black が選ばれる
Color textColor = chooseTextColor(200, 160, 180);
RGB の各値を相対輝度算出用に変換Func&lt;byte, double&gt; toRgb = (rgb) =&gt; {double srgb = (double)rgb / 255;return srgb &lt;= 0.03928 ? srgb / 12.92 : Math.Pow((srgb + 0.055) / 1.055, 2.4);};,,,// RGB の各値を相対輝度算出用に変換private static double toRgb(byte rgb){double srgb = (double)rgb / 255;return srgb &lt;= 0.03928 ? srgb / 12.92 : Math.Pow((srgb + 0.055) / 1.055, 2.4);}// RGB から相対輝度を算出（0.0 ～ 1.0）public static double RelativeLuminance(byte R, byte G, byte B){return 0.2126 * toRgb(R) + 0.7152 * toRgb(G) + 0.0722 * toRgb(B);},,,// RGB の各値を相対輝度算出用に変換
Func&lt;byte, double&gt; toRgb = (rgb) =&gt; {
RGB の各値を相対輝度算出用に変換private static double toRgb(byte rgb){double srgb = (double)rgb / 255;return srgb &lt;= 0.03928 ? srgb / 12.92 : Math.Pow((srgb + 0.055) / 1.055, 2.4);}// RGB から相対輝度を算出（0.0 ～ 1.0）public static double RelativeLuminance(byte R, byte G, byte B){return 0.2126 * toRgb(R) + 0.7152 * toRgb(G) + 0.0722 * toRgb(B);},,,// RGB の各値を相対輝度算出用に変換
private static double toRgb(byte rgb)
RGB から相対輝度を算出（0.0 ～ 1.0）public static double RelativeLuminance(byte R, byte G, byte B){return 0.2126 * toRgb(R) + 0.7152 * toRgb(G) + 0.0722 * toRgb(B);},,,// RGB から相対輝度を算出（0.0 ～ 1.0）
public static double RelativeLuminance(byte R, byte G, byte B)

                
 作成したEmbedをbotに送信させる。
                
 Requires `using Microsoft.Extensions.Logging;`
        
要素のクリア
    
string Result = System.Text.Encoding.GetEncoding(51932).GetString(DataByteArray[0]);
        account.Validate();  
 追加
// 置換処理の通知を受けたSampleViewModelsクラスの処理
var ram = new Random();
((INotifyPropertyChanged)this._models).PropertyChanged += this.SampleViewModels_PropertyChanged;,,, SampleViewModelsのコンストラクタ内の処理
        
 スペースを押したとき
        
 40bit を8bitずつに分割
        
 暗号化.
            var messenger = new Messenger(weatherService);  
呼び出す時に機能を注入
  
 データベースの接続終了
            ・・・
普通にiTmpを使える。
        
 直線距離で判定するため、yは0扱いにする
// Productクラス

// Factory クラス

// IdCardクラス(Productクラスの実装)

// IdCardFactoryクラス(Factoryクラスの実装)
using DesignPatternLearn.FactoryMethodLearn.FrameWork;

            
 Get a reference to a blob
                    SwipeMininalDuration, SwipeMaximalDuration))                        
 Duration
    
 ロックした画像を解放
       slime.setIntroduction(setName: "スライム", setExp: 200,setLife:100); 
スライムの情報を取得する。
var isOk = await postClass.PostMethod("グーグル", "中の人何人くらいで動かしてるんやろ", "https:
www.google.co.jp", "#ff0000");
            
さようなら
    
 非同期な処理
                    
 WriteAllTextはBOMなしのUTF8になるので、エンコードを変えたかったりバイナリを操作したい場合はSnapshotを行う
  io.AddInputCharacter(e); 
ImGuiへ通知
                
 create a new row group in the file
            
さようなら
    
 リクエストが投げられる前に呼ばれる処理
            
 イベントを発生
        
 WithJs()で、JavaScriptを有効 動作してるか不明
        
 PCの場合はキーボード、スマホはジャイロで視点変更
        
円→ユーロ
            
 only support 32 bytes (256 bits) key length
    
 Update is called once per frame
        
 なにがし
        public static int WS_CAPTION = WS_BORDER | WS_DLGFRAME; 
window with a title bar
            
 16進数
            
 重い処理
            ToUV(size.x - size.z, harfX + harfZ + size.y+0.5f), 
 6:most far top
        e.Cancel = true;
※重要：競合を防ぐため、Cancel状態をDoWorkEventArgsにも伝える。
        
 return ： 復号化された文字列
enemyEye = enemy.transform.Find("Face
Eye"); Enemyの子のFaceの子のEyeif(Physics.Raycast(this.transform.position, new Vector3(-1f, 0f, 0f), out hit, 100f)){Debug.Log(hit.transform.gameObject.name + "を検知");自身の位置からx負の方向(←)にRaycastを発射。最大長さは100f
            
 末尾に \ が付くのを回避（★）
            
さようなら
            
さようなら
        var playlistUrl = $"https:
www.youtube.complaylist?list={playlistId}";
                
 このプレイヤーは Rate 900～1100 のプレイヤーとしかマッチングしない
            var response = s_webClient.UploadValues("https:
slack.comapichat.postMessage", "POST", data);
            lineRenderer.SetPosition(1, hitPos); 
LineRendererの終点に当てはめる
        
 Server side handler of the SayHello RPC
    var hoge = 2; 
 行数で割るだけだとちょっとはみ出るので微調整
                    
 プロパティクラスが手元の環境にないため以下
            
 たとえばRootElementとか･･･。
  
 シーンから削除
                
 Positionは順位です。0から始まるので+1して表示しています。
    
 const HKEY*aKeys;
       
 Add to result
            
 ③4桁英数字にマッチしたものを全部探す
            
 経過時間をsw.Elapsed や sw.ElapsedMilliseconds で取得
                
 サービス呼び出し
            writer.AddFrame(bmp); 
 フレームを追加
        
 出力
        
 バイナリデータをファイルから読み込み
                    
 GetCachedPropertyValue()てのもあって、気にはなるけどそっちを使うとInvalidOperationExceptionを投げられちゃう
        
 接続
            
 ラムダ式
        
 ジャンケンゲームを開始する
            
 インスタンスは1つしか生成されないため、dataの内容は「シングルトン１」となる
        
文字列の縁を描画する
        
e.LocalizedValue = past.ToString();
        
駒を新しい親Tileの場所に移動（Swap）
            
 テストデータをInsert
    
 インターフェース
using System;var wordList=words.Replace("\r\n","\n").Split(new[]{'\n','\r'});//1000000ループの処理時間: 474ms(csc/.NET Framework),,,//using System;var wordList=words.Split(new[]{"\r\n","\n","\r"},StringSplitOptions.None);//1000000ループの処理時間: 504ms(csc/.NET Framework),,,//using System;//using System.Text.RegularExpressions;var wordList=Regex.Split(words,$"\r\n|\n|\r");//1000000ループの処理時間: 3605ms(csc/.NET Framework),,,//1000000ループの処理時間: 474ms(csc/.NET Framework)
,,,
using System;var wordList=words.Split(new[]{"\r\n","\n","\r"},StringSplitOptions.None);//1000000ループの処理時間: 504ms(csc/.NET Framework),,,//using System;//using System.Text.RegularExpressions;var wordList=Regex.Split(words,$"\r\n|\n|\r");//1000000ループの処理時間: 3605ms(csc/.NET Framework),,,//1000000ループの処理時間: 504ms(csc/.NET Framework)
,,,
//1000000ループの処理時間: 3605ms(csc/.NET Framework)
,,,

        
 子クラスのメンバーであるかのように呼び出せる親クラスのShowメソッドを隠蔽public new string Show(){return $"{this.Kind}の{this.Name}";},,,// 親クラスclass Animal{public string Name { get;}public string Kind { get;}public Animal(string name, string kind){Name = name;Kind = kind;}public virtual string Show()=&gt; $"{this.Kind}の{this.Name}";}// 子クラスclass Cat : Animal{public int Age { get; }public Cat(string name, string kind, int age) : base(name, kind){Age = age;}public override string Show(){if (Age &lt; 1){return $"{this.Kind}の赤ちゃんの{this.Name}";}else{return base.Show();}}}class Program{static void Main(string[] args){var cat1 = new Cat("くろ", "マンチカン", 5);var cat2 = new Cat("ミケ", "三毛猫", 0);Console.WriteLine(cat1.Show());Console.WriteLine(cat2.Show());}},,,// 親クラスclass Animal{public Animal(){Console.WriteLine("動物");}}// 子クラスclass Cat : Animal{public Cat(){Console.WriteLine("猫");}}class Program{static void Main(string[] args){var cat = new Cat();}},,,// 親クラスclass Animal{public Animal(string str){Console.WriteLine($"動物が{str}です");}}// 子クラスclass Cat : Animal{public Cat(string str) : base(str){Console.WriteLine($"猫が{str}です");}}class Program{static void Main(string[] args){var cat = new Cat("好き");}},,,// 親クラスsealed class Animal{}// 子クラスclass Cat : Animal  =&gt; エラーとなる{},,,// 親クラスのShowメソッドを隠蔽
public new string Show()
親クラスclass Animal{public string Name { get;}public string Kind { get;}public Animal(string name, string kind){Name = name;Kind = kind;}public virtual string Show()=&gt; $"{this.Kind}の{this.Name}";}// 子クラスclass Cat : Animal{public int Age { get; }public Cat(string name, string kind, int age) : base(name, kind){Age = age;}public override string Show(){if (Age &lt; 1){return $"{this.Kind}の赤ちゃんの{this.Name}";}else{return base.Show();}}}class Program{static void Main(string[] args){var cat1 = new Cat("くろ", "マンチカン", 5);var cat2 = new Cat("ミケ", "三毛猫", 0);Console.WriteLine(cat1.Show());Console.WriteLine(cat2.Show());}},,,// 親クラスclass Animal{public Animal(){Console.WriteLine("動物");}}// 子クラスclass Cat : Animal{public Cat(){Console.WriteLine("猫");}}class Program{static void Main(string[] args){var cat = new Cat();}},,,// 親クラスclass Animal{public Animal(string str){Console.WriteLine($"動物が{str}です");}}// 子クラスclass Cat : Animal{public Cat(string str) : base(str){Console.WriteLine($"猫が{str}です");}}class Program{static void Main(string[] args){var cat = new Cat("好き");}},,,// 親クラスsealed class Animal{}// 子クラスclass Cat : Animal  =&gt; エラーとなる{},,,// 親クラス
class Animal
子クラスclass Cat : Animal{public int Age { get; }public Cat(string name, string kind, int age) : base(name, kind){Age = age;}public override string Show(){if (Age &lt; 1){return $"{this.Kind}の赤ちゃんの{this.Name}";}else{return base.Show();}}}class Program{static void Main(string[] args){var cat1 = new Cat("くろ", "マンチカン", 5);var cat2 = new Cat("ミケ", "三毛猫", 0);Console.WriteLine(cat1.Show());Console.WriteLine(cat2.Show());}},,,// 親クラスclass Animal{public Animal(){Console.WriteLine("動物");}}// 子クラスclass Cat : Animal{public Cat(){Console.WriteLine("猫");}}class Program{static void Main(string[] args){var cat = new Cat();}},,,// 親クラスclass Animal{public Animal(string str){Console.WriteLine($"動物が{str}です");}}// 子クラスclass Cat : Animal{public Cat(string str) : base(str){Console.WriteLine($"猫が{str}です");}}class Program{static void Main(string[] args){var cat = new Cat("好き");}},,,// 親クラスsealed class Animal{}// 子クラスclass Cat : Animal  =&gt; エラーとなる{},,,// 子クラス
class Cat : Animal
親クラスclass Animal{public Animal(){Console.WriteLine("動物");}}// 子クラスclass Cat : Animal{public Cat(){Console.WriteLine("猫");}}class Program{static void Main(string[] args){var cat = new Cat();}},,,// 親クラスclass Animal{public Animal(string str){Console.WriteLine($"動物が{str}です");}}// 子クラスclass Cat : Animal{public Cat(string str) : base(str){Console.WriteLine($"猫が{str}です");}}class Program{static void Main(string[] args){var cat = new Cat("好き");}},,,// 親クラスsealed class Animal{}// 子クラスclass Cat : Animal  =&gt; エラーとなる{},,,// 親クラス
class Animal
子クラスclass Cat : Animal{public Cat(){Console.WriteLine("猫");}}class Program{static void Main(string[] args){var cat = new Cat();}},,,// 親クラスclass Animal{public Animal(string str){Console.WriteLine($"動物が{str}です");}}// 子クラスclass Cat : Animal{public Cat(string str) : base(str){Console.WriteLine($"猫が{str}です");}}class Program{static void Main(string[] args){var cat = new Cat("好き");}},,,// 親クラスsealed class Animal{}// 子クラスclass Cat : Animal  =&gt; エラーとなる{},,,// 子クラス
class Cat : Animal
親クラスclass Animal{public Animal(string str){Console.WriteLine($"動物が{str}です");}}// 子クラスclass Cat : Animal{public Cat(string str) : base(str){Console.WriteLine($"猫が{str}です");}}class Program{static void Main(string[] args){var cat = new Cat("好き");}},,,// 親クラスsealed class Animal{}// 子クラスclass Cat : Animal  =&gt; エラーとなる{},,,// 親クラス
class Animal
子クラスclass Cat : Animal{public Cat(string str) : base(str){Console.WriteLine($"猫が{str}です");}}class Program{static void Main(string[] args){var cat = new Cat("好き");}},,,// 親クラスsealed class Animal{}// 子クラスclass Cat : Animal  =&gt; エラーとなる{},,,// 子クラス
class Cat : Animal
親クラスsealed class Animal{}// 子クラスclass Cat : Animal  =&gt; エラーとなる{},,,// 親クラス
sealed class Animal
子クラスclass Cat : Animal  =&gt; エラーとなる{},,,// 子クラス
class Cat : Animal  =&gt; エラーとなる

        } else if (File.Exists (sourcePath)) { 
 Mac, Windows, iPhone
    
 Read onlyなプロパティ// numの読み書き
var a = instance.Num;
// messageの読み書き
var msg = instance.Message;
// pagesをいい感じになんかしたとして...

// プロパティにする前
var readingPage = book.getPage();
// プロパティにしたあと
var readingPage = book.page;

                        
.Configure((JsonSerializerSettings s) =&gt; { })
        
 サブディレクトリ含めてパスを全部見る。丸裸よ。
            
 更新処理の呼び出し
    
1行で表現したり
        ProcessStartInfo processStartInfo = new ProcessStartInfo("C:\\Program Files (x86)\\Internet Explorer\\iexplore.exe", "http:
yahoo.co.jp");
    private Action sFunc[]; 
スキルの関数を格納する配列
    
 元のメソッドはオーバーロードしたメソッドを呼び出すようにする
            if (pointList.Corners.Length &lt; 5) return null; 
そもそも頂点が足りない
            
 処理
    
コンポーネントを取得して該当コンポーネントを削除
    
 MyPropertyに1, Messageに"this is an example."を指定
        
 アンカー同士の位置を揃えることで子オブジェクトの位置が揃っていることを確認する
            
 返却する
                    
 FinalException に例外が格納されている
        
 capacity を指定すると, 余計な new が発生する.
            
 Pathの「Sample.Server」と「Sample.Server.csproj」は実際のものに書き換えてください
        
 既存のポジションに対して、移動量(vector)を加算する
        
移動する向きとスピードを代入する
OK シリアライズされるenum E{}enum B : byte {}enum SB : sbyte {}enum S : short {}enum US : ushort {}enum I : int {}enum UI : uint {}// シリアライズされない// Unsupported enum type 'BattlePlayer.Type' used for field 'type' in class 'BattlePlayer'enum L : long {}enum UL : ulong {},,,// OK シリアライズされる
enum E{}
// Unsupported enum type 'BattlePlayer.Type' used for field 'type' in class 'BattlePlayer'enum L : long {} シリアライズされないUnsupported enum type 'BattlePlayer.Type' used for field 'type' in class 'BattlePlayer'enum L : long {}enum UL : ulong {},,,
            
 Thumbs up
        
 ラムダ式
                
 Specify Japanese &amp; Remove bot tweets
            
 実行完了後のステータス確認
    var api = RestService.For&lt;IGitHubApi&gt;("https:
api.github.com", new RefitSettings
    
 購読(購読しないとOnNextをしても値が流れないね)// 値の発行
subject.OnNext(1);
// 正常終了する場合
 実行結果：1, 2, 3, 4, 5, Completed
// 途中で例外が発生する場合
 実行結果：1, 2, Error

    
方法4
            
 親クラスのprivate staticテストと同じ。
    
 スレッドを用いて動かすメソッド// ParallelクラスはSystem.Threading.Tasks名前空間に存在
using System.Threading.Tasks;
// ParallelクラスはSystem.Threading.Tasks名前空間に存在
using System.Threading.Tasks;

　　　　　　　
 対象のメソッド呼び出し
                if (lang.ToLower() == "ja")  
 Display only Japanese tweets
        
 カルチャを設定する
            
 フォームをアクティブにする
        
以下省略
    context.Users.Add(new User { Name = "Elizabeth", Gender = GenderEnum.Female }); 
Femaleは'F'として登録される取得using (var context = new TestDbContext(options)){foreach (var user in context.Users){Console.WriteLine($"Id:{user.Id}");Console.WriteLine($"Name:{user.Name}");Console.WriteLine($"Gender(Enum):{user.Gender}");Console.WriteLine($"Gender(String):{user.Gender.GetStringValue()}");Console.WriteLine("---------------------------");}},,,//取得
using (var context = new TestDbContext(options))

            
 リストビューのデータを更新
            Add1(2).Should().Be(expValue); 
 ここで失敗する。
    
 最新のバージョンを設定
            
 エディタ上でのサウンドを停止する.
                    
 表示を更新。これをしないと、表示されない。
            cam.transform.parent = gameObject.transform; 
Cameraの親オブジェクトはCarとする
    
 Update is called once per frame
            
 各文字の位置を調整
            
Console.ReadKey (true);
        var z = JsonUtility.FromJson&lt;ItemDict&gt; (y); 
 デシリアライズ
            
6.出す
                
 Viewを更新
    
 keep-aliveのパラメータ設定
Negative:  
 インデントを1段階上げる
        
 GameClient が破棄される際の StreamingHub クライアント及び gRPC チャネルの解放処理
            HogePool.Instance.Catch(this); 
返却するクラスのインタンスを渡す
    86, 
 cols
            
read only
ConcreteProductpublic class SQLServer : Product{public override void Connect(){Console.WriteLine("SQLServerに繋ぎます～！");}}//ConcreteProductpublic class PostgreSQL : Product{public override void Connect(){Console.WriteLine("PostgreSQLに繋ぎます～！");}}public abstract class Creator{public abstract Product Create();}//ConcreteCreatorpublic class DBCreator : Creator{private readonly string _name;public DBCreator(string name) =&gt; _name = name;public override Product Create(){switch (_name){case "SQLServer":return new SQLServer();case "PostgreSQL":return new PostgreSQL();default:throw new Exception();}}},,,ConcreteProductpublic class PostgreSQL : Product{public override void Connect(){Console.WriteLine("PostgreSQLに繋ぎます～！");}}public abstract class Creator{public abstract Product Create();}//ConcreteCreatorpublic class DBCreator : Creator{private readonly string _name;public DBCreator(string name) =&gt; _name = name;public override Product Create(){switch (_name){case "SQLServer":return new SQLServer();case "PostgreSQL":return new PostgreSQL();default:throw new Exception();}}},,,ConcreteCreatorpublic class DBCreator : Creator{private readonly string _name;public DBCreator(string name) =&gt; _name = name;public override Product Create(){switch (_name){case "SQLServer":return new SQLServer();case "PostgreSQL":return new PostgreSQL();default:throw new Exception();}}},,,
            
 Message Dialog Service
                        str = Regex.Replace(str, "^
[( |\t|)]*", "");
//Tは抽象クラス
var types = Assembly.GetAssembly(typeof(T))
//Tはインターフェース
var types = Assembly.GetAssembly(typeof(T))

            
 This is called once the RTM client has connected to the end point
hoge = hoge.Split(" ".ToCharArray()); 
型 'string[]' を 'string' に暗黙的に変換できません私にとって１番しっくりきた書き方が見つかった！,,,public int itemType { get; set; },,,// 私にとって１番しっくりきた書き方が見つかった！
,,,

        
 Upload to a cgi script
        
テキストの透明度を変更する
        
 画面に入力した値を保存する
    
 女性の場合は割引金額
    WriteCombineFile( item, dst_path ); 
 それを書き込む
    
 メモリ開放
        

        
 ===============================================================
         
更新がエラーしたので任意の処理
            
 条件により、読み込むDictionary.xamlを変える
        
code
        
 Bitmapに画像をコピー
PubKey pub = ... 
上で得たのと同じ公開鍵
                    
 ここ呼ばれない
        
 エディタ拡張部分.
            
 これを追記
                    
 サイズ、位置を指定
var image = new BitmapImage(new Uri($"pack:
application:,,,FirstRevitPlugin;componentResources{iconName}"));
                
 プリミティブタイプが変更された場合,メッシュを差し替える.
        
絶対なさそうなメソッド組んだ
            
read only
    
 Channel channel = new Channel("127.0.0.1:50051", ChannelCredentials.Insecure);
            
 
    
 Scriptをアタッチした際に自動で呼ばれる, Inspectorからも呼べる
// メソッドの戻り値の配列は要素数6で、それぞれカメラ側から見て
 [0]: 左の面, [1]: 右の面, [2]: 下の面, [3]: 上の面, [4]: 手前の面, [5]: 奥の面

        
5フレーム待つ
        
 カウントが閾値を超えたときの処理
dateTimeFormat.GetAbbreviatedEraName(eraIndex) 
 =&gt; 明
  
省略
    
 irome.Dispose(); コンパイルエラー
    driver.Navigate().GoToUrl("https:
www.google.com");
                
 ボタンのRenderTransformにセット
    
 フリックを検出
if (!this.IsLastSibling ()) return; 
 自身が最前でなければ何もしない
↓Console.WriteLine(string.Format(CultureInfo.InvariantCulture, "{0:yyyy/MM/dd}", DateTime.Now));,,,Console.WriteLine($"{DateTime.Now:yyyy/MM/dd}");// ↓Console.WriteLine(((IFormattable)$"{DateTime.Now:yyyy/MM/dd}").ToString(null, CultureInfo.InvariantCulture));,,,↓Console.WriteLine(((IFormattable)$"{DateTime.Now:yyyy/MM/dd}").ToString(null, CultureInfo.InvariantCulture));,,,
        
 省略...
    
 ボタンの設置
                url: "hoge
{filename}.jpg", ハンドリング対象URL
            
 .Net Framework 4.5 以上のアセンブリが参照される可能性があるので Public を指定しておく
                
 URLのファイルが見つからない等のエラーが発生
                
1秒待機する
                        
applicationをClose
　　　
 Get Collection
    
 ここに計測終了時に行いたい処理を書く
            tkm.start(9); 
 IDの呼び出し順が昇順でないパターン（レポートはID順に出る）・かつ、stopしたままで終了するパターン（レポートに警告が出る）
            
保存します・
        
 コンストラクタ内
                
C案
            Response.Redirect(openfilename); 
PDFに遷移
        
マテリアルリストをfor文で回して名前の種類によって処理を分ける
    
 passed as a pointer (4 bytes). We can pass 4-byte values, but not 8-byte ones.
            
 unmanagedリソースの破棄
  
 以下マイグレーションコード....
// （省略）
var processInfo = new ProcessStartInfo();

            tokens.Statuses.Update(status =&gt; $"私の名前は「{name}」です。#NameChangeBot"); 
名前変更の報告ツイートDictionaryのKeyをまとめてIEnumerableにして返すpublic static IEnumerable&lt;TKey&gt; GetKeys&lt;TKey, TValue&gt;(this Dictionary&lt;TKey, TValue&gt; self) {foreach (var item in self.Keys) {yield return item;}}//ランダムな要素を返すpublic static T Random&lt;T&gt;(this IEnumerable&lt;T&gt; self) {if (!self.Any()) {return default;}Random random = new Random();var idx = random.Next(0, self.Count());return self.ElementAt(idx);},,,//ふぁぼされてないツイートだけ抽出public static IEnumerable&lt;Status&gt; GetNotFavoTweets(this IEnumerable&lt;Status&gt; tweets,Tokens token) =&gt;tweets.Where(tweet =&gt; (bool)!token.Statuses.Show(id =&gt; tweet.Id).IsFavorited);,,,//DictionaryのKeyをまとめてIEnumerableにして返す
public static IEnumerable&lt;TKey&gt; GetKeys&lt;TKey, TValue&gt;(this Dictionary&lt;TKey, TValue&gt; self) {
ランダムな要素を返すpublic static T Random&lt;T&gt;(this IEnumerable&lt;T&gt; self) {if (!self.Any()) {return default;}Random random = new Random();var idx = random.Next(0, self.Count());return self.ElementAt(idx);},,,//ふぁぼされてないツイートだけ抽出public static IEnumerable&lt;Status&gt; GetNotFavoTweets(this IEnumerable&lt;Status&gt; tweets,Tokens token) =&gt;tweets.Where(tweet =&gt; (bool)!token.Statuses.Show(id =&gt; tweet.Id).IsFavorited);,,,//ランダムな要素を返す
public static T Random&lt;T&gt;(this IEnumerable&lt;T&gt; self) {
//ふぁぼされてないツイートだけ抽出
public static IEnumerable&lt;Status&gt; GetNotFavoTweets(this IEnumerable&lt;Status&gt; tweets,Tokens token) =&gt;

    
 BrowserNodeを開く
            
 &amp;gt;
        
 Email一致の場合UPDATE、それ以外の場合INSERT
                
 指定エリアの外になったら抜ける
            
UInt16 _two = 2;// 特に依存しているComponentはないです
[SerializeField] private MicRecorder _micRecorder;
// 録音開始。これは別にCoroutineではない
_micRecorder.StartRecord();
// 録音停止するときは処理をぜんぶ終える必要があるため、Coroutineの終了を待機してあげる
yield return StartCoroutine(_micRecorder.StopRecord());
録音中フラグだがMicRecorder.StopRecordを実行してから// 完全に終了するまでの間もfalseなのであんま信用してはいけないDebug.Log($"Are you listening? {_micRecorder.IsRecording}");,,,// 録音中フラグだがMicRecorder.StopRecordを実行してから
 完全に終了するまでの間もfalseなのであんま信用してはいけない

#nullable disable 
 ここ以下の行はnull許容参照型が無効になる(従来通り)
// 最初に完了したTaskが戻り値となる
var completed = Task.WhenAny(heavyTask, Task.Delay(1000));
// heavyTaskが完了したかどうか
 heavyTask.IsCompletedを調べるのでもよい

            
Console.ReadKey();　とかけば停止ができる。デバックで便利。キー押せば再開する。//以下略
,,,

    
 タスクバーが点滅しフォーカスはあるのに入力できない状態になるため
        
再開後の処理
node.Expanded = false; 
 例外が送出される!!
    string ToolTipText = "",            
 Ribbonのbuttonにポインタを合わせた時に表示されます。
                
EaseOut
            
 Execute only outside of Visual Studio.
            
 代わりに、EditObjectがDocumentかどうかで判断することで、回避する。
                    
 ここでパズルの答え合わせをしてる
    
readerでは件数は取得できないが、HasRowsでレコード有無だけわかる
            
シーン上に存在し、spriteが割り当てられているか
                
 分割した入力配列を渡す
    this.Loading.SetActive (false); 
 クルクルを非表示自分が消えるときには、作ったデータも消すprivate void OnDestroy () {if (this.Texture2D) { Destroy (this.Texture2D); }if (this.Sprite) { Destroy (this.Sprite); }},,,// 自分が消えるときには、作ったデータも消す
private void OnDestroy () {

        
「SCORE」というキーで保存されているInt値を読み込み
//出力結果
1.23399996757507

        
 --------- Prismお決まり部分 -------------
  
タスクを実行、完了まで待機
        
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                
Borderの全Pointを最大値に合わせる（直線にする）
                page.Orientation = PageOrientation.Landscape; 
用紙の向き
  Response.Redirect(openfilename); 
PDFに遷移
        public Int32 Add([MarshalAs(UnmanagedType.BStr)]string str) 
 ★マーシャリングする！
        .Where(i =&gt; "" == i.description.Substring(0, 1)).ToList(); 
 OK
            
 ViewsHelloIndex.cshtml に処理を反映させる
    
パターン③//パターン①
ControllerHaptic();
//パターン②
ControllerHaptic(HapicPower.STRONG)
//パターン③
ControllerHaptic(3200);

        
 出力
        
これならDoAsync()が終わった後にDispose()される
                    
 JSONを整形して出力
            
sw.Start();
                
   これだけ覚えとけばなんとかなる
   
FixedAcidity = ....// 推論の実行
WineQualityPrediction predictionResult = predictionEngine.Predict(wineQualityData);

    
共通関数側の呼び出し処理(スタブ)
            sp.Close();
シリアルポートのクローズ
            
 Face DetectからfaceIdその他を取得
            
 パスワードを変更したいときはUpdateメソッドを使う
    foo = null; 
 この行はコンパイルエラー
        public DelegateCommand LoadedCommand { get; }     
★ボタンのコマンドをやめて、Loaded時のコマンドにした
        
 Coroutineで物体認識を実行
    
 入った！！
        } 
 ...
UIAutomationを使用します。private void button3_Click(object sender, EventArgs e){AutomationElement mainForm = null;String message = "茜ちゃん、かわいい！やったー！";foreach (var p in Process.GetProcesses()){if (p.MainWindowTitle.Contains("VOICEROID2")){mainForm = AutomationElement.FromHandle(p.MainWindowHandle);}}if (mainForm == null){Debug.WriteLine("起動してない");return;}{var elems = mainForm.FindAll(TreeScope.Element | TreeScope.Descendants,new PropertyCondition(AutomationElement.ClassNameProperty, "TextBox"));ValuePattern txtboxName = elems[0].GetCurrentPattern(ValuePattern.Pattern) as ValuePattern;txtboxName.SetValue(message);}{var elems = mainForm.FindAll(TreeScope.Element | TreeScope.Descendants,new PropertyCondition(AutomationElement.ClassNameProperty, "Button"));InvokePattern btn = elems[0].GetCurrentPattern(InvokePattern.Pattern) as InvokePattern;btn.Invoke();}AutomationElementCollection stsMessage;do{Thread.Sleep(500);stsMessage = mainForm.FindAll(TreeScope.Element | TreeScope.Descendants,new PropertyCondition(AutomationElement.NameProperty, "テキストの読み上げは完了しました。"));} while (stsMessage.Count == 0);},,,// UIAutomationを使用します。
private void button3_Click(object sender, EventArgs e)

runner.StateMachine = stateMachine; 
 set after create delegate.
            
EventLog.WriteEntry(EVENT_LOG_NAME, "AsyncQueryCallback", EventLogEntryType.Information, 1, 100, null);
DateTime dt = new DateTime("2021
0423");  エラー
            
 ログテーブルへの書き込み
        
 ワーカースレッド
    
 こんなこともできる
Chart1.ChartAreas[0].AxisY.Maximum = 5;     
最大値指定
    string lserver = $"LDAP:
{LDAPサーバーのIPアドレス}ou=testou,dc=gebogebo,dc=com";
  num = 50.0 
 3.0;   16.6666...が返る
subject.OnNext(1); 
エラーにならない
        public static float BackCoefficient = 1.0F; 
Backの戻る値
            
受信Only
        
最後の1文字は処理しない
    
 Update is called once per frame
            
 rxprop = model.ObserveProperty(m=&gt;m.Value).ToReactiveProperty().AddTo(Disposable);
a * a == b * b + c * c -2 * b * c * Mathf.Cos(θ); 
余弦定理
        
 コマンド終了後に好きなことする.
            
string decodedUrl = HttpUtility.UrlDecode(textToDecrypt);
        
 ペットを呼ぶ
        
 ペットを呼ぶ
        

                
 Navigate to a new page.
        
 csvファイルに書き込む
            
もし稼ぎが0ならなし
// オークリーダーのAnimator
[SerializeField] private Animator _masterAnimator;
// オークリーダーの初期位置
private Vector3 _masterStartPosition;
// 初期位置からの差分, stateNameHash, normalizedTime
public readonly Subject&lt;(Vector3, int, float)&gt; MasterInfo = new Subject&lt;(Vector3, int, float)&gt;();

        
 JSONの整形を行う
            }                                    
 追加
        Debug.Log(this.range); 
 -&gt; 10
_music.PlayLooping();  
 ループ再生
            
各Y軸の設定（色指定、ラベル、表示制限）
                
各プロパティーの GUI を描画
        
ボタンがnullかどうかを返す。
                    
 グラデーションの始点位置を中心から左上にずらし、そのずれた分だけ半径を大きくする
        request.Headers.Referrer = new Uri("https:
app.splatoon2.nintendo.nethome");
    return val.ToString() + unit + behind;
 ★これが、TextBlockに表示される
RestClient client = new RestClient("http:
ここにURL.co.jp");//client.Authenticator = new HttpBasicAuthenticator("username", "password"); 認証が必要な場合

リクエストJSONは無名で作った方が楽object x = new { query = new { range = new {occurred_at = new {gt = "2017-08-16 16:18:00+0900", lte = "now",format = "yyyy-MM-dd HH:mm:ssZ" } } } };request.AddJsonBody(x);request.RequestFormat = DataFormat.Json;var response = client.Execute(request);//ここにドキュメントを処理するコードvar jsonObj = DynamicJson.Parse(response.Content);var total=jsonObj.hits.total;foreach (var hit in jsonObj.hits.hits){var at=hit._source.occurred_at;},,,dynamic djson=DynamicJson.Parse(cjson)string name=djson["name"],,,//リクエストJSONは無名で作った方が楽
object x = new { query = new { range = new {
//ここにドキュメントを処理するコード
var jsonObj = DynamicJson.Parse(response.Content);

            
HTMLで保存します。
                    string text = value.Text;                   
 Tweet
!type.IsPrimitiveRecursiveStruct()) 
 allow System.Int32 to contain a field of its own type
//Cookieを有効化
var config = Configuration.Default.WithCookies().WithDefaultLoader();
//URLを取得
await context.OpenAsync("https:qiita.com/login");
//ログイン前のURL表示
Console.WriteLine(context.Active.Location);
submitvar document = await context.Active.Forms[0].SubmitAsync(new{identity = "Qiitaのユーザー名またはメールアドレス",password = "Qiitaのパスワード"});//ログイン後のURL表示Console.WriteLine(context.Active.Location);//通知件数取得var notifications = document.QuerySelector(".st-Header_notifications");Console.WriteLine(notifications.InnerHtml);,,,//ログイン後のURL表示
Console.WriteLine(context.Active.Location);
var notifications = document.QuerySelector(".st-Header_notifications");通知件数取得
        vm.ViewsideAction = this.ViewsideAction;    
 ★スライダーの範囲表示更新処理をViewModelに登録
        
 ログ内に適切な文言が存在するかどうか
    
 "#"で始まらないノードのみ
   myPlotModel.InvalidatePlot(false); 
 -- 変更点 ---
IReadOnlyList&lt;Monster&gt; monsterList = LoadMonsterList(); 
 良い例// 悪い例
 DBから読み場合最後まで読むという無駄な処理が必要
// 無限なシーケンスだと終わらない
 bool isEmptyMonsters = monsterList.Count() == 0;
// MaxByは一番大きい要素(複数)を探すメソッド
IReadOnlyCollection&lt;Monster&gt; maxLevelMonsters = monsterList.MaxBy(it =&gt; it.Level);
// Bufferは先頭から指定数ごとにまとめるメソッド
IEnumerable&lt;IReadOnlyList&lt;Monster&gt;&gt; bufferedMonsters = monsterList.Buffer(8);
// Flattenは、リストのリストなどをIEnumerable&lt;T&gt;に平滑化するメソッド
 「平滑化するよ」ということがメソッド名から伝わる
// メソッド名が超わかりやすい!
 無限シーケンスでも終わるし、余分な処理しない

        
 The style will be applied to the VisualElement and all of its children.
            
 セットした内容を反映させる
        return code;  
 漢字
            
 設定されたRGBをHex color codesグループの各RGBに表示
                            
 ↓「item.Name」を「item.PrefecturalCapitalCityName」に変えただけ
        
 Command属性を付与しない
            
 Send email to the customer support so that they can help the customer
String.Format("{0:D6}", i) 
iは数字
            
 セットした内容を反映させる
        
外積で元に戻す　Z軸方向
        GetComponent&lt;Rigidbody&gt;().rotation = Quaternion.Euler (turn.x, turn.y, turn.z + GetComponent&lt;Rigidbody&gt;().velocity.x * tilt * f); 
 修正
        
 UIの更新はLogCellViewを継承した各CellごとのComponentで行う
var ns2 = XNamespace.Get("http:
example.combar");
    
 C#8では、変数のシャドーイングが認められて、sourceとaccumulatorという名前でもOK
        
コライダーの大きさを比較して衝突先の方が大きければ移動
        
一番端にいったら反転
h(x, y);  
 OK
int year = date.Year;   
 西暦の年
    
 using Microsoft.EntityFrameworkCore;
        
 デフォルトプリンタで印刷
    
 終了処理
        
いろいろ弾に渡す部分
    hoge(tmp);
参照型なのでコピーは発生しない
        var req = WebRequest.Create("http:
localhost:3000Post");
            
音源再生の処理
    
コントローラの入力(0~1)　
        
 ソート関数
                    
開始位置の座標保存
            
 古い名前から、新しい名前へ移動。
    
戻り値はobject型になるので適切な型にキャストして返すこと
            
 モニタの構造が保存時と異なるときは警告を出す
    
爆発
    
 StatusをGradientColorに変換するコンバーター
System.Math.Atan2( 0.0,  0.0); 
  0
                
 イベント通知
        
 エディターの更新
                
 エントリにバイナリを書き込む
                    
 そのために、Dispatcherを使う
        
 Email一致の場合UPDATE、それ以外の場合INSERT
//Androidのファイル・ディレクトリ取得
var folderPath = System.Environment.GetFolderPath(System.Environment.SpecialFolder.Personal);

    Console.WriteLine(i); 
=&gt; 10値型の値渡しpublic void value1( int x ) {x = 10;}// 値型の参照渡しpublic void value2( ref int x ) {x = 10;},,,// 値型の値渡し
public void value1( int x ) {
値型の参照渡しpublic void value2( ref int x ) {x = 10;},,,// 値型の参照渡し
public void value2( ref int x ) {

    
 バタフライ演算ビットを左右反転した配列を返すprivate static int[] BitScrollArray(int arraySize){var result = new int[arraySize];var halfSize = arraySize &gt;&gt; 1;result[0] = 0;for (int i = 1; i &lt; arraySize; i &lt;&lt;= 1){for (int j = 0; j &lt; i; j++) result[j + i] = result[j] + halfSize;halfSize &gt;&gt;= 1;}return result;},,,// ビットを左右反転した配列を返す
private static int[] BitScrollArray(int arraySize)

        
自身のRectTransformと子のLayoutElementでignoreLayoutのものは除外する
                        graphics.MeasureString(item.ToString() , this.Font).Width); 
 ドロップダウンリストの内容の幅を取得している
            
ファイルコピー実行！
    
Updateは60FPSで回っているとします
        
Rigidbodyのオブジェクトを移動。
    
非アクティブになる前に座標をリセット
        xmlns:mc="http:
schemas.openxmlformats.orgmarkup-compatibility2006"
    
 Start is called before the first frame update
    
 カメラを移動
            if (e.KeyData == (Keys.Control | Keys.Shift | Keys.T)) 
 Ctrl+Shift+Tを捕まえたい
      
 Cookie をブラウザー セッション間で永続化するか？（ブラウザを閉じてもログアウトしないかどうか）
    
列挙型：種類を列挙
        
singleton
        StartCoroutine(SpawnWaves()); 
 敵の生成を開始
        
 トリッキーなコードなので使ったらだめ。
                
 参照先のクラスを意識せずメソッドを呼びだせる
    
 だがそいつは初期化時にエラーを起こしてしまう死のキャラクターだった！パターン1 + try-catchtry {var gameCharacter = new GameObject("GameCharacter");gameCharacter.AddComponent&lt;GameCharacter&gt;();} catch {Debug.LogWarning("キャラクター生成できなかったけどいいよね？");},,,// パターン2 + try-catchtry {var gameCharacter = new GameObject("GameCharacter");gameCharacter.AddComponent&lt;GameCharacter&gt;().Init();} catch {Debug.LogWarning("キャラクター生成できなかったけどいいよね？");},,,// パターン1 + try-catch
try {
パターン2 + try-catchtry {var gameCharacter = new GameObject("GameCharacter");gameCharacter.AddComponent&lt;GameCharacter&gt;().Init();} catch {Debug.LogWarning("キャラクター生成できなかったけどいいよね？");},,,// パターン2 + try-catch
try {

            
 アップロード先パス
    string url = "https:
www.google.co.jp";
        
適当
 
あかーん例
  
押下時の処理
        
 TestRpcMethods はRPCメソッドの定義（Method&lt;TRequest, TResponse&gt;）をまとめたクラスです
      ", SampleHz=" + wh.nSamplesPerSec.ToString(); 
 サンプリング周波数(44.1kHzとか48kHzとか)
rectTransform.DOLocalMoveX(-100, 0.40f).SetRelative(); 
0.4秒かけて現在地からみて-100に移動するtransform.DOMove(new Vector3(, , ), 1).SetRelative();,,,ちなみに3Dオブジェクトなら　DOMoveを使用する//ダメなやり方
gameObj.GetComponent&lt;ScrollBar&gt;.value = 1.0f;
//正しいやり方
gameObj.GetComponent&lt;ScrollRect&gt;.verticalNormalizedPosition = 1.0f;
//DOTween使用
canvasGroup.DOFade(0, 1.0f); 1.0f秒かけながら、alpha0になっていく
//初期位置格納用
private float gameObjInitX;
最初に初期位置の取得void Awake(){gameObjInitX = gameObj.GetComponent&lt;RectTransform&gt;().anchoredPosition.x;gameObjInitY = gameObj.GetComponent&lt;RectTransform&gt;().anchoredPosition.y;}//初期位置に戻したいときに呼ぶprivate void Initialize(){gameObj.GetComponent&lt;RectTransform&gt;().anchoredPosition = new Vector2(gameObjInitX, gameObjInitY);},,,//幅と高さを取得float width = rectTransform.sizeDelta.x;float height = rectTransform.sizeDelta.y;//今の幅+足したい幅rectTransform.sizeDelta = new Vector2 (width + 加えたい幅, height);,,,rectTransform.localPosition = new Vector3(1f, 0f, 0f);,,,//インスペクタからアタッチpublic Image _image;public Sprite _sprite;//_iamgeの画像を_spriteに変更_image.sprite = _sprite;,,,//最初に初期位置の取得
void Awake()
初期位置に戻したいときに呼ぶprivate void Initialize(){gameObj.GetComponent&lt;RectTransform&gt;().anchoredPosition = new Vector2(gameObjInitX, gameObjInitY);},,,//幅と高さを取得float width = rectTransform.sizeDelta.x;float height = rectTransform.sizeDelta.y;//今の幅+足したい幅rectTransform.sizeDelta = new Vector2 (width + 加えたい幅, height);,,,rectTransform.localPosition = new Vector3(1f, 0f, 0f);,,,//インスペクタからアタッチpublic Image _image;public Sprite _sprite;//_iamgeの画像を_spriteに変更_image.sprite = _sprite;,,,//初期位置に戻したいときに呼ぶ
private void Initialize()
float width = rectTransform.sizeDelta.x;float height = rectTransform.sizeDelta.y;幅と高さを取得rectTransform.sizeDelta = new Vector2 (width + 加えたい幅, height);,,,今の幅+足したい幅//インスペクタからアタッチ
public Image _image;
//_iamgeの画像を_spriteに変更
_image.sprite = _sprite;

} 
 end of class C
            
通知出力
            
 Console.WriteLine($"Schedules count={schedules.Count}");
        
 ここから2行追加
            
return new ReadOnlySpan&lt;T&gt;(pointer.ToPointer(), length);
        
 if (this.Weights[i] &lt; this.Weights.Length)  上限を撤廃randomResult.Select((value, index) =&gt; (value, index)).ToLookup(t =&gt; t.value, t =&gt; t.index).SelectMany(ToDiff)));shuffleResult.Select((value, index) =&gt; (value, index)).ToLookup(t =&gt; t.value, t =&gt; t.index).SelectMany(ToDiff)
        Thread.Sleep(millisec);     
 Task.Run内Sleep
            Console.WriteLine(y);  
 5. yを画面に出力．
                
 各グループに存在するID で一番体重が重たい
var alwaysFalse = myList.Any(); 
 常にfalse
            
 [1, 1] ～ [last_row - 1, last_column]
    
 犬を検索
    
 ↑すでにメモリ上にあるnameListを使うので、再度リスト作成することはない// まったく意味ないが
var mick = nameList

こんな感じで初期化しておくと呼び出すときにnullチェック不用private Action _Callback = delegate { };,,,// こんな感じで初期化しておくとnullチェック不用private OnceAction _Callback = OnceAction.Default;,,,// こんな感じで初期化しておくと呼び出すときにnullチェック不用
private Action _Callback = delegate { };
// こんな感じで初期化しておくとnullチェック不用
private OnceAction _Callback = OnceAction.Default;

        
角度を考慮して弾の速度計算if (Angle_Split &gt; 1) _theta = (AngleRange / (Angle_Split - 1)) * i - 0.5f * AngleRange;else _theta = 0;弾インスタンスに渡す角度の計算
        
 シーン内にあるオブジェクトを取得してスクリプト名を設定
        
角度を考慮して弾の速度計算
        
 翻訳完了を知らせるために, ダウンロードフォルダを開く
            
 サンプル3個目
    
 create a refresh token.
            
 こちら側でのアクセスはErrorを吐き出す.
        
手抜き 本来はCanExecuteの値が変わる時だけ呼び出すべき
    
 メモリ内の XML を XSL 変換してファイルに出力
// string endPoint = "http://localhost:8080"; // こちらは例外でない
string endPoint = "http:&lt;host&gt;:8080";  こっちは例外が出る

        
 例外ハンドラの登録
            
 draw area
            string url = "https:
jsonplaceholder.typicode.composts";
        
 Stride0のフィールド X を destにコピペする
        
追加
            
 ※モックの検証は基底クラスで自動的に行われる。
    Debug.WriteLine("戻り値1：" + task1.Result); 
 ここでブロックかかり、task1が終わるまでの5秒間UIフリーズ
                    
})
var payload = "message=" + 
メッセージを入力;
            return new string[] { "value1", "value2" }; 
←ココにブレークポイントを設定
        
 メソッド呼び出しで値が変わるか知る方法がないため。
    
 iOS実機ビルド時のみ __internal 読み込みとなるよう指定
            
その他、inspect.exeで取得できるプロパティは.GetAttribute()メソッドを使う
                    
solver.Method = IvyFEM.Linear.IvyFEMEquationSolverMethod.NoPreconBiCGSTAB;
SHISAKU.MOJI = "文字";
ここではstring型やint型の編集ルールをそのまま用いる。
        
Debug.Log("sight_x:sight_y \n" + sight_x + " : " + sight_y);
    else if (sight_x &lt; 0)  
sight_x が0度を下回ると360からsight_xを引く、残った分はsight_xに残る
        
 以下のコードはエラーに...
        
awaitをつけずにTaskを実行
    
 ↓ ここに入れる
public LBool   m_bool;    
 bool型UnityEngine[System.Serializable] public class LGameObject : ReorderList&lt;GameObject&gt; { }[System.Serializable] public class LTransform : ReorderList&lt;Transform&gt; { }[System.Serializable] public class LVector2 : ReorderList&lt;Vector2&gt; { }[System.Serializable] public class LVector3 : ReorderList&lt;Vector3&gt; { }// 追加 TextComponentをReorderableListで使えるようにする[System.Serializable] public class LText : ReorderList&lt;UnityEngine.UI.Text&gt; {},,,追加 TextComponentをReorderableListで使えるようにする[System.Serializable] public class LText : ReorderList&lt;UnityEngine.UI.Text&gt; {},,,// 追加 TextComponentをReorderableListで使えるようにする
[System.Serializable] public class LText : ReorderList&lt;UnityEngine.UI.Text&gt; {}

        
 http:www.euclideanspace.commathsgeometryrotationsfordecomposition
            
dont move the rigidbody if the character is on top of it
NLog.LogManager.Shutdown(); 
 Flush and close down internal threads and timers
            services.AddDbContext&lt;BookContext&gt;(options =&gt; options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection"))); 
追加
                
 dynamicで受けているので, 面倒なプロパティ取得やメソッド取得を省略できる.
        
 Check pad operation with pad and pad_trg values
            yield return this.CreateDescriptor(child); 
 子要素を列挙
        
 　派生型フィールドは初期化済みだが、派生型コンストラクタが未処理のまま実行されてしまう。
            
 前述のサブスクライバには一つめのメッセージのみが送られる
            bool f = (3 &gt;= 7);  
 fはfalse．
    class ProgramOverride : ProgramBase
中身を何も書かないとエラーを吐く。下に書くオーバーライドを用いて実装する必要があるようだ。
            GC.Collect();
必要なさそうだけど一応GC(ほんとに要らないかも)
                
 クライアント側が送信メッセージを読み終わるまで待つ
            
 active object starts from first in array
        
CreateAttachments();
        
public extern static void Test_MyApi2([MarshalAs(UnmanagedType.LPWStr)]string lpText, [MarshalAs(UnmanagedType.LPWStr)]string lpCaption);
        
 Notification Limits
            const int NUM = 8;  
 定数も再定義はエラー
            
      user nickname = tana＠ヒキニートP
        
 入力判定用にFとJを設定
        
 破棄されるタイミングでOnAttackイベントの購読をやめる
            
https:docs.microsoft.comja-jpdotnetcsharplinqjoin-by-using-composite-keys
    
 Update is called once per frame
public SteamVR_TrackedObject targetObject;
割り当て固定対象のオブジェクトつまりserialNumberTargetとtargetObjectが対応づけされるpublic void AssignTrackedObject(){SteamVR_TrackedObject.EIndex tmp;var buffer = new StringBuilder(256);var error = ETrackedPropertyError.TrackedProp_Success;for(int i = 0; i &lt; trackedObjects.Length; i++){SteamVR.instance.hmd.GetStringTrackedDeviceProperty((uint)trackedObjects[i].index, ETrackedDeviceProperty.Prop_SerialNumber_String, buffer, (uint)buffer.Capacity, ref error);if(error == ETrackedPropertyError.TrackedProp_Success){Debug.Log(buffer.ToString());if(buffer.ToString() == serialNumberTarget){tmp = trackedObjects[i].index;targetObject.SetDeviceIndex((int)tmp);}}}},,,//つまりserialNumberTargetとtargetObjectが対応づけされる
public void AssignTrackedObject(){

// 例外が出るよ
var res = new DateTime( DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day + 1, hour, mini, sec );
// こっちならOK
var res = new DateTime( DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, hour, mini, sec).AddDays(1);

      
やりたい処理
    
 受けとったTaskの配列をIAsyncEnumerableとしてreturnする拡張メソッド
IList&lt;IPXSoftBody&gt; sbody = pmx.SoftBody;        
 sbody    :SoftBody  | リスト
        
 valueを使ってなんか処理// Console.WriteLine(konan.Secret); ←Write-Onlyと怒られる
,,,

    
 実行中のタスクをキャンセルするためのキャンセルトークン// 実行中のタスクを表すID
private Guid? m_CurrentTaskId;

        
 コルーチンが終了する前にゲームオブジェクトを削除// ここで列挙が終了する。
 3回目のMoveNextを呼べばDisposeされるがGameObjectが削除されているので呼ばれない。
// if (enumerator is IDisposable d) d.Dispose();,,, もしくはenumeratorがDisposeされるならばDisposeが呼ばれる。
    static int solve(int a, int b, int c) { 
a &lt; b &lt; c
            
 UndoRedoの履歴を表示
            
 第1引数は独自Validationサブクラス、第2引数はRegularExpressionAttributeAdapter を指定
            return Marshal.StringToHGlobalAuto("hoge fuga piyo");    
 string型をIntPtrに変換してreturn
        
初期表示の場合はエラーメッセージをクリア
            
ModelStateの値を削除することで検索結果が表示されるようにする
            
 コントロールにより保存対象のプロパティを決定する。// 保存対象のコントロールを１つのグループとして登録。
PersistenceManager.SetPersistenceGroup(this.comboBox, taregetGroup);
// 保存処理
saveMemoryStrem = PersistenceManager.Save(taregetGroup);
// 読込処理
PersistenceManager.Load(taregetGroup, saveMemoryStrem);

            
 選択行のオブジェクトをXamPropertyGridに表示
                return false; 
 生成忌避
        SceneManager.LoadScene(SceneManager.GetActiveScene().name); 
 OK
//外部APIの呼び出し
var apiResponse = (await XXXAsync(XXX, YYY));

    
略
            
 予約完了画面操作
            
 利用者が不正
    
 Scope out, then no reference to obj.
    
Clipboard.SetDataObject(Result,true,20,500);
Console.log(-(1.5.Ceiling())); 
 &lt;- このように解釈される
 
真の同時押し不可
    driver.FindElement(By.XPath("
input[@value='ログイン'] | button[text()='ログイン']")).Click();
        
衝突してほしいゲームオブジェクトでなければ抜ける
                "https:
+:44300sample");
                
 画像ファイルのみ取り込み
            
draw line loop
   private string name2;  
 name for 2
            
 選択行のオブジェクトをXamPropertyGridに表示
    driver.FindElement(By.XPath("
input[@value='登録'] | button[text()='登録']")).Click();
            
 全ての指の内、開いている数が0個なら
    
string Result = System.Text.Encoding.GetEncoding(932).GetString(DataByteArray[0]);
            
ILSpy generated this explicit interface implementation from .override directive in MoveNext
    my.ToString(); 
 nullの場合もここを通るif (point is Point(1, 2) p) {} 単純な位置パターンif (point is Point(x: 1, y: 2) p) {} 名前を書いても良い、この名前はDeconstruct関数の引数名に一致させるif (point is Point { AbsSquare: 10 } p) {} 単純なプロパティパターン型名は、自明な場合に省略できる// 変数は、使用しない場合省略できるif (point is (1, 2)) {}if (point is { AbsSquare: 10 }) {}// 型名は、自明な場合に省略できる
 変数は、使用しない場合省略できる
if (point is (1, 3) { AbsSquare: 10 }) {} 位置パターンとプロパティパターンは共存できる。if (point is (long x, 3) p) {} xの変数宣言も兼ねるのでlongは必要。if (point is (_, 3) p) {} 破棄(_)では型名のlongは不要if (point is (long x, long y)) {} 変数宣言も兼ねるので型名は必要。（この条件は常にtrueになる)if (point is (_, 3) { AbsSquare: long abs }) {} もちろん、プロパティパターンでも変数宣言可能if (line is ((1, 2), (3, 4))) {} 全部定数にマッチさせるif (line is (Point(1, _) p1, Point(long x2, 4) p2)) {} 一部だけマッチさせて、その場で宣言した変数に代入するif (line is ((1, _) { AbsSquare: 101 } p1, (long x2, 4) { AbsSquare: 80 } p2) { NormSquare: 85 } l) {} これもパターンマッチングの構文として正しいswitch文の対象に複数の値を書くことができるようになった。// 実際には単なる一時的なタプルの構築が行われる。switch (x, str) {case (0, string s):break;case (int n, string s) when s.Length &gt; 0:break;default:break;},,,var result = (x, str) switch {(int n, _) when n &lt; 0 =&gt; -1,(0, _) =&gt; 0,(int n, string { Length: int len }) =&gt; n * len + 2,_ =&gt; throw new ArgumentNullException(),};// うまく使えば、エルビス演算子`A?B:C`の組み合わせよりわかりやすいかもvar result = (b1, b2) switch {(true, true) =&gt; 1,(true, false) =&gt; 2,(false, _) =&gt; 3,};,,,// switch文の対象に複数の値を書くことができるようになった。
 実際には単なる一時的なタプルの構築が行われる。
var result = (b1, b2) switch {(true, true) =&gt; 1, うまく使えば、エルビス演算子`A?B:C`の組み合わせよりわかりやすいかも
    
 StudentクラスのCSV文字列化
    
 Create a buffer of 32 bytes of data to be transmitted.
        
ILSpy generated this explicit interface implementation from .override directive in MoveNext// 途中略


string name; 
 パケットから取得したファイル名
var ret = MasterContext.Where( g =&gt; g.email == "xxxxx@xxxxxxxx.xxx" ).Any(); 
 No coercion operator is defined between types 'System.Int16' and 'System.Boolean'.Any()メソッドはbool以外が返ってきて例外がでるので、別回避する必要ありvar ret = ( MasterContext.Where( g =&gt; g.Email == "xxxxx@xxxxxxxx.xxx" ).Select( g =&gt; new { g.Email } ).FirstOrDefault()) != null;if( ret ) [true] else [false];,,,// Any()メソッドはbool以外が返ってきて例外がでるので、別回避する必要あり
var ret = ( MasterContext.Where( g =&gt; g.Email == "xxxxx@xxxxxxxx.xxx" ).Select( g =&gt; new { g.Email } ).FirstOrDefault()) != null;

    
 ガンマ補正
                        
 画像のサイズが違う時は、ピクセルを取得できずにエラーとなるが、ここでは「差分」として扱う。
        
ウィンドウサイズ設定(minとmaxを=しているのはウィンドウサイズを固定するため)
// 行毎の合計を撮る
var sums = array.Rows.Select(r =&gt; r.Sum()).ToArray();  =&gt; [ 6, 15, 24 ]

                    
 01000000 (64)
    
リダイレクト先を表示リダイレクト先の取得public static async Task&lt;string&gt; GetLastUrl(string url){HttpClient client = new HttpClient();HttpResponseMessage response = await client.GetAsync(url);response.EnsureSuccessStatusCode();return response.RequestMessage.RequestUri.ToString();},,,using System.Diagnostics;using System.Threading.Tasks;using System.Net.Http;,,,//リダイレクト先の取得
public static async Task&lt;string&gt; GetLastUrl(string url)

    
 ClientStreaming, ServerStreaming, DuplexStreaming も実装の流れは同じですので割愛します。
                    
solver.Method = IvyFEM.Linear.IvyFEMEquationSolverMethod.NoPreconBiCGSTAB;
            
ランダム文字列生成
                    window.location.href = "https:
s3.amazonaws.comstatic-files.lookingglassfactory.comWebCalibrationBridgeLKG_ThreeJsDriver_Mac.pkg"
            
 You can change these numbers to test different predictions
    
 Update is called once per frame
        private enum FOS 
 not fully defined
                    NullValueHandling = NullValueHandling.Ignore 
 nullは出力しない
    options.AccessDeniedPath = "
IdentityAccessDenied"; AccessDenied は未実装
            
    schema: "information_schema");
            
 Math.Absですっきり
            "ST: service:WANIPConnection:1\r\n" 
 ST:例
    
 略
            
 マネージャーにUltra High Spec PC購入の承認を判定してもらう
// ファイル読みこみ
MemoryStream data = new MemoryStream(File.ReadAllBytes(tb_FileName2.Text));
metaデータを準備var metadata = new BitmapMetadata("jpg");metadata.SetQuery("/app1/ifd/gps/subifd:{ushort=1}", GPSLatitudeRef);metadata.SetQuery("/app1/ifd/gps/subifd:{ushort=2}", GPSLatitude);metadata.SetQuery("/app1/ifd/gps/subifd:{ushort=3}", GPSLongitudeRef);metadata.SetQuery("/app1/ifd/gps/subifd:{ushort=4}", GPSLongitude);metadata.SetQuery("/app1/ifd/{ushort=271}", "入れたメーカー名");metadata.SetQuery("/app1/ifd/{ushort=272}", "いれたモデル名");// ファイルに書き込みusing (FileStream stream = new FileStream(tb_FileName2.Text, FileMode.Open)){var enc = new JpegBitmapEncoder();var frame = BitmapFrame.Create(image, null, metadata, null);enc.Frames.Add(frame);enc.Save(stream);},,,// metaデータを準備
var metadata = new BitmapMetadata("jpg");
ファイルに書き込みusing (FileStream stream = new FileStream(tb_FileName2.Text, FileMode.Open)){var enc = new JpegBitmapEncoder();var frame = BitmapFrame.Create(image, null, metadata, null);enc.Frames.Add(frame);enc.Save(stream);},,,// ファイルに書き込み
using (FileStream stream = new FileStream(tb_FileName2.Text, FileMode.Open))

var MakerExif = metadata.GetQuery("
app1ifdexif{ushort=34864}");          Exifバージョン// ファイル/Metadata読み込み
Uri uri = new Uri(tb_FileName.Text, UriKind.Absolute);
以下は、上の処理と同じBitmapMetadata metadata4 = (BitmapMetadata)metadata.GetQuery("/app1/{ushort=0}");Debug.WriteLine("Metadataを列挙 /app1/{ushort=0}");#endif#if trueBitmapMetadata metadata6 = (BitmapMetadata)metadata.GetQuery("/app1/ifd/exif");Debug.WriteLine("Metadataを列挙 /app1/ifd/exif");foreach (string str in metadata6){Debug.WriteLine(str);}#else// 以下は、上の処理と同じBitmapMetadata metadata6 = (BitmapMetadata)metadata.GetQuery("/app1/ifd/{ushort=34665}");Debug.WriteLine("Metadataを列挙 /app1/ifd/{ushort=34665}");#endif#if trueBitmapMetadata metadataGPS = (BitmapMetadata)metadata.GetQuery("/app1/ifd/gps");Debug.WriteLine("Metadataを列挙 /app1/ifd/gps");foreach (string str in metadataGPS){Debug.WriteLine(str);}#else// 以下は、上の処理と同じBitmapMetadata metadataGPS = (BitmapMetadata)metadata.GetQuery("/app1/ifd/{ushort=34853}");Debug.WriteLine("Metadataを列挙 /app1/ifd/{ushort=34853}");#endif,,,// 以下は、上の処理と同じ
BitmapMetadata metadata4 = (BitmapMetadata)metadata.GetQuery("/app1/{ushort=0}");
BitmapMetadata metadata6 = (BitmapMetadata)metadata.GetQuery("/app1/ifd/{ushort=34665}");Debug.WriteLine("Metadataを列挙 /app1/ifd/{ushort=34665}"); 以下は、上の処理と同じBitmapMetadata metadataGPS = (BitmapMetadata)metadata.GetQuery("/app1/ifd/{ushort=34853}");Debug.WriteLine("Metadataを列挙 /app1/ifd/{ushort=34853}"); 以下は、上の処理と同じ
        
 keySet&lt;string(タグの名前),string(タグで囲まれた文字列)&gt;
            
ホールが消える
            
TBD
            return $"&lt;speak version='1.0' xmlns='https:
www.w3.org200110synthesis' xml:lang='{speechRecognitionLanguage}'&gt;&lt;voice name='{speechName}'&gt;{text}&lt;voice&gt;&lt;speak&gt;";
        
 全ピクセルに色付け
    rate = Mathf.Pow(rate, m_ReactionDistance); 
 指数関数を加えることにより、収束する勢いを変更できるようにしてる
//コード
Show(Enumerable.Range(5, 3));
//出力
5 6 7

    
出力
        
ret = ListBoxから値を取得
            
ループを実況。。。
                         temp = await resGetAsync();
サーバからのメッセージを受け取る
    
 切断されたりするまで例外はキャッチされない。
    .Select(count =&gt; (count &amp; 1) == 0);
trueから開始
        
 MessagePackCompiler
                    
ここに各イベントごとの呼び出し処理を書く 
  
 コードビハインドの C# ファイル中辛はそれを使うだけ。
                , EventLogEntryType.Information);
, 4);
// 実行結果
 これは間違いなので確認してください(列番号 : 1)
こんな方法もあります1(by @albireo さん)System.Console.WriteLine($"{alert}{number})");// こんな方法もあります2(by @shoe0227 さん)ちょっと変数を変えてvar    number = 1;string alert  = "これは間違いなので確認してください(列番号 : {0})";System.Console.WriteLine(alert, number);// 実行結果// これは間違いなので確認してください(列番号 : 1),,,// こんな方法もあります1(by @albireo さん)
System.Console.WriteLine($"{alert}{number})");
// こんな方法もあります2(by @shoe0227 さん)
ちょっと変数を変えて
// 実行結果
 これは間違いなので確認してください(列番号 : 1)

    
 リスト
        
 View -&gt; ViewModelの通知が動作した時処理されるConverter
                
 プレーンな（非 Navigation）Window で Frame を使用している場合
                
 https:docs.microsoft.comja-jpvisualstudiocode-qualityca1060-move-p-invokes-to-nativemethods-class
Console.WriteLine(result); 
 =&gt; "edo"// 生成するインスタンスの型
Type ctorType = typeof(HogeClass);
// 引数で受け取る値のパラメータ
ParameterExpression propParam = Expression.Parameter(typeof(int), "propParam");
// インスタンス生成式
NewExpression ctor = Expression.New(ctorType);
// 生成したインスタンスを参照するローカル変数
ParameterExpression local = Expression.Parameter(ctorType, "instance");
// インスタンスのプロパティアクセス
MemberExpression prop = Expression.Property(local, "AnyProperty");
// 戻り値の型
LabelTarget returnTarget = Expression.Label(ctorType);
// 戻り値の設定
GotoExpression returnExpr = Expression.Return(returnTarget, local, ctorType);
// ちょっとこれの理由は不明・・・
LabelExpression returnLabel = Expression.Label(returnTarget, Expression.Default(ctorType));
上記処理を行うブロック文BlockExpression body = Expression.Block(new[] { local },Expression.Assign(local, ctor),Expression.Assign(prop, propParam),returnExpr,returnLabel);// ラムダ式の生成LambdaExpression lambda = Expression.Lambda&lt;Func&lt;int, HogeClass&gt;&gt;(body, propParam);var func = (Func&lt;int, HogeClass&gt;)lambda.Compile();// 結果を受け取るvar result = func(33);Console.WriteLine(result);Console.WriteLine(result.AnyProperty);,,,public static System.Linq.Expressions.MethodCallExpression Call (Type type, string methodName, Type[] typeArguments, params System.Linq.Expressions.Expression[] arguments);,,,// メソッドの引数に対象クラスのTypeをもらう想定// ラムダ式の引数として与えられるパラメータParameterExpression arg1 = Expression.Parameter(typeof(AnyBase), "arg1");ParameterExpression arg2 = Expression.Parameter(typeof(AnyBase), "arg2");// ローカルで利用するためのローカル変数パラメータParameterExpression local1 = Expression.Parameter(type, "instance1");ParameterExpression local2 = Expression.Parameter(type, "instance2");// 引数をキャストするMethodCallExpression convertExpr1 = Expression.Call(typeof(Convert), "ChangeType", null, arg1, Expression.Constant(local1.Type));UnaryExpression valueCast1 = Expression.Convert(convertExpr1, local1.Type);MethodCallExpression convertExpr2 = Expression.Call(typeof(Convert), "ChangeType", null, arg2, Expression.Constant(local2.Type));UnaryExpression valueCast2 = Expression.Convert(convertExpr2, local2.Type);// キャストした引数をローカル変数にアサインするBinaryExpression castAssign1 = Expression.Assign(local1, valueCast1);BinaryExpression castAssign2 = Expression.Assign(local2, valueCast2);,,,// 上記処理を行うブロック文
BlockExpression body = Expression.Block(
// ラムダ式の生成
LambdaExpression lambda = Expression.Lambda&lt;Func&lt;int, HogeClass&gt;&gt;(body, propParam);
// 結果を受け取る
var result = func(33);
// メソッドの引数に対象クラスのTypeをもらう想定

// ラムダ式の引数として与えられるパラメータ
ParameterExpression arg1 = Expression.Parameter(typeof(AnyBase), "arg1");
// ローカルで利用するためのローカル変数パラメータ
ParameterExpression local1 = Expression.Parameter(type, "instance1");
// 引数をキャストする
MethodCallExpression convertExpr1 = Expression.Call(typeof(Convert), "ChangeType", null, arg1, Expression.Constant(local1.Type));
// キャストした引数をローカル変数にアサインする
BinaryExpression castAssign1 = Expression.Assign(local1, valueCast1);

        
 Fugaインスタンスの生成
        
...
            
 平行投影サイズは0以上になるようにする(クランプの範囲は要調整)
    
 こんな感じのメソッドをPrimitiveStructClass、および各特殊化手法ごとに定義していく
                
 File.WriteAllLines(fi.FullName, content.Replace("\t", ",").Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries));
                
 適宜
                    
IME以外のメッセージは元のプロシージャで処理
    using (var request  = new HttpRequestMessage(HttpMethod.Get, new Uri("https:
127.0.0.1:8443test.dat")))
    
 ：
            
切り替えたいタイミングでこれを書く
            return $"&lt;speak version='1.0' xmlns='https:
www.w3.org200110synthesis' xml:lang='ja-JP'&gt;&lt;voice name='ja-JP-NanamiNeural'&gt;{text}&lt;voice&gt;&lt;speak&gt;";
  
 購入作品一覧ページ
        
時間経過を見るためコンソールに時間を表示させる。
    
コンストラクタ
   
 今回はindex=0（文字列コレクションの一番上の文字列）を初期値とする
    
 証明書の読み込み
例外が発生するvar dict = new Dictionary&lt;string, int&gt; {{ "a", 0 },{ "b", 0 },{ "c", 0 },{ null, 0 },};,,,public class NullableKeyDictionary&lt;TKey, TValue&gt; : IReadOnlyDictionary&lt;TKey, TValue&gt;{private readonly IReadOnlyDictionary&lt;TKey, TValue&gt; source;private readonly bool hasNullKey;private readonly TValue nullValue;public NullableKeyDictionary(IReadOnlyDictionary&lt;TKey, TValue&gt; source){if (this.source == null){throw new ArgumentNullException(nameof(source));}this.source = source;this.hasNullKey = false;this.nullValue = default(TValue);}public NullableKeyDictionary(IReadOnlyDictionary&lt;TKey, TValue&gt; source, TValue nullValue){if (this.source == null){throw new ArgumentNullException(nameof(source));}this.source = source;this.hasNullKey = true;this.nullValue = nullValue;}public IEnumerator&lt;KeyValuePair&lt;TKey, TValue&gt;&gt; GetEnumerator(){foreach (var it in this.source){yield return it;}if (this.hasNullKey){yield return new KeyValuePair&lt;TKey, TValue&gt;(default(TKey), nullValue);}}IEnumerator IEnumerable.GetEnumerator(){return GetEnumerator();}public int Count =&gt; this.hasNullKey ? this.source.Count + 1 : this.source.Count;public bool ContainsKey(TKey key){if (this.hasNullKey &amp;&amp; key == null){return true;}else{return this.source.ContainsKey(key);}}public bool TryGetValue(TKey key, out TValue value){if (this.hasNullKey &amp;&amp; key == null){value = nullValue;return true;}else{return this.TryGetValue(key, out value);}}public TValue this[TKey key] =&gt; key == null &amp;&amp; hasNullKey? this.nullValue: this.source[key];public IEnumerable&lt;TKey&gt; Keys{get{foreach (var it in this.source){yield return it.Key;}if (this.hasNullKey){yield return default(TKey);}}}public IEnumerable&lt;TValue&gt; Values{get{foreach (var it in this.source){yield return it.Value;}if (this.hasNullKey){yield return nullValue;}}}},,,// 例外が発生する
var dict = new Dictionary&lt;string, int&gt; {

//  ShaderEffect.PixelShader プロパティにセット
this.PixelShader = pixelShader;

            
 Assert
// 'Operation is not supported on this platform.'rsa.FromXmlString(privateKey); ここで PlatformNotSupportedException がスローされます。// 鍵を読み込むことができます。.NET Core 2.1 で確認。
 シグネチャが同一である場合は拡張メソッドではなく本体に実装されているメソッドが優先されるため、メソッド名は変更しました。

            
終了時に現在時刻の記録
            
 ビューポートの設定
        
 まとめてコミットコンテキストの部分クラスpublic partial class NorthwindEntities : DbContext{/// &lt;summary&gt;/// コンストラクタ。/// &lt;/summary&gt;/// &lt;param name="existingConnection"&gt;コンテキストで使用する接続。&lt;/param&gt;/// &lt;param name="contextOwnsConnection"&gt;false を指定すると、コンテキストが Dispose されたときに接続を Dispose しない。&lt;/param&gt;public NorthwindEntities(DbConnection existingConnection, bool contextOwnsConnection): base(existingConnection, contextOwnsConnection){}/// &lt;summary&gt;/// メタデータワークスペースを取得する。/// &lt;/summary&gt;/// &lt;returns&gt;&lt;/returns&gt;public static MetadataWorkspace GetMetadataWorkspace(){using (var context = new NorthwindEntities()){var objectContext = ((IObjectContextAdapter)context).ObjectContext;return objectContext.MetadataWorkspace;}}},,,// コンテキストの部分クラス
public partial class NorthwindEntities : DbContext

            
 シンボルAAAが定義されていないため、下のHello()の呼び出しはコンパイルされない
        
 顔の向きを上げる調整。両肩を結ぶ線を軸として回転
            
 Delete an item. Note we must provide the partition key value and id of the item to delete
    
 Services = { service },// ここで Interceptor を挟んだ CallInvoker を生成
var invoker = channel.Intercept(new HogeInterceptor());
// 挟まない場合はこう
 var client = MagicOnionClient.Create&lt;IMyFirstService&gt;(channel);

  
 なにかしらの処理
        
python側でprintした内容を取得
//「タブの高さ」×「タブストリップの行数」＋「タブページの高さ」でtab全体を表示するための高さを取得
tab.Height = tab.ItemSize.height * tab.RowCount + tabPage.Height;

            
 UTF8文字コード設定
Console.WriteLine(isSatisfy); 
 True
                
 ポイント3_2// ポイント3_2
Invoke("GetScore", 10);

            
 ロールバック
foreach(x in collection){if(/*条件*/){LINQに書き換えたほうが良い構造//LINQに書き換える
collection.Where(/*条件*/).ForEach(/*collectionの各要素に行う処理*/);

    static void CreateEditorFolder()  
FolderCreate("フォルダ名");　で新しいフォルダ追加可能
    
 処理を行ってレスポンスを返します。
public int hp = xxx; 
(数字を設定する)
                
クエリー送信先、トランザクションの指定
                
 パースの成否でパース結果のオブジェクトの方が変わる
    
 サンプルなので DI せず直にインスタンス化
            
 省略
    
 allows voidTask return type, parameter is automatically binded from string[] args.
        Debug.Log(ret); 
 インライン展開されて消えることがないようにちゃんと戻り値を使う
      new MathTest(100.0).run(); 
 メモリキャッシュとか対策にちょっと回す
        
Set these Textures in the Inspector
                return false; 
 強制で切断した場合に Socket が null になるため、例外を無視
    
 Update is called once per frame
        
他の場合も同様
        
 ※モックの検証は基底クラスで自動的に行われる。
            
 投稿内容インスタンスを作成し、ファイル末尾に出力
        
 Handle the SpeechRecognized event.  
// バインディングしたい場合は、そのクラスを作りオブジェクト化してバインディングする
var appSettings = new AppSettings();

            this.expenseItems.DataContext = ExpenseDao.selectByUser(data as User);  
 追加
    
 他のObservableTriggerBase継承クラスはSubjectひとつひとつにOnCompletedやDisposeしている…….// OnConnectedToMaster時にOnCompletedされる想定
Subject&lt;Unit&gt; ConnectMaster = new Subject&lt;Unit&gt;();

  ​   
 ループを3回おこない、ループごとにiに1から3が代入される
                    
1秒待つ
    
AudioSource audioSource=null;
    
 それ以外
            ws.IndentChars = "  "; 
 &lt;- インデントの空白数ではなくて、1つ分のインデントとして使う文字列を直接指定します。
                    ).SetValidateNotifyError(x =&gt; String.IsNullOrEmpty(x) ? "何か入力してください。" : null) 
 バリデーション.
                1000 
 最大高 
            
なんか
// using GalaSoft.MvvmLight; // コメントアウト
using CommonServiceLocator;  追加
// using Microsoft.Practices.ServiceLocation; // コメントアウト
,,,

        
 呼び出し元情報を設定します。
            
☆10に届いてない分だけ表示
            await Task.Delay(10); 
10ms待機する
array[h*wLength + w];  
 場合によっては[(h-1)*wLength + (w-1)]
        
シーンをロードするたびに新しいカメラを生成
      
 Debug.Log("through");
            
任意のMessageHandlerの実行前後に、AsyncL
            
フェード中の時間、Alphaを確認
        SetLocalGravity (); 
重力をAddForceでかけるメソッドを呼ぶ。FixedUpdateが好ましい。
        
 コマンド送信ボタン押下
                time = 0;          
timeを0にする。
    
 System.ValueTuple
        
 game loop
    
30％の確率で起こるイベント
        
return "{X0:" + X0 + ", Y0:" + Y0 + ", X1:" + X1 + ", Y1:" + Y1 + "}";
// Window○○ は、自前のWindowクラス。

// 以下略
,,,
// Window○○ は、自前のWindowクラス。

// 以下略
,,,

            success(); 
成功のメソッド
    
 反変性のサポートによって EventArgs 型引数のイベントハンドラも登録できる。// これは .NET 3.5 でもできた。
IEnumerable&lt;Derived&gt; derivedEnumerable = new List&lt;Derived&gt;();
// IEnumerable&lt;out T&gt; のように共変であることを表す out キーワードで修飾されるようになった。
 列挙だけなら Derived 型オブジェクトを Base 型として扱っても問題ない。
// 設定もできる場合、共変は許されない。
 （List&lt;Base&gt; は Derived 以外の派生型オブジェクトを受け取ることもあるから）
// Action&lt;in T&gt; のように、反変であることを表す in キーワードで修飾されるようになった。
 基底型の引数に派生型のオブジェクトが渡されても問題ない。
// 引数を渡す側は、派生型を渡してそれが基底型として扱われても不都合はないはず。
derivedAction.Invoke(new Derived());

// バカみたいに失敗するテスト
[Test]
// バカみたいに成功するテスト
[Test]

        FilePath = AppDomain.CurrentDomain.BaseDirectory.TrimEnd('\\');
EXEを実行したカレントディレクトリ (ショートカット等でカレントディレクトリが変わるのでこの方式で)
            
 HWindowに画像を表示する
    
 Start is called before the first frame update
        
 (x,y)から左斜め下(45度)の位置を列挙する　(x,y)含む
            
 エラーダイアログが閉じた後に実行する処理（アプリの終了処理を書いたり）
            
テスト用　フェードイン
    
 二次元配列の各次元の要素数
    
 Update is called once per frame
    
 ポインタなどの処理
各クラスが自分自身の説明をするための共通のインターフェースinterface IExplainer{string Explain();}// 汁ありclass WithSoupRamen : IExplainer {private string Name;private Noodles Noodles;private Soup Soup;private Topping Topping;public WithSoupRamen(string name, Noodles noodles, Soup soup, Topping topping) {Name = name;Noodles = noodles;Soup = soup;Topping = topping;}public string Explain() {return Name + "の\n" + Noodles.Explain() + "\n" + Soup.Explain() + "\n" + Topping.Explain();}}// 麺class Noodles : IExplainer {private string WidthType;public Noodles(string widthType) {WidthType = widthType;}public string Explain() {return "麺の太さは" + WidthType + "です。";}}// スープclass Soup : IExplainer {private Fond Fond;private Sauce Sauce;private Oil Oil;public Soup(Fond fond, Sauce sauce, Oil oil) {Fond = fond;Sauce = sauce;Oil = oil;}public string Explain() {return Fond.Explain() + "\n" + Sauce.Explain() + "\n" + Oil.Explain();}}// 出汁class Fond : IExplainer {private List&lt;string&gt; Ingredients = new List&lt;string&gt;();public Fond(string ingredient) {AddFond(ingredient);}public void AddFond(string ingredient) {Ingredients.Add(ingredient);}public string Explain() {return "出汁は" + String.Join(", ", Ingredients) + "です。";}}// タレclass Sauce : IExplainer {private List&lt;string&gt; Seasonings = new List&lt;string&gt;();public Sauce(string seadoning) {AddSauce(seadoning);}public void AddSauce(string seadoning) {Seasonings.Add(seadoning);}public string Explain() {return "タレは" + String.Join(", ", Seasonings) + "です。";}}// 香味油class Oil : IExplainer {private List&lt;string&gt; Oiltypes = new List&lt;string&gt;();public Oil(string oiltype) {AddOil(oiltype);}public void AddOil(string oiltype) {Oiltypes.Add(oiltype);}public string Explain() {return "香味油は" + String.Join(", ", Oiltypes) + "です。";}}// 具class Topping : IExplainer {private List&lt;string&gt; Toppings = new List&lt;string&gt;();public Topping(string topping) {AddTopping(topping);}public void AddTopping(string topping) {Toppings.Add(topping);}public string Explain() {return "具は" + String.Join(", ", Toppings) + "です。";}},,,// 各クラスが自分自身の説明をするための共通のインターフェース
interface IExplainer
汁ありclass WithSoupRamen : IExplainer {private string Name;private Noodles Noodles;private Soup Soup;private Topping Topping;public WithSoupRamen(string name, Noodles noodles, Soup soup, Topping topping) {Name = name;Noodles = noodles;Soup = soup;Topping = topping;}public string Explain() {return Name + "の\n" + Noodles.Explain() + "\n" + Soup.Explain() + "\n" + Topping.Explain();}}// 麺class Noodles : IExplainer {private string WidthType;public Noodles(string widthType) {WidthType = widthType;}public string Explain() {return "麺の太さは" + WidthType + "です。";}}// スープclass Soup : IExplainer {private Fond Fond;private Sauce Sauce;private Oil Oil;public Soup(Fond fond, Sauce sauce, Oil oil) {Fond = fond;Sauce = sauce;Oil = oil;}public string Explain() {return Fond.Explain() + "\n" + Sauce.Explain() + "\n" + Oil.Explain();}}// 出汁class Fond : IExplainer {private List&lt;string&gt; Ingredients = new List&lt;string&gt;();public Fond(string ingredient) {AddFond(ingredient);}public void AddFond(string ingredient) {Ingredients.Add(ingredient);}public string Explain() {return "出汁は" + String.Join(", ", Ingredients) + "です。";}}// タレclass Sauce : IExplainer {private List&lt;string&gt; Seasonings = new List&lt;string&gt;();public Sauce(string seadoning) {AddSauce(seadoning);}public void AddSauce(string seadoning) {Seasonings.Add(seadoning);}public string Explain() {return "タレは" + String.Join(", ", Seasonings) + "です。";}}// 香味油class Oil : IExplainer {private List&lt;string&gt; Oiltypes = new List&lt;string&gt;();public Oil(string oiltype) {AddOil(oiltype);}public void AddOil(string oiltype) {Oiltypes.Add(oiltype);}public string Explain() {return "香味油は" + String.Join(", ", Oiltypes) + "です。";}}// 具class Topping : IExplainer {private List&lt;string&gt; Toppings = new List&lt;string&gt;();public Topping(string topping) {AddTopping(topping);}public void AddTopping(string topping) {Toppings.Add(topping);}public string Explain() {return "具は" + String.Join(", ", Toppings) + "です。";}},,,// 汁あり
class WithSoupRamen : IExplainer {
麺class Noodles : IExplainer {private string WidthType;public Noodles(string widthType) {WidthType = widthType;}public string Explain() {return "麺の太さは" + WidthType + "です。";}}// スープclass Soup : IExplainer {private Fond Fond;private Sauce Sauce;private Oil Oil;public Soup(Fond fond, Sauce sauce, Oil oil) {Fond = fond;Sauce = sauce;Oil = oil;}public string Explain() {return Fond.Explain() + "\n" + Sauce.Explain() + "\n" + Oil.Explain();}}// 出汁class Fond : IExplainer {private List&lt;string&gt; Ingredients = new List&lt;string&gt;();public Fond(string ingredient) {AddFond(ingredient);}public void AddFond(string ingredient) {Ingredients.Add(ingredient);}public string Explain() {return "出汁は" + String.Join(", ", Ingredients) + "です。";}}// タレclass Sauce : IExplainer {private List&lt;string&gt; Seasonings = new List&lt;string&gt;();public Sauce(string seadoning) {AddSauce(seadoning);}public void AddSauce(string seadoning) {Seasonings.Add(seadoning);}public string Explain() {return "タレは" + String.Join(", ", Seasonings) + "です。";}}// 香味油class Oil : IExplainer {private List&lt;string&gt; Oiltypes = new List&lt;string&gt;();public Oil(string oiltype) {AddOil(oiltype);}public void AddOil(string oiltype) {Oiltypes.Add(oiltype);}public string Explain() {return "香味油は" + String.Join(", ", Oiltypes) + "です。";}}// 具class Topping : IExplainer {private List&lt;string&gt; Toppings = new List&lt;string&gt;();public Topping(string topping) {AddTopping(topping);}public void AddTopping(string topping) {Toppings.Add(topping);}public string Explain() {return "具は" + String.Join(", ", Toppings) + "です。";}},,,// 麺
class Noodles : IExplainer {
スープclass Soup : IExplainer {private Fond Fond;private Sauce Sauce;private Oil Oil;public Soup(Fond fond, Sauce sauce, Oil oil) {Fond = fond;Sauce = sauce;Oil = oil;}public string Explain() {return Fond.Explain() + "\n" + Sauce.Explain() + "\n" + Oil.Explain();}}// 出汁class Fond : IExplainer {private List&lt;string&gt; Ingredients = new List&lt;string&gt;();public Fond(string ingredient) {AddFond(ingredient);}public void AddFond(string ingredient) {Ingredients.Add(ingredient);}public string Explain() {return "出汁は" + String.Join(", ", Ingredients) + "です。";}}// タレclass Sauce : IExplainer {private List&lt;string&gt; Seasonings = new List&lt;string&gt;();public Sauce(string seadoning) {AddSauce(seadoning);}public void AddSauce(string seadoning) {Seasonings.Add(seadoning);}public string Explain() {return "タレは" + String.Join(", ", Seasonings) + "です。";}}// 香味油class Oil : IExplainer {private List&lt;string&gt; Oiltypes = new List&lt;string&gt;();public Oil(string oiltype) {AddOil(oiltype);}public void AddOil(string oiltype) {Oiltypes.Add(oiltype);}public string Explain() {return "香味油は" + String.Join(", ", Oiltypes) + "です。";}}// 具class Topping : IExplainer {private List&lt;string&gt; Toppings = new List&lt;string&gt;();public Topping(string topping) {AddTopping(topping);}public void AddTopping(string topping) {Toppings.Add(topping);}public string Explain() {return "具は" + String.Join(", ", Toppings) + "です。";}},,,// スープ
class Soup : IExplainer {
出汁class Fond : IExplainer {private List&lt;string&gt; Ingredients = new List&lt;string&gt;();public Fond(string ingredient) {AddFond(ingredient);}public void AddFond(string ingredient) {Ingredients.Add(ingredient);}public string Explain() {return "出汁は" + String.Join(", ", Ingredients) + "です。";}}// タレclass Sauce : IExplainer {private List&lt;string&gt; Seasonings = new List&lt;string&gt;();public Sauce(string seadoning) {AddSauce(seadoning);}public void AddSauce(string seadoning) {Seasonings.Add(seadoning);}public string Explain() {return "タレは" + String.Join(", ", Seasonings) + "です。";}}// 香味油class Oil : IExplainer {private List&lt;string&gt; Oiltypes = new List&lt;string&gt;();public Oil(string oiltype) {AddOil(oiltype);}public void AddOil(string oiltype) {Oiltypes.Add(oiltype);}public string Explain() {return "香味油は" + String.Join(", ", Oiltypes) + "です。";}}// 具class Topping : IExplainer {private List&lt;string&gt; Toppings = new List&lt;string&gt;();public Topping(string topping) {AddTopping(topping);}public void AddTopping(string topping) {Toppings.Add(topping);}public string Explain() {return "具は" + String.Join(", ", Toppings) + "です。";}},,,// 出汁
class Fond : IExplainer {
タレclass Sauce : IExplainer {private List&lt;string&gt; Seasonings = new List&lt;string&gt;();public Sauce(string seadoning) {AddSauce(seadoning);}public void AddSauce(string seadoning) {Seasonings.Add(seadoning);}public string Explain() {return "タレは" + String.Join(", ", Seasonings) + "です。";}}// 香味油class Oil : IExplainer {private List&lt;string&gt; Oiltypes = new List&lt;string&gt;();public Oil(string oiltype) {AddOil(oiltype);}public void AddOil(string oiltype) {Oiltypes.Add(oiltype);}public string Explain() {return "香味油は" + String.Join(", ", Oiltypes) + "です。";}}// 具class Topping : IExplainer {private List&lt;string&gt; Toppings = new List&lt;string&gt;();public Topping(string topping) {AddTopping(topping);}public void AddTopping(string topping) {Toppings.Add(topping);}public string Explain() {return "具は" + String.Join(", ", Toppings) + "です。";}},,,// タレ
class Sauce : IExplainer {
香味油class Oil : IExplainer {private List&lt;string&gt; Oiltypes = new List&lt;string&gt;();public Oil(string oiltype) {AddOil(oiltype);}public void AddOil(string oiltype) {Oiltypes.Add(oiltype);}public string Explain() {return "香味油は" + String.Join(", ", Oiltypes) + "です。";}}// 具class Topping : IExplainer {private List&lt;string&gt; Toppings = new List&lt;string&gt;();public Topping(string topping) {AddTopping(topping);}public void AddTopping(string topping) {Toppings.Add(topping);}public string Explain() {return "具は" + String.Join(", ", Toppings) + "です。";}},,,// 香味油
class Oil : IExplainer {
具class Topping : IExplainer {private List&lt;string&gt; Toppings = new List&lt;string&gt;();public Topping(string topping) {AddTopping(topping);}public void AddTopping(string topping) {Toppings.Add(topping);}public string Explain() {return "具は" + String.Join(", ", Toppings) + "です。";}},,,// 具
class Topping : IExplainer {

        protected readonly long chunkStart; 
 chunk head + 8 (type + size)
                
 UI strings that we have localized.
                
 0埋め 例：(ret, digits) = ("101", 5) =&gt; "00101"
        
====================================================================================================
    
トンネル解除
                
 レジストリの値を設定
                
 例外情報出力
    void Ping(int i) 
登録するメソッドにint型引数を持たす
            listener.Prefixes.Add("http:
+:80Temporary_Listen_Addresses");
    
 コントロールにアクセス// ここまでは呼び出し元スレッド
await Task.Delay(3000).ConfigureAwait(false);
// ここから後は別のスレッド
,,,

      Console.WriteLine(attr[0].Value);   

        if (Input.GetKeyDown(KeyCode.T)) 
VRのカメラオン
   
 UIの上なら、タップとみなさない
                
 We set the WindowContent as the content of the window. 
    
省略
        MessageEffectSubject.OnNext("failure"); 
 イベントを通知
//dll内の関数
public static extern int Add(int a, int b);
//dll内の関数
public int tooltip_int;
//dll内の関数
public int header_int;

        
 Notificationはコンストラクタの時点ではまだ注入されていなかった.
  
 リプライの中でも、宛先が対象のツイートとなっているもののみを取得
        
 2018年4月1日～2019年3月31日の第2火曜日の日付を取得する。
        
   Double Sided Global
            
振る舞い
        
 The main Execute method (inherited from IExternalCommand) must be public
        transform.position = new Vector3(x+defPosition.x,defPosition.y, z+defPosition.z);  
自分のいる位置から座標を動かす。
    
 CHARACTERISTICS!!
    
（略）
        
 call method.
            
 今のフラグの状態の表示
        
結果受け取り
            
  to avoid creating duplicate seed data.
        
 すべての位置を列挙する
// 日本語用リソースだと”4逓倍”、英語用だと”Multiple 4”
string str = Properties.Resources.Multi4

            
 no match value =&gt; default
    
 他のクラスメンバー略...// だめだ。よくわかんねぇ
,,,
これじゃList&lt;KeyValuePair&gt; なんだぜ。。。var dic = Employees.Select(x =&gt; { return new KeyValuePair&lt;int, string&gt;(x.Id, x.Name); }).Tolist();// KeyにKeyは入ってるけど、ValueにKeyValuePairが入ってる気がした。var dic2 = Employees.Select(x =&gt; { return new KeyValuePair&lt;int, string&gt;(x.Id, x.Name); }).ToDictionary(x =&gt; x.Key);,,,// これじゃList&lt;KeyValuePair&gt; なんだぜ。。。
var dic = Employees.Select(x =&gt; { return new KeyValuePair&lt;int, string&gt;(x.Id, x.Name); }).Tolist();
KeyにKeyは入ってるけど、ValueにKeyValuePairが入ってる気がした。var dic2 = Employees.Select(x =&gt; { return new KeyValuePair&lt;int, string&gt;(x.Id, x.Name); }).ToDictionary(x =&gt; x.Key);,,,// KeyにKeyは入ってるけど、ValueにKeyValuePairが入ってる気がした。
var dic2 = Employees.Select(x =&gt; { return new KeyValuePair&lt;int, string&gt;(x.Id, x.Name); }).ToDictionary(x =&gt; x.Key);

                
算出したサイズで切り出す
    
 Update is called once per frame
        
結果受け取り
   {     
電話が来たらカッコ内の処理を流す．
    
 割愛
// 「@」をつけると逐語的文字列リテラルとなります。
　文字列内ではエスケープシーケンスが不要になり、改行も可能になります。
// また、C#6.0からは「$」による文字列埋め込みが使えます。
 （SQLインジェクション対策としては、生の文字列埋め込みではなくDBパラメータの利用が推奨です。）
// $@が正解ですが、@$とするとコンパイルエラーを起こすので注意。
string sql = $@"

//切り上げ
value = Math.Ceilng(value);
//切り下げ
Floor: -3、Truncate: -2
//四捨五入
MidpointRounding.AwayFromZeroを指定しないと結果は2となる

hogeInstance.Command.Execute(1);
これだと引数は1
        
ターゲットにしたオブジェクトにタグをつけとく
using System;  
 Needed for Math
  
 ゲーム開始時に追加した変数に値をセット// 追加した変数に値をセット
Distance = Math.Abs(BeatPoint.position.x - SpawnPoint.position.x);
ゲーム開始時に追加した変数に値をセットvoid play() {PlayTime = Time.time * 1000;isPlaying = true;Debug.Log("Game Start!");},,,// ノーツを発射するタイミングかチェックし、go関数を発火this.UpdateAsObservable().Where(_ =&gt; isPlaying).Where(_ =&gt; Notes.Count &gt; GoIndex).Where(_ =&gt; Notes[GoIndex].GetComponent&lt;NoteController&gt;().getTiming() &lt;= ((Time.time * 1000 - PlayTime) + During)).Subscribe(_ =&gt; {Notes[GoIndex].GetComponent&lt;NoteController&gt;().go(Distance, During);GoIndex++;});,,,// ゲーム開始時に追加した変数に値をセット
void play() {
// ノーツを発射するタイミングかチェックし、go関数を発火
this.UpdateAsObservable()

    
 必要な処理を書いていく
    
 指定リージョンからモジュールを削除
    
 和集合（重複データは除かれる）を求めた後、文字列の降順にソートする。
            
 SAMPLE DATA
        
 右手と左手を取得する
               
 差し引いて実質 hmd の移動を無効化する.
    
 終了処理// これをしないと次回のReadで例外
pr.AdvanceTo(readResult.Buffer.End);
// async内ではSpanが使用できないため別関数にする
 将来的にはこの制限が緩和される可能性あり
// 実行時点でPipeReaderにデータが流れるようになる
await pw.FlushAsync();

        
 Player設定で入れた Product Name がタイトルになる
        
 復号化
        
 Update is called once per frame
        
 "Tokyo"と"Yokohama"が重複しているリスト
        
 2019年の日曜日の日付を取得する。
サンプルデータvar profile = new Dictionary&lt;string, string&gt;() {{"name", "お名前"},{"age", "３０歳"},{"address", "日本"},{"blood", "AB型"},};,,,// サンプルデータvar profile = new Dictionary&lt;string, string&gt;() {{"name", "お名前"},{"age", "２０歳"},{"address", "日本"},{"blood", "AB型"},};var result = String.Join("\n", profile.Select(kvp =&gt; kvp.Key + " : " + kvp.Value));Debug.Log(result);,,,public static class DictionaryExtensions {public static string ToJoin&lt;TKey, TValue&gt;(this IDictionary&lt;TKey, TValue&gt; source, string separator, string join){return string.Join(separator, source.Select(kvp =&gt; kvp.Key.ToString()+join+kvp.Value.ToString()));}},,,// サンプルデータvar profile = new Dictionary&lt;string, string&gt;() {{"name", "お名前"},{"age", "２０歳"},{"address", "日本"},{"blood", "AB型"},};var result = profile.ToJoin("\n", " : ");Debug.Log(result);,,,// サンプルデータ
var profile = new Dictionary&lt;string, string&gt;() {
サンプルデータvar profile = new Dictionary&lt;string, string&gt;() {{"name", "お名前"},{"age", "２０歳"},{"address", "日本"},{"blood", "AB型"},};var result = String.Join("\n", profile.Select(kvp =&gt; kvp.Key + " : " + kvp.Value));Debug.Log(result);,,,public static class DictionaryExtensions {public static string ToJoin&lt;TKey, TValue&gt;(this IDictionary&lt;TKey, TValue&gt; source, string separator, string join){return string.Join(separator, source.Select(kvp =&gt; kvp.Key.ToString()+join+kvp.Value.ToString()));}},,,// サンプルデータvar profile = new Dictionary&lt;string, string&gt;() {{"name", "お名前"},{"age", "２０歳"},{"address", "日本"},{"blood", "AB型"},};var result = profile.ToJoin("\n", " : ");Debug.Log(result);,,,// サンプルデータ
var profile = new Dictionary&lt;string, string&gt;() {
サンプルデータvar profile = new Dictionary&lt;string, string&gt;() {{"name", "お名前"},{"age", "２０歳"},{"address", "日本"},{"blood", "AB型"},};var result = profile.ToJoin("\n", " : ");Debug.Log(result);,,,// サンプルデータ
var profile = new Dictionary&lt;string, string&gt;() {

            
 dataTableで結果を取得
    il.Emit(Ret); 
 スタックにはJobHandleのみが残っているのでこれを返り値とする
//喜
var j = new KeyValuePair&lt;BlendShapePreset, float&gt;(BlendShapePreset.Joy,1);
//怒
var a = new KeyValuePair&lt;BlendShapePreset, float&gt;(BlendShapePreset.Angry,1);
//哀
var s = new KeyValuePair&lt;BlendShapePreset, float&gt;(BlendShapePreset.Sorrow,1);
//楽
var f = new KeyValuePair&lt;BlendShapePreset, float&gt;(BlendShapePreset.Fun,1);

            
 3.5秒待つ場合は以下のような感じ
        
円周率=Math.PI
                
Display属性が定義していなかった場合、Enumの名称を返す
// Object 型のメソッド呼び出しでもオーバーライドされた Equals メソッドが使用されます。
Assert.IsTrue(s2AsObj.Equals(s1));
// リテラルから生成されていない値とは一致しません。
Assert.IsFalse(Object.ReferenceEquals("s", s1));
// 文字列同士なら一致します。
Assert.IsTrue(sb1AsStr.Equals(sb1.ToString()));
// 代入された同一インスタンスとは一致します。
Assert.IsTrue(Object.Equals(sb1, sb1Assigned));

Console.WriteLine(enumerator2.Current); 
 このCurrentは一番目の要素を指すべき
        
 Test
Enumを作るごとにこれをコピペして中身を書き換えるのは大変private static Dictionary&lt;Filter, string&gt; Filters = new Dictionary&lt;Filter, string&gt;{{Filter.All, "all"},{Filter.Closed, "closed"},{Filter.Members, "members"},{Filter.Open, "open"},{Filter.Organization, "organization"},{Filter.Public, "public"},{Filter.Starred, "starred"},};,,,public static Dictionary&lt;T, string&gt; CreateEnumDictionary&lt;T&gt;() where T : Enum{var values = Enum.GetValues(typeof(T));return values.OfType&lt;T&gt;().ToDictionary(key =&gt; key, value =&gt; value.ToString().ToLower());},,,//Enumを作るごとにこれをコピペして中身を書き換えるのは大変
private static Dictionary&lt;Filter, string&gt; Filters = new Dictionary&lt;Filter, string&gt;

            
 {Name,Index}という匿名クラスのリストを作り、Indexに従ってソートする。
// 要素数が10で、値が「あいうえお」の配列を生成する
var array = Enumerable.Repeat("あいうえお",10).ToArray();
// 要素数が10で、値が「あいうえお」のリストを生成する
var list = Enumerable.Repeat("あいうえお",10).ToList();
// 5から始まり、7個の連続した値（5,6,7,8,9,10,11）の配列を生成する。
var array = Enumerable.Range(5, 7).ToArray();
// 5から始まり、7個の連続した値（5,6,7,8,9,10,11）のリストを生成する。
var list = Enumerable.Range(5, 7).ToList();
// 「1番目,2番目,...10番目」という文字列を作成する。
var txt = string.Join(",", Enumerable.Range(1, 10).Select(num =&gt; num.ToString() + "番目"));
// 1番目,2番目,3番目,4番目,5番目,6番目,7番目,8番目,9番目,10番目
,,,

        
保存開始
        
await SendRequest(httpClient, log, "https:httpstat.us200?sleep=11000");
  Console.Write($"{result, 2}"); 
 resultを最低二桁で表示
// 「定義済のint型変数の値をインクリメントする」だけの処理をAction型変数に代入する
var num = 0;
1．delegateキーワードを使った古典的な書き方Action action1 = delegate () { num++; };// 2. var を使った書き方var action2 = new Action(delegate () { num++; });// 3. ラムダ式で書くAction action3 = () =&gt; num++;// 4. var を使った書き方var action4 = new Action(() =&gt; num++);,,,// 例として「int型の引数の値をインクリメントする」だけの処理をAction&lt;int&gt;型変数に代入する// 1．delegateキーワードを使った古典的な書き方Action&lt;int&gt; action5 = delegate (int num) { num++; };// 2. var を使った書き方var action6 = new Action&lt;int&gt;(delegate (int num) { num++; });// 3. ラムダ式で書くAction&lt;int&gt; action7 = num =&gt; num++;// 4. var を使った書き方var action8 = new Action&lt;int&gt;(num =&gt; num++);,,,// 1．delegateキーワードを使った古典的な書き方
Action action1 = delegate () { num++; };
2. var を使った書き方var action2 = new Action(delegate () { num++; });// 3. ラムダ式で書くAction action3 = () =&gt; num++;// 4. var を使った書き方var action4 = new Action(() =&gt; num++);,,,// 例として「int型の引数の値をインクリメントする」だけの処理をAction&lt;int&gt;型変数に代入する// 1．delegateキーワードを使った古典的な書き方Action&lt;int&gt; action5 = delegate (int num) { num++; };// 2. var を使った書き方var action6 = new Action&lt;int&gt;(delegate (int num) { num++; });// 3. ラムダ式で書くAction&lt;int&gt; action7 = num =&gt; num++;// 4. var を使った書き方var action8 = new Action&lt;int&gt;(num =&gt; num++);,,,// 2. var を使った書き方
var action2 = new Action(delegate () { num++; });
// 3. ラムダ式で書く
Action action3 = () =&gt; num++;
// 4. var を使った書き方
var action4 = new Action(() =&gt; num++);
// 例として「int型の引数の値をインクリメントする」だけの処理をAction&lt;int&gt;型変数に代入する

1．delegateキーワードを使った古典的な書き方Action&lt;int&gt; action5 = delegate (int num) { num++; };// 2. var を使った書き方var action6 = new Action&lt;int&gt;(delegate (int num) { num++; });// 3. ラムダ式で書くAction&lt;int&gt; action7 = num =&gt; num++;// 4. var を使った書き方var action8 = new Action&lt;int&gt;(num =&gt; num++);,,,// 1．delegateキーワードを使った古典的な書き方
Action&lt;int&gt; action5 = delegate (int num) { num++; };
2. var を使った書き方var action6 = new Action&lt;int&gt;(delegate (int num) { num++; });// 3. ラムダ式で書くAction&lt;int&gt; action7 = num =&gt; num++;// 4. var を使った書き方var action8 = new Action&lt;int&gt;(num =&gt; num++);,,,// 2. var を使った書き方
var action6 = new Action&lt;int&gt;(delegate (int num) { num++; });
// 3. ラムダ式で書く
Action&lt;int&gt; action7 = num =&gt; num++;
// 4. var を使った書き方
var action8 = new Action&lt;int&gt;(num =&gt; num++);

    
 取得したオブジェクトを格納するリスト
            if (list.Count == 0
つまり値の変化が無かった
        ilgen.Emit(OpCodes.Ret); 
 戻り値とせよ
// 暗号化されたGuest Issuer secretをストレージから読み込む。
ProtectedString secret = LoadEncryptedGuestIssuerSecret();
// GuestIssuerClientのインスタンスを作成する。
var guestIssuer = TeamsAPI.CreateVersion1GuestIssuerClient(secret, "your_guest_issuer_id");
// Guest Userを作成する。
var guest = (await guestIssuer.CreateGuestUserAsync("my-guest-id", "ゲスト太郎")).GetData();
// ゲストユーザ用のTeamsAPIClientインスタンスを作成する(リトライ機能付き)。
var teams = TeamsAPI.CreateVersion1Client(guest, new TeamsRetryHandler(4));
// ゲストユーザからメッセージを投稿する。
var message = (await teams.CreateMessageAsync("space_id_to_post", "こんにちは、私はゲストユーザです！！")).GetData();

            
テーブル名を複数形化せずモデルクラス名をそのまま使う
        
呼び出し　これは好きなタイミングで呼ぶテスト用メソッド群public void Test(string t){Debug.Log("Test Log : " + t);}public void BoolTest(bool b){Debug.Log("Test Log : " + b);}public void VectorTest(Vector3 v){Debug.Log("Test Log : " + v);},,,using System.Collections.Generic;using System.Linq;using System.Reflection;using UnityEditor;using UnityEditorInternal;using UnityEngine;[CanEditMultipleObjects][CustomEditor(typeof(Test))]public class TestEditor : Editor{private ReorderableList RL;private void OnEnable(){//ReorderableList作成var ListProp = serializedObject.FindProperty("MethodList");var test = (TestEditor)target;RL = new ReorderableList(test.MethodList, typeof(SelectMethod));RL.elementHeight = 40;RL.drawHeaderCallback = (rect) =&gt;{EditorGUI.LabelField(rect, "OnTest()");};RL.drawElementCallback = (rect, index, isActive, isFocused) =&gt;{serializedObject.Update();var element = ListProp.GetArrayElementAtIndex(index);var m = test.MethodList[index];if (m != null){var MonoRect = new Rect(rect){height = EditorGUIUtility.singleLineHeight};var MethodRect = new Rect(rect){height = EditorGUIUtility.singleLineHeight,width = rect.width / 3,y = MonoRect.y + EditorGUIUtility.singleLineHeight + 2};var ArgumentRect = new Rect(rect){height = EditorGUIUtility.singleLineHeight,width = (rect.width * 2 / 3) - 4,x = MethodRect.x + MethodRect.width + 2,y = MonoRect.y + EditorGUIUtility.singleLineHeight + 2};EditorGUI.PropertyField(MonoRect, element.FindPropertyRelative("TargetObject"));var methods = CollectMethods(m);if (methods != null){//メソッド名のインデックスを取得(見つからなかったらNoneである0にする)int NameIndex = methods.FindIndex(item =&gt; item == m.CallbackName);NameIndex = NameIndex != -1 ? NameIndex : 0;EditorGUI.LabelField(MethodRect, "Methods");m.CallbackName = methods[EditorGUI.Popup(MethodRect, NameIndex, methods.ToArray())];}if (m.TargetObject){var arg = m.TargetObject.GetType().GetMethods(BindingFlags.Instance | BindingFlags.Public).Where(x =&gt; x.Name == m.CallbackName);if (arg.Count() != 0){var param = arg.First();if (param.GetParameters().Length != 0){param.GetParameters();//フィールド用の描画及びMethodArgumentの初期化をベタ書きif (param.GetParameters()[0].ParameterType == typeof(string)){if (m.MethodArgument == null)m.MethodArgument = "";m.MethodArgument = EditorGUI.TextField(ArgumentRect, (string)m.MethodArgument);}else if (param.GetParameters()[0].ParameterType == typeof(bool)){if (m.MethodArgument == null)m.MethodArgument = false;m.MethodArgument = EditorGUI.Toggle(ArgumentRect, (bool)m.MethodArgument);}else if (param.GetParameters()[0].ParameterType == typeof(int)){if (m.MethodArgument == null)m.MethodArgument = (int)0;m.MethodArgument = EditorGUI.IntField(ArgumentRect, (int)m.MethodArgument);}else if (param.GetParameters()[0].ParameterType == typeof(float)){if (m.MethodArgument == null)m.MethodArgument = 0f;m.MethodArgument = EditorGUI.FloatField(ArgumentRect, (float)m.MethodArgument);}else if (param.GetParameters()[0].ParameterType == typeof(double)){if (m.MethodArgument == null)m.MethodArgument = 0.0;m.MethodArgument = EditorGUI.DoubleField(ArgumentRect, (double)m.MethodArgument);}else if (param.GetParameters()[0].ParameterType == typeof(Vector2)){if (m.MethodArgument == null)m.MethodArgument = new Vector2();m.MethodArgument = EditorGUI.Vector2Field(ArgumentRect, "", (Vector2)m.MethodArgument);}else if (param.GetParameters()[0].ParameterType == typeof(Vector3)){if (m.MethodArgument == null)m.MethodArgument = new Vector3();m.MethodArgument = EditorGUI.Vector3Field(ArgumentRect, "", (Vector3)m.MethodArgument);}else if (param.GetParameters()[0].ParameterType == typeof(Vector4)){if (m.MethodArgument == null)m.MethodArgument = new Vector4();m.MethodArgument = EditorGUI.Vector4Field(ArgumentRect, "", (Vector4)m.MethodArgument);}}}}serializedObject.ApplyModifiedProperties();}EditorGUI.PropertyField(rect, element);};}public override void OnInspectorGUI(){DrawDefaultInspector();serializedObject.Update();RL.DoLayoutList();serializedObject.ApplyModifiedProperties();}//メソッドの取得(SendMessageを使うので引数が1以下かつpublicに限定)List&lt;string&gt; CollectMethods(SelectMethod m){if (m == null || !m.TargetObject){return null;}List&lt;string&gt; result = new List&lt;string&gt;();result.Add("None");var methods = m.TargetObject.GetType().GetMethods(BindingFlags.Instance | BindingFlags.Public).Where(x =&gt; x.DeclaringType == m.TargetObject.GetType()).Where(x =&gt; x.GetParameters().Length &lt;= 1).Select(x =&gt; x.Name).ToArray();result.AddRange(methods);return result;}},,,//テスト用メソッド群
public void Test(string t)
//ReorderableList作成
var ListProp = serializedObject.FindProperty("MethodList");
//メソッド名のインデックスを取得(見つからなかったらNoneである0にする)
int NameIndex = methods.FindIndex(item =&gt; item == m.CallbackName);
if (param.GetParameters()[0].ParameterType == typeof(string)){フィールド用の描画及びMethodArgumentの初期化をベタ書きメソッドの取得(SendMessageを使うので引数が1以下かつpublicに限定)List&lt;string&gt; CollectMethods(SelectMethod m){if (m == null || !m.TargetObject){return null;}List&lt;string&gt; result = new List&lt;string&gt;();result.Add("None");var methods = m.TargetObject.GetType().GetMethods(BindingFlags.Instance | BindingFlags.Public).Where(x =&gt; x.DeclaringType == m.TargetObject.GetType()).Where(x =&gt; x.GetParameters().Length &lt;= 1).Select(x =&gt; x.Name).ToArray();result.AddRange(methods);return result;}},,,//メソッドの取得(SendMessageを使うので引数が1以下かつpublicに限定)
List&lt;string&gt; CollectMethods(SelectMethod m)

    
 優先順位２以下の全ての式AssignableExp.Inner = Identifier | MemberAccessExp | IndexAccessExp | ( '(' + AssignableExp + ')' ); 代入可能式の中身// 関数呼び出し式の中身
FunctionCallExp.Inner = (FunctionCallExp | IndexAccessExp | AssignableExp) + '(' + Exp._0Max(',') + ')';
// インデックスアクセス式の中身
IndexAccessExp.Inner = (FunctionCallExp | IndexAccessExp | AssignableExp) + '[' + Exp._1Max(',') + ']';
MemberAccessExp.Inner = Priority1Exp + '.' + Identifier; メンバアクセス式の中身// 前置マイナス式の中身
PreMinusExp.Inner = '-' + (Priority1Exp | PreDecrementExp | PreIncrementExp | PrePlusExp);
// 前置プラス式の中身
PrePlusExp.Inner = '+' + (Priority1Exp | PreDecrementExp | PreIncrementExp | PreMinusExp);
// 乗除算式の中身
MulDivExp.Inner =  PriorityAbove3Exp + ('*'._() | '/') + PriorityAbove2Exp;
// 加減算式の中身
AddSubExp.Inner =  PriorityAbove4Exp + ('+'._() | '-') + PriorityAbove3Exp;

                        
 RGBだけでなく、アルファ値もセットする。
            
 Register any platform specific implementations
    case string str: 
 when obj is stringwhile(statement){ while templatedo while templatedo{piyopiyo} while(statement);// exint i = 6;while(i&lt;6){Console.WriteLine($"number:{i}");},,,// templatefor(initializer; condition; iterator){hogehoge}// ex.for(int i=6; i&lt;6; i++){Console.Writeline($"number:{i});},,,for(initializer; condition; iterator){ templatefor(int i=6; i&lt;6; i++){ ex.
    
 最大定義値を超える場合も数値は保持されます。
    
最後の一つで条件分岐
        Thread.Sleep(100);
Task.Delay(100);Delayが使えればDelayが良いな･･･。
// （省略）
)
(省略)services.AddSingleton(typeof(IStartup), sp =&gt;{var hostingEnvironment = sp.GetRequiredService&lt;IHostingEnvironment&gt;();return new ConventionBasedStartup(StartupLoader.LoadMethods(sp, startupType, hostingEnvironment.EnvironmentName));});// (省略)});// (省略)
services.AddSingleton(typeof(IStartup), sp =&gt;
// (省略)
});
// （省略）
services.AddSingleton&lt;IHostingEnvironment&gt;(_hostingEnvironment);
// （省略）

// （省略）
,,,
foreach (var value in urls.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries)){ （省略）foreach (var component in _components.Reverse()){ （省略）
        
int[] x = Console.ReadLine().Split(' ').Select(int.Parse).ToArray();でもよい
    driver.FindElement(By.XPath("
input[@value='登録']")).Submit();
            
 リストに格納して実行することもできます
        
 (x,y)から左斜め下(45度)の位置を列挙する　(x,y)含む
    
UserControlはDependencyObjectを継承している
nameof(data) 
 "data"がゲットできる
        
こっちのほうがマシ
   
 int 型をボックス化しているので long 型に戻すことはできません。（InvalidCastException が発生）// 実行されるのは Object.Equals です。
 字面だけ見ると true を期待してしまいそう(?)です。

        
4f後にCubeが消える
Math.Abs(x-y) &lt; EPSILON 
 true
                
 42 BE BA FE CA
    
 ほげほげ
    
 viewPosのx座標とy座標が0以上1以下かつzが0以上だったらみえる
                WriteVal(st, 2, 8);              
 wBitsPerSample
int[][] data = new int[3][]; 
3つのary格納
    
 foreach (var item in document.QuerySelectorAll("h1.thumb"))
    
 単純にダイアログフォームで表示します。
    
 ここに処理を追加
  
 ~~~~~
                Velocity.y = JumpPower;
Velocity.yをJumpPowerにする
        
依存関係プロパティを定義する
var morake = "hello"; 
 as string
            
String.SplitメソッドとはStringクラスメソッドの一つで、文字列を指定した区切り文字で分割し配列に格納する場合に使う
        
 TProperty が object の場合、ボックス化によって UnaryExpression となる。// 使用例
string propertyName = GetPropertyName((Sample s) =&gt; s.PublicProperty);

    
args[0] = "a" [1] = "b" [2] = "c" [3] = "d" 
    
戻り値がvoidじゃない為、エラーになる
            
現在プロセス終了
 
(3)while (e.MoveNext())(2)
        
 適当なデータです
                
VerticalOptions = LayoutOptions.FillAndExpand,縦方向に余白を最大限に利用する
        
 (x,y)から左斜め下(45度)の位置を列挙する　(x,y)含む
    
 インスタンスを非アクティブ化時に保持するか？This command will be executed when the selection of the ListBox in the view changes.SelectedCommand = new DelegateCommand&lt;object[]&gt;(x =&gt;{if (x != null &amp;&amp; x.Count() &gt; 0)SelectedItemText = x.FirstOrDefault().ToString();});,,,
                
 式を解析して結果を出力
    
iniにフォーム位置、サイズ保存
                RedirectUri = redirectUri,  
オプションに追加することで応答URLを指定できる
    
 Start is called before the first frame update
                
 設定上の名称を指定して CallInvoker を生成します。
        
 1000ミリ秒のSleepがあるので確実にタイムアウトする
            
ロード完了後でないとハンドラを登録できない
new ObservableClass(1).Goshujin = g;
 これでListViewが更新！
        
以下省略
await Task.Delay(1000);
1秒待つ//静止
Tello.controllerState.setAixs(0, 0, 0, 0);

        
 コンストラクタの引数であらかじめCapacityを設定できる。
// 新規IDを生成
NUlid.Ulid id = NUlid.Ulid.NewUlid();
for (int i=0; i&lt; 10; ++i){ 10個の値を生成
                
 式を解析。この中で結果も出力される。
//　　　　JSONとして出力する（構造化）
.AddLogging(configure =&gt; configure.AddJsonConsole())
LogTemplateに@を付けると、プロパティーの構造をそのままログに出してくれるlogger.LogError ("Hello {@aaa}", new Hoge { Id = 0, Name = "あいうえお"});public class Hoge{public int Id {get;set;}public string Name {get;set;}},,,// LogTemplateに@を付けると、プロパティーの構造をそのままログに出してくれる
logger.LogError ("Hello {@aaa}", new Hoge { Id = 0, Name = "あいうえお"});

            
複合処理 ============================================================================
        
 データ数で割ったものに倍率をかけて音量とする
    
public RectTransform RectTransform =&gt; _cachedRectTransform != null ? _cachedRectTransform : (_cachedRectTransform = transform as RectTransform); これは辞めて
[[0, 1], [2, 3], [4, 5]] みたいな感じでまとめられます。IEnumerable&lt;IList&lt;int&gt;&gt; buffered = new List&lt;int&gt; { 0, 1, 2, 3, 4, 5 }.Buffer(count: 2);,,,// [[0, 1], [2, 3], [4, 5], [6]] みたいな感じでまとめられます。IEnumerable&lt;IList&lt;int&gt;&gt; buffered = new List&lt;int&gt; { 0, 1, 2, 3, 4, 5, 6 }.Buffer(count: 2);,,,// [[0, 1, 2], [1, 2, 3], [2, 3, 4], [3, 4], [4]] みたいな感じでまとめられます。IEnumerable&lt;IList&lt;int&gt;&gt; buffered = new List&lt;int&gt; { 0, 1, 2, 3, 4 }.Buffer(count: 3, skip: 1);,,,// [[0, 1], [3, 4], [6, 7]] みたいな感じでまとめられます。IEnumerable&lt;IList&lt;int&gt;&gt; buffered = new List&lt;int&gt; { 0, 1, 2, 3, 4, 5, 6, 7 }.Buffer(count: 2, skip: 3);,,,public static IEnumerable&lt;TSource&gt; Concat&lt;TSource&gt;(this IEnumerable&lt;IEnumerable&lt;TSource&gt;&gt; sources),,,List&lt;List&lt;Monster&gt;&gt; listOfMonsterList = LoadListOfMonsterList();IEnumerable&lt;&lt;Monster&gt; monsters = listOfMonsterList.Concat();,,,// 渡した要素を何回でも繰り返すIEnumerable&lt;T&gt;をつくるpublic static IEnumerable&lt;TResult&gt; Repeat&lt;TResult&gt;(TResult value)// IEnumerable&lt;T&gt;の拡張関数で、何回でも要素を繰り返すIEnumerable&lt;T&gt;をつくるpublic static IEnumerable&lt;TSource&gt; Repeat&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source)// IEnumerable&lt;T&gt;の拡張関数で、指定した回数繰り返すIEnumerable&lt;T&gt;をつくるpublic static IEnumerable&lt;TSource&gt; Repeat&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, int count),,,public static IEnumerable&lt;TSource&gt; StartWith&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, params TSource[] values),,,// [[0, 1], [2, 3], [4, 5]] みたいな感じでまとめられます。
IEnumerable&lt;IList&lt;int&gt;&gt; buffered = new List&lt;int&gt; { 0, 1, 2, 3, 4, 5 }.Buffer(count: 2);
[[0, 1], [2, 3], [4, 5], [6]] みたいな感じでまとめられます。IEnumerable&lt;IList&lt;int&gt;&gt; buffered = new List&lt;int&gt; { 0, 1, 2, 3, 4, 5, 6 }.Buffer(count: 2);,,,// [[0, 1, 2], [1, 2, 3], [2, 3, 4], [3, 4], [4]] みたいな感じでまとめられます。IEnumerable&lt;IList&lt;int&gt;&gt; buffered = new List&lt;int&gt; { 0, 1, 2, 3, 4 }.Buffer(count: 3, skip: 1);,,,// [[0, 1], [3, 4], [6, 7]] みたいな感じでまとめられます。IEnumerable&lt;IList&lt;int&gt;&gt; buffered = new List&lt;int&gt; { 0, 1, 2, 3, 4, 5, 6, 7 }.Buffer(count: 2, skip: 3);,,,public static IEnumerable&lt;TSource&gt; Concat&lt;TSource&gt;(this IEnumerable&lt;IEnumerable&lt;TSource&gt;&gt; sources),,,List&lt;List&lt;Monster&gt;&gt; listOfMonsterList = LoadListOfMonsterList();IEnumerable&lt;&lt;Monster&gt; monsters = listOfMonsterList.Concat();,,,// 渡した要素を何回でも繰り返すIEnumerable&lt;T&gt;をつくるpublic static IEnumerable&lt;TResult&gt; Repeat&lt;TResult&gt;(TResult value)// IEnumerable&lt;T&gt;の拡張関数で、何回でも要素を繰り返すIEnumerable&lt;T&gt;をつくるpublic static IEnumerable&lt;TSource&gt; Repeat&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source)// IEnumerable&lt;T&gt;の拡張関数で、指定した回数繰り返すIEnumerable&lt;T&gt;をつくるpublic static IEnumerable&lt;TSource&gt; Repeat&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, int count),,,public static IEnumerable&lt;TSource&gt; StartWith&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, params TSource[] values),,,// [[0, 1], [2, 3], [4, 5], [6]] みたいな感じでまとめられます。
IEnumerable&lt;IList&lt;int&gt;&gt; buffered = new List&lt;int&gt; { 0, 1, 2, 3, 4, 5, 6 }.Buffer(count: 2);
[[0, 1, 2], [1, 2, 3], [2, 3, 4], [3, 4], [4]] みたいな感じでまとめられます。IEnumerable&lt;IList&lt;int&gt;&gt; buffered = new List&lt;int&gt; { 0, 1, 2, 3, 4 }.Buffer(count: 3, skip: 1);,,,// [[0, 1], [3, 4], [6, 7]] みたいな感じでまとめられます。IEnumerable&lt;IList&lt;int&gt;&gt; buffered = new List&lt;int&gt; { 0, 1, 2, 3, 4, 5, 6, 7 }.Buffer(count: 2, skip: 3);,,,public static IEnumerable&lt;TSource&gt; Concat&lt;TSource&gt;(this IEnumerable&lt;IEnumerable&lt;TSource&gt;&gt; sources),,,List&lt;List&lt;Monster&gt;&gt; listOfMonsterList = LoadListOfMonsterList();IEnumerable&lt;&lt;Monster&gt; monsters = listOfMonsterList.Concat();,,,// 渡した要素を何回でも繰り返すIEnumerable&lt;T&gt;をつくるpublic static IEnumerable&lt;TResult&gt; Repeat&lt;TResult&gt;(TResult value)// IEnumerable&lt;T&gt;の拡張関数で、何回でも要素を繰り返すIEnumerable&lt;T&gt;をつくるpublic static IEnumerable&lt;TSource&gt; Repeat&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source)// IEnumerable&lt;T&gt;の拡張関数で、指定した回数繰り返すIEnumerable&lt;T&gt;をつくるpublic static IEnumerable&lt;TSource&gt; Repeat&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, int count),,,public static IEnumerable&lt;TSource&gt; StartWith&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, params TSource[] values),,,// [[0, 1, 2], [1, 2, 3], [2, 3, 4], [3, 4], [4]] みたいな感じでまとめられます。
IEnumerable&lt;IList&lt;int&gt;&gt; buffered = new List&lt;int&gt; { 0, 1, 2, 3, 4 }.Buffer(count: 3, skip: 1);
[[0, 1], [3, 4], [6, 7]] みたいな感じでまとめられます。IEnumerable&lt;IList&lt;int&gt;&gt; buffered = new List&lt;int&gt; { 0, 1, 2, 3, 4, 5, 6, 7 }.Buffer(count: 2, skip: 3);,,,public static IEnumerable&lt;TSource&gt; Concat&lt;TSource&gt;(this IEnumerable&lt;IEnumerable&lt;TSource&gt;&gt; sources),,,List&lt;List&lt;Monster&gt;&gt; listOfMonsterList = LoadListOfMonsterList();IEnumerable&lt;&lt;Monster&gt; monsters = listOfMonsterList.Concat();,,,// 渡した要素を何回でも繰り返すIEnumerable&lt;T&gt;をつくるpublic static IEnumerable&lt;TResult&gt; Repeat&lt;TResult&gt;(TResult value)// IEnumerable&lt;T&gt;の拡張関数で、何回でも要素を繰り返すIEnumerable&lt;T&gt;をつくるpublic static IEnumerable&lt;TSource&gt; Repeat&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source)// IEnumerable&lt;T&gt;の拡張関数で、指定した回数繰り返すIEnumerable&lt;T&gt;をつくるpublic static IEnumerable&lt;TSource&gt; Repeat&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, int count),,,public static IEnumerable&lt;TSource&gt; StartWith&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, params TSource[] values),,,// [[0, 1], [3, 4], [6, 7]] みたいな感じでまとめられます。
IEnumerable&lt;IList&lt;int&gt;&gt; buffered = new List&lt;int&gt; { 0, 1, 2, 3, 4, 5, 6, 7 }.Buffer(count: 2, skip: 3);
// 渡した要素を何回でも繰り返すIEnumerable&lt;T&gt;をつくる
public static IEnumerable&lt;TResult&gt; Repeat&lt;TResult&gt;(TResult value)
// IEnumerable&lt;T&gt;の拡張関数で、何回でも要素を繰り返すIEnumerable&lt;T&gt;をつくる
public static IEnumerable&lt;TSource&gt; Repeat&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source)
// IEnumerable&lt;T&gt;の拡張関数で、指定した回数繰り返すIEnumerable&lt;T&gt;をつくる
public static IEnumerable&lt;TSource&gt; Repeat&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, int count)

            
ちょっと待つ
        
 状況変化を知らせるために購読者に通知する
            
 除外エンティティ
            
 フックを解除
    
 JSON で返してみるバインドするクラスを用意public class MySubOptions {public string SubOption1 { get; set; }public int SubOption2 { get; set; }public Guid SubOption3 { get; set; }},,,// ここで自動的に appsettings.json が読み込まれるpublic static IWebHostBuilder CreateWebHostBuilder(string[] args) =&gt;WebHost.CreateDefaultBuilder(args).UseStartup&lt;Startup&gt;();,,,// バインドするクラスを用意
public class MySubOptions {
// ここで自動的に appsettings.json が読み込まれる
public static IWebHostBuilder CreateWebHostBuilder(string[] args) =&gt;

    Console.WriteLine(str); 
 hoge// C#7.0まではコンパイルエラー
,,,

                Value = target.ID == "PDF" ? $"https:
dl.acm.org{match.Groups[1].Value}" : match.Groups[1].Value
    
 DataType3 を渡せる (オーバーロード)
// 認証用公開鍵GETする
 戻り値=DER形式の公開鍵
// ファイルの電子署名を作成する
 第1引数=PIN
// 第2引数=電子署名する対象のファイル(パス＆ファイル）
 戻り値=電子署名
// 電子署名を検証する
 第1引数=DER形式の公開鍵
// 第2引数=電子署名
 第3引数=電子署名する対象のファイル(パス＆ファイル）
bool isVerifySuccess = JPKIReaderLib.Verify.VerifySignature(authPubKey , sig , file) 戻り値=true/false
// ここで取れるpubkey_pkcs1はPKCS#1形式の公開鍵
 先頭に
// を付加するとOpenSSLで取り扱い可能なPKCS#8になる


    
 BGMは一つづつ鳴るが、SEは複数同時に鳴ることがある
ConsoleWriteIEnumerable("OrderedSet:", os); 
 0, 1, 2, 3, 4
Creating a list of numbersList&lt;int&gt; numbers = new List&lt;int&gt; { 1, 2, 3, 4 };// Trying to prepend any value of the same typenumbers.Prepend(0);// It doesn't work because the original list has not been changedConsole.WriteLine(string.Join(", ", numbers));// It works now because we are using a changed copy of the original listConsole.WriteLine(string.Join(", ", numbers.Prepend(0)));// If you prefer, you can create a new list explicitlyList&lt;int&gt; newNumbers = numbers.Prepend(0).ToList();// And then write to the console outputConsole.WriteLine(string.Join(", ", newNumbers));// This code produces the following output://// 1, 2, 3, 4// 0, 1, 2, 3, 4// 0, 1, 2, 3, 4,,,// Creating a list of numbersList&lt;int&gt; numbers = new List&lt;int&gt; { 1, 2, 3, 4 };// Trying to append any value of the same typenumbers.Append(5);// It doesn't work because the original list has not been changedConsole.WriteLine(string.Join(", ", numbers));// It works now because we are using a changed copy of the original listConsole.WriteLine(string.Join(", ", numbers.Append(5)));// If you prefer, you can create a new list explicitlyList&lt;int&gt; newNumbers = numbers.Append(5).ToList();// And then write to the console outputConsole.WriteLine(string.Join(", ", newNumbers));// This code produces the following output://// 1, 2, 3, 4// 1, 2, 3, 4, 5// 1, 2, 3, 4, 5,,,public static IEnumerable&lt;TSource&gt; Append&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, TSource element);public static IEnumerable&lt;TSource&gt; Prepend&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, TSource element);,,,public static HashSet&lt;TSource&gt; ToHashSet&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source);public static HashSet&lt;TSource&gt; ToHashSet&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, IEqualityComparer&lt;TSource&gt; comparer);,,,public static IEnumerable&lt;TSource&gt; SkipLast&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, int count);public static IEnumerable&lt;TSource&gt; TakeLast&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, int count);,,,public static IEnumerable&lt;TResult&gt; Zip&lt;TFirst,TSecond,TResult&gt; (this IEnumerable&lt;TFirst&gt; first, IEnumerable&lt;TSecond&gt; second, Func&lt;TFirst,TSecond,TResult&gt; resultSelector);,,,foreach(var element in firstSequence.Zip(secondSequence, (first, second) =&gt; new {first, second})){var first = element.first;var second = element.second;Console.WriteLine(first + " " + second);}Creating a list of numbersList&lt;int&gt; numbers = new List&lt;int&gt; { 1, 2, 3, 4 };// Trying to append any value of the same typenumbers.Append(5);// It doesn't work because the original list has not been changedConsole.WriteLine(string.Join(", ", numbers));// It works now because we are using a changed copy of the original listConsole.WriteLine(string.Join(", ", numbers.Append(5)));// If you prefer, you can create a new list explicitlyList&lt;int&gt; newNumbers = numbers.Append(5).ToList();// And then write to the console outputConsole.WriteLine(string.Join(", ", newNumbers));// This code produces the following output://// 1, 2, 3, 4// 1, 2, 3, 4, 5// 1, 2, 3, 4, 5,,,public static IEnumerable&lt;TSource&gt; Append&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, TSource element);public static IEnumerable&lt;TSource&gt; Prepend&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, TSource element);,,,public static HashSet&lt;TSource&gt; ToHashSet&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source);public static HashSet&lt;TSource&gt; ToHashSet&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, IEqualityComparer&lt;TSource&gt; comparer);,,,public static IEnumerable&lt;TSource&gt; SkipLast&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, int count);public static IEnumerable&lt;TSource&gt; TakeLast&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, int count);,,,public static IEnumerable&lt;TResult&gt; Zip&lt;TFirst,TSecond,TResult&gt; (this IEnumerable&lt;TFirst&gt; first, IEnumerable&lt;TSecond&gt; second, Func&lt;TFirst,TSecond,TResult&gt; resultSelector);,,,foreach(var element in firstSequence.Zip(secondSequence, (first, second) =&gt; new {first, second})){var first = element.first;var second = element.second;Console.WriteLine(first + " " + second);}
                
 INotifyPropertyChanged による変更通知で画面の表示が自動で変わる。
        ilgen.Emit(OpCodes.Ret); 
 戻り値とせよ
        
 なんか処理
  
・・・//コマンドとメソッドの組み合わせをディクショナリに格納する
commandDic.Add("commandA",commandAExec);
//必要な組み合わせを追加

//argsに引数を設定する
・・・
if (commandDic.ContainsKey(commandString)){CommandDelegate command = commandDic[commandString];キーが存在するかどうかは先にチェックする
Dictionary&lt;int, string&gt; Table = new();  
 右辺を省略できる// 今までは、こう書いていた。
Dictionary&lt;int, string&gt; Table = new Dictionary&lt;int, string&gt;();
// もしくは、varが使える場面では、
var Table = new Dictionary&lt;int, string&gt;();
// C#8.0では'種類のパターン'が使えないので、次のように書く必要があった。
  case SketchLine _:

// 暗黙的な変換
huga = hoge;
// 明示的な変換
hoge = (int)huga;

        
 書き込み不可でエラー
    class Sub : Expr { 
 式-式を表す
    
 処理
    DataContext = this; 
 Binding用
    
Linux等(Raspbian Stretchで動作確認)//シリアルポートOpen
skStackClient.OpenAsync(devicePort, 115200, 8, Parity.None, StopBits.One).Wait();
if(skStackClient.ScanAndJoinAsync(BRouteId, BRoutePw).Result){スキャン＆Join
    
 Update is called once per frame
        
 作成したインスタンスに引数を渡しつつ呼び出す
            
 処理を実装
            
 テストメソッドのスコープを外れたタイミングで Dispose して Host を解放する
            
   float using (value - Mean)Scale.
    
 ただ単に非同期で実行したいだけなら、Task.Run を使えばよいと思います。
    
 プロパティ
            
 ここで改行を置き換え無いと改行がDebug.LogやuGUI.textで反映されないstringの拡張クラスpublic static class StringExtensions{public static bool IsNullOrEmpty(this string source){if(source == null || source.Length &lt;= 0 || source == "null" || source == "Null" || source == "NULL"){return true;}return false;}},,,// stringの拡張クラス
public static class StringExtensions

        
IListではないが、検索順序操作のためにIList風プロパティとメソッドも実装する
GetComponent&lt;Rigidbody&gt;().NullCast()?.AddForce(force, mode); 
 推論が効くはず
        
IEnumeratorを返す関数を引数に置くことでCoroutineが動く。
    
以下はApplicationCommands.Newにバインドする例
            
 Delegate
                
同じグループのScrollViewerにスクロール位置を反映
        
なんかいろいろやる
            
 右斜め上に移動
                
結果を出力
      
 適当なウェイトかける
// スタックを用意
var procStack = new List&lt;Action&gt;();
ラムダ式で任意の処理をスタックするprocStack.Add(() =&gt; { Console.WriteLine("aaa"); });procStack.Add(() =&gt; { Console.WriteLine("bbb"); });procStack.Add(() =&gt; { Console.WriteLine("ccc"); });// 任意の順番で呼び出すprocStack[2]();procStack[0]();procStack[1]();,,,List&lt;Action&gt; actions = new List&lt;Action&gt;();int sum = 0;// 処理を溜めるfor (int i = 0; i &lt; 10000; ++i)actions.Add(() =&gt; { sum += i; });// 逐次実行actions.ForEach(action =&gt; action());Console.WriteLine(sum);,,,using System.Threading.Tasks;,,,List&lt;Action&gt; actions = new List&lt;Action&gt;();int sum = 0;// 処理を溜めるfor (int i = 0; i &lt; 10000; ++i)actions.Add(() =&gt; { sum += i; });// 並列実行Parallel.ForEach(actions, action =&gt; action());Console.WriteLine(sum);,,,// ラムダ式で任意の処理をスタックする
procStack.Add(() =&gt; { Console.WriteLine("aaa"); });
// 任意の順番で呼び出す
procStack[2]();
for (int i = 0; i &lt; 10000; ++i)actions.Add(() =&gt; { sum += i; }); 処理を溜める// 逐次実行
actions.ForEach(action =&gt; action());
for (int i = 0; i &lt; 10000; ++i)actions.Add(() =&gt; { sum += i; }); 処理を溜める// 並列実行
Parallel.ForEach(actions, action =&gt; action());

    NativeMethods.WH_KEYBOARD_LL, this.KeyboardProc, 
 ←これ
            
例)p =&gt; null != p.Name &amp;&amp; p.Name.Contains(keyword)の形式を作成
        
炎を手の位置に移動
        
遅らせたい処理
    
表示させたい文字列をDescription属性に指定する
            
ViewModelがインターフェイスを実装していたらメソッドを実行する
    
 Enterキー押下時の処理を記述する。KeyboardHandleクラスpublic class KeyboardHandler : IKeyboardHandler{private frmMain _frm;public KeyboardHandler(frmMain frm){_frm = frm;}public bool OnKeyEvent(IWebBrowser browserControl, IBrowser browser, KeyType type, int windowsKeyCode, int nativeKeyCode, CefEventFlags modifiers, bool isSystemKey){return false;}public bool OnPreKeyEvent(IWebBrowser browserControl, IBrowser browser, KeyType type, int windowsKeyCode, int nativeKeyCode, CefEventFlags modifiers, bool isSystemKey, ref bool isKeyboardShortcut){_frm.OnMyPreviewKeyDown(windowsKeyCode, modifiers);return false;}},,,// KeyboardHandleクラス
public class KeyboardHandler : IKeyboardHandler

  
ループ内容//私の名前はhogeです

私の名前は"hoge"です▼「{}」のエスケープ処理$"私の名前は{{{Name}}}です"//私の名前は{hoge}です,,,//私の名前は"hoge"です

//私の名前は{hoge}です


                        
 ドラッグ処理
            var assetPath = AssetDatabase.GetAssetPath(obj);![SpriteAtlasInspector.PNG](https:
qiita-image-store.s3.amazonaws.com016088daacc87f-3ef1-fb1c-7495-804062243688.png)
    
WinVerifyTrust cannot work when "" exists in filename
// 整数値
Matcher Number = '0'.To('9');
// 除算
Matcher DivExp = Number + '/' + Number;
// 整数値
Matcher Number = '0'.To('9');
// 「除算」のマッチャーを作る。(但し中身は空っぽ)
RecursionMatcher DivExp = new RecursionMatcher();
// 「除算」の中身を設定する。
DivExp.Inner = ((Number | DivExp) + '/' + Number);
// 整数値
Matcher Number = '0'.To('9');
// 「除算」のマッチャーを作る。(但し中身は空っぽ)
RecursionMatcher DivExp = new RecursionMatcher();
// 「除算」の中身を設定する。
DivExp.Inner = ((Number | DivExp) + '/' + Number);
// 「減算」のマッチャーを作る。(但し中身は空っぽ)
RecursionMatcher SubExp = new RecursionMatcher();
// 「減算」の中身を設定する。
SubExp.Inner = ((Number | DivExp | SubExp) + '-' + (Number | DivExp));
// 整数値
Matcher Number = '0'.To('9');
// 「除算」のマッチャーを作る。(但し中身は空っぽ)
RecursionMatcher DivExp = new RecursionMatcher();
// 「除算」の中身を設定する。
DivExp.Inner = ((Number | DivExp) + '/' + Number);
// 「減算」のマッチャーを作る。(但し中身は空っぽ)
RecursionMatcher SubExp = new RecursionMatcher();
// 「減算」の中身を設定する。
SubExp.Inner = ((Number | DivExp | SubExp) + '-' + (Number | DivExp));
RecursionMatcher LShiftExp = new RecursionMatcher(); 「左シフト演算」のマッチャーを作る。(但し中身は空っぽ)LShiftExp.Inner = ((Number | DivExp | SubExp | LShiftExp) + "&lt;&lt;" + (Number | DivExp | SubExp));,,, 「左シフト演算」の中身を設定する。
            Test("
\"''\"\"\"'''\"'''", "-");
        
 Harvestへ送信
if (!File.Exists(fname)){ ファイルの存在チェック// ファイルを展開
/** 中略 **/
// 解凍したフォルダから画像ファイルを取り出す
string mediaDir = unzipDir + "/" + type + "/media";
// zipファイルと解凍したフォルダ削除
Directory.Delete(unzipDir, true);

var myClass2 = TinyhandSerializer.Deserialize&lt;MyClass&gt;(b, TinyhandSerializerOptions.Standard.WithCompression(TinyhandCompression.Lz4)); 
 Same as TinyhandSerializerOptions.Lz4
        
 VRMSprintBoneを登録する
    vh.AddUIVertexTriangleStream(vertices); 
 変更を加えたメッシュを戻す
        
 ステートマシンにミスイベントを送る
            
 結果返却
        
var cutPlane = new Plane (Vector3.Cross(transform.forward.normalized, prePos - transform.position).normalized, transform.position);
        
 初期化後の処理
    services.AddProgressiveWebApp(); 
 ←これを追加
            
 specifying the Swagger JSON endpoint.
            
ラベルに表示
    
 DBSimpleでマッピング
            
 ADDED
            
 再生開始時はStopped=falseで登録
        
 サイズが大きければ元のサイズまで徐々に戻す
    if (parent == null) 
 戻る遷移の場合は parent が null
                
 Heavy process
            Debug.LogError (string.Format ("Fail Whale!\n{0}", www.error)); 
エラーを表示
    
 出力側は圧縮しないのでbaseStreamそのままを引数に与える
            
 Bのメンバを更新する為ちゃんと実行しておきます.
    
 PostgreSqlConfig クラスのインスタンスを生成
        
 7：青７　999     （1000分の1）//            else if (lottery &gt;= 770 &amp;&amp; lottery &lt;= 894) return 1;//            else if (lottery &gt;= 895 &amp;&amp; lottery &lt;= 944) return 2;            if (lottery &gt;= 0 &amp;&amp; lottery &lt;= 769) return 0;//            else if (lottery &gt;= 895 &amp;&amp; lottery &lt;= 944) return 2;//            else if (lottery &gt;= 945 &amp;&amp; lottery &lt;= 984) return 3;            else if (lottery &gt;= 770 &amp;&amp; lottery &lt;= 894) return 1;//            else if (lottery &gt;= 945 &amp;&amp; lottery &lt;= 984) return 3;//            else if (lottery &gt;= 985 &amp;&amp; lottery &lt;= 992) return 4;            else if (lottery &gt;= 895 &amp;&amp; lottery &lt;= 944) return 2;//            else if (lottery &gt;= 985 &amp;&amp; lottery &lt;= 992) return 4;//            else if (lottery &gt;= 993 &amp;&amp; lottery &lt;= 996) return 5;            else if (lottery &gt;= 945 &amp;&amp; lottery &lt;= 984) return 3;//            else if (lottery &gt;= 993 &amp;&amp; lottery &lt;= 996) return 5;//            else if (lottery &gt;= 997 &amp;&amp; lottery &lt;= 998) return 6;            else if (lottery &gt;= 985 &amp;&amp; lottery &lt;= 992) return 4;//            else if (lottery &gt;= 997 &amp;&amp; lottery &lt;= 998) return 6;//            else if (lottery &lt;= 999) return 7;            else if (lottery &gt;= 993 &amp;&amp; lottery &lt;= 996) return 5;//            else if (lottery &lt;= 999) return 7;if      (lottery &gt;=   0 &amp;&amp; lottery &lt;= 249) return 1;            else if (lottery &gt;= 997 &amp;&amp; lottery &lt;= 998) return 6;if      (lottery &gt;=   0 &amp;&amp; lottery &lt;= 249) return 1;else if (lottery &gt;= 250 &amp;&amp; lottery &lt;= 499) return 5;            else if (lottery &lt;= 999) return 7;
            return isSuccess.ToString();                                                        
 ログインの成否 (成功="True" or 失敗="False")
    
 対象が動作するバージョン
            Console.ReadKey();
コンソールが閉じないように。
    
 Start is called before the first frame update
Observable.
*オペレータ*.Subscribe(したい処理);//偶数のときだけ処理をする
Observable.Range(0,10)
//10倍にする（処理の中で変化させた値を使用できる）
Observable.Range(0,10)
//入力

//登録
var s = new Subject&lt;nt&gt;();
//発火
s.OnNext();
//出力
OnNext
//5秒後に１秒間隔で値が発行される
var t = Observable.Timer(TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(1));

                
 so before we get to the next spawner we have to reinject them  
                
 エラー
    
 41行 → 7行
      
Move sphere straight
    
動画情報取得できない場合はnullを返す
    
コマンド受信時はわざとエラーを返すことで、VRC_Panoramaが再度接続してくるようにする。
//(中略)

//(中略)

// 数字１文字
Matcher Numeric = '0'.To('9');
// 大文字１文字
Matcher UpperCaseAlphabet = 'A'.To('Z');
// 小文字１文字
Matcher LowerCaseAlphabet = 'a'.To('z');
// 数字か大文字か小文字１文字
Matcher WordChar = Numeric | UpperCaseAlphabet | LowerCaseAlphabet ;
//(中略)

// マイナス記号
Matcher Minus = '-'._();
// 数字
Matcher Numeric = '0'.To('9');
// 整数値
Matcher IntegerValue = '0' | (Minus._01() + '1'.To('9') + Numeric._1Max());
// ゼロで始まっても良い整数値
Matcher Numerics = Numeric._1Max();
// 小数部
Matcher RealPart = '.' + Numerics;
// 正負の符号
Matcher Sign = Minus | '+';
// 指数部
Matcher ExponentPart = ('e'._() | 'E') + Sign._01() + Numerics;
// 実数値
Matcher RealNumber = IntegerValue + RealPart._01() + ExponentPart._01();
// 数字１文字
Matcher Numeric = '0'.To('9');
// アルファベット１文字
Matcher Alphabet = 'A'.To('Z') | 'a'.To('z');
Matcher Identifier = (Alphabet | '_') + (Alphabet | '_' | Numeric)._0Max();,,, 識別子
            
 ステートが遷移中でない場合、Kickフラグをリセットする（ループしないようにする）
Mainという名前空間にHelloクラスが属しているnamespace Main{public class Hello{public static void Main(){Console.WriteLine("hello world!");}}},,,// Mainという名前空間にHelloクラスが属している
namespace Main{

            
 複素数形式の波形データの絶対値を返す
            int C_num = B_C_request[B_num]; 
B_numからいらいを受けた人
            string url = "http:
localhost:5000bikes" + id + "";
                  
 Debug.LogWarning(message);
Console.WriteLine($"{a[i1]}, {a[i2]}"); 
 "3, 6"
Action&lt;in DateTime&gt; action; 
 コンパイルエラーになる
            
IDamagable は AddDamage の処理が必須
            public byte d; 
1byte
                
 結果を通知
            anim.SetFloat("speed", v);                            
 Animator側で設定している"Speed"パラメタにvを渡す
                
 レイと平面が交差時
        
 numの数値が1～7の範囲かどうか出力結果は 1,7Console.WriteLine($"{num[fromBegin]}, {num[fromEnd]}");,,,// 出力結果は 1,7
Console.WriteLine($"{num[fromBegin]}, {num[fromEnd]}");

        
 プロセスの開始
                    note.eventTime = (int)(timeDifference * tempTempoList[j].tick) + tempoList[j].eventTime;   
 計算後のテンポ変更イベント時間+そこからの自分の時間
    0,                 
 idThread
        
 略
        
 Let's チャレンジ！！
var obj = GetNullOrString(); 
半々の確率でnullか実体のあるstringを返してくれるメソッド//nullではない場合if内部を通る
}
//但しスコープはif文限りのため外からはstr変数を使えないことに注意}null時には型無し = string型では無いためif内部を通らない//但しスコープはif文限りのため外からはstr変数を使えないことに注意
}

var f = new int[H, W]; 
 フィールド
            
 ということで、コードの雰囲気とは若干タイミングがずれている
            
 Registry64をBaseKeyとして開いておく
                .UseUrls("http:
*:5000")   &lt;- ここの行を追加
            
工事終了時間
    
 Update is called once per frame
        
入室してなかったら何もしない
            
 CatもDogもWalkを実装済み。
                     "  categories are" + categories[ki]);  
カテゴリを適当に表示する//モデルデータの破棄
model_data.Dispose();
-------------------------------------------------static unsafe int[] ExtractTopKIndexList(float* first, float* last, int k){var q = new List&lt;Tuple&lt;float, int&gt;&gt;();for (var i = 0; first != last; first++, i++){q.Add(Tuple.Create(*first, i));}return q.OrderByDescending(_ =&gt; _.Item1).Take(k).Select(_ =&gt; _.Item2).ToArray();}static unsafe string[] LoadCategoryList(string synset_words_path){return System.IO.File.ReadAllLines(synset_words_path);},,,
        
 その他並列で読み込みたいものをごにょごにょ
    
 この時点で認証完了。試しに特定のユーザー情報を出力する
            
 年齢に1歳加える
            Console.WriteLine(SharpDX.Diagnostics.ObjectTracker.ReportActiveObjects()); 
 一覧表示
Debug.WriteLine(date1.GetMonthDiff(date2));Debug.WriteLine(date2.GetMonthDiff(date1)); 拡張メソッド版// 年度の開始月を引数で指定する
Debug.WriteLine(DateTimeUtility.GetFiscalYear(date1, 4));
// 拡張メソッド版
Debug.WriteLine(date1.GetFiscalYear(4));
// 年度の開始月を引数で指定する
Debug.WriteLine(DateTimeUtility.GetFirstDateOfFiscalYear(date1, 4));
// 拡張メソッド版
Debug.WriteLine(date1.GetFirstDateOfFiscalYear(4));
// 年度の開始月を引数で指定する
Debug.WriteLine(DateTimeUtility.GetLastDateOfFiscalYear(date1, 4));
// 拡張メソッド版
Debug.WriteLine(date1.GetLastDateOfFiscalYear(4));
// 対象日付と年度の開始月を引数で指定する
Debug.WriteLine(DateTimeUtility.GetFirstDateOfQuarter(date1, 4));
// 年度, 四半期, 年度の開始月を引数で指定する
Debug.WriteLine(DateTimeUtility.GetFirstDateOfQuarter(2018, QuarterPeriod.First, 4));
// 拡張メソッド版
Debug.WriteLine(date1.GetFirstDateOfQuarter(4));
// 対象日付と年度の開始月を引数で指定する
Debug.WriteLine(DateTimeUtility.GetLastDateOfQuarter(date1, 4));
// 年度, 四半期, 年度の開始月を引数で指定する
Debug.WriteLine(DateTimeUtility.GetLastDateOfQuarter(2018, QuarterPeriod.First, 4));
// 拡張メソッド版
Debug.WriteLine(date1.GetLastDateOfQuarter(4));
// 拡張メソッド版
Debug.WriteLine(date1.GetFirstDateOfYear());
// 拡張メソッド版
Debug.WriteLine(date1.GetLastDateOfYear());
// 拡張メソッド版
Debug.WriteLine(date1.GetFirstDateOfMonth());
// 拡張メソッド版
Debug.WriteLine(date1.GetLastDateOfMonth());
// 拡張メソッド版
Debug.WriteLine(date1.GetFirstDateOfWeek());
// 拡張メソッド版
Debug.WriteLine(date1.GetLastDateOfWeek());
// 拡張メソッド版
Debug.WriteLine(date1.GetDateOfCurrentWeek(DayOfWeek.Friday));
// 拡張メソッド版
Debug.WriteLine(date1.GetDateOfNextWeek(DayOfWeek.Friday));

using System.Collections.Generic; 
 List
    x = x + 1; 
 ここはC# 5.0まででもOK
        
 This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
               
 外部のウィンドウが閉じられたらAltseed用のゲームループも抜ける。// フォントを生成する。
var font = asd.Engine.Graphics.CreateDynamicFont("", 30, new asd.Color(255, 255, 255), 0, new asd.Color());
// 文字描画オブジェクトを生成する。
asd.TextObject2D obj = new asd.TextObject2D();
// 描画に使うフォントを設定する。
obj.Font = font;
// 描画位置を指定する。
obj.Position = new asd.Vector2DF(100, 100);
// 描画する文字列を指定する。
obj.Text = "C++完全に理解した";
// 文字描画オブジェクトのインスタンスをエンジンへ追加する。
asd.Engine.AddObject2D(obj);

            label1.Text = "Answer = " + AmicableSum 
 2;同じ組を2回数えてしまうため2で割る
        int a = 1;  
 使用されていない変数
                    
 末尾改行なし出力
            
 以下を追記
            
 押下時に実行したい処理
        
 アプリケーションの処理を実行
var result = source.Aggregate((sum, item) =&gt; sum + item); 
 ⇒ 6
            browser = new ChromiumWebBrowser("https:
web.basemark.com")
            
エラーになる
            
なにかキーを押すと終了
    
 関数を表す文字列と引数を表す文字列をExpressionにする関数を呼び出す引数のうち、関数でないもの（＝定数）private static readonly Parser&lt;Expression&gt; Constant =Parse.CharExcept(new[] { '(', ')', ',' }).AtLeastOnce().Token().Text().Select(Expression.Constant);// 引数は関数か定数であるはず。なので、まず関数かどうかを評価してから関数でない場合は定数と判断する（なので`Or`を利用している）private static readonly Parser&lt;Expression&gt; Arguments = Function.Or(Constant);,,,// 引数のうち、関数でないもの（＝定数）
private static readonly Parser&lt;Expression&gt; Constant =
// 引数は関数か定数であるはず。なので、まず関数かどうかを評価してから関数でない場合は定数と判断する（なので`Or`を利用している）
private static readonly Parser&lt;Expression&gt; Arguments = Function.Or(Constant);

        
}
        
 ファイルに保存する処理
                
 ~.Lerpは割合を示す引数は0 ~ 1の間にClampされるので1より大きくても問題なし
    var url = "http:
192.168.1.1:80osccommandsexecute";
  
返り値あり、後処理あり、CancellationTokenあり
        
 状況変化を知らせるために購読者に通知する
    =&gt; Task.FromResult((string?)""); 
 これだと Task&lt;string?&gt; とみなしてくれない
  
 CSVデータでなくIEnumerable&lt;Forecast&gt;を受け取る
    
 処理とかいろいろ
// モデル読み込み
loadedModel = mlContext.Model.Load(modelLocation, out var modelInputSchema);
// 画像読み込み
var predictor = mlContext.Model.CreatePredictionEngine&lt;ImageNetData, ImageNetPrediction&gt;(loadedModel);

        
フォルダの作成を行う
  serializer.Serialize(writer, value, emptyNamespaces); 
 3.
object.Equals(myBase, mySub1) 
 内部でObject.Equals()が呼ばれる
                        YourBrowser_Open();
ここで自由に調理してください
        
* ... *  固有のデータ構造SubStructureA を使うサービスpublic class ServiceA{public MixedStructure Get(string codeA) =&gt; { /* ... */ }}// SubStructureB を使うサービスpublic class ServiceB{public MixedStructure Get(string codeB) =&gt; { /* ... */ }}// SubStructureC を使うサービスpublic class ServiceC{public MixedStructure Get(string codeC) =&gt; { /* ... */ }},,,// SubStructureA を使うサービス
public class ServiceA
SubStructureB を使うサービスpublic class ServiceB{public MixedStructure Get(string codeB) =&gt; { /* ... */ }}// SubStructureC を使うサービスpublic class ServiceC{public MixedStructure Get(string codeC) =&gt; { /* ... */ }},,,// SubStructureB を使うサービス
public class ServiceB
SubStructureC を使うサービスpublic class ServiceC{public MixedStructure Get(string codeC) =&gt; { /* ... */ }},,,// SubStructureC を使うサービス
public class ServiceC

// 自動ダウンロードを有効にするには、第二引数に true を指定します
ClickOnceController clickOnce = new ClickOnceController(null, true);
// アセンブリ名とダウンロードグループ名の組み合わせを登録します
clickOnce.RegistAssemblyDownloadGroup("ClassLibrary1", "Group1");

            
 例)Shaderの疑似bool値をオンに
    
System.Diagnosticsはusingで定義済み
        
 属性ベースのAPIを使用する場合はUseDefaultConventions()は必須
        
商の数だけ、ローマ数字を戻り値に追加する
        musics.Add(new msta("bgm_main",bgm_0)); 
音楽を格納する場所 増やす場合これを増やしていく//      musics.Add(new msta("名前",bgm_1)); //名前はなんでも。soundman.bgm="名前"で呼び出せるようになります
musics.Add(new msta("se_buy",se_0)); seも同じく

{Console.WriteLine(ex.TargetSite);}
例外発生した部分表示//1つの処理で複数例外でる場合、throwで別のメソッドに再スローすればいい
逆に複数処理で1つの例外でる場合、whenでまとめればいい

    
 検証用のメソッド（あくまで簡易な実装例。本当はもっと考慮すべきことがある）
                fs.Write(data, 0, data.Length); 
 We can also use ReadOnlySpan 
var diff = transform.position - TrackingCamera.transform.position;// 鏡面の垂直ベクトル カメラから鏡面へのベクトルvar normal = transform.forward;// 鏡面からの反射ベクトル 鏡面の垂直ベクトルvar reflection = diff + 2 * (Vector3.Dot(-diff, normal)) * normal;// 鏡面座標に反転させた反射ベクトルを加算する 鏡面からの反射ベクトルReflectionCamera.transform.position = transform.position - reflection;,,, 鏡面座標に反転させた反射ベクトルを加算するReflectionCamera.transform.LookAt(Specular.position);,,, 鏡面の方向に向けるvar distance = Vector3.Distance(transform.position, ReflectionCamera.transform.position);ReflectionCamera.nearClipPlane = distance* 0.9f; カメラ設定の更新// 焦点距離と表示したい鏡面サイズから画角(FOV)を計算する
ReflectionCamera.fieldOfView = 2 * Mathf.Atan(Size / (2 * distance)) * Mathf.Rad2Deg;
Specular.rotation = Quaternion.LookRotation(Specular.position - TrackingCamera.transform.position);,,, 鏡面をカメラ方向に向ける// フレームのサイズを更新
Frame.localScale = new Vector3(Size, Size, 1);
var angle = Vector3.Angle(-transform.forward, ReflectionCamera.transform.forward);var specularSize = Size + Mathf.Sin(angle * Mathf.Deg2Rad); 鏡面のサイズを調整// シーンビュー更新
SceneView.RepaintAll();

                xlRange.Interior.ColorIndex = 15;       
グレー
            
トークンを作成（トークンは上記クレームをBase64エンコードしたものに署名をつけただけ）
                
 クライアントとの送信・受信処理
            
入ってきた値（value）が最大値より大きければ最大値に固定する。//変数＝条件式？true：false
int i = flag ? 1 : -1 ;

    
 ↓こう書くしかない。
        
 Y座標を親の中心を軸に配置
vlcControl1.Play(ms); 
再生
                
取り出し
        
 状況変化を知らせるために購読者に通知する
            
action.Command = dc.MouseEnterCommand;
[CustomPropertyDrawer(typeof(UnityEvent&lt;bool&gt;), true)] 
　この行を追加
                    
コネクション終了
            DownCommand.Subscribe(_ =&gt; Counter.Value--);
(() =&gt; Counter.Value--)ではコンパイルエラー
            
かかった時間を表示
                    string json = Newtonsoft.Json.JsonConvert.SerializeObject(cardObject); 
修正
            
計測開始
    var result = await this.http.PostAsync("https:
slack.comapichat.postMessage", content);
        
 reuse Queue(don't null clear)
    
 分析の開始...
        sb.AppendLine("XXX"); 
 &lt;--これ
    
}
        var results = _FizzBuzz(i + 1, n);  
 ★
        
音声ファイルの停止
            .Select(i =&gt; i * i) 
 値を2乗する
    ;                               
select a;結果{8,7,6},,,a_.Where(x =&gt; x &gt; 5).OrderByDescending(x =&gt; x).ToList().ForEach(x =&gt; Console.Write(x));// 結果876,,,a_.Where(x =&gt; x &gt; 5).OrderByDescending(x =&gt; x).Select(x =&gt; { Console.Write(x); return 1; });,,,a_.Where(x =&gt; x &gt; 5).OrderByDescending(x =&gt; x).Select(x =&gt; x * 2).ToList().ForEach(x =&gt; Console.Write("{0}, ", x));//結果{16, 14, 12},,,a_.Any(x =&gt; x == 2);//結果True,,,int[][] a2_;a2_ = new int[3][];a2_[0] = new int[]{ 1,2,3 };a2_[1] = new int[]{ 1,4,5 };a2_[2] = new int[]{ 1,2,6 };a2_.Where(x =&gt;x.Any(y =&gt; y == 2))//結果{1, 2, 3}{1, 2, 6},,,IEnumerable&lt;int[]&gt; o3 =a2_.Where(x =&gt;x.Any(y =&gt; y &gt; 3));//結果{1, 4, 5}{1, 2, 6},,,IEnumerable&lt;int&gt; o4 =a2_.SelectMany(x =&gt; x.Where(y =&gt; y &gt; 3));//結果{4, 5, 6},,,IEnumerable&lt;int[]&gt; o5 =a2_.Select(x =&gt; x.Where(y =&gt; y &gt; 3).ToArray());//結果{}{4, 5}{6},,,IEnumerable&lt;int[]&gt; o6 =a2_.Select(x =&gt; x.Where(y =&gt; y &gt; 3).ToArray()).Where(x =&gt; x.Count() &gt; 0);//結果{4, 5}{6},,,IEnumerable&lt;int[]&gt; o6 =a2_.Select(x =&gt; x.Where(y =&gt; y &gt; 3).ToArray()).Where(x =&gt; x.Any()).ToArray();//結果{4, 5}{6},,,// 結果
{8,7,6}
// 結果
876
結果{16, 14, 12},,,a_.Any(x =&gt; x == 2);//結果True,,,int[][] a2_;a2_ = new int[3][];a2_[0] = new int[]{ 1,2,3 };a2_[1] = new int[]{ 1,4,5 };a2_[2] = new int[]{ 1,2,6 };a2_.Where(x =&gt;x.Any(y =&gt; y == 2))//結果{1, 2, 3}{1, 2, 6},,,IEnumerable&lt;int[]&gt; o3 =a2_.Where(x =&gt;x.Any(y =&gt; y &gt; 3));//結果{1, 4, 5}{1, 2, 6},,,IEnumerable&lt;int&gt; o4 =a2_.SelectMany(x =&gt; x.Where(y =&gt; y &gt; 3));//結果{4, 5, 6},,,IEnumerable&lt;int[]&gt; o5 =a2_.Select(x =&gt; x.Where(y =&gt; y &gt; 3).ToArray());//結果{}{4, 5}{6},,,IEnumerable&lt;int[]&gt; o6 =a2_.Select(x =&gt; x.Where(y =&gt; y &gt; 3).ToArray()).Where(x =&gt; x.Count() &gt; 0);//結果{4, 5}{6},,,IEnumerable&lt;int[]&gt; o6 =a2_.Select(x =&gt; x.Where(y =&gt; y &gt; 3).ToArray()).Where(x =&gt; x.Any()).ToArray();//結果{4, 5}{6},,,//結果
{16, 14, 12}
//結果
True
結果{1, 2, 3}{1, 2, 6},,,IEnumerable&lt;int[]&gt; o3 =a2_.Where(x =&gt;x.Any(y =&gt; y &gt; 3));//結果{1, 4, 5}{1, 2, 6},,,IEnumerable&lt;int&gt; o4 =a2_.SelectMany(x =&gt; x.Where(y =&gt; y &gt; 3));//結果{4, 5, 6},,,IEnumerable&lt;int[]&gt; o5 =a2_.Select(x =&gt; x.Where(y =&gt; y &gt; 3).ToArray());//結果{}{4, 5}{6},,,IEnumerable&lt;int[]&gt; o6 =a2_.Select(x =&gt; x.Where(y =&gt; y &gt; 3).ToArray()).Where(x =&gt; x.Count() &gt; 0);//結果{4, 5}{6},,,IEnumerable&lt;int[]&gt; o6 =a2_.Select(x =&gt; x.Where(y =&gt; y &gt; 3).ToArray()).Where(x =&gt; x.Any()).ToArray();//結果{4, 5}{6},,,//結果
{1, 2, 3}
結果{1, 4, 5}{1, 2, 6},,,IEnumerable&lt;int&gt; o4 =a2_.SelectMany(x =&gt; x.Where(y =&gt; y &gt; 3));//結果{4, 5, 6},,,IEnumerable&lt;int[]&gt; o5 =a2_.Select(x =&gt; x.Where(y =&gt; y &gt; 3).ToArray());//結果{}{4, 5}{6},,,IEnumerable&lt;int[]&gt; o6 =a2_.Select(x =&gt; x.Where(y =&gt; y &gt; 3).ToArray()).Where(x =&gt; x.Count() &gt; 0);//結果{4, 5}{6},,,IEnumerable&lt;int[]&gt; o6 =a2_.Select(x =&gt; x.Where(y =&gt; y &gt; 3).ToArray()).Where(x =&gt; x.Any()).ToArray();//結果{4, 5}{6},,,//結果
{1, 4, 5}
結果{4, 5, 6},,,IEnumerable&lt;int[]&gt; o5 =a2_.Select(x =&gt; x.Where(y =&gt; y &gt; 3).ToArray());//結果{}{4, 5}{6},,,IEnumerable&lt;int[]&gt; o6 =a2_.Select(x =&gt; x.Where(y =&gt; y &gt; 3).ToArray()).Where(x =&gt; x.Count() &gt; 0);//結果{4, 5}{6},,,IEnumerable&lt;int[]&gt; o6 =a2_.Select(x =&gt; x.Where(y =&gt; y &gt; 3).ToArray()).Where(x =&gt; x.Any()).ToArray();//結果{4, 5}{6},,,//結果
{4, 5, 6}
結果{}{4, 5}{6},,,IEnumerable&lt;int[]&gt; o6 =a2_.Select(x =&gt; x.Where(y =&gt; y &gt; 3).ToArray()).Where(x =&gt; x.Count() &gt; 0);//結果{4, 5}{6},,,IEnumerable&lt;int[]&gt; o6 =a2_.Select(x =&gt; x.Where(y =&gt; y &gt; 3).ToArray()).Where(x =&gt; x.Any()).ToArray();//結果{4, 5}{6},,,//結果
{}
結果{4, 5}{6},,,IEnumerable&lt;int[]&gt; o6 =a2_.Select(x =&gt; x.Where(y =&gt; y &gt; 3).ToArray()).Where(x =&gt; x.Any()).ToArray();//結果{4, 5}{6},,,//結果
{4, 5}
結果{4, 5}{6},,,//結果
{4, 5}

            
 ここ注目!!!!!!!!!!!!!!!!!!!!
public float radius = 0.5f; 
円の大きさ
            
 disconnect like you normally would
            System.Console.WriteLine(obj + str); 
 ▲
            
 &gt; "Action!"
        
暫定的な重い処理の見本
  
 処理
        this.Items = items?.AsReadOnly();   
 外部公開用には変更不可にラップ
        
 眼球の向き
            
かかった時間を表示
        
ビットマップに前景画像を描画
    
 見切れている文字数が0になるまで、テキストの先頭行から消してゆく
    
 ココが同じ
        
 0.To(times - 1).ToList().ForEach(x =&gt; action(x));
    
 DB は SQL Server local DB を使うことにします
for (int i = 0; i &lt; TestArray.Length; i++){forの処理foreach (int i in TestArray){foreachの処理//forの処理
int num = 0;
//foreachの処理
int[] array2 = TestArray;
for (int i = 0; i &lt; TestList.Count; i++){forの処理foreach (int i in TestList){foreachの処理//forの処理
int num = 0;
//foreachの処理
List&lt;int&gt;.Enumerator enumerator = list.GetEnumerator();

        
 ラムダ式で渡す場合
            
表示
            
 「い」入力
        
 カメラ向き
    
各種コマンドはSKDeviceクラスにメソッドとして実装
            
演算関数を作成する//ForamulaConverter（関数定義なし）
dlg3 = FormulaConverter.GetDelegate("(int)para1/2 + 5 - 10 * 2.3333d + (int)0.5f");
//ForamulaConverter（関数定義あり）
Delegate dlg15 = FormulaConverter.GetDelegate("Func&lt;int,int,int&gt;(x,y)=(2+x*2)/(y-2.5)*(x+5)");
//ラムダ式（ForamulaConverter「関数定義あり」の同等コード）
Func&lt;int, int, int&gt; func15 = (x, y) =&gt; (int)((2 + x * 2) / (y - 2.5) * (x + 5));
//FormulaConverter定義
var dele = FormulaConverter.GetDelegate("Func&lt;int,int,double&gt;(x,y)=(int)x/2 + 5 - 10 * 2.3333d + (int)0.5f+Math.Pow(Math.Abs(y),2)");
//ラムダ式定義
Func&lt;int, int, double&gt; func = (x, y) =&gt; (double)((int)x / 2 + 5 - 10 * 2.3333d + (int)0.5f + Math.Pow(Math.Abs(y), 2));
専用関数double TestFunc(int x,int y){return (double)((int)x / 2 + 5 - 10 * 2.3333d + (int)0.5f + Math.Pow(Math.Abs(y), 2));}//FormulaConverter 100万回実行var rtn = (double)dele.DynamicInvoke(7, -5);//ラムダ式 100万回実行var rtn = func(7, -5);//専用関数 100万回実行var rtn = TestFunc(7, -5);}//専用関数
double TestFunc(int x,int y)
//FormulaConverter 100万回実行
var rtn = (double)dele.DynamicInvoke(7, -5);
//ラムダ式 100万回実行
var rtn = func(7, -5);
//専用関数 100万回実行
var rtn = TestFunc(7, -5);

        
 Need to dispatch to UI thread if performing UI operations
} 
 &lt;- ここで FooDbContext.Dispose() される
Using System.ModelComponentModel.DataAnotaions が必要。public class User{[MaxLength(4)][Required]public string UserID { get; set; }public string UserName { get; set; }[Range(0, 999)]public int Age { get; set; }public DateTime BirthDay { get; set; }public bool IsActive { get; set; }},,,public class UsersController : ApiController{public HttpResponseMessage Post(User user){if (ModelState.IsValid){return new HttpResponseMessage(HttpStatusCode.OK);}else{return Request.CreateErrorResponse(HttpStatusCode.BadRequest, ModelState);}}},,,//Using System.ModelComponentModel.DataAnotaions が必要。
public class User

        
 状況変化を知らせるために購読者に通知する
        toGoPoint = goalPoint.transform.position;      
目的地に設置したオブジェクトの座標
    
 ----- 省略 -----
        
 Add MagicOnionServiceDefinition for reference from Startup.
  
 出力：evens=2,4,6,8,10
    
もしhitのレイヤーが指定した"レイヤーの名前"と一致していた場合．．．の処理内容
        
 vo.ここでやらなければならないこと を使わないときでも注入必要.
    
 数値に変換したものを表示順とする// 数値文字列へ変換
Debug.WriteLine(EnumHelper.ToNumericString(SampleEnum.Left));
// 数値文字列へ変換（拡張メソッド版）
Debug.WriteLine(SampleEnum.Left.ToNumericString());
// 数値文字列から変換
Debug.WriteLine(EnumHelper.FromNumericString&lt;SampleEnum&gt;("1"))

        
データの確認
    
 クロスオリジンを想定しているので
        
 HACK: 本当はこのあたりはModelから取得されるはずのデータ
    
 バイナリデータを非同期的に読み込む
            
 nは1以上かつsrcの長さよりも短い必要がある。
 
----------------省略----------------
[HtmlExporter]
←これ//(略)
}

            skillResponse.Response.ShouldEndSession = true;
セッション終了を指定
        
 Using a yield return statement to return each element one at a time
//このインスタンス化でテーブルが作られます。
userIdはセッション情報から取得します。
//これがプライマリキー（id）として使われます。
var attrManager=new AttributesManager(userId,_tableName);
//ユーザーの星座情報をsignをキーにしてセット。
任意のキーで数値、文字列、一次元のリストや配列を格納することができます。
//ここではまだ変数に追加しているだけ。
attrManager.SetPersistentAttributes("sign", "ふたご座");
//セットした情報をDynamoDBに保存。
ここでDynamoDBに追加！
//値の取得
var attr=attrManager.GetPersistentAttributes();

                
トランザクション完了
        
 ここに書く
        
 隣接した３つのセルを配列として順に取り出す。
                
ふるい落とし。落としたものには0を入れる
            
 本当はSQLでやる
    
 メソッド
        
 サイズと座標の修正var rectTransform = transform as RectTransform;// Pivotを(0.0f,0.0f)にする 使い方rectTransform.SetPivotWithKeepingPosition(Vector2.zero);// Pivotを(0.2f,0.7f)にする Pivotを(0.0f,0.0f)にするrectTransform.SetPivotWithKeepingPosition(0.2f, 0.7f);// Anchorを中心(0,5f,0.5f)にする Pivotを(0.2f,0.7f)にするrectTransform.SetAnchorWithKeepingPosition(0.5f, 0.5f);// AnchorMinを左下(0.0f,0.0f)、AnchorMacを右上(1.0f,1.0f)にする (ストレッチ) Anchorを中心(0,5f,0.5f)にするrectTransform.SetAnchorWithKeepingPosition(Vector2.zero, Vector2.one);,,, AnchorMinを左下(0.0f,0.0f)、AnchorMacを右上(1.0f,1.0f)にする (ストレッチ)// 座標を保ったままPivotを変更するメソッド
void SetPivotWithKeepingPosition(Vector2 targetPivot)
// 座標を保ったままAnchorを変更する
void SetAnchorWithKeepingPosition(Vector2 targetMinAnchor, Vector2 targetMaxAnchor)
rectTransform.SetPivotWithKeepingPosition(Vector2.zero);// Pivotを(0.2f,0.7f)にする Pivotを(0.0f,0.0f)にするrectTransform.SetPivotWithKeepingPosition(0.2f, 0.7f);// Anchorを中心(0,5f,0.5f)にする Pivotを(0.2f,0.7f)にするrectTransform.SetAnchorWithKeepingPosition(0.5f, 0.5f);// AnchorMinを左下(0.0f,0.0f)、AnchorMacを右上(1.0f,1.0f)にする (ストレッチ) Anchorを中心(0,5f,0.5f)にするrectTransform.SetAnchorWithKeepingPosition(Vector2.zero, Vector2.one);,,, AnchorMinを左下(0.0f,0.0f)、AnchorMacを右上(1.0f,1.0f)にする (ストレッチ)
    
 対象処理の引数と戻り値
上のコード省略public DetailsPage(Speaker speaker){//省略ButtonFace.Clicked += ButtonFaceClicked;}//省略async void ButtonFaceClicked(object sender, EventArgs e){var subscriptionKey = "&lt;自分のkey&gt;";//以下URLは自分のリージョンにあったやつを記載var faceEndpoint="https://westcentralus.api.cognitive.microsoft.com";FaceClient faceClient = new FaceClient(new ApiKeyServiceClientCredentials(subscriptionKey),new System.Net.Http.DelegatingHandler[] { });faceClient.Endpoint = faceEndpoint;IList&lt;DetectedFace&gt; faceList =await faceClient.Face.DetectWithUrlAsync(speaker.Avatar, true, false, faceAttributes);var age = faceList[0].FaceAttributes.Age;var gender = faceList[0].FaceAttributes.Gender;var happiness = faceList[0].FaceAttributes.Emotion.Happiness * 100;await DisplayAlert("faceAPI", $"Age: {age}\n Gender: {gender}\n Happiness: {happiness}%", "OK");},,,var age = faceList[0].FaceAttributes.Age;var gender = faceList[0].FaceAttributes.Gender;var happiness = faceList[0].FaceAttributes.Emotion.Happiness * 100;await DisplayAlert("faceAPI", $"Age: {age}\n Gender: {gender}\n Happiness: {happiness}%", "OK");}//上のコード省略
public DetailsPage(Speaker speaker)
//省略
ButtonFace.Clicked += ButtonFaceClicked;
省略async void ButtonFaceClicked(object sender, EventArgs e){var subscriptionKey = "&lt;自分のkey&gt;";//以下URLは自分のリージョンにあったやつを記載var faceEndpoint="https://westcentralus.api.cognitive.microsoft.com";FaceClient faceClient = new FaceClient(new ApiKeyServiceClientCredentials(subscriptionKey),new System.Net.Http.DelegatingHandler[] { });faceClient.Endpoint = faceEndpoint;IList&lt;DetectedFace&gt; faceList =await faceClient.Face.DetectWithUrlAsync(speaker.Avatar, true, false, faceAttributes);var age = faceList[0].FaceAttributes.Age;var gender = faceList[0].FaceAttributes.Gender;var happiness = faceList[0].FaceAttributes.Emotion.Happiness * 100;await DisplayAlert("faceAPI", $"Age: {age}\n Gender: {gender}\n Happiness: {happiness}%", "OK");},,,var age = faceList[0].FaceAttributes.Age;var gender = faceList[0].FaceAttributes.Gender;var happiness = faceList[0].FaceAttributes.Emotion.Happiness * 100;await DisplayAlert("faceAPI", $"Age: {age}\n Gender: {gender}\n Happiness: {happiness}%", "OK");}//省略
async void ButtonFaceClicked(object sender, EventArgs e)
//以下URLは自分のリージョンにあったやつを記載
var faceEndpoint="https:westcentralus.api.cognitive.microsoft.com";

　　　　　　　
 ローカル表記。ローカル時刻は作るしかない？
        
ManagerSceneが有効でないときに追加ロード
        
 クライアント資格情報の要求動作を指定します// 資格情報を指定してチャネルを生成します。
Channel = new Channel("127.0.0.1:50001"), GetClientCredentials());

            
Versionにsignを入れて確認する。。。
    public Color after_color;  
フェード後の色
            await Task.Delay(100);  
 If you add wait, then, the it switch the Thread.
            item["attributes"] = attr2;
attributes列。上で作成したattr2を入れる。
            
テーブルに追加
                
テーブル名
                case Keys.Control | Keys.Z:
 Ctrl + Z
_reactivePropertyAA Completed !! 
 ReactivePropertyのDisposeでOnCompleted()が呼ばれる// 以後、コンソール出力なし
,,,

    bioPosition.SetTargetTransform(target); 
 targetは対象のオブジェクトのTransform
                
ふるい落とし。落としたものには0を入れる
ftpReq.CachePolicy = new RequestCachePolicy(RequestCacheLevel.NoCacheNoStore);
キャッシュしない
                
すべてのMessageReceivedに"test"イベントを送信する
 void JumpToScene() 
シーンの切り替え
                
 key
  
 
// コンパイルエラー
var c = new MyClass(10);
`&lt;string, int&gt;`を省略できないvar dict = new Dictionary&lt;string, int&gt; {["apple"] = 100,["orange"] = 150,["banana"] = 200};,,,class MyClass&lt;T&gt; {public MyClass(T value) {this.Value = value;}public T Value { get; }}static class MyClassFactory {public static MyClass&lt;T&gt; New&lt;T&gt;(T value) =&gt;new MyClass&lt;T&gt;(value);},,,var c = MyClassFactory.New(10);,,,// Dictionary&lt;TKey, TValue&gt;のファクトリークラス// クラス名を同じにするとそれっぽい（型引数あるなしでユーザー定義型として区別可能）static class Dictionary {public static Dictionary&lt;TKey, TValue&gt; New&lt;TKey, TValue&gt;(params (TKey key, TValue value)[] tuples) {var dict = new Dictionary&lt;TKey, TValue&gt;();foreach (var (key, value) in tuples) {dict.Add(key, value);}return dict;}},,,var d = Dictionary.New(("apple", 100),("orange", 150),("banana", 200));,,,// `&lt;string, int&gt;`を省略できない
var dict = new Dictionary&lt;string, int&gt; {
Dictionary&lt;TKey, TValue&gt;のファクトリークラス// クラス名を同じにするとそれっぽい（型引数あるなしでユーザー定義型として区別可能）static class Dictionary {public static Dictionary&lt;TKey, TValue&gt; New&lt;TKey, TValue&gt;(params (TKey key, TValue value)[] tuples) {var dict = new Dictionary&lt;TKey, TValue&gt;();foreach (var (key, value) in tuples) {dict.Add(key, value);}return dict;}},,,var d = Dictionary.New(("apple", 100),("orange", 150),("banana", 200));,,,// Dictionary&lt;TKey, TValue&gt;のファクトリークラス
 クラス名を同じにするとそれっぽい（型引数あるなしでユーザー定義型として区別可能）

    SuppressChangeType = 131072, 
 0x00020000
        item.PropertyChanged += OnPropertyChanged; 
 イベント変更通知を登録
                
 階層を1つ深くする
        
 ここで渡す EntityQuery も自分で組み立てる必要がある
    
 アクションイベントを実行する（委譲先）
    
 読み取りが終わった時に改行があれば異常処理データ終端のダブルクォートを探すサブ関数private int SearchCloseQuot(string data, int startIndex){for (int i = startIndex; i &lt; data.Length; i += 2){i = data.IndexOf('"', i);if (i == data.Length - 1 || data[i + 1] != '"' || i == -1){return i;}}return -1;},,,// データ終端のダブルクォートを探すサブ関数
private int SearchCloseQuot(string data, int startIndex)

    var i = 0; 
最初に0が入ってるんだからこれでいいじゃないか
            
イベント内で配列の何番目かを取得するには、実際に配列の中身を探しに行かなくてはいけない
  
アクティブなら実行
        
 creating instance of bike. 
        
操作していると、Z軸がだんだん動いていくので、0に設定してください。
            
テーブルに追加
    
「l」と「x」の完全互換性
            
 リクエスト数は100Mまでですよ
            
TableNamesプロパティをチェック
            Console.ReadKey();
何かキーを押せばアプリ終了。
            
 Viewの登録
    
 処理
        
テスト
    [SerializeField] private TextMeshProUGUI textRoman; 
 ここにローマ字表示のTextMeshProをアタッチする。
            
 returns ["Hello Tokyo!", "Hello Seattle!", "Hello London!"]
    
 遅延処理がないコルーチン
                
 出力先を内蔵スピーカーに強制する
// 文字列化したいdouble型
double val = 1.12345;
// 端末依存のCultureInfoで文字列出力した場合
 文字列から数値に戻せるように書式指定子にR（ラウンドトリップ書式指定子）を指定
// CultureInfo.InvariantCultureでen-USの書式を取得
CultureInfo culture = CultureInfo.InvariantCulture;
NumberFormatInfo format = culture.NumberFormat; 数値文字列のフォーマットを取得Debug.WriteLine ("After: " + val.ToString ("R", format)); CultureInfo.InvariantCultureのNumberFormatInfoを指定して出力
  ["apple"] = 180, 
 &lt;- 重複
        
 一覧に追加
                    
ns + "title"タグの値を表示
// keyFile：ダウンロードしたid_rsaの物理ファイルパス
 sshPasswd：「パスワードを聞かれるのでお好きなパスワード入力」で入力したパスワード
// さくらのホスト名(xxxxx.sakura.ne.jp)
string host = "xxxxx.sakura.ne.jp";
// user：さくらのユーザ名(xxxxx)
string user = "xxxxx";
// ここで例外エラーが起こらなければSSH接続はOK
sshClient.Connect();
// さくらのサーバコントロールパネル-データベース一覧の「データベースサーバ」を設定
string serverName = "yyyyy.db.sakura.ne.jp";

[WebService(Namespace = "http:
tempuri.org")]// この Web サービスを、スクリプトから ASP.NET AJAX をしようして呼び出せるようにするには、次の行のコメントを解除します。
 [System.Web.Script.Services.ScriptService]

                        
skillResponse = ErrorHandler(skillRequest);
    
 ヘッダー
    
 何度呼び出されてもいいようにもう一度コピーしてそっちを使用する
static readonly string uri = "ws:
192.168.***.***:9090";
            System.Diagnostics.Debug.WriteLine(BaseClass.GetName&lt;BaseClass&gt;());
ArgumentException(´・ω・`)
    
エディタでアタッチしてもしてなくても動く
            
とりあえずreturnしておくことにした
            
 状態が変更されたときの処理を実行する
    
 Update is called once per frame
            double d = md.Discri(1.0, 2.0, 3.0);
 代入File1.cs 内:namespace PC{partial class A{int num = 0;void MethodA() { }partial void MethodC();}}//File2.cs 宣言内:namespace PC{partial class A{void MethodB() { }partial void MethodC() { }}},,,namespace PM{partial class A{partial void Am(string s);}partial class A{partial void Am(String s){Console.WriteLine($"Am: {s}");}}}//--partial class Earth : Planet, IRotate { }partial class Earth : IRevolve { }// これらは、次の宣言と等価です。class Earth : Planet, IRotate, IRevolve { },,,//File1.cs 内:
namespace PC
File2.cs 宣言内:namespace PC{partial class A{void MethodB() { }partial void MethodC() { }}},,,namespace PM{partial class A{partial void Am(string s);}partial class A{partial void Am(String s){Console.WriteLine($"Am: {s}");}}}//--partial class Earth : Planet, IRotate { }partial class Earth : IRevolve { }// これらは、次の宣言と等価です。class Earth : Planet, IRotate, IRevolve { },,,//File2.cs 宣言内:
namespace PC
--partial class Earth : Planet, IRotate { }partial class Earth : IRevolve { }// これらは、次の宣言と等価です。class Earth : Planet, IRotate, IRevolve { },,,これらは、次の宣言と等価です。class Earth : Planet, IRotate, IRevolve { },,,// これらは、次の宣言と等価です。


             xmlns:x="http:
schemas.microsoft.comwinfx2009xaml" 
            
セッション終了させる。
            
 Shutdown
        
 不足がある場合は,足りない長さの空の配列を作ってConcatで追加// なんの変哲もないGameObjectの配列
[SerializeField]

        if (isLeft != prev_isLeft) { 
 現在のプレイヤーの向きが1フレーム前と異なっていたら
  [TypeConverter(typeof(ListTypeConverter))]
 *追加*
        ...
 send document to log storage
            
セッション終了させる。
            
両プレイヤー共に置く所がない
    
オーバーライド（※3）
    
 開始点がSegmentの途中を指していた場合、開始点から切り取られた状態で取得ができる。// 末尾データを取得したい場合は、seq.GetPosition(0, seq.End)のように指定する
SequencePosition pos = seq.GetPosition(N);
// GetObjectは必ずobjectを返すため、キャストして使用すること
var segment = (ReadOnlySequenceSegment&lt;T&gt;)pos.GetObject();

    
 要素IDを取得する
タグの設定await TagLibMP4Extentions.SetMetaTagAsync(mp4Path, new string[] { "test1", "テスト２", "test３"} );//タグの取得var getTag = await TagLibMP4Extentions.GetMetaTagAsync(mp4Path);,,,//タグの設定
await TagLibMP4Extentions.SetMetaTagAsync(mp4Path, new string[] { "test1", "テスト２", "test３"} );
//タグの取得
var getTag = await TagLibMP4Extentions.GetMetaTagAsync(mp4Path);

www.Dispose(); 
 &lt;- ここで明示的に破棄を指定// Unity にリソースの解放を依頼。あくまで依頼なので、このタイミングで確実に解放されるわけではない
yield return Resources.UnloadUnusedAssets();
// DXT5Crunched の空のテクスチャを用意
Texture2D texture = new Texture2D(2048, 2048, TextureFormat.DXT5Crunched, false);
// ここでテクスチャを読み込み
www.LoadImageIntoTexture(texture);
// テクスチャ圧縮
texture.Compress(false);
// 圧縮後のテクスチャを割り当て
textureArray[key] = (T)(object)texture;
// 読み込みは終わったので Dispose()
www.Dispose()

                
 結果受信
      
 book.HasKey(nameof(Book.Id)); 不要
                
 ヒットしなかった場合はキャラの下方に地面が存在しないものとして扱う
    
 ここで初めてコンソール出力される。
    
 ここでゼロ除算例外がスローされる
    vcap.Dispose();
Memory release
共通ロジックpublic class CommonModel{public void CommonProc() =&gt;Console.WriteLine("(*・з・*)");}// 継承の場合public class Successor : CommonModel{}// 使用の場合public class Director{private CommonModel Model { get; }public Director() =&gt; Model = new CommonModel();public void CommonProc() =&gt; Model.CommonProc();},,,public interface ICommonModel{void CommonProc();}public class Flunky{private ICommonModel Model { get; }public Flunky(ICommonModel model) =&gt; Model = model;public void CommonProc() =&gt; Model.CommonProc();},,,// 共通ロジック
public class CommonModel
継承の場合public class Successor : CommonModel{}// 使用の場合public class Director{private CommonModel Model { get; }public Director() =&gt; Model = new CommonModel();public void CommonProc() =&gt; Model.CommonProc();},,,public interface ICommonModel{void CommonProc();}public class Flunky{private ICommonModel Model { get; }public Flunky(ICommonModel model) =&gt; Model = model;public void CommonProc() =&gt; Model.CommonProc();},,,// 継承の場合
public class Successor : CommonModel
使用の場合public class Director{private CommonModel Model { get; }public Director() =&gt; Model = new CommonModel();public void CommonProc() =&gt; Model.CommonProc();},,,public interface ICommonModel{void CommonProc();}public class Flunky{private ICommonModel Model { get; }public Flunky(ICommonModel model) =&gt; Model = model;public void CommonProc() =&gt; Model.CommonProc();},,,// 使用の場合
public class Director

    
 -10000～10000 のランダムな整数または25%の確率でnullデータ項目の配列にまとめて返すvar plan = fields.Then((field1, field2, field3, field4, field5, field6, field7, field8) =&gt;new object[] { field1, field2, field3, field4, field5, field6, field7, field8 });// Observable なデータソースを生成var source = Observable.When(plan);// 生成された値を列挙してみるforeach (object[] values in source.ToEnumerable()){System.Diagnostics.Debug.WriteLine(string.Join(",", values));},,,// データ項目の配列にまとめて返す
var plan = fields.Then((field1, field2, field3, field4, field5, field6, field7, field8) =&gt;
// Observable なデータソースを生成
var source = Observable.When(plan);
foreach (object[] values in source.ToEnumerable()){ 生成された値を列挙してみる
Console.WriteLine(log); 
 C#
            
 Keep the console window open in debug mode.
改行コードを統一static public string ConvertEOL(string text, string toEOL ="\n"){return text.Replace("\r\n", toEOL).Replace("\r", toEOL).Replace("\n", toEOL);},,,// 改行コードを統一
static public string ConvertEOL(string text, string toEOL ="\n")

            
 TextBlockから選択範囲文字列取得
            path = path.Replace("https:
", "https:" + user + ":" + pass + "@");
    
 Functionの引数じゃないのでInject属性は不要だよ！
UTF8文字コードがHTMLエンティティされる問題を解決するおまじないservices.Configure&lt;Microsoft.Extensions.WebEncoders.WebEncoderOptions&gt;(options =&gt;{options.TextEncoderSettings = new System.Text.Encodings.Web.TextEncoderSettings(System.Text.Unicode.UnicodeRanges.All);});,,,// UTF8文字コードがHTMLエンティティされる問題を解決するおまじない
services.Configure&lt;Microsoft.Extensions.WebEncoders.WebEncoderOptions&gt;(options =&gt;

        
 同じ型に対して、複数の型情報を登録するため名前付きにする
    
アタッチされたScript上で右クリックを押して動作確認できます
            
foreach中に削除できないので一旦別のに入れて削除している
        
 ドラッグ開始
// exeファイルパス設定
proc.StartInfo.FileName = "exeへのフルパス";
// 引数設定
proc.StartInfo.ArgumentList.Add("引数");
// exe呼出
proc.Start();
// exeの終了を待つ
proc.WaitForExit();

Navigate("https:
qiita.com");
            
 false
char c[6]; 
 (6byte)
public static bool IsNumeric(this Type type)//{//  return type.IsPrimitive &amp;&amp; (type != typeof(bool)) &amp;&amp; (type != //typeof(char));//},,,public static bool IsNullable(this Type type){return type.IsGenericType &amp;&amp; (type.GetGenericTypeDefinition() == typeof(Nullable&lt;&gt;));},,,public static Type GetUnderlyingType(this Type nullableType){return nullableType.IsNullable() ? Nullable.GetUnderlyingType(nullableType) : null;}public static Type GetUnderlyingTypeOrSelf(this Type type){return type.GetUnderlyingType() ?? type;},,,public static bool IsWithinRange&lt;T&gt;(this T value, T? lower, T? upper) where T : struct, IComparable&lt;T&gt;{if (lower.HasValue &amp;&amp; (value.CompareTo(lower.Value) &lt; 0)) return false;if (upper.HasValue &amp;&amp; (value.CompareTo(upper.Value) &gt; 0)) return false;return true;},,,
        
 現時点での手順を返す。
            
角度が１０度未満であった場合にジャンプの段階数のリセットする
            
クラスもできる
            
AnimationCode
            
 example of calling grains from the initialized client
abstract class AFoodFactory { } 
 割愛
                
 例外が発生したときの処理
    
 処理// 具体例

while do{int i = 0;do {i++;MessageBox.Show (i.ToString ());} while (i &lt;= 3);},,,for (int i=0; i &lt; 10; i++) {int j = 0;while (true) {textBox1.Text += string.Format("({0:d},{1:d}) ",i,j);if (i * j == 25) goto EXITLOOP;j++;if (12 &lt; j) break;}}EXITLOOP: ;textBox1.Text += "\r\nComplete";,,,
            
    .ForEach(f =&gt; f.CheckState = (f == thisItem) ? CheckState.Indeterminate : CheckState.Unchecked);
 
同様に,大きい順でのソート.// 実際の列挙(小さい順)

foreach(var tekito in hogehoge){ 実際の列挙(大きい順)
        wRange = string.Format("{0}!A{1}:B{1}", sheetName, rowNumber);  
行を追加
    
 購読に関連するオブジェクトをまとめた状態オブジェクトを返す
        return NullSample.Instance;
何にも該当しない場合もNullを返すとややこしくなるのでNullObjectパターンを作っておくと優しい。
    
 Command
            
foreach
//HTTPリクエストを作成する
HttpWebRequest req = PathUtil.getHttpWebRequest(uploadURL, true, new NetworkCredential("ユーザーID", "パスワード"));

req.AllowWriteStreamBuffering = false; 
デフォルト値はtrueだが、1GB近いサイズのファイルをアップロードした時の処理遅延対策としてfalseに変更する。
    
 認証
    
 テストケース一覧。
                
  タスクバーは右か下
        
 (DataSourceUpdateMode.OnPropertyChanged だと、TextBox.TextChanged イベント後にデータソースが更新されるため)
        
ReadOnly_RP.Value = "Changed from VM";コンパイルエラー
//@Zuishinさんに教えていただいた方法
string fileCount;

using (var swTextC = new StreamWriter($@"{documentFolderPath}\c.txt"))  
 こちらは案1と同じで重ねただけ。
        
 例外処理
            
 すでに再生中なら変えない
            
 ファイルパスの出力
 int b = a &lt;&lt; 14;  
 二進数の 0100000000000000 (左に14，1が捨てられた)
y = Ax + Bstruct LinearEquation{public double A { get; set; }public double B { get; set; }public double Solve(double x) =&gt; this.A * x + this.B;},,,public static LinearEquation Approximate(Coordinate[] data){if (data == null) throw new ArgumentNullException(nameof(data));var n = data.Length;double Σx = 0, Σy = 0, Σxx = 0, Σxy = 0;for (int i = 0; i &lt; n; i++){var x = data[i].X;var y = data[i].Y;Σx += x;Σy += y;Σxx += Math.Pow(x, 2);Σxy += x * y;}return new LinearEquation(){A = (n * Σxy - Σx * Σy) / (n * Σxx - Math.Pow(Σx, 2)),B = (Σy - Σx * a) / n,};},,,// y = B･exp(Ax)struct ExponentialEquation{public double A { get; set; }public double B { get; set; }public double Solve(double x) =&gt; Math.Exp(this.A * x) * this.B;public static ExponentialEquation Approximate(Coordinate[] data){var pt = data.Select(item =&gt; new Coordinate(item.X, Math.Log(item.Y)));var eq = LinearEquation.Approximate(pt.ToArray());return new ExponentialEquation() { A = eq.A, B = Math.Exp(eq.B) };}},,,y = B･exp(Ax)struct ExponentialEquation{public double A { get; set; }public double B { get; set; }public double Solve(double x) =&gt; Math.Exp(this.A * x) * this.B;public static ExponentialEquation Approximate(Coordinate[] data){var pt = data.Select(item =&gt; new Coordinate(item.X, Math.Log(item.Y)));var eq = LinearEquation.Approximate(pt.ToArray());return new ExponentialEquation() { A = eq.A, B = Math.Exp(eq.B) };}},,,
            
 検証する
        
メッシュを表示します
        
 Dictionary with EqualityComparer
            
 キャレット位置を復元
    
（略）
                
 タスクがキャンセルされるとここが実行される
        
 エラーになった行の DataRow とインデックスを取得する。
    
 処理
        
 まだ表示されていない場合はインスタンスを生成する
        
 波の高さをもとにレンダリング用のテクスチャを作成
        
小指------------------------------------------------------------------------------------
        
 省略
            
dataSourceObjectにインデクサ（food[]）を指定
        
ユーザーのログイン名のみを抽出
姓が入力されている場合に、名が入力されているか検証する。RuleFor(x =&gt; x.Surname).NotNull().DependentRules(() =&gt; {RuleFor(x =&gt; x.Forename).NotNull();});,,,public class AnonymouseValidator&lt;T&gt; : AbstractValidator&lt;T&gt;{public AnonymouseValidator(Action&lt;AnonymouseValidator&lt;T&gt;&gt; validator) =&gt; validator(this);},,,public static class RuleBuilderExtensions{public static IRuleBuilderOptions&lt;T, TProperty&gt; SetAnonymouseValidator&lt;T, TProperty&gt;(this IRuleBuilder&lt;T, TProperty&gt; ruleBuilder, Action&lt;AbstractValidator&lt;TProperty&gt;&gt; validator)=&gt; ruleBuilder.SetValidator(new AnonymouseValidator&lt;TProperty&gt;(validator));},,,RuleFor(_ =&gt; _).SetAnonymouseValidator(validator =&gt;{validator.RuleFor(x =&gt; x.Surname).NotNull();validator.RuleFor(x =&gt; x.Forename).NotNull();}).DependentRules(() =&gt;{RuleFor(x =&gt; x.Nickname).NotNull();});,,,// 姓が入力されている場合に、名が入力されているか検証する。
RuleFor(x =&gt; x.Surname).NotNull().DependentRules(() =&gt; {

public OutArgument&lt;String&gt; result { get; set; } 
 戻り値はstring
            result.Set(context, text + " Hello world.");  
 追記
        
AsyncなMain
            dict[args.BluetoothAddress] = args.Advertisement.LocalName; 
こうでないと重複例外が出る
    
 特別処理
        Console.WriteLine($"Osako = {y}");
 Osako = 4
                new CardImage("http:
adaptivecards.iocontentcats2.png"),
        
 新規追加
            
 USER -&gt; UserViewModel
        
 yield to skip a frame
  
 C:AppAssetsStreamingAssetssamplehoge.png
      
入力文字列をパーズして戻す
                
 答えの食い違い
    
VRMLipSync用フィールド変数
        xmlns:x="http:
schemas.microsoft.comwinfx2006xaml"
// ここはcreateInstanceで生成するインスタンスによって処理が変わる。
instance.Method();
本当は名前が不適切なことはわかっているが、継承と比較するためにこうしたinterface IDerived{void Func();}class Derived : IDerived{public void Func(){ }},,,//本当は名前が不適切なことはわかっているが、継承と比較するためにこうした
interface IDerived

    public class MainActivity : global::Xamarin.Forms.Platform.Android.FormsAppCompatActivity
global::~が
//事前処理でQueueには何か入ってる
var hoge1 = new hoge();
//まとめて突っ込みたいコレクションが出来てしまった。
hoge[] array = hogehoge();
//forでなくQueueに1行で突っ込む
重複を除きたいならUnion 今回のケースでは冗長だった・・・。
//重複を許容するならConcat↓
queue = new Queue&lt;hoge&gt;(queue.ToArray().Concat(array));

                
指同士の中心位置がピンチ操作の中心となるようにカメラを平行移動
// これはダメらしくnullになる
 string Version = typeof(Application).Assembly.GetCustomAttribute&lt;AssemblyVersionAttribute&gt;()?.Version;
// こうする
string Version = typeof(Application).Assembly.GetName().Version.ToString();

    
 ログ出力
response = await client.PostAsync("https:
api.cmtelecom.comv1.0otpverify", content);
    
 ダイアログ終了イベント.
            if (time &gt;= 1) 
 currentTime &gt;= lifeTimes[i].Value + deathTime
    
 選択中のスキル
        
 迷路をConsoleに表示する [Debug用]
        
復元ペナルティがあればここに書いてSave()する
    var response = client.PostAsync("https:
gw.cmtelecom.comv1.0message", content).GetAwaiter().GetResult();
    
覚えているスキル SkillBaseはScriptableObjectを継承
      string category = "C#"; 
=&gt; 検索条件として渡されたと仮定
      
入力文字列をパーズして戻す
        
是非チャレンジしてみてくださいね！
            _animator.SetBool("Idle", false);    
 &lt;- 追加//（後略）
,,,

    
 プロパティ変更通知
            
MaxValue(範囲調べる)
        
 ここでマネージリソースを解放
    
 Update is called once per frame
    
 問題なし。IReadOnlyCollection&lt;string&gt;型として公開するのはおすすめしない問題のある値の公開。外部から値を変更できてしまう！public static string[] MessagesProperty { get; } ={Message1,Message2,Message3};,,,static readonly string[] _Messages ={Message1,Message2,Message3};// バイナリ互換性を保ったまま、値を変更できないように修正。public static string[] MessagesProperty{get{return _Messages.ToArray();}},,,// 問題のある値の公開。外部から値を変更できてしまう！
public static string[] MessagesProperty { get; } =
バイナリ互換性を保ったまま、値を変更できないように修正。public static string[] MessagesProperty{get{return _Messages.ToArray();}},,,// バイナリ互換性を保ったまま、値を変更できないように修正。
public static string[] MessagesProperty

            
 処理を分ける
                        lArea.Reverse(); 
 出現箇所を後ろから処理
            
 a = null;    nullは「非Null許容型であるため、NullをStrictSに変換できません」となる。
            proc.Verb = "RunAs";        
 管理者として実行する為のおまじない
            
AttributeFormatterResolver.Instance,
                long span = 1000 * 10;  
 = 1ms 
    
Array.Sortに変更。文字列比較用メソッドprivate int InternalCompare(int indexA, int indexB, int maxLength){return CultureInfo.CurrentCulture.CompareInfo.Compare(this._text,indexA,(maxLength - indexA),this._text,indexB,(maxLength - indexB),CompareOptions.None);},,,//文字列比較用メソッド
private int InternalCompare(int indexA, int indexB, int maxLength)

    date = SystemDate.GetSystemDate() 
DateTime.Now()を返すだけのメソッド
                    
 本当にやりたかった処理
  
 This lambda determines whether user consent for non-essential cookies is needed for a given request.
    #endregion 
) ===== BUNDLE_SIZE_API =====
// Channel.Intercept 拡張メソッドは内部で DefaultCallInvoker を生成して返しています。
CallInvoker callInvoker = new Channel("localhost:50000", ChannelCredentials.Insecure)
// ClientStreaming クライアントサイド用
public virtual AsyncClientStreamingCall&lt;TRequest, TResponse&gt; AsyncClientStreamingCall&lt;TRequest, TResponse&gt;(
// ClientStreaming サーバーサイド用
public virtual Task&lt;TResponse&gt; ClientStreamingServerHandler&lt;TRequest, TResponse&gt;(

                
登録されていない場合は登録する
                    
最後のデータは、以下で抽出
                        
最大リトライ回数に達した場合System.Console.WriteLine("Hello World!")をリトライ対象のメソッドに置き換えて、ご使用ください。RetryExecutorNameSpace.RetryExecutor.Execute(4,1000, () =&gt; { System.Console.WriteLine("Hello World!"); });,,,// System.Console.WriteLine("Hello World!")をリトライ対象のメソッドに置き換えて、ご使用ください。
RetryExecutorNameSpace.RetryExecutor.Execute(4,1000, () =&gt; { System.Console.WriteLine("Hello World!"); });

// IronPython ボイラープレート
var engine = Python.CreateEngine();
// 戻り値 k の println
var variables = scope.GetVariable&lt;dynamic&gt;("path");

    
 ダブルクリックのアクション
    
 Update is called once per frame
list = list.OrderByDescending(n =&gt; n).ToList(); 
16 13 10 4 3 2 1
            gameObject.name = "Test"; 
 UnityException
    
 天気状態型のweather_caseを宣言し、それによってswitchでわける
    if (x &lt;= 0 || y &lt;= 0) return 0;
最大公約数を求めるのに0やマイナスを渡すことはないだろうけど、念のため
        
 迷路をConsoleに表示する
    
 要らなくなったコンポーネントを削除するとか、
// https://docs.microsoft.com/ja-jp/windows/uwp/devices-sensors/ble-beacon よりPickUp
BluetoothLEAdvertisementWatcher watcher = new BluetoothLEAdvertisementWatcher();

        
 PlayableTrackのClip上でシークバーが移動するたびに呼ばれ続ける（PrepareFrameの後）
    
 Update is called once per frame
// 初期処理
NVelocity.App.Velocity.Init();
// コンテキストを生成する
NVelocity.VelocityContext context = new NVelocity.VelocityContext();
// 変数と値の組み合わせを格納する
context.Put("name", "あいうえお");
// テンプレートファイルを指定してテキストを生成する
StringBuilder sb = new StringBuilder();

    
 例外発生時はチェックNG
                
 ページ取得のループ
                        
no data
            
 List events.
    
 ①ifのスコープ内なので変数strが利用可能// 変数objがstring型であるならばキャストして変数strとして定義し、
 変数objがstring型でないならreturnする
// ①if文のスコープ外であるはずだが、変数strが利用できる
Console.WriteLine(str);
if(!(obj is string)) return; 変数objがstring型でないならreturnする// if文の判定後にキャスト
string str = (string)obj;

// 新規のExcelファイルを作成
SimpleExcelCreator simpleExcelCreator = new SimpleExcelCreator("test.xlsx");
// テンプレートとなるExcelを基にファイル作成
SimpleExcelCreator simpleExcelCreator = new SimpleExcelCreator("template.xlsx", "use_template.xlsx");
// 保存
simpleExcelCreator.Save();
// シート追加
simpleExcelCreator.AddSheet("SampleSheet1");
// シート選択
simpleExcelCreator.SelectSheet("SampleSheet2");
// 選択中のシート名変更
simpleExcelCreator.SetSheetName("ChangeName");
// シートの削除
simpleExcelCreator.RemoveSheet("SampleSheet3");
// アルファベットとy座標でデータ書込
simpleExcelCreator.WriteCell("A", 1, 1000);
// x,y座標指定でデータ書込(0は範囲外になります)
simpleExcelCreator.WriteCell(1, 1, "temp");
// セル指定でデータ書込
simpleExcelCreator.WriteCell("A2", "temp");
// 行のコピー&amp;ペースト
simpleExcelCreator.RowCopyPaste(2, 5, false);
// コピーした行を挿入
simpleExcelCreator.RowCopyPaste(2, 5, true);

    byte[] buf = img.GetPropertyItem(0x5100).Value; 
PropertyTagFrameDelay
        app.UseLocalTimeZone(); 
 ← ココ
                    ctxt.Acceptable = true;    
&lt;- 委譲元のAcceptableの値を変更
            
 属性でルーティング
  .AsEnumerable() 
 &lt;- IEnumerable&lt;T&gt; に切り替わるforeach (var title in query) {Console.WriteLine(title); クエリが実行される
                ImmAssociateContext(handle, imeRet);                  
 IMEを復元
        
 Column for Azure Search soft delete
        
 今回は使い捨てでマイグレーションを行わないのでこれでOK
        
 通常あり得ないと思われるが、オーバーフローされると再度アクションが実行されてしまうので、越えたところで止める
  
結果表示
        
 ファイルダウンロード
        
局番なしの場合の変換
            app.UsePathBase("
pathtoproject_directory");  ※ app.UseStaticFiles();に影響します
    
 処理3
            
 In-memory database only exists while the connection is open
    string to = "";
 コピー先 
// 型を書けないので変数をnullで初期化できない
 絶対にnullが返ってくる引数でGetMethodを呼び出して型推論させる
stringを引数に使うほうならGetMethodでも大丈夫だけどAssemblyNameのほうを使用したかったので使わない// var assemblyLoadMethodInfo = assemblyType.GetMethod("Load", new[] { typeof(string) });foreach (var method in assemblyType.GetMethods()){if (method.ToString() == "System.Reflection.Assembly Load(System.Reflection.AssemblyName)"){assemblyLoadMethodInfo = method;break;}},,,foreach (var assemblyName in assembly.GetReferencedAssemblies()){var loadedAssembly = assemblyLoadMethodInfo.Invoke(null, new[] { assemblyName });},,,// Instance | NonPublicのフラグ作成var bindingFlagsType = assemblyType.Assembly.GetType("System.Reflection.BindingFlags");// 既存のEnum(MemberType)からenumの型情報取得var enumType = assemblyLoadMethodInfo.MemberType.GetType().BaseType;var toObjectMethodInfo = enumType.GetMethod("ToObject", new[] { enumType.GetType().BaseType, typeof(int) });const int BINDING_FLAGS_INSTANCE_AND_NONPUBLIC = 36;var instanceAndNonPublic = toObjectMethodInfo.Invoke(null, new object[] { bindingFlagsType, BINDING_FLAGS_INSTANCE_AND_NONPUBLIC });var typeType = assemblyLoadMethodInfo.GetType().GetType();var getFieldMethodInfo = typeType.GetMethod("GetField", new[] { typeof(string), bindingFlagsType });var invocationFlagsField = getFieldMethodInfo.Invoke(assemblyLoadMethodInfo.GetType(), new object[] { "m_invocationFlags", instanceAndNonPublic });// invocationFlagsFieldがobjectなのでGet/Setもリフレクション経由var filedGetValueMethodInfo = invocationFlagsField.GetType().GetMethod("GetValue", new[] { typeof(object) });var filedSetValueMethodInfo = invocationFlagsField.GetType().GetMethod("SetValue", new[] { typeof(object), typeof(object) });// INITIALIZEDのフラグ設定var originalInvocationFlags = filedGetValueMethodInfo.Invoke(invocationFlagsField, new object[] { assemblyLoadMethodInfo });const int INVOCATION_FLAGS_INITIALIZED = 0x00000001;var invocationFlags = toObjectMethodInfo.Invoke(null, new object[] { originalInvocationFlags.GetType(), INVOCATION_FLAGS_INITIALIZED });filedSetValueMethodInfo.Invoke(invocationFlagsField, new object[] { assemblyLoadMethodInfo, invocationFlags });,,,public static object FindType(object assembly, object assemblyLoadMethodInfo, string typeName){var getTypeMethodInfo = assembly.GetType().GetMethod("GetType", new[] { typeof(string) });var consoleType = getTypeMethodInfo.Invoke(assembly, new[] { typeName });if (consoleType != null){return consoleType;}var getReferencedAssembliesMethodInfo = assembly.GetType().GetMethod("GetReferencedAssemblies");var assemblies = getReferencedAssembliesMethodInfo.Invoke(assembly, new object[0]) as object[];foreach (var refAssembyName in assemblies){var invokeMethodInfo = assemblyLoadMethodInfo.GetType().GetMethod("Invoke", new [] { typeof(object), typeof(object[]) });var refAssembly = invokeMethodInfo.Invoke(assemblyLoadMethodInfo, new object[] { null, new object[] { refAssembyName } });consoleType = FindType(refAssembly, assemblyLoadMethodInfo, typeName);if (consoleType != null){return consoleType;}}return null;},,,var consoleType = FindType(assembly, assemblyLoadMethodInfo, "System.Console");var getMethodMethodInfo = consoleType.GetType().GetMethod("GetMethod", new[] { typeof(string), (new []{ typeof(string) }).GetType() });var writeLineMethodInfo = getMethodMethodInfo.Invoke(consoleType, new object[] { "WriteLine", new[] { typeof(string) } });var invokeMethodInfo = writeLineMethodInfo.GetType().GetMethod("Invoke", new [] { typeof(object), typeof(object[]) });invokeMethodInfo.Invoke(writeLineMethodInfo, new object[] { null, new object[] { "Hello, World!!" } });,,,// アセンブリのロードは文字列直接のほうを使うvar assemblyLoadMethodInfo = assemblyType.GetMethod("Load", new[] { typeof(string) });// アセンブリのロードとタイプの取得var consoleAssembly = assemblyLoadMethodInfo.Invoke(null, new[] { "System.Console" });var getTypeMethodInfo = consoleAssembly.GetType().GetMethod("GetType", new[] { typeof(string) });var consoleType = getTypeMethodInfo.Invoke(consoleAssembly, new[] { "System.Console" });,,,// stringを引数に使うほうならGetMethodでも大丈夫だけどAssemblyNameのほうを使用したかったので使わない
 var assemblyLoadMethodInfo = assemblyType.GetMethod("Load", new[] { typeof(string) });
// Instance | NonPublicのフラグ作成
var bindingFlagsType = assemblyType.Assembly.GetType("System.Reflection.BindingFlags");
既存のEnum(MemberType)からenumの型情報取得var enumType = assemblyLoadMethodInfo.MemberType.GetType().BaseType;var toObjectMethodInfo = enumType.GetMethod("ToObject", new[] { enumType.GetType().BaseType, typeof(int) });const int BINDING_FLAGS_INSTANCE_AND_NONPUBLIC = 36;var instanceAndNonPublic = toObjectMethodInfo.Invoke(null, new object[] { bindingFlagsType, BINDING_FLAGS_INSTANCE_AND_NONPUBLIC });var typeType = assemblyLoadMethodInfo.GetType().GetType();var getFieldMethodInfo = typeType.GetMethod("GetField", new[] { typeof(string), bindingFlagsType });var invocationFlagsField = getFieldMethodInfo.Invoke(assemblyLoadMethodInfo.GetType(), new object[] { "m_invocationFlags", instanceAndNonPublic });// invocationFlagsFieldがobjectなのでGet/Setもリフレクション経由var filedGetValueMethodInfo = invocationFlagsField.GetType().GetMethod("GetValue", new[] { typeof(object) });var filedSetValueMethodInfo = invocationFlagsField.GetType().GetMethod("SetValue", new[] { typeof(object), typeof(object) });// INITIALIZEDのフラグ設定var originalInvocationFlags = filedGetValueMethodInfo.Invoke(invocationFlagsField, new object[] { assemblyLoadMethodInfo });const int INVOCATION_FLAGS_INITIALIZED = 0x00000001;var invocationFlags = toObjectMethodInfo.Invoke(null, new object[] { originalInvocationFlags.GetType(), INVOCATION_FLAGS_INITIALIZED });filedSetValueMethodInfo.Invoke(invocationFlagsField, new object[] { assemblyLoadMethodInfo, invocationFlags });,,,public static object FindType(object assembly, object assemblyLoadMethodInfo, string typeName){var getTypeMethodInfo = assembly.GetType().GetMethod("GetType", new[] { typeof(string) });var consoleType = getTypeMethodInfo.Invoke(assembly, new[] { typeName });if (consoleType != null){return consoleType;}var getReferencedAssembliesMethodInfo = assembly.GetType().GetMethod("GetReferencedAssemblies");var assemblies = getReferencedAssembliesMethodInfo.Invoke(assembly, new object[0]) as object[];foreach (var refAssembyName in assemblies){var invokeMethodInfo = assemblyLoadMethodInfo.GetType().GetMethod("Invoke", new [] { typeof(object), typeof(object[]) });var refAssembly = invokeMethodInfo.Invoke(assemblyLoadMethodInfo, new object[] { null, new object[] { refAssembyName } });consoleType = FindType(refAssembly, assemblyLoadMethodInfo, typeName);if (consoleType != null){return consoleType;}}return null;},,,var consoleType = FindType(assembly, assemblyLoadMethodInfo, "System.Console");var getMethodMethodInfo = consoleType.GetType().GetMethod("GetMethod", new[] { typeof(string), (new []{ typeof(string) }).GetType() });var writeLineMethodInfo = getMethodMethodInfo.Invoke(consoleType, new object[] { "WriteLine", new[] { typeof(string) } });var invokeMethodInfo = writeLineMethodInfo.GetType().GetMethod("Invoke", new [] { typeof(object), typeof(object[]) });invokeMethodInfo.Invoke(writeLineMethodInfo, new object[] { null, new object[] { "Hello, World!!" } });,,,// アセンブリのロードは文字列直接のほうを使うvar assemblyLoadMethodInfo = assemblyType.GetMethod("Load", new[] { typeof(string) });// アセンブリのロードとタイプの取得var consoleAssembly = assemblyLoadMethodInfo.Invoke(null, new[] { "System.Console" });var getTypeMethodInfo = consoleAssembly.GetType().GetMethod("GetType", new[] { typeof(string) });var consoleType = getTypeMethodInfo.Invoke(consoleAssembly, new[] { "System.Console" });,,,// 既存のEnum(MemberType)からenumの型情報取得
var enumType = assemblyLoadMethodInfo.MemberType.GetType().BaseType;
invocationFlagsFieldがobjectなのでGet/Setもリフレクション経由var filedGetValueMethodInfo = invocationFlagsField.GetType().GetMethod("GetValue", new[] { typeof(object) });var filedSetValueMethodInfo = invocationFlagsField.GetType().GetMethod("SetValue", new[] { typeof(object), typeof(object) });// INITIALIZEDのフラグ設定var originalInvocationFlags = filedGetValueMethodInfo.Invoke(invocationFlagsField, new object[] { assemblyLoadMethodInfo });const int INVOCATION_FLAGS_INITIALIZED = 0x00000001;var invocationFlags = toObjectMethodInfo.Invoke(null, new object[] { originalInvocationFlags.GetType(), INVOCATION_FLAGS_INITIALIZED });filedSetValueMethodInfo.Invoke(invocationFlagsField, new object[] { assemblyLoadMethodInfo, invocationFlags });,,,public static object FindType(object assembly, object assemblyLoadMethodInfo, string typeName){var getTypeMethodInfo = assembly.GetType().GetMethod("GetType", new[] { typeof(string) });var consoleType = getTypeMethodInfo.Invoke(assembly, new[] { typeName });if (consoleType != null){return consoleType;}var getReferencedAssembliesMethodInfo = assembly.GetType().GetMethod("GetReferencedAssemblies");var assemblies = getReferencedAssembliesMethodInfo.Invoke(assembly, new object[0]) as object[];foreach (var refAssembyName in assemblies){var invokeMethodInfo = assemblyLoadMethodInfo.GetType().GetMethod("Invoke", new [] { typeof(object), typeof(object[]) });var refAssembly = invokeMethodInfo.Invoke(assemblyLoadMethodInfo, new object[] { null, new object[] { refAssembyName } });consoleType = FindType(refAssembly, assemblyLoadMethodInfo, typeName);if (consoleType != null){return consoleType;}}return null;},,,var consoleType = FindType(assembly, assemblyLoadMethodInfo, "System.Console");var getMethodMethodInfo = consoleType.GetType().GetMethod("GetMethod", new[] { typeof(string), (new []{ typeof(string) }).GetType() });var writeLineMethodInfo = getMethodMethodInfo.Invoke(consoleType, new object[] { "WriteLine", new[] { typeof(string) } });var invokeMethodInfo = writeLineMethodInfo.GetType().GetMethod("Invoke", new [] { typeof(object), typeof(object[]) });invokeMethodInfo.Invoke(writeLineMethodInfo, new object[] { null, new object[] { "Hello, World!!" } });,,,// アセンブリのロードは文字列直接のほうを使うvar assemblyLoadMethodInfo = assemblyType.GetMethod("Load", new[] { typeof(string) });// アセンブリのロードとタイプの取得var consoleAssembly = assemblyLoadMethodInfo.Invoke(null, new[] { "System.Console" });var getTypeMethodInfo = consoleAssembly.GetType().GetMethod("GetType", new[] { typeof(string) });var consoleType = getTypeMethodInfo.Invoke(consoleAssembly, new[] { "System.Console" });,,,// invocationFlagsFieldがobjectなのでGet/Setもリフレクション経由
var filedGetValueMethodInfo = invocationFlagsField.GetType().GetMethod("GetValue", new[] { typeof(object) });
INITIALIZEDのフラグ設定var originalInvocationFlags = filedGetValueMethodInfo.Invoke(invocationFlagsField, new object[] { assemblyLoadMethodInfo });const int INVOCATION_FLAGS_INITIALIZED = 0x00000001;var invocationFlags = toObjectMethodInfo.Invoke(null, new object[] { originalInvocationFlags.GetType(), INVOCATION_FLAGS_INITIALIZED });filedSetValueMethodInfo.Invoke(invocationFlagsField, new object[] { assemblyLoadMethodInfo, invocationFlags });,,,public static object FindType(object assembly, object assemblyLoadMethodInfo, string typeName){var getTypeMethodInfo = assembly.GetType().GetMethod("GetType", new[] { typeof(string) });var consoleType = getTypeMethodInfo.Invoke(assembly, new[] { typeName });if (consoleType != null){return consoleType;}var getReferencedAssembliesMethodInfo = assembly.GetType().GetMethod("GetReferencedAssemblies");var assemblies = getReferencedAssembliesMethodInfo.Invoke(assembly, new object[0]) as object[];foreach (var refAssembyName in assemblies){var invokeMethodInfo = assemblyLoadMethodInfo.GetType().GetMethod("Invoke", new [] { typeof(object), typeof(object[]) });var refAssembly = invokeMethodInfo.Invoke(assemblyLoadMethodInfo, new object[] { null, new object[] { refAssembyName } });consoleType = FindType(refAssembly, assemblyLoadMethodInfo, typeName);if (consoleType != null){return consoleType;}}return null;},,,var consoleType = FindType(assembly, assemblyLoadMethodInfo, "System.Console");var getMethodMethodInfo = consoleType.GetType().GetMethod("GetMethod", new[] { typeof(string), (new []{ typeof(string) }).GetType() });var writeLineMethodInfo = getMethodMethodInfo.Invoke(consoleType, new object[] { "WriteLine", new[] { typeof(string) } });var invokeMethodInfo = writeLineMethodInfo.GetType().GetMethod("Invoke", new [] { typeof(object), typeof(object[]) });invokeMethodInfo.Invoke(writeLineMethodInfo, new object[] { null, new object[] { "Hello, World!!" } });,,,// アセンブリのロードは文字列直接のほうを使うvar assemblyLoadMethodInfo = assemblyType.GetMethod("Load", new[] { typeof(string) });// アセンブリのロードとタイプの取得var consoleAssembly = assemblyLoadMethodInfo.Invoke(null, new[] { "System.Console" });var getTypeMethodInfo = consoleAssembly.GetType().GetMethod("GetType", new[] { typeof(string) });var consoleType = getTypeMethodInfo.Invoke(consoleAssembly, new[] { "System.Console" });,,,// INITIALIZEDのフラグ設定
var originalInvocationFlags = filedGetValueMethodInfo.Invoke(invocationFlagsField, new object[] { assemblyLoadMethodInfo });
アセンブリのロードは文字列直接のほうを使うvar assemblyLoadMethodInfo = assemblyType.GetMethod("Load", new[] { typeof(string) });// アセンブリのロードとタイプの取得var consoleAssembly = assemblyLoadMethodInfo.Invoke(null, new[] { "System.Console" });var getTypeMethodInfo = consoleAssembly.GetType().GetMethod("GetType", new[] { typeof(string) });var consoleType = getTypeMethodInfo.Invoke(consoleAssembly, new[] { "System.Console" });,,,// アセンブリのロードは文字列直接のほうを使う
var assemblyLoadMethodInfo = assemblyType.GetMethod("Load", new[] { typeof(string) });
アセンブリのロードとタイプの取得var consoleAssembly = assemblyLoadMethodInfo.Invoke(null, new[] { "System.Console" });var getTypeMethodInfo = consoleAssembly.GetType().GetMethod("GetType", new[] { typeof(string) });var consoleType = getTypeMethodInfo.Invoke(consoleAssembly, new[] { "System.Console" });,,,// アセンブリのロードとタイプの取得
var consoleAssembly = assemblyLoadMethodInfo.Invoke(null, new[] { "System.Console" });

            
ddlPublishの親コントロールを取得する
// p2 は重複していると扱われて格納されません
HashSet&lt;Player&gt; hash = new HashSet&lt;Player&gt;();
// p2 は重複していると扱われて ArgumentException がスローされます
Dictionary&lt;Player, bool&gt; dic = new Dictionary&lt;Player, bool&gt;();

    
 -&gt; 20181001 12:34:56 +09:00// 現在時刻の１時間後(夏時間考慮込み)
var now1 = DateTimeOffset.Now.AddHours(1);
// 結局出力は(自作した)TimeZoneInfoで変換するので、DateTimeOffsetなら問題ない
jddstTimeZone.ConvertTime(now1);

    Console.WriteLine(a);  
 5が出力される。
        Vector3 cLTxLB = Vector3.Cross(ToLeftTop, ToLeftBottom);
左端
    
 処理...
        
 略...
var filterSize = 5;
ここで1,3,5,7と変更しました。//偶数はガウシアンフィルタの原理上指定できないようです。
偶数を指定するとExceptionが発生します。
//ビットマップに戻します
var filterResult = OpenCvSharp.Extensions.BitmapConverter.ToBitmap(imageMat);

&gt; m.Background = new SolidColorBrush(Colors.Purple); 
ウインドウの背景色が紫色に変わる
beforesecond.Subscribe(new Observer&lt;string&gt;(s =&gt;{Console.WriteLine($"値:{s}");}));// aftersecond.Subscribe(s =&gt; Console.WriteLine($"値:{s}"));,,,public static Observable&lt;U&gt; Select&lt;T, U&gt;(this Observable&lt;T&gt; observable, Func&lt;T, U&gt; select){return new Observable&lt;U&gt;(o =&gt;{observable.Subscribe(v =&gt;{o.OnNext(select(v));});});},,,// beforevar second = new Observable&lt;string&gt;(o =&gt;{root.Subscribe(new Observer&lt;string&gt;(s =&gt;{Console.WriteLine($"'{s}' が流れてきました。2倍にします。");o.OnNext(s + s);}));});// aftervar second = root.Select(s =&gt;{Console.WriteLine($"'{s}' が流れてきました。2倍にします。");return s + s;});,,,public static Observable&lt;T&gt; Where&lt;T&gt;(this Observable&lt;T&gt; observable, Func&lt;T, bool&gt; where){return new Observable&lt;T&gt;(o =&gt;{observable.Subscribe(v =&gt;{if (where(v)){o.OnNext(v);}});});},,,// beforevar third = new Observable&lt;string&gt;(o =&gt;{second.Subscribe(new Observer&lt;string&gt;(s =&gt;{if (s == "ふがふが"){Console.WriteLine("'ふがふが'は先に流しません");}else{o.OnNext(s);}}));});// aftervar third = second.Where(s =&gt;{if (s == "ふがふが"){Console.WriteLine("'ふがふが'は先に流しません");return false;}return true;});,,,Observer&lt;string&gt; source = null;var root = new Observable&lt;string&gt;(o =&gt; source = o);root.Select(s =&gt;{Console.WriteLine($"'{s}' が流れてきました。2倍にします。");return s + s;}).Where(s =&gt;{if (s == "ふがふが"){Console.WriteLine("'ふがふが'は先に流しません");return false;}return true;}).Subscribe(s =&gt; Console.WriteLine($"値:{s}"));Console.WriteLine("値を送信します");source.OnNext("てすと");Console.WriteLine("値を送信します(2回目)");source.OnNext("ふが");Console.WriteLine("値を送信します(3回目)");source.OnNext("ほげほげ");,,,root.Select(s =&gt; s + s).Where(s =&gt; s != "ふがふが").Subscribe(s =&gt; Console.WriteLine($"値:{s}"));,,,aftersecond.Subscribe(s =&gt; Console.WriteLine($"値:{s}"));,,,public static Observable&lt;U&gt; Select&lt;T, U&gt;(this Observable&lt;T&gt; observable, Func&lt;T, U&gt; select){return new Observable&lt;U&gt;(o =&gt;{observable.Subscribe(v =&gt;{o.OnNext(select(v));});});},,,// beforevar second = new Observable&lt;string&gt;(o =&gt;{root.Subscribe(new Observer&lt;string&gt;(s =&gt;{Console.WriteLine($"'{s}' が流れてきました。2倍にします。");o.OnNext(s + s);}));});// aftervar second = root.Select(s =&gt;{Console.WriteLine($"'{s}' が流れてきました。2倍にします。");return s + s;});,,,public static Observable&lt;T&gt; Where&lt;T&gt;(this Observable&lt;T&gt; observable, Func&lt;T, bool&gt; where){return new Observable&lt;T&gt;(o =&gt;{observable.Subscribe(v =&gt;{if (where(v)){o.OnNext(v);}});});},,,// beforevar third = new Observable&lt;string&gt;(o =&gt;{second.Subscribe(new Observer&lt;string&gt;(s =&gt;{if (s == "ふがふが"){Console.WriteLine("'ふがふが'は先に流しません");}else{o.OnNext(s);}}));});// aftervar third = second.Where(s =&gt;{if (s == "ふがふが"){Console.WriteLine("'ふがふが'は先に流しません");return false;}return true;});,,,Observer&lt;string&gt; source = null;var root = new Observable&lt;string&gt;(o =&gt; source = o);root.Select(s =&gt;{Console.WriteLine($"'{s}' が流れてきました。2倍にします。");return s + s;}).Where(s =&gt;{if (s == "ふがふが"){Console.WriteLine("'ふがふが'は先に流しません");return false;}return true;}).Subscribe(s =&gt; Console.WriteLine($"値:{s}"));Console.WriteLine("値を送信します");source.OnNext("てすと");Console.WriteLine("値を送信します(2回目)");source.OnNext("ふが");Console.WriteLine("値を送信します(3回目)");source.OnNext("ほげほげ");,,,root.Select(s =&gt; s + s).Where(s =&gt; s != "ふがふが").Subscribe(s =&gt; Console.WriteLine($"値:{s}"));,,,beforevar second = new Observable&lt;string&gt;(o =&gt;{root.Subscribe(new Observer&lt;string&gt;(s =&gt;{Console.WriteLine($"'{s}' が流れてきました。2倍にします。");o.OnNext(s + s);}));});// aftervar second = root.Select(s =&gt;{Console.WriteLine($"'{s}' が流れてきました。2倍にします。");return s + s;});,,,public static Observable&lt;T&gt; Where&lt;T&gt;(this Observable&lt;T&gt; observable, Func&lt;T, bool&gt; where){return new Observable&lt;T&gt;(o =&gt;{observable.Subscribe(v =&gt;{if (where(v)){o.OnNext(v);}});});},,,// beforevar third = new Observable&lt;string&gt;(o =&gt;{second.Subscribe(new Observer&lt;string&gt;(s =&gt;{if (s == "ふがふが"){Console.WriteLine("'ふがふが'は先に流しません");}else{o.OnNext(s);}}));});// aftervar third = second.Where(s =&gt;{if (s == "ふがふが"){Console.WriteLine("'ふがふが'は先に流しません");return false;}return true;});,,,Observer&lt;string&gt; source = null;var root = new Observable&lt;string&gt;(o =&gt; source = o);root.Select(s =&gt;{Console.WriteLine($"'{s}' が流れてきました。2倍にします。");return s + s;}).Where(s =&gt;{if (s == "ふがふが"){Console.WriteLine("'ふがふが'は先に流しません");return false;}return true;}).Subscribe(s =&gt; Console.WriteLine($"値:{s}"));Console.WriteLine("値を送信します");source.OnNext("てすと");Console.WriteLine("値を送信します(2回目)");source.OnNext("ふが");Console.WriteLine("値を送信します(3回目)");source.OnNext("ほげほげ");,,,root.Select(s =&gt; s + s).Where(s =&gt; s != "ふがふが").Subscribe(s =&gt; Console.WriteLine($"値:{s}"));,,,aftervar second = root.Select(s =&gt;{Console.WriteLine($"'{s}' が流れてきました。2倍にします。");return s + s;});,,,public static Observable&lt;T&gt; Where&lt;T&gt;(this Observable&lt;T&gt; observable, Func&lt;T, bool&gt; where){return new Observable&lt;T&gt;(o =&gt;{observable.Subscribe(v =&gt;{if (where(v)){o.OnNext(v);}});});},,,// beforevar third = new Observable&lt;string&gt;(o =&gt;{second.Subscribe(new Observer&lt;string&gt;(s =&gt;{if (s == "ふがふが"){Console.WriteLine("'ふがふが'は先に流しません");}else{o.OnNext(s);}}));});// aftervar third = second.Where(s =&gt;{if (s == "ふがふが"){Console.WriteLine("'ふがふが'は先に流しません");return false;}return true;});,,,Observer&lt;string&gt; source = null;var root = new Observable&lt;string&gt;(o =&gt; source = o);root.Select(s =&gt;{Console.WriteLine($"'{s}' が流れてきました。2倍にします。");return s + s;}).Where(s =&gt;{if (s == "ふがふが"){Console.WriteLine("'ふがふが'は先に流しません");return false;}return true;}).Subscribe(s =&gt; Console.WriteLine($"値:{s}"));Console.WriteLine("値を送信します");source.OnNext("てすと");Console.WriteLine("値を送信します(2回目)");source.OnNext("ふが");Console.WriteLine("値を送信します(3回目)");source.OnNext("ほげほげ");,,,root.Select(s =&gt; s + s).Where(s =&gt; s != "ふがふが").Subscribe(s =&gt; Console.WriteLine($"値:{s}"));,,,beforevar third = new Observable&lt;string&gt;(o =&gt;{second.Subscribe(new Observer&lt;string&gt;(s =&gt;{if (s == "ふがふが"){Console.WriteLine("'ふがふが'は先に流しません");}else{o.OnNext(s);}}));});// aftervar third = second.Where(s =&gt;{if (s == "ふがふが"){Console.WriteLine("'ふがふが'は先に流しません");return false;}return true;});,,,Observer&lt;string&gt; source = null;var root = new Observable&lt;string&gt;(o =&gt; source = o);root.Select(s =&gt;{Console.WriteLine($"'{s}' が流れてきました。2倍にします。");return s + s;}).Where(s =&gt;{if (s == "ふがふが"){Console.WriteLine("'ふがふが'は先に流しません");return false;}return true;}).Subscribe(s =&gt; Console.WriteLine($"値:{s}"));Console.WriteLine("値を送信します");source.OnNext("てすと");Console.WriteLine("値を送信します(2回目)");source.OnNext("ふが");Console.WriteLine("値を送信します(3回目)");source.OnNext("ほげほげ");,,,root.Select(s =&gt; s + s).Where(s =&gt; s != "ふがふが").Subscribe(s =&gt; Console.WriteLine($"値:{s}"));,,,aftervar third = second.Where(s =&gt;{if (s == "ふがふが"){Console.WriteLine("'ふがふが'は先に流しません");return false;}return true;});,,,Observer&lt;string&gt; source = null;var root = new Observable&lt;string&gt;(o =&gt; source = o);root.Select(s =&gt;{Console.WriteLine($"'{s}' が流れてきました。2倍にします。");return s + s;}).Where(s =&gt;{if (s == "ふがふが"){Console.WriteLine("'ふがふが'は先に流しません");return false;}return true;}).Subscribe(s =&gt; Console.WriteLine($"値:{s}"));Console.WriteLine("値を送信します");source.OnNext("てすと");Console.WriteLine("値を送信します(2回目)");source.OnNext("ふが");Console.WriteLine("値を送信します(3回目)");source.OnNext("ほげほげ");,,,root.Select(s =&gt; s + s).Where(s =&gt; s != "ふがふが").Subscribe(s =&gt; Console.WriteLine($"値:{s}"));,,,
        
 データが取得できなかった場合
    
 return ref b;  これは返せない// x = 100; // これはNG

// readonly int z = a; // これもNG
,,,

    
 SE再生.
        return false; 
 見つからなかった
    
 アクセス日時を現在のローカル時刻で更新する
string name = user.Name; 
 =&gt; user が null なら System.NullReferenceException// if 文
string name;
// 三項演算子
var name = (user == null) ? null : user.Name;

            
IntPtr module = Marshal.GetHINSTANCE(typeof(KeyboardHook).Assembly.GetModules()[0]);  ここを消すかコメントアウト
        
省略
    
 ユーザーIDに一致するユーザーがいない場合もここに来る
        
ダイアログが開いたときにダイアログ結果をNullに設定
            
 加算の場合はアルファ値を0.0 ~ 0.5, 乗算の場合は0.5 ~ 1.0になるように変換をかける
    
 Update is called once per frame
                
インスタンス生成
            
 BPlusTree
        
 迷路をConsoleに表示する
        
 This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            
 再びインメモリ DB から値を取り出してテスト
    
 割愛// 呼び出し
AsyncClientStreamingCall&lt;string, string&gt; call1;
// IAsyncRequestStreamingCall&lt;TRequest&gt; の拡張メソッドとして定義すれば次のように呼び出せます
await call1.AsRequestStreamingCall().SendRequestsAndCompleteAsync(requests).ConfigureAwait(false);

    
 2.添付ファイル配列に追加// 添付ファイル実体配列、添付ファイル情報配列をそれぞれセット
messageThreadType.file = files;

            
トリミングしたビットマップを取得
            System.Console.Out.WriteLine(FormatPhoneNumber("08001112222")); 
 0800:OK
        
 POST apibbs
        
認識結果の準備が完了したコールバック
        
左足
        Console.WriteLine(AppState.Active.getViewStr());    
&lt;- メソッド呼び出し
    
 テキストボックスを空に戻す。
    private double _weight    { get; set; }  
 体重
            this.socket = IO.Socket("http:
localhost:3000");
            
 マウスの移動量分カメラを回転させる.
            app.UseCookiePolicy();
2.1 コードベース追加
    
 このコンポーネントを付けたオブジェクトのCollider.IsTriggerをONにすること！
        
 string型からMyClass型への変換自作Converterpublic class MyConverter : TypeConverter{public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value){if (value is string){return new MyClass { X = (string)value };}return base.ConvertFrom(context, culture, value);}},,,// 自作Converter
public class MyConverter : TypeConverter

例internal static DateTime GetDate(int year, short month, byte day){return new DateTime(year, month, day);}Func&lt;int, short, byte, DateTime&gt; f = GetDate;Func&lt;int, Func&lt;short, Func&lt;byte, DateTime&gt;&gt;&gt; curry = f.Curry();var result1 = GetDate(2018, 2, 28);var result2 = curry(2018)(2)(28);,,,/// &lt;summary&gt;/// Converts the specified curried delegate to a uncurried delegate./// &lt;/summary&gt;/// &lt;typeparam name="T1"&gt;&lt;/typeparam&gt;/// &lt;typeparam name="T2"&gt;&lt;/typeparam&gt;/// &lt;typeparam name="T3"&gt;&lt;/typeparam&gt;/// &lt;typeparam name="TResult"&gt;&lt;/typeparam&gt;/// &lt;param name="func"&gt;&lt;/param&gt;/// &lt;returns&gt;&lt;/returns&gt;public static Func&lt;T1, T2, T3, TResult&gt; Uncurry&lt;T1, T2, T3, TResult&gt;(this Func&lt;T1, Func&lt;T2, Func&lt;T3, TResult&gt;&gt;&gt; func){return (arg1, arg2, arg3) =&gt; func(arg1)(arg2)(arg3);}// 例internal static DateTime GetDate(int year, short month, byte day){return new DateTime(year, month, day);}Func&lt;int, short, byte, DateTime&gt; f = GetDate;Func&lt;int, Func&lt;short, Func&lt;byte, DateTime&gt;&gt;&gt; curry = f.Curry();Func&lt;int, short, byte, DateTime&gt; uncurry = curry.Uncrry();var result1 = curry(2018)(2)(28);var result2 = uncurry(2018, 2, 28);,,,/// &lt;summary&gt;/// Converts the specified delegate to a lasy evaluation delegate./// &lt;/summary&gt;/// &lt;typeparam name="T1"&gt;&lt;/typeparam&gt;/// &lt;typeparam name="T2"&gt;&lt;/typeparam&gt;/// &lt;typeparam name="TResult"&gt;&lt;/typeparam&gt;/// &lt;param name="func"&gt;&lt;/param&gt;/// &lt;param name="arg1"&gt;&lt;/param&gt;/// &lt;param name="arg2"&gt;&lt;/param&gt;/// &lt;returns&gt;&lt;/returns&gt;public static Func&lt;TResult&gt; Lazy&lt;T1, T2, TResult&gt;(this Func&lt;T1, T2, TResult&gt; func, T1 arg1, T2 arg2){return () =&gt; func(arg1, arg2);}// 例internal static DateTime GetDate(int year, short month, byte day){return new DateTime(year, month, day);}Func&lt;int, short, byte, DateTime&gt; f = GetDate;Func&lt;DateTime&gt; lazy = f.Lazy(2018, 2, 28);var result1 = GetDate(2018, 2, 28);var result2 = lazy();,,,/// &lt;summary&gt;/// Converts the specified delegate to a partial apply delegate./// &lt;/summary&gt;/// &lt;typeparam name="T1"&gt;&lt;/typeparam&gt;/// &lt;typeparam name="T2"&gt;&lt;/typeparam&gt;/// &lt;typeparam name="T3"&gt;&lt;/typeparam&gt;/// &lt;typeparam name="TResult"&gt;&lt;/typeparam&gt;/// &lt;param name="func"&gt;&lt;/param&gt;/// &lt;param name="arg1"&gt;&lt;/param&gt;/// &lt;returns&gt;&lt;/returns&gt;public static Func&lt;T2, T3, TResult&gt; Partial&lt;T1, T2, T3, TResult&gt;(this Func&lt;T1, T2, T3, TResult&gt; func, T1 arg1){return (arg2, arg3) =&gt; func(arg1, arg2, arg3);}// 例internal static DateTime GetDate(int year, short month, byte day){return new DateTime(year, month, day);}Func&lt;int, short, byte, DateTime&gt; f = GetDate;Func&lt;short, byte, DateTime&gt; applyYear = f.Partial(2018);var result1 = GetDate(2018, 2, 28);var result2 = applyYear(2, 28);,,,/// &lt;summary&gt;/// Converts the specified curried delegate to a partial apply delegate./// &lt;/summary&gt;/// &lt;typeparam name="T1"&gt;&lt;/typeparam&gt;/// &lt;typeparam name="T2"&gt;&lt;/typeparam&gt;/// &lt;typeparam name="T3"&gt;&lt;/typeparam&gt;/// &lt;typeparam name="TResult"&gt;&lt;/typeparam&gt;/// &lt;param name="func"&gt;&lt;/param&gt;/// &lt;returns&gt;&lt;/returns&gt;public static Func&lt;T2, Func&lt;T3, Func&lt;T1, TResult&gt;&gt;&gt; Partial&lt;T1, T2, T3, TResult&gt;(this Func&lt;T1, Func&lt;T2, Func&lt;T3, TResult&gt;&gt;&gt; func){return arg2 =&gt; arg3 =&gt; arg1 =&gt; func(arg1)(arg2)(arg3);}// 例internal static DateTime GetDate(int year, short month, byte day){return new DateTime(year, month, day);}Func&lt;int, short, byte, DateTime&gt; f = GetDate;Func&lt;int, Func&lt;short, Func&lt;byte, DateTime&gt;&gt;&gt; curry = f.Curry();Func&lt;int, Func&lt;short, DateTime&gt;&gt; applyDay = curry.Partial().Partial()(28);Func&lt;int, short, DateTime&gt; applyDayUncurry = applyDay.Uncurry();var result1 = GetDate(2018, 2, 28);var result2 = applyDay(2018)(2);var result3 = applyDayUncurry(2018, 2);,,,// 例
internal static DateTime GetDate(int year, short month, byte day)
例internal static DateTime GetDate(int year, short month, byte day){return new DateTime(year, month, day);}Func&lt;int, short, byte, DateTime&gt; f = GetDate;Func&lt;int, Func&lt;short, Func&lt;byte, DateTime&gt;&gt;&gt; curry = f.Curry();Func&lt;int, short, byte, DateTime&gt; uncurry = curry.Uncrry();var result1 = curry(2018)(2)(28);var result2 = uncurry(2018, 2, 28);,,,/// &lt;summary&gt;/// Converts the specified delegate to a lasy evaluation delegate./// &lt;/summary&gt;/// &lt;typeparam name="T1"&gt;&lt;/typeparam&gt;/// &lt;typeparam name="T2"&gt;&lt;/typeparam&gt;/// &lt;typeparam name="TResult"&gt;&lt;/typeparam&gt;/// &lt;param name="func"&gt;&lt;/param&gt;/// &lt;param name="arg1"&gt;&lt;/param&gt;/// &lt;param name="arg2"&gt;&lt;/param&gt;/// &lt;returns&gt;&lt;/returns&gt;public static Func&lt;TResult&gt; Lazy&lt;T1, T2, TResult&gt;(this Func&lt;T1, T2, TResult&gt; func, T1 arg1, T2 arg2){return () =&gt; func(arg1, arg2);}// 例internal static DateTime GetDate(int year, short month, byte day){return new DateTime(year, month, day);}Func&lt;int, short, byte, DateTime&gt; f = GetDate;Func&lt;DateTime&gt; lazy = f.Lazy(2018, 2, 28);var result1 = GetDate(2018, 2, 28);var result2 = lazy();,,,/// &lt;summary&gt;/// Converts the specified delegate to a partial apply delegate./// &lt;/summary&gt;/// &lt;typeparam name="T1"&gt;&lt;/typeparam&gt;/// &lt;typeparam name="T2"&gt;&lt;/typeparam&gt;/// &lt;typeparam name="T3"&gt;&lt;/typeparam&gt;/// &lt;typeparam name="TResult"&gt;&lt;/typeparam&gt;/// &lt;param name="func"&gt;&lt;/param&gt;/// &lt;param name="arg1"&gt;&lt;/param&gt;/// &lt;returns&gt;&lt;/returns&gt;public static Func&lt;T2, T3, TResult&gt; Partial&lt;T1, T2, T3, TResult&gt;(this Func&lt;T1, T2, T3, TResult&gt; func, T1 arg1){return (arg2, arg3) =&gt; func(arg1, arg2, arg3);}// 例internal static DateTime GetDate(int year, short month, byte day){return new DateTime(year, month, day);}Func&lt;int, short, byte, DateTime&gt; f = GetDate;Func&lt;short, byte, DateTime&gt; applyYear = f.Partial(2018);var result1 = GetDate(2018, 2, 28);var result2 = applyYear(2, 28);,,,/// &lt;summary&gt;/// Converts the specified curried delegate to a partial apply delegate./// &lt;/summary&gt;/// &lt;typeparam name="T1"&gt;&lt;/typeparam&gt;/// &lt;typeparam name="T2"&gt;&lt;/typeparam&gt;/// &lt;typeparam name="T3"&gt;&lt;/typeparam&gt;/// &lt;typeparam name="TResult"&gt;&lt;/typeparam&gt;/// &lt;param name="func"&gt;&lt;/param&gt;/// &lt;returns&gt;&lt;/returns&gt;public static Func&lt;T2, Func&lt;T3, Func&lt;T1, TResult&gt;&gt;&gt; Partial&lt;T1, T2, T3, TResult&gt;(this Func&lt;T1, Func&lt;T2, Func&lt;T3, TResult&gt;&gt;&gt; func){return arg2 =&gt; arg3 =&gt; arg1 =&gt; func(arg1)(arg2)(arg3);}// 例internal static DateTime GetDate(int year, short month, byte day){return new DateTime(year, month, day);}Func&lt;int, short, byte, DateTime&gt; f = GetDate;Func&lt;int, Func&lt;short, Func&lt;byte, DateTime&gt;&gt;&gt; curry = f.Curry();Func&lt;int, Func&lt;short, DateTime&gt;&gt; applyDay = curry.Partial().Partial()(28);Func&lt;int, short, DateTime&gt; applyDayUncurry = applyDay.Uncurry();var result1 = GetDate(2018, 2, 28);var result2 = applyDay(2018)(2);var result3 = applyDayUncurry(2018, 2);,,,// 例
internal static DateTime GetDate(int year, short month, byte day)
例internal static DateTime GetDate(int year, short month, byte day){return new DateTime(year, month, day);}Func&lt;int, short, byte, DateTime&gt; f = GetDate;Func&lt;DateTime&gt; lazy = f.Lazy(2018, 2, 28);var result1 = GetDate(2018, 2, 28);var result2 = lazy();,,,/// &lt;summary&gt;/// Converts the specified delegate to a partial apply delegate./// &lt;/summary&gt;/// &lt;typeparam name="T1"&gt;&lt;/typeparam&gt;/// &lt;typeparam name="T2"&gt;&lt;/typeparam&gt;/// &lt;typeparam name="T3"&gt;&lt;/typeparam&gt;/// &lt;typeparam name="TResult"&gt;&lt;/typeparam&gt;/// &lt;param name="func"&gt;&lt;/param&gt;/// &lt;param name="arg1"&gt;&lt;/param&gt;/// &lt;returns&gt;&lt;/returns&gt;public static Func&lt;T2, T3, TResult&gt; Partial&lt;T1, T2, T3, TResult&gt;(this Func&lt;T1, T2, T3, TResult&gt; func, T1 arg1){return (arg2, arg3) =&gt; func(arg1, arg2, arg3);}// 例internal static DateTime GetDate(int year, short month, byte day){return new DateTime(year, month, day);}Func&lt;int, short, byte, DateTime&gt; f = GetDate;Func&lt;short, byte, DateTime&gt; applyYear = f.Partial(2018);var result1 = GetDate(2018, 2, 28);var result2 = applyYear(2, 28);,,,/// &lt;summary&gt;/// Converts the specified curried delegate to a partial apply delegate./// &lt;/summary&gt;/// &lt;typeparam name="T1"&gt;&lt;/typeparam&gt;/// &lt;typeparam name="T2"&gt;&lt;/typeparam&gt;/// &lt;typeparam name="T3"&gt;&lt;/typeparam&gt;/// &lt;typeparam name="TResult"&gt;&lt;/typeparam&gt;/// &lt;param name="func"&gt;&lt;/param&gt;/// &lt;returns&gt;&lt;/returns&gt;public static Func&lt;T2, Func&lt;T3, Func&lt;T1, TResult&gt;&gt;&gt; Partial&lt;T1, T2, T3, TResult&gt;(this Func&lt;T1, Func&lt;T2, Func&lt;T3, TResult&gt;&gt;&gt; func){return arg2 =&gt; arg3 =&gt; arg1 =&gt; func(arg1)(arg2)(arg3);}// 例internal static DateTime GetDate(int year, short month, byte day){return new DateTime(year, month, day);}Func&lt;int, short, byte, DateTime&gt; f = GetDate;Func&lt;int, Func&lt;short, Func&lt;byte, DateTime&gt;&gt;&gt; curry = f.Curry();Func&lt;int, Func&lt;short, DateTime&gt;&gt; applyDay = curry.Partial().Partial()(28);Func&lt;int, short, DateTime&gt; applyDayUncurry = applyDay.Uncurry();var result1 = GetDate(2018, 2, 28);var result2 = applyDay(2018)(2);var result3 = applyDayUncurry(2018, 2);,,,// 例
internal static DateTime GetDate(int year, short month, byte day)
例internal static DateTime GetDate(int year, short month, byte day){return new DateTime(year, month, day);}Func&lt;int, short, byte, DateTime&gt; f = GetDate;Func&lt;short, byte, DateTime&gt; applyYear = f.Partial(2018);var result1 = GetDate(2018, 2, 28);var result2 = applyYear(2, 28);,,,/// &lt;summary&gt;/// Converts the specified curried delegate to a partial apply delegate./// &lt;/summary&gt;/// &lt;typeparam name="T1"&gt;&lt;/typeparam&gt;/// &lt;typeparam name="T2"&gt;&lt;/typeparam&gt;/// &lt;typeparam name="T3"&gt;&lt;/typeparam&gt;/// &lt;typeparam name="TResult"&gt;&lt;/typeparam&gt;/// &lt;param name="func"&gt;&lt;/param&gt;/// &lt;returns&gt;&lt;/returns&gt;public static Func&lt;T2, Func&lt;T3, Func&lt;T1, TResult&gt;&gt;&gt; Partial&lt;T1, T2, T3, TResult&gt;(this Func&lt;T1, Func&lt;T2, Func&lt;T3, TResult&gt;&gt;&gt; func){return arg2 =&gt; arg3 =&gt; arg1 =&gt; func(arg1)(arg2)(arg3);}// 例internal static DateTime GetDate(int year, short month, byte day){return new DateTime(year, month, day);}Func&lt;int, short, byte, DateTime&gt; f = GetDate;Func&lt;int, Func&lt;short, Func&lt;byte, DateTime&gt;&gt;&gt; curry = f.Curry();Func&lt;int, Func&lt;short, DateTime&gt;&gt; applyDay = curry.Partial().Partial()(28);Func&lt;int, short, DateTime&gt; applyDayUncurry = applyDay.Uncurry();var result1 = GetDate(2018, 2, 28);var result2 = applyDay(2018)(2);var result3 = applyDayUncurry(2018, 2);,,,// 例
internal static DateTime GetDate(int year, short month, byte day)
例internal static DateTime GetDate(int year, short month, byte day){return new DateTime(year, month, day);}Func&lt;int, short, byte, DateTime&gt; f = GetDate;Func&lt;int, Func&lt;short, Func&lt;byte, DateTime&gt;&gt;&gt; curry = f.Curry();Func&lt;int, Func&lt;short, DateTime&gt;&gt; applyDay = curry.Partial().Partial()(28);Func&lt;int, short, DateTime&gt; applyDayUncurry = applyDay.Uncurry();var result1 = GetDate(2018, 2, 28);var result2 = applyDay(2018)(2);var result3 = applyDayUncurry(2018, 2);,,,// 例
internal static DateTime GetDate(int year, short month, byte day)

        
renderArea *= 0.98;
    
 "Edition" class has "int Code" and "string Text" properties.
// -&gt; 例外 ArgumentException: 'shift_jis' is not a supported encoding name.
,,,

    
 完了したときの処理// 3'. 新しい監視オブジェクトを渡して購読オブジェクトを受け取ります。
var subscriver2 = observable.Subscribe(observer2);

//ScreenPointToRayに因るベクトルの取得
Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);

            
 結果をルートに変換
        
float s1 = UnityEngine.Random.value;
        
 指定されたCSVファイルへのコンテキストを生成する
        for (int i = angle * 6, j = 0; i &lt; triangles.Length; i += 6, j += 2) 
上下面
    
 Update is called once per frame
        
 終了
        
一番スコアの高いPathを採択
            MainLabel.Content = "Hello World!"; 
ここ
        
上記二値からスケール（ローカル座標系）を調整
                
2秒間隔で実行。フォローが多い場合はこの値を調整して手加減する
            
if (map[y, i] == 'Q') return false;
  frame[14] = sw ? (byte)0x30 : (byte)0x31;   
0x30がスイッチオン 0x31がスイッチオフ
    
実行時,System.InvalidCastExceptionが発生する
    
 ※StreamReader と WriteResponseStreamToFile を同時に使うことはできない。
        
 Utilのライセンスの判定処理がうまくいかない場合があるので, 一旦マスク
        
 Rotate around the center of (0,0,0)
    [Tooltip("The service URL (optional). This defaults to \"https:
api.us-south.speech-to-text.watson.cloud.ibm.com\"")]
            
 TODO Step-by-step. After fixing the parameter change, I'll implement multiple parameters.//  See the License for the specific language governing permissions and//  limitations under the License.  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                
 重複を許さないので、unusedから item そのものも取り除く
    Debug.Log(target?.name); 
 `UnassignedReferenceException`が投げられる
本当はEqualsとかも実装するべきclass Person {public string Name { get; set; }public static bool operator ==(Person lhs, Person rhs) {Console.WriteLine("called ==");return object.ReferenceEquals(lhs, rhs);}public static bool operator !=(Person lhs, Person rhs) {Console.WriteLine("called !=");return !object.ReferenceEquals(lhs, rhs);}}void Main(){Person personNonNull = new Person { Name = "Taro" };Console.WriteLine(personNonNull?.Name);Person personNull = null;Console.WriteLine(personNull?.Name);},,,void Main(){Person person = new Person { Name = "Taro" };string name = person == null ? null : person.Name;Console.WriteLine();},,,// 本当はEqualsとかも実装するべき
class Person {

            
 objectでキャストしないと無限ループになるので注意
        Debug.Log(ReferenceEquals(target, null)); 
 Falseと表示される
        
 呼び出し状態クリア
  
後述のエラー2
            
クソオブクソ処理
            
 更新イベントを起こす
        
 指定されたCSVファイルへのコンテキストを生成する
http:
neue.cc20110917_343.html
        
 左キー(orボタン）が押されている
            
ここにすっげー時間かかる処理を書く想定
            
コマンドライン引数を列挙する
        string loadText = await model.LoadedText; 
ReactivePropertyの変更を待つ
using System.Collections.Generic; 
 for List&lt;&gt;
      
 素数かどうか判定する &lt;- みたいなコメントがいる。(IsPrime なら自明)// 素数だけをカウント
var count = numbers.Count(n =&gt; IsPrime(n));
// すべて素数か？
bool isAllPrime = numbers.All(n =&gt; IsPrime(n));
// 素数が混じっているか？
bool containsPrime = numbers.Any(n =&gt; IsPrime(n));
// 最大の素数
int max = numbers.Where(n =&gt; IsPrime(n)).Max();
// 数列中に最初に現れる素数
int first = numbers.First(n =&gt; IsPrime(n))
無限に素数を返すイテレータIEnumerable&lt;int&gt; PrimeGen() {int n = 1;while (true) {if (IsPrime(n)) yield return n;n++;}}// 素数を5個取り出すvar primes = PrimeGen().Take(5);  //=&gt; 2, 3, 5, 7, 11 のシーケンス,,,static class IntExtention {public static bool IsPrime(this int n) {if (n &lt; 2) return false;var primes = new List&lt;int&gt;();return Enumerable.Range(2, (int) Math.Sqrt(n) - 1).All(i =&gt; {if (primes.All(p =&gt; i % p != 0)) {if (n % i == 0) return false;primes.Add(i);}return true;});}},,,foreach (var n in Enumerable.Range(1, 99)) {Console.WriteLine($"{n}: {n.IsPrime()}");},,,// 無限に素数を返すイテレータ
IEnumerable&lt;int&gt; PrimeGen() {
// 素数を5個取り出す
var primes = PrimeGen().Take(5);  =&gt; 2, 3, 5, 7, 11 のシーケンス

  
 data.RejectChanges();
            
 increase avairable Semaphore
    
翻訳後言語
            
 呼び出し
        
 タッチパッド上の座標
                
 JWT Bearer をデフォルトにする
        
 y行よりも下に置く駒を求める － 鏡像、回転を除くことは考慮していない
Console.WriteLine($"整形={d.ToString("yyyy年MM月dd日")}");  
 &lt;------ MM だけ大文字だ
            
 Assert
        
 diff が startVec より左側 *または* diff が endVec より右側の時
            
 ファイルをダウンロードする
// Storageに保存されている設定を読み込む
await sharedDictionary.LoadFromStorageAsync();
// もちろん基本データ型の保存はできて
sharedDictionary.SetProperty("text", "sssss");
// Utf8JsonまたはSpanJsonによって、ユーザー定義型の保存もできる
sharedDictionary.SetProperty("data", new Data());
// Storageに書き込む
await sharedDictionary.SaveToStorageAsync();
// 設定を読み込む
string text = sharedDictionary.GetProperty&lt;string&gt;("text");

            
 更新イベントを起こす
    
ここでDPIの係数を取得//サイズを画面の縦サイズと同じにする
this.Height = (double)screenHeight / scaleY;

            
 掴んだときのモデルと線分が当たった座標を保存( 座標をスクリーン座標に変換したものも保存しておく )
        Debug.Log("Out" + Uncode.posData); 
JSONをJSONWriteクラスに変換した結果を出力
            
 RemoveAllメソッドを使った場合
                    
 今日の日付、現在の時刻を取得する
    
 https:teratail.comquestions24669
            
 Options
    private bool isPassing = false; 
trueの場合すでに探索済みfalseなら未探索
  
 一桁目が2より大きくないと許さない[Platform ("Windows10, MacOsX")]public class Hoge { Windows10またはMacOSXでのみテストを実行する
GET api/Values/email@address.compublic string Get(string valueString){},,,
outputArray.AddRange(new float[21125]);  
 125×13×13
        ERROR2 = 2, 
エラー 2
    .Memoize() 
 キャッシュ
        
 進捗状況を標準出力に出力する
            
 デバイスよさようなら
                
Use the ExchangeUser object PrimarySMTPAddress
            
 ループ処理
            
 New()を使用するタイプ
// UTC+XをTimeSpan型にする（今回はUTC-4）
TimeSpan userOffset = new TimeSpan(-4, 0, 0);  時、分、秒
// 今のローカル時間（日本時間）を取得
 ここでDateTimeOffsetを使うのは、
// DateTimeだと時差情報がオブジェクトに含まれていないため
DateTimeOffset localTime = DateTimeOffset.Now;
// 一度UTC（標準時間）に変換する
 UtcDateTimeプロパティではDateTimeが取得されるため、またDateTimeOffsetにする
// 取得したUTCから時差の分ずらす
DateTime targetTime = utcTime.ToOffset(userOffset);
// 表示
Console.Write(targetTime.ToString("yyyy/MM/dd HH:mm:ss"));

                    str = instance.Name; 
 なにかさせる
                    
 pos位置での試しは終わったので、次の探索ができるようにするためクリアする。
    
 Update is called once per frame
    Debug.Log(i.ToString().PadRight(5, '*'));
 123**
       
 グリッドをTextWriter.Flushで一気に出力します。
            var url = $"http:
www.kmoni.bosai.go.jpnewwebservicehypoeew{time}.json";
        
大きい方の数値を減らす
                
Debug.Log("タッチパッドに触っている");
    
処理
            
 整形出力を行う
        if (novelListIndex &lt; messageList.Count)
全ての会話を表示したか
            Debug.Log(element.id + "," + element.name);
 出力例 : 100,HogeItem
        
because other ways like shape.GroupItem.Count &amp; shape.Ungroup thow an exception when shape is not a group.
        
 .Select(x =&gt; x.Buffer(20)).SelectMany(x =&gt; x) とも書ける
            
 合格
                
 ClickUp したら、ボタンが再度 Click できるようにする。
                (int)(_arr_control_storage[_pos].Height * _form_ratio_height)); 
use for sizing
            GameObject go = Instantiate(arrowPrefab) as GameObject; 
 instantiateメソッドに引数arrowPrefabを渡すと、戻り値としてPrefabのインスタンスを返す。強制型変換であるキャストを使い、戻り値をGameObject型に変換
        
~~~~~~~~~~~~~~~~~~
    context.SaveChanges();
これでエラー発生しない！
    
 コンストラクタでプライベートフィールドを初期化する
        return false;
ここをコメントアウトするとデータが尽きるまでズンドコ言い続ける
           
第1引数：ファイルパス //ここにファイルIO処理を記述する
}

        
 作業用の配列から、部分集合を求める
    
自分自身のAssemblyを取得し、バージョンを返す
    parameters.Exponent = Base64.Decode(key[@"e"]); 
 公開指数
=&gt; 1 4 9 16 25,,,var list = new List&lt;int&gt;(){1,2,3,4,5};list.Where(c =&gt; c % 2 == 0);//=&gt;2 4,,,var array = new[] {new{Name = "A", Age = 1},new{Name = "C", Age = 2},new{Name = "B", Age = 1},new{Name = "E", Age = 5},new{Name = "D", Age = 3},};array.OrderBy(c =&gt; c.Age);//=&gt; {A,1} {B,1} {C,2} {D,3} {E,5},,,var list = new List&lt;int&gt;() { 1, 2, 3, 4, 5 };list.Aggregate((current,next) =&gt; Math.Max(current,next));//=&gt; 5,,,var list = new List&lt;int&gt;(){1,2,2,3,3,3,4,5,5};list.Distinct();//=&gt; 1 2 3 4 5,,,var listA = new List&lt;int&gt;(){1,2,3,4,5};var listB = new List&lt;int&gt;(){4,5,6,7,8};listA.Union(listB);//=&gt; 1 2 3 4 5 6 7 8,,,var listA = new List&lt;int&gt;(){1,2,3,4,5};var listB = new List&lt;int&gt;(){4,5,6,7,8};listA.Intersect(listB);//=&gt; 4 5,,,var list = new List&lt;int&gt;(){1,2,3,4,5};list.All(c =&gt; c &lt; 10);//=&gt;True,,,var list = new List&lt;int&gt;(){1,2,3,4,5};list.Any(c =&gt; c == 3);//=&gt;True,,,var list = new List&lt;int&gt;(){1,2,3,4,5};list.Contains(1);//=&gt;True,,,=&gt;2 4,,,var array = new[] {new{Name = "A", Age = 1},new{Name = "C", Age = 2},new{Name = "B", Age = 1},new{Name = "E", Age = 5},new{Name = "D", Age = 3},};array.OrderBy(c =&gt; c.Age);//=&gt; {A,1} {B,1} {C,2} {D,3} {E,5},,,var list = new List&lt;int&gt;() { 1, 2, 3, 4, 5 };list.Aggregate((current,next) =&gt; Math.Max(current,next));//=&gt; 5,,,var list = new List&lt;int&gt;(){1,2,2,3,3,3,4,5,5};list.Distinct();//=&gt; 1 2 3 4 5,,,var listA = new List&lt;int&gt;(){1,2,3,4,5};var listB = new List&lt;int&gt;(){4,5,6,7,8};listA.Union(listB);//=&gt; 1 2 3 4 5 6 7 8,,,var listA = new List&lt;int&gt;(){1,2,3,4,5};var listB = new List&lt;int&gt;(){4,5,6,7,8};listA.Intersect(listB);//=&gt; 4 5,,,var list = new List&lt;int&gt;(){1,2,3,4,5};list.All(c =&gt; c &lt; 10);//=&gt;True,,,var list = new List&lt;int&gt;(){1,2,3,4,5};list.Any(c =&gt; c == 3);//=&gt;True,,,var list = new List&lt;int&gt;(){1,2,3,4,5};list.Contains(1);//=&gt;True,,,=&gt; {A,1} {B,1} {C,2} {D,3} {E,5},,,var list = new List&lt;int&gt;() { 1, 2, 3, 4, 5 };list.Aggregate((current,next) =&gt; Math.Max(current,next));//=&gt; 5,,,var list = new List&lt;int&gt;(){1,2,2,3,3,3,4,5,5};list.Distinct();//=&gt; 1 2 3 4 5,,,var listA = new List&lt;int&gt;(){1,2,3,4,5};var listB = new List&lt;int&gt;(){4,5,6,7,8};listA.Union(listB);//=&gt; 1 2 3 4 5 6 7 8,,,var listA = new List&lt;int&gt;(){1,2,3,4,5};var listB = new List&lt;int&gt;(){4,5,6,7,8};listA.Intersect(listB);//=&gt; 4 5,,,var list = new List&lt;int&gt;(){1,2,3,4,5};list.All(c =&gt; c &lt; 10);//=&gt;True,,,var list = new List&lt;int&gt;(){1,2,3,4,5};list.Any(c =&gt; c == 3);//=&gt;True,,,var list = new List&lt;int&gt;(){1,2,3,4,5};list.Contains(1);//=&gt;True,,,=&gt; 5,,,var list = new List&lt;int&gt;(){1,2,2,3,3,3,4,5,5};list.Distinct();//=&gt; 1 2 3 4 5,,,var listA = new List&lt;int&gt;(){1,2,3,4,5};var listB = new List&lt;int&gt;(){4,5,6,7,8};listA.Union(listB);//=&gt; 1 2 3 4 5 6 7 8,,,var listA = new List&lt;int&gt;(){1,2,3,4,5};var listB = new List&lt;int&gt;(){4,5,6,7,8};listA.Intersect(listB);//=&gt; 4 5,,,var list = new List&lt;int&gt;(){1,2,3,4,5};list.All(c =&gt; c &lt; 10);//=&gt;True,,,var list = new List&lt;int&gt;(){1,2,3,4,5};list.Any(c =&gt; c == 3);//=&gt;True,,,var list = new List&lt;int&gt;(){1,2,3,4,5};list.Contains(1);//=&gt;True,,,=&gt; 1 2 3 4 5,,,var listA = new List&lt;int&gt;(){1,2,3,4,5};var listB = new List&lt;int&gt;(){4,5,6,7,8};listA.Union(listB);//=&gt; 1 2 3 4 5 6 7 8,,,var listA = new List&lt;int&gt;(){1,2,3,4,5};var listB = new List&lt;int&gt;(){4,5,6,7,8};listA.Intersect(listB);//=&gt; 4 5,,,var list = new List&lt;int&gt;(){1,2,3,4,5};list.All(c =&gt; c &lt; 10);//=&gt;True,,,var list = new List&lt;int&gt;(){1,2,3,4,5};list.Any(c =&gt; c == 3);//=&gt;True,,,var list = new List&lt;int&gt;(){1,2,3,4,5};list.Contains(1);//=&gt;True,,,=&gt; 1 2 3 4 5 6 7 8,,,var listA = new List&lt;int&gt;(){1,2,3,4,5};var listB = new List&lt;int&gt;(){4,5,6,7,8};listA.Intersect(listB);//=&gt; 4 5,,,var list = new List&lt;int&gt;(){1,2,3,4,5};list.All(c =&gt; c &lt; 10);//=&gt;True,,,var list = new List&lt;int&gt;(){1,2,3,4,5};list.Any(c =&gt; c == 3);//=&gt;True,,,var list = new List&lt;int&gt;(){1,2,3,4,5};list.Contains(1);//=&gt;True,,,=&gt; 4 5,,,var list = new List&lt;int&gt;(){1,2,3,4,5};list.All(c =&gt; c &lt; 10);//=&gt;True,,,var list = new List&lt;int&gt;(){1,2,3,4,5};list.Any(c =&gt; c == 3);//=&gt;True,,,var list = new List&lt;int&gt;(){1,2,3,4,5};list.Contains(1);//=&gt;True,,,=&gt;True,,,var list = new List&lt;int&gt;(){1,2,3,4,5};list.Any(c =&gt; c == 3);//=&gt;True,,,var list = new List&lt;int&gt;(){1,2,3,4,5};list.Contains(1);//=&gt;True,,,=&gt;True,,,var list = new List&lt;int&gt;(){1,2,3,4,5};list.Contains(1);//=&gt;True,,,
        if (string.IsNullOrEmpty(loadJsonStr)) 
セーブデータがない場合無駄な処理を行わないためのif文
                
 required to match what is in the model.
        
 答えと並びが一緒であること
        
 接続
connectableInterval.Connect(); 
Observable.Interval自体をHot化（ObservableソースがHot化する）//Observale.IntervalをHot化したものに接続する
IDisposable connection = connectableObservable.Connect();
//3秒経ったら切断して再接続する
await Task.Delay(3000);

                
 別スレッドから呼び出された場合
            
 await前にTaskが終わるケース（ワーカースレッドの場合）
str = ary[0];
string型の変数にobject型は代入できない
Console.WriteLine("abcde".Slice(3,4)); 
 "d"
            Console.WriteLine(data[0]);
アドレスが更新されたため。
        
gameWindow.offsetMin = new Vector2(left, bottom);下部分をずらしたいときに使用
               .Select(chr =&gt; Integer.Parse(chr));              
 改めて数値リストに変換
            
 0.01sec 待つ
            
日付
//とループ外で宣言してから
yield return num;

            
音声読み終わりまで待つ//TimelineとしてDataGridViewを作成
columnの作成
//columnの追加
Timeline.Columns.Add(columnImage);
//セルの内容に合わせて、行の高さが自動的に調節されるようにする
Timeline.AutoSizeRowsMode = DataGridViewAutoSizeRowsMode.AllCells;
//ツイート列のセルのテキストを折り返して表示する
Timeline.Columns["ツイート"].DefaultCellStyle.WrapMode = DataGridViewTriState.True;
//左側の項目を消す
Timeline.RowHeadersVisible = false;
//img = アイコンのURL
user = ScreenName
//text = ツイートの内容
WebClient wc = new WebClient();

            
 引数のリストをそのまま代入せずに、中身だけを代入する
                    
 NOP
            
 Perspective division
            
 終わり
            1.0
sec
        
 GC Alloc 等確認用プロファイラーストップ
        private Int32 version = 0; 
 SNMP V1
            
呼び出し元個別の処理を定義（例外発生時）
        
 Start()後
    
 Use this for initialization
            
 1個目、2個目 
            
 Assert
        
 ~~~
                digitalWrite(LED, LOW);   
オフ
            var urls = doc.Root.Descendants("{http:
search.yahoo.commrss}thumbnail")
            
 ↓このままだと、設定されたメッセージがそのまま出力されるので、いい感じに変えてください
Console.WriteLine(list.Sum().Value); 
 6例：#line (1, 1) - (2, 2) 3 "test.cs",,,if (a is { X: { Y: { Z: 4 } } }) { ... },,,if (a is { X.Y.Z: 4 }) { ... },,,var x = 1;Console.WriteLine($"hello, {x}");,,,int x = 1;DefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(7, 1);defaultInterpolatedStringHandler.AppendLiteral("hello, ");defaultInterpolatedStringHandler.AppendFormatted(x);Console.WriteLine(defaultInterpolatedStringHandler.ToStringAndClear());,,,// 例：#line (1, 1) - (2, 2) 3 "test.cs"
,,,

        
 サインイン
// 何の数字かはお察しください...
var tuple = ("鍵山雛", 50, 45, 49);
数値については異論を認めるvar Fujinroku = new Character[] {new Character(162, 84, 52, 83) {Name = "秋静葉",Category = "東方風神録"},new Character(163, 94, 62, 81) {Name = "秋穣子",Category = "東方風神録"},new Character(172, 94, 57, 89) {Name = "鍵山雛",Category = "東方風神録"},new Character(161, 88, 52, 91) {Name = "河城にとり",Category = "東方風神録"},new Character(165, 86, 64, 83) {Name = "犬走椛",Category = "東方風神録"},new Character(169, 92, 55, 88) {Name = "射命丸文",Category = "東方花映塚"}new Character(168, 94, 65, 94) {Name = "東風谷早苗",Category = "東方風神録"},new Character(176, 88, 60, 88) {Name = "八坂神奈子",Category = "東方風神録"}new Character(152, 79, 52, 80) {Name = "洩矢諏訪子",Category = "東方風神録"}};,,,// 一つずつGetterを作るのは面倒だよねpublic int GetTall() {return Tall;},,,// プロパティを根こそぎ浚えるpublic (int, int, int) GetThreeSize() {return (Bust, Waist, Hip);},,,var HinaChangNoThreeSize = Fujinroku[2].GetThreeSize();,,,public class CharacterWithColors : Character {private string Hair;private string Eye;private string Pants;public void SetColor((string, string, string) colors) {Hair = colors.Item1;Eye = colors.Item2;Pants = colors.Item3;}},,,var UdonChang = new CharacterWithColors(173, 92, 56, 84) {Name = "鈴仙・優曇華院・イナバ",Category = "東方永夜抄"}// ぱんつはいてませんUdonChang.SetColor(("#DA81F5", "#FE2E2E", null));,,,// ローカル変数と同じ扱いなので、雛ちゃんのスリーサイズは同一スコープ内で利用できる(int Bust, int Waist, int Hip) = HinaChangNoThreeSize;// 直接メソッドから取ることもできる(Bust, Waist, Hip) = Fujinroku[2].GetThreeSize();,,,var tupleList = new List&lt;(int, Character)&gt;();// 世界一位tupleList.Add((1, new Character(171, 89, 52, 88) {Name = "博麗霊夢",Category = "自機"}));// 悔しいので来年は抜いてやるぜtupleList.Add((2, new Character(167, 84, 57, 90) {Name = "霧雨魔理沙",Category = "自機"}));::// ⑨位でいいの。謙虚だもの私tupleList.Add((9, new Character(174, 92, 63, 91) {Name = "アリス・マーガトロイド",Category = "東方妖々夢"}));::,,,,,,// 数値については異論を認める
var Fujinroku = new Character[] {
一つずつGetterを作るのは面倒だよねpublic int GetTall() {return Tall;},,,// プロパティを根こそぎ浚えるpublic (int, int, int) GetThreeSize() {return (Bust, Waist, Hip);},,,var HinaChangNoThreeSize = Fujinroku[2].GetThreeSize();,,,public class CharacterWithColors : Character {private string Hair;private string Eye;private string Pants;public void SetColor((string, string, string) colors) {Hair = colors.Item1;Eye = colors.Item2;Pants = colors.Item3;}},,,var UdonChang = new CharacterWithColors(173, 92, 56, 84) {Name = "鈴仙・優曇華院・イナバ",Category = "東方永夜抄"}// ぱんつはいてませんUdonChang.SetColor(("#DA81F5", "#FE2E2E", null));,,,// ローカル変数と同じ扱いなので、雛ちゃんのスリーサイズは同一スコープ内で利用できる(int Bust, int Waist, int Hip) = HinaChangNoThreeSize;// 直接メソッドから取ることもできる(Bust, Waist, Hip) = Fujinroku[2].GetThreeSize();,,,var tupleList = new List&lt;(int, Character)&gt;();// 世界一位tupleList.Add((1, new Character(171, 89, 52, 88) {Name = "博麗霊夢",Category = "自機"}));// 悔しいので来年は抜いてやるぜtupleList.Add((2, new Character(167, 84, 57, 90) {Name = "霧雨魔理沙",Category = "自機"}));::// ⑨位でいいの。謙虚だもの私tupleList.Add((9, new Character(174, 92, 63, 91) {Name = "アリス・マーガトロイド",Category = "東方妖々夢"}));::,,,,,,// 一つずつGetterを作るのは面倒だよね
public int GetTall() {
プロパティを根こそぎ浚えるpublic (int, int, int) GetThreeSize() {return (Bust, Waist, Hip);},,,var HinaChangNoThreeSize = Fujinroku[2].GetThreeSize();,,,public class CharacterWithColors : Character {private string Hair;private string Eye;private string Pants;public void SetColor((string, string, string) colors) {Hair = colors.Item1;Eye = colors.Item2;Pants = colors.Item3;}},,,var UdonChang = new CharacterWithColors(173, 92, 56, 84) {Name = "鈴仙・優曇華院・イナバ",Category = "東方永夜抄"}// ぱんつはいてませんUdonChang.SetColor(("#DA81F5", "#FE2E2E", null));,,,// ローカル変数と同じ扱いなので、雛ちゃんのスリーサイズは同一スコープ内で利用できる(int Bust, int Waist, int Hip) = HinaChangNoThreeSize;// 直接メソッドから取ることもできる(Bust, Waist, Hip) = Fujinroku[2].GetThreeSize();,,,var tupleList = new List&lt;(int, Character)&gt;();// 世界一位tupleList.Add((1, new Character(171, 89, 52, 88) {Name = "博麗霊夢",Category = "自機"}));// 悔しいので来年は抜いてやるぜtupleList.Add((2, new Character(167, 84, 57, 90) {Name = "霧雨魔理沙",Category = "自機"}));::// ⑨位でいいの。謙虚だもの私tupleList.Add((9, new Character(174, 92, 63, 91) {Name = "アリス・マーガトロイド",Category = "東方妖々夢"}));::,,,,,,// プロパティを根こそぎ浚える
public (int, int, int) GetThreeSize() {
// ぱんつはいてません
UdonChang.SetColor(("#DA81F5", "#FE2E2E", null));
// ローカル変数と同じ扱いなので、雛ちゃんのスリーサイズは同一スコープ内で利用できる
(int Bust, int Waist, int Hip) = HinaChangNoThreeSize;
// 直接メソッドから取ることもできる
(Bust, Waist, Hip) = Fujinroku[2].GetThreeSize();
世界一位tupleList.Add((1, new Character(171, 89, 52, 88) {Name = "博麗霊夢",Category = "自機"}));// 悔しいので来年は抜いてやるぜtupleList.Add((2, new Character(167, 84, 57, 90) {Name = "霧雨魔理沙",Category = "自機"}));::// ⑨位でいいの。謙虚だもの私tupleList.Add((9, new Character(174, 92, 63, 91) {Name = "アリス・マーガトロイド",Category = "東方妖々夢"}));::,,,,,,// 世界一位
tupleList.Add((1, new Character(171, 89, 52, 88) {
悔しいので来年は抜いてやるぜtupleList.Add((2, new Character(167, 84, 57, 90) {Name = "霧雨魔理沙",Category = "自機"}));::// ⑨位でいいの。謙虚だもの私tupleList.Add((9, new Character(174, 92, 63, 91) {Name = "アリス・マーガトロイド",Category = "東方妖々夢"}));::,,,,,,// 悔しいので来年は抜いてやるぜ
tupleList.Add((2, new Character(167, 84, 57, 90) {
⑨位でいいの。謙虚だもの私tupleList.Add((9, new Character(174, 92, 63, 91) {Name = "アリス・マーガトロイド",Category = "東方妖々夢"}));::,,,,,,// ⑨位でいいの。謙虚だもの私
tupleList.Add((9, new Character(174, 92, 63, 91) {

    
 dbの処理
                
 array[0,2]-&gt;13  array[4,0]-&gt; 51
    
albireoさま コメントよりコピー
            Padding = new Thickness(100, top, 100, 0);
これに変更！！
                    
and the rotation from the transform of the plane collider
    
 式// デリゲートの宣言
delegate void Printer (string s);

    private void ChangeisOpen()  
状態が変わったことを１秒遅れにするためにInvokeメソッド
                
 残り時間10秒になったときにテキストの色を赤に変更する
            
 平行投影
        log4net.GlobalContext.Properties["user"] = "user"; 
 クライアントのユーザーIDを設定する
                        
 Multiple teamsservices failure at the same time.
{引数} =&gt; {処理内容&amp;return}list.Select(x =&gt; x * 2);// { 2, 4, 6, 8, 10 },,,//{引数} =&gt; {処理内容&amp;return}
list.Select(x =&gt; x * 2);

                    
 メッセージを使って何かする
                
g.FillRectangle(b, x+1, y+1, 5, 5);
            
 Evirnoment Variables and appsettings has been set
lookup[2000] 
 =&gt; 発行年が2000年の book オブジェクト一覧が返る// 第二引数にラムダ式を与えることで、値を指定できる
var lookup = books.ToLookup(b =&gt; b.PublishedYear, b =&gt; b.Title);
// ToLookup と ToDictionary で2度ループが回る
var dic = books
// GroupBy と ToDictionary なら ループが回るのは ToDictionary の一度だけ
var dic = books

            
 パイプサーバ作成
            
 PLINQ(2')
        string[] str = Console.ReadLine().Split(' '); 
ここで半角スペース区切りで取る
...public string GetString(string resourceKeyName) {return Translator&lt;Properties.Resources&gt;.Translate(resourceKeyName);}public void ChangeCulture(CultureInfo cultureInfo){Translator.Culture = culture;}// ...,,,
            
 (S s) =&gt; (T)s
        
render the partial view
                string returnStr = inst.ReadString(); 
 応答を文字列で取得する
foreach(var txtbox in GetAllControls&lt;TextBox&gt;(form, c =&gt; c.Name.EndsWith("ID"))){名前が"ID"で終わるテキストボックスをdisableにforeach(var txtbox in GetAllControls&lt;TextBox&gt;(form, c =&gt; c.Parent?.Name.StartWith("panel") ?? false)){名前が"panel"で始まるコンテナ直下のテキストボックスを非表示に
            
 in the case the resource doesn't exist, return null.
            
 ジャンプできる場所はすべて試した。解は見つからない。
    
テスト用クラス
        System.Threading.Thread.Sleep(len);  
 一定時間音を鳴らし続ける
// 重複した単語を探す
var pattern = @"\b(\w+?)\s\1\b";

            
結果をタプルで返す
ServicePointManager.DnsRefreshTimeout = 10 * 1000; 
 10秒に設定
            
 描画済みにする
// 意図通りのコード
var mode = Mode.READ;
// 想定外の値も入ってしまう!
mode = 4;
// ビルドエラー!!
mode = 4;

        
 追尾可能ならマウスに追従させる
var c = null == CONST;    
 false
        
他は"deleted"とsecureなんたらとかいうの。いらない。（知らんけど)
if (text.Contains(target)) 
 &lt;-拡張メソッドのほうの Contains
            case 2: 
 フェードイン
        
 Startup.cs の設定によりコンストラクタの引数に FizzBuzzService が渡される
                
IDセルの行幅を設定
            1000 
 最大高
            
return View(await _context.Salary.ToListAsync());
    .Select( (v,idx) =&gt; v.Equals(refer[idx]) ? "" : v)　
差分なしは何を返せばいいのか? nullは嫌だ
                    
dのループ
　　　public int  Dmy3;      
 予約(0)//()内の数値はその区間が使用するビット数
二つ目以降はビット数とそのセクションが始まる直前のセクションを書く
ビットフィールドに構造体をセットする場合public void SetConfig(ref _Sel sel){BitVector32 bv = new BitVector32();bv[Mode1]     = sel.Mode1;bv[SelectCh]  = sel.SelectCh;bv[Function1] = sel.Function1;WriteDevice(bv.Data);}// ビットフィールドから構造体へセットする場合public void GetConfig(ref _Sel sel){int data = 0;ReadDevice(ref data);//インスタンスを作るときに数値を入れるとそのビットフィールドが持つ数値を設定できる．//bv.Dataのアクセサはgetだけなのでインスタンス生成時に引数として入れる必要があるBitVector32 bv = new BitVector32(data);sel.Mode1     = bv[Mode1];sel.SelectCh  = bv[SelectCh];sel.Function1 = bv[Function1];},,,// ビットフィールドに構造体をセットする場合

// ビットフィールドから構造体へセットする場合

//インスタンスを作るときに数値を入れるとそのビットフィールドが持つ数値を設定できる．
bv.Dataのアクセサはgetだけなのでインスタンス生成時に引数として入れる必要がある

        
 (x,y)から左斜め下(45度)の位置を列挙する　(x,y)含む
Console.WriteLine(hhmmss);  
 14:50:21
// 対象のコレクション
var list = Enumerable.Range(1, 10);
// N 個ずつの N
var chunkSize = 3;
foreach (var chunk in chunks){ 動作確認foreach (var chunk in chunks){ 動作確認foreach (var chunk in chunks){ 動作確認
    
 パネル3を非表示
                    Array.Clear(_items, 0, size); 
 Clear the elements so that the gc can reclaim the references.
            
 今は終わらんよと伝える
        
 何か重い処理// 含んでいるか
arr.Any(s =&gt; s == "a");
絞り込みarr.Where(s =&gt; s.Length &gt;= 2);// IEnumerable&lt;string&gt; { "bb", "ccc" }// 射影arr.Select(s =&gt; s + s);// IEnumerable&lt;string&gt; { "aa", "bbbb", "cccccc" },,,arr.Where(s =&gt; s.Length &gt;= 2).Select(s =&gt; s + s).ToArray();,,,// 絞り込み
arr.Where(s =&gt; s.Length &gt;= 2);
射影arr.Select(s =&gt; s + s);// IEnumerable&lt;string&gt; { "aa", "bbbb", "cccccc" },,,arr.Where(s =&gt; s.Length &gt;= 2).Select(s =&gt; s + s).ToArray();,,,// 射影
arr.Select(s =&gt; s + s);

        
 GetMouseButtonDownで、UnityEditor上で動作確認できます。
                
 プレイ中
                            &lt;dd:DragDrop.DragAdornerTemplate&gt;    
 Adornerを変更するところ
追加    private FollowCamera mFollowCameraMinimap;　
 MinimapCameraを指定
        
Y軸方向に常に同じ力を与える
    
 プロパティ
        
 -------------------------------------
    
 現在日付 &lt; 渡された日付の場合
        
現在の行番号をuiTextに流し込み、現在の行番号を一つ追加する
  
 例
            
foreach (型名 変数名 in 配列名)
            
 3. 20171213の体重を表示
            
 5. 出力
                
 weights.Add(71.2f);が消えている！
            
 4. for文で回す
        
-回答を出力する
            
 速度を再設定
        
-回答を出力する
        
 (x,y)から左斜め下(45度)の位置を列挙する　(x,y)含む
    
 Use this for initialization//barを見つける
GameObject energybar = GameObject.Find ("EnergyBar");
//barに付けるスクリプトHpControllerを見つける
hpController = energybar.GetComponentInChildren&lt;HpController&gt;();
Playerにぶつかったときの反応void OnTriggerEnter (Collider col){if (col.tag == "Player") {//HpControllerに"Eneup"を実行するように指示hpController.SendMessage ("EneUp5");//HpControllerに"UpdateHpValue"を実行するように指示hpController.SendMessage("UpdateHpValue");//ぶつかった泡(このスクリプトがついているgameobject)をDestroyするDestroy(this.gameObject);}}},,,//Playerにぶつかったときの反応
void OnTriggerEnter (Collider col){
//HpControllerに"Eneup"を実行するように指示
hpController.SendMessage ("EneUp5");
//HpControllerに"UpdateHpValue"を実行するように指示
hpController.SendMessage("UpdateHpValue");
//ぶつかった泡(このスクリプトがついているgameobject)をDestroyする
Destroy(this.gameObject);

  var option = new ExpandPropertyOptions(){MaxReferenceLevel=2}; 
2階層目までOK
    
 Update is called once per frame}else if (left) {goleft ();          右に動かすためのメソッドを呼び出す左に動かすためのメソッドを呼び出す} else {//          ボタンを押していない時transform.rotation = Quaternion.Euler (0, 0, 0);//          プレイヤーを元の角度に戻す}}//          左に動かすためのメソッドを呼び出す
} else {
transform.rotation = Quaternion.Euler (0, 0, 0);//          プレイヤーを元の角度に戻す          ボタンを押していない時//          プレイヤーを元の角度に戻す
}
//      右ボタンを押している間
right = true;
//      右ボタンを押すのをやめた時
right = false;
//      左ボタンを押している間
left = true;
//      左ボタンを押すのをやめた時
left = false;
//          プレイヤーの位置が5.0f以下の時
          ↑画面からはみ出さないための条件
transform.rotation = Quaternion.Euler (0, -20, -10);//          プレイヤーの角度をy軸周りに-20度、z軸周りに-10度回転させる          プレイヤーをx軸方向に秒速5.0fで動かす//          プレイヤーの角度をy軸周りに-20度、z軸周りに-10度回転させる
          ↑プレイヤーがグッと肩を入れて移動してる感を出す、この一文は無くても問題なし
//          プレイヤーの位置が-5.0f以上の時
          ↑画面からはみ出さないための条件
transform.rotation = Quaternion.Euler (0, 20, 10);//          プレイヤーの角度をy軸周りに20度、z軸周りに10度回転させる          プレイヤーをx軸方向に秒速-5.0fで動かす//          プレイヤーの角度をy軸周りに20度、z軸周りに10度回転させる
          ↑プレイヤーがグッと肩を入れて移動してる感を出す、この一文は無くても問題なし

    
評価
                        
 目標としているポイントに接近した場合は次のポイントを新しい目標地点に設定する
    
継承クラスのコンストラクタはこう書く
    
 broadcast through SignalR
            
 コンソールに出力
        
------------------------------------------------------------------------------
            
閉じる
        private readonly float THICKNES_HALF = 0.05f; 
 四方を囲む壁の厚さの半分
        
 ログイン処理が終了するまで以下の行でストップ
    
 ここから下は受け取るJsonのデータ型を定義しているよ -----------------------
        
Console.ReadLine();
    static int GetSumOfRowNumber(List&lt;List&lt;int&gt;&gt; OriginMagicSquare ,int row)
引数2に指定した行riの合計値(ri_c0+ri_c1+ri_c2...ri_cN)を返すメソッド
        
 WalkingFlag
            
 フォロワーをリストに追加し、プレイヤーとフォロワーの移動速度を再設定
    DoHeavyTask(); 
 ← 10秒かかる重い処理// ここではバックグラウンド？で DoSomethingAsync を開始だけしたつもり（非同期のつもり）
var task = DoSomethingAsync();
// ここで await することで完了を待っているつもり
await task;

        URL = string.Format("https:
docs.google.comformsde1FAIpQLSdjLLjO0OEYT44hJlxUBFRm2wz2GTqpatku7sJb-aBv8eOcxgviewform?usp=pp_url&amp;entry.1543890908={0}&amp;entry.966225331={1}&amp;entry.451690904={2}&amp;entry.465137427={3}",
            
 Add 10000 instances to the List. 
    private int mFollowerCount; 
 アクティブ状態のフォロワー数
        
保存
    case XLDataType.Text:       
文字列
        
---------------------------------------------------------------------------------
        
}
    Debug.Log("foo は null "); 
 NG
        byte[] vals = { 0x0d}; 
 , 0x0a
        string path2;
out file name
    
 ↓Pythonスクリプトで生成したやつをコピペ
        
 (x,y)から左斜め下(45度)の位置を列挙する　(x,y)含む
            
 変換後がint.MaxValueに収まるか?
芸能人好感度ランキングから名前を借りました。出身地や年齢は加工しています。var people = new List&lt;Person&gt;{new Person { Name = "明石家さんま", Age = 63, Gender = Gender.Male, BirthPlace = "東京都"},new Person { Name = "阿部寛", Age = 54, Gender = Gender.Male, BirthPlace = "神奈川県"},new Person { Name = "マツコ・デラックス", Age = 46, Gender = Gender.Male, BirthPlace = "千葉県"},new Person { Name = "内村光良", Age = 54, Gender = Gender.Male, BirthPlace = "熊本県"},new Person { Name = "新垣結衣", Age = 30, Gender = Gender.Female, BirthPlace = "神奈川県"},new Person { Name = "浅田真央", Age = 28, Gender = Gender.Female, BirthPlace = "東京都"},new Person { Name = "綾瀬はるか", Age = 33, Gender = Gender.Female, BirthPlace = "熊本県"}};,,,var first = people.First();//明石家さんま 63才 男 東京都出身,,,var men = people.Where(p =&gt; p.Gender == Gender.Male).ToList();//明石家さんま 63才 男 東京都出身//阿部寛 54才 男 神奈川県出身//マツコ・デラックス 46才 男 千葉県出身//内村光良 54才 男 熊本県出身,,,var firstFemale = people.First(p =&gt; p.Gender == Gender.Female);//新垣結衣 30才 女 神奈川県出身,,,var existPersonFromKumamoto = people.Any(p =&gt; p.BirthPlace == "熊本県");//True,,,var areAllMale = people.All(p =&gt; p.Gender == Gender.Male);//False,,,var orderedByAge = people.OrderBy(p =&gt; p.Age).ToList();//浅田真央 28才 女 東京都出身//新垣結衣 30才 女 神奈川県出身//綾瀬はるか 33才 女 熊本県出身//マツコ・デラックス 46才 男 千葉県出身//阿部寛 54才 男 神奈川県出身//内村光良 54才 男 熊本県出身//明石家さんま 63才 男 東京都出身,,,var orderedByAgeThenByName = people.OrderByDescending(p =&gt; p.Age).ThenBy(p =&gt; p.Name).ToList();//明石家さんま 63才 男 東京都出身//阿部寛 54才 男 神奈川県出身//内村光良 54才 男 熊本県出身//マツコ・デラックス 46才 男 千葉県出身//綾瀬はるか 33才 女 熊本県出身//新垣結衣 30才 女 神奈川県出身//浅田真央 28才 女 東京都出身,,,var groupByAndOrderedBy = people.GroupBy(p =&gt; p.BirthPlace).OrderBy(g =&gt; g.Key).ToList();//熊本県//内村光良 54才 男 熊本県出身//綾瀬はるか 33才 女 熊本県出身//神奈川県//阿部寛 54才 男 神奈川県出身//新垣結衣 30才 女 神奈川県出身//千葉県//マツコ・デラックス 46才 男 千葉県出身//東京都//明石家さんま 63才 男 東京都出身//浅田真央 28才 女 東京都出身,,,var ages = people.Select(p =&gt; p.Age).ToList();//63//54//46//54//30//28//33,,,var birthPlaces = people.Select(p =&gt; p.BirthPlace).Distinct().ToList();//東京都//神奈川県//千葉県//熊本県,,,var min = people.Min(p =&gt; p.Age);//最小値:28var max = people.Max(p =&gt; p.Age);//最大値:63var average = people.Average(p =&gt; p.Age);//平均値:44var sum = people.Sum(p =&gt; p.Age);//合計値:308,,,//芸能人好感度ランキングから名前を借りました。出身地や年齢は加工しています。
var people = new List&lt;Person&gt;
//明石家さんま 63才 男 東京都出身
,,,
//明石家さんま 63才 男 東京都出身
阿部寛 54才 男 神奈川県出身
//マツコ・デラックス 46才 男 千葉県出身
内村光良 54才 男 熊本県出身
//新垣結衣 30才 女 神奈川県出身
,,,
//浅田真央 28才 女 東京都出身
新垣結衣 30才 女 神奈川県出身
//綾瀬はるか 33才 女 熊本県出身
マツコ・デラックス 46才 男 千葉県出身
//阿部寛 54才 男 神奈川県出身
内村光良 54才 男 熊本県出身
//明石家さんま 63才 男 東京都出身
,,,
//明石家さんま 63才 男 東京都出身
阿部寛 54才 男 神奈川県出身
//内村光良 54才 男 熊本県出身
マツコ・デラックス 46才 男 千葉県出身
//綾瀬はるか 33才 女 熊本県出身
新垣結衣 30才 女 神奈川県出身
//浅田真央 28才 女 東京都出身
,,,
//熊本県
内村光良 54才 男 熊本県出身
//綾瀬はるか 33才 女 熊本県出身

//神奈川県
阿部寛 54才 男 神奈川県出身
//新垣結衣 30才 女 神奈川県出身

//千葉県
マツコ・デラックス 46才 男 千葉県出身
//東京都
明石家さんま 63才 男 東京都出身
//浅田真央 28才 女 東京都出身
,,,
//東京都
神奈川県
//千葉県
熊本県
//最小値:28

//最大値:63

//平均値:44

//合計値:308
,,,

// ImmutableなListは、項目が追加された別のインスタンスを生成する
var addedList = list.Add(11);
// MutableなListは、自身の中身を書き換える
list.Add(11);
// 大量の変更が必要な場合、Builderに。
var builder = originalList.ToBuilder();
// 変更後、ToImmutable()で、Immutableに。
var newList = builder.ToImmutable();
// 大量の変更が必要な場合、Builderに。
var builder = new StringBuilder(originalString);
// Immutableに。
var newStr = builder.ToString();

        
データベース接続情報
        
SetProperty(古値, 新値, 更新(古値!=新値)時に実行するcallback);
            
 リクエストBody再読み込み
            
　DataGridのDataContextを再設定する
            
Assert.AreEqual("Graphic", employee.DepartmentName);
            Console.WriteLine(data);
上の説明文から、Main内のdataがインクリメントされたままで値が出力されるため、2となっている。
format.ToString(new CultureInfo("en-US")); 
 $1,234.56
    public event PropertyChangedEventHandler PropertyChanged; 
これ//     このコードはテンプレートから生成されました。

//     このファイルを手動で変更すると、アプリケーションで予期しない動作が発生する可能性があります。
     このファイルに対する手動の変更は、コードが再生成されると上書きされます。

    
 登録されたメソッドを一斉に実行するInvoke時に実行されるメソッド1private void UnityEventCallbackMethod_1 () {Debug.Log ("UnityEvent実行完了 その1");}// Invoke時に実行されるメソッド2private void UnityEventCallbackMethod_2 () {Debug.Log ("UnityEvent実行完了 その2");},,,// Invoke時に実行されるメソッド1
private void UnityEventCallbackMethod_1 () {
Invoke時に実行されるメソッド2private void UnityEventCallbackMethod_2 () {Debug.Log ("UnityEvent実行完了 その2");},,,// Invoke時に実行されるメソッド2
private void UnityEventCallbackMethod_2 () {

      
VR空間の高さを変更する
        
 Commitを行うまでの間ロックが保持される
            
さすがにハイジャックはされたくなのでむき出しの配列では返さない。
    
 更新処理
        
Debug.Log("span.TotalMinutes " + span.TotalMinutes);
            byte[] buf; 
 文字列
            
 You can change these numbers to test different predictions
    
 ExecuteScalar が使えることを教えてもらいました
                    
 intになってるはずなので例外チェックしない
  new AmazonS3Client(); 
 おそらく production は EC2 のインスタンスメタデータ等から接続するはず
                    
 読み込んだファイルを閉じます。
var r8 = r1 with { Length = 11 }; 
 OK
            
 エラー表示処理
            
 さらに自身の子ウインドウを列挙
                
 読み込んだファイルを閉じます。
    
 なんらかの処理
if(GvrControllerInput.HomeButtonDown){Debug.Log("HomeButtonDown"); Daydreamボタンを押した瞬間Trueif(GvrControllerInput.Recentered){Debug.Log("Recentered"); ポジションリセンターした瞬間True（Daydreamボタンの長押し）if(GvrControllerInput.AppButtonDown){Debug.Log("AppButtonDown"); アプリボタンを押した瞬間Trueif(GvrControllerInput.AppButtonUp){Debug.Log("AppButtonUp"); アプリボタンを押した指を離した瞬間Trueif(GvrControllerInput.TouchDown){Debug.Log("TouchDown"); タッチパッドにタッチした瞬間Trueif(GvrControllerInput.TouchUp){Debug.Log("TouchUp"); タッチパッドから指が離れた瞬間True// タッチパッドにタッチしている間ずっとTrue
Debug.Log("IsTouching : " + GvrControllerInput.IsTouching);
// タッチパッドのタッチしている位置 0~1
Debug.Log("TouchPos : " + GvrControllerInput.TouchPos);
// タッチパッドのタッチしている位置 -1~1
Debug.Log("TouchPosCentered : " + GvrControllerInput.TouchPosCentered);
// コントローラの傾き
Debug.Log("Orientation : " + GvrControllerInput.Orientation);
Vector3 rayDir = GvrControllerInput.Orientation * Vector3.forward;Debug.Log("rayDir : " + rayDir); コントローラの正面方向のベクトル// 角速度 | 回転の動きを取得
 操作しないとVector3.zeroに戻る
// ex.一定速度以上でコントローラを振ったらボールを投げる
Debug.Log("Gyro : " + GvrControllerInput.Gyro);
// 加速度 | 重力、振動、衝撃を計測
 ex.コントローラが傾いているとか、ぶら下がっているとかを判定する

    
 『《自分自身を》減速する』様々な車class Car : ICar { /* ・・・*/ }class Bus : ICar { /* ・・・*/ },,,// 様々な車
class Car : ICar { /* ・・・*/ }

                    
ファイルのロードに失敗する場合は次へ行く。
        
何もしない
#if _IOS_ 
iOSがターゲットのOSの際には、実行されるもの
                routeTemplate: "api
{controller}{action}{id}", ここは編集する。
        
 イベント購読
        
 Non-inline from List.Add to improve its code quality as uncommon path
            var data = 1; 
上のCountUpのdataと、このdataは別物！
        
 Event Hubs Client Parameter
            
 if
var hogeTypes = (HogeType[])Enum.GetValues(typeof(HogeType));
 System.Arrayが返されるので、キャストする。
                        
 item.Task.Wait();
    
 Update is called once per frame
    
プロセスの開始
    
 その他の定義は省略// 実際には例外処理や後処理などがあるが、ここでは省略
,,,
イテレータ構文と呼ばれているが、実際にはジェネレータstatic IEnumerable&lt;int&gt; Generate5Primes() {yield return 2;yield return 3;yield return 5;yield return 7;yield return 11;}// 無限ループも使い方次第static IEnumerable&lt;double&gt; RandomDoubles() {var random = new Random();while (true) {yield return random.NextDouble();}},,,// イテレータ構文と呼ばれているが、実際にはジェネレータ
static IEnumerable&lt;int&gt; Generate5Primes() {
無限ループも使い方次第static IEnumerable&lt;double&gt; RandomDoubles() {var random = new Random();while (true) {yield return random.NextDouble();}},,,// 無限ループも使い方次第
static IEnumerable&lt;double&gt; RandomDoubles() {

      
 通知に失敗したのでログに出力
    
 Update is called once per frame
             
&lt;code&gt;がなかった=認証に失敗した場合
            
 各ファイルの基点となるディレクトリを設定
    
 Update is called once per frame
    
 Update is called once per frame
            
 NonPublicなフィールドのうち、SerializeField属性が設定されてるものを取得する
        new HighKobold(new Mage()).Show();
Hp:20 Mp:10 Skill:コボルトサンダー
            
 最後に逆転させる。1階が配列の一番最後に来るようにする。
    public Queries(string intent, double score) 
ここのintentとかはluisの要素と一緒にしないとダメかも
            
Asset
            
 探したメソッドを実行する。　呼ぶメソッドはint,intを引数にし、戻り値もintのため、intにcastしている
            p.Show(title:Console.ReadLine());
名前付き引数
                
Assert
// ApplicationDeployment.IsNetworkDeployedがtrueの時に取得可能
ApplicationDeployment.CurrentDeployment.DataDirectory

    
 exeと同じパスに保存します (最後に'\'を含む)// ディレクトリの最後の'\'の有無が異なるため、Path.Combineでつなげる
string dataPath = Path.Combine(dataDirectory, "data.ini");
出力using (var writer = new StreamWriter(dataPath)){writer.WriteLine("data");},,,// 出力
using (var writer = new StreamWriter(dataPath))

Console.WriteLine("{0}ミリ秒", sw.ElapsedMilliseconds);  
 結果 → 3003ミリ秒
        
トラッキングの状態に応じてARオブジェクトの表示を切り替え
this.LabelEdit = false; 
 テキストボックスを表示するので、編集不可にしておく
    
 問題を解く 
    
 エラー処理は省略
           
このコードはメンバ定義もバインディングもしてないのでこのままでは動きません。
// aとbそれぞれに、値を入れて、いろいろ試してみます。
int a = 100;
Javaなら、System.out.printf("a &gt; b : %s%n", (a &gt; b));とか。Console.WriteLine("a &gt; b : {0}",     (a &gt; b));Console.WriteLine("a - b &gt; 0 : {0}", (a - b &gt; 0));,,,int a = 5;int b = -2;int answer = a / b;,,,// 整数値の配列var array = new int[] { 3, 1, -2147483647, -5 };// リストに格納var list = new List&lt;int&gt;(array);// ラムダ式で評価してソートlist.Sort((a, b) =&gt;{return (a - b);});foreach (var item in list){Console.WriteLine(item);},,,(a, b) =&gt;{return (a - b);},,,int compare(int a, int b){return (a - b);},,,list.Sort((a, b) =&gt;{int result = -1;if( a &gt; b ){result = 1;}else if( a == b ){result = 0;}return result;});,,,list.Sort((a, b) =&gt;{return (a &gt; b) ? 1 : ((a == b) ? 0 : -1);});,,,list.Sort((a, b) =&gt;{return a.CompareTo(b);});,,,// Javaなら、System.out.printf("a &gt; b : %s%n", (a &gt; b));とか。
Console.WriteLine("a &gt; b : {0}",     (a &gt; b));
整数値の配列var array = new int[] { 3, 1, -2147483647, -5 };// リストに格納var list = new List&lt;int&gt;(array);// ラムダ式で評価してソートlist.Sort((a, b) =&gt;{return (a - b);});foreach (var item in list){Console.WriteLine(item);},,,(a, b) =&gt;{return (a - b);},,,int compare(int a, int b){return (a - b);},,,list.Sort((a, b) =&gt;{int result = -1;if( a &gt; b ){result = 1;}else if( a == b ){result = 0;}return result;});,,,list.Sort((a, b) =&gt;{return (a &gt; b) ? 1 : ((a == b) ? 0 : -1);});,,,list.Sort((a, b) =&gt;{return a.CompareTo(b);});,,,// 整数値の配列
var array = new int[] { 3, 1, -2147483647, -5 };
// リストに格納
var list = new List&lt;int&gt;(array);
// ラムダ式で評価してソート
list.Sort(

if (1 is var x &amp;&amp; (x = x * 2) != 1) { } 
Intなので恐らく2倍して1になる数値はない
                tokenSource.Cancel(); 
 Taskキャンセル
                    
 以下のようにTestテーブルにアクセスできる
        
 経緯度の値を取得できるか判定
            var configuration = new Configuration(); 
 Enable-Migrationsで自動生成されたクラス
            
ヒントを参考に答えを入力
        
  Create credential and instantiate service
  
 あれこれ list.Add() する処理foreach (var item in fuga) { }var tmp = fuga[0]; 読み出しはできる// 書き込みはできない
 コンパイルエラー

            
 Release any cached data, images, etc that aren't in use.
                
 Following trick can reduce the range check by one
        
 GET: FileUpload
        
sourceディレクトリのAssetBundle対象化を解除
            var m2 = new Messeage(2);
静的コンストラクターは実行されない
            
 ブラウザを閉じます。
    
 Update is called once per frame
        
Exif情報を読み取って自動で回転や左右上下反転を行う
// DataRowを宣言
DataRow dr;
// 行を作成
dr = dt.NewRow();
// 行を表に追加
dt.Rows.Add(dr);
// ※以下のような書き方も可能。ただし、列と値、その位置は揃える事。
 ⇒『td.Rows.Add(001, "test", "田中太郎");』

        dtGetLog = (DateTime)pso.Properties["TimeCreated"].Value;   
ログの日付取得// なんかやりたい本処理
～～～～～～～～～～～～～～～～～～

        
↓この必ず通ってしまうif文がボトルネックなのでは！！！？public new T GetComponent&lt;T&gt;() where T : Component//    {//        var type = typeof(T);//        if (_componentCache.ContainsKey(type) == false)//        {//            var component = base.GetComponent&lt;T&gt;();//            if (component == null) component = gameObject.AddComponent&lt;T&gt;();////            _componentCache.Add(type, component);//        }////        return (T) _componentCache[type];//    }public new T GetComponent&lt;T&gt;() where T : Component{return (T) _componentCache[typeof(T)];}private void AddCache&lt;T&gt;() where T : Component{_componentCache[typeof(T)] = base.GetComponent&lt;T&gt;();},,,for (var i = 0; i &lt; max; ++i){GetComponent&lt;SpriteRenderer&gt;().color += Color.gray;},,,//        if (_componentCache.ContainsKey(type) == false)//        {        var type = typeof(T);if (_componentCache.ContainsKey(type) == false)//        {//            var component = base.GetComponent&lt;T&gt;();//            if (component == null) component = gameObject.AddComponent&lt;T&gt;();////            _componentCache.Add(type, component);//        }////        return (T) _componentCache[type];//    }public new T GetComponent&lt;T&gt;() where T : Component{return (T) _componentCache[typeof(T)];}private void AddCache&lt;T&gt;() where T : Component{_componentCache[typeof(T)] = base.GetComponent&lt;T&gt;();},,,for (var i = 0; i &lt; max; ++i){GetComponent&lt;SpriteRenderer&gt;().color += Color.gray;},,,//            if (component == null) component = gameObject.AddComponent&lt;T&gt;();//            var component = base.GetComponent&lt;T&gt;();
        
 問題がなければ、二値の和をそのまま返す。
            
 ここでdynamicを使用することが大事
        if (m.Msg == 0x31D &amp;&amp; Clipboard.ContainsImage()) OnClipboardImageUpdate(); 
 WM_CLIPBOARDUPDATE
        private int _version; 
 Do not rename (binary serialization)
    
 こんな拡張メソッド書けば、インデックス付きのforeachができる。
            
 支払価格を計算する
    
数行の処理
            
 Handle when your app resumes
    
ここに処理を書く
            
時間がどれだけかかったかを知りたい場合はRoundtripTimeプロパティで取得可能
            var h = new Hoge ("constructor"){value = "initializer"};
それぞれの（）{}で、コメントアウトすると、結果が変わるよ☆
        
一定時間ごとに値を加算、コンソールに出力する。
    
 重い処理。00:00:02.0139477,,,source.AsParallel().ForAll(i =&gt; {Fetch(i);});Console.WriteLine(sw.Elapsed);// 00:00:00.5032450,,,Parallel.ForEach(source, i =&gt; {Fetch(i);});Console.WriteLine(sw.Elapsed);// 00:00:00.5017158,,,00:00:00.5032450,,,Parallel.ForEach(source, i =&gt; {Fetch(i);});Console.WriteLine(sw.Elapsed);// 00:00:00.5017158,,,
await Task.Delay(1000); 
1秒差でColdなObservableソースを2回購読
                
ファイルを上書きする
        
 各ビットが立っていれば、チェックされているとみなす
    
 部署データ
    
 Update is called once per frame
            
BEEPでカエルの歌の途中まで作成
            
 サーバーサイドキャラクターではなかった場合、元に戻す
        
 降順でパラメータを追加
                
 引数を取らないオプション
        
 8桁の数が求められるたびに呼び出される。
        return 1000.0 * (double)sw.ElapsedTicks 
 (double)Stopwatch.Frequency;  処理時間
    
 実際の処理は省略
            
 各インスタンスを走査// LastNameでグループ化する（ここで「既定の等値比較子」を使用している）
var groups = people.GroupBy(v =&gt; (AVocaloid)v);
これを追加public override bool Equals(object obj){return obj is AVocaloid ? Equals((AVocaloid)obj) : base.Equals(obj);}// ついでに演算子も追加しておくpublic static bool operator==(AVocaloid obj1, AVocaloid obj2){return obj1.Equals(obj2);}public static bool operator!=(AVocaloid obj1, AVocaloid obj2){return !(obj1 == obj2);},,,// これを追加
public override bool Equals(object obj)
ついでに演算子も追加しておくpublic static bool operator==(AVocaloid obj1, AVocaloid obj2){return obj1.Equals(obj2);}public static bool operator!=(AVocaloid obj1, AVocaloid obj2){return !(obj1 == obj2);},,,// ついでに演算子も追加しておく
public static bool operator==(AVocaloid obj1, AVocaloid obj2)

  } 
 df.Dispose() が呼ばれる
        
コンストラクター(引数を省略)
    
ネストされたファイル情報集を平坦化する。
//抽出
var row = rows.Where(x =&gt; x.name == "yamada");
//1件抽出
var row = rows.FirstOrDefault(x =&gt; x.id == 2);
//全件に処理
var row = rows.Select(x =&gt; x * x);
//存在確認
var row = rows.Any(x =&gt; x.id == 2);

        
 歩かずに常に空を飛んで移動するので、このメソッドでは何もしない
    Debug.Log(b[i]); 
 配列外アクセス
                
 ......ここで条件分岐。11と12と13の場合、ともに10を返却する
        
}
        
 https:docs.aws.amazon.comja_jpapigatewaylatestdeveloperguideapi-gateway-integration-settings-integration-response.html
    
 Update is called once per frame
    
 キャッシュを無効にするように追加
                tokenSource.Cancel(); 
 Taskキャンセル
                
ピンチで拡大・縮小
            InitOnlyProperty = "baz",       
OK
values.Select(v =&gt; v * v); 
 結果：1, 4, 9, 16, 25
    
 データを行単位で取得
        
データを反映する//念の為アプリを落とす
QuitApp();

            
 引数optionsをShellのコマンドとして渡す。
            i 
= 1024; GB
        foreach (var prime in primes) 
 &lt;- ここで例外が発生する
            
 ショートカットのリンク先の取得
  where T : Enum  
 コンパイルエラー
        
 Assert
        Console.WriteLine(src);  
 Point2D { X = 10, Y = 20 }
    
 Update is called once per frame// 時、分を取得する（hh:mm (AM/PM)）
ClockText.text = DateTime.Now.ToShortTimeString();
// 時、分、秒を取得する（hh:mm:ss (AM/PM)）
ClockText.text = DateTime.Now.ToLongTimeString();
// 日付を取得する（MM/dd/yyyy）
ClockText.text = DateTime.Now.ToShortTimeString();
// 日付を取得する（曜日,日付,yyyy）
ClockText.text = DateTime.Now.ToLongTimeString();

            
 ScriptableObject にデータを格納
        
 n回、actionを呼び出す
        
 (3)条件を満たした場合はDismiss()でダイアログを閉じる
    
 Constructor injection.
    
 アイデンティコンを描画
            
 IsSubsetOfは順不同
            return this.data;
thisで、フィールドのdataにアクセスし、値を返す。
    
 サンプルデータを設定
            string reqUrl = $"https:
chart.googleapis.comchart?cht=qr&amp;chl={urlEnc}&amp;chs=300x300&amp;chld=H|1";
&gt; d.ToString("ggyy年MM月dd日", cul)                                       
 ToStringの方が記述量は少ない
    
 日の出日の入り時刻は最大でも一日で一分程度しかズレないのでほぼ問題ない。
        
 PDFを1ページずつ画像に変換し、リストビューに挿入
                System.Diagnostics.Process.Start("http:
www.google.com");
            
 例えばGoogle SlidesをPDF形式でダウンロードする
var prefix = "folder1
folder2samp";    ファイル名の中間一致//var prefix = "folder1/fol";           //フォルダ名の中間一致でもOK


            
deltaTimeを用いることで常に一定の速度になる
Console.WriteLine(x =&gt; x * x); 
 -&gt; 16
                    
Loop Process
//xはインスペクタ上のUV RectのXです、y,w,hも以下同文
}

        
同じ属性が複数含まれていても、最初のみ返す
//Unityスクリプトリファレンス/CharacterController.Moveより
https:docs.unity3d.com/ja/current/ScriptReference/CharacterController.Move.html
クラス名はファイル名に一致させるpublic class MyCharacterController : MonoBehaviour {public float speed = 6.0F;public float jumpSpeed = 8.0F;public float gravity = 20.0F;private Vector3 moveDirection = Vector3.zero;void Update() {CharacterController controller = GetComponent&lt;CharacterController&gt;();if (controller.isGrounded) {moveDirection = new Vector3(Input.GetAxis("Horizontal"), 0, Input.GetAxis("Vertical"));moveDirection = transform.TransformDirection(moveDirection);moveDirection *= speed;if (Input.GetButton("Jump"))moveDirection.y = jumpSpeed;}moveDirection.y -= gravity * Time.deltaTime;controller.Move(moveDirection * Time.deltaTime);}},,,//クラス名はファイル名に一致させる
public class MyCharacterController : MonoBehaviour {

temp = char.ToUpper(name[0]) + name.Substring(1).ToLower();     
 "Erasermotorphantom"// 先頭から5文字抜き出す　abcde
temp = hoge.Substring(0, 5);
// 5文字スキップし、6文字目から2文字取得　fg
temp = hoge.Substring(5, 2);
// 22文字スキップし、それ以降の文字列を取得する　wxyz
temp = hoge.Substring(22);
// 文字列中の"hoge"を"piyo"に置換 piyopiyoになる
temp = hoge.Replace("hoge", "piyo");
// 文字列中から"piyo"を削除 hogeになる
temp = hoge.Replace("piyo", "");
// Joinで一発。for文で最後の要素以外にコンマを追加とかしなくていい
string line = string.Join(",", elements);
// 一行をコンマで区切って配列に入れる。
string[] splitStr = line.Split(',');

           Console.WriteLine(p.Show());
ParsonクラスのなかのShowメソッドが呼び出される。
    
 File.Exists()で存在するとなっても、実際は存在しないことがあるので再チェック
    
削除リスト
            
 p =&gt; p.Level &gt;= 10
            
 受験者全員の数学の平均点を求めたい
    
 GET apivaluesAPIException
Console.WriteLine($"exist value = {sourceDict.GetOrAdd("A", 10000)}");
これのみDictionaryが変化しない//Dictionaryを別のDictionaryに変換（値コピー）
var copiedDict = sourceDict.ToDictionary();
//元のDictionaryを変更しても、コピー先には反映されない
copiedDict["A"] = 100;
//LINQで加工したものもDictionaryにできる
var filterdDict = sourceDict.Where(x =&gt; x.Key == "A").ToDictionary();
//実行時エラー　複数のKeyに同じValueがあった場合、入れ替えるとKeyが重複してしまう
sourceDict["B"] = 10;
//2つのDictionaryを合流、Keyが重複していたら、先のDictionaryのValueが使用される
var mergedDict = sourceDict.Merge(secondDict).ToDictionary();

        _driver.Navigate().GoToUrl("http:
yahoo.co.jp");
    
EventTriggerのPointerUpイベントに登録する処理
// soap1.1を使いたい場合は、第二引数にBasicHttpBindingをnewすればOK
var transportBinding = new HttpTransportBindingElement();
using System.ServiceModel.Channels;public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory){app.UseWhen(ctx =&gt; ctx.Request.Headers.ContainsKey("SOAPAction"), app2 =&gt;{app2.UseSoapEndpoint&lt;TestService&gt;("/Service.svc", new BasicHttpBinding(), SoapSerializer.DataContractSerializer);});app.UseWhen(ctx =&gt; !ctx.Request.Headers.ContainsKey("SOAPAction"), app2 =&gt;{var transportBinding = new HttpTransportBindingElement();var textEncodingBinding = new TextMessageEncodingBindingElement(MessageVersion.Soap12WSAddressing10, System.Text.Encoding.UTF8);app2.UseSoapEndpoint&lt;TestService&gt;("/Service.svc", new CustomBinding(transportBinding, textEncodingBinding), SoapSerializer.DataContractSerializer);});},,,
        
各Valueをログに吐き出す
            
 子Elementを再帰的に探索してIExpressionを生成する
            
 5秒後に消える
        
 手動での更新通知// usingの追加（一回だけなので書かなくてもおｋです）
@using Microsoft.AspNetCore.Blazor.Browser.Services;
OnInit内に記述var url = new BrowserUriHelper().GetAbsoluteUri();url = $"{url}{(url.EndsWith("/") ? "index" : string.Empty)}";var uri = new Uri(url);if (Msg.room != uri.AbsolutePath){if (!string.IsNullOrWhiteSpace(Msg.room)){RegisteredFunction.Invoke&lt;bool&gt;("グループ離脱", Msg);}Msg.room = uri.AbsolutePath;RegisteredFunction.Invoke&lt;bool&gt;("グループ追加", Msg);},,,&lt;tr&gt;&lt;td&gt;@Message.name&lt;/td&gt;&lt;td&gt;@Message.message&lt;/td&gt;&lt;/tr&gt;@functions {public SimpleMessage Message { get; set; }},,,@foreach (var Message in MessageList){&lt;ChatData Message=Message /&gt;},,,// OnInit内に記述
var url = new BrowserUriHelper().GetAbsoluteUri();

            
 way to detect cross-thread access is to do it in the Durable Task Framework directly.
            
 引き算をして得られた数が、baseLineにある数と同じならばダメ。
Console.WriteLine(dt1 == dt2); 
 → True// → 2018/01/02 午後 12:23:45


    
 "Angularのデータバインドは{{}}と書きます"
            
(int)countTimeを他スクリプトに送信
    
 Create response
        
 左右回転処理
            
 UnityにComponentの変更を通知する（通知しないと保存されない）
        
 GC.SuppressFinalize(this);
    
こちらはそのままint型へ値型を代入
            
encoder.QualityLevel = 30;
        
 https:api.slack.comdocsmessages
          Console.WriteLine($"{p1.LastName}{p1.FirstName}");
$は{}内の指示語展開のスイッチ（C#6で搭載）
    
 1フレーム経過しているNG. deleagte内ではyield return出来ないFunc&lt;IEnumerator&gt; callback = () =&gt;{yield return null;};StartCoroutine(callback());,,,async Task RunMultipleThreadsTestAsyncWait(){UnityEngine.Debug.Log("RunMultipleThreadsTestAsyncWait1");await new WaitForSeconds(1.0f);UnityEngine.Debug.Log("RunMultipleThreadsTestAsyncWait2");},,,// TweenerをAwaitableにするpublic static TaskAwaiter&lt;bool&gt; GetAwaiter(this Tweener tweener){var tcs = new TaskCompletionSource&lt;bool&gt;();TweenCallback callback = null;callback = () =&gt;{tweener.onComplete -= callback;tcs.SetResult(true);};tweener.onComplete += callback;return tcs.Task.GetAwaiter();}// SequenceをAwaitableにするpublic static TaskAwaiter&lt;bool&gt; GetAwaiter(this Sequence seq){var tcs = new TaskCompletionSource&lt;bool&gt;();TweenCallback callback = null;callback = () =&gt;{seq.onComplete -= callback;tcs.SetResult(true);};seq.onComplete += callback;return tcs.Task.GetAwaiter();},,,await image.rectTransform.DOScale(new Vector3(0, 1, 1), 1f);var seq = DOTween.Sequence();seq.Append(_img.DOFade(1, 1f));seq.Append(_img.DOColor(Color.black, 0.5f));seq.Append(_img.rectTransform.DOScale(new Vector3(2, 2, 2), 0.5f));seq.Append(_img.rectTransform.DOScale(new Vector3(1, 1, 1), 0.5f));seq.OnComplete(() =&gt;{Debug.Log("DOTween.Sequence end in OnComplete");});await seq;,,,// log出ない例private async Task ExceptionTest(){Image img = null;img.gameObject.SetActive(true);}ExceptionTest();,,,// log出るprivate async void ExceptionTest(){Image img = null;img.gameObject.SetActive(true);}ExceptionTest();,,,// NG. deleagte内ではyield return出来ない
Func&lt;IEnumerator&gt; callback = () =&gt;
TweenerをAwaitableにするpublic static TaskAwaiter&lt;bool&gt; GetAwaiter(this Tweener tweener){var tcs = new TaskCompletionSource&lt;bool&gt;();TweenCallback callback = null;callback = () =&gt;{tweener.onComplete -= callback;tcs.SetResult(true);};tweener.onComplete += callback;return tcs.Task.GetAwaiter();}// SequenceをAwaitableにするpublic static TaskAwaiter&lt;bool&gt; GetAwaiter(this Sequence seq){var tcs = new TaskCompletionSource&lt;bool&gt;();TweenCallback callback = null;callback = () =&gt;{seq.onComplete -= callback;tcs.SetResult(true);};seq.onComplete += callback;return tcs.Task.GetAwaiter();},,,await image.rectTransform.DOScale(new Vector3(0, 1, 1), 1f);var seq = DOTween.Sequence();seq.Append(_img.DOFade(1, 1f));seq.Append(_img.DOColor(Color.black, 0.5f));seq.Append(_img.rectTransform.DOScale(new Vector3(2, 2, 2), 0.5f));seq.Append(_img.rectTransform.DOScale(new Vector3(1, 1, 1), 0.5f));seq.OnComplete(() =&gt;{Debug.Log("DOTween.Sequence end in OnComplete");});await seq;,,,// log出ない例private async Task ExceptionTest(){Image img = null;img.gameObject.SetActive(true);}ExceptionTest();,,,// log出るprivate async void ExceptionTest(){Image img = null;img.gameObject.SetActive(true);}ExceptionTest();,,,// TweenerをAwaitableにする
public static TaskAwaiter&lt;bool&gt; GetAwaiter(this Tweener tweener)
SequenceをAwaitableにするpublic static TaskAwaiter&lt;bool&gt; GetAwaiter(this Sequence seq){var tcs = new TaskCompletionSource&lt;bool&gt;();TweenCallback callback = null;callback = () =&gt;{seq.onComplete -= callback;tcs.SetResult(true);};seq.onComplete += callback;return tcs.Task.GetAwaiter();},,,await image.rectTransform.DOScale(new Vector3(0, 1, 1), 1f);var seq = DOTween.Sequence();seq.Append(_img.DOFade(1, 1f));seq.Append(_img.DOColor(Color.black, 0.5f));seq.Append(_img.rectTransform.DOScale(new Vector3(2, 2, 2), 0.5f));seq.Append(_img.rectTransform.DOScale(new Vector3(1, 1, 1), 0.5f));seq.OnComplete(() =&gt;{Debug.Log("DOTween.Sequence end in OnComplete");});await seq;,,,// log出ない例private async Task ExceptionTest(){Image img = null;img.gameObject.SetActive(true);}ExceptionTest();,,,// log出るprivate async void ExceptionTest(){Image img = null;img.gameObject.SetActive(true);}ExceptionTest();,,,// SequenceをAwaitableにする
public static TaskAwaiter&lt;bool&gt; GetAwaiter(this Sequence seq)
log出ない例private async Task ExceptionTest(){Image img = null;img.gameObject.SetActive(true);}ExceptionTest();,,,// log出るprivate async void ExceptionTest(){Image img = null;img.gameObject.SetActive(true);}ExceptionTest();,,,// log出ない例
private async Task ExceptionTest()
log出るprivate async void ExceptionTest(){Image img = null;img.gameObject.SetActive(true);}ExceptionTest();,,,// log出る
private async void ExceptionTest()

            
Bufferの最後をOnNextに流す  ([*,*,*,*,○]　の　○)
            await new HttpClient().GetStringAsync(@"https:
docs.microsoft.comja-jp");
            
 ref引数のtypeが正しいことを確認
    
 再生が終了したら true を、エラーだったら false を返す
    
 名前昇順
    
 Unchanged状態→Added状態へ。
            await context.OpenAsync("https:
www.google.co.jp");
// それを求めるすべてのクラスに対してFooの新しいインスタンスを作成する
Container.Bind&lt;Foo&gt;().AsTransient();
// IFooを要求するクラスごとにFooの新しいインスタンスを作成する
Container.Bind&lt;IFoo&gt;().To&lt;Foo&gt;().AsTransient();
// 非ジェネリックバージョン
Container.Bind(typeof(IFoo)).To(typeof(Foo)).AsTransient();
// Fooの1つの最終的なインスタンスを作成し、それを求めるすべてのクラスに対して再利用します
Container.Bind&lt;Foo&gt;().AsSingle();
// Fooの1つの最終的なインスタンスを作成し、IFooを要求するすべてのクラスに対してそのインスタンスを再利用します
Container.Bind&lt;IFoo&gt;().To&lt;Foo&gt;().AsSingle();
// この例では、Fooの同じインスタンスが3つのすべてのケースで使用されます
Container.Bind&lt;Foo&gt;().AsSingle();
// 非ジェネリックバージョン
Container.Bind(typeof(Foo)).AsSingle();
// または、1つのバインドステートメント
Container.Bind(typeof(Foo), typeof(IFoo)).To(typeof(Foo)).AsSingle();
// Fooが実装するすべてのインターフェイスを、Foo型の新しいシングルトンにバインドする
Container.BindInterfacesTo&lt;Foo&gt;().AsSingle();
// たとえば、FooがITickableとIInitializableを実装している場合、上記の行は次のようになります。
Container.Bind&lt;ITickable&gt;().To&lt;Foo&gt;().AsSingle();
// Fooが使用されているあらゆる場所で、指定されたインスタンスを使用する
Container.Bind&lt;Foo&gt;().FromInstance(new Foo());
// これは単に上記バインディングのショートカットです
 これは、タイプ引数がパラメータから導き出されることができるので、少し好きかもしれません
// 複数のバインディングを許可し、複数のバインディングで同じインスタンスをAsSingleで再利用することはできないため、
 FromInstanceはAsSingleとは異なることに注意してください。
// たとえば、次のようにしてList &lt;Fooのコンストラクタパラメータ &gt;（単一のFooを要求するパラメータの例外をスローする）
Container.Bind&lt;Foo&gt;().FromInstance(new Foo());
// intが要求されるたびに10を使用するあなたはこれをやりたいとは思っていません。
 プリミティブ値にはほとんどの場合、When条件を使うべきです（下記の条件節を参照）
// これらは上記と同じです
 これは型引数がパラメータから導き出されるためです
// また、条件を使用して値の使用範囲を制限するように注意してください
 上記のようにSettingsオブジェクトを使用することを検討してください
// 要求されたときに、指定されたメソッドを使用してFooのインスタンスを作成するもっと複雑な構築シナリオでは、
 代わりにファクトリを使用することを検討してください
// IFooのいくつかの異なる実装のうちの1つをランダムに返します
 Foo1がそのメンバを注入するように、ここではインスタンス化をnewの代わりに使用します
// ラムダ構文の使用
Container.Bind&lt;Foo&gt;().FromMethod((ctx) =&gt; new Foo());
// これはAsTransientと同等です
Container.Bind&lt;Foo&gt;().FromMethod((ctx) =&gt; ctx.Container.Instantiate&lt;Foo&gt;());
// 別の依存関係のプロパティにバインドする
 これは、クラス間の結合を減らすのに役立ちます
// 値を使用する別の例
Container.Bind&lt;string&gt;().FromResolveGetter&lt;Foo&gt;(foo =&gt; foo.GetTitle());
//シーンのルートに新しいゲームオブジェクトを作成し、そこにFoo MonoBehaviourを追加し、それに "Foo"という名前を付けます。
Container.Bind&lt;Foo&gt;().FromNewComponentOnNewGameObject().AsSingle();
// WithGameObjectNameを使用して使用するゲームオブジェクト名を指定することもできます
Container.Bind&lt;Foo&gt;().FromNewComponentOnNewGameObject().WithGameObjectName("Foo1").AsSingle();
// インターフェイスにバインドする
Container.Bind&lt;IFoo&gt;().To&lt;Foo&gt;().FromNewComponentOnNewGameObject().AsSingle();
// 与えられたプレハブを使ってシーンのルートに新しいゲームオブジェクトを作成する
 ここではFooはMonoBehaviourであり、Fooは以前にプレハブに追加されているものと仮定しています
// zenjectが与えられたプレハブから新しいGameObjectを作成すると、
 プレファブで 'Foo'型のコンポーネントを検索し、それを返します
// 代わりにインターフェイスにバインドする
Container.Bind&lt;IFoo&gt;().To&lt;Foo&gt;().FromComponentInNewPrefab(fooPrefab).AsSingle();
// この例では、AsSingleを使用していますが、異なるコンポーネントを使用しています。
 ここでは、特定のプレハブのインスタンスが1つだけ作成されることに注意してください。
// AsSingleはプレハブ自体に適用され、プレハブから返されるタイプには適用されません。
 これが機能するには、Foo MonoBehaviourとBar MonoBehaviourの両方がプレハブのどこかに存在する必要があります
// Fooのインスタンスが毎回 'fooPrefab'の新しいコピーをインスタンス化する
 コンストラクタパラメータ、注入されたフィールドなどによって要求されます。
// ここでも、AsTransientがデフォルトであるため、これは同等です
Container.Bind&lt;Foo&gt;().FromComponentInNewPrefab(fooPrefab).AsTransient();
// 代わりにインターフェイスにバインドする
Container.Bind&lt;IFoo&gt;().To&lt;Foo&gt;().FromComponentInNewPrefab(fooPrefab);
// グローバルにアクセス可能な文字列を 'PlayerName'という名前でバインドすることをお勧めします。
 しかし、より良い選択肢は、Settingsオブジェクトを作成してバインドすることです
// これは上記の行に相当し、もう少し読みやすくなります
Container.BindInstance("name of the player").WithId("PlayerName");
// IDを使用して、同じタイプの複数のインスタンスをバインドすることもできます。
Container.Bind&lt;string&gt;().WithId("FooA").FromInstance("foo");
次に、これらの依存関係を注入するときには、同じIDを使用する必要があります。public class Norf{[Inject(Id = "FooA")]string _foo;}public class Qux{[Inject(Id = "FooB")]string _foo;}// この例では、Fooの3つのインスタンスをバインドします.1つはIDなしContainer.Bind&lt;Foo&gt;().AsCached();Container.Bind&lt;Foo&gt;().WithId("FooA").AsCached();Container.Bind&lt;Foo&gt;().WithId("FooA").AsCached();// [Inject]フィールドでIDが指定されていない場合は、最初のインスタンスが使用されます.// IDなしのBindingsはデフォルトとして使用でき、同じタイプの特定のバージョンのIDを指定できますpublic class Norf{[Inject]Foo _foo;}// Qux._fooはNorf._fooと同じインスタンスになります。// これは、AsTransではなくAsCachedを使用しているためです。// AsSingleを使用しないことに注意してください。// この場合、Qux._foo2も同じインスタンスを使用するためですpublic class Qux{[Inject]Foo _foo;[Inject(Id = "FooA")]Foo _foo2;}///////////// Conditions// これにより、BarはFooに依存することができます// Fooを他のクラスのコンストラクタに追加すると、それを見つけることができませんContainer.Bind&lt;Foo&gt;().AsSingle().WhenInjectedInto&lt;Bar&gt;();// IFooのさまざまな実装を使用する// クラスが注入されているContainer.Bind&lt;IFoo&gt;().To&lt;Foo1&gt;().AsSingle().WhenInjectedInto&lt;Bar&gt;();Container.Bind&lt;IFoo&gt;().To&lt;Foo2&gt;().AsSingle().WhenInjectedInto&lt;Qux&gt;();// 「Foo1」をデフォルトの実装として使用する場合は、// クラスQux、その場合はFoo2を使用するContainer.Bind&lt;IFoo&gt;().To&lt;Foo1&gt;().AsSingle();Container.Bind&lt;IFoo&gt;().To&lt;Foo2&gt;().AsSingle().WhenInjectedInto&lt;Qux&gt;();// Fooに依存するいくつかの選択されたクラスでのみ許可Container.Bind&lt;Foo&gt;().AsSingle().WhenInjectedInto(typeof(Bar), typeof(Qux), typeof(Baz));// 識別子 "Title"を持つGuiクラスに注入された文字列の "my game"を提供するContainer.BindInstance("my game").WithId("Title").WhenInjectedInto&lt;Gui&gt;();// Guiクラスに注入されたすべてのintの5を供給するContainer.BindInstance(5).WhenInjectedInto&lt;Gui&gt;();// Guiの中のパラメータやフィールドに注入されたすべてのintを 'width'という名前で入力します。// フィールドの名前は簡単に変更でき、バインディングを破ることができますが、ここでは例として示しています。Container.BindInstance(5.0f).When(ctx =&gt;ctx.ObjectType == typeof(Gui) &amp;&amp; ctx.MemberName == "width");// 'Bar'クラスの構築の一部として作成されたすべてのクラスに対して新しい 'Foo'を作成する// したがって、BarがQux型のコンストラクタパラメータを持ち、QuxがIFoo型のコンストラクタパラメータを持っている場合、// そのケースに対して新しいFooが作成されますContainer.Bind&lt;IFoo&gt;().To&lt;Foo&gt;().AsTransient().When(ctx =&gt; ctx.AllObjectTypes.Contains(typeof(Bar)));///////////// Complex conditions examplevar foo1 = new Foo();var foo2 = new Foo();Container.Bind&lt;Bar&gt;().WithId("Bar1").AsTransient();Container.Bind&lt;Bar&gt;().WithId("Bar2").AsTransient();// ここでは、注入コンテキストの 'ParentContexts'プロパティを使用して、複数の対応する識別子を同期させますContainer.BindInstance(foo1).When(c =&gt; c.ParentContexts.Where(x =&gt; x.MemberType == typeof(Bar) &amp;&amp; x.Identifier == "Bar1").Any());Container.BindInstance(foo2).When(c =&gt; c.ParentContexts.Where(x =&gt; x.MemberType == typeof(Bar) &amp;&amp; x.Identifier == "Bar2").Any());// これにより、// Container.Resolve&lt;Bar&gt;("Bar1").Foo == foo1// Container.Resolve&lt;Bar&gt;("Bar2").Foo == foo2///////////// FromResolve// これにより、IBar、IFoo、およびFooがすべてFooの同じインスタンスにバインドされます。// これは、指定されたプレハブのどこかに存在すると仮定されていますGameObject fooPrefab;Container.Bind&lt;Foo&gt;().FromComponentInNewPrefab(fooPrefab).AsSingle();Container.Bind&lt;IBar&gt;().To&lt;Foo&gt;().FromResolve();Container.Bind&lt;IFoo&gt;().To&lt;IBar&gt;().FromResolve();// これにより、上記と同じ動作になりますGameObject fooPrefab = null;Container.Bind&lt;Foo&gt;().FromComponentInNewPrefab(fooPrefab).AsSingle();Container.Bind&lt;IBar&gt;().To&lt;Foo&gt;().FromComponentInNewPrefab(fooPrefab).AsSingle();Container.Bind&lt;IFoo&gt;().To&lt;Foo&gt;().FromComponentInNewPrefab(fooPrefab).AsSingle();///////////// Rebind// Rebindは、以前のバインディングを上書きするために使用できます// これは、IFooがBarのみにバインドされることになります// Fooへのバインディングは削除されます// 通常、バインディングが発生する順序はまったく重要ではありませんが、// Rebindは順序依存性を作成して慎重に使用しますContainer.Bind&lt;IFoo&gt;().To&lt;Foo&gt;().AsSingle();Container.Rebind&lt;IFoo&gt;().To&lt;Bar&gt;().AsSingle();///////////// Installing Other Installers// すぐにFooInstallerでInstallBindings（）を呼び出します。FooInstaller.Install(Container);// FooInstallerを呼び出す前に、そのプロパティを設定してくださいContainer.BindInstance("foo").WhenInjectedInto&lt;FooInstaller&gt;();FooInstaller.Install(Container);// 引数を直接渡すこともできます// この行は上記の2行に相当しますFooInstaller.Install(Container, new object[] { "foo" });// FooInstallerを呼び出した後、そのバインディングの1つをオーバーライドします// FooInstallerがIFooを何かにBindすると仮定しますFooInstaller.Install(Container);Container.Rebind&lt;IFoo&gt;().To&lt;Bar&gt;().AsSingle();///////////// Manual Use of Container// これは、[Inject]とマークされた任意のパラメータを記入し、任意の[Inject]メソッドvar foo = new Foo();Container.Inject(foo);// 以前に追加されたバインディングを使用して、IFooのインスタンスを返します。// 内部的には、IFoo型のコンストラクタパラメータを入力するとトリガされるものです// 注：一致が見つからない場合は例外がスローされますContainer.Resolve&lt;IFoo&gt;();// 上記と同じですが、指定された型が見つからない場合はnullを返します。Container.TryResolve&lt;IFoo&gt;();// Foo型の2つのインスタンスのリストを返すContainer.BindInstance(new Foo());Container.BindInstance(new Foo());var foos = Container.ResolveAll&lt;IFoo&gt;();// Fooの新しいインスタンスを作成し、そのメンバーのいずれかに注入する// Fooが持つ可能性のある任意のコンストラクタパラメータを入力しますContainer.Instantiate&lt;Foo&gt;();GameObject prefab = null;// 新しいプレハブをインスタンス化し、プレハブに注入可能なものを埋め込むGameObject go = Container.InstantiatePrefab(prefab);// 新しいプレハブをインスタンス化し、特定のモノオブジェクトを返すFoo foo2 = Container.InstantiatePrefabForComponent&lt;Foo&gt;(prefab);// 既存のゲームオブジェクトに新しいコンポーネントを追加するFoo foo3 = Container.InstantiateComponent&lt;Foo&gt;(gameObject);,,,// 次に、これらの依存関係を注入するときには、同じIDを使用する必要があります。
public class Norf
// この例では、Fooの3つのインスタンスをバインドします.1つはIDなし
Container.Bind&lt;Foo&gt;().AsCached();
// [Inject]フィールドでIDが指定されていない場合は、最初のインスタンスが使用されます.
 IDなしのBindingsはデフォルトとして使用でき、同じタイプの特定のバージョンのIDを指定できます
// Qux._fooはNorf._fooと同じインスタンスになります。
 これは、AsTransではなくAsCachedを使用しているためです。
// AsSingleを使用しないことに注意してください。
 この場合、Qux._foo2も同じインスタンスを使用するためです
// これにより、BarはFooに依存することができます
 Fooを他のクラスのコンストラクタに追加すると、それを見つけることができません
// IFooのさまざまな実装を使用する
 クラスが注入されている
// 「Foo1」をデフォルトの実装として使用する場合は、
 クラスQux、その場合はFoo2を使用する
// Fooに依存するいくつかの選択されたクラスでのみ許可
Container.Bind&lt;Foo&gt;().AsSingle().WhenInjectedInto(typeof(Bar), typeof(Qux), typeof(Baz));
// 識別子 "Title"を持つGuiクラスに注入された文字列の "my game"を提供する
Container.BindInstance("my game").WithId("Title").WhenInjectedInto&lt;Gui&gt;();
// Guiクラスに注入されたすべてのintの5を供給する
Container.BindInstance(5).WhenInjectedInto&lt;Gui&gt;();
// Guiの中のパラメータやフィールドに注入されたすべてのintを 'width'という名前で入力します。
 フィールドの名前は簡単に変更でき、バインディングを破ることができますが、ここでは例として示しています。
// 'Bar'クラスの構築の一部として作成されたすべてのクラスに対して新しい 'Foo'を作成する
 したがって、BarがQux型のコンストラクタパラメータを持ち、QuxがIFoo型のコンストラクタパラメータを持っている場合、
// そのケースに対して新しいFooが作成されます
Container.Bind&lt;IFoo&gt;().To&lt;Foo&gt;().AsTransient().When(
Container.BindInstance(foo1).When(c =&gt; c.ParentContexts.Where(x =&gt; x.MemberType == typeof(Bar) &amp;&amp; x.Identifier == "Bar1").Any());Container.BindInstance(foo2).When(c =&gt; c.ParentContexts.Where(x =&gt; x.MemberType == typeof(Bar) &amp;&amp; x.Identifier == "Bar2").Any()); ここでは、注入コンテキストの 'ParentContexts'プロパティを使用して、複数の対応する識別子を同期させます// これにより、
 Container.Resolve&lt;Bar&gt;("Bar1").Foo == foo1
// これにより、IBar、IFoo、およびFooがすべてFooの同じインスタンスにバインドされます。
 これは、指定されたプレハブのどこかに存在すると仮定されています
// これにより、上記と同じ動作になります
GameObject fooPrefab = null;
// Rebindは、以前のバインディングを上書きするために使用できます
 これは、IFooがBarのみにバインドされることになります
// Fooへのバインディングは削除されます
 通常、バインディングが発生する順序はまったく重要ではありませんが、
// Rebindは順序依存性を作成して慎重に使用します
Container.Bind&lt;IFoo&gt;().To&lt;Foo&gt;().AsSingle();
// すぐにFooInstallerでInstallBindings（）を呼び出します。
FooInstaller.Install(Container);
// FooInstallerを呼び出す前に、そのプロパティを設定してください
Container.BindInstance("foo").WhenInjectedInto&lt;FooInstaller&gt;();
引数を直接渡すこともできます// この行は上記の2行に相当しますFooInstaller.Install(Container, new object[] { "foo" });// FooInstallerを呼び出した後、そのバインディングの1つをオーバーライドします// FooInstallerがIFooを何かにBindすると仮定しますFooInstaller.Install(Container);Container.Rebind&lt;IFoo&gt;().To&lt;Bar&gt;().AsSingle();///////////// Manual Use of Container// これは、[Inject]とマークされた任意のパラメータを記入し、任意の[Inject]メソッドvar foo = new Foo();Container.Inject(foo);// 以前に追加されたバインディングを使用して、IFooのインスタンスを返します。// 内部的には、IFoo型のコンストラクタパラメータを入力するとトリガされるものです// 注：一致が見つからない場合は例外がスローされますContainer.Resolve&lt;IFoo&gt;();// 上記と同じですが、指定された型が見つからない場合はnullを返します。Container.TryResolve&lt;IFoo&gt;();// Foo型の2つのインスタンスのリストを返すContainer.BindInstance(new Foo());Container.BindInstance(new Foo());var foos = Container.ResolveAll&lt;IFoo&gt;();// Fooの新しいインスタンスを作成し、そのメンバーのいずれかに注入する// Fooが持つ可能性のある任意のコンストラクタパラメータを入力しますContainer.Instantiate&lt;Foo&gt;();GameObject prefab = null;// 新しいプレハブをインスタンス化し、プレハブに注入可能なものを埋め込むGameObject go = Container.InstantiatePrefab(prefab);// 新しいプレハブをインスタンス化し、特定のモノオブジェクトを返すFoo foo2 = Container.InstantiatePrefabForComponent&lt;Foo&gt;(prefab);// 既存のゲームオブジェクトに新しいコンポーネントを追加するFoo foo3 = Container.InstantiateComponent&lt;Foo&gt;(gameObject);,,,// 引数を直接渡すこともできます
 この行は上記の2行に相当します
// FooInstallerを呼び出した後、そのバインディングの1つをオーバーライドします
 FooInstallerがIFooを何かにBindすると仮定します
// これは、[Inject]とマークされた任意のパラメータを記入し、任意の[Inject]メソッド
var foo = new Foo();
// 以前に追加されたバインディングを使用して、IFooのインスタンスを返します。
 内部的には、IFoo型のコンストラクタパラメータを入力するとトリガされるものです
// 注：一致が見つからない場合は例外がスローされます
Container.Resolve&lt;IFoo&gt;();
// 上記と同じですが、指定された型が見つからない場合はnullを返します。
Container.TryResolve&lt;IFoo&gt;();
// Foo型の2つのインスタンスのリストを返す
Container.BindInstance(new Foo());
// Fooの新しいインスタンスを作成し、そのメンバーのいずれかに注入する
 Fooが持つ可能性のある任意のコンストラクタパラメータを入力します
// 新しいプレハブをインスタンス化し、プレハブに注入可能なものを埋め込む
GameObject go = Container.InstantiatePrefab(prefab);
// 新しいプレハブをインスタンス化し、特定のモノオブジェクトを返す
Foo foo2 = Container.InstantiatePrefabForComponent&lt;Foo&gt;(prefab);
// 既存のゲームオブジェクトに新しいコンポーネントを追加する
Foo foo3 = Container.InstantiateComponent&lt;Foo&gt;(gameObject);

//     このコードはツールによって生成されました。
     ランタイム バージョン:4.0.30319.42000
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
     コードが再生成されるときに損失したりします。
------------------------------------------------------------------------------namespace INotifyPropertyChanged_2172d2073f184d9db6d12b49f79a37c0 {public class ViewModel : ConsoleApp1.ViewModel, System.ComponentModel.INotifyPropertyChanged {private static System.Collections.Generic.Dictionary&lt;string, System.ComponentModel.PropertyChangedEventArgs&gt; propertyChangedEventArgs = new System.Collections.Generic.Dictionary&lt;string, System.ComponentModel.PropertyChangedEventArgs&gt;();public ViewModel(string name, int age) :base(name, age) {}protected static System.Collections.Generic.Dictionary&lt;string, System.ComponentModel.PropertyChangedEventArgs&gt; PropertyChangedEventArgs {get {return ViewModel.propertyChangedEventArgs;}}public override string Name {get {return base.Name;}set {if (System.Collections.Generic.EqualityComparer&lt;string&gt;.Default.Equals(base.Name, value)) {return;}base.Name = value;this.OnPropertyChanged("Name");}}public override int Age {get {return base.Age;}set {if (System.Collections.Generic.EqualityComparer&lt;int&gt;.Default.Equals(base.Age, value)) {return;}base.Age = value;this.OnPropertyChanged("Age");}}public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;protected virtual void OnPropertyChanged(string propertyName) {if ((this.PropertyChanged == null)) {return;}System.ComponentModel.PropertyChangedEventArgs eventArgs;if ((ViewModel.PropertyChangedEventArgs.TryGetValue(propertyName, out eventArgs) == false)) {eventArgs = new System.ComponentModel.PropertyChangedEventArgs(propertyName);ViewModel.PropertyChangedEventArgs.Add(propertyName, eventArgs);}this.PropertyChanged(this, eventArgs);}}},,,static void Main(){Application.EnableVisualStyles();Application.SetCompatibleTextRenderingDefault(false);Application.Run(Zuishin.PropertyNotifier.Create&lt;Form1&gt;());},,,public partial class Form1 : Form{public Form1(){InitializeComponent();((INotifyPropertyChanged)this).PropertyChanged += (sender, args) =&gt;{MessageBox.Show($"{args.PropertyName} = {sender.GetType().GetProperty(args.PropertyName).GetValue(sender)}");};}public virtual new object Tag{get =&gt; base.Tag;set =&gt; base.Tag = value;}private void button1_Click(object sender, EventArgs e){Tag = Tag is int t ? t + 1 : 0;}},,,
        
 小町数か、（引数は数値を文字列に変換したもの）
            var dateNode = doc.DocumentNode.SelectNodes("
div[@class='top-matter']p[2]time");
            
 現在のシーンを再読込する
        
 手動での更新通知
        
---------------------------------------------------------------------------------
            
 カメラを中心に設定
            
 周囲に爆弾が0だった場合に限り、隣接するブロックを連鎖的に開いていく
追加        
 カメラを中心に設定
        
---------------------------------------------------------------------------------
        
---------------------------------------------------------------------------------
    
1小節毎に購読する。
            
 小町数で単位分数
        
テストが同時に走らないためのロック解放
            
 heroというクエリを定義　　　　　　　　　　　　　　　　　　↓LINQが書ける
    UIApplication.SharedApplication.SetStatusBarStyle(UIStatusBarStyle.LightContent, false); 
 ← これ
//依存関係プロパティ
get =&gt; (string)GetValue(NameProperty);
//添付プロパティ
public static string GetName(DependencyObject obj) =&gt; (string)obj.GetValue(NameProperty);

    float acos =Acos(cos);
ここも必要に応じて変更する//度に変換すること


        
 小町数か、（引数は数値を文字列に変換したもの）解答primesAにnを追加。候補となる素数リストprimeBからnを除外var ans = Solve(primesA.Concat(new int[] { n }), primesB.Where(a =&gt; a != n));,,,// 解答primesAにnを追加。候補となる素数リストprimeBからnを除外
var ans = Solve(primesA.Concat(new int[] { n }), primesB.Where(a =&gt; a != n));

                
 ↑これやー！
var query = list.GroupBy(item =&gt; item.Category); 
 集約keyはint型とします。
            
 List&lt;Human&gt;から一発でList&lt;int&gt;に変換する
        
return (bool)value ? TextWrapping.Wrap : TextWrapping.NoWrap;
        
関数内部処理は書かない
            
 あんどん表示を第2モニタに表示し、このフォームは閉じる
            
 falseは PreviewMouseUp
                    
セルに値を入れる
            
お好みの短押し時の挙動をここに書く(無い場合は書かなくても良い)
    var postkey = c.GetStringAsync("http:
ow.live.nicovideo.jpapigetpostkey?thread=" + thread).Result.Replace("postkey=", "");
        
 省略
            
 初期状態をt[0], x[0], y[0]とすることで便利になります
            
 Set our view from the "main" layout resource
    
 プロジェクトのプロパティをテンプレートで使えるように、置換リストに追加する
                    
下記は説明用の分岐。
   
 Use the client to get label annotations for the given image
  public const int Value = 10; 
 constだけでstatic扱いなのでstaticは不要
            
 HP描画はアクティブに影響を受けないで更新
            
 シーンの再読み込み
                case STATE.PLAY: 
 ゲームプレイ中
                
 この弾を休眠状態へ
            
 HPバーの更新
        
----------------------------------------------------------------------------------------
        serialPort1.Open(); 
 ポートを開く
            
 砲台角度の更新
            
 サスペンションと全ての物体の接触は無効
                    
 メモ
        
 除外実行// 高さでソート（昇順）
IOrderedEnumerable&lt;Level&gt; lstLevels = from Level lv in collectorLevel orderby lv.LookupParameter(@"高さ").AsDouble() ascending select lv;

    const string host_in = "https:
httpbin.org";
    const string host_in = "https:
httpbin.org";
    
Undoボタン押下
        
生成される式：x =&gt; this.Name = x
  
 IGrouping&lt;RGB, Ball&gt; は IEnumerable&lt;Ball&gt; の子クラス// 緑色のボールを削除
grouped.Remove(RGB.Green);
黒色のボールがあれば何かするIGrouping&lt;RGB, Ball&gt; blackBalls;if (grouped.TryGetValue(RGB.Black, out blackBalls)) {foreach (Ball ball in blackBalls) {...}},,,if (grouped.TryGetValue(RGB.Black, out var blackBalls)) {foreach (Ball ball in blackBalls) {...}},,,IEnumerable&lt;Ball&gt; balls = ...;// 色別にグルーピングvar grouped = balls.GroupBy(b =&gt; b.Color).ToDictionary(g =&gt; g.Key, g =&gt; g as IEnumerable&lt;Ball&gt;);// grouped の型は Dictionary&lt;RGB, IEnumerable&lt;Ball&gt;&gt;// 赤色のボールについて何かするvar redBalls = grouped[RGB.Red];// redBalls  の型は IEnumerable&lt;Ball&gt;foreach (Ball ball in redBalls) {...}// 緑色のボールを削除grouped.Remove(RGB.Green);// 黒色のボールがあれば何かするIEnumerable&lt;Ball&gt; blackBalls;if (grouped.TryGetValue(RGB.Black, out blackBalls)) {foreach (Ball ball in blackBalls) {...}},,,// 黒色のボールがあれば何かする
IGrouping&lt;RGB, Ball&gt; blackBalls;
// 色別にグルーピング
var grouped = balls.GroupBy(b =&gt; b.Color).ToDictionary(g =&gt; g.Key, g =&gt; g as IEnumerable&lt;Ball&gt;);
// grouped の型は Dictionary&lt;RGB, IEnumerable&lt;Ball&gt;&gt;

// 赤色のボールについて何かする
var redBalls = grouped[RGB.Red];
foreach (Ball ball in redBalls) {... redBalls  の型は IEnumerable&lt;Ball&gt;// 緑色のボールを削除
grouped.Remove(RGB.Green);
黒色のボールがあれば何かするIEnumerable&lt;Ball&gt; blackBalls;if (grouped.TryGetValue(RGB.Black, out blackBalls)) {foreach (Ball ball in blackBalls) {...}},,,// 黒色のボールがあれば何かする
IEnumerable&lt;Ball&gt; blackBalls;

    
 ここに張り付ける
        
 処理実行の前後に、無効化→有効化、の処理を追加する
            
元データと比べたいためコピーを作る
var d = new Dictionary&lt;string, MyClass&gt;(); 
 &lt;キーの型, 値の型&gt;
        
 SetWindowLongによる変更を適用
            
 作成したファイルをストリーム送信用に変換
        
Vector3 v = Vector3.zero;
        if (y * d != c) 
 yは切り捨てされるので、ここで、再度チェック
  
 問題なく使用できる
        
綺麗に0度にならないことがあるため、補正
transform.localRotation = Quaternion.Euler(0, 0, 0); reset property
    
 外部プロセスの終了を検知してプロセスを終了
//Ver4.5では、Worksheetsは 0 から始まるように変更
ExcelWorksheet sheet = pck.Workbook.Worksheets[1];

// 継承クラスで実装する型Tから型UへのConvert関数
public abstract U Convert(T value, Type targetType, object parameter, string language);
IValueConverterの実装public object Convert(object value, Type targetType, object parameter, string language){switch (value){case T t_val:return Convert(t_val, targetType, parameter, language);case IEnumerable&lt;T&gt; t_arr:return t_arr.Select(t =&gt; Convert(t, targetType, parameter,language));default:return null;}},,,// 継承クラスで実装する型Uから型TへのConvertBack関数public abstract T ConvertBack(U value, Type targetType, object parameter, string language);// IValueConverterの実装public object ConvertBack(object value, Type targetType, object parameter, string language){switch (value){case U u_val:return ConvertBack(u_val, targetType, parameter, language);case IEnumerable&lt;U&gt; u_arr:return u_arr.Select(u =&gt; ConvertBack(u, targetType, parameter, language));default:return null;}},,,using System;using System.Linq;using System.Collections.Generic;// TからUへの変換public abstract class ValueConverterBase&lt;T, U&gt; : Windows.UI.Xaml.Data.IValueConverter{public object Convert(object value, Type targetType, object parameter, string language){switch (value){case T t_val:return Convert(t_val, targetType, parameter, language);case IEnumerable&lt;T&gt; t_arr:return t_arr.Select(t =&gt; Convert(t, targetType, parameter, language));default:return null;}}public object ConvertBack(object value, Type targetType, object parameter, string language){switch (value){case U u_val:return ConvertBack(u_val, targetType, parameter, language);case IEnumerable&lt;U&gt; u_arr:return u_arr.Select(u =&gt; ConvertBack(u, targetType, parameter, language));default:return null;}}public abstract U Convert(T value, Type targetType, object parameter, string language);public abstract T ConvertBack(U value, Type targetType, object parameter, string language);},,,using Windows.UI.Xaml;public class BoolVisibilityConverter : ValueConverterBase&lt;bool, Visibility&gt;{public override Visibility Convert(bool value, Type targetType, object parameter, string language){return value ? Visibility.Visible : Visibility.Collapsed;}public override bool ConvertBack(Visibility value, Type targetType, object parameter, string language){return value == Visibility.Visible;}},,,using System;using System.Globalization;using System.Linq;using System.Collections.Generic;public abstract class ValueConverterBase&lt;T, U&gt; : System.Windows.Data.IValueConverter{public object Convert(object value, Type targetType, object parameter, CultureInfo culture){switch (value){case T t_val:return Convert(t_val, targetType, parameter, culture);case IEnumerable&lt;T&gt; t_arr:return t_arr.Select(t =&gt; Convert(t, targetType, parameter, culture));default:return null;}}public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture){switch (value){case U u_val:return ConvertBack(u_val, targetType, parameter, culture);case IEnumerable&lt;U&gt; u_arr:return u_arr.Select(u =&gt; ConvertBack(u, targetType, parameter, culture));default:return null;}}public abstract U Convert(T value, Type targetType, object parameter, CultureInfo culture);public abstract T ConvertBack(U value, Type targetType, object parameter, CultureInfo culture);},,,// IValueConverterの実装
public object Convert(object value, Type targetType, object parameter, string language)
// 継承クラスで実装する型Uから型TへのConvertBack関数
public abstract T ConvertBack(U value, Type targetType, object parameter, string language);
IValueConverterの実装public object ConvertBack(object value, Type targetType, object parameter, string language){switch (value){case U u_val:return ConvertBack(u_val, targetType, parameter, language);case IEnumerable&lt;U&gt; u_arr:return u_arr.Select(u =&gt; ConvertBack(u, targetType, parameter, language));default:return null;}},,,using System;using System.Linq;using System.Collections.Generic;// TからUへの変換public abstract class ValueConverterBase&lt;T, U&gt; : Windows.UI.Xaml.Data.IValueConverter{public object Convert(object value, Type targetType, object parameter, string language){switch (value){case T t_val:return Convert(t_val, targetType, parameter, language);case IEnumerable&lt;T&gt; t_arr:return t_arr.Select(t =&gt; Convert(t, targetType, parameter, language));default:return null;}}public object ConvertBack(object value, Type targetType, object parameter, string language){switch (value){case U u_val:return ConvertBack(u_val, targetType, parameter, language);case IEnumerable&lt;U&gt; u_arr:return u_arr.Select(u =&gt; ConvertBack(u, targetType, parameter, language));default:return null;}}public abstract U Convert(T value, Type targetType, object parameter, string language);public abstract T ConvertBack(U value, Type targetType, object parameter, string language);},,,using Windows.UI.Xaml;public class BoolVisibilityConverter : ValueConverterBase&lt;bool, Visibility&gt;{public override Visibility Convert(bool value, Type targetType, object parameter, string language){return value ? Visibility.Visible : Visibility.Collapsed;}public override bool ConvertBack(Visibility value, Type targetType, object parameter, string language){return value == Visibility.Visible;}},,,using System;using System.Globalization;using System.Linq;using System.Collections.Generic;public abstract class ValueConverterBase&lt;T, U&gt; : System.Windows.Data.IValueConverter{public object Convert(object value, Type targetType, object parameter, CultureInfo culture){switch (value){case T t_val:return Convert(t_val, targetType, parameter, culture);case IEnumerable&lt;T&gt; t_arr:return t_arr.Select(t =&gt; Convert(t, targetType, parameter, culture));default:return null;}}public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture){switch (value){case U u_val:return ConvertBack(u_val, targetType, parameter, culture);case IEnumerable&lt;U&gt; u_arr:return u_arr.Select(u =&gt; ConvertBack(u, targetType, parameter, culture));default:return null;}}public abstract U Convert(T value, Type targetType, object parameter, CultureInfo culture);public abstract T ConvertBack(U value, Type targetType, object parameter, CultureInfo culture);},,,// IValueConverterの実装
public object ConvertBack(object value, Type targetType, object parameter, string language)
TからUへの変換public abstract class ValueConverterBase&lt;T, U&gt; : Windows.UI.Xaml.Data.IValueConverter{public object Convert(object value, Type targetType, object parameter, string language){switch (value){case T t_val:return Convert(t_val, targetType, parameter, language);case IEnumerable&lt;T&gt; t_arr:return t_arr.Select(t =&gt; Convert(t, targetType, parameter, language));default:return null;}}public object ConvertBack(object value, Type targetType, object parameter, string language){switch (value){case U u_val:return ConvertBack(u_val, targetType, parameter, language);case IEnumerable&lt;U&gt; u_arr:return u_arr.Select(u =&gt; ConvertBack(u, targetType, parameter, language));default:return null;}}public abstract U Convert(T value, Type targetType, object parameter, string language);public abstract T ConvertBack(U value, Type targetType, object parameter, string language);},,,using Windows.UI.Xaml;public class BoolVisibilityConverter : ValueConverterBase&lt;bool, Visibility&gt;{public override Visibility Convert(bool value, Type targetType, object parameter, string language){return value ? Visibility.Visible : Visibility.Collapsed;}public override bool ConvertBack(Visibility value, Type targetType, object parameter, string language){return value == Visibility.Visible;}},,,using System;using System.Globalization;using System.Linq;using System.Collections.Generic;public abstract class ValueConverterBase&lt;T, U&gt; : System.Windows.Data.IValueConverter{public object Convert(object value, Type targetType, object parameter, CultureInfo culture){switch (value){case T t_val:return Convert(t_val, targetType, parameter, culture);case IEnumerable&lt;T&gt; t_arr:return t_arr.Select(t =&gt; Convert(t, targetType, parameter, culture));default:return null;}}public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture){switch (value){case U u_val:return ConvertBack(u_val, targetType, parameter, culture);case IEnumerable&lt;U&gt; u_arr:return u_arr.Select(u =&gt; ConvertBack(u, targetType, parameter, culture));default:return null;}}public abstract U Convert(T value, Type targetType, object parameter, CultureInfo culture);public abstract T ConvertBack(U value, Type targetType, object parameter, CultureInfo culture);},,,// TからUへの変換
public abstract class ValueConverterBase&lt;T, U&gt; : Windows.UI.Xaml.Data.IValueConverter

    
重複がある場合は要素数が減る
while((result = new JVReadResult(m_jvlink1.JVRead(out buffer, out bufferSize, out fileName))).state != JVReadResult.State.finished){ JVReadのreturnCodeでJVReadResultを初期化。状態が終了でない限り読み込みを続ける。
              .Publish(); 
Publish以前のIObservableを保持したIConnectableObservableにする//Publishの内部が持つSubjectを購読
observable.Subscribe(Console.WriteLine);
//Publish以前のIObservableをSubscribeして、Subjectに伝える
observable.Connect();

        
 SetWindowLongによる変更を適用
        
「宴」のシナリオ終了待ち
            
type string missing
        SetLayeredWindowAttributes(handle, TRANSPARENT_COLOR, 0, LWA_COLORKEY); 
 ウィンドウの特定の色を透過
        
こうじゃ//セクターを読んで
var sector = card.GetSector(2);
foreach (var area in sector.Access.DataAreas) {area.Read = DataAreaAccessCondition.ConditionEnum.KeyAOrB;(必要なら)データブロックごとの権限を設定して//こうじゃ
await sector.FlushTrailer("FFFFFFFFFFFF", "FF00FF00FF00");

        
再生時間
システムのデフォルトアプリケーションでファイルを開く機能を//Projectウィンドウのファイル選択→右クリック、または左上のAssetsボタンから呼ぶことができるpublic class EDITOR_FileOpenInApp: EditorWindow {[MenuItem("Assets/Open in System Default Application")]private static void GetSelectFile(){if(Selection.assetGUIDs != null &amp;&amp; Selection.assetGUIDs.Length &gt; 0){List&lt;string&gt; fileList = new List&lt;string&gt;();foreach(var files in Selection.assetGUIDs){var path = AssetDatabase.GUIDToAssetPath(files);fileList.Add(path);}foreach (string directory in fileList) {Command("open " + Application.dataPath + directory.Substring(6, directory.Length - 6));}}}static string Command(string cmd){var p = new Process();p.StartInfo.FileName = "/bin/bash";p.StartInfo.Arguments = "-c \" " + cmd + " \"";p.StartInfo.UseShellExecute = false;p.StartInfo.RedirectStandardOutput = true;p.Start();var output = p.StandardOutput.ReadToEnd();p.WaitForExit();p.Close();return output;}},,,//システムのデフォルトアプリケーションでファイルを開く機能を
Projectウィンドウのファイル選択→右クリック、または左上のAssetsボタンから呼ぶことができる

int result = DateTime.Compare(date1, date2);
比較//現在時刻が対象先の日付時刻よりも早い場合の処理

//現在時刻が対象先の日付時刻よりも遅い場合の処理
Close();アプリケーション終了

        
ターン開始時に移る
        
 nums.Length ==9 ならば、5つの値(合計)が列挙される。
        
Compress XZ
   b = new sample();      
インスタンスを作成
    
 Update is called once per frame
        data += vb.ToString() + ","; 
 12
Console.WriteLine(x &gt; y ? x : y); 
 2
                        
Console.WriteLine(str);
                client.BaseAddress = new Uri("https:
spla2.yuu26.com");
                
結果の保存
                
 一回の押下で複数回動作しないようにするフラグ
            
同じときは更新なし
// パラメータやアップロードファイルなどあればセットする

// リクエストBodyの形式を指定
request.RequestFormat = DataFormat.Json;
// Body部分にJson文字列をセット
 名前部分にapplication/jsonを指定し、パラメータタイプにRequestBodyを指定

        BeginInvoke(d, new object[] { text });      
 &lt;--ここを変える
        
 画像フォーマット毎に処理
            
 startpoint
        
 引数を渡す場合は同じ型でなければならない
        
表示
            
実行できなかった場合
    
 ForEach
                
 JsonValueKind.Array =&gt; JsonSerializer.Deserialize&lt;HogeHoge[]&gt;(ItemValue.Value.GetRawText()),
                
 シャウトしない版
                
ダイスの数量指定がない時は1を指定する
        
 Index 等の実装・・・
 
効果音再生
    
ローカル変数が優先され、999のダメージを与えることになる。
            
 「Common.」は書かなくてもCommonの中のClass1なんだと分かってくれる
    
 Use this for initialization
            
5スレッド使う
//回転の中心を（1,2,3)とする
Vector3 RotCenter = new Vector3(1, 2, 3);

int v = PlayerPrefs.GetInt("Test"); 
testというキーで読み出し
        
テキストに表示
        g3.GetComponent&lt;RectTransform&gt;().sizeDelta = new Vector2(t.preferredWidth, t.preferredHeight);
2回必要
            
 処理成功したらtrue
        
MessagePackのUnpack//id:1 str:じゅげむ
id:2 str:じゅげむ
//id:3 str:ごこうのすりきれ
id:4 str:かいじゃりすいぎょの
//id:5 str:すいぎょうまつ
id:6 str:うんらいまつ
//id:7 str:ふうらいまつ
id:8 str:くうねるところにすむところ
//id:9 str:やぶらこうじのぶらこうじ
id:10 str:ぱいぽ
//id:11 str:ぱいぽ
id:12 str:ぱいぽのしゅーりんがん
//id:13 str:しゅーりんがんのぐーりんだい
id:14 str:ぐーりんだいのぽんぽこぴーの
//id:15 str:ぽんぽこなーの
id:16 str:ちょうきゅうめいのちょうすけ

                Debug.Log(objectName); 
オブジェクト名をコンソールに表示
    ).Subscribe(x =&gt; Debug.Log('OK')) 
 NG
    
 利用例
    
ロードは後で書く
        
 update character position
        
スコアが低い解答しか得られない場合
            
 [2] {[22, 相原雪乃]}
        mPlayer.time = 15f;　
こんな感じで再生途中再生したい時間を
    
Consoleに表示//スライム があらわれた！ HP:10/10
ドラキー があらわれた！ HP:15/15
//ドラキー があらわれた！ HP:15/15
スライムベス があらわれた！ HP:20/20

        link_names = "1"  
メンションを有効にする
           
 Console.WriteLine("DEBUG=" + message);
  
 サーバーサイドの処理、ここまで"Hello "から"Hello Server "に文字列を修正return Task.FromResult(new HelloReply { Message = "Hello Server " + request.Name });,,,// "Hello "から"Hello Server "に文字列を修正
return Task.FromResult(new HelloReply { Message = "Hello Server " + request.Name });

var url = "http:
〇〇.comuploadfile.php";
        
 参照渡しでdeviceを書き換え
                        
 原寸でイメージを生成するbmp = new WriteableBitmap(new TransformedBitmap(decoder.Frames[0], new ScaleTransform(scale, scale)));,,, 生成したTransformedBitmapから再度WritableBitmapを生成する
        
 ループ開始
        
 timeout
    
 マウス座標取得
        Console.WriteLine(Config.Mossari.Get()); 
 "fusafusa"と出力
            
描画開始
ScriptManager.ScriptResourceMapping.AddDefinition("vue", null, scriptRefVue); 
 ここで指定した名前がマッピングされる
Console.WriteLine(result);                  
 200
 
　StartCoroutine(GetComment());で、コメントを再取得しにいっています。//中略
nextPageTokenstr = (string)commentlogjson["nextPageToken"];
//チャットを取りに行く！！！
var chatURI = youtubeAPIbase + chatURIUp + chatId + pagetoken + nextPageTokenstr + chatURIbottom2 + apikey;
//中略
使うときに生成
//パーッ寿司ながら中身取り出しにいく。
var citems = (IList)commentlogjson["items"];
cvn.transform.Find("Description").gameObject.GetComponent&lt;Text&gt;().text = message;本文を取得cvn.transform.Find("Name").gameObject.GetComponent&lt;Text&gt;().text = dispName;,,,名前をつける
                textWords[i, n] = tempWords[n]; 
2次配列textWordsにカンマごとに分けたtempWordsを代入していく
        
videoIdを取得
            
 
    
 外から呼び出すメソッドを登録する.// 引数のNameValueCollectionにはGetのパラメータがそのまま入っている.
 Taskなので終了まで待ってからレスポンスを返せる.

            
読取専用
        
マウスの位置を端末のタッチ座標に変換
            
Console.WriteLine(str);
    Console.WriteLine($"(a==1 &amp;&amp; a!=2 &amp;&amp; a==3) : {a == 1 &amp;&amp; a != 2 &amp;&amp; a == 3}");    
true
                        
Utf8Json.JsonSerializer.Deserialize&lt;Data&gt;(sr.BaseStream);       Utf8Json.JsonSerializer.Deserialize&lt;Data&gt;(sr.BaseStream);Utf8Jsonの場合
    
 Chartには、最初からSeriesが設定されているので削除しておく。
        
 SVM
// 指定したキーのデータがなかった時は例外になるので注意
 validOrInvalidItems[false].Select(x =&gt; x.Name);

 
離したイベントを取得
            
読取専用
    
実行したい処理
                
 Finishと表示// デフォルト（例:00.00.04のような表示）
timerText.text = timeSpan.ToString();
// s秒（例:4のような表示）
timerText.text = timeSpan.ToString("s");
// ss秒mmミリ秒（例:04.37のような表示）
timerText.text = timeSpan.ToString("ss':'ff");
// ss秒mmmミリ秒（例:04.375のような表示）
timerText.text = timeSpan.ToString("ss':'fff");
// DateTimeだと「:」など文字でないものをシングルクォーテーションで囲まなくてよい
 ss秒mmミリ秒（例:04.37のような表示）
// これはダメ


                    
 日本語入力の終了
            
読取専用
                
 保存／リストアの判断
// クライアント＆リクエストの作成
var client = new RestClient();
// URLの設定
client.BaseUrl = new Uri("リクエスト先のURLをここに指定する");
// メソッド、パラメータの指定
request.Method = Method.POST;
// ParameterTypeはいろいろあるが、GETとPOSTで特に指定なく
 stringパラメータを設定する場合は、GetOrPost
// ファイルをアップロードする場合
request.AddFile("ファイルパラメータ名", "ファイルパス", "ContentType");
// ContentTypeは拡張子などから適切なものを選ぶ

// リクエスト送信
var response = client.Execute(request);
// レスポンスがファイルなどで、復元したい場合
File.WriteAllBytes("出力先のパス", response.RawBytes);
// レスポンスのステータスコードが欲しいなどの場合
bool isOK = response.StatusCode == HttpStatusCode.OK;
// ステータスコード以外にも様々な情報がresponseに入っているので適宜


//必要なコンポーネントを定義
[RequireComponent(typeof(TestClassB))]
//必要なコンポーネントを定義
[RequireComponent(typeof(TestClassB))]

            
読取専用
var request = new HttpRequestMessage(HttpMethod.Get, "https:
qiita.comtoryuneko");
        
ここ
                    
 注文だがメニューがわからない場合はメニューをボタンで提示
        "http:
localhost:8080");
    
 Update is called once per frame
    
 Update is called once per frame
    
 Update is called once per frame
        
パラメーター追加
                
(Windowは閉じられなくなる)
                
描画が完了したことを知らせる
            Console.WriteLine($"検証結果: {res}"); 
 false
            
 条件を満たす初速を算出できなければVector3.zeroを返す
// Chromeの場合
driver = new ChromeDriver();
// Safariの場合
driver = new SafariDriver();
// FireFoxの場合
driver = new FirefoxDriver();

            
自動再接続をオフ
    m_stateVector.EnableRefreshTrace = true;
一致条件実行ログのデバッグ出力を有効化
var hostName = ""; 
 空文字にする
        
 全体カウントダウンのスタート時間をセット
        Console.WriteLine(CreatePassword()); 
 =&gt; 91760
    
------------------------------------------------------ 　 
  
 シーンに配置されたGameObjectの名前から取得する
float floatValue = float.Parse("6.2"); 
 文字列からFloat値を取得
            
 順に検証して処理する
                
サーバーからの応答を受信するためのWebResponseを取得
    
 アクティブイベントを呼ぶ
       
 何らかの処理
        Console.WriteLine( test2 == null); 
 ここはNullじゃないのでFalseになる
                
ちょっとしたミスで、無限ループになる可能性がそこそこある…Unityが固まる。
  public string url = "ws:
192.168.1.1:6437";環境ごとに変更
ISavableinterface ISavable{void Save();}// ReactiveSavableListpublic class ReactiveSavableList&lt;T&gt; where T:ISavable{},,,// ISavableabstract public class ISavable{public void Save(){}}// ReactiveSavableListpublic class ReactiveSavableList&lt;T&gt; where T:ISavable{},,,ReactiveSavableListpublic class ReactiveSavableList&lt;T&gt; where T:ISavable{},,,// ISavableabstract public class ISavable{public void Save(){}}// ReactiveSavableListpublic class ReactiveSavableList&lt;T&gt; where T:ISavable{},,,ISavableabstract public class ISavable{public void Save(){}}// ReactiveSavableListpublic class ReactiveSavableList&lt;T&gt; where T:ISavable{},,,ReactiveSavableListpublic class ReactiveSavableList&lt;T&gt; where T:ISavable{},,,
        
 numを巡回させた数を文字列に変換し列挙する。
                
フラグを管理
    postAsyncTask.Wait(); 
 asyncawaitは.NET4.0だから使えない...
            
 計測メソッド名の取得
            
 ここでtrueを返すと、キューに入れずにそのまま実行させてしまいます。
            
 Call Authlete's apiserviceconfiguration API.
            
メール本文の内容を記載する(例："C#でOutlookを操作する")。
    
 hoge.Fuga2(i);
        
 2番目の例外を生成します。
    
 パターン４
            
 残ったビンに入っている項目で、再度解を求める
    
 取得した音量に係数をかけて調整してBlendShapeに設定
        
 fade
        
 動画の再生完了
} 
 end of method MyClass::Display
    
スレッドの中にシングルスレッドにしたいメソッドを入れる
            
 結果を確認。第１引数が想定の、第２引数が実際の値
        
 BindingのModeがOneWayToSourceなプロパティ(つまりViewModel→Viewのみ)
// 『バブリング創世記』（筒井康隆著）の冒頭部分を抜粋（改行せずに1文字列にしている）
var text = @"ドンドンはドンドコの父なり。ドンドンの子ドンドコ、ドンドコドンを生み、

            
 テストデータをInsert
//mはメジアンで配列を中央で二分割するための指数
T[i...j]は一時的な配列
//Pは配列の最初の値でこれを軸とする
入力される値は配列A[0...n -1]の部分配列でlは左、rは右を意味する
//出力する値は配列を２つに分けるための分割点の値を返す
p &lt;- A[l]
部分配列をクイックソートする//s は分割点if l / r {s &lt;- Partition(A[l...r])Quicksort(A[l...s - 1])Quicksort(A[s + 1...r])},,,//部分配列をクイックソートする
s は分割点

    
 キャストが必要。外すとコンパイルエラー。
        
 所有権の移譲
    
return 123;
                    
 見つからなかったので、新しいビンを用意する
        
　InkCanvasをBitMapで返す
    
 実際は、キーが入力されたらスレッドを終了する、などが必要
            
 ...
            input.mi.dwFlags = 0x0001; 
 MOVE (RELATIVE)
            
左右
    
 式形式のラムダ
    
 UTC元のドキュメントdocument = new DateTimeCheck{Jst = new DateTime(2017, 12, 23, 13, 0, 0, DateTimeKind.Local),Unspec = new DateTime(2017, 12, 23, 13, 0, 0, DateTimeKind.Unspecified),Utc = new DateTime(2017, 12, 23, 13, 0, 0, DateTimeKind.Utc),JstOffset = new DateTimeOffset(2017, 12, 23, 13, 0, 0, TimeSpan.FromHours(9)),UtcOffset = new DateTimeOffset(2017, 12, 23, 13, 0, 0, TimeSpan.FromHours(0))};// 取得したドキュメントsearchOutput = DateTimeCheck{Jst = DateTime(2017, 12, 23, 4, 0, 0, DateTimeKind.Utc),Unspec = DateTime(2017, 12, 23, 13, 0, 0, DateTimeKind.Utc),Utc = DateTime(2017, 12, 23, 13, 0, 0, DateTimeKind.Utc),JstOffset = DateTimeOffset(2017, 12, 23, 4, 0, 0, TimeSpan.FromHours(0)),UtcOffset = DateTimeOffset(2017, 12, 23, 13, 0, 0, TimeSpan.FromHours(0)),};,,,// 元のドキュメントdocument = new DateTimeCheck{Jst = new DateTime(2017, 12, 23, 13, 0, 0, DateTimeKind.Local),Unspec = new DateTime(2017, 12, 23, 13, 0, 0, DateTimeKind.Unspecified),Utc = new DateTime(2017, 12, 23, 13, 0, 0, DateTimeKind.Utc),JstOffset = new DateTimeOffset(2017, 12, 23, 13, 0, 0, TimeSpan.FromHours(9)),UtcOffset = new DateTimeOffset(2017, 12, 23, 13, 0, 0, TimeSpan.FromHours(0))};// 取得したドキュメントcosmosOutput = DateTimeCheck{Jst = DateTime(2017, 12, 23, 13, 0, 0, DateTimeKind.Local),Unspec = DateTime(2017, 12, 23, 13, 0, 0, DateTimeKind.Unspecified),Utc = DateTime(2017, 12, 23, 13, 0, 0, DateTimeKind.Utc),JstOffset = DateTimeOffset(2017, 12, 23, 13, 0, 0, TimeSpan.FromHours(9)),UtcOffset = DateTimeOffset(2017, 12, 23, 22, 0, 0, TimeSpan.FromHours(9))};,,,// 元のドキュメント
document = new DateTimeCheck
取得したドキュメントsearchOutput = DateTimeCheck{Jst = DateTime(2017, 12, 23, 4, 0, 0, DateTimeKind.Utc),Unspec = DateTime(2017, 12, 23, 13, 0, 0, DateTimeKind.Utc),Utc = DateTime(2017, 12, 23, 13, 0, 0, DateTimeKind.Utc),JstOffset = DateTimeOffset(2017, 12, 23, 4, 0, 0, TimeSpan.FromHours(0)),UtcOffset = DateTimeOffset(2017, 12, 23, 13, 0, 0, TimeSpan.FromHours(0)),};,,,// 元のドキュメントdocument = new DateTimeCheck{Jst = new DateTime(2017, 12, 23, 13, 0, 0, DateTimeKind.Local),Unspec = new DateTime(2017, 12, 23, 13, 0, 0, DateTimeKind.Unspecified),Utc = new DateTime(2017, 12, 23, 13, 0, 0, DateTimeKind.Utc),JstOffset = new DateTimeOffset(2017, 12, 23, 13, 0, 0, TimeSpan.FromHours(9)),UtcOffset = new DateTimeOffset(2017, 12, 23, 13, 0, 0, TimeSpan.FromHours(0))};// 取得したドキュメントcosmosOutput = DateTimeCheck{Jst = DateTime(2017, 12, 23, 13, 0, 0, DateTimeKind.Local),Unspec = DateTime(2017, 12, 23, 13, 0, 0, DateTimeKind.Unspecified),Utc = DateTime(2017, 12, 23, 13, 0, 0, DateTimeKind.Utc),JstOffset = DateTimeOffset(2017, 12, 23, 13, 0, 0, TimeSpan.FromHours(9)),UtcOffset = DateTimeOffset(2017, 12, 23, 22, 0, 0, TimeSpan.FromHours(9))};,,,// 取得したドキュメント
searchOutput = DateTimeCheck
元のドキュメントdocument = new DateTimeCheck{Jst = new DateTime(2017, 12, 23, 13, 0, 0, DateTimeKind.Local),Unspec = new DateTime(2017, 12, 23, 13, 0, 0, DateTimeKind.Unspecified),Utc = new DateTime(2017, 12, 23, 13, 0, 0, DateTimeKind.Utc),JstOffset = new DateTimeOffset(2017, 12, 23, 13, 0, 0, TimeSpan.FromHours(9)),UtcOffset = new DateTimeOffset(2017, 12, 23, 13, 0, 0, TimeSpan.FromHours(0))};// 取得したドキュメントcosmosOutput = DateTimeCheck{Jst = DateTime(2017, 12, 23, 13, 0, 0, DateTimeKind.Local),Unspec = DateTime(2017, 12, 23, 13, 0, 0, DateTimeKind.Unspecified),Utc = DateTime(2017, 12, 23, 13, 0, 0, DateTimeKind.Utc),JstOffset = DateTimeOffset(2017, 12, 23, 13, 0, 0, TimeSpan.FromHours(9)),UtcOffset = DateTimeOffset(2017, 12, 23, 22, 0, 0, TimeSpan.FromHours(9))};,,,// 元のドキュメント
document = new DateTimeCheck
取得したドキュメントcosmosOutput = DateTimeCheck{Jst = DateTime(2017, 12, 23, 13, 0, 0, DateTimeKind.Local),Unspec = DateTime(2017, 12, 23, 13, 0, 0, DateTimeKind.Unspecified),Utc = DateTime(2017, 12, 23, 13, 0, 0, DateTimeKind.Utc),JstOffset = DateTimeOffset(2017, 12, 23, 13, 0, 0, TimeSpan.FromHours(9)),UtcOffset = DateTimeOffset(2017, 12, 23, 22, 0, 0, TimeSpan.FromHours(9))};,,,// 取得したドキュメント
cosmosOutput = DateTimeCheck

            

    
 ※ nameof演算子もC# 6.0相当の機能
        
 空行(全角スペース、タブ、半角スペースのみを対象にする)
                var client = HttpWebRequest.CreateHttp("http:
localhost:10001");
  
 読み込み完了// クリプタを作成
var crypter = Crypter.Default(() =&gt; "secret");
暗号化var encrypted = crypter.TryEncrypt(new byte[] { 0, 1, 2});// 復号化var decrypted = crypter.TryDecrypt(encrypted); // bytes[] { 0, 1, 2},,,// 暗号化
var encrypted = crypter.TryEncrypt(new byte[] { 0, 1, 2});
復号化var decrypted = crypter.TryDecrypt(encrypted); // bytes[] { 0, 1, 2},,,// 復号化
var decrypted = crypter.TryDecrypt(encrypted);  bytes[] { 0, 1, 2}

            "https:
www.twilio.comdocsdocuments25justthefaxmaam.pdf");
        
 到達した後の処理はこの下に
        
 A-Zキーが押されているときは非0が入る
        
 全員分回す
        
 自分のアバターだけを動かす
        
 見つかった場合
            
 弾丸の位置を調整
            
 A4 595x842 pt = 210x297  
var googleHomeWebhookUrl = "https:
xxxxxxxx.ngrok.iogoogle-home-notifier";
            
 DidReloadSciptsは再生直後にも発火するのでガードしておく
        
 結果を表示
                    
 unit を初期化
            var indexPath = "http:
127.0.0.1:80sample.html";
            
 結果をコンソール出力
        
 返り値intできちんとつくられた！
  
 from https:webbibouroku.comBlogArticlechunk-linq
Select(element).SelectByText("text"); 
 表示テキスト
    
 省略
        Debug.Log("マイナス側：" + _numberLoopList[-_index]); 
 0 3 2 1 0 3 2 1...
                
 入出力テンソルの名前をsessionに登録する
                
 書込SasUriを利用してアクセス
                Console.WriteLine(query); 
 2, 4, 6
            
 SharedApplication に触れるのは Init の後
  
 呼び出し
mock.Object.DoSomething("abc"); 
 -&gt; "ABC"
        
 オブジェクトを全部解放しないとウインドウが閉じられない
    SampleInterpreter.Execute("1*(1-1)"); 
 =&gt; "0"
    
ドラッグが終了した場所から曲の再生位置を計算して設定
        
それ以外はそのまま
                    
 結合文字は、１文字目だけで判定
// 結果
1 : 1
// 結果 [123  ]
Console.WriteLine("[" + target.PadRight(197-192) + "]");
// 結果 [123   ]
Console.WriteLine("[" + target.PadRight(197-192 + 1) + "]");

            
テストなのでメッセージを出すだけにしとく
            int index = String.Empty.Length;　
 0をセット
    
 先にTaskを起動しておかないとMock等で即コールバックが呼ばれた時に取りこぼす
        xmlns:mc="http:
schemas.openxmlformats.orgmarkup-compatibility2006"
        
hogeObjectをアクティブにする
学生の一覧から、身長が170cm以上の者達の名前の一覧を作成するList&lt;string&gt; func1(List&lt;Student&gt; data){List&lt;string&gt; output;foreach(var student in data){if(student.Height &gt;= 170){output.Add(student.Name);}}return output;}// 同上(LINQ版)List&lt;string&gt; func2(List&lt;Student&gt; data){return data.Where(s =&gt; s.Height &gt;= 170).Select(s =&gt; s.Name).ToList();},,,// 処理1func1();// 処理2(時間がかかる処理)func2();// 処理3func3();,,,// 処理1func1();// 処理2(時間がかかる処理)// 非同期処理する関数では、関数名の末尾にAsyncを付けるのが慣例await func2Async();// 処理3func3();,,,//　学生の一覧から、身長が170cm以上の者達の名前の一覧を作成する
List&lt;string&gt; func1(List&lt;Student&gt; data){
同上(LINQ版)List&lt;string&gt; func2(List&lt;Student&gt; data){return data.Where(s =&gt; s.Height &gt;= 170).Select(s =&gt; s.Name).ToList();},,,// 処理1func1();// 処理2(時間がかかる処理)func2();// 処理3func3();,,,// 処理1func1();// 処理2(時間がかかる処理)// 非同期処理する関数では、関数名の末尾にAsyncを付けるのが慣例await func2Async();// 処理3func3();,,,// 同上(LINQ版)
List&lt;string&gt; func2(List&lt;Student&gt; data){
// 処理1
func1();
// 処理2(時間がかかる処理)
func2();
// 処理3
func3();
// 処理1
func1();
// 処理2(時間がかかる処理)
 非同期処理する関数では、関数名の末尾にAsyncを付けるのが慣例
// 処理3
func3();

Console.WriteLine(roObs.Count); 
 1
//もともとあったコード。m_meshに頂点情報(座標と順番)や色情報を渡している |
m_Mesh.Clear();
//Add following 2 lines. This cord attaches triangular mesh information to collider.GetComponent&lt;MeshCollider&gt;().sharedMesh = null;下記の2行を新たに追加。上記で作成した三角形の集合をコライダーに反映//または
Session.CreateAnchor(Pose);

    
SharedProjectに定義したインターフェースを実装するだけ
                
 成功
    Write(array.ToArray()); 
こうして書き換えられるのを防止する
            
 コンストラクタの段階ではウィンドウハンドルが生成されていないのでダメ
            Status s = tokens.Statuses.Update(status: "upload image", media_ids: ids);
画像をツイート
                
 見つからなかったので、新しいビンを用意する
            
 DBに charge.id を保管すれば、Stripe 側の課金情報と紐づけできる
            return string.Join(", ", s.Select(e =&gt; e.ToString())); 
 おそらくここにナミナミが...if(!(s is System.Array)) {throw new System.ArgumentException("s には配列型を指定する必要があります"); 例
        
マテリアル適用
            
 変更したい項目をここに書く
        
イベント発行public class PersonX : INotifyPropertyChanged{！！このコードは2017年時点ではコンパイルできません！！
        
初期化
                ret[i] = Sin(1000.0 * sr * i);      
1000ヘルツ
    
 Call CalledFunction by using queue
        
先頭のセルのもつ、次のセルを格納するフィールドに追加するセルを代入。
            return "https:
xxx.xxx.xxxxxx" + fileName;
  
モードによって比較する計算式が異なり、値が有効か判定する
        
 右下→左下→右上引数の小さい値を取得するprivate float GetMinValue(float min1, float min2){return (min1 &lt;= min2 ? min1 : min2);}// 引数の大きい値を取得するprivate float GetMaxValue(float max1, float max2){return (min1 &gt;= min2 ? max1 : max2);},,,// 引数の小さい値を取得する
private float GetMinValue(float min1, float min2)
引数の大きい値を取得するprivate float GetMaxValue(float max1, float max2){return (min1 &gt;= min2 ? max1 : max2);},,,// 引数の大きい値を取得する
private float GetMaxValue(float max1, float max2)

            

                    
 存在する場合はコピーして削除して当世代新規作成
    
 add image to pdf
        
 (メソッドやインナークラス等も入るため、ISymbol.Kindで場合分けを行う事)
var url = "http:
localhost:xxxxxapivalues"
            
 iOSでデータをiCloudにバックアップさせない設定
  
 ここで例外がスローされても、conは確実にDisposeが呼ばれる
            XXXXX xx = new XXXXX(); 
 呼び出したいdllの呼び出し情報
    return 0; 
 最初のステップにもどる
//結果
key=FONT, no=12

        
該当するViewModel型を作成
        
 MaterialのShader切り替え時にBlend指定が変更されてしまうので再設定
        
 GET apivalues5
                
プロセスを強制的に終了させる
            
 委譲しているだけ
        
 Assert
int size = 1; 
 デバイス数 ÷ 16
        return default(T); 
 コンパイルが通ってしまう
                
描画が完了したことを知らせる
    
 視差の変更があったら反映する
    var e = new Vector(1, 0);
単位ベクトル
// 文字列型の変数「str」宣言
string str = "Hello, C#";
// ローカルスコープ内で定義した定数はconstを指定
const string str = "Hello, C#";
// 辞書データを実装するためにはDictionaryクラスが必要
using System.Collections.Generic;
// 引数名を指定しての設定と指定なしの両方が可能
func.Func(num: 1);

    
 純粋仮想関数
            
 IMEの変更
            
 q1={1,1,1}の場合、要素の個数は3、値の種類数は1(1)→×：除外
                .UseUrls("http:
192.168.xx.xx:8080")
        
 Terrain生成後にプレイヤーキャラクターを初期化しているので、地形に埋まらないようにこれで高さを取得しています。
Speck ECB modeusing (SymmetricAlgorithm algo = new Speck()){algo.BlockSize = 128;algo.KeySize = 128;algo.GenerateKey();using (ICryptoTransform encryptor = algo.CreateEncryptor() , decryptor = algo.CreateDecryptor()){byte[] plainEnc = encryptor.TransformFinalBlock(plainByte, 0, plainByte.Length);byte[] plainDec = decryptor.TransformFinalBlock(plainEnc, 0, plainEnc.Length);Console.WriteLine(System.Text.Encoding.ASCII.GetString(plainDec));Console.WriteLine();}}// Speck CTR modeusing (SymmetricAlgorithm algo = new SpeckCTR()){algo.BlockSize = 128;algo.KeySize = 128;algo.GenerateIV();algo.GenerateKey();using (ICryptoTransform encryptor = algo.CreateEncryptor() , decryptor = algo.CreateDecryptor()){byte[] plainEnc = encryptor.TransformFinalBlock(plainByte, 0, plainByte.Length);byte[] plainDec = decryptor.TransformFinalBlock(plainEnc, 0, plainEnc.Length);Console.WriteLine(System.Text.Encoding.ASCII.GetString(plainDec));Console.WriteLine();}},,,[DllImport ("libc.so")]private static extern int getpid ();,,,#if LIB_STATICprivate const string LibraryName = "__Internal";#elseprivate const string LibraryName = "speck";#endif[DllImport(LibraryName)]private static extern IntPtr speck_init(int _type, byte[] key, int key_len);,,,Speck CTR modeusing (SymmetricAlgorithm algo = new SpeckCTR()){algo.BlockSize = 128;algo.KeySize = 128;algo.GenerateIV();algo.GenerateKey();using (ICryptoTransform encryptor = algo.CreateEncryptor() , decryptor = algo.CreateDecryptor()){byte[] plainEnc = encryptor.TransformFinalBlock(plainByte, 0, plainByte.Length);byte[] plainDec = decryptor.TransformFinalBlock(plainEnc, 0, plainEnc.Length);Console.WriteLine(System.Text.Encoding.ASCII.GetString(plainDec));Console.WriteLine();}},,,[DllImport ("libc.so")]private static extern int getpid ();,,,#if LIB_STATICprivate const string LibraryName = "__Internal";#elseprivate const string LibraryName = "speck";#endif[DllImport(LibraryName)]private static extern IntPtr speck_init(int _type, byte[] key, int key_len);,,,
    
 actionBlock を await して全部終わるのを待つ。
                    
 タイトル名(string)
        
拡張メソッド
                    
配列を順次返す
    
 ユニティちゃんstreamEventに応じて"Jump"か"Sad"のどちらかを返すprivate string CheckUnitychanResponse(Twity.StreamEvent streamEvent){List&lt;string&gt; eventNameForUnitychanJump = new List&lt;string&gt;() { "favorite", "follow" };List&lt;string&gt; eventNameForUnitychanSad = new List&lt;string&gt;() { "unfavorite" };if (eventNameForUnitychanJump.IndexOf(streamEvent.event_name) != -1){return "Jump";}else if (eventNameForUnitychanSad.IndexOf(streamEvent.event_name) != -1){return "Sad";}else{return null;}},,,private Animator anim;private AnimatorStateInfo currentBaseState;static int idleState = Animator.StringToHash("Base Layer.Idle");static int locoState = Animator.StringToHash("Base Layer.Locomotion");static int jumpState = Animator.StringToHash("Base Layer.Jump");static int sadState = Animator.StringToHash("Base Layer.Sad");private void Start(){anim = GetComponent&lt;Animator&gt;();anim.speed = animSpeed;}private void Update(){currentBaseState = anim.GetCurrentAnimatorStateInfo(0);if (currentBaseState.fullPathHash == jumpState){anim.SetBool("Jump", false);}else if (currentBaseState.fullPathHash == sadState){anim.SetBool("Sad", false);}}public void Response(string responseType){if (!anim.IsInTransition(0)){anim.SetBool(responseType, true);}},,,// streamEventに応じて"Jump"か"Sad"のどちらかを返す
private string CheckUnitychanResponse(Twity.StreamEvent streamEvent)

    
 状態a状態のentrydoexit
            
);
    var url = "https:
qiita.comapiv2items";
                        
ファイルをすべて読み込んだときは終了する
//  値の変更時に古い値を Dispose する
var d = this.RxProp.Zip(this.RxProp.Skip(1), (old, _) =&gt; old)
//  これは別件
d.AddTo(this.Disposer);

int ret2 = num?.Let((int nonNullNum) =&gt; nonNullNum * 2) ?? -1; 
 -&gt; -1
    
 以下を追加
    
 Tokenに分解する
string animalName = animalType.GetTypeName(); 
 イヌ
        
 初期データ
    
 Delete the Entity
            var startTime = new DateTime(2021, 2, 1); 
 ドキュメントによると現在の時刻より60日以上前にすることはできないようです。
        
 モックオブジェクトを HogeServiceClient のコンストラクタに渡す
    
 GET apivalues
    
 ～ Filter実装部省略 ～
    
 override  オーバーライドできないためコンパイルエラーoverride public void print3(){ print3にはvirtualがついていないため、コンパイルエラーpublic void print3(){ // ただの上書き定義Console.WriteLine("print3");Console.WriteLine("子供は" + JIBUN1 + "です。");Console.WriteLine("子供は" + JIBUN2 + "です。");Console.WriteLine("子供は" + JIBUN3 + "です。");}},,,//    override public void print3(){ print3にはvirtualがついていないため、コンパイルエラー
public void print3(){  ただの上書き定義

var settings = new ConnectionSettings(new Uri("http:
&lt;host&gt;:&lt;port&gt;"))// 単一ホストのクラスタの場合
var health = client.CatHealth().Records.SingleOrDefault();
// 複数ホストのクラスタの場合
var health = client.CatHealth().Records;

                        
 送信データを作成
Console.WriteLine(Object.ReferenceEquals("hogefuga","hogefuga")); 
 (A-5) True
                
 コミット
    list.Sort(comparer); 
 comparer を使い回す          
            
入力したキーに応じてプレイヤーの移動先を決定します。
                
描画が完了したことを知らせる
    power = this.Statuses[0].ModifyPower(power);  
 状態異常の0番目が攻撃力アップだとして
            
データベースとの接続処理等を記述する。
        
 GCHandleでbyte配列のポインタを取得
            
 &lt;record&gt;に属している要素から、必要な情報を取得する
            
 表示
    
取得したIDのフォルダを選択（第二引数はとりあえずfalse）
            
 送受信ループ// サーバ接続開始
ws.Open();
while (true){ 送受信ループ
            
 外す場合
    
 ディーラーのバースト率が80%超えたら高みの見物
        private const int Bufsize = 4096;
?
            
データベースとの接続処理等を記述する。
        
GL.InvalidateState();
                
登録処理とか
        
 摂氏で今の温度を取得する
            
$ $END$
                
 完成した画像をMAT型から元のTexture型に変換する。
    
 メソッドやプロパティの列挙も可能. 
            
バッテリーがフル充電された時の持ち時間（バッテリー駆動時間）
  
 最上位Bitが立っていなければ、そのbyte自体がコンテンツの長さを表す。
            context.Notation.Add(token); 
 これを追加
    int result = await task; 
 -&gt; 1998
  
 x と y の値を交換するメソッド
            
ツイート
           
実際に使用できる
        
 Increment コマンドが実行されたら Counter を +1 してく
ConsoleAppArrayFor.Programprivate static void Main(){int[] array = new int[]{0,1,2,3,4,5,6};for (int i = 0; i &lt; array.Length; i++){Console.WriteLine(array[i]);}},,,using System;namespace ConsoleAppArrayFor{class Program{static void Main(){int[] numbers = { 0, 1, 2, 3, 4, 5, 6 };foreach (var n in numbers){Console.WriteLine(n);}}}},,,// ConsoleAppArrayFor.Programprivate static void Main(){int[] array = new int[]{0,1,2,3,4,5,6};int[] array2 = array;for (int i = 0; i &lt; array2.Length; i++){int num = array2[i];Console.WriteLine(num);}},,,// ConsoleAppArrayFor.Program// Token: 0x06000001 RID: 1 RVA: 0x00002050 File Offset: 0x00000250private static void Main(){int[] numbers = new int[]{0,1,2,3,4,5,6};foreach (int i in numbers){Console.WriteLine(i);}},,,ConsoleAppArrayFor.Programprivate static void Main(){int[] array = new int[]{0,1,2,3,4,5,6};int[] array2 = array;for (int i = 0; i &lt; array2.Length; i++){int num = array2[i];Console.WriteLine(num);}},,,// ConsoleAppArrayFor.Program// Token: 0x06000001 RID: 1 RVA: 0x00002050 File Offset: 0x00000250private static void Main(){int[] numbers = new int[]{0,1,2,3,4,5,6};foreach (int i in numbers){Console.WriteLine(i);}},,,Token: 0x06000001 RID: 1 RVA: 0x00002050 File Offset: 0x00000250private static void Main(){int[] numbers = new int[]{0,1,2,3,4,5,6};foreach (int i in numbers){Console.WriteLine(i);}},,,
            
音量を変更
            
 EnQueue対象に[]を付ける
//1回目ループ
var max = doubleList.Max();
//2回目ループ
var min = doubleList.Min();
//3回目ループ
var average = doubleList.Average();
foreach (double d in doubleList){ ここで1回すだけ// NaNチェックを避けるため1つ目の値をいれておく
var max = doubleList.First();
foreach (double d in doubleList){ ここで1回すだけ
public class Association&lt;TKey1, TKey2, TValue&gt; where TValue : class 
 where T : class が Tは参照型のみの意味
        return *((short *) pbyte); 
この行はリトルエンディアンでしか使用できない。
　　　　　　　　　　　　　　　　　　　　　　　　
　下記2行を追加
            g.AddEdge(new Edge("d8", "ee", "f", 0)); 
 E -&gt; finish
        
状態を分けるのはif文を利用して、その後の処理はSwitch文を利用するのが良さそう。
            Console.WriteLine(a); 
5
    
 処理
        alpha = 0;  
alpha値の初期化(色が透明な状態)
  
処理for (e = collection.GetEnumerator() ;new Func&lt;bool&gt;(() =&gt; { isContinue = e.MoveNext(); if (isContinue) s = e.Current; return isContinue; })() ;)別の書き方//enumeratorのDisposeなど知るか
,,,

　　　　　　　
取得したGameManagerの"GetScore"を呼び出す
    
 成分値を追加していく
 print(b);       
これは結局、b=1がb++2回処理されるので　３がプリントされる
            bc.SetBrightness(40); 
 輝度 40
        ... 
 Dispose e
        StandingTypeInvoke ();  
演出の種類を切り替える関数の呼び出し
    
 not null
                
Group = g.Key,Define other methods and classes herepublic class Employee{public int Group { set; get; }public string Name { set; get; }},,,
        
 このおまじないの意味は参考資料を参照
            
 aQueueTest = null;
                
 orderをDB登録する処理
            
ぶつかった位置にexplodeというprefabを配置する
    
 型変換// インスタンス生成
ilGenerator.Emit(OpCodes.Newobj, ci);
// 返す
ilGenerator.Emit(OpCodes.Ret);

            
データベース接続処理等を記述する。
    
 現在のトークン
詳細については、http:
go.microsoft.comfwlink?LinkID=314055 をご覧ください。 ---&gt; System.Web.UI.ViewStateException: 無効な viewstate です。
EnumExt.TryParse("5", out ss); 
 true, ss = SolarSystem.Jupiter
    
 Get request body
        
SelectorのSelctedItemにこの添付プロパティを双方向Bindingする
            
データベース接続処理等を記述する。
            yield return new WaitForSeconds(0.5f); 
0.5秒待って
        
 その他
    
 複合フラグメントbreak の後に描かれた処理
  
IAsyncOperationなどを返すメソッドはAsTask()で明示的にTaskに変換する
            
 リクエストが発行されたら、MessageBoxを表示する// リクエストが発行されたら、MessageBoxを表示する
var hello = "Hello, Prism!";   ローカル変数にする
// ここのラムダ式がGCに回収される！
viewModel.HelloRequest.GetEvent&lt;PubSubEvent&gt;().Subscribe(() =&gt; MessageBox.Show(hello));
// リクエストが発行されたら、MessageBoxを表示する
var hello = "Hello, Prism!";
// 第2引数にtrueを指定する
viewModel.HelloRequest.GetEvent&lt;PubSubEvent&gt;().Subscribe(() =&gt; MessageBox.Show(hello), true);

            
実行してみる
            
データベースとの接続処理等を記述する。
            
 ウィンドウのタイトルの長さを取得するWindowsクラスpublic class Window{public string ClassName;public string Title;public IntPtr hWnd;},,,// Windowsクラスの格納リストpublic static List&lt;List&lt;Window&gt;&gt; WindowsList { get; set; },,,// プロセス名がnotepad(メモ帳)の画面情報を取得します。WindowsHandles.Initialize("notepad");// 画面情報に「キャンセル」ボタンがあるかチェックします。bool exists = WindowsHandles.ExistsTitle("キャンセル");// 結果を表示MessageBox.Show(exists.ToString());// WindowsHandles.WindowsListプロパティはPublicなのでご自由に。//List&lt;List&lt;WindowsHandles.Window&gt;&gt; list = WindowsHandles.WindowsList;,,,// Windowsクラス
public class Window
Windowsクラスの格納リストpublic static List&lt;List&lt;Window&gt;&gt; WindowsList { get; set; },,,// プロセス名がnotepad(メモ帳)の画面情報を取得します。WindowsHandles.Initialize("notepad");// 画面情報に「キャンセル」ボタンがあるかチェックします。bool exists = WindowsHandles.ExistsTitle("キャンセル");// 結果を表示MessageBox.Show(exists.ToString());// WindowsHandles.WindowsListプロパティはPublicなのでご自由に。//List&lt;List&lt;WindowsHandles.Window&gt;&gt; list = WindowsHandles.WindowsList;,,,// Windowsクラスの格納リスト
public static List&lt;List&lt;Window&gt;&gt; WindowsList { get; set; }
// プロセス名がnotepad(メモ帳)の画面情報を取得します。
WindowsHandles.Initialize("notepad");
// 画面情報に「キャンセル」ボタンがあるかチェックします。
bool exists = WindowsHandles.ExistsTitle("キャンセル");
// 結果を表示
MessageBox.Show(exists.ToString());
// WindowsHandles.WindowsListプロパティはPublicなのでご自由に。
List&lt;List&lt;WindowsHandles.Window&gt;&gt; list = WindowsHandles.WindowsList;

                
 interface
        if(other.gameObject.tag == "Player") 
プレイヤーが武器を取ったら消す
        if (Input.GetMouseButtonDown(0)) controller.OnClick(); 
左クリックで呼び出す
        
 チェックボックス描画
    &lt;p&gt;Learn about &lt;a href="https:
docs.microsoft.comaspnetcore"&gt;building Web apps with ASP.NET Core&lt;a&gt;.&lt;p&gt;
    string example = " 　";  
空白  
        
 Reference type
            
TraceクラスのWriteLineメソッドを利用
    
 Open the Electron-Window here
        
 (3, 3, 3)
                    
 指定カラム名値判定
    
 Tokenに分解する
                                    
 商分書き込む
    intIterator = (IEnumerable&lt;int&gt;) d;
4
                
幅の数だけ表示したら改行させます
                
 COMオブジェクトの開放
        Player_pos = transform.position; 
プレイヤーの位置を更新
            0xC3                            
 ret
            
 -&gt; Success
if (Input.touchCount &gt; 0) {Touch touch = Input.GetTouch (0); タップ処理if (Input.touchCount &gt; 0) {Touch touch = Input.GetTouch (0); タップ処理if (Input.touchCount &gt; 0) {Touch touch = Input.GetTouch (0); タップ処理if (Input.touchCount &gt; 0) {Touch touch = Input.GetTouch (0); タップ処理
// アクセス修飾子をinternalからpublicへ変更する
public class Calculator

            
 Json ファイルへのパスを設定します。SetBasePath() で設定したパスからの相対パスになります。
　　　　　　　　
クリップボードに出力
                
描画が完了したことを知らせる
テスト用のクラスclass Complex{private double mReal;private double mImaginary;public Complex() { mReal = 1.0; mImaginary = 0.1; }public double Real{get { return mReal; }set { mReal = value; }}public double Imaginary{get { return mImaginary; }set { mImaginary = value; }}}// コンストラクトstatic void constuct(){for (int j=0; j &lt; kCount0o/sFactor; ++j){for (int i=0; i &lt; kCount0i; ++i){var temp = new Complex();sVolatileInt = (int)temp.Real;}}},,,// テスト用の通常メソッドstatic int maxInt(int iLhs, int iRhs){return (iLhs &gt; iRhs)?iLhs:iRhs;}// テスト用のジェネリック・メソッドstatic Type max&lt;Type&gt;(Type iLhs, Type iRhs) where Type : IComparable{return (iLhs.CompareTo(iRhs) &gt; 0)?iLhs:iRhs;}// 通常関数static void normalInt(){for (int j=0; j &lt; kCount0o/sFactor; ++j){for (int i=0; i &lt; kCount0i; ++i){sVolatileInt = maxInt(i, j);}}}// int型static void genericsInt(){for (int j=0; j &lt; kCount0o/sFactor; ++j){for (int i=0; i &lt; kCount0i; ++i){sVolatileInt = max&lt;int&gt;(i, j);}}}// double型static void genericsDouble(){for (int j=0; j &lt; kCount0o/sFactor; ++j){for (int i=0; i &lt; kCount0i; ++i){sVolatileInt = (int)max&lt;double&gt;(i, j);}}}// string型static void genericsString(){for (int j=0; j &lt; kCount0o/sFactor; ++j){for (int i=0; i &lt; kCount0i; ++i){sVolatileInt =int.Parse(max&lt;String&gt;(i.ToString(), j.ToString()));}}},,,// テスト用のクラス
class Complex
コンストラクトstatic void constuct(){for (int j=0; j &lt; kCount0o/sFactor; ++j){for (int i=0; i &lt; kCount0i; ++i){var temp = new Complex();sVolatileInt = (int)temp.Real;}}},,,// テスト用の通常メソッドstatic int maxInt(int iLhs, int iRhs){return (iLhs &gt; iRhs)?iLhs:iRhs;}// テスト用のジェネリック・メソッドstatic Type max&lt;Type&gt;(Type iLhs, Type iRhs) where Type : IComparable{return (iLhs.CompareTo(iRhs) &gt; 0)?iLhs:iRhs;}// 通常関数static void normalInt(){for (int j=0; j &lt; kCount0o/sFactor; ++j){for (int i=0; i &lt; kCount0i; ++i){sVolatileInt = maxInt(i, j);}}}// int型static void genericsInt(){for (int j=0; j &lt; kCount0o/sFactor; ++j){for (int i=0; i &lt; kCount0i; ++i){sVolatileInt = max&lt;int&gt;(i, j);}}}// double型static void genericsDouble(){for (int j=0; j &lt; kCount0o/sFactor; ++j){for (int i=0; i &lt; kCount0i; ++i){sVolatileInt = (int)max&lt;double&gt;(i, j);}}}// string型static void genericsString(){for (int j=0; j &lt; kCount0o/sFactor; ++j){for (int i=0; i &lt; kCount0i; ++i){sVolatileInt =int.Parse(max&lt;String&gt;(i.ToString(), j.ToString()));}}},,,// コンストラクト
static void constuct()
テスト用の通常メソッドstatic int maxInt(int iLhs, int iRhs){return (iLhs &gt; iRhs)?iLhs:iRhs;}// テスト用のジェネリック・メソッドstatic Type max&lt;Type&gt;(Type iLhs, Type iRhs) where Type : IComparable{return (iLhs.CompareTo(iRhs) &gt; 0)?iLhs:iRhs;}// 通常関数static void normalInt(){for (int j=0; j &lt; kCount0o/sFactor; ++j){for (int i=0; i &lt; kCount0i; ++i){sVolatileInt = maxInt(i, j);}}}// int型static void genericsInt(){for (int j=0; j &lt; kCount0o/sFactor; ++j){for (int i=0; i &lt; kCount0i; ++i){sVolatileInt = max&lt;int&gt;(i, j);}}}// double型static void genericsDouble(){for (int j=0; j &lt; kCount0o/sFactor; ++j){for (int i=0; i &lt; kCount0i; ++i){sVolatileInt = (int)max&lt;double&gt;(i, j);}}}// string型static void genericsString(){for (int j=0; j &lt; kCount0o/sFactor; ++j){for (int i=0; i &lt; kCount0i; ++i){sVolatileInt =int.Parse(max&lt;String&gt;(i.ToString(), j.ToString()));}}},,,// テスト用の通常メソッド
static int maxInt(int iLhs, int iRhs)
テスト用のジェネリック・メソッドstatic Type max&lt;Type&gt;(Type iLhs, Type iRhs) where Type : IComparable{return (iLhs.CompareTo(iRhs) &gt; 0)?iLhs:iRhs;}// 通常関数static void normalInt(){for (int j=0; j &lt; kCount0o/sFactor; ++j){for (int i=0; i &lt; kCount0i; ++i){sVolatileInt = maxInt(i, j);}}}// int型static void genericsInt(){for (int j=0; j &lt; kCount0o/sFactor; ++j){for (int i=0; i &lt; kCount0i; ++i){sVolatileInt = max&lt;int&gt;(i, j);}}}// double型static void genericsDouble(){for (int j=0; j &lt; kCount0o/sFactor; ++j){for (int i=0; i &lt; kCount0i; ++i){sVolatileInt = (int)max&lt;double&gt;(i, j);}}}// string型static void genericsString(){for (int j=0; j &lt; kCount0o/sFactor; ++j){for (int i=0; i &lt; kCount0i; ++i){sVolatileInt =int.Parse(max&lt;String&gt;(i.ToString(), j.ToString()));}}},,,// テスト用のジェネリック・メソッド
static Type max&lt;Type&gt;(Type iLhs, Type iRhs) where Type : IComparable
通常関数static void normalInt(){for (int j=0; j &lt; kCount0o/sFactor; ++j){for (int i=0; i &lt; kCount0i; ++i){sVolatileInt = maxInt(i, j);}}}// int型static void genericsInt(){for (int j=0; j &lt; kCount0o/sFactor; ++j){for (int i=0; i &lt; kCount0i; ++i){sVolatileInt = max&lt;int&gt;(i, j);}}}// double型static void genericsDouble(){for (int j=0; j &lt; kCount0o/sFactor; ++j){for (int i=0; i &lt; kCount0i; ++i){sVolatileInt = (int)max&lt;double&gt;(i, j);}}}// string型static void genericsString(){for (int j=0; j &lt; kCount0o/sFactor; ++j){for (int i=0; i &lt; kCount0i; ++i){sVolatileInt =int.Parse(max&lt;String&gt;(i.ToString(), j.ToString()));}}},,,// 通常関数
static void normalInt()
int型static void genericsInt(){for (int j=0; j &lt; kCount0o/sFactor; ++j){for (int i=0; i &lt; kCount0i; ++i){sVolatileInt = max&lt;int&gt;(i, j);}}}// double型static void genericsDouble(){for (int j=0; j &lt; kCount0o/sFactor; ++j){for (int i=0; i &lt; kCount0i; ++i){sVolatileInt = (int)max&lt;double&gt;(i, j);}}}// string型static void genericsString(){for (int j=0; j &lt; kCount0o/sFactor; ++j){for (int i=0; i &lt; kCount0i; ++i){sVolatileInt =int.Parse(max&lt;String&gt;(i.ToString(), j.ToString()));}}},,,// int型
static void genericsInt()
double型static void genericsDouble(){for (int j=0; j &lt; kCount0o/sFactor; ++j){for (int i=0; i &lt; kCount0i; ++i){sVolatileInt = (int)max&lt;double&gt;(i, j);}}}// string型static void genericsString(){for (int j=0; j &lt; kCount0o/sFactor; ++j){for (int i=0; i &lt; kCount0i; ++i){sVolatileInt =int.Parse(max&lt;String&gt;(i.ToString(), j.ToString()));}}},,,// double型
static void genericsDouble()
string型static void genericsString(){for (int j=0; j &lt; kCount0o/sFactor; ++j){for (int i=0; i &lt; kCount0i; ++i){sVolatileInt =int.Parse(max&lt;String&gt;(i.ToString(), j.ToString()));}}},,,// string型
static void genericsString()

        
【ポイント】HTMLのFormタグのID名とEntityのプロパティ名を揃えること。
ToastNotificationManager.CreateToastNotifier(appId).Show(notification);,,, トースト通知を飛ばす
        
 実際の値       =&gt; [b,a][a,a]
                
 この要素が全体に属したことを記憶から消す
// Dataクラスはid, name, pointプロパティを持つとする。
var DataList = new List&lt;Data&gt;();
//②と同様の結果が得られる(LINQではなくListのメソッド)
var record　= DataList.Find(data =&gt; data.id =="1");

    var result = list.Select((string s) =&gt; { return s + ".txt"; }); 
 ← 直接リテラルを書く
            
DB登録等の処理を記述する。
    
 録音データ保存完了
      m_piyos[u].Execute(); 
 要素有無のチェックは省略
    
重たい処理
        
 暗号化されたデータを読み込むための復号ストリーム
        
 アクションメソッドの削除
        
 後置記法を計算する
            
 外積が反対方向なら追い越したことになる
    
ボタンの種類によって処理を変更
        
UIスレッドからのUI操作
var res = await httpClient.GetAsync("http:
gochiusa.com");
            
 上記２パターン以外は全て相対パスと判定。
        
 試しにラベルを表示
                if (range.EntireColumn.OutlineLevel &lt; 8) {      
最大8段階
            .Where(x =&gt; x.NewItem.SkipWhile(n =&gt; !n).Skip(1).Any(n =&gt; n)) 
 コントロールの個数を考えるとCount()を素直に使ってよさそうですね
        
最新の閲覧順（スコアが高い順）に取得
    
 1 - 2x^2 - 2y^2
        
  this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
                
見出し行
                
Int32に変換する
    
 セル位置取得
            
 アプリ終了
// エラー 'Random' は、'UnityEngine.Random' と 'System.Random' 間のあいまいな参照です
int a = Random.Range(0,10);
// UnityEngine名前空間のクラスであることを明示（0以上10未満の乱数が返る）
int RUNDOM_NUMBER_1 = UnityEngine.Random.Range(0,10);
// System名前空間のクラスであることを明示（0以上10未満の乱数が返る）
System.Random r = new System.Random();
// シード値（1000）を使用して初期化
 シード値が変わらなければ毎回同じ乱数を返す
// 0以上10未満の乱数を整数で返す
int RANDOM_NUMBER_1 = r.Next(10);
// -10以上10未満の乱数を整数で返す
int RANDOM_NUMBER_2 = r.Next(-10,10);
// 0以上Int32.MaxValue（32bit符号付き整数の最大有効値:2147483647）未満の乱数を整数で返す
int RANDOM_NUMBER_3 = r.Next();
// 0以上10未満の乱数を浮動小数点数で返す
int RANDOM_NUMBER = UnityEngine.Random.Range(0,10);

            
処理を書く。
var value    = buffer.ElementAt(3);      
 (2)
            
 表示
    
 Allow transit to self state
        .AddErrorDescriber&lt;Resources.IdentityErrorDescriberJP&gt;() 
←これ
                
Int32に変換する
        
 ...
            
 ディレクトリオンリー
            
 ...do something// customerWatchers は customers と同期する
customers.Add(new Customer());

        
SSIDを取得
        
 文字列がキャプションになって、それ以降の引数のobjectに対してDumpメソッドを呼んでくれる。
    
いろいろする
               
 WPFならxaml(View)にプロパティを書き込むことになる// HPに値が入ったら, 自動的にgauge側で登録した処理が行われる
player.HP = 200;

    } 
 end of method GCAllocTest::Update
       
 モデルのインスタンスを生成
        
実験用
        
 Your code here!
    
 処理対象時間を列挙する
    
 破壊
            
 Release any cached data, images, etc that aren't in use.
            users = (List&lt;User&gt;)JsonSerializer.SerializerList&lt;User&gt;().ReadObject(fs3);  
 ここで例外
        
処理にかかった時間を秒単位で出力
//エラー修正前

//オート目パチスクリプト
2014/06/23 N.Kobayashi
//エラー修正後

//オート目パチスクリプト
2014/06/23 N.Kobayashi
//using System.Security.Policy;//←ここをコメントアウト
,,,

                
 Multiply two constants
                
 LINQのOrderByメソッドの結果と比較することで、MergeSortが正しく整列されているかを確認している
            
 マテリアルの引継ぎ
    
 このメソッドは DEBUG 定数が定義されている時だけ実行される// Debug.WriteLine メソッドの定義
[ConditionalAttribute("DEBUG")]
// Trace.WriteLine メソッドの定義
[ConditionalAttribute("TRACE")]

        
ばっさり省略
            boo = new sampleDelegate(fuga.hello); 
これは出来ない
                
 結果の返り値はdoubleなので注意
Console.WriteLine(date1.AddMonths(1));   
 4302017 12:00:00 AM// DateTime date2 = new DateTime(2017, 4, 31);  // これはエラー
 [System.ArgumentOutOfRangeException: Year, Month, and Day parameters describe an un-representable DateTime.]

            
 ToDouble()メソッドでdouble型にすると分かりやすい
#endif 
UNITY_IOS
            if ( textLength &lt; 0 ) { return 0; } 
 overflow
  public int Age { get; set; } 
 オートプロパティ
    NewSettingParam.CopyTo(PreSettingParam); 
 最新設定パラメータを前回設定パラメータにコピーする
            
 unsafeを用いて long間隔で0チェックを行う
ResourceService.Current.ChangeCulture("zh-CN"); 
上記サンプルでは「中国語」を表す
            
 再帰的に処理する
        
 ランダムな値を返す関数のリストにすればランダムな無限リストが得られる
    
 停車駅情報を編集
string str = "Hello\"World"; 
 Hello"World
            web.Navigate($"https:
translate.google.co.jp#{sourceLang}{resultLang}");
            
外側のグラフの更新
                
fullpathを指定した場合。
                if (list[i].Equals(default(T)) == true) 
0の場合は空文字列をセット
            
 reset query
Info("Information"); Show information
            
 実行が一瞬で終わって確認ため、キーの入力を待ちます
    
 戻り値がvoidで、引数がstring1個の場合呼び出すメソッドの定義public void funcp0(){...},,,// マルチスレッドから呼び出すInvoke( new Action(funcp0) );,,,// 呼び出すメソッドの定義public void funcp2(string msg, int nLineNo){...},,,// マルチスレッドから呼び出すInvoke( new Action&lt;string, int&gt;(funcp2), "解析終了", 100 );,,,// 呼び出すメソッドの定義public double funcdp2(string d, int n){...return 100.0;},,,// マルチスレッドから呼び出すInvoke( new Action&lt;string, int, double&gt;(funcdp2), "50.0", 75 );,,,Invoke( new Func&lt;string, int, double&gt;( delegate (string d, int n){ return double.Parse(d) + n + 100.0; } ), "50.0", 75 );,,,Invoke( new Func&lt;string, int, double&gt;((d, n) =&gt; double.Parse(d) + n + 100.0) ), "50.0", 75 );,,,// 呼び出すメソッドの定義
public void funcp0()
// マルチスレッドから呼び出す
Invoke( new Action(funcp0) );
呼び出すメソッドの定義public void funcp2(string msg, int nLineNo){...},,,// マルチスレッドから呼び出すInvoke( new Action&lt;string, int&gt;(funcp2), "解析終了", 100 );,,,// 呼び出すメソッドの定義public double funcdp2(string d, int n){...return 100.0;},,,// マルチスレッドから呼び出すInvoke( new Action&lt;string, int, double&gt;(funcdp2), "50.0", 75 );,,,Invoke( new Func&lt;string, int, double&gt;( delegate (string d, int n){ return double.Parse(d) + n + 100.0; } ), "50.0", 75 );,,,Invoke( new Func&lt;string, int, double&gt;((d, n) =&gt; double.Parse(d) + n + 100.0) ), "50.0", 75 );,,,// 呼び出すメソッドの定義
public void funcp2(string msg, int nLineNo)
// マルチスレッドから呼び出す
Invoke( new Action&lt;string, int&gt;(funcp2), "解析終了", 100 );
呼び出すメソッドの定義public double funcdp2(string d, int n){...return 100.0;},,,// マルチスレッドから呼び出すInvoke( new Action&lt;string, int, double&gt;(funcdp2), "50.0", 75 );,,,Invoke( new Func&lt;string, int, double&gt;( delegate (string d, int n){ return double.Parse(d) + n + 100.0; } ), "50.0", 75 );,,,Invoke( new Func&lt;string, int, double&gt;((d, n) =&gt; double.Parse(d) + n + 100.0) ), "50.0", 75 );,,,// 呼び出すメソッドの定義
public double funcdp2(string d, int n)
// マルチスレッドから呼び出す
Invoke( new Action&lt;string, int, double&gt;(funcdp2), "50.0", 75 );

list.RemoveAt(2); 
 Listの2番目の要素を削除する 
    using(GeometrySink geom = result.Open())  
usingを追加
            
 忘れずにStreamWriterを閉じる
// https://github.com/Microsoft/WindowsTemplateStudio/blob/master/templates/_composition/MVVMBasic/Project/Helpers/Observable.cs から引用
 名前空間を修正
// 空白ページの項目テンプレートについては、https://go.microsoft.com/fwlink/?LinkId=402352&amp;clcid=0x411 を参照してください

// https://github.com/Microsoft/WindowsTemplateStudio/blob/master/templates/Projects/Default/Helpers/ResourceExtensions.cs から引用
 名前空間を修正

            
 ↓が必要!
  
実行サンプル(C#6.0以降)
    Array.Resize(ref 顧客, i + 1);  
配列のリサイズ。既存値はそのまま。リサイズ直後の値はNull(のようだ)。
// 説明用のため、細かいところは省略してあります。


        
テキストファイルに書き込むメソッド
        
画面表示
        
JSON形式で、Warning以上の構造化ログを出力するためのLogger
            
2回目----------------------------------------------------------------------
        Contract.Result&lt;int&gt;() &gt;= 0  
 事後条件
                
 AccessTokenを元にUser名を取得
// ウィンドウの特定 - バリエーション4つ
 1. 最前面にあるウィンドウ
main = WindowControl.IdentifyFromTypeFullName(_app, "WpfApplication.MainWindow"); 2, 3. ウィンドウ情報を基に特定する - MainWindow.xamlに記載されている// 4. 現在操作中のアプリケーションのメインウィンドウ
var mainWindowCore = _app.Type&lt;Application&gt;().Current.MainWindow;
// タブの特定
 logicalツリー：xamlファイルの木構造を取得する
// AppVar =&gt; コントロールオブジェクトそのもの
 オブジェクトのポインタのようなものが入っているイメージ
// タブの操作
tab.EmulateChangeSelectedIndex(1);
// 以下、テキストボックスの特定、コンボボックスの特定 と続いたが、ここでは省略
.

// usingを抜けたら自動的に Dispose してくれる
,,,

if(list.Skip(n - 1).Any() &amp;&amp; !list.Skip(n).Any()){n=1の時は　list.Any() &amp;&amp; !list.Skip(n).Any()でもOK
        
 GET: Hello
  
 とりあえずTextパラメータは必須
        AssetDatabase.Refresh (); 
 アセットDBの更新
            
 暗号化
    var str = await new HttpClient().GetStringAsync("http:
hogehoge.com");
            
 ↓チェック処理//ID(123456)は最大桁数5桁を超えています。
なまえは必須項目です。

}
end this class
                
 税込
        
 Assert
        
 メソッドの定義 ここまで---------------------------------↑
                
 Update the view, if already loaded.
            
タスクを実行し、完了を待機します。
            
 ComboBoxのClearButtonの表示位置を調整します
            
 ファイル名を「MyLog_{YYYYMMDD}_{pid}.log」の形式に置き換え、変更前のファイルを削除する
            
  Console.WriteLine($"SpecialFoo : {((SpecialFoo)specialFoo).GetSome()}");   コンパイル不可
    
m_MouseLook.LookRotation (transform, m_Camera.transform);
            
 ex.Value.Execute();  拡張機能クラスのインスタンスは作成しない
        private int _writeIndex = -1;    
 書き終わった位置
    .ObservesProperty(() =&gt; Flag);  
 ObservesPropertyでFlagを監視するよう指定する
// モックの生成
var fooMock = Substitute.For&lt;Foo&gt;();
// 戻り値を設定
fooMock.GetBaz().Returns("baz");
// メソッドが呼ばれたかどうかをテスト
fooMock.Received().GetBaz();

      
 何かしらの初期化処理を実行
  public ushort UshortVal { get; set; } = 0xabcd; 
組み込み型
            
リスナを閉じる
            
 Release memory
        
 Using a DependencyProperty as the backing store for targetDataGrid.  This enables animation, styling, binding, etc...
        
 ↓これをつけると3桁カンマあり小数0埋めなしになる
            
 データのセット
    
 Disposeなど、削除に必要なものを実装
{1, 2, 3, 4},,,int[][] array = { new int[]{ 1, 2, }, new int[] { 3, 4 } };var x = array.SelectMany(x =&gt; x).ToArray();// {1, 2, 3, 4},,,
            
石のブロック
            
こんなん初見でわかるわけないやろ
    new EndpointAddress("net.pipe:
localhostHogeSearchService")).CreateChannel()
    [Commands("hello")]    
コマンドとして使用する文字列をアトリビュートで設定
            
 Commands for toolbar items
        
if Hand is lost,this gameobject's color is become Red.
                
ここでfor文との行ずれを調整するために別に用意した変数の値を1ずつ加算します
--------------------private void CutTask() {Task.Run(() =&gt; {if (semaphore1.CurrentCount == 0) {System.Threading.Interlocked.Increment(ref count_x);semaphore2.Release();semaphore1.Release();}semaphore1.Wait();semaphore2.Wait();if (count_x &gt; 0) {System.Threading.Interlocked.Decrement(ref count_x);return;}HeavyProcess();semaphore2.Release();semaphore1.Release();});}//--------------------,,,
         .SelectMany(d =&gt; Directory.EnumerateFiles(d)) 
 戻り値 IEnumerable&lt;string&gt;　（ファイルのリスト）
                Console.WriteLine("Doing!");　
 Doing! の位置で評価タイミングがわかる！違いに注意
    
表示する
                
  var httpContent = new System.Net.Http.StringContent(json, Encoding.UTF8, "applicationjson");
            
出力
    
保存
            
 全ての行を平坦化して、先ほど追加したインデックスでグループ化する.
                "https:
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.api.cris.aiwscrisspeechrecognizecontinuous"
  
 以下サンプル
            
 Sends a Ping event to the Server
Console.WriteLine(result);  
 p@5k#2Az
        
 データのセット
    xmlns:mc="http:
schemas.openxmlformats.orgmarkup-compatibility2006"
        private const string WindowsManagementUri = "https:
management.core.windows.net";
    
 Deserialize
                
 Update the view, if already loaded.
                    
 分割したものを各自yield return
        
ミューテックスを解放する
            
結果を返す//regStringsが検索ワード（[浜|濵|濱][崎|隑|陭|徛|﨑|㟢|碕|埼|嵜]）等
var query = from c in db.Entity

mesh.triangles = verticesIndex;
四角ポリゴンなのでtriangleを使うべきなのかは謎。
    
 すべてのダウンロード完了を待つ
    
 非UIスレッドでAddListenerしたものを非UIスレッドでRemoveListener → 削除されるかもしれないしされないかもしれない
               
 if (ct.IsCancellationRequested) { return; }
  
 同期させた後に書きたい処理を書く
                    
 プロパティ値を設定
        
}
                sign = sign * -1;  
 signをトグルさせる
            var foo = helper.GetSecret&lt;Foo&gt;();　
 型情報から、データを取得して、値を詰めて返す。
    
 なんか文字列編集する処理
            var baseUrl = "https:
abc.vault.azure.net";
            
 データがなければ終了
            var helper =  new KeyVaultHelper(keyVaultClientMock.Object, "https:
abc.vault.azure.net");
    var secretIdentifier = "https:
spikekey.vault.azure.netsecretsSomeSecret";
        private void Imprison(Kusogaki k, TimeOfCrime e) 
 書き換え
ServicePointManager.Expect100Continue = false; 
 HTTPエラー(417)対応
            
 ヘッダのパーサを指定して ReadArgs を呼び出す。
    productMock.Verify(product =&gt; product.GetContent("http:
www.microsoft.com"));
  GlobalConfiguration.Configure(WebApiConfig.Register); 
 ルーティングの処理などを書く
    
 Update counter and label
                
 話しかけられる状態かつプレイヤーが生きていたら話しかける
                
必要なワードのためCSVに書き込む処理に進む
                using (var command = scope.Resolve&lt;Command&gt;()) 
 ここでエラーになる
    public Command(IBackend backend) 
 Command に IBackend を Injection する書き方
    var url = "http:
www.data.jma.go.jpobdstatsdatamdrrtem_rctalltablemxtemsadext00_rct.csv";
            Debug.Log(transform.position);      
ここだとOK
       
ヘッダを出力しないように指定
    
 Exception が発生してもしなくても Dispoose() は呼びたい
        
 DELETE apivalues5
    
 public int ID { get; private set; } = 100;基底クラスpublic class VirtualProp{public virtual int MyProperty{get{return MyProperty + 100;}}}// サブクラスpublic class OverrideProp : VirtualProp{public override int MyProperty{get{return MyProperty + 200;}}},,,// 基底クラス
public class VirtualProp
サブクラスpublic class OverrideProp : VirtualProp{public override int MyProperty{get{return MyProperty + 200;}}},,,// サブクラス
public class OverrideProp : VirtualProp

var test = nodes.Item(0).InnerText;
この様な形でテーブル名を取得可能
var cmdline = $"-parentHWND {GetWallpaperHWND()}";
子ウィンドウとして起動
    db.Database.Connection.Close();  
 Closeを明記している
        
 攪乱順列（完全順列ともいう）を列挙する
        Assert.AreEqual("期待するログメッセージ", logMessage);  
 受け取ったログメッセージで期待値検証する
                    url: new Uri("https:
www.noraneko.co.jpvoice.xml"));
    
 遷移先から戻ってきたときの処理
        
起動済ならreturn
    
Console.WriteLine("id: {0} name: {1} category: {2} price: {3}", info.Id, info.Name, info.Category, info.Price);
    Task&lt;string&gt; downloadTask = new WebClient().DownloadStringTaskAsync("https:
msdn.microsoft.comja-jplibrarydd460693(v=vs.110).aspx");マルチコアCPUなPCで実行すると毎回結果が変わる不思議なプログラムpublic static void Main(){int num = 1000000;List&lt;int&gt; oddNumbers = new List&lt;int&gt;();Parallel.For(0, num, i =&gt;{if (i % 2 == 1) oddNumbers.Add(i);});Console.WriteLine($"List: {num}以下の奇数は{oddNumbers.Count}個です。");},,,// 毎回正確な結果が得られる安全なプログラム。public static void Main(){int num = 1000000;ConcurrentBag&lt;int&gt; oddNumbers = new ConcurrentBag&lt;int&gt;();Parallel.For(0, num, i =&gt;{if (i % 2 == 1) oddNumbers.Add(i);});Console.WriteLine($"ConcurrentBag: {num}以下の奇数は{oddNumbers.Count}個です。");},,,// マルチコアCPUなPCで実行すると毎回結果が変わる不思議なプログラム
public static void Main()
毎回正確な結果が得られる安全なプログラム。public static void Main(){int num = 1000000;ConcurrentBag&lt;int&gt; oddNumbers = new ConcurrentBag&lt;int&gt;();Parallel.For(0, num, i =&gt;{if (i % 2 == 1) oddNumbers.Add(i);});Console.WriteLine($"ConcurrentBag: {num}以下の奇数は{oddNumbers.Count}個です。");},,,// 毎回正確な結果が得られる安全なプログラム。
public static void Main()

        
 ポート番号取得
    
 SynchronizationContext.Currentをnullに設定する。ここではメインスレッドに対して設定している。
    }
Disposeは勝手にやってくれるらしいです。
        
 RGB値を取り出していく
    
処理
        [FunctionName("EchoExec")]                       
 Point 4
    
 データを返す
        private const string LOG_FORMAT = "{0:000} {1:00000}"; 
 ミリ秒３桁 linenumber５桁想定
            User = "moge@example.com"   
 G Suiteの管理者アカウントを設定する。このアカウントが実行したことになるCreate the service.CalendarService service = new CalendarService(new BaseClientService.Initializer(){HttpClientInitializer = credential,ApplicationName = "Calendar API Sample",});// ドメイン内のカレンダーを取得var cal = service.Calendars.Get("piyo@example.com").Execute();Console.WriteLine(cal.Id);// ドメイン内のカレンダーに予定を作成var schedule = new Event(){Summary = "APIからのテストスケジュール",Start = new EventDateTime(){DateTime = new DateTime(2017, 7, 10, 12, 0, 0)},End = new EventDateTime(){DateTime = new DateTime(2017, 7, 10, 13, 0, 0)},Description = "詳細"};service.Events.Insert(schedule, "piyo@example.com").Execute();Console.WriteLine("press Enter key...");Console.Read();,,,// ドメイン内のカレンダーを取得
var cal = service.Calendars.Get("piyo@example.com").Execute();
ドメイン内のカレンダーに予定を作成var schedule = new Event(){Summary = "APIからのテストスケジュール",Start = new EventDateTime(){DateTime = new DateTime(2017, 7, 10, 12, 0, 0)},End = new EventDateTime(){DateTime = new DateTime(2017, 7, 10, 13, 0, 0)},Description = "詳細"};service.Events.Insert(schedule, "piyo@example.com").Execute();Console.WriteLine("press Enter key...");Console.Read();,,,// ドメイン内のカレンダーに予定を作成
var schedule = new Event()

        
 現在のストロークをクリア
    
保存//メソッド


        
IPv4 &amp;&amp; localhostでない
            
contextMenuStrip1.Show(pos);
        
フォームの範囲を設定
        
■file_arrを使った処理■
//参考
  C#で文字列式を演算する
//通常のメソッドで使用

//呼び出し

//string型の拡張メソッドで使用

//呼び出し


//コントロール名
  テキストボックス ... textBox1
//注意
  行数が増えると遅くなるので注意

            
 var result = Rps.Battle(own, opponent).ToString();
    
ListView更新終了
//参考
  ListViewの列の幅を自動調節する .NET Tips C#, VB.NET
//項目のテキスト幅で、自動調節

//あるいは

//ヘッダと項目のテキスト幅で、自動調節

//あるいは


//方法1
文字列配列 → リストビュー項目生成 → リストビューへ追加
//方法2
リストビューへ文字列を項目追加 → 追加した項目にサブ項目追加

//参考
  【C++CLI】StatusStrip（ステータスバー）上のコントロールを右揃えに配置する　画像処理ソリューション
//1個のステータスラベルを右寄せ

//2個のステータスラベルで、
toolStripStatusLabel1 が 左寄せ、toolStripStatusLabel2 が右寄せ

//  コンボボックスの幅を自動的にアイテムの内容にあわせる - Paradigm Shift Design//  http://ishitoya.hatenablog.com/entry/20090209/1234179378参考//  コンボボックスの幅を自動的にアイテムの内容にあわせる - Paradigm Shift Design
  http:ishitoya.hatenablog.com/entry/20090209/1234179378

            var res = await client.GetAsync("https:
対象サイトFQDN");
    var userAccount = new ChannelAccount(id: "29:2WLwfakXxSbEze4gfeGxeS31nXfELePLX3deELoxHw"); 
 送信先ユーザー ※IDは適当だけどこんな感じの文字列だった
            
 ロジックを書く
    
ActiveControlがコンテナコントロールの場合は、さらにActiveControlを取得
// +演算子
sw.Restart();

            
  Shell を MainWindow に設定して表示
public textPrefab;
(事前に用意）
    
返されたデータを取得し表示
            
 リストビューのソースに設定ボタンイベントbtnListAdd.Clicked += (sender, e) =&gt; {memos.Add(new MemoData() { Title = "NewData" });};,,,//private List&lt;MemoData&gt; memos;private ObservableCollection&lt;MemoData&gt; memos;,,,//memos = new List&lt;MemoData&gt;();memos = new ObservableCollection&lt;MemoData&gt;();,,,btnItemUpdate.Clicked += (sender, e) =&gt; {memos[0].Title = memos[0].Title + "update";};,,,public class MemoData : INotifyPropertyChanged{public event PropertyChangedEventHandler PropertyChanged;private string title;public string Title{get{ return this.title; }set{if (title != value){title = value;if (PropertyChanged != null){PropertyChanged(this, new PropertyChangedEventArgs(nameof(Title)));}}}}},,,// ボタンイベント
btnListAdd.Clicked += (sender, e) =&gt; {

        if (!loopSwap) 
 Swapが一度も実行されなかった場合はソート終了
    
 String.Join()
            
 非アクティブ時にスレッドを終了.
            
result -&gt; ID1, ID3, ID5, ID7
            
 MenuPage
            
 Register with Notification Hubs
        
 msg = "この写真は " + tag + " だね♪";
                        

//動画読み込み
videoClip = Resources.Load(__path) as VideoClip;
//下の2つは念のための程度の設定です
AudioのOutputModeを選択
//audioTrack[0]を有効に
videoPlayer.EnableAudioTrack(0,true);
//audioSourceにaudioTrack[0]を設定？？
videoPlayer.SetTargetAudioSource(0,audioSource);
//コレが最後に来るのが大事(直感)
videoPlayer.clip = videoClip;
//再生
videoPlayer.Play();

  
 ロジックのバグで呼ばれなかった
//動画のレンダリングの仕方。デフォルトだとカメラが見れる一番遠く(Far)でレンダリングするっぽい
カメラの設定を使う場合はスクリプトをカメラにアタッチしたほうが良いかも
//開始フレームの設定(最初にスキップするフレームの数)
videoPlayer.frame = 100;
//ループONに
videoPlayer.isLooping = true;
//動画が最後まで来たときのループ処理
videoPlayer.loopPointReached += Loop;
引数ないと怒られますvoid Loop(VideoPlayer vp){print("LoooooP");},,,//引数ないと怒られます
void Loop(VideoPlayer vp)

//=&gt; 200円のリンゴを3個買ったら、太郎の所持金は400円だよ。
,,,

    
 Update is called once per frame
        
 書籍のISBNを取得する結果を出力するlistItems.ToList().ForEach(item =&gt;{Debug.WriteLine($"{item.Title} ({item.Isbn})");});,,,// 結果を出力する
listItems.ToList().ForEach(item =&gt;

    sr.Dispose(); 
↑結構大事
　
 valueが欲しいとき
            
 ここまでリフレクション
int freeTrialExpire = 60 * 60 * 24 * 7 * 2; 
 期間は2週間
    
　SkeletonDataのSlotDataリストの値を使用して、スロットをsetup poseに設定する。
        int v = (player_col - 1) *32;
最初4 色に応じてユーザーの色の画像を指定y
    
 前回の発言内容を除去// ループバックの場合
MMDevice outdevice = null;
// 既定の出力をキャプチャ、出力サウンドデバイスは別の場所で別途設定
outdevice = new MMDeviceEnumerator().GetDefaultAudioEndpoint(DataFlow.Render, Role.Multimedia);  既定の出力
//WaveFormat format = new WaveFormat(8000, 16, 1);//_ms_writer = new WaveFileWriter(Environment.CurrentDirectory + "\\kikisen-vc.wav", format);_ms_wloop = new WasapiLoopbackCapture(new MMDeviceEnumerator().GetDevice(MainWindow.MMDoutputDevice));//_ms_writer = new WaveFileWriter(Environment.CurrentDirectory + "\\kikisen-vc.wav", format);_ms_wloop.DataAvailable += _ms_wi_DataAvailable;WaveFormat format = new WaveFormat(8000, 16, 1);
Console.WriteLine(node["A"]["B"]["C"].Exists);  
 false
        
 0番の画像を描画します
  } while (i != -1);            
 使用できる文字がない場合は「-1」が返る
// まずコンテナインスタンスの作成
var container = new Container();
// シングルトンインスタンスの登録
 インターフェイス - 実体の型を登録
// インスタンスを登録
container.For&lt;IService2&gt;().As(service2);
container.For&lt;IService3&gt;().As(() =&gt; new Service3(), Lifecycle.Singleton);container.For&lt;IService4&gt;().As((IService3 service3) =&gt; new Service4(service5), Lifecycle.Singleton); ラムダ式で登録// 都度生成の場合
 インターフェイス - 実体の型を登録
container.For&lt;IService7&gt;().As(() =&gt; new Service7(), Lifecycle.Transient);container.For&lt;IService8&gt;().As((IService7 service7) =&gt; new Service8(service7), Lifecycle.Transient); ラムダ式で登録// スレッド単位生成の場合
 インターフェイス - 実体の型を登録
container.For&lt;IService10&gt;().As(() =&gt; new Service10(), Lifecycle.ThreadLocal);container.For&lt;IService11&gt;().As((IService10 service10) =&gt; new Service11(service10), Lifecycle.ThreadLocal); ラムダ式で登録// 通常通り生成
container.GetInstance&lt;IService1&gt;();
// 生成するデリゲートを出力
container.GetInstance&lt;Func&lt;IService6&gt;&gt;();
// 遅延生成
container.GetInstance&lt;Lazy&lt;IService7&gt;&gt;();

https:
stackoverflow.comquestions25619169deploying-32-bit-access-system-to-64-bit-office-machine
                
if (!string.IsNullOrWhiteSpace(data.ToString())) properties[i].SetValue(person, data);
            + Camera.main.transform.forward * 100 * n;
カメラから距離を取ってカメラと被らないようにさせているだけ
    
１フレームごとに呼ばれる・描画の処理
            
 公開鍵、秘密鍵をXML形式で取得する
        var url = "https:
www.google.commaps?q=" + latitude.ToString() + "," + longitude.ToString();
    
 Name, Race, Codename
                
 尤も確率が高いものを調べて表示する
        
 エラー発生時の処理
        
 黒の文字を描画します
        
 ファイル読み込み結果
result =&gt; [2, 3, 4, 8, 9, 0, 3, 2],,,var digits = int[] { 2, 3, 4, 8, 9, 0, 3, 2 };var n = digits.Select((x, i) =&gt; x * (int)Math.Pow(10, i)).Sum()// n =&gt; 23098432,,,
var perm = source.Perm(2); 
 k = 2C(n=3, r=2)の例var source = new int[] { 1, 2, 3 };var comb = source.Comb(2);var result = comb.Select(x =&gt; x.ToArray()).ToArray();// result =&gt; [ [1, 2], [1, 3], [2, 3] ],,,// C(n=3, r=2)の例
var source = new int[] { 1, 2, 3 };

        builder.RegisterModule(module); 
 設定ファイルによるコンポーネントの構築
                    foreach (AnimatorStateTransition transition in state.transitions)
トランジション
        
 Your code here!
        exitTransitionC2.AddCondition(UnityEditor.Animations.AnimatorConditionMode.If, 0, "TransitionNow"); 
 条件にトリガーを追加する。
                
 尤も確率が高いものを調べて表示する
if (hoge != null) { hoge.Piyo(); } nullチェックを行ってから実行していた構文が// nullチェック込みで簡潔に書ける
hoge?.Piyo();
if (hoge != null){ nullじゃない場合にPropertyに代入したい//これはコンパイルエラー
hoge?.Fuga = "ほげほげ";
// nullじゃない場合に、何かのメソッドの引数として実行したい。
var list = new List&lt;string&gt;();
//構文的にあてはまるものがない...
list.Add(str?);
// 例えば上の方で書いた例だと
 nullじゃない場合に代入（ちょっと冗長。。）
// nullじゃない場合にメソッド呼び出し
str?.Invoke(list.Add);
// nullable型も、Valueの取り出しが自然に行えます。
int? ni = GetNullableInteger();

   myPlotModel.InvalidatePlot(true); 
 -- (3) , ここで軸設定が反映され、PlotViewが更新される
            if ( textLength &lt; 0 ) { return 0; } 
 overflow
            
KeyBindingのローカライズされた文字列("Ctrl"など)をこのMenuItemのInputGestureTextに反映
              
 重複を許さないので、unusedから item そのものも取り除く
        
キャンセルされなければダイアログ表示
            DebugUtil.ListDump("ほげ","ふが");
OK
        string postUrl = "https:
****.****.com****upload";
//ボックス化
int i = 1;
//ボックス化解除
int j = (int)o;

var t2 = dict.GetOrDefault("test2","入ってなかったよ");  
default値を明示的に指定した場合は、keyが存在しない場合にそれが使用される。
    
 空白・改行のときここに来る。空白・改行とも 0 &lt; t &lt; '0' の範囲内にある
        
await context.PostAsync($"You sent {activity.Text} which was {length} characters");
    public TestContext TestContext { get; set; } 
必須
    
 Update is called once per frame
    
グラフ作成
        
 注視点の周りを回る
            
throw new NotImplementedException();
        
TOP5同様、降順＋Limit5 に加え、自分のRank-2をSkipすることで、自分のスコアの2つ上のユーザーから取得
        
 処理なし 
                    
 起動時にに呼び出すActorのメソッドをコール
                case XPaths.Post_CommentCOunt: return @"
*[@id=""main""]articlediv[1]div[2]divdiv[2]divulli[2]div[1]text()";
            
結果を表示
                lastGetTime = (long)query.Result.First()["createTime"];
createTimeの新しい順に並んでいるので、先頭(First)のcreateTimeを保持しておく。
            
 ここに終了処理を記述！！！
            
 COMを使った処理
            yield return so.SaveAsync();
こちらは新規登録処理
            
結果を表示
// TODO: このコード行はデータを 'kintoneDataSet.顧客リスト' テーブルに読み込みます。必要に応じて移動、または削除をしてください。
this.顧客リストTableAdapter.Fill(this.kintoneDataSet.顧客リスト);
this.contactTableAdapter.Fill(this.salesforceDataSet.Contact);,,, TODO: このコード行はデータを 'salesforceDataSet.Contact' テーブルに読み込みます。必要に応じて移動、または削除をしてください。
        
 エラー処理は省略
        
ここでUnity側に値を表示するロジックを実装する。
    
 Update is called once per frame
            
 床オブジェクトを生成.
// どこかから対象オブジェクトを取得
var hoge = GetHoge();
// 変更前の値を保持
var oldValue = hoge.Fuga;
// これから変更する値。
var newValue = "new";
// Redo/Undo用のオブジェクトを生成
var command = new UndoCommand(() =&gt; hoge.Fuga = oldValue, () =&gt; hoge.Fuga = new Vlaue);
// 適用
command.Redo();
// 元に戻す
command.Undo();
// 再適用
command.Redo();

    
 'tuple' のメンバーは 'foreach 繰り返し変数' であるため変更できません
例えば、Pointに対する拡張メソッドを定義しておくとpublic static void Deconstruct(this System.Windows.Point p, out double x, out double y){x = p.X;y = p.Y;},,,// 分割代入ができるようになります。var (x, y) = new System.Windows.Point(2, 3);Console.WriteLine($"{x}:{y}");,,,double num;double num2;new Point(2.0, 3.0).Deconstruct(out num, out num2);double arg_28_0 = num;double num3 = num2;double x = arg_28_0;double y = num3;Console.WriteLine(string.Format("{0}:{1}", x, y));,,,// 例えば、Pointに対する拡張メソッドを定義しておくと
public static void Deconstruct(this System.Windows.Point p, out double x, out double y)
分割代入ができるようになります。var (x, y) = new System.Windows.Point(2, 3);Console.WriteLine($"{x}:{y}");,,,double num;double num2;new Point(2.0, 3.0).Deconstruct(out num, out num2);double arg_28_0 = num;double num3 = num2;double x = arg_28_0;double y = num3;Console.WriteLine(string.Format("{0}:{1}", x, y));,,,// 分割代入ができるようになります。
var (x, y) = new System.Windows.Point(2, 3);

    var a = f(10); 
 匿名型を返す
                

開始時に呼ぶpublic void Set(){activate = true;}//出現させたい間呼ぶpublic void Emit(){if (activate){Timer += Time.deltaTime;for(int i = 0;i &lt; list.Count; i++){if (list[i].Time &lt; Timer){GameObject obj = (GameObject)Instantiate(list[i].Prefab, list[i].Pos, Quaternion.Euler(list[i].Rot));obj.transform.parent = transform;list.Remove(list[i]);}}}}[Serializable]public class EmitPrefab{public float Time;public UnityEngine.Object Prefab;public Vector3 Pos;public Vector3 Rot;}}//開始時に呼ぶ
public void Set()
出現させたい間呼ぶpublic void Emit(){if (activate){Timer += Time.deltaTime;for(int i = 0;i &lt; list.Count; i++){if (list[i].Time &lt; Timer){GameObject obj = (GameObject)Instantiate(list[i].Prefab, list[i].Pos, Quaternion.Euler(list[i].Rot));obj.transform.parent = transform;list.Remove(list[i]);}}}}[Serializable]public class EmitPrefab{public float Time;public UnityEngine.Object Prefab;public Vector3 Pos;public Vector3 Rot;}}//出現させたい間呼ぶ
public void Emit()
ReorderableListの作成public class EmitPrefabAttribute : PropertyAttribute { }#if UNITY_EDITOR[CanEditMultipleObjects][CustomEditor(typeof(PrefabListEmitter))]public class TutorialMessagesDrawer : Editor{private ReorderableList RL;private SerializedProperty ListProp;private void OnEnable(){ListProp = serializedObject.FindProperty("list");RL = new ReorderableList(serializedObject, ListProp);RL.elementHeight = 80;RL.drawHeaderCallback = (rect) =&gt;{EditorGUI.LabelField(rect, "Prefabs");};RL.drawElementCallback = (rect, index, isActive, isFocused) =&gt;{var element = ListProp.GetArrayElementAtIndex(index);EditorGUI.PropertyField(rect, element);};}public override void OnInspectorGUI(){DrawDefaultInspector();serializedObject.Update();RL.DoLayoutList();serializedObject.ApplyModifiedProperties();}}[CustomPropertyDrawer(typeof(PrefabListEmitter.EmitPrefab))]public class TutorialMessageAttribute : PropertyDrawer{public override void OnGUI(Rect position, SerializedProperty property, GUIContent label){using (new EditorGUI.PropertyScope(position, label, property)){position.height = EditorGUIUtility.singleLineHeight;var ele1 = property.FindPropertyRelative("Time");var ele2 = property.FindPropertyRelative("Prefab");var ele3 = property.FindPropertyRelative("Pos");var ele4 = property.FindPropertyRelative("Rot");var ele1Rect = new Rect(position){height = position.height};var ele2Rect = new Rect(position){height = position.height,y = ele1Rect.y + EditorGUIUtility.singleLineHeight + 2};var ele3Rect = new Rect(position){height = position.height * 2,y = ele2Rect.y + EditorGUIUtility.singleLineHeight + 2};var ele4Rect = new Rect(position){height = position.height * 2,y = ele3Rect.y + EditorGUIUtility.singleLineHeight + 2};EditorGUI.PropertyField(ele1Rect, ele1);EditorGUI.PropertyField(ele2Rect, ele2);EditorGUI.PropertyField(ele3Rect, ele3);EditorGUI.PropertyField(ele4Rect, ele4);}}}#endif,,,//ReorderableListの作成
public class EmitPrefabAttribute : PropertyAttribute { }

            string actionName; 
 動的に変更したいログインページのアクション
            
 Dictionary&lt;string, ocbect&gt;[]へのデシリアライズ
            }   
Disposeメソッドは書かれていないが、最後にfile.Disaposeが呼ばれる
        
 何かrequest.Urlを見たりして処理する
    static SingletonClass() {} 
 suppress beforefieldinit
            
 Text for processing
    
攘夷派データ登録処理
            
 サイズ確認
        
 自動生成するクラスのメソッドの元になる情報
            
無音データを意図的に送っています。
　　　　　
AirTap検出時の処理を記述
            Thread.Sleep( 4000 );   
スクリプト実行まで時間が掛かるので適当にwait
            var NotepadSession = new WindowsDriver&lt;WindowsElement&gt;(new Uri("http:
127.0.0.1:4723"), appCapabilities);
            
 文字を太字にする。コードは省略。
    
 Start is called before the first frame update
        
 window title
         
ViewData["Message"] = "Your application description page.";
    
 Update is called once per frame
        
改善の余地あり
    
 素数である
    
 探索リストに残った数を素数リストに移動して処理終了。
                    
 JSON → instance
        
 button.Click += (sender,e)=&gt;{MessageBox.Show("clicked!");};
    
 ArgumentNullExceptionが発生するはず
    
 一部省略
                    
 エラーが出たらこれがログに吐き出される
    
 IDが一致したデータのみ渡します.
        
 次の素数を求める
            
CreateDelegateでUnityActionを作っている
    x = x.Val- 0.1 * x.Dif; 
 xの更新// yの極小値とその時のx
Console.WriteLine(y.Val + "\t" + x.Val);

                using (DirectoryEntry DE = new DirectoryEntry(string.Format("LDAP:
{0}", new ADSystemInfo().UserName))) {
                            .ToList();    
Whereの結果をList&lt;int&gt;に変換する
                               return fields[8]; 
 c-ip
            
 ユーザ設定へはnullを保存する
        
 値の投げ込み// その1 単純に変換
var table1 = default(DataTable)
// その2 匿名型
 もちろんJoinとかの結果でも大丈夫

    
 Using a DependencyProperty as the backing store for Data.  This enables animation, styling, binding, etc...
        browser.Address = "https:
google.co.jp";
        
 何もせず if を抜けます
      
非同期3つ目。2つ目の結果を受け取って処理する。
        
 以下ゲーム開始の処理
        
 移動
var displayName = account.DisplayName; 
 設定しいるユーザー名が取れる
        
 選択されたときの挙動
            cell.TextLabel.Text = item.name; 
 任意のプロパティ
    
 出力
    
親コントローラーにエリア属性を設定しているので、該当子コントローラーには設定しなくてもPersonnelエリアと関連付けている
    listener.Prefixes.Add("http:
localhost:9999");
クライアントのIPアドレスを取得するため、NginxのProxyヘッダを使う設定app.UseForwardedHeaders(new ForwardedHeadersOptions{ForwardedHeaders = ForwardedHeaders.XForwardedFor | ForwardedHeaders.XForwardedProto});,,,public class HomeController : Controller{public IActionResult Index(){ViewData["RemoteAddress"] = HttpContext.Connection.RemoteIpAddress.MapToIPv4().ToString();return View();}},,,// クライアントのIPアドレスを取得するため、NginxのProxyヘッダを使う設定
app.UseForwardedHeaders(new ForwardedHeadersOptions

                
 return our reply to the user
    
 www.microsoft.com の応答が超速なら、このメッセージは表示されない！
    
 希に発生
            
呼び出し
                
item.Selectedがtrueの場合
var s = string.Format("{0:0.000}", 1.2345); 
 = "1.235"
    
 This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            
throw new NotImplementedException();
    
To register event
    
 メソッド呼び出し
    
 ここから下は Linq to object
string html = await wc.DownloadDataTaskAsync("http:
www.google.co.jp");
        script.Attack (); 
UnityChanScriptにある関数Attackを実行する
                
CELLレコード後のGROUPのサイズを加算
                
 New_2
    
 Start streaming
                
表示
                
オブジェクトの配置
        
 メッセージの送信
            
 ギズモのアイコンは自分で設定してね！
        
ユーザー設定情報インスタンスをフィールドに保持
        
 メイン画面を作成して表示する// 計測開始
sw.Start();
// この間に処理を行う

// 計測終了
sw.Stop();
// 結果を返す(ミリ秒単位)
long time = sw.ElapsedMilliseconds;
// 乱数を初期化
var r = new System.Random();
// 0以上6未満の整数一様乱数を発生させる
int dice = r.Next(6);
// -10以上11未満の整数一様乱数を発生させる
 つまり下記は[-10,10]であり[-10,11]ではない
//0以上Int32.MaxValue未満の整数一様乱数を発生させる
int y = r.Next();
//0.0以上1.0未満の実数一様乱数を発生させる
 つまり[0.0,1.0)であり[0.0,1.0]ではない

nums6.Aggregate((x, y) =&gt; x * y); 
 3628800 -&gt; { 1, 9 },,,var nums7 = new[] { 1, 2, 3, 4, 5, 6 };int[] evenArray = nums7.Where(x =&gt; x % 2 == 0).ToArray();List&lt;int&gt; oddList = nums7.Where(x =&gt; x % 2 != 0).ToList();,,,var staffs3 = new[]{new {StaffId = 1, DepartmentId = 1, Name = "Tanaka"},new {StaffId = 2, DepartmentId = 3, Name = "Suzuki"},new {StaffId = 3, DepartmentId = 2, Name = "Takahashi"},new {StaffId = 4, DepartmentId = 1, Name = "Sato"},};var id2name = staffs3.ToDictionary(staff =&gt; staff.StaffId, staff =&gt; staff.Name);var depid2staff = staffs3.ToLookup(staff =&gt; staff.DepartmentId);,,,ArrayList alist = new ArrayList() { "First", "Second", null, "Third" };string[] arraycast = alist.Cast&lt;string&gt;().ToArray();// -&gt; { "First", "Second", null, "Third" }string[] arrayoftype = alist.OfType&lt;string&gt;().ToArray();// -&gt; { "First", "Second", "Third" },,,-&gt; { "First", "Second", null, "Third" }string[] arrayoftype = alist.OfType&lt;string&gt;().ToArray();// -&gt; { "First", "Second", "Third" },,,
                
逆シリアライズ
date1がdate2より遅い日付の場合Truepublic bool CompareNullableDatetime(DateTime? date1, DateTime? date2){int result = Nullable.Compare(date1, date2);return result &gt; 0;},,,//date1がdate2より遅い日付の場合True
public bool CompareNullableDatetime(DateTime? date1, DateTime? date2)

    
Computer Vision APIの呼び出し
        
中心をO(x,y)とすると、OA=OB=OCであるので、
                    
 存在しない UNC を指定したときに発生
        
 関連付け
                
逆シリアライズ
            
 New_4
// 追加 : O(1)
list.Add("item");
// 取得 : O(1)
var item = list[0];
// 検索 : O(n)
int index = list.IndexOf("item");
// ソート : O(n log n)
list.Sort();
foreach (var element in list){ 列挙 : O(1) ※GetEnumerator()のみ。foreachを含めたらO(n)// 削除 : O(n)
bool removed = list.Remove("itemmmm");
// 追加 : O(1)
LinkedListNode&lt;string&gt; addedNode = llist.AddLast("value");
// 検索 : O(n)
bool contains = llist.Contains("value");
// 検索と取得 : O(n)
LinkedListNode&lt;string&gt; findNode = llist.Find("value");
foreach (var element in llist){ 列挙 : O(1)// 削除(要素指定) : O(n)
bool removed = llist.Remove("value");
// 削除(ノード指定) : O(1)
llist.Remove(addedNode2);
// エンキュー : O(1)
queue.Enqueue("item");
// 検索 : O(n)
bool contains = queue.Contains("item");
// ピーク : O(1)
var item = queue.Peek();
// デキュー : O(1)
var item2 = queue.Dequeue();
// プッシュ : O(1)
stack.Push("item");
// 検索 : O(n)
bool contains = stack.Contains("item");
// ピーク : O(1)
var item = stack.Peek();
// ポップ : O(1)
var item2 = stack.Pop();
// 追加 : O(1)
dict.Add("key", "value");
// 検索 : O(1)
bool containsKey = dict.ContainsKey("key");
// 取得 : O(1)
var value = dict["key"];
// 削除 : O(1)
bool removed = dict.Remove("key");
// 追加：O(log n)
sdict.Add("key2", "value2");
// 検索：O(log n)
bool contains = sdict.ContainsKey("key");
// 取得：O(log n)
var value = sdict["key"];
foreach (var element in sdict){ 列挙：O(log n)// 削除：O(log n)
bool removed = sdict.Remove("key");
// 追加：O(n)
slist.Add("key", "value");
// 検索：O(log n)
bool containsKey = slist.ContainsKey("key");
// 取得：O(log n)
var value = slist["key"];
// 取得(インデックス使用)：O(1)
var keybyindex = slist.Keys[0];
foreach (var element in slist){ 列挙：O(1)// 削除：O(n)
bool removed = slist.Remove("key");
// 追加：O(1)
bool added = set.Add("item");
// 検索：O(1)
bool contains = set.Contains("item");
集合演算：O(n) ~ O(n+m)set.UnionWith(new[] { "otheritem" });set.IntersectWith(new[] { "item" });// 列挙：O(1)foreach (var element in set){Console.WriteLine(element);}// 削除：O(1)bool removed = set.Remove("item");// 削除(条件指定)：O(n)int removedCount = set.RemoveWhere(_ =&gt; _.StartsWith("it"));,,,var sset = new SortedSet&lt;string&gt;();// 追加：O(log n)bool added = sset.Add("item");sset.Add("item2");sset.Add("item4");sset.Add("item3");// 検索：O(log n)bool contains = sset.Contains("item");// 集合演算：O(n) ~ O(n+m)sset.UnionWith(new[] { "otheritem" });// 列挙：O(log n)foreach (var element in sset){Console.WriteLine(element);}// 削除：O(log n)bool removed = sset.Remove("item");// 削除（条件指定）：O(n)int removedCount = sset.RemoveWhere(_ =&gt; _.StartsWith("it"));,,,// 集合演算：O(n) ~ O(n+m)
set.UnionWith(new[] { "otheritem" });
foreach (var element in set){ 列挙：O(1)// 削除：O(1)
bool removed = set.Remove("item");
// 削除(条件指定)：O(n)
int removedCount = set.RemoveWhere(_ =&gt; _.StartsWith("it"));
// 追加：O(log n)
bool added = sset.Add("item");
// 検索：O(log n)
bool contains = sset.Contains("item");
集合演算：O(n) ~ O(n+m)sset.UnionWith(new[] { "otheritem" });// 列挙：O(log n)foreach (var element in sset){Console.WriteLine(element);}// 削除：O(log n)bool removed = sset.Remove("item");// 削除（条件指定）：O(n)int removedCount = sset.RemoveWhere(_ =&gt; _.StartsWith("it"));,,,// 集合演算：O(n) ~ O(n+m)
sset.UnionWith(new[] { "otheritem" });
foreach (var element in sset){ 列挙：O(log n)// 削除：O(log n)
bool removed = sset.Remove("item");
// 削除（条件指定）：O(n)
int removedCount = sset.RemoveWhere(_ =&gt; _.StartsWith("it"));

    
True
    
ドロップダウンメニューの作成
                
 New_4
                              
 6789
            
Roslynでスクリプト実行
    
どんな名前でもいいのでstring型のフィールドに付ける
        
 return Tuple.Create(Code, Level).GetHashCode();
            
終端がNULLの場合、除外する
            Console.WriteLine("文字数が5文字を超えるのは：" + index6 + "番目の要素でした。");
出力:文字数が5文字を超えるのは：2番目の要素でした。
        
 TimeStampを見て、新しい方が今流れてきたと判断
        
 set the format information
    hoge.StartInstantiate();    
registInstantiateで登録したアクションを一気に動かす
            
 DBから取得する想定。
        
 string.Formatを使うと， + でつなげるよりも見た目わかりやすく文字を連結できる．
                    process.StartInfo.CreateNoWindow = true;
not show cmd window
            Thread.Sleep(100); 
 時間のかかる処理を想定
                return book;    
Bookオブジェクトを返す
            
Form親の変数を取得
            
 ========================================
    .Subscribe(...) 
 thisが死んだら OnCompleted() からの Dispose()
  parameters ["id"] = tweet.id_str; 
 リツイートするツイートのID
        
出力する内容
            
 関数呼び出しの部分を条件分岐から分離した。
        
 ブレンド率を操作する (DoTweenを使用しています)
                
config.InitializeCustomWebHooksAzureQueueSender();
            
 フォームコントロールとFormClosedEventArgsオブジェクトを渡して呼び出し
    
var date = TimeSpan.MaxValue.ToString(@"yyyy\MM\dd HH\:mm\:ss\.fff")
                
 実行及び結果表示
            
 List&lt;T&gt;
                
 進捗表示
            
 半角空白, 連続半角空白, 全角空白, 連続全角空白
      
 このメソッドからの戻り値
        
 ラムダ式のように throw を書ける。
            
 画面へ設定する。
        
coution! face detect is only supported 'BitmapPixelFormat.Gray8'.
    
 Resource
        
ローカル用に変換する
            using (WebApp.Start&lt;StartUp&gt;("http:
*:8080"))
        
 execute For HoloLens. 
        
 アニメーションが終了時によばれる
        rb.angularVelocity = Vector3.zero; 
回転運動の停止
        
 工場一覧の選択肢を取得するためのメソッドです。
    var conn = new HubConnection("http:
~~~~~~~~~~~.azurewebsites.netsignalr");
    else { dishes[dishes.Count-1].Add(a); } 
 要素数-1 で最後の要素// 結果
int i = 0;

            
 CloseChannel(DEQUEUE_INDEX);
    
 Start is called before the first frame update
    publisherList.Items.Add(publisherName); 
出版社のListBoxに値をセット
        
 計算結果
                
 last
                
親プロセスのPIDを取得
    
 イベントを処理済みとしてマークする
            break; 
 条件不成立 (index &gt;= list.Count) なら終了。
                
 キャンセル要求
if(hp &lt; 5)  
 5より小さい
//実際にはバインドしている値なのでこの辺はイメージ
var TItems = new ObservableCollection&lt;TItem&gt;();
//欲しい値
var count = TItems.Sum(v =&gt; v.TreeCount());

        
 対象のアプリが起動してないか？
            
 ValidateTokenで検証に失敗した場合はここにやってくる
            
 2バイト文字
        var dpiY = (uint)wParam &gt;&gt; 16;      
上位16bit
            
 メモリの解放
//効率悪い例：
detail += "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa";
//改善例：
StringBuilder retSb = new StringBuilder();
//※大量の文字列に対し、正規表現を使わないように。非常に遅くなる。
,,,

                

            
 GC.SuppressFinalize(this);
DateTimeOffset.Now.ToOffset(TimeSpan.FromHours(2.5)) 
 UTC+2.5のタイムゾーンは存在しないはず・・・// 日本時間(JST)に変換する
DateTimeOffset.Now.ToOffset(TimeSpan.FromHours(9))  JST以外に設定されている場合にエラー
// 端末のタイムゾーンが切り替わる
...

result:2,4,12,24,36,60,120,180,240,360,720,840,1260,1680,2520,5040,7560public static IEnumerable&lt;int&gt; HighlyCompositeNumber(int limit){var maxDivisorCount = 0;for (int i = 2; i &lt; limit; i++){var divisorCount = CountDivisor(i);if (maxDivisorCount &lt; divisorCount){yield return i;maxDivisorCount = divisorCount;}}}private static int CountDivisor(int value){if (value &lt;= 1) { return 1; }var divisors = new List&lt;int&gt;();for (int i = 1; i &lt; value; i++){if (value % i != 0) { continue; }var f = value / i;if (divisors.Contains(f)) { break; }divisors.Add(i);if (i == f) { break; }}return divisors.Count;},,,
            
 GC.SuppressFinalize(this);
// 敢えて型推論varで宣言はしません
string hoge = "静的言語です";

    
 タイプ検索
    
 StringValue = ABCDEFG
                        open.StartInfo.RedirectStandardOutput = true;   
 標準出力をリダイレクトで取得したい
Stream pngStream = snapshot.AsPNG().AsStream(); 
 .AsJPEG() もあるよ
        
 ③byteで受け取る版
        
 some stuff
    
 ...
                
 DB更新処理を実行する。コードは省略
    
ここ追加
            
 loggerMock.VerifyLogging("test", LogLevel.Debug, Times.Never()); これはログレベルが違うので失敗する
        
バックアップする場所を設定
    
 モデルのマテリアルの色を変更する
    
 false や null を返すかもしれない  
        
 emitEntryPoint を true にしているのでとりあえず入れなくてはならない
//参照型だと後で変更したときにほかの部分も変わるから値型のみ受け付ける。
public IEnumerable&lt;IEnumerable&lt;T&gt;&gt; Do&lt;T&gt;(IEnumerable&lt;IEnumerable&lt;T&gt;&gt; values, T blankValue)
毎回newとかさせれば上記の問題が解消できるからFuncデリゲート入れてラムダ式とかでいけるようにする。public IEnumerable&lt;IEnumerable&lt;T&gt;&gt; Do&lt;T&gt;(IEnumerable&lt;IEnumerable&lt;T&gt;&gt; values, Func&lt;T&gt; blankValue){return Enumerable.Range(0, values.Max(c =&gt; c.Count())).Select(i =&gt; values.Select(c =&gt; i &lt; c.Count() ? c.ElementAt(i) : blankValue()));}//使い方例var tValues = Do(values, () =&gt; new T());,,,public IEnumerable&lt;IEnumerable&lt;T&gt;&gt; Do&lt;T&gt;(IEnumerable&lt;IList&lt;T&gt;&gt; values, T blankValue)where T : struct{return Enumerable.Range(0, values.Max(c =&gt; c.Count)).Select(i =&gt; values.Select(c =&gt; i &lt; c.Count ? c[i] : blankValue));}public IEnumerable&lt;IEnumerable&lt;T&gt;&gt; Do&lt;T&gt;(IEnumerable&lt;IList&lt;T&gt;&gt; values, Func&lt;T&gt; blankValue){return Enumerable.Range(0, values.Max(c =&gt; c.Count)).Select(i =&gt; values.Select(c =&gt; i &lt; c.Count ? c[i] : blankValue()));},,,//毎回newとかさせれば上記の問題が解消できるからFuncデリゲート入れてラムダ式とかでいけるようにする。
public IEnumerable&lt;IEnumerable&lt;T&gt;&gt; Do&lt;T&gt;(IEnumerable&lt;IEnumerable&lt;T&gt;&gt; values, Func&lt;T&gt; blankValue)
//使い方例
var tValues = Do(values, () =&gt; new T());

    
 ここにコマンドの処理
OK時private void Button_Click(object sender, RoutedEventArgs e){this.DialogResult = true;}// キャンセル時private void Button_Click_1(object sender, RoutedEventArgs e){this.DialogResult = false;},,,// OK時
private void Button_Click(object sender, RoutedEventArgs e)
キャンセル時private void Button_Click_1(object sender, RoutedEventArgs e){this.DialogResult = false;},,,// キャンセル時
private void Button_Click_1(object sender, RoutedEventArgs e)

            
 終端部分
    
 その4
    
 くじ引きして当選していたらランダム値を獲得する
                
 OK 通常のキャスト
            
この場合、イベントの購読解除はどこでやるんだ？
        
 ARGBからAHSVへ変換
        
カラー版
        
声明一个Ichangething接口，此接口有一个方法Changthing，参数是一个字符串变量，返回一字符串。
     
試着室解放  //大筋からは試着室の事は隠ぺいし、モデルの俯瞰図的な使用をおこなっている
var shopping = Shopping.Start()

        
 移動させる
            
 何もしない
new PyList&lt;int&gt;() { 1 } * 4;
[1,1,1,1]*したときに複製をするようにしたstatic public PyList&lt;T&gt; operator *(PyList&lt;T&gt; list, int rate){var temp = new PyList&lt;T&gt;(list);if (temp.Count != 0){for (int i = 0; i &lt; rate-1; i++)foreach (var item in list)temp.Add(item);}else{for (int i = 0; i &lt; rate; i++){temp.Add(default(T));}}return temp;},,,//*したときに複製をするようにした
static public PyList&lt;T&gt; operator *(PyList&lt;T&gt; list, int rate)

    {   
 あったよー！
$"{d:n1}"; 
123.5
  "https:
dinosaur-facts.firebaseio.com",
        
取得したファイル名をstringに代入する
    
dest = (T2)vt;
            
 詳細ボタン
                int angle = 0,   
degree
    
 かなり大きめの処理なので省略…
        
 2.2. 各クラスタについて、所属するデータ点の平均を計算して新しいクラスタ平均とする。// 1. データ点からランダムに k 個のクラスタ平均を初期値として取る。
var rand = new Random();
// 2. 収束判定のためにループ外に assignments 変数を持っておく。
var assignments = new int[data.Length];
while (true),,, 2. 収束するまで繰り返す。// 2. 収束判定のために 1 つ前の状態をコピー。
var prevAssignments = assignments.Select(v =&gt; v).ToArray();
// 2.1. 各データ点について、自身に最も近いクラスタに割り当てる。
assignments = data.Select(v =&gt; means.IndexOf(means.MinBy(m =&gt; Math.Pow(v - m, 2)))).ToArray();
if (Enumerable.Range(0, data.Length).All(i =&gt; assignments[i] == prevAssignments[i])) break;,,, 2. 収束していたら計算終了。// 2.2. 各クラスタについて、所属するデータ点の平均を計算して新しいクラスタ平均とする。
means = means.Select((m, i) =&gt; data.Where((v, j) =&gt; i == assignments[j]).DefaultIfEmpty(m).Average()).ToList();
Vector2 には System.Numerics.Vectors が必要（ライセンスに同意する必要あり）。public static Tuple&lt;Vector2[], int[]&gt; KMeans(Vector2[] data, int k){var rand = new Random();var means = data.OrderBy(v =&gt; rand.Next()).Take(k).ToList();var assignments = new int[data.Length];while (true){var prevAssignments = assignments.Select(v =&gt; v).ToArray();assignments = data.Select(v =&gt; means.IndexOf(means.MinBy(m =&gt; (v - m).LengthSquared()))).ToArray();if (Enumerable.Range(0, assignments.Length).All(i =&gt; assignments[i] == prevAssignments[i])) break;means = means.Select((m, i) =&gt; data.Where((v, j) =&gt; i == assignments[j]).DefaultIfEmpty(m).Average()).ToList();}return Tuple.Create(means.ToArray(), assignments);},,,public static class Extensions{public static Vector2 Average(this IEnumerable&lt;Vector2&gt; self){var array = self as Vector2[] ?? self.ToArray();return array.Aggregate(Vector2.Zero, (v1, v2) =&gt; v1 + v2)/array.Length;}},,,// Vector2 には System.Numerics.Vectors が必要（ライセンスに同意する必要あり）。
public static Tuple&lt;Vector2[], int[]&gt; KMeans(Vector2[] data, int k)

            
 one-shot
    
 検索ボタンが押された場合の処理
        Count = 0;   
 0にする//---------略------------
}

ボタンをクリックしたときpublic void ButtonPushedByManual(){StartCoroutine(Compare(result_before, result_after));}public IEnumerator Compare(ReadCSV csv_before, ReadCSV csv_after){for (int i = 0; i &lt; 100000; i++){for (int j = 0; j &lt; 100000; j++){public Text current_process_ = i.ToString() + "," j.ToString();yield return null;}}},,,//ボタンをクリックしたとき
public void ButtonPushedByManual(){

                        
 プレースホルダのテキスト色を、前景色と背景色の中間として文字列を描画する
                    
 don't subscribe twice
     
何か
    
 Use mouse to emulate head in the editor.
// 次でアクセスできる
Properties.Settings.Default.Properties[設定名]?.DefaultValue
// 次でアクセスできる
Properties.Settings.Default.PropertyValues[設定名]?.PropertyValue

    
 求めたLU行列を使って連立方程式を解く// 最小二乗平面を用いた推測値を元に速度を求める
float[] result = CalcLeastSquaresPlane(samplingData);
// サンプリングした最後のデータを用いて、理想平面の値を求める
Vector3 v = samplingData.Last();
// 実際に利用したいデータ
Vector3 vec = new Vector3(v.x, y, v.z);

        
リスト自体をキレイにする
            
 ディレクトリの作成
            
targetとの距離がしきい値dxより大きくなったら歩く
    
refをつけないとクラスは参照の値渡しになる
            
 総和処理
        
 自身に () をつけて呼び出し
        
 ワールド変換を元に戻しておく
                Process.Start("https:
twitter.com"); ここはスキなのでいいです。Unityのとこも
    
 instance.GetAvailableDevices();
    
 コンパイルが成功するための実装。 
1. List作成List&lt;City&gt; cityList = new List&lt;City&gt;{new City { Id = 0, Name = "tokyo", Path = "./path/tokyo" },new City { Id = 1, Name = "osaka", Path = "./path/osaka" }};// 2. Findで取得string filepath = cityList.Find(x =&gt; x.Id == 0).Path;// 表示確認Console.WriteLine(filepath);// ./path/tokyo と表示されます,,,// 1. List作成
List&lt;City&gt; cityList = new List&lt;City&gt;
// 2. Findで取得
string filepath = cityList.Find(x =&gt; x.Id == 0).Path;
// 表示確認
Console.WriteLine(filepath);
// ./path/tokyo と表示されます
,,,

            
含まれていなければ、&lt;T&gt;のdefaultを返す
                var uwq = UnityWebRequest.Get("http:
google.com");
            
 Bad!
   
 MahApps
            
カラム幅設定
    
 Add framework services.
        hp -= damage; 
 hp から damageを引き算する
  
 ...
struct MyStruct    
 Error ( Field ' MyStruct.myString ' must be fully assigned before it leaves the constructor ).
    
 Add application services.
        
 左右のキー入力でキャラクターを90度旋回する
            list.ForEach(Console.WriteLine);  
 1 3 5
Debug.Log("test"); 
 testと表示される
    
紐づけ//adminのみにアクセスを許可
[Authorize(Roles ="admin")]

                    
メソッド実行
        
今の乱数を回した回数
        Debug.Log( "func2:" + func2.NullSafe(1) + ";" ); 
 "func2:;"
    [SerializeField] private float azimuthalAngle = 45.0f; 
 angle with x-axis
        
 Log
var inc = (int x) =&gt; x + 1;  
 エラー
        
This method is not protected from multi thread.
    someFunction(notBeConverted);     
 大丈夫
                
PictureBox1に表示する
            
終了処理
        
 現在時間が移動時間を超えたら100%過ぎてるので次のカーブへ行く
            baseDir = args[1]; 
アセンブリパス
        yield return null; 
 1フレーム待機
    
100になるまでGenerateしてもらいます。この100がトリガーです。//ProgressというボタンとProgressBarというプログレスバーがあったとします
this.Progress
// Resumableという名前のボタンがあるとします。
this.Resumable

context.GetLink(IDocument);
IDocument型を渡す方が多いと思います
        
 画像ファイルの拡張子から決定する
        
 力を与える
    
 Update is called once per frame
        
 Set our view from the "main" layout resource
            
 IntegerUpDownのVisualTreeから検索
        
 .... ほかのコードがあれば
        
独自データ保存
                
 this is c3
        index = 0;    
インデックスをリセット
            {
ブロックの形と色のパターンをswtich文で実装。
Console.WriteLine("終了"); 
ここに到達できません
dynamic dx = 1; 
 dx の型は dynamic 型
        
 プレハブの生成
Application.OpenURL("https:
twitter.comintenttweet?text=hello&amp;hashtags=way");
        
録音を繰り返す
                
TODO: 最初に大容量のファイルを開かれた場合、問題になるかもしれないので、その内検証する
// 現在アクティブなVisioファイルの取得方法
Visio.Document activeDocument = this.Application.ActiveDocument;

    
 ・Decoratorを実装
            
 no action
        
 AddEntityFrameworkStores&lt;ApplicationDbContext&gt; -&gt; AddEntityFrameworkStores&lt;ApplicationDbContext, int&gt;
System.GC.Collect(); 
 ファイナライズされたばかりのオブジェクトに関連するメモリを開放
using System.Threading; 
EventWaitHandle
            webBrowser1.Navigate($"http:
www.upload.nicovideo.jpedit?f={e.Node.Tag}");
    
 参照が必要な処理
        
 その他のメソッドは省略しています
        
UIスレッドで動かす必要があるためDevice.BeginInvokeOnMainThreadをかませる
            webBrowser1.Navigate($"http:
www.upload.nicovideo.jpedit?f={e.Node.Tag}");
            
 改行検索
            
保存します。
richTextBox2.Update(); 
 step4
            
ファイルの先頭から指定した位置までストリーム内の読込み位置を変更し、追加分のデータを読込んで、読込み位置を最後の位置にする
                
 Note it will also go to _defaultCapacity first, not 1, then 2, etc.
            
コントロールの制御
            
保存します
    var doubledEnumerable = oddEnumerable.Select(x =&gt; x * 2); 
 =&gt; 4,8,12,16
                
bool isRound = insets.IsRound;
        
 設定しているタイムゾーンが適用されています。
        videoCallBackFlg = false; 
コールバック済みフラグをリセット// 〜〜省略

// 〜〜省略

// 〜〜省略


//処理
sw.Stop();

                
 New_4
            
 今回なにもする必要なし
    dictionary.TryGetValue(key, out result); 
 keyが見つからない場合は result に default(TValue) が代入される
this.salesforce予定表TableAdapter.Fill(this.sharePointDataSet.Salesforce予定表);// TODO: このコード行はデータを 'salesforceDataSet.Event' テーブルに読み込みます。必要に応じて移動、または削除をしてください。 TODO: このコード行はデータを 'sharePointDataSet.Salesforce予定表' テーブルに読み込みます。必要に応じて移動、または削除をしてください。this.eventTableAdapter.Fill(this.salesforceDataSet.Event);,,, TODO: このコード行はデータを 'salesforceDataSet.Event' テーブルに読み込みます。必要に応じて移動、または削除をしてください。
                    x =&gt; x.Type == "http:
schemas.xmlsoap.orgws200505identityclaimsnameidentifier")?.Value;
        
 登録したイベントデリゲートを読んでみるメソッドView/ViewModelが用意するメソッドprivate void OnSensorDataReceived(int temperature){textbox1.Text = temperature.ToString();},,,// 温度更新時に読んでほしいメソッドをModelに登録sensorModel.OnSensorDataReceived += OnSensorDataReceived;,,,// View/ViewModelが用意するメソッド
private void OnSensorDataReceived(int temperature)
// 温度更新時に読んでほしいメソッドをModelに登録
sensorModel.OnSensorDataReceived += OnSensorDataReceived;

    string targetName = name; 
 ここがポイント
                    VoiceClient.Send(buffer, 0, blockSize); 
 Send the buffer to Discord
            
By default, we trust all certificates.
            switch (Start.Key)
エンターキーが押されたときの動作
　　　　　　　　　　　　　　　　
 2.速度に合わせて移動(moveForward,runForward,moveBackward)を定義
            }); 
 Parallel.For
            WritingCreator.ReleaseDate = DateTime.Now;  
投稿時の日付を自動記載
                
GameImageLoader.GetSpriteはAssemblyからpng読み出してCCSpriteインスタンスを作り返すメソッド
        
デフォルトのRayの位置
            
 未使用DLLはテストプロジェクトの実行領域にコピーされないためインスタンスを生成する。
    ExtensionConfiguration = new ExtensionConfiguration() 
 Diagnosticsの拡張機能とロールを紐づける// デプロイ実行 ComputeManagementClientを以下の様に利用する
var response = managementClient.Deployments.Create(CloudServiceName, deploymentSlot, parameters);

Bitmap bitmap; 
保存したいBitmapが格納済み//保存する画像の名前を決める
String imgname = "img_";
//保存先のパスとか
ContextWrapper cw = new ContextWrapper(this.ApplicationContext);
保存using (var os = new System.IO.FileStream(myfile.AbsolutePath, System.IO.FileMode.Create)){bitmap.Compress(Android.Graphics.Bitmap.CompressFormat.Png, 100, os);},,,//保存
using (var os = new System.IO.FileStream(myfile.AbsolutePath, System.IO.FileMode.Create))

        xmlns:mc="http:
schemas.openxmlformats.orgmarkup-compatibility2006"
    
 Open the Electron-Window here
            .DisableDirectStreaming()   
これはデバッグ用
// 第一引数が初期値で、第二引数は繰り返し回数になる。1ずつインクリメントされる。
Enumerable.Range(0, 100)

//メインテクスチャのコピー
Graphics.Blit(mainTexture, paintMainTexture);
//マテリアルのテクスチャをRenderTextureに変更
material.SetTexture(mainTexturePropertyID, paintMainTexture);

            
 &amp;HD:13　キャリッジリターン　&amp;HA:10  ラインフィード
            
 分
        
 マウスボタンがクリックされたらカーソルの位置からパーティクルを生成する
    NiceAsyncMethod().Wait(); 
 Waitしてもデッドロックしない！
var xslt = new XslCompiledTransform();xslt.Load(stylesheetUri); XSLTファイル の読み込み// 出力先を 文字列 として準備
var output = new StringBuilder();
// 出力フォーマット の指定
var settings = new XmlWriterSettings();
XSLT を利用した 変換処理using(var writer = XmlWriter.Create(output, settings)) {xslt.Transform(inputUri, writer);}// LaTeXの文字列はoutput.ToString()で得られるConsole.WriteLine(output.ToString());,,,// XSLT を利用した 変換処理
using(var writer = XmlWriter.Create(output, settings)) {
// LaTeXの文字列はoutput.ToString()で得られる
Console.WriteLine(output.ToString());

    
略
                
csvにデータを書き込みする
            10.0f               
どれくらいの時間//省略
,,,

    
 Use custom service provider.
        
 消滅
    
 ～～ (省略) ～～ICollectionを実装して無い為、全要素をループして件数をカウンティングする。Console.WriteLine("件数：{0}", intArray.Count());// 宣言はIEnumerable&lt;T&gt;でも実体はICollectionを実装している為、プロパティの値を返してくれる。Console.WriteLine("件数：{0}", intList.Count());,,,if (hogeArray.Count() &gt; 0) { },,,if (hogeArray.Any()) { },,,// ICollectionを実装して無い為、全要素をループして件数をカウンティングする。
Console.WriteLine("件数：{0}", intArray.Count());
宣言はIEnumerable&lt;T&gt;でも実体はICollectionを実装している為、プロパティの値を返してくれる。Console.WriteLine("件数：{0}", intList.Count());,,,if (hogeArray.Count() &gt; 0) { },,,if (hogeArray.Any()) { },,,// 宣言はIEnumerable&lt;T&gt;でも実体はICollectionを実装している為、プロパティの値を返してくれる。
Console.WriteLine("件数：{0}", intList.Count());

    
 ...
            
 発射してリセット
        
 string ではなくユーザデータを DataSource に。
        
 Altseedの終了処理をする。
    
 DBアクセス処理
    
 ・呼び出すのはStrategyのインターフェース
//percisionとscaleの値を変更してやればお望みの桁数にできる
decimaltest = c.Decimal(nullable: false, precision: 18, scale: 2)

            
 ImmediatelyRemoveObjectはバッファリングを介さず直接削除する
         Console.WriteLine(record.No+ "," + record.ReceptDate.ToString());
ちゃんと読み込めているか確認してみる
                    
 CSV形式で出力
var req = new HttpRequestMessage(HttpMethod.Post, new Uri("https:
hoge.hogehoge"));
var d2 = Math.Ceiling(-0.5); 
 0
    
 IOptions&lt;T&gt;でのインジェクション有効化
        
 出力された結果を表示
        
 確認用コード
        process.Kill(); 
 例外が発生する可能性のあるメソッド
    protected override C Apply(B b)  
 エラー: 共変戻り値不可
                
    DateTime.Now.ToString("yyyyMMdd HH:mm:ss"), call.MethodName);
            
待つ
            
 Create a writer and open the file:
        
 演算子のオーバーロード
    
1
        .UseUrls("http:
*:80")     ここを追加
            
write log
        
main
        
 以下のように`OfType`を用いても同じ結果になるので、こう書く方がベター
    
 ・Implementatorを具体的に実装する
        
 Jump
    
実行ファイル(HelloWorld.exe)を作成
            
Parse from "Newtonsoft.Json, Version=9.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed, processorArchitecture=MSIL"
        
 APIからJSONを取得して返す上記のインスタンスIObject[] objects = new IObject[] { twitterApi, instagramApi, youtubeApi };foreach (IObject obj in objects){Console.WriteLine(obj.GetObject());},,,// 上記のインスタンス
IObject[] objects = new IObject[] { twitterApi, instagramApi, youtubeApi };

        public class hogehoge : Program
継承させてProgramクラスの動作を再利用
    
 ConcreteProduct
                    
 
        
ちなみに古いAdmobのSDKだと.AdClosedとか微妙に違う
                
 C#7ではパターンマッチングと拡張メソッドでこのように書ける
            
 0001, aiueo, newName
    
 ・実際のインスタンス作成で呼び出されるメソッドを定義する
            
 ファイルマッピングに書く// 構造体の体裁を整えたデータクラスをファイルマッピングのストリームに流すためにバイト列に変換する
int size = Marshal.SizeOf(typeof(Test1));
// ファイルマッピングに書く
mmvs.Write(bytes, 0, size);

    {
プレイヤーをゲーム画面から出さないための範囲指定
  
 Set the dependency resolver to be Autofac.
        xmlns:mc="http:
schemas.openxmlformats.orgmarkup-compatibility2006"
foreach(Nabeatsu Nabe in NabeList.ToArray())        
    これで自信がない処を削除
戻り値を返すコマンドinterface Command&lt;T&gt;{T Execute();}class ConcreteCommandWithResult : Command&lt;int&gt;{private Receiver _receiver;:public int Execute(){return _receiver.GetValue();}},,,// 戻り値を返すコマンドinterface Command&lt;T&gt;{T Execute();}class ConcreteCommandWithResult : Command&lt;int&gt;{private Receiver _receiver;:public int Execute(){return _receiver.GetValue();}}// 戻り値を返さないコマンドinterface Command{void Execute();}class ConcreteCommand : Command{private Receiver _receiver;:public void Execute(){return _receiver.Action();}},,,// 戻り値を返すコマンド
interface Command&lt;T&gt;
戻り値を返すコマンドinterface Command&lt;T&gt;{T Execute();}class ConcreteCommandWithResult : Command&lt;int&gt;{private Receiver _receiver;:public int Execute(){return _receiver.GetValue();}}// 戻り値を返さないコマンドinterface Command{void Execute();}class ConcreteCommand : Command{private Receiver _receiver;:public void Execute(){return _receiver.Action();}},,,// 戻り値を返すコマンド
interface Command&lt;T&gt;
戻り値を返さないコマンドinterface Command{void Execute();}class ConcreteCommand : Command{private Receiver _receiver;:public void Execute(){return _receiver.Action();}},,,// 戻り値を返さないコマンド
interface Command

    
Int64なのでInt64用のILコードが生成されキャッシュされる。
    
HTMLの構築処理とか
    
 ユーザーリストを返すメソッド
    
 Enable request scope
            
 Pre-buffering some data to allow NAudio to start playing
変換後new List&lt;List&lt;string&gt;&gt;(){new List&lt;string&gt;() {"1a", "2a", "3a"},new List&lt;string&gt;() {"1b", "2b", "3b"},new List&lt;string&gt;() {"1c", "2c", "3c"}},,,static void Main(string[] args){var targetList = new List&lt;List&lt;string&gt;&gt;(){new List&lt;string&gt;() {"1a", "1b", "1c"},new List&lt;string&gt;() {"2a", "2b", "2c"},new List&lt;string&gt;() {"3a", "3b", "3c"}};var resultList = TransposeColumnsAndRows(targetList);}private static List&lt;List&lt;string&gt;&gt; TransposeColumnsAndRows(List&lt;List&lt;string&gt;&gt; targetList){var resultList = new List&lt;List&lt;string&gt;&gt;();foreach (var row in targetList.Select((v, i) =&gt; new { v, i })){while (resultList.Count() &lt; row.v.Count())resultList.Add(new List&lt;string&gt;());foreach (var col in row.v.Select((v, i) =&gt; new { v, i })){resultList[col.i].Add(col.v);}}return resultList;},,,new List&lt;List&lt;string&gt;&gt;(){new List&lt;string&gt;() {"1a", "2a", "3a"},new List&lt;string&gt;() {"1b", "2b", "3b"},new List&lt;string&gt;() {"1c", "2c", "3c"}},,,// 変換前new List&lt;List&lt;string&gt;&gt;(){new List&lt;string&gt;() {"1a", "1b", "1c"},new List&lt;string&gt;() {"2a", "2b", "2c", "2d"},new List&lt;string&gt;() {"3a", "3b", "3c"}},,,// 変換後new List&lt;List&lt;string&gt;&gt;(){new List&lt;string&gt;() {"1a", "2a", "3a"},new List&lt;string&gt;() {"1b", "2b", "3b"},new List&lt;string&gt;() {"1c", "2c", "3c"},new List&lt;string&gt;() {"2d"}},,,static void Main(string[] args){var targetList = new List&lt;List&lt;string&gt;&gt;(){new List&lt;string&gt;() {"1a", "1b", "1c"},new List&lt;string&gt;() {"2a", "2b", "2c", "2d"},new List&lt;string&gt;() {"3a", "3b", "3c"}};var resultList = TransposeColumnsAndRows(targetList, string.Empty);}private static List&lt;List&lt;string&gt;&gt; TransposeColumnsAndRows(List&lt;List&lt;string&gt;&gt; targetList, string pad){var resultList = new List&lt;List&lt;string&gt;&gt;();foreach (var row in targetList.Select((v, i) =&gt; new { v, i })){while (resultList.Count() &lt; row.v.Count())resultList.Add(new List&lt;string&gt;());foreach (var col in row.v.Select((v, i) =&gt; new { v, i })){while (row.i &gt; resultList[col.i].Count())resultList[col.i].Add(string.Empty);resultList[col.i].Add(col.v);}}foreach (var row in resultList){while (row.Count() &lt; targetList.Count()){row.Add(pad);}}return resultList;},,,new List&lt;List&lt;string&gt;&gt;(){new List&lt;string&gt;() {"1a", "2a", "3a"},new List&lt;string&gt;() {"1b", "2b", "3b"},new List&lt;string&gt;() {"1c", "2c", "3c"},new List&lt;string&gt;() {"", "2d", ""}},,,// 変換後
new List&lt;List&lt;string&gt;&gt;()
変換前new List&lt;List&lt;string&gt;&gt;(){new List&lt;string&gt;() {"1a", "1b", "1c"},new List&lt;string&gt;() {"2a", "2b", "2c", "2d"},new List&lt;string&gt;() {"3a", "3b", "3c"}},,,// 変換後new List&lt;List&lt;string&gt;&gt;(){new List&lt;string&gt;() {"1a", "2a", "3a"},new List&lt;string&gt;() {"1b", "2b", "3b"},new List&lt;string&gt;() {"1c", "2c", "3c"},new List&lt;string&gt;() {"2d"}},,,static void Main(string[] args){var targetList = new List&lt;List&lt;string&gt;&gt;(){new List&lt;string&gt;() {"1a", "1b", "1c"},new List&lt;string&gt;() {"2a", "2b", "2c", "2d"},new List&lt;string&gt;() {"3a", "3b", "3c"}};var resultList = TransposeColumnsAndRows(targetList, string.Empty);}private static List&lt;List&lt;string&gt;&gt; TransposeColumnsAndRows(List&lt;List&lt;string&gt;&gt; targetList, string pad){var resultList = new List&lt;List&lt;string&gt;&gt;();foreach (var row in targetList.Select((v, i) =&gt; new { v, i })){while (resultList.Count() &lt; row.v.Count())resultList.Add(new List&lt;string&gt;());foreach (var col in row.v.Select((v, i) =&gt; new { v, i })){while (row.i &gt; resultList[col.i].Count())resultList[col.i].Add(string.Empty);resultList[col.i].Add(col.v);}}foreach (var row in resultList){while (row.Count() &lt; targetList.Count()){row.Add(pad);}}return resultList;},,,new List&lt;List&lt;string&gt;&gt;(){new List&lt;string&gt;() {"1a", "2a", "3a"},new List&lt;string&gt;() {"1b", "2b", "3b"},new List&lt;string&gt;() {"1c", "2c", "3c"},new List&lt;string&gt;() {"", "2d", ""}},,,// 変換前
new List&lt;List&lt;string&gt;&gt;()
変換後new List&lt;List&lt;string&gt;&gt;(){new List&lt;string&gt;() {"1a", "2a", "3a"},new List&lt;string&gt;() {"1b", "2b", "3b"},new List&lt;string&gt;() {"1c", "2c", "3c"},new List&lt;string&gt;() {"2d"}},,,static void Main(string[] args){var targetList = new List&lt;List&lt;string&gt;&gt;(){new List&lt;string&gt;() {"1a", "1b", "1c"},new List&lt;string&gt;() {"2a", "2b", "2c", "2d"},new List&lt;string&gt;() {"3a", "3b", "3c"}};var resultList = TransposeColumnsAndRows(targetList, string.Empty);}private static List&lt;List&lt;string&gt;&gt; TransposeColumnsAndRows(List&lt;List&lt;string&gt;&gt; targetList, string pad){var resultList = new List&lt;List&lt;string&gt;&gt;();foreach (var row in targetList.Select((v, i) =&gt; new { v, i })){while (resultList.Count() &lt; row.v.Count())resultList.Add(new List&lt;string&gt;());foreach (var col in row.v.Select((v, i) =&gt; new { v, i })){while (row.i &gt; resultList[col.i].Count())resultList[col.i].Add(string.Empty);resultList[col.i].Add(col.v);}}foreach (var row in resultList){while (row.Count() &lt; targetList.Count()){row.Add(pad);}}return resultList;},,,new List&lt;List&lt;string&gt;&gt;(){new List&lt;string&gt;() {"1a", "2a", "3a"},new List&lt;string&gt;() {"1b", "2b", "3b"},new List&lt;string&gt;() {"1c", "2c", "3c"},new List&lt;string&gt;() {"", "2d", ""}},,,// 変換後
new List&lt;List&lt;string&gt;&gt;()

    var enumNames = new Dictionary&lt;string, string[]&gt;(); 
 enumの中身を入れとく
        
 標準のASP.NET設定はここ
            
 ※1より後に出力があるのは、掘り進めた深い階層の構造体を先に定義したいがため
   
五十順
                .Concat(Task.Delay(TimeSpan.FromMilliseconds(1000)).ToObservable() 
 なんとなく待つ
    var length = name.Length; 
 Warning でない
        int[] numbers = { 0b0000_0001, 0b0000_0010, 0b0000_0011, 0b0000_0100 };
int[] numbers = { 1, 2, 3, 4 };と同じ
            
deactivate view b
    
従来のJsonNodeの書き方でもOK
    
 Client
            
 解像度を1.3mに設定
        
************************
            
インスペクタ上では;区切り
// event本体：[eventName]には、event名が入ります
public event EventHandler [eventName];
// event本体：[eventName]には、event名が入ります
public event System.Windows.Forms.UICuesEventHandler ChangeUICues;
// event本体：[eventName]には、event名が入ります
public event System.Windows.Forms.ControlEventHandler [eventName];
// event本体：[eventName]には、event名が入ります
public event System.Windows.Forms.DragEventHandler [eventName];
// event本体
public event System.Windows.Forms.GiveFeedbackEventHandler GiveFeedback;
// event本体
public event System.Windows.Forms.HelpEventHandler HelpRequested;
// event本体
[System.ComponentModel.Browsable(false)]
// event本体：[eventName]には、event名が入ります
public event System.Windows.Forms.KeyEventHandler [eventName];
// event本体
public event System.Windows.Forms.KeyPressEventHandler KeyPress;
// event本体
public event System.Windows.Forms.LayoutEventHandler Layout;
// event本体：[eventName]には、event名が入ります
public event System.Windows.Forms.MouseEventHandler [eventName];
// event本体
public event System.Windows.Forms.PaintEventHandler Paint;
// event本体
public event System.Windows.Forms.PreviewKeyDownEventHandler PreviewKeyDown;
// event本体
public event System.Windows.Forms.QueryAccessibilityHelpEventHandler QueryAccessibilityHelp;
// event本体
public event System.Windows.Forms.QueryContinueDragEventHandler QueryContinueDrag;
// event本体
public event System.ComponentModel.CancelEventHandler Validating;

        
 選択されているファイルディレクトリを取得
hd.TryGetValue("buz", out buz) 
 false// Relation&lt;string, string&gt;はないのでコンパイルエラー
string hoge;
hd.TryGetValue("hoge", out hoge);,,,class AnotherRelation : Relation&lt;int, string&gt;, Relation&lt;int, int&gt; { }var hd =new HDict&lt;AnotherRelation&gt;().Add(1, "foo").Add(1, 1);// oops!string foo;hd.TryGetValue(1, out foo);,,,
            
 実行が一瞬で終わって確認できないので、キーの入力を待ちます
    
 ConcreteCreator
 
↑で使ったクラス
    
2.この辺で画像をいじる//3.ここで入れたサイズの領域が更新される。ここがないと真っ黒。
image.AddDirtyRect(new System.Windows.Int32Rect(0, 0, image.PixelWidth, image.PixelHeight));

inputField.onValueChanged.AsObservable();
初期値なし//https://google.comをHTTP GETする
ObservableWWW.Get("https:google.com")
//CharacterControllerのIsGroundedを監視
false → trueになったらログに出す
// ↑のコードは↓とほぼ同義
Observable.EveryUpdate()
// ObserveEveryValueChangedは
 EveryUpdate + Select + DistinctUntilChanged
// の省略記法と思ってよい
,,,

            
結果表示
            Console.ReadKey();              
キー入力までウィンドウが閉じないようにする
    
 テンプレートメソッドの挙動はサブクラスでの実装に依る
                    
 Fav済み発言だったらFavoritesタブに追加
//114556が出力される。
Console.WriteLine((x + y)?.ToString() ?? "NULL");
//NULLが出力される。
Console.WriteLine((x + z)?.ToString() ?? "NULL");

        
 視錘台判定はそのまま使う
inputMotor.GetSpeed = () =&gt; 0;  
 GetSpeedの動作を入れ替える
                
 Transform t = transform;               =&gt; 約 0.24 秒
        
 文字列を反転する
chart1.Dock = DockStyle.Fill; 
 特に設定していないなら不要。
    
 some code
Console.WriteLine(formattedString); 
 This is a test.
        Console.WriteLine(result.IsCompleted);  
 false
                
 UIとは別スレッドなので Dispatcher を利用する
            
 ici.lpVerb の下位ワードが、ユーザが選択したメニュー項目
particleSystem.Stop(); 
ストップ
        
最初のモーションが始まっていない場合//現在のフレームのボーンの動きを取得し、セットする
boneMng.SetPose(motMng.GetMotion());
//変換行列を計算する。
boneMng.Update();
//シェーダにセットする
effect.SetBoneMatrix(boneMng.Results);
//描画
effect.DrawAll(camera);

            .WithReferences(Assembly.GetEntryAssembly()), 
 CreviceApp.exe// 既にフックが実行されているとして
Unhook();

                b = m;                     
   現時点での最上位の桁の数は 4 である。
        
書式変更
  
 複雑な生成方法のつもり
        
 クライアント
    
 Adapter
                    right_side.subIndices.Count - 1 
 カット面。最後のサブメッシュとしてトライアングルを追加
        
投稿日時
//外部から変更不可
readonly string s;
//外部から変更可能
readonly List&lt;string&gt; str;
//Tが参照型の時、コレクション自体は変更できないが、
要素のインスタンス（Tクラス）内部を変更可能

int sum =i[0]+i[1]+i[2]; 
3要素の合計
        
 今回は省略
    
 今回は省略
        
 今回は省略
                
 何らかの処理
            
 自己紹介をお願いします
            
 If we got this far, something failed, redisplay form
  
既定文にヒットしなかったらLUISを呼ぶ
    double sigma_C = 0; 
i=0 のときは計算されない。つまりZ[0]=B[0]//あらかじめ用意しておく
List&lt;double&gt; A_press = (num * 2 - 1).Loop(i =&gt; gain.Select_ToList(a =&gt; Math.Pow(a, i)).Sum());
//A行列の場合、i+jがそのまま次数となるためそれを利用
List&lt;List&lt;double&gt;&gt; A = num.Loop(i =&gt; num.Loop(j =&gt; A_press[i + j]));
//上記で、行列AをL行列、U行列に分解
下記で、Ax=B⇒LUx=B⇒Ly=Bからyを求める
//c行列の計算
List&lt;double&gt; Z = ListUtil.CreateNewList&lt;double&gt;(num); 指定数の配列を作成する独自の拡張メソッド
//最後にy(既知)=Uxを計算しxをはじき出す

//出力行列の計算
List&lt;double&gt; res = ListUtil.CreateNewList&lt;double&gt;(num);

    
 ｎ番目の三角数を求める
            
write to output thumb
            
今回表示するマップのマップチップ配列。0:草原,1:山,2:家
    
 Key、Valueのペアを表示
            
 秘密鍵の取得と書き込み
        
 本棚をスキャンするクラス
        
 エネミーの削除
    
 Use this for initialization
    
 Update is called once per frame
 
処理
    
省略
            
 ブラウザを閉じる
ダメージ通知の関数を登録.OnDamage += (damage) =&gt; { Player.SetDamage(damage); };// 実際にダメージを与えるOnDamage.Invoke(100);// ~~~ (略) ~~~// 登録した関数を全破棄.OnDamage.Clear();,,,using System.Collections.Generic;using UnityEngine.Events;/// &lt;summary&gt;/// UnityAction拡張イベントクラス ver引数なし/// &lt;/summary&gt;public class UnityActionWrapper{/// &lt;summary&gt;/// イベント./// &lt;/summary&gt;public event UnityAction Event{add { lock (_event) _event += value; _delegates.Add(value); }remove { lock (_event) _event -= value; _delegates.Remove(value); }}private event UnityAction _event = () =&gt; { };private List&lt;UnityAction&gt; _delegates = new List&lt;UnityAction&gt;();/// &lt;summary&gt;/// Add 拡張演算子./// &lt;/summary&gt;public static UnityActionWrapper operator +(UnityActionWrapper self, UnityAction del){lock (self._event){self._event += del;self._delegates.Add(del);}return self;}/// &lt;summary&gt;/// Remove 拡張演算子./// &lt;/summary&gt;public static UnityActionWrapper operator -(UnityActionWrapper self, UnityAction del){lock (self._event){self._event -= del;self._delegates.Remove(del);}return self;}/// &lt;summary&gt;/// 登録されているメソッドを実行します./// &lt;/summary&gt;public void Invoke(){if (_event != null) _event.Invoke();}/// &lt;summary&gt;/// 登録されているメソッドを全てremoveします./// &lt;/summary&gt;public void Clear(){foreach (var del in _delegates){_event -= del;}_delegates.Clear();}}/// &lt;summary&gt;/// UnityAction拡張イベントクラス ver引数1/// &lt;/summary&gt;public class UnityActionWrapper&lt;T0&gt;{/// &lt;summary&gt;/// イベント./// &lt;/summary&gt;public event UnityAction&lt;T0&gt; Event{add { lock (_event) _event += value; _delegates.Add(value); }remove { lock (_event) _event -= value; _delegates.Remove(value); }}private event UnityAction&lt;T0&gt; _event = arg0 =&gt; { };private List&lt;UnityAction&lt;T0&gt;&gt; _delegates = new List&lt;UnityAction&lt;T0&gt;&gt;();/// &lt;summary&gt;/// Add 拡張演算子./// &lt;/summary&gt;public static UnityActionWrapper&lt;T0&gt; operator +(UnityActionWrapper&lt;T0&gt; self, UnityAction&lt;T0&gt; del){lock (self._event){self._event += del;self._delegates.Add(del);}return self;}/// &lt;summary&gt;/// Remove 拡張演算子./// &lt;/summary&gt;public static UnityActionWrapper&lt;T0&gt; operator -(UnityActionWrapper&lt;T0&gt; self, UnityAction&lt;T0&gt; del){lock (self._event){self._event -= del;self._delegates.Remove(del);}return self;}/// &lt;summary&gt;/// 登録されているメソッドを実行します./// &lt;/summary&gt;public void Invoke(T0 arg){if (_event != null) _event.Invoke(arg);}/// &lt;summary&gt;/// 登録されているメソッドを全てremoveします./// &lt;/summary&gt;public void Clear(){foreach (var del in _delegates){_event -= del;}_delegates.Clear();}}/// &lt;summary&gt;/// UnityAction拡張イベントクラス ver引数2/// &lt;/summary&gt;public class UnityActionWrapper&lt;T0, T1&gt;{/// &lt;summary&gt;/// イベント./// &lt;/summary&gt;public event UnityAction&lt;T0, T1&gt; Event{add { lock (_event) _event += value; _delegates.Add(value); }remove { lock (_event) _event -= value; _delegates.Remove(value); }}private event UnityAction&lt;T0, T1&gt; _event = (arg0, arg1) =&gt; { };private List&lt;UnityAction&lt;T0, T1&gt;&gt; _delegates = new List&lt;UnityAction&lt;T0, T1&gt;&gt;();/// &lt;summary&gt;/// Add 拡張演算子./// &lt;/summary&gt;public static UnityActionWrapper&lt;T0, T1&gt; operator +(UnityActionWrapper&lt;T0, T1&gt; self, UnityAction&lt;T0, T1&gt; del){lock (self._event){self._event += del;self._delegates.Add(del);}return self;}/// &lt;summary&gt;/// Remove 拡張演算子./// &lt;/summary&gt;public static UnityActionWrapper&lt;T0, T1&gt; operator -(UnityActionWrapper&lt;T0, T1&gt; self, UnityAction&lt;T0, T1&gt; del){lock (self._event){self._event -= del;self._delegates.Remove(del);}return self;}/// &lt;summary&gt;/// 登録されているメソッドを実行します./// &lt;/summary&gt;public void Invoke(T0 arg0, T1 arg1){if (_event != null) _event.Invoke(arg0, arg1);}/// &lt;summary&gt;/// 登録されているメソッドを全てremoveします./// &lt;/summary&gt;public void Clear(){foreach (var del in _delegates){_event -= del;}_delegates.Clear();}}/// &lt;summary&gt;/// UnityAction拡張イベントクラス ver引数3/// &lt;/summary&gt;public class UnityActionWrapper&lt;T0, T1, T2&gt;{/// &lt;summary&gt;/// イベント./// &lt;/summary&gt;public event UnityAction&lt;T0, T1, T2&gt; Event{add { lock (_event) _event += value; _delegates.Add(value); }remove { lock (_event) _event -= value; _delegates.Remove(value); }}private event UnityAction&lt;T0, T1, T2&gt; _event = (arg0, arg1, arg2) =&gt; { };private List&lt;UnityAction&lt;T0, T1, T2&gt;&gt; _delegates = new List&lt;UnityAction&lt;T0, T1, T2&gt;&gt;();/// &lt;summary&gt;/// Add 拡張演算子./// &lt;/summary&gt;public static UnityActionWrapper&lt;T0, T1, T2&gt; operator +(UnityActionWrapper&lt;T0, T1, T2&gt; self, UnityAction&lt;T0, T1, T2&gt; del){lock (self._event){self._event += del;self._delegates.Add(del);}return self;}/// &lt;summary&gt;/// Remove 拡張演算子./// &lt;/summary&gt;public static UnityActionWrapper&lt;T0, T1, T2&gt; operator -(UnityActionWrapper&lt;T0, T1, T2&gt; self, UnityAction&lt;T0, T1, T2&gt; del){lock (self._event){self._event -= del;self._delegates.Remove(del);}return self;}/// &lt;summary&gt;/// 登録されているメソッドを実行します./// &lt;/summary&gt;public void Invoke(T0 arg0, T1 arg1, T2 arg2){if (_event != null) _event.Invoke(arg0, arg1, arg2);}/// &lt;summary&gt;/// 登録されているメソッドを全てremoveします./// &lt;/summary&gt;public void Clear(){foreach (var del in _delegates){_event -= del;}_delegates.Clear();}},,,// ダメージ通知の関数を登録.
OnDamage += (damage) =&gt; { Player.SetDamage(damage); };
// 実際にダメージを与える
OnDamage.Invoke(100);
// ~~~ (略) ~~~

// 登録した関数を全破棄.
OnDamage.Clear();

        
順番に出力
            
描画処理
        br.ReadSingle(); 
バージョン(読み飛ばし)
        
 draw health bar
// "0"をセット
dataGridView1[0, 0].Value = 0.ToString();
// "0"をセット
dataGridView1.Rows[0].Cells[0].Value = 0.ToString();
// 空白行を追加
dataGridView1.Rows.Add();
セル内容を指定して行を追加dataGridView1.Rows.Add(new string[] { "1", "Good Product" });,,,// セル内容を指定して行を追加
dataGridView1.Rows.Add(new string[] { "1", "Good Product" });

            
初期値128ビットを256ビットに変更
    
await Task.Run(() =&gt; Invoke((MethodInvoker)(() =&gt; 10000.Loop(i =&gt; textBox1.Text = i.ToString()))));//10000.Loopは1万回ループしていると思ってください
,,,

    
 Update is called once per frame
        
 移動する向きとスピードを代入する
                
 本当は await AsyncV();としたかった
    .ToDictionary(o =&gt; o["AccountNumber"].ToString(), o =&gt; o); 
 AccountNumberをキー、DataRowViewを値とするDictionaryに変換
                
 ラベルがitemのもののindexを正解ラベルからとってくる
    Debug.WriteLine(a); 
 買い物 掃除 洗濯
dog4.Naku2();   
 わん わん
        private int _interval = 1 * 1000;   
呼び出し間隔（ミリ秒）
    
 全てのタスクが終了するまで待機
 
処理
    
 animators.parameters[i].nameとほぼ同じ
                
 検査結果()
            
Azure Storageにデータを入れる
var sum = evens.Sum(); 
二つ目のループ・・・のようには別れません
    
ホットキー登録・解除用フォームを表示すると、ウィンドウメッセージの監視が開始される
        
 アプリケーションの設定方法の詳細については、http:go.microsoft.comfwlink?LinkID=316888 を参照してください
                
 新しいUVを割り当て
    
状態を確認するメソッド
        driver.Navigate().GoToUrl("http:
webya.in");
    
 効率は良くないが、これでも十分な速度がでたので、良しとする。
            
 否定
    
 mainArg: configapp.conf
            .FirstOrDefault()
最初の一回だけでそのあとは捨てる（というか破棄される）
        
 メッセージボックスで表示する
        
 メッセージボックスで表示する
if (dict.TryGetValue("none", out var value)) 
YES! var
// テストの同時実行で利用するスレッド数の最大値
[assembly: CollectionBehavior(MaxParallelThreads = n)]
// このアセンブリ内のテストを並列で処理する
 デフォルト : false

    
 テストをいつも通り書く
                
 30m+2, 30m+3, 30m+4, 30m+5, 30m+6、30m+8、30m+9、30m+12... は割る必要はない。
                
 バッテリーや電源に関する通知があった
// AppDbContextはDbContextを継承して作ったクラスで、
 Code Firstの形式で定義したクラス
// AppDbContextはDbContextを継承して作ったクラスで、
 Code Firstの形式で定義したクラス

using System.Drawing; 
 for PointF
Encoding.GetEncoding("Shift-JIS")); 
文字コードを設定してCSVファイルの読み込み
              new PointF(600, 6), 
 X,Y 
                

        
 他の関数に対しても出力している場合にはまだ勾配を計算しない
　　　　
キャラクターにその感情にあった表情をさせる
checkBox.FontSiZe = 50; 
 これが反映されない***データクラス***public class ListData{public string Name {get; set;}},,,// ***UserControl内XAML***&lt;DataGrid Name="MainDataGrid"&gt;&lt;DataGrid.Columns&gt;&lt;DataGridTextColumn Binding="{Binding Path=Name}"/&gt;&lt;/DataGrid.Columns&gt;&lt;/DataGrid&gt;,,,// ***UserControl内コードビハインド***// 外部からDataGridにバインドするデータを受け取る用public static readonly DependencyProperty ListDataProperty = DependencyProperty.Register("ListData",typeof(ObservableCollection&lt;ListData&gt;),typeof(HogeUserControl ),new FrameworkPropertyMetadata(null));public ObservableCollection&lt;ZeroCheckListBoxViewData.ListData&gt; ListData{get { return (ObservableCollection&lt;ListData&gt;)base.GetValue(ListDataProperty); }set { base.SetValue(ListDataProperty, value); }}// ロードイベントなりなんなり好きなところでmainDataGrid.ItemsSource = this.ListData;,,,&lt;c:HogeUserControl ListData="{Binding Path=DataList}"/&gt;// DataListは「ObservableCollection&lt;ListData&gt; DataList」こんな感じで宣言,,,// ***データクラス***
public class ListData
// ***UserControl内XAML***
&lt;DataGrid Name="MainDataGrid"&gt;
// ***UserControl内コードビハインド***
 外部からDataGridにバインドするデータを受け取る用
// ロードイベントなりなんなり好きなところで
mainDataGrid.ItemsSource = this.ListData;
// DataListは「ObservableCollection&lt;ListData&gt; DataList」こんな感じで宣言
,,,

    
 method.Invoke("Hoge", args);
Error !!,,,namespace System.Diagnostics {public static class Debug {[ConditionalAttribute("DEBUG")]public static void Assert(bool condition);}},,,
        base.Start();
スーパークラス参照
            
requestInfo.Bodyにバイナリデータが入っている
        
適宜telemetryClient.TrackTrace()やtelemetryClient.TrackMetric()などを呼び出してもよい。
    
 インデント付き整形表示
using System.Text.RegularExpressions; 
 for Regex
                
 応答が「成功」か確認
    
次の２行を追加する
    string diffs = diffs.Patch; 
 追加行、削除行などの差分情報// オプション変数
LibGit2Sharp.CloneOptions options = new LibGit2Sharp.CloneOptions();
// オプション：チェックアウトするブランチ名。簡略名(FriendlyName)でもOK
options.BranchName = branch;
// オプション：進行状況のコールバック指定
options.OnCheckoutProgress = (p,n,t)=&gt;checkout_progress_handler(p,n,t);
// オプション：開始時のコールバックを指定
options.RepositoryOperationStarting = (c)=&gt;operation_start_handler(c);
// 入出力のパスとオプションを指定してクローンを実行します。
 string remote_path：クローンするリモートリポジトリのパス
// string local_path：クローンを作成するパス
 CloneOptions options

カラム2の直接編集ちっくモードに入るときに、ItemのCheckが入らないようにするprivate void listView1_ItemCheck(object sender, ItemCheckEventArgs e) {Point pnt = listView1.PointToClient(Cursor.Position);ListViewItem item = listView1.Items[e.Index];ListViewItem.ListViewSubItem stem = item.GetSubItemAt(pnt.X, pnt.Y);if(stem != null &amp;&amp; stem.Bounds.Contains(pnt))if(item.SubItems.IndexOf(stem) == 1)e.NewValue = e.CurrentValue;}private void listView1_MouseDoubleClick(object sender, MouseEventArgs e) {CurrentRow = null;CurrentColumn = null;Point pnt = listView1.PointToClient(Cursor.Position);ListViewItem item = listView1.HitTest(pnt).Item;if(item != null &amp;&amp; item.Bounds.Contains(pnt))CurrentRow = item;elsereturn;ListViewItem.ListViewSubItem stem = CurrentRow.GetSubItemAt(pnt.X, pnt.Y);if(stem != null &amp;&amp; stem.Bounds.Contains(pnt))CurrentColumn = stem;elsereturn;if(CurrentColumnIndex != 1)return;Rectangle rect = CurrentColumn.Bounds;rect.Intersect(listView1.ClientRectangle);rect.Y -= 1;textBox1.Bounds = rect;textBox1.Text = CurrentColumn.Text;textBox1.Visible = true;textBox1.BringToFront();textBox1.Focus();}private void listView1_Resize(object sender, EventArgs e) {listView1.Focus();}private void textBox1_Leave(object sender, EventArgs e) {CurrentColumn.Text = textBox1.Text;textBox1.Visible = false;}private void textBox1_KeyPress(object sender, KeyPressEventArgs e) {switch(e.KeyChar) {case (char)Keys.Enter:listView1.Focus();e.Handled = true;break;case (char)Keys.Escape:textBox1.Text = CurrentColumn.Text;listView1.Focus();e.Handled = true;break;}}ListViewItem CurrentRow;ListViewItem.ListViewSubItem CurrentColumn;int CurrentRowIndex { get { return (CurrentRow == null) ? -1 : CurrentRow.Index; } }int CurrentColumnIndex { get { return (CurrentColumn == null) ? -1 : CurrentRow.SubItems.IndexOf(CurrentColumn); } },,,//    カラム2の直接編集ちっくモードに入るときに、ItemのCheckが入らないようにする
private void listView1_ItemCheck(object sender, ItemCheckEventArgs e) {

    
 data 2
        
フェードアウト
            pageResult.Html.SelectNodes("
td[contains(text(),'location')]following-sibling::td").First().InnerText;
            ball_rb.AddForce(sliderDirection * changePower);
ボールに力を加える
                
 相対値が変更した場合、カメラに相対値を反映させる
    Console.WriteLine($"Name={p.Name}, Age={p.Age}"); 
 Name=Mike, Age=43
            
aaabbbccc
        
アップデートの中で呼ぶと危険
            
.Build();
Digit(12345);    
 =&gt; 5
            
ここで既定の「wwwroot」を指定したフォルダーに変更できる
                        
なにかする
        
終了時間
    HttpWebRequest req = (HttpWebRequest)WebRequest.Create("http:
example.comapihoge");
        xmlns:mc="http:
schemas.openxmlformats.orgmarkup-compatibility2006"
// InvalidCastExceptionが発生する
var fuga = hoge.Cast&lt;double&gt;();
// 結果は空（すなわちキャスト出来ていない）
var piyo = hoge.OfType&lt;double&gt;();
// 要素に対する等価式（当然例外になる）
var element = (double)((object)1);

            AudioBuffer.Instance.Enqueue(_audioRecord); 
 最初に空読みさせないと、リスナーのイベントが発生しないらしい// または
public virtual void SetRecordPositionUpdateListener(IOnRecordPositionUpdateListener listener, Handler handler);
// １つめ
public event EventHandler&lt;MarkerReachedEventArgs&gt; MarkerReached;
public event EventHandler&lt;PeriodicNotificationEventArgs&gt; PeriodicNotification;,,, ２つめ
            viewModel.Model2.Model1 = model1_2; 
 10, 20, 30...// ↑SelectMany(m1 =&gt; m1.ToReactivePropertyAsSynchronized(x =&gt; x.Number))と同じ結果
,,,

// ビルド対象シーンのパスの配列
string[] scenes = EditorBuildSettings
// 先のビルド対象シーンのパスの配列を引数にとるBuildPipeline.BuildPlayerメソッド
string errorMessage = BuildPipeline.BuildPlayer(
// ビルド対象シーンの配列
EditorBuildSettingsScene[] scenes = EditorBuildSettings
// 先のビルド対象シーンの配列を引数にとるBuildPipeline.BuildPlayerメソッド
string errorMessage = BuildPipeline.BuildPlayer(

            
 メソッドの Author
        
質問項目と回答
             
left
        var obj = new DerivedClass(); 
 子クラスをインスタンス化
dbContext.SaveChanges(); 
 エラーは出ないがDBに反映されない・・・
    
 ここが認証後のリダイレクト先ルート
//[Key] //これだけだとエラーが出る
[Key, DatabaseGenerated(DatabaseGeneratedOption.None)]

            
await Conversation.SendAsync(activity, () =&gt; new EchoCountDialog());
        
 それ以外の場合は3行（プロパティの数）＋マージン// 折りたたみ状態かどうかを保持するプロパティ
bool m_Unfoled = false;
// 中略

// 該当プロパティが閉じている状態かを取得
m_Unfoled = EditorGUI.Foldout(rect, m_Unfoled, label);
// 以下、閉じていた場合と開いている場合で処理を分岐

// GetPropertyHeightメソッド内で、展開の状態に応じて高さの値を変えることで、
 双方の状態を適切な高さで表現することができる

        
 check for errors
//XDocumentでXPath用の拡張メソッドを使うのに必要
using System.Xml.XPath;
//XML文字列からXDocumentオブジェクトを生成
var doc = XDocument.Load(new StringReader(xmlString));
//名前空間のための処理
string nameSpace = "http:example.com";
//名前空間を指定して検索
var nodeD = doc.XPathSelectElement("ns:nodeA/ns:nodeB/ns:nodeC/ns:nodeD", nsmgr);
//XML文字列からXDocumentオブジェクトを生成
var doc = XDocument.Load(new StringReader(xmlString));
foreach(var e in doc.Descendants())　e.Name = e.Name.LocalName;各ノードのNameを名前空間なしの要素名にする//上記処理により、検索時に名前空間の指定が不要
var nodeD = doc.XPathSelectElement("nodeA/nodeB/nodeC/nodeD");

            ClockSkew = TimeSpan.Zero 
 ←これがポイント
                
bar:A1
                
20が戻ってくる｡
               .SetSubtitle(new Subtitle { Text = "Source: &lt;a href=\"http:
WorldClimate.com\"&gt;WorldClimate.com&lt;a&gt;", UseHTML = true })
     
}
                
 引数を入替えて自分を呼び出す
    
 以下、ステート関数
            wRange = String.Format("{0}!A{1}:B{1}", sheetName, rowNumber);  
行を追加
さらに短くするとこう書ける// ローカルで宣言した変数を使うとその名前と値がそのまま利用される// int index = anyList.Select((Name, Index) =&gt; new { Name, Index });,,,var person = new { Name = "edo", Age = 20 };Console.WriteLine(person.Name);,,,// さらに短くするとこう書ける
 ローカルで宣言した変数を使うとその名前と値がそのまま利用される
int index = anyList.Select((Name, Index) =&gt; new { Name, Index });,,,var person = new { Name = "edo", Age = 20 };Console.WriteLine(person.Name);,,,
    
変更前後の値を渡す為のEventArgs
        
 更新された値を適用する
    
 Update is called once per frame
            app.MapSignalR(); 
 ← この行を追加
enumからシーン名を取得するために必要private Dictionary&lt;SceneID, string&gt; m_sceneNameDictionary = new Dictionary&lt;SceneID, string&gt; {{SceneID.Game, "Game"},{SceneID.Title, "Title"}};// これを呼んでシーン遷移を行うpublic void LoadSceneEX(SceneID sceneID) {SceneManager.LoadScene(m_sceneNameDictionary[sceneID]);)}// 文字列を渡すとそもそも型が違うのでエラー// SceneIDで定義している値しか受け付けないSceneManager.LoadScene(SceneID.Title);,,,// BuildSettingsに登録した全てのシーン名文字列が格納された配列が取得できるvar sceneNames = UnityEditor.EditorBuildSettings.scenes.Select (scene =&gt; Path.GetFileNameWithoutExtension (scene.path)).Distinct ()Add a comment to this line.ToArray();,,,AC.SceneTransition.Instance.LoadScene (AC.SceneTransition.SceneID."シーン名");,,,// enumからシーン名を取得するために必要
private Dictionary&lt;SceneID, string&gt; m_sceneNameDictionary = new Dictionary&lt;SceneID, string&gt; {
これを呼んでシーン遷移を行うpublic void LoadSceneEX(SceneID sceneID) {SceneManager.LoadScene(m_sceneNameDictionary[sceneID]);)}// 文字列を渡すとそもそも型が違うのでエラー// SceneIDで定義している値しか受け付けないSceneManager.LoadScene(SceneID.Title);,,,// BuildSettingsに登録した全てのシーン名文字列が格納された配列が取得できるvar sceneNames = UnityEditor.EditorBuildSettings.scenes.Select (scene =&gt; Path.GetFileNameWithoutExtension (scene.path)).Distinct ()Add a comment to this line.ToArray();,,,AC.SceneTransition.Instance.LoadScene (AC.SceneTransition.SceneID."シーン名");,,,// これを呼んでシーン遷移を行う
public void LoadSceneEX(SceneID sceneID) {
// 文字列を渡すとそもそも型が違うのでエラー
 SceneIDで定義している値しか受け付けない
// BuildSettingsに登録した全てのシーン名文字列が格納された配列が取得できる
var sceneNames = UnityEditor.EditorBuildSettings.scenes

        
 進捗通知を受けたらラベルに表示
    
 finally 文
            
操作結果は反映される
                
 返答の文章を作成
            
メニューアイテム:使用予定チューナー
                    .OrderBy(info =&gt; info.tunerID).ToList();
多分大丈夫だけど一応ソートしておく
             
 引数を入替えて自分を呼び出す
    global::X.XClass.Greeting(); 
 X.XClass: Greeting()
            string result = String.Join("", uniq_str); 
 文字列に再変換
        
 以下省略
            
プラグイン読み込み
    label1.Text = ret.ToString(); 
 UIスレッド
    
コンテキストメニューのClickイベントハンドラ
    
 ライトの向きを端末の傾き＋元の設定のオフセットで変更
        
 ルートノードと同じフォルダに対する操作に対しては、そのフォルダ配下の情報は返さないようにする。
            
出力なし
      
プラグイン読み込み
        
同じ属性が複数含まれていても、最初のみ返す
            
 無限に求める オーバーフローは無視
},,,string json = @"{'Name': 'Bad Boys','ReleaseDate': '1995-4-7T00:00:00','Genres': ['Action','Comedy']}";Movie m = JsonConvert.DeserializeObject&lt;Movie&gt;(json);string name = m.Name;// Bad Boys,,,
        
 contextからソースコードの情報を取り出して、任意の分析処理を実行する。
Console.Write($"Hello, {value}") 
 "Hello, .NET Core"
         
 XML Document Comment を読込む
    
「エラー  CS0165  未割り当てのローカル変数 'x' が使用されました。」Parse成功なら範囲チェック、失敗ならデフォルト値をセットprivate static void validate(ref int x, bool parseResult){int min = 1, max = 1000, defaultVal = 100;x = !parseResult ? defaultVal: x &lt; min ? min: max &lt; x ? max: x;}//逆順だと通るprivate static void validate(bool parseResult, ref int x){validate(ref x, parseResult);},,,//Parse成功なら範囲チェック、失敗ならデフォルト値をセット
private static void validate(ref int x, bool parseResult)
逆順だと通るprivate static void validate(bool parseResult, ref int x){validate(ref x, parseResult);},,,//逆順だと通る
private static void validate(bool parseResult, ref int x)

        
 Time.time &gt; 1.5f の場合に１回だけHoge()を実行
    
 signatureGoogle によって提供される JSON パラメーターの署名
        
省略
    
 何かしらの処理
        
 DELETE apiv1person{id}DELETE api/v1/person/{id}[HttpDelete("{id}")]public void Delete(string id) =&gt; People.Remove(id);,,,// GET api/v1/person/{id}[HttpGet("{id}", Name="GetPerson")]public IActionResult Get(string id){...},,,[HttpGet]public IEnumerable&lt;Person&gt; Get() =&gt; People.GetAll();,,,[HttpDelete("{id}")]public void Delete(string id) =&gt; People.Remove(id);,,,[HttpPut("{id}")]public IActionResult Put(string id, [FromBody]Person person){if (person == null || person.Id != id)return BadRequest();if (People.Find(id) == null)return NotFound();People.Update(person);return new NoContentResult();},,,GET api/v1/person/{id}[HttpGet("{id}", Name="GetPerson")]public IActionResult Get(string id){...},,,[HttpGet]public IEnumerable&lt;Person&gt; Get() =&gt; People.GetAll();,,,[HttpDelete("{id}")]public void Delete(string id) =&gt; People.Remove(id);,,,[HttpPut("{id}")]public IActionResult Put(string id, [FromBody]Person person){if (person == null || person.Id != id)return BadRequest();if (People.Find(id) == null)return NotFound();People.Update(person);return new NoContentResult();},,,
    
 下限、上限が指定できるbool型配列
       
 今回は使用しない
    
 POST: apigreeting
WebSocketの接続が確立されたときのイベントハンドラsocket.OnOpen += (sender, e) =&gt; {[このときに実行したい処理を記述する]};// WebSocketからメッセージが送信されたときのイベントハンドラsocket.OnMessage += {[このときに実行したい処理を記述する]};// WebSocketとの接続にエラーが発生したときのイベントハンドラsocket.OnError += (sender, e) =&gt; {[このときに実行したい処理を記述する]};// WebSocketとの接続が終了したときのイベントハンドラsocket.OnClose += (sender, e) =&gt; {[このときに実行したい処理を記述する]};,,,socket.Connect();,,,// WebSocketの接続が確立されたときのイベントハンドラ
socket.OnOpen += (sender, e) =&gt; {[このときに実行したい処理を記述する]};
WebSocketからメッセージが送信されたときのイベントハンドラsocket.OnMessage += {[このときに実行したい処理を記述する]};// WebSocketとの接続にエラーが発生したときのイベントハンドラsocket.OnError += (sender, e) =&gt; {[このときに実行したい処理を記述する]};// WebSocketとの接続が終了したときのイベントハンドラsocket.OnClose += (sender, e) =&gt; {[このときに実行したい処理を記述する]};,,,socket.Connect();,,,// WebSocketからメッセージが送信されたときのイベントハンドラ
socket.OnMessage += {[このときに実行したい処理を記述する]};
WebSocketとの接続にエラーが発生したときのイベントハンドラsocket.OnError += (sender, e) =&gt; {[このときに実行したい処理を記述する]};// WebSocketとの接続が終了したときのイベントハンドラsocket.OnClose += (sender, e) =&gt; {[このときに実行したい処理を記述する]};,,,socket.Connect();,,,// WebSocketとの接続にエラーが発生したときのイベントハンドラ
socket.OnError += (sender, e) =&gt; {[このときに実行したい処理を記述する]};
WebSocketとの接続が終了したときのイベントハンドラsocket.OnClose += (sender, e) =&gt; {[このときに実行したい処理を記述する]};,,,socket.Connect();,,,// WebSocketとの接続が終了したときのイベントハンドラ
socket.OnClose += (sender, e) =&gt; {[このときに実行したい処理を記述する]};

            
再生モード変更に応じてボタンの表示を切り替え
    
 その他 .AddMvc() など...
            
   private string[] m_mediaUri = new string[50];
            
 静的ファイルを扱えるようにする
            
$"OID:{info.AlgorithmID.Algorithm.Id}".Dump();
                   SceneView.RepaintAll(); 
 シーンビュー更新
    static readonly string BASE_URL = "http:
vccw.dev";
            int count2 = query2.Count();  
7件中の2件抽出
        if (!goal &amp;&amp; next[x] &gt;= 0) { 
 分かれ道を進む
    
 500より大きい最初の素数を取得
            hogeMethod_ ();    
 ネイティブコード上のメソッドを呼び出す
　　　　　　 
追加分
            
 person 要素を返す
            BasePath = "https:
xamarin-chat-sample.firebaseio.com"
    client_secret = appSecret, 
FacebookアプリのSecret//取得したアプリアクセストークンを使うようにFacebookClientに設定
fb.AccessToken = result.access_token;
次にアプリに属すテストユーザーのデータを読み出すdynamic testUsers = fb.Get($"/{appId}/accounts/test-users");//最後に、テストユーザーのID(例えば"123455555")を元に、ユーザーアクセストークンを取り出すvar userToken = ((IEnumerable&lt;dynamic&gt;)testUsers.data).FirstOrDefault(_ =&gt; _.id == "123455555").access_token;// 後は、ユーザーアクセストークンを元に投稿するなどするfb.AccessToken = userToken;fb.Post("/me/feed", new { message = "hello from unit test" });,,,//次にアプリに属すテストユーザーのデータを読み出す
dynamic testUsers = fb.Get($"/{appId}/accounts/test-users");
//最後に、テストユーザーのID(例えば"123455555")を元に、ユーザーアクセストークンを取り出す
var userToken = ((IEnumerable&lt;dynamic&gt;)testUsers.data).FirstOrDefault(_ =&gt; _.id == "123455555").access_token;
後は、ユーザーアクセストークンを元に投稿するなどするfb.AccessToken = userToken;fb.Post("/me/feed", new { message = "hello from unit test" });,,,// 後は、ユーザーアクセストークンを元に投稿するなどする
fb.AccessToken = userToken;

                
編集中の書式
        
 Using a DependencyProperty as the backing store for Content.  This enables animation, styling, binding, etc...
    
CuiHelperComboBoxData[]の生成
ループ内でカンマ追記判定string[] data = {"A","B","C"};string csv = "";for(int i=0; i&lt;data.Length; i++){if(i!=0) csv += ",";csv += data[i];}Console.Write(csv);//A,B,C,,,//ループ後にカンマ削除string[] data = {"A","B","C"};string csv = "";for(int i=0; i&lt;data.Length; i++){csv += data[i] + ",";}csv = csv.Substring(0, csv.Length-1);//csv = csv.TrimEnd(','); //C#ならTrimEndでもいいConsole.Write(csv);//A,B,C,,,//ループ中にカンマ文字列定義string[] data = {"A","B","C"};string csv = "";string delimiter = "";for(int i=0; i&lt;data.Length; i++){csv += delimiter + data[i];delimiter = ",";}Console.Write(csv);//A,B,C,,,//先に先頭の値をセットstring[] data = {"A","B","C"};string csv = data[0];for(int i=1; i&lt;data.Length; i++){csv += "," + data[i];}Console.Write(csv);//A,B,C,,,//String.Joinメソッドstring[] data = {"A","B","C"};string csv = String.Join(",",data);Console.Write(csv);//A,B,C,,,//ループ内でカンマ追記判定
string[] data = {"A","B","C"};
ループ後にカンマ削除string[] data = {"A","B","C"};string csv = "";for(int i=0; i&lt;data.Length; i++){csv += data[i] + ",";}csv = csv.Substring(0, csv.Length-1);//csv = csv.TrimEnd(','); //C#ならTrimEndでもいいConsole.Write(csv);//A,B,C,,,//ループ中にカンマ文字列定義string[] data = {"A","B","C"};string csv = "";string delimiter = "";for(int i=0; i&lt;data.Length; i++){csv += delimiter + data[i];delimiter = ",";}Console.Write(csv);//A,B,C,,,//先に先頭の値をセットstring[] data = {"A","B","C"};string csv = data[0];for(int i=1; i&lt;data.Length; i++){csv += "," + data[i];}Console.Write(csv);//A,B,C,,,//String.Joinメソッドstring[] data = {"A","B","C"};string csv = String.Join(",",data);Console.Write(csv);//A,B,C,,,//ループ後にカンマ削除
string[] data = {"A","B","C"};
//csv = csv.TrimEnd(','); //C#ならTrimEndでもいい
Console.Write(csv);
ループ中にカンマ文字列定義string[] data = {"A","B","C"};string csv = "";string delimiter = "";for(int i=0; i&lt;data.Length; i++){csv += delimiter + data[i];delimiter = ",";}Console.Write(csv);//A,B,C,,,//先に先頭の値をセットstring[] data = {"A","B","C"};string csv = data[0];for(int i=1; i&lt;data.Length; i++){csv += "," + data[i];}Console.Write(csv);//A,B,C,,,//String.Joinメソッドstring[] data = {"A","B","C"};string csv = String.Join(",",data);Console.Write(csv);//A,B,C,,,//ループ中にカンマ文字列定義
string[] data = {"A","B","C"};
先に先頭の値をセットstring[] data = {"A","B","C"};string csv = data[0];for(int i=1; i&lt;data.Length; i++){csv += "," + data[i];}Console.Write(csv);//A,B,C,,,//String.Joinメソッドstring[] data = {"A","B","C"};string csv = String.Join(",",data);Console.Write(csv);//A,B,C,,,//先に先頭の値をセット
string[] data = {"A","B","C"};
String.Joinメソッドstring[] data = {"A","B","C"};string csv = String.Join(",",data);Console.Write(csv);//A,B,C,,,//String.Joinメソッド
string[] data = {"A","B","C"};

            
 yield を用いた処理は別関数にする。
    
 以下Mat処理
        
 なにか重たい処理...
        
作成したbannerの名前を引数に渡します。
        
 _appsettingsFixture.Configuration
            
 config書き込み
    
ref: http:stackoverflow.coma24908880
            
 html テンプレート
             yield return i;  
 ここで列挙してしまう
bool b3 = obj is Oneisan; 
 False// ※ NyanchuとOneisanに継承関係がない場合


        
 テストケースが続く．．．．．．．
    
 重みの更新
        
削除
    public double GetBmi() { 
 2. メソッド
  
 ページイメージをファイルに保存する
        
 匿名型のオブジェクトを受け取り、辞書に変換する
            {
 ここに行く
          
プレイヤーの子の数と自分の子の数が同じ場合の処理
public ActionResult ExecProcessCompleted(AsyncTestModel key) 
 AsyncManager.Parametersに指定したkey名で引数を受とる。
            
 ダンプする.
    HttpResponseMessage aResponse = await httpClient.PostAsync("http:
flashairupload.cgi", fileContent);//呼び出し例
var str = await uploadStringToFile("任意の文字列");

    
 new Thread(() =&gt;
        
 bitシフトを用いて、2の冪乗を求める。
    
 終了日
        
 コンストラクタの定義
            
 Web API ルート
        
 コドン表に従ってアミノ酸に変換し、出力します。
            
 CSSファイル
        
奇数を大きい順に
// myselfはAboutMeResultのインスタンス。myself.last_name みたいにアクセス出来るし、インテリセンスも効く
,,,

        
 Editorを強制終了
        
 This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            
 指定された ID の Person を JSON に変換して返す
            
 HttpCode:200を返して何事もなかったようにする
    
 4個も引数があれば足りるでしょ。
        
 Using a DependencyProperty as the backing store for TextProperty.  This enables animation, styling, binding, etc...
Debug.Log(x); 
コンソールに1を出力//コンソールに"Check is true"を出力
,,,

            Buffer.Memcpy((byte*)dmem, (byte*)smem, charCount * 2); 
 2 used everywhere instead of sizeof(char)//中略
copyToのコピー実態

        
 POST: BooksDelete5
                        ap.showImage(file.Path); 
 画像表示
            
 .NET Tips
 Spawners[waveNumber]();  
 result: Wave1
            
 The root page of your applicationこれ以降でイベントの定義button1.Clicked += delegate{label1.TextColor = Color.Aqua;content.DisplayAlert("これはタイトルです", "これは表示するメッセージです", "はい");};MainPage = new NavigationPage(content);/* 略 */,,,// これ以降でイベントの定義
button1.Clicked += delegate

        
 設定保存
            
 Handle when your app resumes
    csv.Configuration.HasHeaderRecord = false; 
 Headerはなし
        
 強制的にアイテムソースのリストを更新させるよう対応してください
            var targetUri = new Uri("https:
www.gotokyo.orgeventlistjalist");
                        "B13EC36903F8BF4701D498261A0802EF63642BC3" 
 DigiCert High Assurance EV Root CA
    
Value is 114514
