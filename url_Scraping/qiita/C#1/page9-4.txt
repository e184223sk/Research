関数ポインタ,"#関数のエントリポイント

コンパイラは、コンパイル時に各関数のエントリポイントを作成する。
プログラムの実効時に関数が呼び出されると、実行制御はこのエントリポイントに移行する。

エントリポイントは、関数のアドレス。
つまり、ポインタ変数を持つことができる。

関数ポインタは、アドレスを格納する関数と同じ戻り値の型のポインタ変数を用意する。
仮引数がある場合は、続けて仮引数も指定します
宣言時には、演算子の優先順位の関係から必ずポインタ名に ( ) をつける。

*宣言方法*
関数へのポインタ変数を定義するには以下

型 (*変数名) (仮引数);
例：
int (*funcname)(int, int);
これでintを返り値として、引数にint, int をとる関数へのポインタ変数が宣言された
ここにアドレスを渡すには、渡したい関数をそのまま代入すればよい。
int f(int, int);
という関数があるとして
funcname = f;

これで、funcnameにf関数のアドレスが格納された。

これでこのポインタから関数を間接参照で呼び出しすることができる。

呼び出しをするときは、見た目がわかりやすいように（*）をつけるのが慣用。なくても実行可能。
(*funcname)とfuncnameどちらの表記でも呼び出し可能
(*funcname)()
funcname()
両方とも同じ実行結果。


```c

#include <stdio.h>

int f(int *a, int *b)
{
    return (*a = (*a + *b));    
}

int main(void){
    int a = 5, b = 3;
    // intを返り値として仮引数にint *とint *をとる関数へのポインタ引数とint型num変数を宣言
    int (*funcname)(int *, int *), num;
    // funcnameにfのエントリポイント（関数ポインタ）代入
    funcname = f;
    // ポインタを用いて間接的に関数を呼び出し
    num = (*funcname)(&a, &b); // (*funcname)とfuncnameどちらの表記でも呼び出し可能
    printf(""a = %d, b = %d, num = %d\n"", a, b, num); // a = 8, b = 3, num = 8
}

```

関数のアドレスを代入できるので、関数の配列も作ることが可能。

int f1(int *a, int *b);
int f2(int *c, int *d);
int f3(int *e, int *f);

int (*funcname[])(int *, int *) = { f1 , f2, f3 };

(*funcname[0])(&num, &num2); // f1
(*funcname[1])(&num, &num2); // f2
(*funcname[2])(&num, &num2); // f3


参考
http://wisdom.sakura.ne.jp/programming/c/c54.html
"
