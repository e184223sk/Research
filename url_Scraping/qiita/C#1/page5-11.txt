【C言語】ポインタを使ってみる【移動編】,"# 前回の続き
前回の記事でポインタをザックリ説明したが今回は実際の使い方やできることまとめる。
前回記事⇒[【C言語】ポインタ入門編](https://qiita.com/ryuso/items/9aac1b524ca703c0d203)　参照

# ポインタは移動可能
まず初めにポインタには値を何度でも再設定することができる。

```sample.c
#include <stdio.h>

int main(void){
    int x = 0;
    int y = 0;
    int *ptr;

    ptr = &x;  //ptrはxのアドレスを指す
    *ptr = 21; //xに21を代入
    ptr = &y;  //ptrはyのアドレスを指す
    *ptr = 45; //yに45を代入

    printf(""x=%d\n"",x);
    printf(""y=%d\n"",y);

    return 0;
}
```
上記のプログラムは変数x,yの初期値が0であるがポインタを使って変数の中身を変更している。
以下の結果が得られるはずである。

```
x=21
y=45
```

ここで注目なのはポインタの中身です。
最後に代入したのは変数yなのでyのアドレスを持っていることになります。
確かめて見ましょう。

```sample.c
int main(void){
    int x = 0;
    int y = 0;
    int *ptr;

    ptr = &x;  //ptrはxのアドレスを指す
    *ptr = 21; //xに21を代入
    ptr = &y;  //ptrはyのアドレスを指す
    *ptr = 45; //yに45を代入

    printf(""x=%d\n"",x);
    printf(""y=%d\n"",y);
    printf(""ptr=%d\n"",*ptr);

    return 0;
}
```

次はポインタのインクリメントとデクリメントで動かして見るよ。
一応、用語を説明するとインクリメントは１足すことでデクリメントはその逆で１引くことだよ。


```sample.c
#include <stdio.h>

int main(void){
    int value[]={0,1,2,3,4,5};  //配列宣言
    int *ptr;                   //ポインタ宣言

    ptr = &value[0];  //ptr配列先頭のアドレスを示す

    printf(""ptr=%d\n"",*ptr);

    ptr++; //インクリメント

    printf(""ptr=%d\n"",*ptr);

    ptr--; //デクリメント

    printf(""ptr=%d\n"",*ptr);

    return 0;
}
```

上記のプログラムを実行してみよう。

それぞれの箇所でポインタの値を確認して見てください。


```
ptr=0
ptr=1
ptr=0
```

先頭配列の値
インクリメントした値
インクリメントした値をデクリメントした値
となってますね。


最後に
ポインタを１つ宣言すれば多くの変数の値を扱えることがポイントです。
次回はポインタ文字列ついて記事を書こうと思います。

以上

"
