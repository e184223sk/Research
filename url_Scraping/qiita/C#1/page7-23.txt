データ構造とアルゴリズム Vol.7,"#Vol.7: クイックソート
クイック整列の原理を理解し、これをC言語で実現することができます。

#クイックソートとは？
👌 クイックソートとは、ピボットを基準に、大きな値と小さい値を交換するソート技法です。 
👌 値を交換するのにN 番、異なる場合は、交換した後に元素が半分に分けられるため、全体元素を分割するのに平均的にlog N 番が必要となるため、平均的に O(Nlog N) の時間の複雑さを持ちます。
👌 元素を半分づつに分ける時に、logNの時間の複雑度が出てくる代表的な例は、完全二進ツリーです。 このような完全二進ツリー形態は、コンピュータ工学で最も好む理想的な形態です。

#クイックソートを実現
###例）実行するコードの例
```C
//クソートの配列宣言
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <limits.h>
#define SIZE 5

int a[SIZE] = {9, 8, 1, 7, 4};

int swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

void quickSort(int start, int end) {
    if (start >= end) return;
    int key = start, i = start + 1, j = end, temp;
    while(i <= j) {//ずれるまで繰り返します。
        while (i <= end && a[i] <= a[key]) i++;
        while (j > start && a[j] >= a[key]) j--;
        if(i > j) swap(&a[key], &a[j]);
        else swap(&a[i], &a[j]);
    }
    quickSort(start, j - 1);
    quickSort(j + 1, end);
}

int main(void) {
	quickSort(0, SIZE - 1);
	for (int i = 0; i < SIZE; i++) printf(""%d\n"", a[i]);
    return 0;
```

🤔 結果は？
`result->` 1 4 7 8 9

まとめ
📌 クイックソートは、偏向した分割が発生した場合の演算の量がO(N^2)です。 そのため、実際に並べ替えを行う場合は、クイック並べ替えを直接実現しません。 代わりにC++のAlgorithmライブラリを使用します。 Algorithmライブラリのsort()関数は、クイックソート基盤とし、O(NlogN)を保障します。
📌 クイックソートは平均的な時間複雑度がO(Nlog N)である最も普遍的な整列アルゴリズムです。

📚参考講義：コンピューター工学専攻必須オールインワンパッケージOnline
👆 上記の講義はCとC++を言語を前提に説明しています。
"
