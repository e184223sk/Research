【数値解析入門】C言語で解けない漸化式を数値解析してみた,"
#　実現したいこと

[前回](https://qiita.com/kkml_4220/items/acd25357ebea1b94cd05)、一般項がもとまる基本的な漸化式を扱ったので、本記事では一般項を出すことができない漸化式を解いて行きたいと思う。

https://qiita.com/kkml_4220/items/acd25357ebea1b94cd05

また、この記事で用いたソースコードは私のGitHubで公開しているのでぜひ参考にされたい.

https://github.com/kkml4220/RecurrenceRelation

## 目次

1. 問題.1
    1. 数学的に厳密な証明
    1. 数値解析
        1. 問題設定
        1. ソースコード
        1. 実行結果
1. 問題.2
    1. 問題設定
    1. ソースコード
    1. 実行結果


## 問題.1

次の漸化式によって定義される数列の単調性,有界性を調べて,その極限値を求めよ.
$$
a_1 = 3, \quad a_{n + 1} = 2\sqrt{a_n} \;\;\;(n \in \mathbb{N})
$$

この問題は一般項を求められないわけではないが,実際に一般項を求めようとすると、面倒なことがすぐにわかる.

この問題のバックグラウンドは次の定理ある.



### [定理] 単調有界列の収束性

```
* 単調増加で上に有界な数列は収束する. 
* 単調減少で下に有界な数列は収束する.
```

この問題は数値解析用の問題ではなく、単調有界列の収束性を正しく理解して、必要な事項を証明することができるかということでる.

問題にもあるように、単調性と有界性について厳密に議論する必要がある.

私は数学科なのでここら辺の議論は朝飯前だ.

### 準備

この問題を解くに当たっての準備をする.基本的にこの手の問題は収束する場合が多いので,ここでは収束すると仮定して話を進める.


収束を仮定したので数列$\\{a_n\\}$には極限値が存在する$\left(=\alpha\right)$とする.
$n$が十分に大きい時,

$$
a_{n+1} \to \alpha,\quad a_{n} \to \alpha  \quad (n \to \infty)
$$

となる.

ここで与えられた漸化式を用いると,
$$
\alpha = 2 \sqrt{\alpha}
$$

これを$\alpha$について解くと, $\alpha = 0,4$ 
    ここで数列$ \\{a_n\\} $は帰納的に$\forall n \in \mathbb{N} $に対して$a_n > 0$は明らかなので,収束するならば$\alpha = 4$つまり

$$
\lim_{n \to \infty} a_n = 4
$$
であることが予想できる.

### 有界性
 数列$ \\{a_n\\} $は帰納的に$\forall n \in \mathbb{N} $に対して$a_n > 0$は明らか.よって,$\forall n \in \mathbb{N} $に対して$a_n < 4$を数学的帰納法で示す.

1. $n = 1$のとき,
1. 
$$
(0 < ) \;\; a_1 = 3 < 4 
$$
より成り立つ.


1. $n = k$のとき,$0< a_k < 4$ を仮定する.

$$
\begin{align}
(0 < ) \;\; a_{k+1} 
& = 2\sqrt{a_k} \newline
& < 2 \sqrt{4} \quad \left( \because \text{仮定} \right) 
\newline 
& = 4
\end{align}
$$

よって帰納法から$ \\{a_n\\} $が有界であることが示された.

### 単調性

 数列$\\{a_n\\}$が単調増加であること,つまり$a_n < a_{n+1}$を示す.

与えられた漸化式より,

$$
\begin{align}
a_{n+1}^2 - a_n^2 = 4 a_n^2 - a_n^2
\end{align}
$$

$$
\begin{align}
(a_{n+1} - a_n )(a_{n+1} + a_n )
& = a_n(4 - a_n) \newline
& > 0 \quad \left(\because \text{数列} \{a_n\} \text{の有界性}\right)
\end{align}
$$

よって、

$$
a_n < a_{n+1}
$$

であることが示された.



以上より,[定理]単調有界列の収束性と単調性と有界性から数列は収束することが示された.


ここで準備でやった$\alpha$とおいて極限値を評価する.

$$
\alpha = 2 \sqrt{\alpha}
$$

ここで,$\\{a_n\\}$は$a_n \geq 3$であったから、$\alpha \geq 3$である.

よって$\alpha = 4$ となり,

$$
\lim_{n \to \infty} a_n = 4
$$

と完全に確定した.

そして、多少面倒な方法ではあるが,

この漸化式はある程度求めることができる.
$a_n > 0$より,与えられた漸化式において両辺対数をとると,
$$
    \begin{align*}
        \log{a_{n+1}} &= \log{2\sqrt{a_{n}}} \newline
        & = \log{2} + \log{a_{n}}^{\frac{1}{2}} \newline
        & = \log{2} + \dfrac{1}{2}\log{a_{n}}
    \end{align*}
$$
ここで$b_n = \log{a_{n}}$として特性方程式を用いて漸化式を変形すると,

$$
    \begin{align*}
        & b_{n+1} = \log{2} +  \dfrac{1}{2}b_n \newline
        \Longleftrightarrow \quad 
        & b_{n + 1} - 2\log{2} = \dfrac{1}{2} \left( b_n -2\log{2} \right)
    \end{align*}
$$

これを$b_n$について解くと
$$
    \begin{align*}
        b_n 
        & = \left(\frac{1}{2}\right)^{n-1} \left( b_1 -2\log{2} \right) + 2\log{2} 
    \end{align*}
$$

$$
   \begin{align*}
        \log{a_{n}} 
        & = \left(\frac{1}{2}\right)^{n-1} \left( \log{3} -2\log{2} \right) + 2\log{2} \quad \left( \because b_1 = \log{a_1} = \log{3}\right) \newline 
& = \left(\frac{1}{2}\right)^{n-1} \log{3} + 2 \log{2} \left( 1 - \left( \frac{1}{2} \right)^{n-1}  \right) \newline
 & \to 0 + 2\log{2} (1 - 0) \quad \left(n \to \infty\right) \newline
 & = 2\log{2} \newline
        & = \log{4} 
    \end{align*}
$$

これでも極限値が求まった事になる.

## 数値解析

### 問題設定

ここで改めて問題設定を与える.

$$
a_1 = 3, \quad a_{n + 1} = 2\sqrt{a_n} \;\;\;(n \in \mathbb{N})
$$

で与えられる漸化式に関して、$\varepsilon = 10^{-6}として$相対誤差 $\frac{|a_{n+1} - a_n|}{|a_n|} < \varepsilon $になるような最小の$n$を求めよ.

### ソースコード
問題を解くために次のようなソースコードを用意した.

```c:q1/main.c
#include <stdio.h>
#include <math.h>

#define ATTEMPT_MAX 100
#define EPS 1.0e-6

int main(void)
{
    double aa, error;
    double a = 3.0; // 初期値
    printf(""実行結果\n"");
    for (int n = 1; n <= ATTEMPT_MAX; n++)
    {
        aa = 2 * sqrt(a); // 漸化式
        printf(""n: %3d, x: %lf\n"", n, aa);
        error = fabs(aa - a) / fabs(a); // 相対誤差
        if (error < EPS) // 相対誤差判定
        {
            printf(""収束しました\n"");
            break;
        }
        a = aa;
    }
    return 0;
}
```

これをコンパイルする方法は,
+ macの方

```bash:other
# コンパイル
$ gcc main.c
# 実行
$ ./a.out
```

+ mac以外の方

もし'WSL'でLinux環境を作成しようとしている場合は[こちら](https://qiita.com/kkml_4220/items/f4fe903b36df8e4f7e24)の記事を参考にして環境構築をするとよいと思います.

数学関数を使用するので,`-lm`オプションを付ける必要があります.

```bash:mac
# コンパイル
$ gcc main.c -lm
# 実行
$ ./a.out
```


### 実行結果
実行結果は次のようになった.

```
実行結果
n:   1, x: 3.464102
n:   2, x: 3.722419
n:   3, x: 3.858715
n:   4, x: 3.928722
n:   5, x: 3.964201
n:   6, x: 3.982060
n:   7, x: 3.991020
n:   8, x: 3.995507
n:   9, x: 3.997753
n:  10, x: 3.998876
n:  11, x: 3.999438
n:  12, x: 3.999719
n:  13, x: 3.999860
n:  14, x: 3.999930
n:  15, x: 3.999965
n:  16, x: 3.999982
n:  17, x: 3.999991
n:  18, x: 3.999996
n:  19, x: 3.999998
収束しました
```


$n = 6$あたりでだいぶ結論には近づいているようだが、ここからが長い.パソコンはこれくらいなんなく計算してくれるようだ.

そして、理論通り、$a_n \to 4 \quad (n \to \infty)$であることが確認できる.

他の問題もやってみよう.

## 問題.2

次のような類題を考える.

### 問題設定

$$
\begin{align*}
a_{1}=0, a_{n+1}=\frac{a_{n}^{2}+3}{4} \quad (n=1,2, \cdots)
\end{align*}
$$
で与えられる漸化式に関して、$\varepsilon = 10^{-6}として$相対誤差 $\frac{|a_{n+1} - a_n|}{|a_n|} < \varepsilon $になるような最小の$n$を求めよ.


今回は数学的な証明をしないが、これは $a_n \to 1 \quad (n \to \infty)$に収束することがわかっているものとする.これを数値解析したい. 


### ソースコード

```c:q2/main.c
#include <stdio.h>
#include <math.h>


#define ATTEMPT_MAX 100
#define EPS 1.0e-6

int main(void)
{
    double aa, error;
    double a = 0.0; // 初期値
    printf(""実行結果\n"");
    for (int n = 1; n <= ATTEMPT_MAX; n++)
    {
        aa = (a * a + 3.0) / 4.0; // 漸化式
        printf(""n: %3d, x: %lf\n"", n, aa);
        error = fabs(aa - a) / fabs(a); // 相対誤差
        if (error < EPS) // 相対誤差判定
        {
            printf(""収束しました\n"");
            break;
        }
        a = aa;
    }
    return 0;
}
```



### 実行結果

```text:result2
実行結果
n:   1, x: 0.750000
n:   2, x: 0.890625
n:   3, x: 0.948303
n:   4, x: 0.974820
n:   5, x: 0.987568
n:   6, x: 0.993823
n:   7, x: 0.996921
n:   8, x: 0.998463
n:   9, x: 0.999232
n:  10, x: 0.999616
n:  11, x: 0.999808
n:  12, x: 0.999904
n:  13, x: 0.999952
n:  14, x: 0.999976
n:  15, x: 0.999988
n:  16, x: 0.999994
n:  17, x: 0.999997
n:  18, x: 0.999999
n:  19, x: 0.999999
収束しました
```

あんまり面白みがないが、今回も$n = 19$で収束したことがわかる.


今回は、一般項が求まらない漸化式を数値解析によって収束値を確認してみた.




















"
