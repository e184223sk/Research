public class WindowLocationBehavior : Behavior&lt;Window&gt;
{
    public double Left
    {
        get =&gt; (double)this.GetValue(LeftProperty);
        set =&gt; this.SetValue(LeftProperty, value);
    }

    public static readonly DependencyProperty LeftProperty =
        DependencyProperty.Register("Left", typeof(double), typeof(WindowLocationBehavior), new UIPropertyMetadata((double)0.0));

    public double Top
    {
        get =&gt; (double)this.GetValue(TopProperty);
        set =&gt; this.SetValue(TopProperty, value);
    }

    public static readonly DependencyProperty TopProperty =
        DependencyProperty.Register("Top", typeof(double), typeof(WindowLocationBehavior), new UIPropertyMetadata(
            (double)0.0));

    protected override void OnAttached()
    {
        base.OnAttached();

        AssociatedObject.Top = this.Top;
        AssociatedObject.Left = this.Left;
        AssociatedObject.LocationChanged += (sender, e) =&gt;
        {
            var windowRightEdge = SystemParameters.VirtualScreenLeft + SystemParameters.VirtualScreenWidth;
            if (windowRightEdge - ((Window)sender).Width &lt; ((Window)sender).Left) ((Window)sender).Left = windowRightEdge - ((Window)sender).Width;
            else if (SystemParameters.VirtualScreenLeft &gt; ((Window)sender).Left) ((Window)sender).Left = SystemParameters.VirtualScreenLeft;
            if (SystemParameters.VirtualScreenHeight - ((Window)sender).Height &lt; ((Window)sender).Top) ((Window)sender).Top = SystemParameters.VirtualScreenHeight - ((Window)sender).Height;
            else if (0 &gt; ((Window)sender).Top) ((Window)sender).Top = 0;
            this.Left = ((Window)sender).Left;
            this.Top = ((Window)sender).Top;
        };
    }
}

