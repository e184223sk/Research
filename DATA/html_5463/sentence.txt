More than 3 years have passed since last update.　ゲームを作っていて、必殺技の作成等を簡単に行えるようにできないだろうか？ということを考えたのが今回の発端です。そこで、ScriptableObjectにパラメーターとメソッドを定義して入れ替えるだけで挙動を変えれると簡単なのでは？と考えついて試してみたので備忘録として書きます。最終的に、以下のようになります。
上のサンプルでは、ジャンプする挙動と色が変わる挙動をScriptableObjectの入れ替えで行っています。gifで動かしているプロジェクトは公開しているので、説明読むより触ってみたい！という方はご活用ください。
https://github.com/MizoTake/ChangeBehaviourWithScriptableObject　最初に、今回の処理がどういう流れで行われているのか書きます。まず、gifにあったCubeはSpaceキーを押すとInspectorから代入されたScriptableObjectの振る舞いを実行します。
中身は以下のようになっています。
Cubeに貼られているスクリプトからSpaceKeyが押されるとBehaviourというクラスのMoveメソッドを実行します。
次に、そのBehaviourというクラスです。これは、abstractを宣言しているので基底クラスです。継承先で振る舞いを書いて欲しいメソッドを定義しています。今回は、Moveメソッドになります。
そして、ScriptableObjectクラスを継承しているので継承先のクラスをScriptableObjectにできるようになります。
また、abstractクラスには、そのまま拡張メソッドを追加できるので共通で何かを行いたい場合等に使うと便利です。(今回はTips程度に書いています。)次にgifの最初にJumpしていたクラスです。これはBehaviourを継承してMoveの振る舞いを定義しています。そのためgifでは、JumpクラスがInputControllerのInspectorに代入され、Moveが呼ばれるためジャンプをしていました。ここで便利になるのはScriptableObjectを作成した後、Powerの値を変えることでジャンプの高さも変えることが容易になるという点です。また、this.Init()で呼び出すことによりabstractの拡張メソッドであるInitが呼ばれます。ここまでが基本的な一連の流れになります。次からは+αで便利だと思った部分を書きます。これは最初のgifでバラバラに実行されていた、ジャンプの振る舞いと色を変える振る舞いを複合して実行しているものになります。まず、色を変えるクラスです。ScriptableObjectにした後、InspectorでMaterialを代入しています。そして、Jump同様にInputControllerのInspctorに代入することで動作します。次に複合させたクラスです。中身を見ると何てことはないと思います。配列をInspectorから入れて、for文で一気に実行するというものです。ただ、Behaviourクラスがあるだけで振る舞いの複合やランダム実行などが簡単に定義でき、Compositeクラス自体もBehaviour継承クラスなので、InputControllerのInspectorに代入するだけで切り替えれるというのは便利だと思っています。InputControllerに対してCharacterごとの動きを設定していけば同じControllerでも振る舞いが変わるので便利かと思います。ここからRxやDIで読みやすく扱いやすくしていくことも良いと思っています。以上で今回の記事はすべてになります。
(…ScriptableObjectにメソッドが書けるのが個人的に驚きだった)また、ScriptableObjectの作成に関しては、個人的に以下の記事がオススメです。
【UnityEditor】ScriptableObjectのアセットを右クリックから作れるようにするエディター拡張右クリックから作れるようになるので簡単作成できるようになって便利でした！


