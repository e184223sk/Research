More than 1 year has passed since last update.WPFを、DAC(Desktop App Converter)を使ってUWP(appx)パッケージにするアプリにて、appxにしたときの動作を確認したい。「アプリケーションパッケージプロジェクト」を使って、UWPと同じように動作する環境を作る。今回は、.NetFramework(4.7.2)のコンソールアプリを作成することにした。下記のアプリでやっているのは、UWPパッケージしたアプリでしか動作しないUWPのAPIが動くかどうかで、UWPパッケージとして動いているかどうかを確認するということ。ソリューションに、下図のアプリケーションパッケージプロジェクトを追加する。アプリケーションパッケージプロジェクトの中の「アプリケーション」を右クリックして「参照の追加」をク選択し、パッケージしたいプロジェクト(ここではConsoleApp12)を追加する。
ソリューション全体をビルドした後、アプリケーションパッケージプロジェクトを右クリックして、「スタートアッププロジェクトに設定」をクリックし、F5を押したらこちらのPJから起動するようにする。アプリケーションパッケージプロジェクトを起動する。
これで、デバッグできる。Breakを貼れば、そこでとめることもできる。コンソールアプリをスタートアップにして起動した場合は、Windows.Storage.ApplicationData.Current.LocalFolderで例外発生して、catchのほうを通る。パッケージPJをスタートアップにして起動した場合は、Windows.Storage.ApplicationData.Current.LocalFolderで例外発生せず、パスを取得できる。ここまでで、一旦デバッグはできるようになった。
以下は、調べる中で気になったことや、注意すべき点をメモしておく。
(調べながらのメモなので、まとまりありません)アプリケーションパッケージプロジェクトの設定としては、デフォで下記のようになっている。
ので、ビルドすると、下記のようなフォルダにexe一式ができた。
&lt;ソリューションフォルダ&gt;\&lt;プロジェクトフォルダ&gt;\bin\&lt;プラットフォーム&gt;\&lt;コンフィグレーション&gt;\&lt;アプリ名フォルダ&gt; の中。
出力フォルダは上記だが、F5を押して行う「デバッグ」で動く際は、別のフォルダに、パッケージに含まれるもの一式が出来上がって動くっぽい。
&lt;ソリューションフォルダ&gt;\&lt;プロジェクトフォルダ&gt;\bin\&lt;プラットフォーム&gt;\&lt;コンフィグレーション&gt;\AppX\ の中。

この中に、アプリのexeと、exeが参照してるdllなどが、一式入る。いろいろ調べてると、DACはすでにマイクロソフトの推奨から外れているらしい。現状にわか状態なので詳しくはあとで調べるとして、とりあえず下記のようにすると、パッケージを作れる様子。ここでパッケージを作成すると、下記のようなものができる。その中の&lt;PJ名&gt;_&lt;バージョン&gt;_&lt;コンフィグ&gt;_Testフォルダに、.appxbundleまたは.msixbundleを含むインストーラー一式が出来上がる。(.cerの証明書ファイルも一緒にできてる)ここに、.appxまたは.msixができてる。.appxbundleができるときと、.msixbundleができるときがある。どっちができるか決める条件はなんなのか？19/08/21 追記
⇒VS2019 v16.1.6で試してみたところ、下記っぽい。
パッケージプロジェクトの「最小バージョン」を1803(10.0 ビルド17134)以前にすると、appxとappxbundleが出来上がり、1809(10.0 ビルド17763)以降にすると、msixとmsixbundleが出来上がる。
なんとなく試してみて上記だと分かったが、どこかに説明かいているのか？？？
MSdocs色々見たつもりだが、appxとmsixのできる条件、見つけられなかった...19/08/21 追記その2
下記が、そういうことか？？

MSDocsより引用。アプリが使うdllは、パッケージPJが、参照の設定をもとに自動でアプリのexeと同じ階層に入れてくれる。試したところ、は、自動で入れてくれるっぽい。但し、上の2.は、「アプリが参照しているdll」と同じフォルダに「さらに参照しているdll」が入っていないと自動で配置してくれないっぽい。
なので、dll類を、ビルド後イベントで、別のところからコピーしてきているような場合については、パッケージプロジェクトでは自動で配置してくれなかった。
(そういう時は、パッケージPJの方でもビルド後イベントでコピーなどしないといけないっぽい。未検証)やりたいことの本筋から少々れるが、この実験をやるうえで、パスを取得するためのUWPのAPI(Windows.Storage.ApplicationData.Current.LocalFolder)を使いたかったので、NugetでMicrosoft.Windows.SDK.Contractsを追加して使えるようにしようとしたが、下記のようなエラーが出た。エラーの主語(アプリケーションは、...)が何を指しているのかあいまいで混乱したが、どうやらMicrosoft.Windows.SDK.Contractsが、Windowsの10.0.18362.0、つまり1903を必要とするので、それ(Contracts)を使っているConsoleApp12(今回作った実験用コンソールアプリ)のMinVerを下げろ、と言っている様子。
Microsoft.Windows.SDK.ContractsはNugetしてきていて、MinVerを下げることはできないので困った。解決法としては、Microsoft.Windows.SDK.Contractsを使うのをやめて、以前の方法(こちら参照。.winmdファイルを参照するやり方)でUWPのAPIを呼ぶようにして対応した。WPF などの .NET Framework のアプリから UWP の API を呼ぶ
https://blog.okazuki.jp/entry/2018/03/29/101601.NET のプロジェクトから WinRT API を呼ぶのが凄く簡単になってます
https://blog.okazuki.jp/entry/2019/05/09/115020


