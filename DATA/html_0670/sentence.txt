最近C#のソースコードを見て、=&gt;やdelegateというキーワードを目にしましたが、これはよく調べてみたら、C言語でいう、関数へのポインタ、すなわち関数を参照する変数じゃないか！！( ˶˙ᵕ˙˶ )って目が覚めたんです英和辞典で調べてみても、delegateって「代表として派遣する」とか「委任する」とかあるけど、C#の世界だと「関数という一連の作業を、委任する」という意味になるのかな？？
う～ん…なっかなか難しい発想…(*´꒳`*)話は戻せば、すなわちdelegateは関数を参照する変数となれば、それと同じようにその方法が、delegate(デリゲート)の働きだって理解できたんです( ˶˙ᵕ˙˶ )まず、デリゲートは関数を参照する型を定義することから行う必要があります。どの引数を使って、どの戻り値の型を定義しないと話にならないでしょう。。。宣言の方法は…そんで、実際にインスタンスを定義するときも、newを使って…というようにやるのですが「MyDelegate dgref1 = Console.WriteLine」のように関数をそのまま代入演算子で代入するもんだと思っていました( ˙꒳​˙ᐢ )でもC#の場合はそうでないようです。。。new演算子で、()の中に、戻り値の型と引数が一致するメソッド名を代入することで、関数を参照するという、最初はそこで頭を悩ませました꒰ᐢ⸝⸝• ·̭ •⸝⸝ᐢ꒱でも匿名メソッドというのは最近のC#ではできるので、その場合はちょっとやり方が違ってくるので後で説明しますまずは簡単な例として、1つのメソッドを参照して、それを呼び出してみることにしました(˶ ･ᴗ･ )੭まずは「Culc2」というメソッドを参照する変数の型が用意されました。具体的には、int型2つを引数に受け取り、結果をdouble型を返すメソッドを当て込むデリゲートの型を用意します。次に、これは「Culc2」というデリゲートの型のインスタンス「culc2Test」を定義しています。そこにはメソッド「plus」を使え、と指定しています。plusは「static double plus(int a, int b)」で定義されているので、戻り値も引数も型が一致していますので、当て込めますそしてデリゲート型のインスタンスはもちろんメソッドとして呼び出すことができる。ここではplusを当て込んで定義したculc2Testに、24と33を引数に指定してあげています。plusはここでは加算なので、24＋33の結果を出すはずです。「デリゲート型定義→デリゲートのインスタンス作成→呼び出し」が成功しました！！(*˘ᗜ˘*)ですが、これだと関数を直接呼び出した方が全然いいじゃない！！って、デリゲートの使い道がないので、配列にすることで力を発揮するようなので、今度は配列にしてデリゲートを使ってみます今度はデリゲートでインスタンスを配列にしてみます(˶ ･ᴗ･ )੭⚐お次はデリゲート型「Culc2」の配列「culc2tests」を定義してみました！！✿.*･最初の初期化はまぁ手作業であまり意味をなさないが…実際にデリゲートのインスタンス配列でループで参照させることによって、いろんなメソッドを当て込んで、それを呼び出すことができるので、イベント動作などには強みが出そうだな…って感じがしますこの通り！！実行結果もデリゲートのインスタンス配列に紐づいたメソッドが読み込まれていました！！٩(.› ‹.✿)۶C#のデリゲートは、とにかくC言語の「関数のポインタ」と同じようなことが、よくよく感じられるようになったんです。ただし、少し使い方が違いますが…C言語の方は簡単のため、plusとminusの2つしか2値計算の関数は使いませんが、それぞれ比較することそのものは可能なので、比較してみました関数(メソッド)の呼び出しはC#もC言語も同じように呼び出せるこんなふうに、C#のデリゲートは、C言語の関数のポインタとして参照していて似ているものだということが実感できました(*´꒳`*)なるほどねぇ～～さて、C#には匿名メソッドが使えるので、ラムダ式(=&gt;演算子)を使って、メソッド名の定義を省略して、メソッド定義を直接デリゲートのインスタンス作成時に行ってみたんです。今度はデリゲートのインスタンスを1つ増やして、ラムダ式で匿名メソッド定義でインスタンスを設定したんですこれはあらかじめ定義されたメソッド「plus」を設定して、デリゲートのインスタンスを作成しています。対照的に「=&gt;」演算子を使って、引数intのaとbを用いて、{ ～ }の内部で、対数関数(基底をaにbの対数を求めている)を計算し、returnを行っています。そこで私も、正直「ラムダ式」って聞くと頭がスッキリしないときがあったんです。。。( ´ •̥  ̫ •̥ ` )でもラムダ式もメソッドであるという点と、ラムダ式の代入はC言語でいう関数のポインタで参照しているものと同じことを踏まえると、スッキリしましたすなわち、上記のラムダ式は、以下を意味するものと思いますでは、最後に追加したラムダ式のメソッドがちゃんと動いているのでしょうかぁ…一番下が対数関数の結果なので、メソッドをしっかり認識できたことがわかりました(˶ ･ᴗ･ )੭⚐⚑ちなみに、ラムダ式(=&gt;)はreturnのみの1行であれば、こんな風に省略ができるけど、ちょっとわかりづらいかも…( ´ •̥  ̫ •̥ ` )「&lt;引数&gt; =&gt; &lt;返す値&gt;」というズバッと〆たラムダ式ですが…まるで何かを参照しているようでわかりづらいかも。。。


