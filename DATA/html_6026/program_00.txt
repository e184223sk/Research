using System;
using System.Collections.Generic;
using System.Linq;

namespace ArrayTest
{
    class Program
    {
        static void Main(string[] args)
        {
            var bytes = new byte[512000];
            DateTime Time;

            var MAX = 1000;
            var sum = TimeSpan.Zero;

            // 配列として0チェック(foreach版)
            sum = TimeSpan.Zero;
            Time = DateTime.Now;
            for (var i = 0; i &lt; MAX; i++)
            {
                checkArray(bytes);
            }
            sum += DateTime.Now - Time;
            Console.WriteLine($"{nameof(checkArray)}:{sum.TotalMilliseconds / MAX}ms");

            // 配列として0チェック(for版)
            sum = TimeSpan.Zero;
            Time = DateTime.Now;
            for (var i = 0; i &lt; MAX; i++)
            {
                checkArray2(bytes);
            }
            sum += DateTime.Now - Time;
            Console.WriteLine($"{nameof(checkArray2)}:{sum.TotalMilliseconds / MAX}ms");

            // IEnumerableとして0チェック
            sum = TimeSpan.Zero;
            Time = DateTime.Now;
            for (var i = 0; i &lt; MAX; i++)
            {
                checkEnumerable(bytes);
            }
            sum += DateTime.Now - Time;
            Console.WriteLine($"{nameof(checkEnumerable)}:{sum.TotalMilliseconds / MAX}ms");

            // Enumerable.Anyとして0チェック
            sum = TimeSpan.Zero;
            Time = DateTime.Now;
            for (var i = 0; i &lt; MAX; i++)
            {
                bytes.Any((v) =&gt; v != 0);
            }
            sum += DateTime.Now - Time;
            Console.WriteLine($"{nameof(Enumerable.Any)}:{sum.TotalMilliseconds / MAX}ms");

            // Enumerable.Allとして0チェック
            sum = TimeSpan.Zero;
            Time = DateTime.Now;
            for (var i = 0; i &lt; MAX; i++)
            {
                bytes.All((v) =&gt; v == 0);
            }
            sum += DateTime.Now - Time;
            Console.WriteLine($"{nameof(Enumerable.All)}:{sum.TotalMilliseconds / MAX}ms");

            // unchecked下で forで0チェックを行う
            sum = TimeSpan.Zero;
            Time = DateTime.Now;
            for (var i = 0; i &lt; MAX; i++)
            {
                checkArray3(bytes);
            }
            sum += DateTime.Now - Time;
            Console.WriteLine($"{nameof(checkArray3)}:{sum.TotalMilliseconds / MAX}ms");

            // uncheckを使用した上でforで0方向による0チェックを行う
            sum = TimeSpan.Zero;
            Time = DateTime.Now;
            for (var i = 0; i &lt; MAX; i++)
            {
                checkArray4(bytes);
            }
            sum += DateTime.Now - Time;
            Console.WriteLine($"{nameof(checkArray4)}:{sum.TotalMilliseconds / MAX}ms");

            // unsafeを用いて ポインタによる0チェックを行う
            sum = TimeSpan.Zero;
            Time = DateTime.Now;
            for (var i = 0; i &lt; MAX; i++)
            {
                checkArray5(bytes);
            }
            sum += DateTime.Now - Time;
            Console.WriteLine($"{nameof(checkArray5)}:{sum.TotalMilliseconds / MAX}ms");

            // unsafeを用いて long間隔で0チェックを行う
            sum = TimeSpan.Zero;
            Time = DateTime.Now;
            for (var i = 0; i &lt; MAX; i++)
            {
                checkArray6(bytes);
            }
            sum += DateTime.Now - Time;
            Console.WriteLine($"{nameof(checkArray6)}:{sum.TotalMilliseconds / MAX}ms");

            Console.ReadLine();
        }

        /// &lt;summary&gt;
        /// 配列を0以外がくるまで回す。0以外が来ればfalse/そうでなければtrueを返す
        /// &lt;/summary&gt;
        /// &lt;param name="bytes"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        static bool checkArray(byte[] bytes)
        {
            foreach (var b in bytes)
                if (b != 0)
                    return false;
            return true;
        }
        /// &lt;summary&gt;
        /// 配列を0以外がくるまで回す。0以外が来ればfalse/そうでなければtrueを返す
        /// &lt;/summary&gt;
        /// &lt;param name="bytes"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        static bool checkArray2(byte[] bytes)
        {
            var imax = bytes.Length;
            for (var i = 0; i &lt; imax; i++)
            {
                var b = bytes[i];
                if (b != 0)
                    return false;
            }
            return true;
        }
        /// &lt;summary&gt;
        /// 配列を0以外がくるまで回す。0以外が来ればfalse/そうでなければtrueを返す
        /// &lt;/summary&gt;
        /// &lt;param name="bytes"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        static bool checkEnumerable(IEnumerable&lt;byte&gt; bytes)
        {
            foreach (var b in bytes)
                if (b != 0)
                    return false;
            return true;
        }
        /// &lt;summary&gt;
        /// unchecked下で byteを0チェックする
        /// &lt;/summary&gt;
        /// &lt;param name="bytes"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        static bool checkArray3(byte[] bytes)
        {
            var imax = bytes.Length;
            unchecked
            {
                for (int i = 0; i &lt; imax; i++)
                {
                    if (bytes[i] != 0)
                        return false;
                }

                return true;
            }
        }
        /// &lt;summary&gt;
        /// uncheckを使用した上でforで0に向かった方向で0チェックを行う
        /// &lt;/summary&gt;
        /// &lt;param name="bytes"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        static bool checkArray4(byte[] bytes)
        {
            unchecked
            {
                for (int i = bytes.Length - 1; i &gt;= 0; i--)
                {
                    if (bytes[i] != 0)
                        return false;
                }

                return true;
            }
        }
        /// &lt;summary&gt;
        /// unsafeを使って ポインタを使った0チェックを行う
        /// &lt;/summary&gt;
        /// &lt;param name="bytes"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        static bool checkArray5(byte[] bytes)
        {
            var imax = bytes.Length;
            unchecked
            {
                unsafe
                {
                    fixed (byte* p = &amp;bytes[0])
                    {
                        for (int i = 0; i &lt; imax; i++)
                        {
                            if (*(p + i) != 0)
                                return false;
                        }
                    }

                    return true;
                }
            }
        }
        /// &lt;summary&gt;
        /// byte[]を long[]として0かどうかをチェックする
        /// &lt;/summary&gt;
        /// &lt;param name="bytes"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        static bool checkArray6(byte[] bytes)
        {
            var imax = bytes.Length / 8;
            var あまり = bytes.Length % 8;
            unchecked
            {
                unsafe
                {
                    fixed (byte* p = &amp;bytes[0])
                    {
                        var intp = (Int64*)p;
                        for (int i = 0; i &lt; imax; i++)
                        {
                            if (*(intp + i) != 0)
                                return false;
                        }
                    }

                    if (あまり &gt; 0)
                    {
                        fixed (byte* p = &amp;bytes[imax * 8])
                        {
                            for (int i = 0; i &lt; あまり; i++)
                            {
                                if (*(p + i) != 0)
                                    return false;
                            }
                        }
                    }

                    return true;
                }
            }
        }
    }
}

