More than 1 year has passed since last update.この記事は11/17(土)に実施された初心者向けXamarinハンズオンの中で時間が余ったので行った宿題部分の備忘録的な記事です。
問題があったら消すかもしれないです…
あとQiita初投稿なので指摘の点とかあればコメントでバシバシお願いします！今回参加させて頂いたイベントは「Xamarin.Forms」を使って、スマートフォン向けのアプリケーションを作ってみようというハンズオン形式のイベントでした！自分はC#、モバイル開発未経験でしたが、自分でコードを書くことはほとんどしなかったのでとても敷居が低くてこれからモバイル開発やってみようかなとかXamarinって聞いたことあるけど一人だとなぁ…って思ってる人にはめちゃくちゃオススメのイベントでした。主催の田淵さんや講師の方々曰く、「初めてビルドするのが一番難しくてそれができちゃえば勝ち！」とのことだったので、このイベントに参加して勝ち方を知って開発ガリガリやってくのがおすすめです！JXUGのページはこちら！さて、ここからが本題です。今回は参加人数が少なかったこともあり、想定よりも早くイベントが進みました。
そこで、本来なら宿題となっている部分をみんなでやってみようという話になりました。ただし、この部分テキストが無いので復習しようと思ってもテキストが無いのでここで少し書き残して備忘録としようって感じです。※以下の説明はハンズオンが一通り終わった前提&amp;Azureのアカウントある前提です。
Azureアカウントない人でも
　https://azure.microsoft.com/ja-jp/services/cognitive-services/face/
ここにアクセスしてFaceを試す　&gt; ゲスト　を選べば7日間使うことができます。1.NuGetパッケージを追加
DevDaysSpeakers.Droidを右クリック &gt; 追加　&gt; NuGetパッケージの追加
ここで出てきた画面で左下のプレリリースパッケージを表示するにチェックを入れた状態で「face」と検索
そうすると上から5,6番目くらいに下のやつが出てくるのでこいつを追加してあげてください。
iOSの方も同様のことをやるのを忘れずに！Text="hoge"でhogeがボタン内のテキストとして表示されるので適宜変更OK3.次に以下の記述をDevDaysSpeakers &gt; View &gt; DetailsPage.xaml &gt; DetailsPage.xaml.csに追記します。4.デバッグしてみる
出た！ちなみに処理の流れとしては、対象の顔写真のURLをFaceAPIにソースとして投げる→FaceAPIが認識する→結果を返却→加工って感じのはず…顔写真URLが短縮URLだったりすると失敗します。会場で遠くの紳士たちが「女性に年齢を聞くとうんたらかんたら」って言っているのが聞こえた（多分女性を選んだらたまたま短縮URLだったのかエラーで落ちた）のでちょっと改造してみました。(時間そんなになかったので、ちょっとだけ）主な改造点としては2つ先程のこのあたりを下のように書き換えます。genderは画面表記だと勝手に文字にしてくれるみたいなんですが、値としては0,1で持っているようで0が男性だったので0の場合は年齢を代入して、それ以外はsecretと文字列を代入しました。あとは、短縮URLのときは配列の中身がないのに取り出そうとして例外発生という形になっていたのでtry-catchしてアラートを出すって感じにしてます！Xamarinどころかモバイル系すらも初めてでしたが、共通コードを書き換えるだけでAndroidもiOSもそれぞれ反映してくれているのはすごい楽だなぁと個人的には感じました。
あと、{}の位置に違和感をずっと覚えっぱなしでした笑(Xamarin関係ない…)個人的な開発案件とかで使えるなら使ってみたいなぁとも思っています。
ハンズオンの方はずっとゆったりした感じですし、困ったときは講師の方たちが察してやってきてくれていたので、コミュ障にも優しい？仕様になっていました。はじめの一歩が一番重いので、踏み出してしまえば結構楽だと思います。
今後も予定と興味が合うときには積極的に参加していきます！


