More than 3 years have passed since last update.８クイーンパズルとは、チェスのクイーンを8x8のチェス盤に、8つのクイーンを互いに取られないように配置するパズルです。ご参考 Wikipedia「エイト クィーン」この問題は、ハノイの塔と並んで再帰処理の練習問題としてとても有名ですね。ここでは8x8限定ではなく、任意の NxNに対応できるようなプログラムとして作成しました。アルゴリズム的にはとてもオーソドックスなものだと思います。ちゃんと 92通りの解が求まっているので間違ってはいないかと。例えば、4x4の盤だとすると、...4行目のすべての位置で試し終わったら、3行目に戻って、3行目のクィーンを取り去って、別の条件に合う位置に置いてみて、...と繰り返していきます。いわゆるバックトラッキングアルゴリズムで、一種の深さ優先探索です。深さ優先で探索する際に、条件に一致していないものは探索から排除することで効率を上げています。NxNのチェスの盤は、他のパズルでも利用しているBoardbase&lt;T&gt;クラスを継承したBoardクラスを定義して、１次元の配列としても、２次元配列としても利用できるようにしています。ところで、この手のプログラムでいつも混乱してしまうのは、x軸とy軸の扱いです。どちらが横軸でどちらが縦軸なんだろう？ってこと。上のように、ついついxを外側のループで回すコードを書いちゃうんだけど、これだと、画面に表示されたときに、X軸が縦軸になっちゃうんですよね。
なので、横一列を求めるって時に、が混乱してしまって、コード書いているうちに縦と横が逆になってて、間違いに気が付かないってことが、何度となく起こりました。そのため、このプログラムも含め、今後アップしていく予定のボードを使ったプログラムでは、に統一しようと思います。それでは、C#のコードを示しますBoardは、nQueenパズルに特化した盤面を表すクラスです。BoardBaseクラス(後述)を継承しています。Pieceクラスは、駒クラス。nQueenを解くクラス。盤面操作の面倒なところはBoardクラスに隠蔽されているので、Solveerクラスはとてもすっきりしたものになっています。プログラムを制御するクラス。Solverクラスを呼び出し解を求め、解を表示するだけの簡単なコードです。ところで、nQueen問題なんて、もっと短いコードで書けるのに、と思った方もいると思います。僕もそれは否定しません。
BoardクラスやPieceクラスを定義せずに２次元配列を直接扱うようにすれば、確かにもっと短いコードになります。
しかし、わかりやすさが大きく損なわれます。頭の回転が遅く短期記憶がさっぱりの僕は、このプログラムのように配列操作を隠蔽し抽象度を上げたほうがはるかに理解しやすいものになります。デバッグも楽です。コードを書く時にも一度に考える範囲が少なくて済みます。
そして、似たような問題に出会ったときに、プログラムの構造や考え方が再利用できるという利点も生まれてきます。8-クィーンパズルとして解いた結果を示します。Qがクィーンを置いた場所です。Solverコンストラクタの引数に5を入れて、5-Queenとして解いた結果も示します。このBoardBaseクラスは、「碁石拾い」「コイン15 (10円玉、5円玉をつかったパズル)」で利用したものと同じものです。前述のBoardクラスの基底クラスです。X × Y の盤面を表し、基本的な操作を定義しています。これは似たようなパズルでも再利用できるような汎用的な機能に絞っています。このBoardBaseクラスは、コンソールアプリに依存しない作りにしています。UWP、WinFormsでもそのまま使えると思います。このBoardBaseを継承して、当パズル専用のBoardクラスを定義します。内部では1次元配列を使っていますが、インデクサを定義して、1次元配列、2次元配列としても扱えるようにしています。
ただし、すべてのメソッドで１次元対応と２次元対応のものを用意するのは面倒なので、どちらか一方にしています。まあこれは好み以外の何物でもありません。１次元のインデックスによるアクセスができるようにしている理由は、一重ループで処理が書けるので、コードが簡潔になるからです。LINQのコードも書きやすくなります。2次元配列として見た場合の、X座標、Y座標は、0 からではなく、1から始まります。
つまり、board[1,1] は、いちばん左上を示し、8×8の盤ならば、board[8,8]が右下を示すことになります。なお、盤の周りには番兵用の領域を用意しています。これにより範囲外かどうかの判断を簡単に出来るようにしています。これが成功したがどうかは微妙ですが...上の図は 4×4の盤を表していますが、グレー部分が番兵が置いてある盤の周囲で、水色部分が実際の盤です。
盤面上の数値は、１次元配列のインデックスを表しています。BoardBaseクラスはジェネリッククラスにしていて、そのパラメータの型は、盤面上に置けるクラスの型です。この記事は、Gushwell's C# Programming Pageで公開したものを大幅に加筆・修正したものです。


