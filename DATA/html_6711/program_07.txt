
        /// &lt;summary&gt;
        /// 名前を編集できるかテスト
        /// &lt;/summary&gt;
        [TestMethod]
        public void TestEditName()
        {
            // テストのシナリオ
            // 1.リストの先頭を選択
            // 2.「編集」ボタンをクリック
            // 3.「名前」テキストボックスを書き換える
            // 4.「確定」ボタンを押す

            // 編集ボタンを取得
            AppVar mainVar = _app.Type&lt;Application&gt;().Current.MainWindow;
            var logicalTree = mainVar.LogicalTree();
            var editButton = new WPFButtonBase(logicalTree.ByBinding("EditCommand").Single());

            // 1.リストの先頭を選択
            var dataGrid = new WPFDataGrid(logicalTree.ByBinding("PeopleModel.People").Single());
            var row = dataGrid.GetRow(0);
            row.EmulateChangeSelected(true);
            // 編集対象の名前を退避
            string name = dataGrid.GetCellText(0, 0);

            // 2.「編集」ボタンをクリック
            editButton.EmulateClick(new Async());

            AppVar subWindow = WindowControl.IdentifyFromWindowText(this._app, name + " - 編集").AppVar;
            Assert.IsNotNull(subWindow);
            var subLogicalTree = subWindow.LogicalTree();


            // 名前入力テキストボックスを取得
            var nameTextBox = new WPFTextBox(subLogicalTree.ByBinding("Name.Value").Single());
            // 3.「名前」テキストボックスを書き換える
            nameTextBox.EmulateChangeText(name + "変更後");

            // 確定ボタンを取得
            var commitButton = new WPFButtonBase(subLogicalTree.ByBinding("CommitCommand").Single());
            // 4.「確定」ボタンを押す
            commitButton.EmulateClick(new Async());

            // ちゃんと名前が書き換わっていることを確認
            Assert.AreEqual(name + "変更後", dataGrid.GetCellText(0, 0));

            // ViewModelも書き換わっていることを確認
            Assert.AreEqual(name + "変更後", (string)this._main.DataContext.SelectedItem.Value.Name);

            // ついでにModelが書き換わっていることを確認
            Assert.AreEqual(name + "変更後", (string)this._main.DataContext.PeopleModel.PeopleSource[0]._Name);
        }

