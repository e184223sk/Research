
        /// &lt;summary&gt;
        /// 編集ボタンの活性状態をテスト
        /// &lt;/summary&gt;
        [TestMethod]
        public void TestEditButton_Enable()
        {
            // ボタンの特定方法３：相手プロセスでボタンを特定するstaticメソッドを実行する
            WindowsAppExpander.LoadAssembly(this._app, this.GetType().Assembly); // ←DLLインジェクション
            var targetButton = this._app.Type(this.GetType())
                                   .GetButton(this._app.Type&lt;Application&gt;().Current.MainWindow,
                                              "編集");
            var editButton = new WPFButtonBase(targetButton);

            Assert.IsFalse(editButton.IsEnabled);

            // リストから選択する操作を実行
            // DataGridを取得
            AppVar mainVar = this._app.Type&lt;Application&gt;().Current.MainWindow;
            var logicalTree = mainVar.LogicalTree();
            var dataGrid = new WPFDataGrid(logicalTree.ByBinding("PeopleModel.People").Single());
            // DataGridの最初の行を取得して選択操作をエミュレート
            var row = dataGrid.GetRow(0);
            row.EmulateChangeSelected(true);

            // 編集ボタンを押せるようになっていればOK
            Assert.IsTrue(editButton.IsEnabled);
        }

        /// &lt;summary&gt;
        /// 指定されたWindow配下を検索し、指定された文字列とContentが一致するボタンを取得します
        /// &lt;/summary&gt;
        /// &lt;param name="window"&gt;検索対象となるWindow&lt;/param&gt;
        /// &lt;param name="label"&gt;検索する文字列&lt;/param&gt;
        /// &lt;returns&gt;一致したボタン&lt;/returns&gt;
        static Button GetButton(Window window, string label)
        {
            var logicalTree = window.LogicalTree();
            return (Button)logicalTree.ByType&lt;Button&gt;().FirstOrDefault(c =&gt; 
                {
                    string content = c.Content as string;
                    return content == label;
                });
        }

