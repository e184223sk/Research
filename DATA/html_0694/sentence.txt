こんにちは、@yuzen-ykです。Yoshiki Kaneko(@yuzen-yk)と申します。今年から新卒社会人(開発エンジニア)になりました。現在研修でいろいろなことを勉強している最中です。
開発言語はC#、フレームワークは.NET Coreをメインに学んでいます。研修でASP.NET Coreについて学んでいて、Visual Studioのプロジェクトテンプレートを使って簡単なWebアプリやWeb APIを作っているのですが、知識の穴(普段気にしないけど、Program.csのこのメソッドの役割は？とか)が自分の中にはたくさんあるため、それを解消する目的で書くことにしました。勉強中の身なのでもしかしたら間違ったことを書いてることが大いにあり得ます。大目に見てください。とりあえずVisual Studioを起動して、ASP.NET Coreの空のテンプレートを開いてみます。
ソリューションエクスプローラはこうなっていました。
ASP.NET Coreには根幹となる二つのファイル(Program.csとStartup.cs)があります。今回はそれを見ていきます。まず一つがProgram.csです。
デフォルトでこんな感じのコードが記述されています。C#でプログラムを書いている人にはおなじみのMainメソッドです。
プログラムを実行するとまずはここから処理が始まります。CreateHostBuilderというメソッドが書かれています。
メソッドの戻り値からBuildメソッドを呼び出し、さらにRunメソッドを呼び出しています。
なんのこっちゃ。CreateHostBuilderメソッドには戻り値としてIHostBuilderが設定されていました。
このインターフェースが実装されているのはHostBuilderクラスです。HostBuilderクラスの役割は、Webホスト(Webサーバともいう)を構築するというものになります。
Webホストって何？って人は以下のサイトがわかりやすいかと思われます。正直僕も詳しくわかってません。とりあえずWebアプリ作成する上で必要なものだと認識。
「分かりそう」で「分からない」でも「分かった」気になれるIT用語辞典 ホスト(Host)このWebホストの機能ですが、Hostという名前のクラスにすべて実装されています。HostBuilderクラス内にはBuildというメソッドがあり、こいつが上述のHostクラスのインスタンスを生成します。その後、Hostクラス内のRunメソッドを呼び出してWebホストの機能が実行されます。CreateHostBuilderメソッドの中身を見ていきます。HostクラスのCreateDefaultBuilderというメソッドが呼び出されています。こいつの役割はデフォルトのHostBuilderインスタンスを生成するというところにあります。その後のConfigureWebHostDefaultsメソッドは、Hostクラスのインスタンスをデフォルトで生成するものです。このメソッドの引数にはラムダ式が書かれており、引数webBuilderにはIWebHostBuilderというインターフェイス(正確にはWebHostBuilderクラスのインスタンス)が渡されるようです。ラムダ式の内部ではUseStartupメソッドが呼び出されています。これはStartupクラスの方でホストを起動した際の初期化処理を行うようにしています。「Startupで初期化処理を行う形でHostインスタンスを生成し、Webホストの構築を行う」というのがProgram.csの役割っぽいです、多分。「じゃあStartup.csって何」って感じなのでStartup.csも見ていきます。Startup.csにはこんな記述がされています。Startup.csには二つの重要なメソッドが存在します。一つずつ見ていきましょう。このメソッドではサービスの登録を行います。
サービスってなんぞやって感じですが、ASP.NET Coreでは「サービス」と呼ばれる形で外部からインストールしてきたプログラムパッケージを組み込んで機能の拡張を行うことができます。その際、サービスの登録をここに記述する形で行います。
デフォルトでは何も組み込んでいないので何も書かれていません。このメソッドではミドルウェアの登録を行います。ASP.NET Coreでは、アプリケーションがHTTPで呼び出されてからレスポンスを返すまでの応答を、ミドルウェアと呼ばれるプログラムを組み込むことで機能を拡張することができます。
デフォルトではメソッドの引数に次の二つが用意されています。・IApplicationBuilder
簡単に言えば呼び出し→応答の流れそのもの(パイプラインともいう)を扱う(形作る？)ものです。・IWebHostEnvironment
Webホストの実行環境に関するクラスです。if文から始まるこいつは、作成しているプロジェクトが開発環境か本番環境かでどのエラーページを表示するかというのを表しています。
開発環境の場合は開発者向けのエラーページが出るように設定されていますね。UseRoutingはルーティング機能をONにします。
ルーティングは「特定のアドレスにアクセスしたときに特定の処理を実行させる」という働きを持っています。こいつがONになっていると、そのあとの処理が行われます。
UseEndPointはエンドポイント(呼び出し→応答の中で最後に呼び出されるミドルウェア)を設定します。その後、MapGetメソッドで第1引数に指定されたパスにアクセスし、ラムダ式の後に書かれているcontext.Response.WriteAsyncというメソッドの引数に指定された文字列をWebページ上に表示します。実行してみましょう。
context.Response.WriteAsyncの引数に指定された「Hello World!」という文字列が表示されました。ASP.NET Coreの根幹となる2つのファイルについて勉強してみました。
研修でもある程度聞いた内容ではありましたが、研修にプラスして自分で深堀りしてみて、得られたものをこういう媒体にアウトプットすることは大事だなと思いました。かなり理解が深まったような気がします。


