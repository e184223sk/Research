using System.Collections.Generic;
using System.Net.Security;
using System.Security.Cryptography.X509Certificates;

class ExampleClass
{
    void Example()
    {
        System.Net.ServicePointManager.ServerCertificateValidationCallback = OnRemoteCertificateValidationCallback;

        var request = (System.Net.HttpWebRequest)System.Net.WebRequest.Create("https://api.example.com");
        request.Method = "GET";

        var response = (System.Net.HttpWebResponse)request.GetResponse();
        var statusCode = (int)response.StatusCode;
        response.Close();

        Debug.Log("status: " + statusCode);
    }


    // 信頼する証明書のハッシュリスト
    readonly List&lt;string&gt; TrustedThumbprints = new List&lt;string&gt;()
    {
        "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
    };

    // 無視する X509 チェーンステータスを定義
    const X509ChainStatusFlags IgnoreChainStatus = 
            X509ChainStatusFlags.RevocationStatusUnknown |  // 証明書が失効しているかどうか判断できない
            X509ChainStatusFlags.OfflineRevocation |  // 証明書失効リストが使えなかった
            X509ChainStatusFlags.PartialChain |  // X509チェーンをルート証明書に構築できなかった
            X509ChainStatusFlags.UntrustedRoot;  // ルート証明書が信頼されていない

    private bool OnRemoteCertificateValidationCallback(
      object sender,
      X509Certificate certificate,
      X509Chain chain,
      SslPolicyErrors sslPolicyErrors)
    {
        // エラーがなければ OK
        if (sslPolicyErrors == SslPolicyErrors.None)
        {
            return true;
        }

        // 信頼するハッシュリストと比較し、一致するなら OK
        if (TrustedThumbprints.Contains(((X509Certificate2)certificate).Thumbprint))
        {
            return true;
        }

        // SslPolicyError.RemoteCertificateChainErrors 以外のエラーがあるなら NG
        if ((sslPolicyErrors &amp; ~SslPolicyErrors.RemoteCertificateChainErrors) != 0)
        {
            return false;
        }

        // IgnoreChainStatus 以外のチェーンエラーがあるなら NG
        for (int i = 0; i &lt; chain.ChainStatus.Length; ++i)
        {
            if ((chain.ChainStatus[i].Status &amp; ~IgnoreChainStatus) != 0)
            {
                return false;
            }
        }

        // 証明書チェーン内に信頼する証明書と一致するものがあれば OK とする
        for (int i = 0; i &lt; chain.ChainElements.Count; ++i)
        {
            var element = chain.ChainElements[i];
            if (TrustedThumbprints.Contains(element.Certificate.Thumbprint))
            {
                TrustedThumbprints.Add(element.Certificate.Thumbprint);
                return true;
            }
        }
        return false;
    }
}

