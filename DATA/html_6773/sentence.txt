More than 3 years have passed since last update.2016年末から iOS の ATS 必須化が始まりますが、皆様 HTTPS への対応はお済みでしょうか。今回は、Unity/C#(mono) で HTTPS を実装する場合の注意点を書いていきます。mono にはデフォルトでルート証明書がインストールされておらず、全ての SSL 通信は証明書の検証ができずに失敗します。Mono - FAQ: Security
Note that a default installation of Mono doesn’t trust anyone!全ての証明書を無条件で信頼するように実装すれば、いわゆるオレオレ証明書であっても無事に SSL で通信が出来るようになりますが、オレオレ詐欺にあっさりと引っかかるクライアントが出来てしまいます。折角メッセージを SSL で暗号化しても、相手が詐欺師では、まったく意味がありません。正しく検証を行うには、 UnityEngine.WWW 又は UnityEngine.Networking.UnityWebRequest を使うようにしましょう。
これらの API は OS にインストールされているルート証明書で検証してくれます。それでも、何らかの理由により C# で実装するには、あまりオススメは出来ないが次のような手段が考えられる。上記の実装には次のような条件がある。Unity 標準の機能を使っていない場合、利用している HTTP ライブラリがどのような実装になっているか確認してみましょう。 Asset Store で販売されている UniWeb というアセットは次のような実装になっています。証明書の検証はライブラリ利用者が実装する形になっており、デフォルトでは全ての証明書を信頼するようになっています。iOS の ATS が有効になることにより、非セキュアな HTTP 通信は使えなくなりますが、ATS の制限の対象になるのは NSURLSession や NSURLConnection 等の API であり、System.Net.HttpWebRequest の実装はこれらの API を使用しないので制限の対象外となります。Cocoa Keys - Using ATS in Apple Frameworks
App Transport Security (ATS) is enforced by the NSURLSession class and all APIs that use it. ATS is automatically enabled when you link your app against the iOS 9.0 SDK or later or against the OS X v10.11 SDK or later. (The older NSURLConnection class also enforces ATS when you link against the iOS 9.0 SDK or later or against the OS X v10.11 SDK or later.) ATS protections are not available when using lower-level networking APIs provided by Apple, or when using third-party networking libraries.Apple の ATS 必須化はデベロッパーにとっては、面倒くさい対応ごとが増えたという印象にとらえられるかもしれませんが、デベロッパーの安易な HTTP の利用を抑制することで、ユーザーのデータ通信の安全性を向上させる意図があります。
ユーザーのデータを守るため、自社サービスを守るため、適切なプロトコルを選択しましょう。


