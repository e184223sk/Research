More than 1 year has passed since last update.C#プログラマの皆さんは、アプリのデータの永続化はどうしていますか？などほかにも様々な方法が考えられます。UWPや、デスクトップアプリ、Xamarinなどのアプリ開発でちょっとしたデータを保存したいけど、JSONだと物足りない、SQLiteはSQL書くのめんどくさい。かといってEFCoreうまく動かせない。なんてことはありませんか？？今回はアプリ等のデータをローカルに簡単に保存するのに最適なオープンソースのローカルNoSQLデータベース「LiteDB」を紹介したいと思います。Githubのリポジトリ
公式サイト一応GUIのクライアントアプリもあるみたいですし、ネットワークに接続しないアプリ等で使用する際にはこれで十分そうですよね。いくつかの特徴はSQLiteともかぶっていると思いますが、僕自身は以前はSQLiteを使っていましたが、現在はLiteDBに移行しています。
その理由として上記理由から移行しました。
とはいえ、LiteDBも完璧ではありません。
パフォーマンスのや信頼性の観点からいうとSQLiteのほうが圧倒的にいいと思います。
SQLiteはMySQLとかSQL Serverと張り合えるくらいには高速ですし実績も多いので
大量のI/Oが起きる場合、数100万レコードの単位のデータを扱う場合、信頼性重視の場合はSQLiteを採用するほうが無難でしょう。とりあえずエンティティを用意使ってみる超簡単にデータの永続化ができましたね！！これならそんなに規模の大きくないアプリ開発では十分に力を発揮できそうです。公式のサンプルだと更新はエンティティのプロパティに直接再代入して書き換えていたのが美しくないと思いました。
エンティティのセッターをprivateにして外部からの書き換えを禁止にするとうまく動かなかったです。
時代の流れが関数型プログラミングにシフトしている昨今、やはりオブジェクトは再代入禁止でイミュータブルに扱いたいものですよね。
C# 9.0、.Net 5あたりでレコードの機能が導入されそうなので、この辺は公式が対応してくれてうまく改善されるといいなと思います。リレーションやインデックス等、詳しくは公式を参照してください。
Githubのリポジトリ
公式サイト


