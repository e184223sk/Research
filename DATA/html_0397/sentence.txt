タイトルの件の記事は既出とは思うが、
投稿の練習&amp;後輩の教育用にローカライズされたものが欲しかったので。新しいプロジェクトの作成でWindowsフォームアプリケーション(.NET Framework)を選択

適当に名前つけて作成

とりあえずテンプレートを用意。
ここからボタンとテキストボックスを追加してXMLを読み込む処理を入れていきます。
コントロール(ボタンとテキストボックス)の追加
それぞれツールボックスからドラッグ&amp;ドロップで追加できる。

テキストボックスは複数行表示させたいので、
プロパティ &gt; プロパティ &gt; Multiline = True に設定

そしていい感じにテキストボックスを大きくする。

ボタンの
プロパティ &gt; イベント &gt; Click の所をダブルクリックして、
クリックイベントを追加する。


コードが自動生成される。
まずは読み込むためのXMLファイルを作成する。
ひな形はこんな感じ別にメモ帳でも秀丸でも書ければ何でもいいけど、
visualStudioで書くなら
ソリューションエクスプローラー &gt; 何もないところで右クリック &gt; 追加 &gt; 新しい項目
(またはCtrl + Shift + A でも良い)

新しい項目の追加 ウィンドウが開くので XMLファイル を選択し、
適当な名前つけて追加する

XMLファイルが自動生成される。
まずはここに読み込ませたいデータを書いていきます。

今回読み込みたいXMLのデータはこんな感じ表にするとこう見てわかる通り、タイプとわざの数にばらつきがあります。
(最終的にこういうデータを扱いたいという話)とりあえず手始めに、以下のデータを読み込む処理をLINQで書いてみます。usingを2つ追加し、パスを取得して読み込んでみます。実行してボタンを押すとこんな感じ。
ポケモンの名前を取得できました。
では本命のこのxmlを読み込んでみましょう先ほどの foreach の箇所を以下のように書き換えました。
foreach がネストしてて冗長に見えますね…。一応動作自体は期待通り。
でもコードが気持ち悪いのでforeach 部分をLINQで書き直してみましょう。
foreachのデメリットは、単純にネストが深く可読性が悪くなる点です。
動作を変えず、可読性をよくするために、LINQで書き直します。
分かり易いように、&lt;Type&gt; 要素の部分だけをLINQに書き換えました。&lt;Waza&gt; 要素も同様にLINQで書いてみましょう。タグ要素の取得は、共通の処理なので関数化しましょう。とっても見やすくなりましたね！
最後にこのforeachもLINQに書き直して、ソース全体を見てみましょう。動作も全く同じであることが確認できました。



