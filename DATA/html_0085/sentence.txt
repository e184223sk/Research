たまーにXamarin触るんですけど、大体EFCoreとSQLite周りでハマります。
主にMigration出来るようになるまでの手順が分からなくなります。
そろそろプロジェクト作る都度ネットで色々調べて初期設定する状態から卒業したいので、
自分用メモ兼ねて最初の手順をまとめておきます。
ここは詰まるポイント無し。Visual Studioさんに全投げ。データベースに保存するテーブル用クラスと、アクセス用DbContextをまとめるDLL用のプロジェクトを作ります。
.NET Standardのクラスライブラリで良いです。

Migration実行するときには.NET Coreで動くプロジェクトが必要です。
Xamarinは動かせないので、Migrationをするためだけのダミープロジェクトを追加します。

Mictosoft.EntityFramework.Core.Sqliteと、Mictosoft.EntityFramework.Core.ToolsをNugetからインストールします。Mictosoft.EntityFramework.Core.Sqlite
Mictosoft.EntityFramework.Core.Tools

こうやって
こう。ここも詰まるポイント無しです。先に作ったDLL用プロジェクトにModelとDbContextを追加します。
ざっくり書いていきます。とりあえずモデル２つとコンテキストを作りました。MigrationをするためにはDbContextにパラメータなしのコンストラクタと、データベースプロバイダーを構成する手段が必要です。
「データベースプロバイダーを構成する手段」で手っ取り早いのは、OnConfigureをoverrideすることっぽいので、実装していきます。いきなりごっそり増えましたね。
ここは正直有識者がいらっしゃったら是非相談したいポイントです。SQLiteのプロバイダーを指定するため、OnConfiguring内でUseSqliteしています。
この時、UseSqliteの引数として接続文字列を渡す必要があります。ファイル名は定数[dbName]に指定してありますが、ファイルを保存しておく場所は実行するOS(AndroidとかiOSとか)によって変わります。
その為、コンストラクタでファイルの場所だけ受け取れるようにしておいて、接続文字列を組み立てる際に完全パスに変えています。そしてMigrationが実行できるように、パラメーターを受け取らないコンストラクタも定義します。
実際のコードの中でパラメーター無しコンストラクタを呼び出すと、ファイルの場所指定が空白のままOnConfiguring→UseSqliteされるので結構ヤバいことになります。変な所にSqliteDB作られるとか、アクセス不可でエラーになるとか……なので、実際にコード書くときは[Obsolate]付けるとかで対処した方が安全かもしれませんね。
ちなみにMigration実行時はパスとか関係ありません。ともあれ、これで準備が整いました。「最初にやること」としては前セクションまでで終わってたりしますが、せっかくなのでMigrationのコマンドもおさらいしておきます。
Migrationクラスを作成するコマンドはこんな感じです。今回の構成の場合はこうですね。
[dotnet ef]コマンドが見つからない的なエラーが出た場合はこの辺とか見てインストールしましょう。
参照設定ちゃんとしてるのに[Could not load assembly 'なんとか'. Ensure it is referenced by the startup project 'かんとか'.]見たいなエラーが出る場合は、一度リビルドすると良いかもしれません。
出来ました。以降変更がある場合はさっきのコマンドを使ってMigrationクラスを作っていく形になります。いつも困るところをまとめてみました。
一番最初にやる処理ってプロジェクトごとに1回しかやらないので結構忘れがちです。
自分用メモとしてもQiitaは有効だと思うので今後も書いていきます。//後は文章ちゃんとまとめる能力が欲しい。
//記事作ると大体クソ長になるのやめたい。


