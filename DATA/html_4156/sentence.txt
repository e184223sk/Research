More than 1 year has passed since last update.年末ですので初投稿です。……少なくともC#カテゴリでは初投稿です。for文で回しながらアクセスするなら最速はポインタってはっきりわかんだね。Unity 2018.1から登場した新機能です。
NativeArray&lt;T&gt;はガベージコレクションの対象ではない、Unityのネイティブランタイム層でメモリアロケーションされた配列です。
NativeArray&lt;T&gt;は構造体であり、ジェネリック型引数Tとして値型を取ります。Tは更にBlittable型でなくてはなりません。NativeArrayを使用する際のメリットとして以下が挙げられます。「1万要素のint型配列・NativeArrayを用意して、それに順次書き込みをする」を1万回実行してその累計時間をSystem.Diagnostics.Stopwatchクラスで計測しました。
厳密な事を言えば配列を確保する部分をStopwatchで計測する時間外に除けた方が良いです。平均実行時間ms(10000回)Editorでの実行結果は配布するプロダクトと無関係なので参考程度に考えてください。
Monoビルドでは.NETのマネージドな配列を扱う方がNativeArray&lt;T&gt;より高速に動作します。
IL2CPPビルドではマネージド配列よりもNativeArray&lt;T&gt;の方が高速です。実験してみて驚いたことはIL2CPPビルドでのマネージド配列がMonoのそれより明らかに低速なことでした。
何故なのでしょうかね？System.Runtime.CompilerServices.Unsafeクラスによる擬似ポインタはEditor環境以外では他の手段の倍以上遅かったので、ジェネリックなポインタを使用したいという強い動機がない限り使わない方が良いでしょう。最速はポインタってはっきりわかんだね。C# 7から導入された言語機能である参照戻り値と参照ローカル変数、C# 7.3から追加された機能であるref再代入を活用することでジェネリック型のポインタのようなものを扱うことが可能です。
System.Runtime.CompilerServices.Unsafeクラスは参照をひたすら暗黒魔術でポインタの如く扱うことに特化したクラスです。
Addメソッド=ポインタの加減算
Asメソッド=ポインタの型変換
と解釈できます。
C#ではポインタの型にジェネリック型を指定できないため、ジェネリックなポインタを扱いたいならばUnsafeクラスを利用しましょう。
このクラスを活用した例としてはSystem.Span&lt;T&gt;構造体が挙げられます。


