More than 3 years have passed since last update.xUnit.netを使ってテストする方法として、テストプロジェクトの作成、テストの作成、テストの整理 のやり方を紹介。　※この記事は Visual Studio 2017 / xUnit.net 2.2 の環境で書かれています。※注意：テスト対象のプロジェクト(Desktop, .NET Core, UWP, ...)によって違うので About xUnit.net - Getting Started を見てね。クラシック(!)デスクトップアプリのテストプロジェクトにはクラスライブラリプロジェクトを使う。
NuGet パッケージマネージャーコンソールで xunit をインストールする。インストールするプロジェクトを間違えないように。※NuGet パッケージマネージャーコンソールがない場合は メニュー ⇒ ツール⇒ NuGet パッケージマネージャー ⇒ パッケージマネージャコンソール で表示できる。コードスニペットがあると捗るので入れておく。xUnitTestCodeSnippets の xunit-testmethod.snippet を適当な場所にダウンロードし、Visual Studio に インポートする。手順：メニュー ⇒ ツール ⇒ コードスニペットマネージャー ⇒ インポート ⇒ xunit-testmethod.snippetインポート後、コードスニペット xtestm, fact, afact, theory, atheory, xtestc が使えるようになる。
Chainning Assertion は @neuecc 氏が作成したテストコードが書きやすくなる拡張メソッドと便利メソッド集。xUnit.net に必須ではないが、イケてるので入れておく。この記事でも Chainning Assertion を使う。通常の Assert と Chaining Assertion の比較：下のほうが好きになれそうな人にはおススメ。Chaining Assertion は NuGet にもあるけど古いので、githubから直接コードをコピってテストプロジェクトにぶち込むのが良い。
https://github.com/neuecc/ChainingAssertion/blob/master/ChainingAssertion.xUnit/ChainingAssertion.xUnit.csこの ChainingAssertion.xUnit.cs にはチュートリアルも乗ってるので、使ったことない人は眺めておくとよい。こんなかんじ。ビルドするとテストエクスプローラーに作成したテストが表示されるので、選択して実行すればよい。※テストエクスプローラーがない場合は メニュー ⇒ テスト ⇒ ウィンドウ ⇒ テストエクスプローラー で表示できる。メソッドに Fact または Theory 属性のどちらかを付けるとテストケースとして認識されるようになる。通常のテスト。テストエクスプローラーに表示されるテスト名を DisplayName で設定できる。DisplayName を設定しない場合はメソッド名が表示される。テストを一時的に無効化したい場合は Skip を設定する。パラメータ付きテストを作成したいときは Fact の代わりに Theory を使う。
Fact と同様に DisplayName と Skip は設定できる。入力値が数値や文字列ならこれで。複数並べることもできる。入力値をプログラムで生成したい場合は MemberData が便利。また、入力値が複雑な型の場合は InlineData を使えないので MemberData を使う。戻り値が IEnumerable&lt;object[]&gt; なプロパティまたはメソッドをテストデータとして使用できる。テストデータ作成方法が複雑な場合、上記のMemberDataを使うとテストコードが見づらくなってくる。そんなときはテストデータ作成ロジックを別のクラスに持たせることもできる。DataAttribute を継承したカスタム属性を作成すればよい。ExcelDataExample が参考になる。xUnit.net ではテストの Setup はコンストラクタ、Teardown は IDisposable.Dispose() に定義する。ちなみにインスタンスはテスト実行毎に作成される。上記の例では、Class3 は3回インスタンス化される。Assert.Throws() か Assert.ThrowsAny() を使う。テストメソッドを戻り値 Task で定義する。Exception のテストには、Assert.ThrowsAsync() や Assert.ThrowsAnyAsync() が用意されている。 xUnit.net では テストメソッドの中で Debug.WriteLine(); してもメッセージ出力を確認できない。代わりに ITestOutputHelper インタフェースを使う。タグ付け的なことをしたかったら Trait.テストエクスプローラーで右クリック ⇒ グループ化 ⇒ 特徴 で、Trait で分類される。テストプロジェクトのプラットフォームを x64 にするとテストエクスプローラーにテストが表示されなくなるので注意。ここで紹介したやり方でだいたいのテストは作成できるようになる。はず。テストを並列に実行したいとか、テストにコンテキストを持たせたいとかなってきたらドキュメントを参照。
xUnit.net - Documentation// テストが複雑になってきたと感じたら、もしかしたらそのテストは捨てたほうが良いかも。


