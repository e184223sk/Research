using UnityEditor;
using UnityEngine;
using UnityEngine.UI;

    /// &lt;summary&gt;
    /// お知らせ表示
    /// &lt;/summary&gt;
    public class InfoGetter : MonoBehaviour
    {
        [Header("表示するオブジェクト")]
        [SerializeField]
        private GameObject prefab = null;
        [Header("表示させる場所の親")]
        [SerializeField]
        private Transform InstantiateParent = null;//Instantiateで複製したオブジェクトの親

        void Start()
        {
           CommonValues.Message.Reverse();
            for (int i = 0; i &lt; CommonValues.Message.Count; i++)
            {
                GameObject item = GameObject.Instantiate(prefab, InstantiateParent);

                var text1 = item.FindChild("InfoText").GetComponent&lt;Text&gt;();
                text1.text = CommonValues.Message[i];

            }
        }

#if UNITY_EDITOR
        /// &lt;summary&gt;
        /// InspectorからReset選択時に自動アタッチ
        /// &lt;/summary&gt;
        private void Reset()
        {
            //指定フォルダのprefabを全取得
            var guids_prefab = AssetDatabase.FindAssets("t:prefab", new string[] { "Assets/Prefabs" });

            for (int i = 0; i &lt; guids_prefab.Length; i++)
            {
                //アタッチさせたいオブジェクト名を拡張子付きで書く
                prefab = AssetDatabase.LoadAssetAtPath&lt;GameObject&gt;("Assets/Prefabs/Info.prefab");

            }
            // ヒエラルキー上のすべてのオブジェクトを取得
            Object[] allGameObject = Resources.FindObjectsOfTypeAll(typeof(GameObject));
            // 取得したオブジェクトの名前を表示
            foreach (GameObject obj in allGameObject)
            {
                Debug.Log(obj.name);
                //アタッチさせたいオブジェクト名を書く
                if (obj.name == "InfoContent")
                {
                    InstantiateParent = obj.transform;

                }
            }
        }

#endif
}



