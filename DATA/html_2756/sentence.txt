More than 1 year has passed since last update.仕事でWindowsフォームよく使うけど、UI周りの知識というか理屈というか原理というかそのあたりが弱いなと思ったから。
お勉強がてら自分で改造してみれば何か見えてくるかと思ったから。
あと台風が来ててお出かけできなかったから。
直線部分がTextBoxになっています。
TextBoxなのでキーボード入力もできます。TextBoxを継承して、OnPaint拾って直線を描画する方法でやってみる。結果

罫線が描画されませんでした。なんで…「Windowsフォーム textbox onpaint 発生しない」で検索すると、どうやら「SetStyle」メソッドとやらで「UserPaint」を有効にしないとそもそもOnPaintが呼び出されないらしい。結果

一見よさそうだが…
！？
文字入れたら予想外のバグり方で草。
どうやらUserPaintを有効化すると、既存のTextBoxで行われている描画処理も自前で実装しないといけないようです。
こうなるとUserPaintはダメだ。どうするか…天の声「ウィンドウプロシージャってあるやん？」それな！
というわけでウィンドウプロシージャでウィンドウ描画時に線を引く感じでやってみます。
ちなみにMessageの番号など覚えていませんのでGoogle先生に訊きます。結果

良さそうだが…

文字入れたら下線消えました。
でもこれは予想の範囲内。ウィンドウメッセージ拾って「描画時」に下線を描画しているので、TextBoxデフォルトの描画時には下線描画されないので消えるはずです。
ということは、TextBoxの描画が発生したときに同じように描画すればいいはず。とりあえず罫線引くメソッドだけ切り出しておいて、とりあえず[OnTextChanged][OnMouseDown][OnGotFocus]をoverrideして下線を描画するようにしてみます。
結果

画面表示時はこう

文字入れるとこう。
再描画の拾い方、もう少しきれいにやる方法もありそうですが、とりあえず今回はこれで完成にします。
使っていく中で下線が消えるタイミングが見つかったら、都度On****で追記すればいいという方針です。既存コントロールのUIに「ちょっとだけ」手を加えたい場合、WndProc使うのが一番簡単な感じがします。
UIは完全に自前でやる覚悟がある、もしくは既存コントロールの動作だけ活かしてUIを別物にする場合は
UserPaintを有効にするのがいいのかなぁ。
キーボードから文字入力できるタイプのコントロールを作るのは結構骨が折れる気がします。
以上です。


