More than 3 years have passed since last update.以前の記事
クラス図の書きかた（集約とコンポジションの意味の違い）
コンポジションのサンプルコード（「クラス図の書きかた（集約とコンポジションの意味の違い）」の補足）
では、集約とコンポジションのC#実装例を書きました。しかし、コンポジションの実装パターンを、毎回コーディングするのは面倒だと思います。ですので、集約やコンポジションを設定できる「関連」を実装しやすくするクラスを作りました。https://github.com/azuki8/umlLib
この中の[umlLib]-Association.csが関連クラスです。
※これ以外は基本的に単体テスト用コードなので不要。サンプルコード中の「Association&lt;T&gt;」が「関連」クラスです。
&lt;T&gt;に関連端の型を入れて使います。
サンプルコードでは、関連端の型は「Hogera」です。こんな感じで、Association&lt;T&gt;で関連を持つことができます。第1引数でコンポジット（＝コンポジション）を選ぶと、
関連端の要素が、複数の全体概念に保持されないようにチェックされます。第2,第3引数で多重度を設定します。
多重度は、初期化・Add・Remove時にチェックされます。その他、初期値や unique , ordered制約 , orderedの順序を決めるプロパティ名を指定できます。UMLでいうところの「関連」をイメージしたクラスです。ただし、UML仕様書の「関連」をそのままコードにしたものではありません。
従来の関連の実装のしかたに、集約や多重度などの機能を追加したラッパーのようなものだとご理解ください。「関連」の実装しやすさやコードの読みやすさを優先させて考えました。関連端の型&lt;T&gt;を指定するクラスを含め、以下のクラスを用意しています。関連 多重度[n..m]関連 限定子付き 多重度[0..1]関連 限定子付き 多重度[0..1]関連 多重度[n]集約種別 None:普通の関連、Shared:集約(白抜きひし形の関連)、Composite:コンポジション(黒塗りひし形の関連)UMLモデリングツールでコード生成すると、属性と関連は同じコードとして出力されることがありますが、
オブジェクト指向で分析モデリングするとき、
「オブジェクト間のつながり」と「オブジェクトの属性（＝特徴や性質）」は、私の中では異なるものです。
これらをコーディング時に同じ実装にすると、コードを読んだ時の直感的な違いがなくなってしまいます。モデルベース開発は、モデルとコードとをツールで相互変換しながら開発することも可能ですので、「モデルに戻るからいいじゃないか」とも思えますが、詳細を作りこむ/不具合調査する段階は、手作業が多いと思います。
その時は、コードを見ながら実装するわけですから、直感的な違いがなくなると、モデル上での認識が歪みやすくなります。コードに手を入れる人の全員がモデルを意識できるほどの実力のある開発現場ばかりとは言えないですから、プログラマにやさしい実装方法を考えた方が良いと思うのです。例えば、「社員クラス」の属性に「氏名クラス」が付いているとき、「属性ならば社員インスタンスの特徴（一部）なんだな、」という印象を受けると思います。
それに対して、「社員クラス」の関連に「氏名クラス」が付いているとき、「社員インスタンスとつながりを持った別のもの（例えば工作員としての名前とか^^;）」と認識されやすくなります。
モデルの段階でどちらと認識されて作られたものなのかを直感的に読み取れずに作業すると、インスタンスの特徴として認識したり、社員インスタンスとつながりを持った別のものだと認識したりするようになり、開発効率や不具合混入に大きく影響すると考えます。モデルベースで開発するならば、そこまで考えてお膳立てすると、私個人は分かりやすいと思うのです。関連クラスではありません。
UML仕様の関連をそのまま実装したものではありません。このクラスは、githubに上げてあります。
このようなUMLを、プログラマとして分かりやすい形式で実装できる補助ライブラリを作って、
分析モデルからm2tで、補助ライブラリを利用したコードを生成することで、モデルベース/モデル駆動開発でありながら、
プログラマがコードを読みやすくメンテナンスしやすい開発環境を作ってみたいと思います。まだ自分でツール開発などで実践に使って改善すると思いますので、時々githubの更新を覗いてください。
よろしくお願いします。


