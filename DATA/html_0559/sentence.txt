Azure の PaaS からオンプレミスへ接続できるサービスがないか調べていたら、Azure Relay で実現できそうでしたので、Azure Relay を試してみました。Azure Relay の概要のページにもオンプレミスのサービスとクラウドとの通信についての記載があります。Azure Relay には、ハイブリッド接続（Web ソケット or HTTP）と WCF リレーがありますが、今回は HTTP を使用したハイブリッド接続のチュートリアル＋α をやってみました。
ハイブリッド接続と WCF リレーの詳細な説明も Azure Relay の概要ページに記載があります。Relay 名前空間の作成 で作成した名前空間の画面より「ハイブリッド接続」→「＋ハイブリッド接続」と選択し、ハイブリッド接続の名前を入力し、「作成」ボタンをクリックします。ハイブリッド接続の動作確認のためのアプリの作成を行います。クライアント側、サーバー側のアプリ共に Relay 名前空間への接続情報を記載します。接続情報の KeyName, Key は共有アクセスポリシー画面より取得します。
このアプリは、クライアントからの HTTP リクエストを受信すると、レスポンスとして hello! を返します。※ チュートリアルでは、コンソール アプリ (.NET Framework) でアプリを作成していましたが、コンソール アプリ (.NET Core) でも作成できました。このアプリは、サーバーに HTTP リクエストを送信し、サーバーからのレスポンスをコンソールに出力します。※ チュートリアルでは、コンソール アプリ (.NET Framework) でアプリを作成していましたが、コンソール アプリ (.NET Core) でも作成できました。Visual Studio でサーバー (リスナー) アプリをデバッグ実行します。
コマンドプロンプトが起動し、以下のメッセージが表示されます。サーバー (リスナー) アプリを実行した状態で、別の Visual Studio でクライアント (送信側) アプリをデバッグ実行します。
コマンドプロンプトが起動し、以下のメッセージが表示されます。サーバー (リスナー) アプリは、リクエストを受信すると hello! を返し、クライアント (送信側) アプリは、サーバーからのレスポンスをコンソールに出力するので、クライアント側のコンソールに hello! がコンソールに出力されています。
これで、クライアントとサーバーの通信ができていることが確認できました。もともとやりたかったことが、「Azure の PaaS からオンプレミスへ接続できるサービスがないか」だったので、次の構成で試してみます。プログラムも少し変えてみます。サーバー (リスナー) アプリは、受信した文字列をコンソールに出力するよう変更します。変更前のコード変更後のコードIaaS は Azure に VM（Windows Server 2019 Datacenter） を用意し、コンソールアプリを実行できるように .NET Core SDK をインストールします。また、HTTPS でハイブリッド接続するので 443 port を開けます。プログラムの変更と、IaaS の準備ができたら、サーバー (リスナー) アプリを IaaS に配置して、dotnet run でアプリを実行します。クライアント (送信側) アプリは Azure Functions のコードに書き換え、リクエストボディの内容をリスナーに送信するように変更します。ソースコードを Azure Functions にデプロイし、Azure Functions の「テストと実行」よりリクエストを送信してみます。testtest を送信しました。リスナー側のコンソールに testtest が出力されています。
これで、PaaS から IaaS へ接続できることが確認できました。


