More than 1 year has passed since last update.コネクタが沢山あったり、ループの中にジャンプしたり、c言語でもめったに見ないようなフローをc#で実装することになりました。
何とか実装したのですが、実装したコードがフローと合っているか検証するため、Graphvizを生成するトレース用のコードを埋め込み、フローチャートの生成とトレース（カバレッジ）を行いました。
実はこの埋め込み作業を手作業でやったんです。
以下のような感じです。出力結果は以下のようになります。トレースした場合通過した個所を赤、回数を括弧内に表示します。
これからが本題ですが、このコード生成を自動化して動作状況を可視化できないものかと考えています。
(1)ソースコードのフローチャートを生成する
　この記事です。
　コードはだらだら作っただけなので、また機会があれば見直したいと思います。
(2)実行結果をフローチャートでトレースする。
　上記TargetCodeの生成が前提となります。
　こちらは 「Roslyn の構文解析を使ってデバッガーを自作する」が非常に参考になります。
　できたも同然と思っていますがやっていません。そのうちやるかも知れないので今回の記事は「(1)」としました。
(3)実行箇所を画面で判るようにする。
　こちらは(2)のデバッガーでも良いのですが、実行箇所をSVGで描画したりブレークしたりする機能です。
　実験コードは作ったもののWPFコントロールにしたいとか余計なことを考えてしまって先に進んでいません。記事にする場合「(3)」になると思います。Sample.csのCreatDotに相当する部分の実装です。
自分なりに調べた結果ですが、Microsoft.CodeAnalysis.CSharpを使えばソースコードをAST化して解析できることが判りました。
すべてコードのフローチャート化が目的ではないので、対応しないパターン沢山あります。また非同期処理の動作は無視されます。
テストプログラムでは以下の文を解析対象としています。以下のソースコードなどでフローチャートを作成してみました。
尚、コードの内容は意味を持ちません。ソースファイル単位にフローチャートを出力します。
制約はありますがコメントも反映します。
ローカル関数がどこに属するか現状判りませんがクラスタ化すれば良いと思います。
以下はc#のソースファイルを入力してdotファイルを出力するコンソールアプリです。


