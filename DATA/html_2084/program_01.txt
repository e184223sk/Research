
   public class MutexWrapper : IDisposable
    {

        /// &lt;summary&gt;
        /// 実インスタンス
        /// &lt;/summary&gt;
        private Mutex instance;

        /// &lt;summary&gt;
        /// コンストラクタ
        /// &lt;/summary&gt;
        /// &lt;param name="initiallyOwned"&gt;&lt;/param&gt;
        /// &lt;param name="name"&gt;&lt;/param&gt;
        public MutexWrapper(bool initiallyOwned, string name)
        {
            instance = new Mutex(initiallyOwned, name);
        }

        /// &lt;summary&gt;
        /// 取得
        /// &lt;/summary&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public virtual bool WaitOne()
        {
            return instance.WaitOne();
        }

        #region "Disposeサポート"

        private bool disposedValue = false;

        protected virtual void Dispose(bool disposing)
        {
            if (!disposedValue)
            {
                if (instance != null)
                {
                    instance.ReleaseMutex();
                    instance.Dispose();
                    instance = null;
                }
                disposedValue = true;
            }
        }

         ~MutexWrapper()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        #endregion
    }

