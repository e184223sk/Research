現在の C# は .NET Compiler Platform SDK (Roslyn API) を通して構文解析などが開発者が自由に扱えるようになっています。これを利用することで、プロジェクトで設定したコーディングガイドラインに違反している構文を、IDE を通してリアルタイムで指摘できるようになりました。ここでは、特定の構文に対してコンパイラーとしてエラーを出すようにする仕組みを作成する方法をご紹介します。Visual Studio を使用します。拡張機能扱いになるので、「Visual Studio 拡張機能の開発」ツールセットを追加し、個別に「.NET Compiler Platform SDK」も追加するようにする必要があります。「.NET Compiler Platform SDK」はデフォルトでチェックが入っていないので忘れがちです。
準備ができたら、Visual Studio で新規プロジェクトから Analyzer with Code Fix (.NET Standard) を選択して作成します。
作成すると型名が camelCase になってるのを指摘するアナライザーがテンプレートになるプロジェクトができあがっていますので、これをもとに新しく作ります。コメント以外のコード中に全角スペースがあった際にエラーとなるアナライザーを作ってみます。
指定したプロジェクト名に .CodeFixes や .Package がついていないプロジェクトに新しいクラスファイルを作成します。名前は適当に AL0001 みたいにしておきます。
Resource.resx を開き、以下のように名前と値を設定します。AL0001.cs へ戻り、テンプレートを参考に以下のように実装します。このあたりはほぼテンプレートに近いので、複数作る時はコピペするなり T4 テンプレートにするなりしておくと便利かも。ここまで実装したら次は実際にコード解析をおこないます。複雑な構文木を覚えていられないので、ここでは IDE の力を使います。下準備で「.NET Compiler Platform SDK」を Visual Studio にインストールしていれば、表示 メニューから その他のウィンドウ をポイントすると Syntax Visualizer が追加されているので、これを選択します。これを使うと、今見ているコードの構文木を種類単位で見ることができるようになります。

開いただけだとピン留めされておらず、コード部分をクリックするたびに引っ込んでしまうので、使う時はピン留めしておくと楽です。コンパイラーが構文解析する中で、いくつかのタイミングに介入して独自に処理を追加することができます。実装する際によく見ているこの記事からざっくりと紹介するとこの辺を使うとある程度作れるかなあという感じです。ここからが結構地味で、テスト用プロジェクトを作って指摘したいコードを実装しておき、Syntax Visualizer を使って当該部分のツリーを見ながら、アタリをつけてデバッグ実行してブレークポイントを置いて値の変化を見ながら…などやっていくことになります。今回は「全角スペース」が使われている箇所を調べるように実装したいので、RegisterSyntaxTreeAction でよいかと思います。
Syntax Visualizer を見ると、スペースは WhitespaceTrivia として解析されているようです。

ということで、以下のように実装します。Descendant~~~ メソッドを使うと構文木の下方向への検索ができるので、検索したい内容にあわせて DescendantNodes DescendantTokens を使う感じです。ちなみに逆方向 Ancestors もあります。特定の構文に対してどの変数に代入・宣言されているかなどを見るときに便利です。違反を IDE やコンパイラーに通知する場合はこういうコードを書けば OK です。各種構文にはそれが書かれている位置と長さを持っているので、必要に応じて Ancestors したりして当該の構文全体を指摘したりすることもできます。このままだと自動生成コードまで見てしまうので、このアナライザーは自動生成コードを見ないぞって決める際は Initialize メソッドに context.ConfigureGeneratedCodeAnalysis(GeneratedCodeAnalysisFlags.None); を書いてあげてください。複数同時に解析して欲しい場合も Initialize メソッドに context.EnableConcurrentExecution(); を書けば OK ですが、同一アナライザーが複数回同時に呼ばれる可能性があるので、Action 外で状態保持をしている場合は注意が必要です。あとはビルドして、できあがった dll ファイルを使用したいプロジェクトの アナライザー に追加すれば動くはずです。

Visual Studio 2019 Version 16.2 以降、Rider 2020.2 以降から、アナライザーのルール設定が ruleset ファイルの他に .editorconfig ファイルでもできるようになりました。これにより、どのディレクトリでルールを適用するかを設定できるようになっています。
例えば Unity であれば、アセットストアから拾ってきたソースコードまで見てしまう問題が解消する訳です。Unity は .csproj を自動生成するため、IDE から追加しても消えてしまいます。それを防ぐために、以下のコードを作成しておきます。生成したアナライザーの DLL ファイルは、Unity プロジェクトディレクトリ Assets/ 内に Analyzers ディレクトリを作り、そこに入れておきます。実際に運用しているルールをひとつご紹介します。
プロジェクトでは空文字を指定するのに string.Empty 変数を使用せず、 "" を使うようルールを定めています。string.Empty を使った際にエラーとするルールが用意されています。このルールは単に string.Empty かどうかを見ているだけでなく、 System.String.Empty を見ているかを確認するようにしています。こんな感じで出ます。
特定ルールに対して検知したものを通知するだけでなく、どうすればいいかの修正を提案することもできます。

これを作成するには、.CodeFixes がついたプロジェクトを使用します。こちらに以下のようなコードファイルを追加します。ビルドすると別バイナリになるので、これも別途参照設定に追加してください。Unity であれば、先ほど作った Analyzers ディレクトリに入れれば OK
上記コードについての詳しいことはこの記事を見てください。ルールも修正提案も、この記事にだいぶ助けられています…。「.NET Compiler Platform SDK」により、静的解析だけではできなかった指摘もできるようになり、かつコード修正の提案もできるようになっています。うまく活用することで作業者にリアルタイムで規約違反を指摘・修正のエスコートまでできる最強のツールになること間違い無しです。


