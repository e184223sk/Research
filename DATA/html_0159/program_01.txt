
using System.Collections.Generic;

namespace WrapLauncher
{
    public class ConfigFile
    {
        /// &lt;summary&gt;
        /// 設定ファイル名
        /// &lt;/summary&gt;
        public const string ConfigFileName = "WrapLauncher.path";

        /// &lt;summary&gt;
        /// 区切り文字
        /// &lt;/summary&gt;
        public const char Delimiter = '\t';

        /// &lt;summary&gt;
        /// グループ見出しの先頭記号
        /// &lt;/summary&gt;
        public const string GroupTitleHeader = "//";

        /// &lt;summary&gt;
        /// グループ見出しのカラム位置
        /// &lt;/summary&gt;
        public const int GroupTitleColumnIndex = 0;

        /// &lt;summary&gt;
        /// カラム位置
        /// &lt;/summary&gt;
        public static IReadOnlyDictionary&lt;string, int&gt; Columns = new Dictionary&lt;string, int&gt;
        {
            {"Color", 0},
            {"ButtonTitle", 1},
            {"Path", 2},
        };

        /// &lt;summary&gt;
        /// 設定ファイルパス取得
        /// &lt;/summary&gt;
        /// &lt;returns&gt;設定ファイルのフルパス。存在しない場合は空文字列を返す。&lt;/returns&gt;
        public string GetPath()
        {
            // EXEのパス取得
            string appPath = App.GetAppPath();

            // 設定ファイルのフルパス組み立て
            string cfgFilePath = System.IO.Path.Combine(appPath, ConfigFileName);

            // 設定ファイル存在チェック
            if (System.IO.File.Exists(cfgFilePath))
            {
                return cfgFilePath;
            }
            else
            {
                // 設定ファイルなし
                return string.Empty;
            }
        }

        /// &lt;summary&gt;
        /// グループ見出し判定
        /// &lt;/summary&gt;
        /// &lt;param name="values"&gt;&lt;/param&gt;
        /// &lt;returns&gt;グループ見出しならtrue&lt;/returns&gt;
        public bool IsGroupTitle(string[] values)
        {
            return values[GroupTitleColumnIndex].StartsWith(GroupTitleHeader);
        }

        /// &lt;summary&gt;
        /// グループ見出し取得
        /// &lt;/summary&gt;
        /// &lt;param name="values"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public string GetGroupTitle(string[] values)
        {
            return values[GroupTitleColumnIndex].Substring(GroupTitleHeader.Length);
        }

    }
}

