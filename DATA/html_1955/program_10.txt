
public readonly struct LogWithCallerState
{
    #region ctor

    public LogWithCallerState(string logmessage, object[] logMessageArgs, string callerMember, string callerFilePath, int callerLineNumber)
    {
        if (logmessage != null &amp;&amp; logMessageArgs?.Length &gt; 0)
        {
            LogMessage = () =&gt; string.Format(logmessage, logMessageArgs);
        }
        else
        {
            LogMessage = () =&gt; logmessage;
        }

        CallerMember = callerMember;
        CallerFilePath = callerFilePath;
        CallerLineNumber = callerLineNumber;
    }

    public LogWithCallerState(Func&lt;string&gt; logMessage, string callerMember, string callerFilePath, int callerLineNumber)
    {
        LogMessage = logMessage;
        CallerMember = callerMember;
        CallerFilePath = callerFilePath;
        CallerLineNumber = callerLineNumber;
    }

    #endregion

    public string CallerMember { get; }
    public string CallerFilePath { get; }
    public int CallerLineNumber { get; }
    public Func&lt;string&gt; LogMessage { get; }

    public override string ToString()
    {
        return $"{LogMessage?.Invoke()}|{CallerMember}|{Path.GetFileName(CallerFilePath)}|{CallerLineNumber}";
    }

    public static string Format(LogWithCallerInfo info, Exception exception)
    {
        return info.ToString();
    }
}

