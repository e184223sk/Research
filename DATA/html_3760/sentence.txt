More than 1 year has passed since last update.単体テストと副作用 - 第1話 はじまり
単体テストと副作用 - 第2話 オブジェクト指向
単体テストと副作用 - 第3話 DIとモック
単体テストと副作用 - 第4話 副作用の回避
単体テストと副作用 - 第5話 オブジェクト指向への反乱オブジェクト指向といっても、完璧にできる自信無いお(´・ω・｀)
まあ、何となく適当にやってみよう…。GitHubリンクまずは、データ型を定義してみる。続いて、値とデータ型の組をクラスにしよう。そうしたら、プログラムの流れを書いて、と。これで、テストコードが書けるようになったのだろうか…？(＾ω＾)ここでは、テストフレームワークは「xUnit.net」を使っている。
MemberData 属性で指定された Constructor_Data メソッドは、テストである Constructor メソッドに引数を渡す役割がある。
ここで定義された9個の配列の分だけテストが走り、全て通った。やったお。
テストコードが書けたお(＾ω＾)
女神さま、見ていてくれたかな。『…きこえますか…今…あなたのゾウリムシ並みの脳味噌に…直接呼びかけています…』ゾウリムシって単細胞生物では…(´・ω・｀)『…あなたの書いたコードには…2つの欠陥があります…。責務が分離できていないこと…。副作用を回避できていないこと…。では…順を追って見てゆきましょう…』『…TypedValue クラスを見てください…この部分です…』『…TypedValue クラスは何のためのクラスですか…？』えっと…。
TypedValue クラスは、文字列値とそのデータ型の情報を持ったクラスだお。
コンストラクタでは文字列値を受け取って、データ型を自動で判別してる。
あとは、文字列表現を生成する機能もあるね。『…このクラスは…値とデータ型の組の情報と…それにまつわる機能で構成されるべきです…。不要な責務は…排除しなくてはなりません…』ふむ。
つまり、上述のコンソール出力は、このクラスの責務ではない、と。『…その通りです…。更に言えば…このコンソール出力は副作用です…。この種の副作用は…テストコードではテストできません…』そういえば、TypedValue の文字列表現に関するテストが書けてないお…(´・ω・｀)『…テストを妨げる副作用は…何としても回避するのです…』『…前述の通り…副作用はテストが難しいか…または全くテストできません…。副作用の塊である MainFlow クラスを見てみましょう…』この MainFlow クラスは、プログラム全体の流れを記述する static なクラスだお。
標準入力から文字列を受け取り、TypedValue に加工して、1秒ごとに標準出力する。『…TypedValue への変換以外は副作用ですね…』そっか。
だから全くテストできなかったんだね。
…？
さっき女神さまが言った、「副作用の回避」ってどうやるんだお(´・ω・｀)？
他のクラスに副作用のある責務をまとめたとして、その機能を使ったら、使った側のクラスもテストできなくなるんでは…？『…あなたに"3種の神器"を与えます…。即ち…"テストフレームワーク"…"テストダブル"…"依存性の注入"です…。次回までに…使い方を覚えてくるのです…』宿題が出たお(・ω・)～ 次回へ続く ～単体テストと副作用 - 第1話 はじまり
単体テストと副作用 - 第2話 オブジェクト指向
単体テストと副作用 - 第3話 DIとモック
単体テストと副作用 - 第4話 副作用の回避
単体テストと副作用 - 第5話 オブジェクト指向への反乱


