More than 1 year has passed since last update.皆さん
こんにちは、こんばんは
TomoProgです。今回はSIerの現場で実際に出会ったこれはヤバいと思ったコードをリファクタリングしてみようと思います。俺だったらこうする！
そこはこうすべきなのでは？
という意見は大歓迎ですので、何かあればぜひコメントでお知らせください。それでは始めていきましょう。ヤバいと思ったコードは下記のコードです。
（実際はDBアクセスやエラー処理などがあるため、もっと複雑ですが必要な部分だけを書いています。）パスワード用のユーティリティクラスがあり、そのクラスのパブリックメソッドを呼ぶことで、パスワードのチェック処理や変更処理を行うようです。ここでヤバいと思った点を整理してみます。CheckAndUpdateメソッドはCheck用の処理とUpdate用の処理を担っているため、このメソッドに修正、機能追加が必要になった場合に影響範囲が大きく容易に修正できない状態になっています。
Checkメソッド、Updateメソッドに分けて考えることができれば、それぞれのメソッドを使用している場所のみ影響調査すればよいはずです。
さらに、分けて考えることで、Check、Updateをほかのメソッドで使用したい場合に再利用が可能となります。CheckAndUpdateメソッドは名前からすれば、パスワードを何かしらチェックして、エラーが無ければそのままアップデートしてくれそうに思いますが、引数のフラグを制御することで挙動を変えることができてしまいます。
（このCheckAndUpdateメソッドを本当に命名するとすれば、CheckOrCheckAndUpdateでしょうか。）
メソッドの名称と内部のロジックが違うとなると、メソッド内のすべてのコードを読むこととなり、結果として読むことに工数が費やされてしまいます。実際にヤバい点が修正されるようにリファクタリングしていきます。CheckAndUpdateメソッドはCheckとUpdateという複数の機能を持ってしまっています。
これらの機能を分割して考えてみましょう。Check処理に関連する部分とUpdate処理に関連する部分を抜き出しました。
抜き出すことができたらあとはこれをメソッド化するだけです。つまり、CheckAndUpdateメソッドは小さな機能に分割してあげれば以下のように書けるはずです。大きなメソッドを小さな機能に分割することで、可読性が高いメソッドに変わりました。
さらに、嬉しいことにCheckメソッド、Updateメソッドが独立されており、他のメソッドから容易に再利用する事ができるようになりました。上記のようにCheckAndUpdateメソッドは分割できることがわかったので、ヤバいコードに分割を適用していきます。
ヤバいコードにはすでにCheckとUpdateが存在しているため、そのメソッドの中身を先程、分割したメソッドの中身に置き換えてみます。残念ながら置き換えるだけでは、うまくいかないようです。Updateメソッドの引数がヤバいコードと先ほど分割したコードで異なるため、コンパイルエラーとなってしまいました。
これを解消しないといけませんが、よく見るとCheckAndUpdateメソッドはprivateですし、内部のメソッドからも呼ばれていないため、メソッドごと消してしまって問題なさそうです。コンパイルエラーが解消され、PasswordUtilクラスが綺麗にメソッド分けされました。コードが綺麗になって一件落着とはいかないようです。Updateメソッドはリファクタリングする前はCheckの処理も行っていたはずです。
このままでは今までの動作と変化してしまうため、Checkの処理を組み込みます。よく見ると、削除したCheckAndUpdateメソッドとそっくりになりました。これにて、リファクタリング完了です。CheckAndUpdateが分割されたことにより、可読性がよくなり、修正しやすくなりました。
また、小さなメソッドに切り分けたことで再利用も容易になりました。ここで、メソッド名はUpdateなのにCheckもしてしまっているではないかと思う人もいるかもしれません。
その通りですが、もし、このUpdateメソッドがCheckメソッドを呼び出さないとなった場合、呼び出す前に必ずCheckメソッドを呼び出さなければならないという制約が生まれることになります。
すべての使用箇所でそれを書くことよりはUpdateの内部に組み込んだほうがコストが低いのは明らかだと思います。今回は実際に現場で見たコードとほぼ同じコードを自分なりにリファクタリングしてみました。
こんなコードが本当にあるのか？と思った人もいるかもしれませんが、SIerの現場にはこういったコードが山程あります。
こんなコードに一度も出会ったことがないという人はすごく恵まれた環境で仕事ができていると思います。羨ましい限りです。冒頭にも書きましたが、
俺だったらこうする！
そこはこうすべきなのでは？
という意見は大歓迎ですので、何かあればぜひコメントでお知らせください。それではまた。TomoProg


