More than 1 year has passed since last update.或るブラック特許事務所の午後。ワイ「あー、今日もワード、明日もワードで明細書書きや。コロナ禍いうても出社してるんや。」
ワイ「かといってテレワークやと画面の反応が遅くてストレスやしなあ。」
ブラック所長「今日が納品締切日の、Ａ社さんへの特許明細書できたか？」
ワイ「はい、できました！」ブラック所長「なんやこれは、段落番号がデタラメやないか！」
ブラック所長「なんで【先行技術文献】の直後に段落番号【０００４】を入れてるんや！　段落番号を入れてもええ項目と、段落番号を入れてはいかん項目を覚えや。」
ブラック所長「ほんで、数式【数１】と文章との区切りには段落番号を入れんとな。」
ブラック所長「【００１０】の次にまた【００１０】があるぞ、連番で記載な！」
ブラック所長「図１の説明のあたりは段落番号を入れすぎ！　改行があるからいうて、１行ごとに機械的に入れたらあかん。クライアント企業から水増しやゆうてクレームくるぞ。」
ブラック所長「ここ、『図２は、物質エネルギ変換装置の動作を説明する図である。』ゆうて、違う図面のことを書き始めとるから、こういうところに段落番号を入れんとあかんのやが、なんでここに入っとらんのや。この次に段落番号【００１５】が入っとるけど、ここは意味としての区切りやないやろ。」ワイ「は、はい（白目）」
ブラック所長「段落番号の振り方がええ加減やと、クライアント企業に、中身もその程度の品質だって思われるぞ！」
ブラック所長「納品時に厳しくチェックされるし注意せなあかん！」
ワイ「はい（白目）」
ブラック所長「ほな、ワシはとりあえず帰るぞ。」
・・・
ワイ「あー、ブラック所長はとっとと帰ってしもうたか。なんや最近の所長は、どうでもいい重箱の隅つつきばっかやなあ。まあええわ、こんな重箱の隅なところは、プログラムで生成したるぞ。」ワイ「段落番号を連番にするだけやったら、WORDのフィールドコードでもええんやがな。段落番号を入れてはいけない項目だとか、段落番号を入れなきゃいけない項目だとか、覚えるのも面倒だし。意味の区切りとかもあるしな。」ワイ　「特許明細書の書式について書かれた文献を見つけたで。根拠条文は、特許法施行規則第２４条の様式第29やな。」「18 明細書（配列表は除く。）には、原則として、発明の詳細な説明の段落、図面の簡単な説明の図の説明若しくは符号の説明又は配列表フリーテキストの繰り返し記載の前に、それぞれ「【」及び「】」を付した４桁のアラビア数字で「【０００１】」、「【０００２】」のように連続した段落番号を付す。ワイ　「つまり、段落番号は４桁の連番ということやな。」この場合において、「【技術分野】」、「【背景技術】」、「【特許文献】」、「【非特許文献】」、「【発明の概要】」、「【発明が解決しようとする課題】」、「【課題を解決するための手段】」、「【発明の効果】」、「【図面の簡単な説明】」、「【発明を実施するための形態】」、「【実施例】」、「【産業上の利用可能性】」、「【符号の説明】」、「【受託番号】」又は「【配列表フリーテキスト】」の見出しの次に段落番号を付し、これらの見出しの前に段落番号を付してはならない。ワイ　「【先行技術文献】は、ここに挙げた中にないのに段落番号を付けたからあかんかったのな。」また、「【特許文献１】」、「【非特許文献１】」、「【化１】」、「【数１】」、「【表１】」、「【図１】」のような番号の次に段落番号を付してはならない。」ワイ　「他に段落番号を付けたらあかんのは、「【書類名】」、「【発明の名称】」、「【発明の概要】」やな。」ワイ　「vectorとかで段落番号の自動付与や振り直し機能を持つものは色々あるなあ、DANRAKU, 特許明細書の段落番号自動置換マクロ, 特許出願支援プログラム 段落振り版, 明細書再付番マクロ・・・」
ワイ　「ユーザインタフェースは参考になるな、段落番号を自動付与する機能、段落番号を連番に振り直す機能、段落番号を削除する機能があればええんやな。」
ワイ　「でも、どのソフトウエアも、ブラック所長の好みにあいそうな段落番号の振り方じゃないなあ・・・。」ワイ　「Visual Studio 2019でWORD VSTO (Visual Studio Tools for Office)アドインとして開発しよ。」
同僚Ｘ「おお、ワイ君はなんかまた作り始めたなあ。」
ワイ　「ええ、段落番号の入力を自動化するんですよ。」
同僚Ｘ「ちゃんとできたら皆にも公開な。」
ワイ　「は、はい。・・・（公開を考えて、VBAじゃなくVSTOで作成して良かった・・・）」ワイ　「はい、エクスさん使ってみてください。」
同僚Ｘ「おお、ちゃんとセットアップもあるなあ。」
ワイ　「・・・（Visual Studioの発行メニューをクリックしただけやけどな。）」
同僚Ｘ「なんやエラーが出てインストールできないぞ。」

ワイ　「これは、詳細情報をクリックしてください。」
ワイ　「この実行ボタンをクリックします。」
同僚Ｘ「なんやエラーが出てインストールできないぞ。」
ワイ　「おかしいなあ」
・・・
ワイ　「わかりましたよ。インターネットからダウンロードしたファイルには、『ゾーン識別子』が付いてるんですけど、このせいです。対策しますから待ってください。」VSTOを用いて作成したアドインの配布方法
https://wiki.clockahead.com/index.php?Coding%2FMSOffice%2FVSTO%2F%C7%DB%C9%DB%A4%CE%CA%FD%CB%A1VSTOにおいてSecurityExceptionによってファイルがインストールできないとき
http://artfulplace.hatenablog.com/entry/2014/05/26/154251ワイ　「はい、エクスさん使ってみてください。」
同僚Ｘ「Install.batをクリックするんやな。」同僚Ｘ「セットアップは無事終わり。そしたら、WordにAppLintとかいうリボンができるんだな。」ワイ　「これが段落追加ボタンです。ボタンを押すと段落が自動で付きますよ。」
ワイ　「これが段落振り直しボタンです。ボタンを押すと、既存の段落を追番に振り直します。」
ワイ　「これが段落削除ボタンです。最初はまっさらにした方がいいときもあります。」
同僚Ｘ「クライアントさんから帰ってきたチェック済原稿を開いて、段落番号追加ボタンをクリック、と。」
同僚Ｘ「おい、校閲の変更履歴が記録されまくって、グダグダになってしまっているぞ。」
ワイ　「ええっ、エクスさん、ワード文書の変更履歴の記録はオフにしていただかないと。」
同僚Ｘ「なんとかならんかなあ、他人から回されてきたワード原稿とかだと、変更履歴の記録がオンされているか否かなんて、
　　　　ワードの校閲リボンから、「変更履歴の記録」をクリックせんとわからんしなあ。」
ワイ　「そ、そうですねえ。」
同僚Ｘ「それに、これっていつ始まって、いつ終わったかもわからんなあ。中断もできんし。」
ワイ　「短時間やからええと思ってましたが、気になるもんですねえ。」
同僚Ｘ「ほら、画面上に横棒が表示されて、それが１００％になったときに終わるやつをつけてや。
　　　　途中で止めるためのボタンもつけてな。」
ワイ　「は、はい。・・・（ブログレスバーとキャンセルボタンのことだな、）」同僚Ｘ「僕の持っている明細書原稿を全部掛けてみようか。」
　　　　・・・
同僚Ｘ「ワイ君、なんか、この明細書原稿、ぜんぜん段落番号の削除が効かないけど。」
ワイ　「あ、あれっ変ですねえ。」
ワイ　「この明細書原稿の改行マーク、なんかおかしくないですか。」　　　　・・・・ワイ　「エクスさん、わかりましたよ。この明細書原稿って、Enterじゃなくて、Shift+Enterで行の区切りが入力されているんですよ。」
同僚Ｘ「ふーん、なんか知らんけど、どういう風に入力してもちゃんと段落番号を付けるようにしてな。」
ワイ　「・・・（Enterで入力されるのが ^pで、Shift+Enterで入力されるのが ^l か、全部 ^pに置換するか・・・）」ワイ　「はい、エクスさん、改良しましたので使ってみてください。」
同僚Ｘ「このあいだのクライアントさんのチェック済原稿を掛けてみよう。
　　　　ちゃんと、「校閲の変更履歴の記録をオフしてください。」で出るなあ。」
ワイ　「はい、校閲の変更履歴の記録かオンのときには、処理せずに警告するようにしたんですよ。」
同僚Ｘ「校閲の変更記録をオフして、段落番号振直ボタンをクリック、と。
　　　　進捗を示す棒グラフと、キャンセルボタンも表示されたなあ。」
ワイ　「はい」同僚Ｘ「ぜんぜん段落番号を振ってくれなかった明細書原稿もチェック、と。
　　　　おお、こんどはちゃんと段落番号を付けてくれるなあ。」
ワイ　「はい。対応しました。
　　　　（こっそりと ^l を ^p に書き換えるのでＯＫだったか。）ブラック所長「おお、ワイ君やないか。ほう、段落番号を入れてくれるWORDアドインか。」
ワイ　「は、はい。」
ブラック所長「なかなかええ感じに振られてるなあ。
　　　　　　　このあいだ苦言を呈させてもろた原稿を掛けてみよっか。」
ワイ　「はい」ブラック所長「「【先行技術文献】」の次には段落番号を入れてないな。」
ワイ　「段落番号を入れていい項目と入れてはならない項目は、ちゃんと区別してます。」ブラック所長「程よい感じで段落番号が入ってるな。」
ワイ　　「はい。１行４０文字で書いたとき、およそ３～５行で１つの段落番号が入るようにしたんです。」ブラック所長「【数１】と数式の次にも入ってるな。」
ワイ　「ワードの数式・画像・表をちゃんと判定してます。」
　　　　（・・・テキストで数式を書かれたらアウトやけどな。）ブラック所長「実施形態の『図１は、・・。』、『図２は、・・。』の直前に段落番号が入ってるな。」
ワイ　「はい、『図（番号）は、・・・。』を検知して、その直前に段落番号を入れるようにしてます。」ブラック所長「これなら段落番号は大丈夫や。さて、次は中身の問題やが・・・。」
ワイ　ギクッ・・・　　（次回に続く・・・かもしれない。）※ワイ記法(C)無職やめ太郎さんこれは、フリーソフト「段落ジェネレータ」の紹介記事です。GitHub のURLはこちらです。Visual Studio 2019 でコンパイルしてください。
https://github.com/k-ayaki/danrakuG01OSDN のURLはこちらです。インストーラがアップロードされています。
https://osdn.net/projects/danrakug/WORD のVSTOアドインについて書かれている文献は少ないので、この記事が少しでも開発の助けになればとおもいます。試しに、amazon で "VSTO" と入力して書籍を検索してみてください。"VBA"の書籍と比べて、その少なさに愕然とします。　なお、VSTO(Visual Studio Tools for Office)とは、オフィスソリューションの一つであり、OfficeアプリケーションのアドインをC#やVB.netで記述できます。VBA(Visual Basic for Application)と比べると、Visual Studioが必須である点が、やや面倒くさいです。また、VSTOのアドインは、Officeのバージョンによっては互換性が問題になる場合があります。しかし、Officeのアドインを作成して公開し、かつ、そのソースコードを秘匿したい場合には、VSTOを選択肢とすることが必要とおもいます。オフィスソリューション開発の概要 (VSTO)
https://docs.microsoft.com/ja-jp/visualstudio/vsto/office-solutions-development-overview-vsto?view=vs-2019GUIは、WORDのリボンインタフェースとして実装いたしました。リボン全体の属性は以下です。
ボタンのグループの名前には「段落生成」と名付けました。
　段落付与ボタンは、縦横64ピクセルのアイコンを付けました。“【０００１】”の段落番号を黒文字で入れています。なお、自前でアイコンを生成する代わりに、Officeに組み込まれているアイコンを使うこともできます。
　この段落付与ボタンをクリックしたとき、Ribbon1.cs の AddDanraku_Click関数が呼び出されます。
　これにより、段落が付与されたのち、段落番号が追番に振り直されます。　段落の振直ボタンは、縦横64ピクセルのアイコンを付けました。“【０００１】”と”【０００２】”の段落番号がオーバーラップするよう青文字で入れています。振直ボタンをクリックしたとき、Ribbon1.cs の  RenumDanraku_Click関数が呼び出されます。
　これにより、段落番号が追番に振り直されます。　段落の削除ボタンは、縦横64ピクセルのアイコンを付けました。“【０００１】”と取消線とを赤で入れています。削除ボタンをクリックしたとき、Ribbon1.cs の  DelDanraku_Click関数が呼び出されます。
　これにより、段落が削除されます。
　　一番簡単な段落削除から説明します。　最初に、WORDの校閲の変更履歴の記録がオンになっているか否かを判定します。変更履歴の記録がオンになっているときにアドインが文書を書き換えると、その書き換えが変更履歴として記録されてしまいます。よっで、これを防ぐために、変更履歴の記録がオンになっているときには、処理を実行せずに終了します。
　doc.TrackRevisionsがtrue のとき、変更履歴の記録がオンです。このときには、メッセージボックスを表示したのち、処理を終了します。　次に、文書の垂直タブを改行に変換します。WORDのパラグラフは、文章の改行で区切られています。
　WORDの文章が垂直タブで区切られていると、そこは文章の切れ目であり、かつ、文章が改行されているかのように見えますが、垂直タブの前後は同一のパラグラフです。
　よって、本アドインでは文章の垂直タブを改行に変換して、文章の切れ目とパラグラフの区切りを一致させています。　そして、プログレスパーの表示用ダイアログと、プログレスバーのワーカースレッドを起動します。なお ProgressDialog クラスは、プログレスバーの表示用ダイアログが終了すると、その結果に応じて、キャンセル、エラー、成功の何れかに分岐します。　垂直タブを改行に変換するコードは、マイクロソフトのVSTOのサンプルコードとほぼ同一です。　プログラムによって文書内のテキストを検索および置換する
https://docs.microsoft.com/ja-jp/visualstudio/vsto/how-to-programmatically-search-for-and-replace-text-in-documents?view=vs-2019プログラムによって検索後に選択を復元する
https://docs.microsoft.com/ja-jp/visualstudio/vsto/how-to-programmatically-restore-selections-after-searches?view=vs-2019　段落削除に係るプログレスバーのワーカースレッドです。
　このスレッド内では、WORDの文書のうち、書類名の範囲が“明細書”であるものを検索します。
　すなわち、“【書類名】明細書”が記載されたパラグラフから、次の“【書類名】”が記載されたパラグラフまたは文書の末尾までの範囲を取得します。
　そして、段落番号が記載されているパラグラフを順次検索すると、そのパラグラフを削除します。　プログレスダイアログは、ProgressDialog.cs に記載された ProgressDialogクラスによって表示されます。このクラスは、BackgroundWorkerクラスを使用しており、以下のサンプルコードを参考にしています。参考文献：
BackgroundWorkerクラスを使用して進行状況ダイアログを作成する
https://dobon.net/vb/dotnet/programing/progressdialogbw.html　“書類名の範囲”メソッドは、docname で記載された名前に一致する書類名の範囲を返すものです。
　こういう風に、メソッド名を日本語で書くと嫌がる方がおられますが、自分としては日本人ならば可読性が上がるからよいとおもって書いています。　書類名の範囲を選択メソッドは、“【書類名】・・・・” から次の “【書類名】・・・・” までを選択するものです。
　領域始端のトリムメソッドとは、始端から空白・改行などを取り去るものです。これにより領域の始端を調整します。
　領域終端のトリムメソッドとは、終端から空白・改行などを取り去るものです。これにより領域の終端を調整します。
　領域拡張メソッドは、トリムした始端・終端を、WORD文書のパラグラフ単位で拡張します。段落の生成を説明します。　最初に、WORDの校閲の変更履歴の記録がオンになっているか否かを判定します。変更履歴の記録がオンになっているときにアドインが文書を書き換えると、その書き換えが変更履歴として記録されてしまいます。よっで、これを防ぐために、変更履歴の記録がオンになっているときには、処理を実行せずに終了します。
　doc.TrackRevisionsがtrue のとき、変更履歴の記録がオンです。このときには、メッセージボックスを表示したのち、処理を終了します。
　次に、文書の垂直タブを改行に変換します。　そして、段落生成のプログレスパーの表示用ダイアログと、段落生成のプログレスバーのワーカースレッドを起動します。
　プログレスバーの表示用ダイアログが終了すると、その結果に応じて、キャンセル、エラー、成功の何れかに分岐します。　次に、段落番号の振り直しのプログレスパーの表示用ダイアログと、段落番号の振り直しのプログレスバーのワーカースレッドを起動します。
　これは、既に段落番号が付与されているとき、新たに段落番号を追加すると、段落番号の振り直しが必要になるためです。
　プログレスバーの表示用ダイアログが終了すると、その結果に応じて、キャンセル、エラー、成功の何れかに分岐します。　段落生成に係るプログレスバーのワーカースレッドでは、WORDの文書のうち、書類名の範囲が“明細書”であるものを検索します。すなわち、“【書類名】明細書”が記載されたパラグラフから、次の“【書類名】”が記載されたパラグラフの直前のパラグラフまたは文書の末尾までの範囲を取得します。
　そして、範囲内のパラグラフを順次検索すると、そのパラグラフの直後または直前が段落番号の生成対象であるか否かを判定します。段落番号の生成対象であると判定したならば、そのパラグラフの直後または直前に、段落番号が記載されたパラグラフを挿入します。　“項目の判定”メソッドとは、現在のパラグラフに隅付括弧【】があるか否かを判定するものです。
　そして、“パラグラフが段落番号付与対象項目か判定”メソッドがtrueならば、この直後に段落番号のパラグラフを挿入します。そして、現在のパラグラフが”【符号の説明】”ならば、処理を終了します。
　
 次に、”パラグラフが数化表項目か判定”メソッドにより、現在のパラグラフが数式、化学式、表の項目であるか否かを判定します。現在のパラグラフが数式、化学式、表の項目ならば、直前に文章が記載されているか否かを判定し、その直前に段落番号が記載されたパラグラフを挿入します。　次に、”パラグラフが段落番号付与非対象項目か判定”メソッドがtrueであり、かつ“パラグラフが不正な段落番号か判定”メソッドがtrueならば、不正な段落番号が付与されたパラグラフとして、このパラグラフを削除します。段落の振り直しは、追番として記載されていない段落番号を、追番に振り直すものです。具体的には、WORDの検索機能で、段落番号のパターンに当て嵌まる文字列を順次検索して、これを追番の段落番号の文字列で書き換えています。　最近のVSTOで特筆すべきは、インストーラの作成の簡単さだとおもいます。VisualStudio2019のビルドメニューから「・・・の発行」をクリックするだけですから。
　なお、CDやUSBメモリからインストールする従来のインストーラに限られず、FTPサーバにアップロードすることも可能だそうですが、未検証です。　出来上がったセットアップファイルをインターネットに置くと、ダウンロードの際にゾーン識別子が付きます。vstoのsetup.exeは、*.vstoと *.dll.manifest にゾーン識別子が着いているとエラー終了します。よって、install.bat によりゾーン識別子を削除して、setup.exeを起動させます。参考文献：
チュートリアル: Word 用の最初の VSTO アドインの作成します。
https://docs.microsoft.com/ja-jp/visualstudio/vsto/walkthrough-creating-your-first-vsto-add-in-for-word?view=vs-2019
【ワレコの講座】VS2017でEXCEL VSTOアドイン作成 – リボン編（1/10）
https://www.wareko.jp/blog/creating-excel-vsto-addin-with-vs2017-ribbon-edition-1of10
【ワレコの講座】EXCEL VSTOアドインで選択セル情報取得（2/10）
https://www.wareko.jp/blog/acquire-selected-cell-information-with-excel-vsto-add-in-2of10
【ワレコの講座】EXCEL VSTOアドインを他のPCに配布する（3/10）
https://www.wareko.jp/blog/publish-excel-vsto-add-in-to-another-pc-3of10
ダウンロードしたファイルの「ブロック解除」をコマンドで
https://qiita.com/gentaro/items/3beb65a8f2f89089a042


