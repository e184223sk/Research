
// Copyright(c) 2017 Takahiro Miyaura
// Released under the MIT license
// http://opensource.org/licenses/mit-license.php

/// &lt;summary&gt;
///     number of the wave audio channels.
/// &lt;/summary&gt;
private readonly short _channels;

/// &lt;summary&gt;
///     number of the wave audio sample rate.
/// &lt;/summary&gt;
private readonly int _sampleRate;

/// &lt;summary&gt;
///     number of the wave audio bit per sample.
/// &lt;/summary&gt;
private readonly short _bitsPerSample;

/// &lt;summary&gt;
///     Create a RIFF Wave Header for PCM 16bit 16kHz Mono
/// &lt;/summary&gt;
/// &lt;returns&gt;&lt;/returns&gt;
private byte[] GetWaveHeader()
{
    var extraSize = 0;
    var blockAlign = (short) (_channels * (_bitsPerSample / 8));
    var averageBytesPerSecond = _sampleRate * blockAlign;

    using (var stream = new MemoryStream())
    {
        var writer = new BinaryWriter(stream, Encoding.UTF8);
        writer.Write(Encoding.UTF8.GetBytes("RIFF"));
        writer.Write(0);
        writer.Write(Encoding.UTF8.GetBytes("WAVE"));
        writer.Write(Encoding.UTF8.GetBytes("fmt "));
        writer.Write(18 + extraSize); 
        writer.Write((short) 1);
        writer.Write(_channels);
        writer.Write(_sampleRate);
        writer.Write(averageBytesPerSecond);
        writer.Write(blockAlign);
        writer.Write(_bitsPerSample);
        writer.Write((short) extraSize);

        writer.Write(Encoding.UTF8.GetBytes("data"));
        writer.Write(0);

        stream.Position = 0;
        var buffer = new byte[stream.Length];
        stream.Read(buffer, 0, buffer.Length);
        return buffer;
    }
}

