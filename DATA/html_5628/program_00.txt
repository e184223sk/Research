using System;

namespace NDP_UE_CS
{
    // 2つの派生Exceptionをネストされた例外の
    // 動きをみるためのデモ用に定義する
    class SecondLevelException : Exception
    {
        public SecondLevelException( string message, Exception inner )
            : base( message, inner )
        { }
    }
    class ThirdLevelException : Exception
    {
        // 前Exceptionを受け取らないコンストラクタ
        public ThirdLevelException( string message )
            : base( message )
        { }

        public ThirdLevelException( string message, Exception inner )
            : base( message, inner )
        { }
    }

    class NestedExceptions
    {
        public static void Main()
        {
            Console.WriteLine(
                "\nこのプログラムは0ディビジョンを行います。このとき" +
                "異なった派生Exceptionを用いて\n" +
                "それぞれ例外を2回以上発生させます。\n");

            try
            {
                // この`Rethrow`関数は0ディビジョンを行う
                // 別関数を呼び出します。
                Rethrow( );
            }
            catch( Exception ex )
            {
                Exception current;

                Console.WriteLine(
                    "ネストされた例外をInnerExceptionプロパティを" +
                    "用いて紐解きます。\n" );

                // このコードではネストされた例外をInnerExceptionプロパティを
                // 用いて紐解きます
                current = ex;
                while( current != null )
                {
                    Console.WriteLine(string.Format("--- {0} の処理を開始 ---", current.GetType().ToString()));
                    Console.WriteLine( );

                    Console.WriteLine("Exception.Source プロパティを出力します。");
                    Console.WriteLine( current.Source.ToString( ) );
                    Console.WriteLine( );

                    Console.WriteLine("Exception.StackTrace プロパティを出力します。");
                    Console.WriteLine( current.StackTrace.ToString( ) );
                    Console.WriteLine( );

                    Console.WriteLine("Exception.GetBaseException() メソッドを出力します。");
                    Console.WriteLine( current.GetBaseException().ToString( ) );
                    Console.WriteLine( );

                    Console.WriteLine("Exception.ToString() メソッドを出力します。");
                    Console.WriteLine( current.ToString( ) );
                    Console.WriteLine( );

                    Console.WriteLine(string.Format("--- {0} の処理を終了 ---", current.GetType().ToString()));
                    Console.WriteLine( );

                    current = current.InnerException;
                }
            }
        }

        // `Rethrow`関数は`DivideBy0( )`関数からの例外をキャッチし
        // 別の例外を生成します。
        static void Rethrow()
        {
            try
            {
                DivideBy0( );
            }
            catch( Exception ex )
            {
                /*
                throw new ThirdLevelException(
                    "2番目の例外をキャッチせずに" +
                    "3番目の例外を投げます。");
                */
                throw new ThirdLevelException(
                    "2番目の例外をキャッチし" +
                    "3番目の例外を投げます。", ex);
            }
        }

        // `DivideBy0`関数は0ディビジョンを実行し
        // 2番目の例外を生成します。
        static void DivideBy0( )
        {
            try
            {
                int  zero = 0;
                int  ecks = 1 / zero;
            }
            catch( Exception ex )
            {
                throw new SecondLevelException(
                    "0ディビジョン例外をキャッチし" +
                    "2番目の例外を投げます。", ex );
            }
        }
    }
}


