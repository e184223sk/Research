More than 1 year has passed since last update.C#でコンソールアプリを作成する場合、少し凝ったことをするとなると、引数の処理というのはどうしても必要になる。
この手のパッケージはnugetを探すと色々見つかるが、その中でもパターンマッチングっぽく使えるCommandLineParserについて書く。F#で使われることも考慮しているためか、パターンマッチのように書けるAPIになっている。
後のコンセプトとしては、細かいことを考えずに使える事を重視しているとのこと。
公式wiki参照は NuGetパッケージ でオプションを格納するための器として、クラスを定義する。
以下のようなクラスを定義する。上記のようにクラスに属性を指定していく。
また、別途F#用パッケージをインストールすると、F#のOption型にも対応できるらしいいわゆる-a [value]や--aaa [value]などで受け取るための属性。
以下のようにプロパティに付与するこれで、-a [value]または--aaa [value]という形で引数を受け取ることができる。
Requiredは引数が必須かどうかを示し、Descriptionはヘルプ表示の時に使用される。
また、受け取る型はstringの他、intやdoubleのプリミティブ型、または任意のenum型が使える。
更に、IEnumerable&lt;T&gt;も指定することができ、この場合はSeparatorを設定すれば、任意の区切り記号で複数の値を受け取ることが可能。Separator = ','とすれば、-a a,b,cと指定ができる。オプション形式ではない引数を受け取るための属性。
オプション以外の引数の位置指定が必須(0開始)。なお、ここでIEnumerable&lt;string&gt;を型に指定すれば、"オプション以外の全ての引数"の格納先にすることもできる。ヘルプ出力時、使用例を末尾に出力することができる。いわゆるdocker psみたいなサブコマンド。クラスに付与する。
以下のような感じ。第一引数に名前を指定するが、これがそのままコマンド名になる。ただし、サブコマンドのサブコマンド(docker image lsのようなもの)は作成できないという制限がある。
まあ、この辺りが必要になる段階というのは結構後なので、余り気にすることはないかもしれない。
また、issue見る限り要望はあるっぽいので、PRを送れば採用されるかもしれない。さて、クラスを定義したら、実際に引数のパースを行う。
サブコマンドを使わない場合は下記のように行う。With...はAction&lt;T&gt;形式のみ扱うため、例えばint型の戻り値を返したい場合や、Task&lt;T&gt;等の非同期を行いたい場合は、
以下のように処理する。注意として、全ての戻り値の型は揃える必要がある。なお、Parser.ParseArguments&lt;T&gt;(args)の結果をParserResult&lt;T&gt;にキャストして結果を見て、更にそこから
成功時はParsed&lt;T&gt;、失敗時はNotParsed&lt;T&gt;にキャストすることで、処理を行うことが可能サブコマンドがある場合でも、ない場合と比べてあまり違いはないが、
複数のサブコマンドがある場合は以下のようになる。MapResultを使う場合は以下のようになる。上記を見てもらうとわかるかもしれないが、実際サブコマンドが増えてくるとちょっと厳しい書き方ではある。大方のコマンドラインツールというものは、エラーがあった場合は、コンソールにヘルプを出力して終了という動作になる場合が多い。
CommandLineParserでは、With...あるいはMapResult時にエラーがあれば、標準エラー出力に出力という動作を
暗黙的に行っている。楽さを考えるならばそれでも問題ないが、例えばエラーメッセージを独自形式で出力したり、抑制したい場合もあるだろう。
そういう場合は、CommandLine.Parser.Defaultを使うのではなく、CommandLine.Parserを自分で生成して、
設定変更をする。デフォルトで--helpと--versionオプションが設定されており、これらを指定するとエラー扱い(HelpRequestedError、VersionRequestedError等)になる。
現在の所これを回避する手段はないので、自前でエラー内容を見て判断するしかない。
なお、この件に関する制御オプションが提案されており、現在PR中であるマージされており、最新バージョン(2.4.0以降)で回避方法が利用可能。APIはもちろん、実装の方も中々F#魂を感じさせるような造りのライブラリだった。結構この辺りは好みが出てくるところだと思う。
今回紹介したCommandLineParserは、機能こそ他のライブラリに一歩譲るものの、簡単さと書き方で個人的には気に入っている。
コマンドラインの引数処理というのは、よくある処理だが面倒というのは確かなので、少しでも役に立ってくれれば幸い。


