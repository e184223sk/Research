More than 3 years have passed since last update.扱っているシステムのオリジナルなログサービスにて、出力するログメッセージ内容をUTでテストする必要がありました。そのときにC#のモックツールであるmoqを利用。この記事はその際のまとめメモになります。【注意】
この記事のコードは、実際のコードを記事用に改変し抽出したものでそのままでは動きません。ご了承ください。モック化対象クラスのコードです。Writeメソッドで直接ログが出力できますが、SystemMessageExceptionという例外クラス経由でログ出力を行いたいため、WriteSystemMessageExceptionメソッドが用意されています。今回は、Writeをモック化したいと考えています。テスト対象のクラスとメソッドです。SystemMessageException例外クラスにログメッセージが含まれており、このログメッセージをテストコード内で取得したいと考えています。また、利用側のコードでは、LogServiceクラスのWriteSystemMessageExceptionメソッドのみが利用されており、Writeメソッドは直接利用されていません。ログメッセージを取得し検証するテストコードを書いていきます。ポイントとして2点あります。①にある、{ CallBase = true }がないと、今回の場合、モック化したWriteが実行されません。なぜなら、moqのデフォルトではモック化していないWriteSystemMessageExceptionは何も処理しない動作となるためです。今回は、WriteメソッドがWriteSystemMessageExceptionメソッドの裏にいます。そこで、{ CallBase = true }を記述することで、本来のWriteSystemMessageExceptionメソッドの実装のコードを実行され、処理がWriteメソッドまで到達します。②のように、MockインスタンスのCallbackメソッドを利用することで、テスト内変数のlogMessageにWriteメソッドが受け取った引数を受取り、処理することができます。moqの機能を利用してオリジナルなログサービスのログメッセージをテストすることができました。


