More than 1 year has passed since last update.なかなか先に進まないですが、ただ動かすだけではなく、コードを理解することが大切だと思うので、今回も、スキャフォールディングで作成されたソースコードを見ていきます。このファイルには、以下に示すように CreateModelクラスが定義されています。Index.cshtmlと違い、同期メソッドとして定義されています。これは、中で非同期メソッド呼ぶ必要がないからですね。試しに、と書き換えて実行してみました。想像通り、正しく動作しました。CreateModelクラスには、もう一つのメソッドが定義されています。Http Postに対応するメソッドです。最初のif文は、旧来の ASP.NET MVCと同じですね。これで、モデルの検証結果を判定し、エラーだったら、再度同じページを表示させています。エラーがなかった場合は、で入力されたMovieデータを追加し、データベースを更新しています。上記Addメソッドの引数のMovieは、自分自身（CreateModelクラス内）に定義されたプロパティです。Webページで入力されPOSTされたデータは、このプロパティにバインドされます。
[BindProperty]属性が、バインドされるプロパティであることを示しています。最後に、で、同一パスの、Indexページにリダイレクト（遷移）させています。Create.cshtmlについて見てみます。これを見ると、スキャフォールディングエンジンは、IDプロパティは出力の対象外のようですね。Create.cshtmlでは、Index.cshtmlでは使われていなかったタグヘルパーがいくつか使われています。見た目は、HTMLの&lt;form&gt;タグそのものですが、自動的に偽造防止トークンが出力されます。
僕の環境だと、&lt;/form&gt;閉じタグの直前に以下の隠しフィールドが挿入されてました。このヘルパーは、以下のタグを生成します。asp-forで、指定したモデルに該当する for属性と、ラベルのキャプションを生成します。&lt;label&gt;要素のコンテンツも自動で挿入されている点に注目です。asp-for属性で指定したモデル（ここでは、Movie.ReleaseDate)の型やDataAnnotation属性の情報を使用して、適切な&lt;input&gt;要素を出力します。また、jQueryのクライアント検証に必要な属性も追加します。例えば、data-val-requiredは、必須属性であることを示しています。この属性値で設定したメッセージが、後述の検証タグヘルパー(asp-validation-for)の場所に表示されます。アンカータグを生成するタグヘルパーです。href ではなく、asp-page=属性を指定します。ASP.NET Core MVCだと、asp-controller, asp-action ですが、Razorページの場合は、asp-pageです。この場合は、以下のHTMLが出力されます。この２つが、検証タグヘルパーです。asp-validation-summary, asp-validation-for 属性がそれを表します。検証エラーがあった時に、ここにエラーメッセージが表示されます。asp-validation-summaryは、検証エラーの概要を表示するために使用されます。asp-validation-for は、特定の入力項目に対する検証エラーメッセージを表示するために使用されます。なお、create.cshtmlの最後にあるは、クライアント検証に必要になります。これがないと、jQueryのクライアント検証が有効になりません。具体的には、_Layout.cshtml内に以下の記述があるのですが、この@RenderSection が書かれた場所に、_ValidationScriptsPartial.cshtmlに書かれた内容が、挿入されることで、jQueryクライアント検証が有効になります。jQueryの話題がすこし出てきたので、wwwrootフォルダの中ものぞいてみます。
このフォルダは、以下のようなフォルダ階層になっていました。アプリで作成した css, js ファイルは、それぞれ、css, js フォルダに置きます。libは、外部パッケージを置く場所のようです。画像ファイルがある場合は、imagesフォルダを作成するのが標準のやり方のようです。ちなみに、bootstrapのバージョンは v4.3.1  jQuery のバージョンは  v3.3.1 でした。Index, Create の２つのページについて見てきましたが、残りのページの特徴的な部分だけ見てみましょう。以下は、Delete.cshtml.csのOnGetAsyncメソッドです。引数 id を受け取っています。index.cshtmlの以下のリンクがクリックされた時に、この上記メソッドが呼び出されます。asp-route-id="@item.ID"で指定した IDの値が、引数idに渡ることになります。ちなみに、上記のタグヘルパーで、以下のような出力が得られます。この例では、仮引数idに、2が渡ってくることになります。もし、idに該当する行がテーブルになければ、で、404がクライアントに返ります。試しに、無理やり NotFound()を返してみたら、エラーページは返らないようです。以下、safariの開発者ツールで確認した画面です。たしかに、404が返っています。でもこれではユーザは何が起こったかわからないので、何らかのカスタマイズが必要そうですね。これは後で調べます。一通りページ関連のソースコードを見てみたので、次は、チュートリアルの「データベースの操作」に移ります。


