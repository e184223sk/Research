
using Autofac;
using Prism.Autofac;
using Prism.Modularity;
using System;
using System.Windows;
using VmInjectionSample1.Views;
using VmInjectionSample1.ComponentManagement;
using System.Reflection;
using Autofac.Extras.DynamicProxy;

namespace VmInjectionSample1
{
    public class Bootstrapper : AutofacBootstrapper
    {
        /// &lt;summary&gt;
        /// コンストラクタ
        /// &lt;/summary&gt;
        public Bootstrapper()
        {
        }

        protected override void ConfigureContainerBuilder(ContainerBuilder builder)
        {
            base.ConfigureContainerBuilder(builder);
            // Shell の登録
            builder.RegisterType&lt;MainWindow&gt;();


            // 共有オブジェクトの依存関係(ログ、interceptorなど)
            builder.RegisterType&lt;TraceInterceptor&gt;();
            builder.RegisterAssemblyTypes(this.GetType().Assembly)
             .Where(t =&gt; t.Name.EndsWith("ViewModel"))
              .AsSelf()
              .EnableClassInterceptors()
              .InterceptedBy(typeof(TraceInterceptor))
              .InstancePerLifetimeScope()
              ;
        }

        protected override void InitializeShell()
        {
            var window = (Window)Shell;
            window.Show();
        }

        protected override DependencyObject CreateShell()
        {
            return Container.Resolve&lt;MainWindow&gt;();
        }

        protected override void ConfigureModuleCatalog()
        {
            // AutofacではPrism.Moduleを使えない
        }
    }
}


