More than 3 years have passed since last update.私は普段Macで開発しているのでC#を利用した開発には可能な限り.NET Coreを利用したいのです。が、一部互換性のない部分も有るようなので自分が利用する範囲での動作確認をしてみます。またpackage.jsonファイルの記述方法等は明示的に紹介されたソースが無いためメモしておきます。試す接続方法は、の３つ。性質は、と言われています。SQL Server上にテスト用のデータベースとテーブルを作成して、データを追加しておきます。操作はSql-cliのmssqlコマンドを利用して行います。
なおMac上にDocker for Macを利用してSQL Serberを立てる方法についてはこちらをご覧ください。なお外部にSQL Serverを立てた場合は外部からのアクセスを許可して、事前にアクセス可能か確認してください。まずはログインしてみます。Dockerを利用してローカルにSQL Serverがある場合はlocalhostとなりますが、他のWindows上にある場合はサーバ名（IP）を別途指定します。ログインできたらテスト用のデータベースを作成します。ここではsampleという名前にしました。
無事データベースが作成できたらuseにて利用するデータベースをsampleに切り替えます。データベースが出来たので、それ上にテーブルを作成します。ここではmembersという名前にしました。
なお、EntiryFrameworkで利用する場合はprimary keyが必要となります。mssqlコマンドでは改行がある場合は明示的に\で示す必要があるようです。テーブルができたら、簡単なデータを挿入しておきましょう。insert into members(name,email) values('hoge','hoge@hoge.com');\
insert into members(name,email) values('foo','foo@foo.com');正しく挿入されているか確認します。問題ないようです。ASP.NETプロジェクト等を利用したいところですが、データベースコネクト以外のコードが複雑になるため、ここではコンソールアプリケーションの雛形を利用してみます。作業用のディレクトリを作成し、dotnet newで雛形を生成します。
問題なければpackage.jsonとProgram.csが生成されるはずです。dotnet new -t web とすることでASP.NET MVCの雛形を生成することもできます。では、ADO.NETを利用した接続を見てみます。なお、執筆時点で.NET Framework上で利用できる全ての機能が利用できるわけではないようです（現時点でDataSet等が移植されていない）。まずはpackage.jsonに依存しているライブラリを追加し、dotnet restoreします。では実装してみます。ここではステップを確認するためにusingステートメントを利用していません。
また、接続文字列などは実際の実装ではappSetting.json等から取得するべきですが、ここでは静的に記述します。
さらにtry{}catch{}等も行いません。とりあえずは動くはず。こだわればきりがないですが、下記のような感じでしょうか。つづいてEntiry Frameworkを利用してみます。
まずはpackage.jsonに依存関係を追加します。なお、最新バージョンは常に変動するのでNuGet等のページで最新バージョン番号を確認して見てください。
書き換えたら忘れずにdonet restoreを実行します。続いて実装です。特に難しいところはありません。
Entiry FrameworkではModelクラスとContextクラスの定義が必要となります。最後にDapperです。DapperはSQLは自分で書かないとダメですがそれ以外はよしなにやってくれます。
まずはpackage.json。変更したら忘れずにdotnet restoreを実行します。実装です。これも特に気にするところはありません。Contextクラスは必要ありませんが、Modelクラスは必要です（必要ないパターンもあります）。以上簡単ですが.NET Core上でのデータベースアクセス方法を見てみました。.NET CoerからMySQLを利用したEntiryFrameworkおよびDapperの情報は下記にあります。


