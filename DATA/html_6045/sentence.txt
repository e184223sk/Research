More than 3 years have passed since last update.C#でUWPアプリケーションを新しく作成するときにまずやることをここに残しておきます。※Visual Studio 2017を前提にしています。すでに作成した方は飛ばしてください。メニューからプロジェクトを新規作成。
空白のアプリ(ユニバーサルWindows)を選んで保存場所を選びます。
コンパイルするターゲットとなるバージョンと、使うAPIに応じて最小バージョンを適当に選びます。
作成直後はこのようなフォルダ構造になっています。
作成するフォルダは以下の5つ上3つはMVVM用、下2つはローカライズ用です。ローカライズ用フォルダは、言語に応じて増やしていきます。
詳しくは「UI 文字列をリソースに格納する」を参考に。プロジェクトに最初から含まれているMainPageをViewsフォルダに移動していきます。ここでは以下の作業をします。MainPage.xamlをドラッグ&amp;ドロップでViewsフォルダに持っていきます。これで、コードビハインドであるMainPage.xaml.csも一緒にViewsフォルダに入ります。MainPageクラスは、最初はプロジェクト名と同じ名前空間の直下に配置されます。これをViewsフォルダに入れててもコンパイルできるように、Views名前空間に移動します。
修正する場所は、MainPage.xamlとMainPage.xaml.cs、忘れていけないのがApp.xaml.csの最初に表示するページを指定するところです。1つ目はMainPage.xamlのx:Class
2つ目はMainPage.xaml.csのMainPageクラスがあるnamespace
3つ目はApp.xaml.csのOnLaunched関数の中にあるNavigateの引数
MainPage.xamlを直すついでに、xamlタグ内で用いる名前空間にviewsとviewmodelsを追加しておくと便利です。
MainPageをViewsに移動したら、これに対応するViewModelを作成します。ViewModelからView, ModelからViewへプロパティの変更を知らせるために、INotifyPropertyChangedを頻繁に使うため、これを実装したクラスを用意しておくと継承だけで使うことができて便利です。
先人の知恵「Observable.cs」を利用します。Observable.csをもとに、MainPageに対応するViewModelクラスを作成します。初期化関数にViewを渡せるようにしておいて、ViewModelからViewを弄れるようにしておきます。MainPageViewModelクラスとの対応を入れます。具体的にはプロパティの追加、ViewModelの初期化コードの呼び出し、データコンテキストの紐づけです。文字列はローカライズ文字列を取得するための拡張メソッドを作っておくと便利です。ResourceExtensions.cs毎回やるのは地味に面倒なので、Microsoftの素晴らしいテンプレート「Windows Template Studio」を使う手もあります。高機能なので、コードが複雑になりますが、Master-Detailや設定画面などを最初から作れるので便利です。


