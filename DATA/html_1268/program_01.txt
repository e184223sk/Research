
using NUnit.Framework;
using MessagePipe;
using Zenject;
using UnityEngine;


public class Test
{
    // イベント送る方
    public class Publisher
    {
        [Inject] private IPublisher&lt;MyEvent&gt; _publisher;

        public void Send(MyEvent ev) =&gt;
            _publisher.Publish(ev);
    }

    // イベント受け取る方
    public class Subscriber
    {
        [Inject] private ISubscriber&lt;MyEvent&gt; _subscriber;

        public void Setup() =&gt;
            _subscriber.Subscribe(x =&gt; Debug.Log($"{x.Message}"));
    }

    // 送るイベント
    public class MyEvent 
    { 
        public string Message; 
    }


    private DiContainer _container;

    [Test]
    public void SimpleTest()
    {
        _container = new DiContainer();

        _container.BindMessageBroker&lt;MyEvent&gt;(_container.BindMessagePipe());

        // イベントを受ける方
        var sub = _container.Instantiate&lt;Subscriber&gt;();
        sub.Setup();

        // イベントを投げる方
        var publisher = _container.Instantiate&lt;Publisher&gt;();
        publisher.Send(new MyEvent { Message = "テストメッセージ" });
    }
}

