public class ArgumentMap
{
    private List&lt;string&gt; mainArgs = new List&lt;string&gt;();
    private Dictionary&lt;string, string&gt; optionMap = new Dictionary&lt;string, string&gt;();
    private List&lt;string&gt; optionSwitches = new List&lt;string&gt;();

    public void Init(string[] args)
    {
        int i = 0;
        while (i &lt; args.Length)
        {
            string arg = args[i];
            if (arg.StartsWith("-"))
            {
                if (i + 1 &lt; args.Length)
                {
                    if (args[i + 1].StartsWith("-"))
                    {
                        this.optionSwitches.Add(args[i]);
                    }
                    else
                    {
                        this.optionMap[arg] = args[i + 1];
                        i++;
                    }
                }
            }
            else
            {
                this.mainArgs.Add(arg);
            }

            i++;
        }
    }

    public List&lt;string&gt; GetMainArgs()
    {
        return this.mainArgs;
    }

    public bool HasSwitch(string key)
    {
        return this.optionSwitches.Contains(key);
    }

    public string GetOption(string key, string defaultValue = null)
    {
        if (this.optionMap.ContainsKey(key))
        {
            return this.optionMap[key];
        }

        return defaultValue;
    }

    public int GetOptionInt(string key, int defaultValue)
    {
        if (this.optionMap.ContainsKey(key))
        {
            string value = this.optionMap[key];
            int intValue = defaultValue;
            if (int.TryParse(value, out intValue))
            {
                return intValue;
            }
        }

        return defaultValue;
    }

    public bool GetOptionBool(string key, bool defaultValue)
    {
        if (this.optionMap.ContainsKey(key))
        {
            string value = this.optionMap[key];
            bool boolValue = defaultValue;
            if (bool.TryParse(value, out boolValue))
            {
                return boolValue;
            }
        }

        return defaultValue;
    }
}

