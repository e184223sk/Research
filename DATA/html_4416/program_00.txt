    public static class ExpressionExtentions
    {
        /// &lt;summary&gt;
        /// MemberExpressionへの変換(string以外の型に対応するため)
        /// &lt;/summary&gt;
        /// &lt;param name="expression"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static MemberExpression ToMemberExpression(LambdaExpression expression)
        {
            var memberExpression = expression.Body as MemberExpression;
            if (memberExpression != null) return memberExpression;
            var unaryExpression = expression.Body as UnaryExpression;
            if (unaryExpression != null) return unaryExpression.Operand as MemberExpression;
            return memberExpression;
        }


        /// &lt;summary&gt;
        /// プロパティ名を取得する
        /// &lt;/summary&gt;
        /// &lt;param name="expression"&gt;&lt;/param&gt;
        /// &lt;param name="names"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static IEnumerable&lt;string&gt; GetPropertyNames(this LambdaExpression expression)
        {
            return GetPropertyNames(ToMemberExpression(expression));
        }

        /// &lt;summary&gt;
        /// プロパティ名を取得する(再帰で取得)
        /// &lt;/summary&gt;
        /// &lt;param name="memberExpression"&gt;&lt;/param&gt;
        /// &lt;param name="names"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static IEnumerable&lt;string&gt; GetPropertyNames(MemberExpression memberExpression, IList&lt;string&gt; names = null)
        {
            if (names == null)
            {
                names = new List&lt;string&gt;();
            }
            if (memberExpression.Expression is MemberExpression)
            {
                GetPropertyNames(memberExpression.Expression as MemberExpression, names);
            }
            names.Add(memberExpression.Member.Name);
            return names;
        }
    }

