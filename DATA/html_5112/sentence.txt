C#9.0で使えるようになったrecordの機能ですが、値ベースの等値性比較、不変性といった機能がDDDにおける値オブジェクトの概念と一致します。C#9.0以前では値オブジェクトを定義するには、大量の定型的コードを書かなけらばなりませんでしたが（コード生成を使ったとしても）、recordを使えば多くをコンパイラの自動生成に任せることができます。
一方で、recordは（多分）DDDのために作られたわけではないため、実装においていくつか難しい点がありました。どういった点に注意して実装すべきか、トレードオフは、等考えた内容のメモです。
環境Microsoft Visual Studio Community 2019 Version 16.9.1
VisualStudio.16.Release/16.9.1+31105.61
Microsoft .NET Framework
Version 4.8.04084

インストールされているバージョン:Community
C# ツール   3.9.0-6.21124.20+db94f4cc8c78a7cd8cf9cfdae091158d2ba9d974
ターゲットフレーム  .NETrecordの詳細な説明はMicrosoftDocsに任せます。
C# 9.0 の新機能-レコードの種類
レコード型を作成する
レコード
簡単にまとめると、といった特徴があります。これはDDDにおける値オブジェクトとしてまさに求められる性質です。※以下の例ではC#9.0の最上位レベルのステートメント機能を使いMainメソッドを省いてコードを記していますoperator ==やEqualsは定義しなくても等値性を比較できます。
また不変なため変更もできません。Rectangleに不変条件を追加します。値オブジェクトは不変条件をファクトリに持たせることができます。値オブジェクトは完全に不変である。アクティブなライフタイムの中では決して適用されることのないロジックであれば、オブジェクトが持っている必要はない。このような場合、不変条件を入れるのに理にかなった場所はファクトリであり、そうすることで生成物はよりシンプルなままに保たれる。（DDD本6章）コンストラクタにこのロジックを持たせてみます。このコードは以下のエラーでコンパイルできません。
エラー  CS0111  型 'Rectangle' は、'Rectangle' と呼ばれるメンバーを同じパラメーターの型で既に定義しています
位置指定レコードを使った場合、「パラメーターがレコード宣言の位置指定パラメーターと一致するプライマリ コンストラクター」が自動生成されます（プロパティ定義の位置指定構文）。recordにおいて自動生成されるもののいくつかは上書きすることができますが、コンストラクタはその限りではないようです。レコード型に、いずれかの合成メソッドのシグネチャと一致するメソッドがある場合、コンパイラでそのメソッドは合成されません。
(https://docs.microsoft.com/ja-jp/dotnet/csharp/whats-new/csharp-9#record-types)なのでこの場合位置指定レコードを使わず自分でプロパティを記載する必要があります。recordで記述量が減ると思ったのにちょっと残念。これでオブジェクト生成時に不変条件を満たさないオブジェクトは作れなくなったのでしょうか。位置指定レコードはinit専用を生成します。レコード宣言で指定される各位置指定パラメーターのパブリック init 専用自動実装プロパティ。 init 専用プロパティは、コンストラクターで、またはプロパティ初期化子を使用して設定できます。
(https://docs.microsoft.com/ja-jp/dotnet/csharp/language-reference/builtin-types/record)init専用プロパティはコンストラクターで、またはプロパティ初期化子を使用して設定できます。プロパティ初期化子構文ではコンストラクトし終えたオブジェクトのプロパティを設定するため、不変条件ロジックを通過しません。同様に、with式も同様にコピーコンストラクタで生成されたオブジェクトのプロパティを設定するため、不変条件ロジックを通過しません。不変条件を満たさないオブジェクトを簡単に作れてしまいました。プロパティ初期化子が使えないようにinitをなくしてみます。すると、確かにプロパティ初期化子は使えなくなりますが、同時にwith式も使えなくなります。それはちょっとあまりに不便。結局、initの中でも不変条件を確認することになりました。もっとも単純な位置指定レコードから比べるとずいぶんコード量が増えてしまいました。定型的コードを書かなくていいと期待できたrecordでしたが、不変条件というロジックが加わるとそれなりには複雑にならざるを得ないようです。とはいえEqualsやoperator ==、その他with式に相当するものを書かなくてよい分はかなり楽になっています。また、単純なデータオブジェクトとして使うならかなり有用でしょう。
なにかよいパターン等があれば追記しようと思います。コメント等でのご指摘も頂戴できればと思います（どこかのコミュニティではすでに良いパターンが出尽くしてそう……）


