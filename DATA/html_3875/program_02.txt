
using System.Collections;
using UnityEngine;
using UnityEngine.UI;


public class FadeInOut : MonoBehaviour
{
    Canvas faceCanvas;

    Image facePanel;

    Coroutine coroutine;

    [SerializeField]
    Color panelColor = new Color(0,0,0,0);

    [SerializeField]
    float fadeTime = 5;



    // Start is called before the first frame update
    void Start()
    {
        //キャンバス生成＆設定
        GameObject canvas_G = new GameObject("FaceCanvas");
        faceCanvas = canvas_G.AddComponent&lt;Canvas&gt;();
        canvas_G.AddComponent&lt;CanvasScaler&gt;();
        canvas_G.AddComponent&lt;GraphicRaycaster&gt;();

        //レンダリングをメインカメラに
        faceCanvas.renderMode = RenderMode.ScreenSpaceCamera;
        faceCanvas.worldCamera = FindObjectOfType&lt;Camera&gt;();

        //パネル生成＆設定
        GameObject panel_G = new GameObject("FacePanel");
        facePanel = panel_G.AddComponent&lt;Image&gt;();

        Color tmpColor = facePanel.color;
        tmpColor.a = 0f;
        facePanel.color = tmpColor;

        //パネルをキャンバスの子に設定
        panel_G.transform.parent = canvas_G.transform;

        //パネルのポジションを正面に調整
        Vector3 panelPosition = panel_G.transform.localPosition;
        panelPosition.x = 0;
        panelPosition.y = 0;
        panel_G.transform.localPosition = panelPosition;

    }

    void Update()
    {
        //キー押してない間はreturn
        if (Input.anyKey == false)
        {
            return;
        }

        if (coroutine == null)
        {
            //テスト用　フェードアウト
            if (Input.GetKeyDown(KeyCode.O) &amp;&amp; panelColor.a == 0)
            {
                FadeOut();
            }

            //テスト用　フェードイン
            if (Input.GetKeyDown(KeyCode.I) &amp;&amp; panelColor.a == 1)
            {
                FadeIn();
            }

        }

    }

    public void FadeOut()
    {
        if (panelColor.a == 0)
        {
            coroutine = StartCoroutine(FadeOutCoroutine());
        }
    }


    IEnumerator FadeOutCoroutine()
    {
        float alpha = 1;

        while (panelColor.a &lt; 1)
        {
            yield return new WaitForSeconds(0.1f);
            panelColor.a += alpha / (fadeTime * 10);
            facePanel.color = panelColor;
        }

        panelColor.a = 1;

        StopCoroutine(coroutine);
        coroutine = null;
    }

    public void FadeIn()
    {
        if (panelColor.a == 1)
        {
            coroutine = StartCoroutine(FadeInCoroutine());
        }
    }


    IEnumerator FadeInCoroutine()
    {
        float alpha = 1;

        while (panelColor.a &gt; 0)
        {
            yield return new WaitForSeconds(0.1f);
            panelColor.a -= alpha / (fadeTime * 10);
            facePanel.color = panelColor;
        }

        panelColor.a = 0;

        StopCoroutine(coroutine);
        coroutine = null;
    }
}

