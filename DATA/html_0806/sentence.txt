More than 1 year has passed since last update.自分用の備忘録記事最近新しくリリースされたシンプルなDIコンテナライブラリのVContainerの導入方法をメモUnity 2018.4.14.f1
VContainer ver 0.9.0GitHubから直接UnityPackageをDLしてプロジェクトにインストールする方法とUnityPackageManagerでインストールする方法がある、今回はUnityPackageを直接インストールする方法をとるGitHubのリリースページから0.9.0のUnityPackageをDLし、プロジェクトにインポート
この時、manifest.jsonに nuget.mono-cecil": "0.1.6-preview の指定を追加これで特にエラーが無ければまずは導入成功次にVContainerを利用した簡単なサンプルを作成します。
VContainerには疑似的にMonoBehaviourのStartやUpdateイベントと似た様な処理を行うことが出来る仕組みがあるので( MonoBehaviourを利用しないクラスでMonoBehaviourのUpdate同様に毎フレーム何かの処理をする等を行えるように )そのサンプルとMonoBehaviourを継承した通常のGameObjectのコンポーネントから利用する方法の二通りを作成します。先ずはゲームを通じて利用するHelloWorldServiceクラスを作成します、呼び出し元確認用にstringで引数をとりいつ呼ばれたかをコンソールに表示します、 このクラスはMonoBehaviourを継承しないクラスとします。Zenjectで言うところのSceneContextを作成します
ProjectWindowで右クリック Create &gt; C# Script でファイル名に *LifetimeScopeと記述すると自動でテンプレートスクリプトを作成します。この段階ではまだテンプレートのままです、いったん先に進みます。MonoBehaviourを継承していないクラスでMonoBehaviourのStartやUpdateのイベント同様な処理を行えるクラスを作成します。LifeCycleのイメージ図実装しているインターフェースは其々コメントに書かれある通りのタイミングに呼ばれます。最後にMonoBehaviourを継承したTestObjectクラスを作成しますUpdate時にスペースキーを押下したらHelloWorldSericeのHelloWorld()を呼び出すようにします。次にシーンを作成します
先ずコンテナを実装するためにGameLifetimeScopeオブジェクトを作成します、Hierarchy上で右クリック Create Empty で GameObjectを生成、GameLifetimeScope.cs をアタッチします。このまま実行しても何も起きないので GameLifetimeScope に手を加えます利用される側のHelloWorldServiceクラスをbuilderに登録、その次に利用する側のGamePresenterをbuilderに登録します。そして実行
コンソールが以下の様になれば正常に動作しています、Hierarchy上にはMainCamera、DirectionalLight、GameLifetimeScopeオブジェクトの3つだけでありこのログを読んだオブジェクトがシーン上に配置されていないことがわかります。次にGameObjectから利用する場合です。
GameLifetimeScopeに以下のように手を加えます。次にシーン上にTestObjectを配置します。
この時GameLifetimeScopeのInspectorからTestObjectをセットします。
これで実行以下のようにコンソールが表示されれば成功です、スペースキーを押下したときに TestObject : HelloWorld が表示されてるのが確認できるはずです。
以上でとりあえずVContainerを導入及び簡単なサンプルの作成までの手順ですここに一応サンプルプロジェクトを配置しています見る必要はないと思いますがより詳細の情報やZenjectのAPIとの対応表を確認したい人は開発者のGitHubページにて確認できますMonoBehaviourのコンポーネント側からコンテナに登録したクラスをInjectする時の方法がいまいちよくわかってない、ソースコードにもある通りLifetimeScopeに[SerializeField]でInjectを要求してるコンポーネントを紐付けないとできない?
詳しい方いたらご教示おねがいします


