
using UnityEngine;
using UnityEditor;
using System.Linq;
using UnityEditorInternal;
using System.Collections.Generic;
using System;
using System.IO;
using UnityEngine.SceneManagement;
using UnityEditor.SceneManagement;

[InitializeOnLoad]
public class SceneInfoCreator
{
    private const string SCENE_ENUM_HASH_KEY = "Scene_Info_Hash";

    [MenuItem("Assets/SceneInfoCreator")]
    public static void _sceneNameCreator()
    {
        if (EditorApplication.isPlaying || Application.isPlaying)
            return;

        EditorApplication.delayCall += BuildSceneName;
    }

    static SceneInfoCreator()
    {
        if (EditorApplication.isPlaying || Application.isPlaying)
            return;

        EditorApplication.delayCall += BuildSceneName;
    }

    static void BuildSceneName()
    {
        System.Text.StringBuilder builder = new System.Text.StringBuilder();

        builder = WriteManagerClass(builder);

        string text = builder.ToString().Replace(",}", "}");
        string assetPath = Application.dataPath + "/Scripts/Utility/SceneInfo.cs";

        if (AssetDatabase.LoadAssetAtPath(assetPath.Replace("/Editor/..", ""), typeof(UnityEngine.Object)) != null &amp;&amp; EditorPrefs.GetInt(SCENE_ENUM_HASH_KEY, 0) == text.GetHashCode())
            return;

        System.IO.File.WriteAllText(assetPath, text);
        EditorPrefs.SetInt(SCENE_ENUM_HASH_KEY, text.GetHashCode());
        AssetDatabase.Refresh(ImportAssetOptions.ImportRecursive);
        EditorApplication.delayCall -= BuildSceneName;
    }

    static System.Text.StringBuilder WriteManagerClass(System.Text.StringBuilder builder)
    {
        var sceneNames = new List&lt;string&gt;();
        EditorBuildSettings.scenes
                    .Where(_ =&gt; _.enabled)
                    .Select(_ =&gt; Path.GetFileNameWithoutExtension(Path.Combine(Directory.GetCurrentDirectory(), _.path)))
                    .Where(_ =&gt; !string.IsNullOrEmpty(_))
                    .ForEach(_ =&gt; sceneNames.Add(_));
        builder.AppendLine("/// &lt;summary&gt;");
        builder.AppendFormat("/// Access Scene Class").AppendLine();
        builder.AppendLine("/// &lt;/summary&gt;");
        /// 
        builder.Append("public sealed class SceneInfo {").AppendLine();
        WriteSceneEnum(builder, sceneNames);
        WriteSceneNameArray(builder, sceneNames);
        builder.AppendLine("}");
        return builder;
    }

    static void WriteSceneEnum(System.Text.StringBuilder builder, List&lt;string&gt; sceneNames)
    {
        builder.Append("\t").AppendLine("/// &lt;summary&gt;");
        builder.Append("\t").AppendFormat("/// Access Scene Number Enum").AppendLine();
        builder.Append("\t").AppendLine("/// &lt;/summary&gt;");
        builder.Append("\t").Append("public enum SceneEnum {").AppendLine();
        sceneNames.ForEach((sceneName, i) =&gt;
        {
            var comma = (i == sceneNames.Count() - 1) ? "" : ",";
            builder.Append("\t").Append("\t").AppendFormat("{0} = {1}", sceneName.SymbolReplace(), i + comma).AppendLine();
        });
        builder.Append("\t").AppendLine("};");
    }

    static void WriteSceneNameArray(System.Text.StringBuilder builder, List&lt;string&gt; sceneNames)
    {
        builder.Append("\t").AppendLine("/// &lt;summary&gt;");
        builder.Append("\t").AppendFormat("/// Access Scene Name Array").AppendLine();
        builder.Append("\t").AppendLine("/// &lt;/summary&gt;");
        builder.Append("\t").Append("public static readonly string[] SceneNames = new string[]{");
        sceneNames.ForEach((sceneName, i) =&gt;
        {
            var comma = (i == sceneNames.Count() - 1) ? "" : ",";
            builder.AppendFormat(@"""{0}""" + comma, sceneName);
        });
        builder.AppendLine("}; ");
    }
}

