More than 1 year has passed since last update.以下の３つの条件を満たしたものをステインハウスの三角形と言います。1．この三角形は以下のように０と１から成っている。
2. m行目はm-1行目の隣同士の数字の排他的論理和となっている。
3. 三角形内の 0 の数と1の数が同じである。下の三角形は、1,2は満たしていますが、3を満たしていないため、ステインハウスの三角形ではありません。三角形の辺の長さ n を与えられた時、すべてのステインハウスの三角形を描くプログラムを書け。
ただし、左右対象となる鏡像は同一の三角形とみなすこと。上記2の条件にあった一辺の長さがnである三角形をすべて作成してみて、１と０の数が同じになる三角形の数を数えるという、方法を採用することにします。
なお、速度を上げるために、明らかに条件を満たさないとあらかじめわかるものは、それがわかった時点で除外します。0と1の合計がn個となるすべてのパターンを求める方法の一つとして、0から2n-1までの整数をビットパターンに変換する方法があります。
この方法だと、nの上限に制限ができてしまいますが、簡単に0と1の組み合わせパターンを見つけることができまうす。つまり、というループで、すべてのパターンを処理できることになります。
実際のコードは、LINQを使ってというコードにしています。0と1の組合せを別の方法で求めようとすると、もっとたくさんのコードを書かなくてはなりません。これはちょっとした発想の転換ですね。ビットパターンを生成（２進数表記に変換）したら、これを逆三角形の上辺とし、排他的論理和を行い、三角形を作ります。
この三角形の、0と1の数が等しければ、ステインハウスの三角形と判断できます。これで答えが求まることになります。求まったステインハウスの三角形は、bool[][]で表します。
bool[][]の配列に0と1からなる三角形のパタンが格納されています。  掲載したコードのSteinhausTriangleクラスのTriangles()メソッドの戻り値をIEnumerable&lt;bool[][]&gt;としているのはそのためです。なお、0と1の和が偶数でないと、条件３を満たさないので、辺の長さを nとすれば、が偶数のときだけ、計算すればよいことになります。この計算式は、三角形の面積（1と0の総数）を示しています。また、鏡像を2重にカウントしないようにするために工夫していますが、それは実際にコードを見てください。以下、底辺の長さが7の三角形での結果です。


