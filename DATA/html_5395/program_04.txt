

    bool _isPause = false

    void Start()
    {
      var task = Coroutine();
      StartCoroutine(TaskCoroutine(task));
    }


    IEnumerator TaskCoroutine(IEnumerator task)
    {
        while (true)
        {
            var ie = MoveNext(task);
            yield return ie;
            if (ie.Current is bool)
            {
                if (!(bool)ie.Current)
                {
                    break;
                }
            }
        }
    }

    IEnumerator MoveNext(IEnumerator task)
    {
        if (_isPause)
        {
            yield return null;

        }
        else
        {
            if (task.MoveNext())
            {
                var current = task.Current;

                if (current == null)
                {
                    yield return null;
                }
                else
                {
                    var type = current.GetType();
                    //IEnumeratorはcurrent isで判断する
                    if (current is IEnumerator)
                    {

                        while (true)
                        {
                            //currentがIEnumeratorの場合再帰的に実行
                            var ie = MoveNext((IEnumerator)current);
                            yield return ie;
                            if (ie.Current is bool)
                            {
                                if (!(bool)ie.Current)
                                {
                                    break;
                                }
                            }
                        }
                    }
                    //IEnumerator以外はcurrent.GetType()で判断する
                    //下記は説明用の分岐。
                    else if (type == typeof(Coroutine))
                    {
                        yield return current;

                    }
                    else
                    {
                        yield return current;
                    }
                }
            }
            else
            {
                yield return false;
            }
        }

    }

    IEnumerator Coroutine()
    {
        yield return NestCoroutine();
    }

    IEnumerator NestCoroutine()
    {
        var time = 0f;
        while (time &lt; 2f)
        {
            yield return null;
            time += Time.deltaTime;
            Debug.Log(time);
        }
    }

