Scene とはゲーム画面というとわかりやすいんでしょうか。よく具体例で言っているのはロールプレイングゲームですね。フィールド歩く「マップ画面」と敵に遭遇したら切り替わる「バトル画面」は、それぞれ違う画面として管理した方が良さそうじゃないですか。そういうときに Scene で「マップ Scene」や「バトル Scene」という形でそれぞれの画面ごとに作ることができます。こう書かれてもピンと来ないかもしれませんので以下のような Scene で構成されているゲームがあるとします。やりたいことはゲーム画面でプレイした結果をクリア画面に渡したいんです！具体的にいうとゲーム画面でクリアしたかどうかを bool 値で判定して、その bool 値をリザルト画面に渡したい。public で static な変数を使えば他のスクリプトへの変数に参照できます。どこからでも変数を呼べるし格納もできるので Scene が違っていても変数に格納できます。以下にサンプルとなるソースを記載します。GamePlaying が実際に遊ぶゲーム画面にアタッチされており、GameResult がゲーム結果画面にアタッチされているモノとしてご確認ください。▼【保存する場合のスクリプト】▼▼【読み込みたい場合のスクリプト】▼共通で使用したい変数である isClear は、GameResult 側に宣言してもよいです。その場合は GamePlaying 側からはGameResult.isClearで参照することができます。上記のような形で public で static な変数を使用すれば、ほぼどこからでも参照できます。どこからでも参照できるというのは便利ではありますが、それはそれで意図しない場所から参照される場合もあります。特に人と作業される場合は「この変数は参照できるから利用しよう！」と変数に対して意図しない値を格納されたりすることもあるのでご注意ください。
「staticおじさん」という揶揄もあったりして多用しすぎるとよくない可能性もあるにはありますが、リスクなどを把握しながら上手く使い分けて行くことが重要だと思います。とりあえずは個人でやる分には上記の方法を使ってみてもイイかなと思っています悩んで停滞するよりは進めることの方が重要だと思うので。通常、他のSceneに切り替わった（遷移）場合は、遷移前のSceneのオブジェクトは全て破棄されます。DontDestroyOnLoad()を使用すれば、使用したSceneについて他のSceneに切り替わった（遷移する）場合でもオブジェクトが破棄されません。オブジェクト自体は残っているのでオブジェクトを検知して変数を参照したりオブジェクトを操作することが可能です。▼【ゲーム画面にアタッチするスクリプト】▼▼【結果画面にアタッチするスクリプト】▼▼【ゲーム画面スクリーンショット】▼
▼【結果画面スクリーンショット】▼
結果画面でtestという変数を参照していますが public な変数です。public を付けないと他からは参照できないのですが static でなくてもオブジェクトを通して参照できます。ちなみにざっくりと static について説明しますが static は静的なモノで最初に領域を確保されるため参照対象となる変数は１つしか存在しません。この説明だけだとわかりにくいですが、今回の場合を例にするとちょっとわかりやすいかも。
今回の場合はオブジェクトResultObjectの変数testを参照していますが、もし他のオブジェクトなら他のオブジェクトを探して、探し出したオブジェクトの変数testを参照できます。つまりオブジェクトの数だけ変数testが存在することになります。▼【試しにstaticの変数を追加してみるが・・・】▼▼【GameObjectから参照しても参照できない】▼
プログラムおよびアプリ自体に値を保存してしまえば Scene を跨いでも受け取れるようになります。値を渡す目的だけで使うのは微妙かもしれません。ゲーム画面のスコアなどの記録したいモノであれば使ってもイイかなと。以下にサンプルのソースを記載します。以下のことを気をつけてご利用いただければ幸いです。▼【保存する場合のスクリプト】▼▼【読み込みたい場合のスクリプト】▼


