Azure Communication Services は、リアルタイム コミュニケーション基盤となるサービスで、テキスト | 音声 | ビデオ によるコミュニケーションのハブとなり、接続やコントロールを行うアプリやサービスを SDK などを用いて容易に開発できます。今回は、Azure Communication Services を使ったアプリ開発の第一歩として、チャットができるまでを手順を追って確認し、コンソールアプリを作成してみます。SDK は C# | JavaScript | Java(J2EE) | Python、モバイルアプリ用に Objective-C / Swift, Java (Android) が用意されています。SDK のライブラリーは以下のようなものがあります (言語によってあるものとないものがあります)。Microsoft Docs &gt; Azure Communication Services &gt; クライアントライブラリと Rest API今回のアプリは、Visual Studio Code + .NET Core 3.1 (C#) 開発環境でも構築可能です。Azure Portal から Azure Communication Services のサービスを新規作成します。
作成した Azure Communication Services から、接続文字列とエンドポイントを取得しておきます。今回は C#、コンソールアプリを念頭に、チャットができるまでの手順を確認します。非同期(Async) 対応のメソッドも用意されていますので、Web アプリなどの場合はそちらを利用したほうが良いでしょう。接続文字列を用いて CommunicationIdentityClient を新規作成し、ユーザーの作成とアクセストークンの取得を行います。接続文字列には Azure Communication Services　にアクセスするキーが含まれています。アクセストークンの種類は Chat を指定します。(他に Calling, SMS があります)
作成したユーザーと取得したトークンを用いて、チャットをコントロールする ChatClient を作成しておきます。YOUR_CONNECTION_STRING は 事前準備で取得した 接続文字列、YOUR_ENDPOINT はエンドポイントに置き換えてください。コミュニケーションをまとめる単位としてスレッド (ChatThread) という概念(オブジェクト) があり、スレッドの中でユーザーの管理やメッセージのやり取りを行います。
ここでは ChatThread をコントロールする ChatThreadClient を作成し、ユーザーを追加します。作成した ChatThread に ChatThreadClient からメッセージを投稿します。ChatThread に投稿されたメッセージを ChatThreadClient で読み出します。Step 1&amp;2 と同様に、ユーザーを作成したあと、スレッドに追加します。以上の手順を踏まえて、Visual Studio 2019 で C# .NET Core 3.1 コンソールアプリを作成します。Visual Studio Code の手順は Micrsoft Docs の クイックスタート を参考にしてください。Visual Studio 2019 の起動画面で、新しいプロジェクトの作成 を選択し、コンソールアプリ(.NET Core) を選択して作成します。プロジェクトが作成されたら、NuGet パッケージマネージャーからライブラリをインストールします。
Azure.Communication.Chat を検索してインストールします。ライブラリーもまだ Beta のため (2020年10月現在)、プレスリリースを含める をチェックしないと表示されません。Program.cs にコードを記述していきます。今回は、これらのライブラリーを利用します。前手順の 2. でパッケージをインストールさえしておけば、利用時に Visual Studio が自動で検出して追記します。Program の冒頭に connectionString, endpoint を記載しておきます。YOUR_CONNECTION_STRING は 事前準備で取得した 接続文字列、YOUR_ENDPOINT はエンドポイントに置き換えてください。セキュリティの観点から別の設定ファイルなどに記載して読み出すのが一般的ですが、今回は動作を確認するのみのアプリなので本体に記載しています。まず、ユーザーには名前を入力してもらい、その名前で CommunicationUser を作成します。
新規で ChatThread を作成し、CommunicationUser を追記します。次にメッセージを入力してもらい、それを SendMessage で ChatThread に投稿します。GetMessages で ChatThread の全メッセージを取得します。
ChatThread には投稿されたメッセージの他にスレッドの管理情報も含まれるため、メッセージのみを取り出すために message.Type == "Text" に限定して出力しています。
出力内容はお好みですが、各メッセージに付与される Id (message.Id)、ユーザー名 (message.SenderDisplayName)、メッセージ (message.content)、最初に投稿された日時 (message.CreatedOn) も合わせて出力してみます。以上で正しく稼働するか確認を行ってください。既存のスレッドに他のユーザーを追加できるように、加筆修正を行ったものが以下のコードになります。AzCommSrvsDemo202010コンソールを 2 つ起動することで、ユーザーを既存スレッドに追加する動作が確認できます。


