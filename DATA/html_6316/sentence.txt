More than 3 years have passed since last update.リフレクションとは、メタデータを用いてデータにアクセスすることです。
リフレクションの使い方が分かると、動的言語話者が静的言語と仲良くなれると言われています[誰によって?]。
どんなときに利用したくなるか、どうやって利用するかを説明します。上記のような2クラスがあり、CharacterからEnemyに攻撃する際のダメージを計算する関数を書くとします。さて、EnemyからCharacterに攻撃する際のダメージを計算する関数も作りましょう。全く同じような関数ができてしまいました。今回の問題の解決方法としては、CharacterとEnemyに共通のinterfaceを定義するか、親クラスを定義して継承するやり方が相応しいと思われます。
今回はリフレクションを解説する記事なので、強引にリフレクションを利用して解決してみます。まず、c#にはTypeというクラスがあります。
リフレクションはこのTypeオブジェクトを取得するところから始まります。c#ではobjectにGetTypeメソッドが定義されていて、全てのオブジェクトのTypeをこれで取得することができます。
上記の例の場合、attackerにCharacterオブジェクトを渡した場合、Characterクラスの情報(メタデータ)を持ったTypeオブジェクトがattackerTypeに代入されます。Typeオブジェクトからクラスのメタデータを取得しましょう。FieldInfoクラスはSystem.Reflectionnamespaceのクラスなので、usingを忘れずに追加します。
TypeクラスにはGetFieldメソッドが定義されており、これを使って変数の名前からFieldInfoオブジェクトを取得できます。
FieldInfoオブジェクトを利用すると、実際にオブジェクトに設定された値を取得したり、オブジェクトに値を設定したりできます。
それでは、リフレクションを利用した場合の実装例です。注意したいのは、上記の例のattackFieldはあくまでattackerのTypeのAttack変数のメタデータであり、receiverのAttackの取得には利用できないことです。
CharacterのAttackと、EnemyのAttackはそれぞれ別のFieldInfoということです。


