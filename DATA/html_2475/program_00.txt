using OxyPlot;
using OxyPlot.Axes;
using OxyPlot.Series;
using System;
using System.Globalization;
using System.Windows;
using System.Windows.Data;
using System.Windows.Media;

namespace OxyPlotTest
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            Init();
        }
        // OxyPlotのためのモデルとコントローラー
        public PlotModel Model { get; } = new PlotModel();
        public PlotController Controller { get; } = new PlotController();

        // 軸の設定
        public LinearAxis AxisX { get; } = new LinearAxis();
        public LinearAxis AxisY { get; } = new LinearAxis();

        public void Init()
        {
            // X軸の設定
            AxisX.Position = OxyPlot.Axes.AxisPosition.Bottom;    // 軸の位置(topにしたら、目盛りが上にくる)
            // Y軸の設定
            AxisY.Position = OxyPlot.Axes.AxisPosition.Left;      // Y軸の位置(Rightにしたら、目盛りが右にくる)

            // 設定した軸をモデルにセット
            Model.Title = "グラフのタイトル";
            Model.Axes.Add(AxisX);
            Model.Axes.Add(AxisY);

            // 3つ分の線グラフを作成
            for (int i = 0; i &lt; 3; i++)
            {
                // 色
                var r = (byte)(i == 0 ? 0xff : 0);
                var g = (byte)(i == 1 ? 0xff : 0);
                var b = (byte)(i == 2 ? 0xff : 0);

                // 線グラフ
                var LineSeries = new OxyPlot.Series.LineSeries();
                LineSeries.Title = "線グラフ1のタイトル";
                LineSeries.InterpolationAlgorithm = InterpolationAlgorithms.UniformCatmullRomSpline;//グラフの角を丸める
                LineSeries.Color = OxyColor.FromArgb(0xff, r, g, b);        // 上の線の色
                LineSeries.StrokeThickness = 2;                             // 線の太さ
                                                                            // 点を追加
                LineSeries.Points.Add(new DataPoint(1.0, 10.0 + 10.0 * i));
                LineSeries.Points.Add(new DataPoint(5.0, 90.0 + 10.0 * i));
                LineSeries.Points.Add(new DataPoint(9.0, 40.0 + 10.0 * i));
                // 線グラフをモデルに追加
                Model.Series.Add(LineSeries);
            }

            // セットした内容を反映させる
            Model.InvalidatePlot(true);
        }        
    }

    // OxyColorから通常のColorのBrushに戻すコンバータ。
    public class OxyColorToSolidColorBrushConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is LineSeries ls)
            {
                var oc = ls.Color;
                return new SolidColorBrush(Color.FromArgb(oc.A, oc.R, oc.G, oc.B));
            }
            return null;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }

}


