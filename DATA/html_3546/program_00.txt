using System;
using System.Collections.Generic;
using System.Runtime.Remoting.Messaging;
using System.Linq;

namespace SequenceString
{
    class ListConverter
    {
        public static string ListToSequenceString(List&lt;Int64&gt; myList,
                                              Char SeparaterCharacter = ',',
                                              Char NaverCharacter = '-')
        {
            string SequenceString = "";
            List&lt;Int64&gt; innerList = myList;
            Int64 Position = -999;
            bool isLastNumber = true;
            try
            {
                innerList.Sort();
            }
            catch
            {
                return "I can not sort this List.";
            }
            foreach (Int64 val in innerList)
            {
                if (Position + 1 == val)
                {
                    if (isLastNumber) SequenceString += NaverCharacter;
                    isLastNumber = false;
                }
                else
                {
                    SequenceString +=
                        String.Format(isLastNumber ? "{1}{2}" : "{0}{2}{1}{2}",
                                      Position, val, SeparaterCharacter);
                    isLastNumber = true;
                }
                Position = val;
            }
            if (!isLastNumber) SequenceString += String.Format("{0}", Position);
            SequenceString =
                SequenceString.Replace(SeparaterCharacter.ToString() + NaverCharacter.ToString(),
                                       NaverCharacter.ToString());
            SequenceString = SequenceString.TrimEnd(SeparaterCharacter);
            return SequenceString;
        }

        public static List&lt;Int64&gt; SequenceStringToList(string SequenceString,
                                                  Char SeparaterCharacter = ',',
                                                  Char NaverCharacter = '-'
                                                  )
        {
            List&lt;Int64&gt; innerList = new List&lt;Int64&gt;();
            try
            {
                foreach (String PartString in SequenceString.Split(SeparaterCharacter))
                {
                    if (PartString.Contains(NaverCharacter.ToString()))
                    {
                        String[] PartStrings = PartString.Split(NaverCharacter);
                        if (PartStrings.Count() == 2)
                        {
                            for (Int64 i = Convert.ToInt64(PartStrings[0]); i &lt;= Convert.ToInt64(PartStrings[1]); i++)
                                innerList.Add(i);
                        }
                    }
                    else
                    {
                        innerList.Add(Convert.ToInt64(PartString));
                    }
                }
            }
            catch (Exception ex)
            {
                throw (ex);
            }
            return innerList;
        }
    }
}

