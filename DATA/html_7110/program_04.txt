
namespace Test
{
    public class MainForm : Form
    {
        static void Main(string[] args)
        {
            Application.Run(new MainForm());
        }

        public MainForm()
        {
            //データ管理用クラスの、データ変更イベントをListenする。
            DataClass.DataPassEvent += DataClass_DataPassEvent;

            //サブフォーム内に実装した、データを変更するメソッドを呼び出す。
            //下記メソッドはどのクラスから呼び出してもいいが、今回は2つしかクラスがないので、このクラスで呼び出す。
            new SubForm().Method();
        }

        private static void DataClass_DataPassEvent(DataChangeEventArgs e)
        {
            //データ変更前後の値を表示する。
            //メッセージBOXは4回表示され、表示結果は以下
            //------------------------------------------
            //①変更前は で 変更後は あいうえお
            //②変更前は あいうえお で 変更後は かきくけこ
            //③変更前は かきくけこ で 変更後は さしすせそ
            //④変更前は さしすせそ で 変更後は たちつてと
            //------------------------------------------
            MessageBox.Show($"変更前は { e.OldStringData } で 変更後は { e.NewStringData } ");
        }
    }

    public class SubForm : Form
    {
        //データ管理用クラスのデータを変更する。
        public void Method()
        {
            DataClass.StringValue = "あいうえお";
            DataClass.StringValue = "かきくけこ";
            DataClass.StringValue = "さしすせそ";
            DataClass.StringValue = "たちつてと";
        }
    }

    //データ管理用クラス
    public static class DataClass
    {
        public delegate void DataEventHandler(DataChangeEventArgs e);
        //このイベントをメインフォームとサブフォームでListenする。
        public static event DataEventHandler DataPassEvent;

        private static string oldValue;
        private static string newValue;

        public static string StringValue
        {
            get { return newValue; }
            set
            {
                //データ変更前後の値が違っていれば・・・
                if (oldValue != value)
                {
                    //元々あった値をoldValueに退避
                    oldValue = newValue;
                    //newValueにセットし・・・
                    newValue = value;
                    //データ変更イベントを起動する。
                    DataPassEvent?.Invoke(new DataChangeEventArgs(oldValue, newValue));
                };
            }
        }
    }

    //変更前後の値を渡す為のEventArgs
    public class DataChangeEventArgs : EventArgs
    {
        public string OldStringData { get; set; }
        public string NewStringData { get; set; }

        public DataChangeEventArgs(string oldData, string newData)
        {
            OldStringData = oldData;
            NewStringData = newData;
        }
    }
}

