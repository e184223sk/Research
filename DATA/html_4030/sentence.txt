More than 1 year has passed since last update.梅花碁は、碁盤と碁石であそぶ連珠の一種です。「うめはなご」と読むのかと思ったら、「ばいかご」なんですね。
黒、白交互に打ち進めて、十字の勝ちパターンを作ったほうが勝ちというゲームです。
十字の大きさは問いませんが、辺の方向は水平、垂直、４５度の角度に限ります。
たとえば、以下のようなパターンができれば、白の勝ちとなります。梅花碁の対戦ゲームを作成しようかとも思ったのですが、その前段階として、梅花碁のある局面で白黒どちらが勝ったかどうか（上記の十字形ができたかどうか）を調べるプログラムを書いてみました。勝ちパターンがあるかどうかを調べる方法は、注目している石を梅花の中心とみなして、十字の勝ちパターンになっているかを地道に一点一点確認するという当たり前の方法を採用しました。盤面の状態はファイルから読み込むようにしています。※ ソースコードは、GitHubでも公開しています。Mainメソッドのあるクラスです。Solverクラスを使って勝ちパターンがあるかどうかを調べ、勝ちパターンがあれば、それを表示しています。どこで勝ちパターンが作られたかを色を変えることで示すようにしています。盤面のデータファイル名は、"board.txt"と固定にしています。勝ちパターンがあるかを調べるクラスです。効率面やクラス設計ではまだまだ改良のよりがありそうですが、正しく動作することを優先してこの形に落ち着きました。
タプルを使いましたが、outキーワードの引数で勝ちパターンの石の配置を返した方が良かったかもしれません。主なメソッドは以下の通りです。ある点を与えると、その点を中心とした十字パターンがあるかどうかを調べるメソッド。
bool値とその勝ちパターンの石の配置をタプルで返します。なお、中心点と十字のサイズを与えると、その勝ちパターンの位置コレクションを返すメソッド CreateWinPattern1, CreateWinPattern2を作成して、このメソッドからそれを呼び出しています。こうすることでIsWinPatternがすっきりとしたと思います。IsWinPatternメソッドをすべての地点に対して調べて行き、一つでもIsWinPatternが trueを返せば、勝ちパターンがあると判定。
IsWinPatternと同様に、bool値とその勝ちパターンの石の配置をタプルで返します。どちらの石が勝ったのかを判定するメソッド。石の種類と勝ちパターンの石の配置をタプルで返します。
IsWinを白石と黒石に対して呼び出すことで実現しています。盤面を表すクラス(Board)と石クラス(Stone)。Stone.Emptyは何も置いていないことを示す仮のStoneオブジェクト。盤面を表すBoardクラスは、Boardbase&lt;T&gt;(後述)を継承しています。このプログラムでは、初期化以外は、Boardbase&lt;T&gt;で定義されている基本機能だけを使っています。勝ちパターンの石の色を赤で示しています。
C# + .NET Coreで作成し、Macで動かしていますが、ソースコードの修正なしで、Windowsでも動作するはずです。このBoardBaseクラスは、「騎士巡回問題」「ナイト(騎士)の最適配置問題」「協力最短詰めオセロ」などで利用したものと同じものです。前述のBoardクラスの基底クラスです。X × Y の盤面を表し、基本的な操作を定義しています。これは似たようなパズルでも再利用できるような汎用的な機能に絞っています。このBoardBaseクラスは、コンソールアプリに依存しない作りにしています。UWP、WinFormsでもそのまま使えると思います。このBoardBaseを継承して、当パズル専用のBoardクラスを定義します。内部では1次元配列を使っていますが、インデクサを定義して、1次元配列、2次元配列としても扱えるようにしています。
ただし、すべてのメソッドで１次元対応と２次元対応のものを用意するのは面倒なので、どちらか一方にしています。まあこれは好み以外の何物でもありません。１次元のインデックスによるアクセスができるようにしている理由は、一重ループで処理が書けるので、コードが簡潔になるからです。LINQのコードも書きやすくなります。2次元配列として見た場合の、X座標、Y座標は、0 からではなく、1から始まります。
つまり、board[1,1] は、いちばん左上を示し、8×8の盤ならば、board[8,8]が右下を示すことになります。なお、盤の周りには番兵用の領域を用意しています。これにより範囲外かどうかの判断を簡単に出来るようにしています。チェスのナイト(騎士)の動きにも対応できるよう、番兵は二重にしています。上の図は 4×4の盤を表していますが、グレー部分が番兵が置いてある盤の周囲で、水色部分が実際の盤です。
盤面上の数値は、１次元配列のインデックスを表しています。なお、派生クラスや派生クラスを利用するクラスが、この番兵の存在に依存しないように、ToDirectionという関数を定義し、X方向、Y方向のペアで表す移動方向(ベクトル)をインデックスで表す方向に変換するようにしています。BoardBaseクラスはジェネリッククラスにしていて、そのパラメータの型は、盤面上に置けるクラスの型です。


