    /// &lt;summary&gt;
    /// MainWindow.xaml の相互作用ロジック
    /// &lt;/summary&gt;
    public partial class MainWindow : Window
    {
        /// &lt;summary&gt;
        /// 問題
        /// &lt;/summary&gt;
        private Problem Problem = null;

        /// &lt;summary&gt;
        /// カメラ
        /// &lt;/summary&gt;
        internal Camera2D Camera { get; private set; } = new Camera2D();

        /// &lt;summary&gt;
        /// 場を描画する?
        /// &lt;/summary&gt;
        internal bool IsFieldDraw { get; set; } = false;

        /// &lt;summary&gt;
        /// 描画アレイ
        /// &lt;/summary&gt;
        internal DrawerArray DrawerArray { get; private set; } = new DrawerArray();
        internal FieldDrawerArray FieldDrawerArray { get; private set; } = new FieldDrawerArray();

        /// &lt;summary&gt;
        /// ウィンドウがロードされた
        /// &lt;/summary&gt;
        /// &lt;param name="sender"&gt;&lt;/param&gt;
        /// &lt;param name="e"&gt;&lt;/param&gt;
        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            Problem = new Problem();
        }

        /// &lt;summary&gt;
        /// ウィンドウがアクティブになった
        /// &lt;/summary&gt;
        /// &lt;param name="sender"&gt;&lt;/param&gt;
        /// &lt;param name="e"&gt;&lt;/param&gt;
        private void Window_Activated(object sender, EventArgs e)
        {
            glControl.MakeCurrent();
        }

        /// &lt;summary&gt;
        /// glControlの起動時に実行される。
        /// &lt;/summary&gt;
        /// &lt;param name="sender"&gt;&lt;/param&gt;
        /// &lt;param name="e"&gt;&lt;/param&gt;
        private void glControl_Load(object sender, EventArgs e)
        {
            GL.Enable(EnableCap.DepthTest);
        }

        /// &lt;summary&gt;
        /// glControlのサイズ変更時に実行される。
        /// &lt;/summary&gt;
        /// &lt;param name="sender"&gt;&lt;/param&gt;
        /// &lt;param name="e"&gt;&lt;/param&gt;
        private void glControl_Resize(object sender, EventArgs e)
        {
            glControl_ResizeProc();
        }

        internal void glControl_ResizeProc()
        {
            int width = glControl.Size.Width;
            int height = glControl.Size.Height;
            Camera.WindowAspect = ((double)width / height);
            GL.Viewport(0, 0, width, height);
            GL.MatrixMode(MatrixMode.Projection);
            GL.LoadIdentity();
            OpenGLUtils.SetProjectionTransform(Camera);
        }

        /// &lt;summary&gt;
        /// glControlの描画時に実行される。
        /// &lt;/summary&gt;
        /// &lt;param name="sender"&gt;&lt;/param&gt;
        /// &lt;param name="e"&gt;&lt;/param&gt;
        private void glControl_Paint(object sender, System.Windows.Forms.PaintEventArgs e)
        {
            GL.ClearColor(Color4.White);
            GL.Clear(ClearBufferMask.ColorBufferBit | ClearBufferMask.DepthBufferBit);
            GL.Enable(EnableCap.PolygonOffsetFill);
            GL.PolygonOffset(1.1f, 4.0f);
            GL.MatrixMode(MatrixMode.Modelview);
            GL.LoadIdentity();
            OpenGLUtils.SetModelViewTransform(Camera);

            ConstraintDrawerArray.Draw();
            if (IsFieldDraw)
            {
                FieldDrawerArray.Draw();
            }
            else
            {
                DrawerArray.Draw();
            }

            glControl.SwapBuffers();
        }
    }

