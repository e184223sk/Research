More than 1 year has passed since last update.これは VTuber Tech #1 Advent Calendar 2018 19日目の記事です。2018年はVTuberが大流行したことに始まり、VRMなどアバター向けフォーマットが登場、VRoidなど簡単にアバターが作成できるソフトも登場するなど、環境的にも技術的にもV界隈では様々な躍進が見られた一年だったと思います。個人的にはV関連技術ではRGB画像からモーションキャプチャする姿勢推定技術を追うのが楽しかった一年でした☺️
ブラウザで動くPoseNetなど、次々と新しい技術が出てきてワクワクしっぱなしでした。そんな姿勢推定を使った技術で、最近気になる記事がありました。
Playing Mortal Kombat with TensorFlow.js. Transfer learning and data augmentation · Minko Gechev’s blog
Tensorflow.jsによるActionRecognition(行動認識)で格闘ゲームをプレイするというもので「お、面白い〜〜〜」と思わず唸ってしまいました。
ということで、ActionRecognitionコントローラーを作成し、Unity上のキャラクターを動かしてみます。システム構成としてはNode.js+Tensorflow.jsでActionRecognitonコントローラーを作成し、UnityにWebSocket通信で入力を送信します。の順で作っていきます。ではまず、ActionRecognitonコントローラーを作っていきます。次のコマンドでプロジェクトを作成し、依存ライブラリをインストールしていきます。今回は学習データは作らないので、モデルの重みは次のリポジトリよりお借りします。(パンチとキックのみを認識するモデル)
GitHub - mgechev/mk-tfjs: Play MK.js with TensorFlow.jsmodelフォルダにWeightが保存されているので、フォルダごと丸ごと持ってきて、次のように配置します。それでは、メイン部分であるindex.htmlとmodel.tsを作成していきます。これでActionRecognitionコントローラーは完成です。
まだUnity側(サーバサイド)を用意してないので一部エラーが出ますが、次のコマンドで起動後、http://localhost:1234/ へアクセスすればActionRecognitionを試すことが出来ます。では、次にUnity側を作っていきます。まず、Unityで新規プロジェクトを作成します。
次のアセットをダウンロードし、プロジェクトにインポートします。次のようになっていればインポートはOKです。
では次にユニティちゃんをシーンに配置し、動かせるように諸々を設定していきます。
まず、ユニティちゃんのAnimator -&gt; Controllerに、UnityChanLocomotionsをアタッチします。
また、メニューバー -&gt; GameObject -&gt; Create Emptyより空のGameObjectを作成し(ここではcharacter_rootと命名)、ユニティちゃんを子オブジェクトとしてセットします。
その後、20180626sample/UnityChanControlScriptWithRgidBodyForAny.csをcharacter_rootへアタッチします。(デフォルトのUnityChanControlScriptWithRgidBody.csではエラーでアニメーションが再生されないため)スクリプトをアタッチしたら、character_rootで次の3項目を設定します。
このままゲームをスタートするとユニティちゃんが奈落へ落ちていくので、床(ここではFloorPrototype64x01x64)を設置します。ここまでの作業で、まずは動き回れるようになりました。次はAnimatorに新しくステートを設定していきます。
UnityChanLocomotionsを開き、PunchステートとKickステートを新しく追加します。
それぞれのステートにはIdleからMakeTransitionでトランジションを作成しておきます。(true false)
また、Punchステート、KickステートにはそれぞれJab、Hikickのような適当なアニメーションを貼り付けておきます。また、左側のParametersよりPunch、KickというBoolパラメータを追加しておきます。Idle -&gt; Punchへのトランジションでは、ConditionsからPunchをtrueに。
Punch -&gt; Idleへのトランジションでは、Punchをfalseに。
Idle -&gt; Kickへのトランジションでは、Kickをtrueに。
Kick -&gt; Idleへのトランジションでは、Kickをfalseに。
なるように設定しておきます。これでパンチとキックに遷移できるようになりました。では、Websocket経由でパンチを受け取ったらパンチを、キックを受け取ったらキックを行うコントローラーを作成します。
ActionRecognitionController.csというスクリプトを新規作成し、下記をコピペしてください。このスクリプトをcharacter_rootへアタッチすれば完成です。
パンチやキックに合わせて、こんな感じで動きます。というわけで、Tensorflow.jsでActionRecognitionコントローラーを作り、Unityのキャラを動かしてみました。
今回はパンチとキックしか認識しませんが、各方向への移動なども認識するよう学習すれば全編ジェスチャで操作できるゲームが作れるかもしれません。
元々の記事で学習用スクリプトも同梱されているので、気になる方は試してみてください〜。Playing Mortal Kombat with TensorFlow.js. Transfer learning and data augmentation · Minko Gechev’s blog
【Unity】VRoid（VRM）をインポートして動かす - ヽ｜∵｜ゝ(Fantom)  の 開発blog？
UnityでWebSocketを使用する - Qiita


