More than 1 year has passed since last update.C# のDictionary&lt;TKey,TValue&gt;同士をマージするコードを書く必要があり、どうせならfor文ぐるぐる、ContainsKeyで重複チェックして...より LINQ でスマートに書きたいと思い調べたのでまとめます。以下は上記のコードの説明です。
興味があれば読んでいただけると嬉しいです。コメントいただいた以下の方法の方がシンプルです。型を明示すると以下のようになります。ConcatでなくUnionでも連結できます。
ただしUnionの重複判定はキーでなくGetHashCodeで得られれるハッシュ値とEqualsで行われます。
つまり、和集合にはならずConcatと同様にToDictionaryの前に重複を弾く必要があります。
Unionの第二引数にIEqualityComparer&lt;Dictionary&lt;string, int&gt;を実装したクラスを渡せば重複を弾けますが面倒なのでやりません。ToDictionaryはキーが重複すると例外をスローするのでキーが重複するKeyValuePairを取り除く必要があります。
GroupByの第二引数にFunc&lt;TKey,IEnumerable&lt;TElement&gt;,TResult&gt;を渡すと各グループから結果値を作成することができます。
KeyValuePairを返しているため結果がIEnumerable&lt;IGrouping&lt;string, int&gt;&gt;でなくIEnumerable&lt;KeyValuePair&lt;string, int&gt;&gt;になっています。keyValues.First()ではdict1が優先されkeyValues.Last()にするとdict2の値で上書きできます。ToDictionaryは第一引数でキーを、第二引数にバリューをそれぞれラムダ式で指定できます。for文回して～ContainsKeyで重複判定して～と比べるとConcat &gt; GroupBy &gt; ToDicitonaryは短くなりますが、何度も書くのは面倒なので拡張メソッドを定義しておきます。Mergeは重複するキーがある場合、呼出し側のDictionaryを優先します。
Updateは重複キーがある場合、引数で与えたDictionaryを優先します。


