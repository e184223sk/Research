More than 3 years have passed since last update.UnityのシェーダーにComputeShaderというものがあります
昔に触りにくそうという理由で諦めてしまったので、同じ道を辿る人が少しでも減るように超入門的なComputeShaderについての内容を書いていきます環境
Unity 2017.4.1f1 64bitUnityのCubeを動かしてみましょう

これをとりあえず右にComputeShaderを使って動かします最初の中身はこんな感じ最初はTexture2Dを受け渡しするようになっていますが・・・今回は座標を受け渡ししたいのでにしましょう(横移動だけの予定なのでfloatだけ)
基本的にGPUのデータをCPU側に渡すために使います次にCPU側からGPU側に現在の座標を渡せるようにするために
ComputeShaderに float positionX; を追加しますComputeShader側での受け渡し準備はこれで完了現在の処理はデフォルトのとなっていますが、今回は座標を移動させたいのでとしましょう
これでComputeShader側のやるべきことは終わりです！UnityのCreate-&gt;C# Scriptからスクリプトを作りましょう
その後適当なオブジェクトにAddComponentしてください今回は座標を移動させるためのComputeShaderと、現在の位置を取得するためのTransformを設定できるように変数を作りますComputeShaderにはProjectビューから、さきほど作ったComputeShaderを入れてください
Transformには移動させたいCubeのTransformを入れますここからC#でComputeShaderを扱うためのメイン処理を書いていきます
先ほどComputeShaderで書いた RWStructuredBuffer&lt;float&gt; Result; を受け取るための変数を用意しますそして開始時に初期化します詳しい説明この行でComputeShaderの結果を受け取るためのバッファー（要素float１個分）を用意していますそしてそのバッファーをComputeShaderに設定していますこれでCPUとGPUが繋がりました！Update関数の中でデータを更新していきます
まずはCPU側のCubeの座標をGPUに送ります処理の内容としてはComputeShaderにFloatをSetする関数を使って、positionXにm_Cubeのposition.Xを渡しているという内容ですこれでGPU側がCPU側のCube座標について知ることができました！GPU側に必要な情報は全て渡し終えたので計算処理をしてもらいますComputeShaderのDispatchを使うことで処理を開始できます
(ひとまず基礎的なことだけを知るためなので引数については省略)Dispatchを呼んだことでGPU側でCubeを移動させる処理が完了しました！
しかしCPU側にそのデータは存在していないため、m_Cubeに適用することができません
なので取得をします詳しい説明受け取るデータはX軸の座標のみなのでfloatの要素数1の配列を用意します用意した配列にm_Bufferに入っているデータを入れます
これでGPU側のデータをCPU側で使えるようになりました！Cubeを取得したデータを元に移動させます再生すると右に移動していく
無事GPUで計算した座標に移動させることができました！
おめでとうございます！ちゃんと解放しましょう


