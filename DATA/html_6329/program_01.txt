
  var file = await SubFunc.MakeFileInterfaceAsync("data", "RingData.cs");
  var ret = new Dictionary&lt;string,Ring&gt;();
using (var stream = await file.OpenAsync(FileAccess.Read)){
      XElement root = XDocument.Load(stream).Root;

      var e2 = root.Elements("RingType");
                    var e3 = e2.SelectMany(i =&gt; i.Elements("Data"));
                    var q = from element in e3
                            let name= (element as XElement).Attribute("Name")
                            let id= (element as XElement).Attribute("ID")
                            where xAttribute != null
                            let xElement = element.Parent
                            where xElement != null
                            let typeAttr= xElement.Attribute("TypeName")
                            where typeAttr!= null
                            select new Ring
                            {
                                Name = name.Value,
                                Id= int.Parse(id.Value),
                                TypeName= typeAttr.Value,
                                Option = (from qoption in element.Elements("Option")
                                               select new Option
                                               {Type=int.Parse(qoption.Attribute("Type")),
                                                Value=qoption.Value}).ToArray()
                           };


                    ret = q.ToDictionary(skill =&gt; skill.Name);
}


