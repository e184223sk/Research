
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Linq;

namespace Persistence
{
    public class JsonDataAccessor : IDataAccessor
    {
        public List&lt;T&gt; IDataAccessor.Load&lt;T&gt;()
        {
            // EasySaveは使わなくてもOK.JSONファイルにアクセスできれば良い.
            var jsonStr = ES3.Load&lt;string&gt;(GetFileName&lt;T&gt;(), GetFilePath&lt;T&gt;());
            var entities = JsonUtility.FromJson&lt;Entities&lt;T&gt;&gt;(jsonStr);
            Debug.Log("JSON string is loaded : " + jsonStr);
            return entities.field;
        }

        public void IDataAccessor.Save&lt;T&gt;(List&lt;T&gt; entities)
        {
            var jsonFileName = GetFileName&lt;T&gt;();
            var orderedEntities = entities.OrderBy(element =&gt; element.id).ToList();
            var jsonStr = JsonUtility.ToJson(new Entities&lt;T&gt;(orderedEntities));
            // EasySaveは使わなくてもOK.JSONファイルにアクセスできれば良い.
            ES3.Save&lt;string&gt;(GetFileName&lt;T&gt;(), jsonStr, GetFilePath&lt;T&gt;());
            Debug.Log("JSON string is saved : " + jsonStr);
        }

        // ファイル名+Entity"というクラスを使って保存する
        private string GetFileName&lt;T&gt;()
        {
            string entityClassName = typeof(T).Name;
            var jsonFileName = entityClassName.Replace("Entity", "");
            return jsonFileName;
        }

        private string GetFilePath&lt;T&gt;()
        {
            return PersistenceConfig.dataFilePath + GetFileName&lt;T&gt;() + ".json";
        }
    }
}

