
using MailKit.Net.Smtp;
using MailKit.Security;
using Microsoft.AspNetCore.Identity.UI.Services;
using Microsoft.Extensions.Options;
using MimeKit;
using System.Threading.Tasks;

namespace WebApplication1.MailSender
{
    public class MailSender : IEmailSender
    {
        /// &lt;summary&gt;
        /// メール送信のパラメータ
        /// &lt;/summary&gt;
        SendMailParams _sendMailParams;

        /// &lt;summary&gt;
        /// メール送信のパラメータをDIで受け取るコンストラクタ
        /// &lt;/summary&gt;
        /// &lt;param name="optionsAccessor"&gt;&lt;/param&gt;
        public MailSender(IOptions&lt;SendMailParams&gt; optionsAccessor)
        {
            _sendMailParams = optionsAccessor.Value;
        }

        /// &lt;summary&gt;
        /// IEmailSenderのメール送信の実装メソッド
        /// &lt;/summary&gt;
        /// &lt;param name="email"&gt;送信先メールアドレス&lt;/param&gt;
        /// &lt;param name="subject"&gt;送信メールタイトル&lt;/param&gt;
        /// &lt;param name="message"&gt;送信メールメッセージ&lt;/param&gt;
        /// &lt;returns&gt;メール送信タスク&lt;/returns&gt;
        public Task SendEmailAsync(string email, string subject, string message)
        {
            return Execute(subject, message, email);
        }

        /// &lt;summary&gt;
        /// メール送信の実際の動作タスク
        /// &lt;/summary&gt;
        /// &lt;param name="subject"&gt;送信メールタイトル&lt;/param&gt;
        /// &lt;param name="message"&gt;送信メールメッセージ&lt;/param&gt;
        /// &lt;param name="email"&gt;送信先メールアドレス&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public async Task Execute(string subject, string message, string email)
        {
            var emailMessage = new MimeMessage();

            emailMessage.From.Add(new MailboxAddress(_sendMailParams.User, _sendMailParams.SendAddress));

            emailMessage.To.Add(new MailboxAddress(email, email));

            emailMessage.Subject = subject;

            emailMessage.Body = new TextPart("plain") { Text = message };

            using (var client = new SmtpClient())
            {
                await client.ConnectAsync (_sendMailParams.MailServer, _sendMailParams.Port, SecureSocketOptions.Auto);
                await client.AuthenticateAsync(_sendMailParams.User, _sendMailParams.Password);
                await client.SendAsync(emailMessage);
                await client.DisconnectAsync(true);
            }
        }
    }
}


