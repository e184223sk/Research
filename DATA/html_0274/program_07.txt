
if (find1)
            {
                if (find2)//2つのroopがくっついたとき
                {
//roop2(rightがくっついた方)の情報をroop1(leftがくっついた方)に移す
                    roop1.end = roop2.end;
                    roop1.endPos = roop2.endPos;
                    roop1.count += roop2.count + 1;
                    roop1.center += roop2.center + right;
//roop2の右手リストの場所にroop1を入れる.こうするとroop2は右手も左手もリストから消える
                    int key = MakeIntFromVector3(roop2.endPos) % listSize;
                    for (int i = 0; i &lt; rightLists[key].Count; i++)
                    {
                        if (roop2 == rightLists[key][i])
                        {
                            rightLists[key][i] = roop1;
                        }
                    }

                }
                else//自分の左手とroopの右手がくっついたとき, 右手リストの自分の右手indexにroopをついか
                {
                    roop1.count++;
                    roop1.center += right;
                    rightLists[rightIndex].Add(roop1);
                }
            }
            else
            {
                if (find2)
                {
                    roop2.count++;
                    roop2.center += right;
                    leftLists[leftIndex].Add(roop2);
                }
                else//どこにもくっつかなかったとき, roopを作成, 追加
                {
                    RooP newRoop = new RooP(target, target, left, right, right);
                    rightLists[rightIndex].Add(newRoop);
                    leftLists[leftIndex].Add(newRoop);
                }
            }

