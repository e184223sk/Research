
using System;
using BenchmarkDotNet.Attributes;

namespace MyBenchmark
{
    public class LazyTest
    {

        private const int _Iterations1 = 1000000;
        private const int _Iterations2 = 100000000;

        public class Foo
        {

            public DateTime InitializedAt { get; }

            public Foo()
                =&gt; InitializedAt = DateTime.Now;

        }

        [Benchmark]
        public long Initialize_LazySlim1()
        {
            var dummy = 0L;
            for(var i = 0; i &lt; _Iterations1; ++i)
            {
                var lazy = new LazySlim1&lt;Foo&gt;(() =&gt; new Foo()); // LazySlim2, Lazyに差し替えた版も用意
                unchecked{ dummy += lazy.Value.InitializedAt.Ticks; }
            }
            return dummy;
        }

        // ~~~

        [Benchmark]
        public long AccessValue_LazySlim1()
        {
            var dummy = 0L;
            var lazy = new LazySlim1&lt;Foo&gt;(() =&gt; new Foo()); // LazySlim2, Lazyに差し替えた版も用意
            for (var i = 0; i &lt; _Iterations2; ++i)
            {
                unchecked { dummy += lazy.Value.InitializedAt.Ticks; }
            }
            return dummy;
        }

        // ~~~

    }
}


