
   class Dispatcher
    {
        //singleton
        private static readonly Dispatcher disp = new Dispatcher();
        public static Dispatcher Instance =&gt; disp;
        private Dispatcher() { }

        Dictionary&lt;Type, IList&lt;object&gt;&gt; dic = new Dictionary&lt;Type, IList&lt;object&gt;&gt;();
        public void Resist&lt;T&gt;(Action&lt;T&gt; a)
        {
            var key = typeof(T);
            if (!dic.ContainsKey(key)) dic.Add(key, new List&lt;object&gt;());
            dic[key].Add(a);
        }

        public void Dispatch&lt;T&gt;(T payload)
        {
            var key = typeof(T);
            if (!dic.ContainsKey(key)) return;

            dic[key].OfType&lt;Action&lt;T&gt;&gt;()
                    .ToList()
                    .ForEach(call =&gt; call(payload));
        }
    }

