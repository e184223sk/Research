
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class BulletController : MonoBehaviour
{
    [SerializeField]
    private GameObject GameDataMemo;
    [SerializeField]
    private GameObject HitEffect;
    [SerializeField]
    private float BulletSpeed;
    [SerializeField]
    private float BulletDamage;
    // Start is called before the first frame update
    public void BulletSpeedSetter(float tmp)
    {
        BulletSpeed = tmp;
    }
    public void BulletSpeedChanger(float tmp)
    {
        BulletSpeed += tmp;
    }
    public void BulletDamageSetter(float tmp)
    {
        BulletDamage = tmp;
    }

    public void BulletDamageChanger(float tmp)
    {
        BulletDamage += tmp;
    }
    private void OnTriggerEnter2D(Collider2D collider)
    {
        if (collider.gameObject.tag != "Enemy")
        {
            return;
        }
        Debug.Log(HitEffect);
        collider.GetComponent&lt;EnemyController&gt;().HPChanger(-BulletDamage);
        GameObject eff;
        eff=Instantiate(HitEffect);

        Material mat = eff.GetComponent&lt;Renderer&gt;().material;
        eff.GetComponent&lt;Renderer&gt;().material = new Material(mat);

        Vector3 pos = GetComponent&lt;Transform&gt;().position;
        eff.GetComponent&lt;Transform&gt;().position = pos;


        Debug.Log(Time.time);
        Debug.Log(eff.GetComponent&lt;Renderer&gt;().material);

        Destroy(gameObject);


    }
    void Start()
    {
        GameDataMemo = GameObject.Find("GameDataMemo");
        //HitEffect = GameObject.Find("HitEffectPrefab");
    }

    // Update is called once per frame
    void Update()
    {

        Vector3 pos = GetComponent&lt;Transform&gt;().position;
        pos.x += BulletSpeed * Time.deltaTime;
        transform.position = pos;
        GameDataMemo Limit = GameDataMemo.GetComponent&lt;GameDataMemo&gt;();
        if(pos.x&gt;Limit.RightLimitGetter()|| pos.x &lt; Limit.LeftLimitGetter() || pos.y &gt; Limit.UpLimitGetter() || pos.y &lt; Limit.DownLimitGetter())
        {
            Destroy(gameObject);
        }
    }
}



