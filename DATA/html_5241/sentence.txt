More than 3 years have passed since last update.配列にアクセスしたいとき、forループで配列走査するコードを書くことがよくありますが、個人的にforループを使うのは気持ち悪いという感情を抱くことがよくあります。今回の記事では、forループを使うことに対して自分がなぜ気持ち悪いと思ったのかについて書いていきたいと思います。独断と偏見で書いてる部分が大きいので、この記事を読んでもあまり役に立たないかもしれません。
ご容赦ください。C# (Unity)・配列長でforループを回すことの意図、及びその危険性について　(方法１)
・配列長を変数に入れてforループを回すことの意図、及びその危険性について（方法２）
・配列の初期化に使用した定数でforループを回すことの意図、及びその危険性について（方法３）今回の記事では以下のような特徴を持ったクラスを考えることにします。
・int型の定数Nと、配列a,bを持つ
・定数Nを使って配列aと配列bを初期化している
・forループで配列aと配列bへのアクセスを行う配列走査したいとき、配列aに関して配列の長さa.Lengthを使ってforループを回すという方法が１つ目に考えられます。「配列の全ての要素について処理を回したい」という意図を強調したい場合、個人的にはこのような書き方をします。方法１では配列aの全ての要素についてforループが回るということが保証されます。この1行を見るだけで、配列aの全ての要素が走査されることが読み取れます。方法１だと、bの長さに変更がかかった場合に配列外アクセスが発生するというリスクが存在します。例えば、以下のようにして配列bの長さを変更したとします。このとき、forループ内を修正し忘れると配列外アクセスが発生してしまいます。２つ目の方法は、配列aの長さを変数に入れてその変数を使ってforループを回す、という書き方です。全ての要素というよりは「配列の個数に注目して処理を回したい」という意図を強調したい場合、個人的にこのような書き方をすることがあります。方法１では配列aの全ての要素についてforループが回るということが保証されていましたが、
方法２だと全ての要素について走査されないケースが出てきます。例えば、ヒューマンエラーによってnumの初期化とforの間にnumを変更する処理が混入してしまった場合などが考えられます。 この場合、配列走査が正しく行われないという不具合が発生してしまいます。また、方法１と同じく方法２でもbの長さに変更がかかった場合に配列外アクセスが発生する危険性が存在します。３つ目の方法は、配列aの初期化に使った定数Nを使ってforループを回すという方法です。個人的に、「クラス中で定義された定数に注目して処理を回したい」という意図を強調したい場合、個人的にこの書き方をします。このforループで配列の全ての要素が走査されるためには、
「配列aの初期化に定数Nが使用されている」
という約束が守られている必要があります。ヒューマンエラーによって配列の初期化に別の定数が使用されていた場合、不具合が発生してしまいます。例えば、bの初期化にNとは別の定数Mを使用するように変更したとします。forループ内を修正しなかった場合に、配列外アクセスが発生してしまいます。・forループを使った配列走査はヒューマンエラーによる不具合が発生しそうで気持ち悪い・foreachを使えばヒューマンエラーは減らせそうだけど、処理負荷があがるのがネック・コードを入念にチェックすればコード変更時の不具合は未然に防げるけど、不具合が発生するリスクはできるだけ抑えたい。
やっぱりforループは気持ち悪いループ内での配列アクセスは不具合を招きそうなので気持ち悪い


