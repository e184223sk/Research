
        #region Override ConfiguratorAttribute

        /// &lt;summary&gt;
        /// Configures the &lt;see cref="ILoggerRepository"/&gt; for the specified assembly.
        /// &lt;/summary&gt;
        /// &lt;param name="sourceAssembly"&gt;The assembly that this attribute was defined on.&lt;/param&gt;
        /// &lt;param name="targetRepository"&gt;The repository to configure.&lt;/param&gt;
        /// &lt;remarks&gt;
        /// &lt;para&gt;
        /// Configure the repository using the &lt;see cref="XmlConfigurator"/&gt;.
        /// The &lt;paramref name="targetRepository"/&gt; specified must extend the &lt;see cref="Hierarchy"/&gt;
        /// class otherwise the &lt;see cref="XmlConfigurator"/&gt; will not be able to
        /// configure it.
        /// &lt;/para&gt;
        /// &lt;/remarks&gt;
        /// &lt;exception cref="ArgumentOutOfRangeException"&gt;The &lt;paramref name="targetRepository" /&gt; does not extend &lt;see cref="Hierarchy"/&gt;.&lt;/exception&gt;
        override public void Configure(Assembly sourceAssembly, ILoggerRepository targetRepository)
        {
            IList configurationMessages = new ArrayList();

            using (new LogLog.LogReceivedAdapter(configurationMessages))
            {
                string applicationBaseDirectory = null;
                try
                {
                    applicationBaseDirectory = SystemInfo.ApplicationBaseDirectory;
                }
                catch
                {
                    // Ignore this exception because it is only thrown when ApplicationBaseDirectory is a file
                    // and the application does not have PathDiscovery permission
                }

                if (applicationBaseDirectory == null || (new Uri(applicationBaseDirectory)).IsFile)
                {
                    ConfigureFromFile(sourceAssembly, targetRepository);
                }
                else
                {
                    ConfigureFromUri(sourceAssembly, targetRepository);
                }
            }

            targetRepository.ConfigurationMessages = configurationMessages;
        }

        #endregion

