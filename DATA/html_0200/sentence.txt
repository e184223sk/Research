本記事は QualiArts Advent Calendar 2020の２４日目の記事です。この記事ではUnityのEditorを実装した際に躓いた点や新しく発見した点などを、個人的に後日振り替えれるようにまとめました。各内容が大きくなってしまったので記事を分けました。
興味のある記事から読んでいただければ幸いです。今回次のクラスを作成しEditorを実装しました。
クラスの役割について説明します。GameObjectへアタッチするコンポーネント。
タイムラインはこのTween単位で作成される。
具体的なTween情報を保持する。
Tween情報(TweenInfo)は複数設定が可能。Tweenの情報を持つクラス
 - Tweenのスタート時間
 - 具体的なTweenの中身実際のTweenアニメーションの情報を司るクラス。
- 長さ
- 経過時間
- スタート値
- 終了値
などを共通に持ち、継承したくらすで振る舞い（移動、拡縮、回転、透明...)などを制御する。
経過時間を使って「スタート値」「終了値」間の値を取得します。TweenAnimation直下のTransformを取得しMenuが表示できるようにします。
その際にGenericMenuクラスを利用します。メニューを選択したときに対象のTransformにTweenが追加されるようにします。
エディタ上のTweenを追加するときには「Undo.AddComponent」を利用します。
https://baba-s.hatenablog.com/entry/2019/09/30/170000逆に削除する場合にはこのような形で実装ができます。各Tweenに関してはスタート時間がバラバラになる可能性があるので、単純にタイムライン上の時間を使うことができません。
そのため各Tweenごと経過時間を計算します。まずはタイムライン上の経過時間を取得します。タイムライン経過時間を取得できたので、これを使って各Tweenの経過時間設定します。
先程のコードでは SetCurrentTimeRate でTweenAnimationのRateを設定しているので、これを使いますTweenAnimationに設定されているTweenの情報を元に現在時間とスタート時間・Tweenの長さを加味して再生中なのかどうかを判定しています。
再生中の場合にTweenに経過時間をセットしています。Tweenクラスを継承して、移動や透過などのそれぞれAnimationを担当するクラスを作り、経過時間に応じて値を変更します。例えば、CanvasGroupを使った透過処理の場合には次のようなコードを書くことができます。特定のTweenを選択する場合には次のように実装ができます。まずはGUI.SetNextControlName()を使って選択に必要なkey(String型）を設定します。設定したKeyを選択する場合にはGUI.FocusControl()を使います。
例えば対象のTweenをマウスでクリックした時など何かしらのイベントに仕込みます。選択されたkeyを取り出すときにはGUI.GetNameOfFocusedControl()を使います。
今回int型のString型にキャストして使っているので、少しめんどくさいやり方にはなっています。取り出したTween情報を元に、色を変えたり、Inspectorを表示したりします。Editorに関しては、この記事執筆時（2020/12/24)ある程度動くところまで実装はできたのですが、まだゲーム開発で使えるまでには作り込めていないため、サンプルなどは用意していません。
今後継続して開発は続けるつもりですので、何かしらアウトプットできるものがあれば何かしらの形で公開したいと思っています。


