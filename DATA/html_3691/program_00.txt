
/// &lt;summary&gt;
/// 2次元方向
/// &lt;/summary&gt;
public enum SquareDirection { Row = 0, Column = 1 }

/// &lt;summary&gt;
/// 配列の拡張メソッド
/// &lt;/summary&gt;
public static class ArrayEx
{
    /// &lt;summary&gt;
    /// 2次元配列向け列クラス
    /// &lt;/summary&gt;
    /// &lt;typeparam name="T"&gt;&lt;/typeparam&gt;
    public class SquareArrayColumn&lt;T&gt; : IEnumerable&lt;T&gt;
    {
        /// &lt;summary&gt;
        /// 2次元配列
        /// &lt;/summary&gt;
        private T[,] _array;
        /// &lt;summary&gt;
        /// 列インデックス
        /// &lt;/summary&gt;
        private int _colIndex;

        /// &lt;summary&gt;
        /// インデクサ
        /// &lt;/summary&gt;
        /// &lt;param name="rowIndex"&gt;行インデックス&lt;/param&gt;
        /// &lt;returns&gt;要素&lt;/returns&gt;
        public T this[int rowIndex]
        {
            get =&gt; _array[rowIndex, _colIndex];
            set =&gt; _array[rowIndex, _colIndex] = value;
        }

        /// &lt;summary&gt;
        /// Length
        /// &lt;/summary&gt;
        public int Length =&gt; _array.GetLength(0);

        /// &lt;summary&gt;
        /// Constructor
        /// &lt;/summary&gt;
        /// &lt;param name="array"&gt;2次元配列&lt;/param&gt;
        /// &lt;param name="rowIndex"&gt;行インデックス&lt;/param&gt;
        public SquareArrayColumn(T[,] array, int colIndex)
        {
            _array = array;
            _colIndex = colIndex;
        }

        /// &lt;summary&gt;
        /// GetEnumerator()の実装
        /// &lt;/summary&gt;
        /// &lt;returns&gt;IEnumerator&lt;T&gt;&lt;/returns&gt;
        public IEnumerator&lt;T&gt; GetEnumerator()
        {
            for (var i = 0; i &lt; Length; i++)
                yield return this[i];
        }

        /// &lt;summary&gt;
        /// GetEnumerator()の実装
        /// &lt;/summary&gt;
        /// &lt;returns&gt;IEnumerator&lt;/returns&gt;
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }

    /// &lt;summary&gt;
    /// 2次元配列向け行クラス
    /// &lt;/summary&gt;
    /// &lt;typeparam name="T"&gt;型パラメータ&lt;/typeparam&gt;
    public class SquareArrayRow&lt;T&gt; : IEnumerable&lt;T&gt;
    {
        /// &lt;summary&gt;
        /// 2次元配列
        /// &lt;/summary&gt;
        private T[,] _array;
        /// &lt;summary&gt;
        /// 行インデックス
        /// &lt;/summary&gt;
        private int _rowIndex;

        /// &lt;summary&gt;
        /// インデクサ
        /// &lt;/summary&gt;
        /// &lt;param name="colIndex"&gt;列インデックス&lt;/param&gt;
        /// &lt;returns&gt;要素&lt;/returns&gt;
        public T this[int colIndex]
        {
            get =&gt; _array[_rowIndex, colIndex];
            set =&gt; _array[_rowIndex, colIndex] = value;
        }

        /// &lt;summary&gt;
        /// Length
        /// &lt;/summary&gt;
        public int Length =&gt; _array.GetLength(1);

        /// &lt;summary&gt;
        /// Constructor
        /// &lt;/summary&gt;
        /// &lt;param name="array"&gt;2次元配列&lt;/param&gt;
        /// &lt;param name="rowIndex"&gt;行インデックス&lt;/param&gt;
        public SquareArrayRow(T[,] array, int rowIndex)
        {
            _array = array;
            _rowIndex = rowIndex;
        }

        /// &lt;summary&gt;
        /// GetEnumerator()の実装
        /// &lt;/summary&gt;
        /// &lt;returns&gt;IEnumerator&lt;T&gt;&lt;/returns&gt;
        public IEnumerator&lt;T&gt; GetEnumerator()
        {
            for (var i = 0; i &lt; Length; i++)
                yield return this[i];
        }

        /// &lt;summary&gt;
        /// GetEnumerator()の実装
        /// &lt;/summary&gt;
        /// &lt;returns&gt;IEnumerator&lt;/returns&gt;
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }

    /// &lt;summary&gt;
    /// 2次元配列から行を取得する
    /// &lt;/summary&gt;
    /// &lt;typeparam name="T"&gt;型パラメータ&lt;/typeparam&gt;
    /// &lt;param name="array"&gt;this 2次元配列&lt;/param&gt;
    /// &lt;param name="rowIndex"&gt;行インデックス&lt;/param&gt;
    /// &lt;returns&gt;行オブジェクト&lt;/returns&gt;
    public static SquareArrayRow&lt;T&gt; Rows&lt;T&gt;(this T[,] array, int rowIndex)
    {
        if (rowIndex &lt; 0 || array.GetLength(0) &lt;= rowIndex)
            throw new IndexOutOfRangeException();
       return new SquareArrayRow&lt;T&gt;(array, rowIndex);
    }

    /// &lt;summary&gt;
    /// 2次元配列から行を列挙する
    /// &lt;/summary&gt;
    /// &lt;typeparam name="T"&gt;型パラメータ&lt;/typeparam&gt;
    /// &lt;param name="array"&gt;this 2次元配列&lt;/param&gt;
    /// &lt;returns&gt;行オブジェクトの列挙子&lt;/returns&gt;
    public static IEnumerable&lt;SquareArrayRow&lt;T&gt;&gt; Rows&lt;T&gt;(this T[,] array)
    {
        for (var row = 0; row &lt; array.GetLength(0); row++)
            yield return array.Rows(row);
    }

    /// &lt;summary&gt;
    /// 2次元配列から列を取得する
    /// &lt;/summary&gt;
    /// &lt;typeparam name="T"&gt;型パラメータ&lt;/typeparam&gt;
    /// &lt;param name="array"&gt;this 2次元配列&lt;/param&gt;
    /// &lt;param name="colIndex"&gt;列インデックス&lt;/param&gt;
    /// &lt;returns&gt;行オブジェクト&lt;/returns&gt;
    public static SquareArrayColumn&lt;T&gt; Cols&lt;T&gt;(this T[,] array, int colIndex)
    {
        if (colIndex &lt; 0 || array.GetLength(1) &lt;= colIndex)
            throw new IndexOutOfRangeException();
        return new SquareArrayColumn&lt;T&gt;(array, colIndex);
    }

    /// &lt;summary&gt;
    /// 2次元配列から列を列挙する
    /// &lt;/summary&gt;
    /// &lt;typeparam name="T"&gt;型パラメータ&lt;/typeparam&gt;
    /// &lt;param name="array"&gt;this 2次元配列&lt;/param&gt;
    /// &lt;returns&gt;行オブジェクトの列挙子&lt;/returns&gt;
    public static IEnumerable&lt;SquareArrayColumn&lt;T&gt;&gt; Cols&lt;T&gt;(this T[,] array)
    {
        for (var col = 0; col &lt; array.GetLength(1); col++)
            yield return array.Cols(col);
    }

    /// &lt;summary&gt;
    /// 2次元配列をまとめて列挙する
    /// &lt;/summary&gt;
    /// &lt;typeparam name="T"&gt;型パラメータ&lt;/typeparam&gt;
    /// &lt;param name="array"&gt;2次元配列&lt;/param&gt;
    /// &lt;param name="direction"&gt;方向&lt;/param&gt;
    /// &lt;returns&gt;列挙子&lt;/returns&gt;
    public static IEnumerable&lt;T&gt; Flatten&lt;T&gt;(this T[,] array, SquareDirection direction = SquareDirection.Row)
    {
        IEnumerable&lt;T&gt; rowDirection()
        {
            for (var row = 0; row &lt; array.GetLength(0); row++)
            {
                for (var col = 0; col &lt; array.GetLength(1); col++)
                {
                    yield return array[row, col];
                }
            }
        }
        IEnumerable&lt;T&gt; colDirection()
        {
            for (var col = 0; col &lt; array.GetLength(1); col++)
            {
                for (var row = 0; row &lt; array.GetLength(0); row++)
                {
                    yield return array[row, col];
                }
            }
        }

        if (direction == SquareDirection.Row)
            return rowDirection();
        else
            return colDirection();
    }
}

