More than 1 year has passed since last update.こんにちは、のんびりエンジニアのたっつーです。
ブログを運営しているのでよろしければ見てください。LookingGlass Three.js 実装が公開されたので中身を軽く読んでみました、私としてはキャリブレーション結果（個体情報） 取得 の部分がどういった実装になっているのか気になったための確認となります。以前、Unity：Looking Glass を WebGL を使ってブラウザで表示するの記事を書いた際に、Looking Glass ではキャリブレーション結果（個体情報）をUSB経由で取得してその結果により表示の調整を行っています。Unity で WebGLで実装しても手元の環境でうまく表示されない原因はここのキャリブレーション結果（個体情報）がUSB経由で取得できないためにおこる原因となります。（ブラウザで動作する場合デバイスへのアクセスはセキュリティの制約があるので取得が難しい事に起因しています）なので、Three.js での実装が公開されると情報を聞いたのでこの実装をどう解決しているのか気になっていたためその調査結果となります。以下の部分が該当部分になります、doLoadEEPROM 関数になっており、ここでキャリブレーション結果（個体情報）を取得しています。まずは、ローカルPCの 11222 ポートに対して WebSocket を開こうとします。11222 ポートへの WebSocket オープンに失敗した場合、ドライバーがインストールされていないと判断してダウンロードしてインストールしようとします。11222 ポートへのWebSocketオープンに成功した場合、キャリブレーション結果（個体情報）を取得して正常に描画処理への調整パラメータとして設定します。簡単でしたね、キャリブレーション結果（個体情報）を取得する方法としてどういったアプローチをするのかと思っていたのですが、予想通りバックグラウンドにプロセスを立ち上げて、WebSocket 経由で情報を取得する形になっていました。Looking Glass の特性上、出荷時に個体毎にキャリブレーションを行いその値を本体に保存しているのでこのような手法に落ち着くのは仕方がない事かと思われます。よい、Looking Glassライフを！よければ ブログ「初心者向けUnity情報サイト」の方にも色々記載しているのでぜひご参照いただければと思います。


