More than 3 years have passed since last update.Qiitaには画像のアップロード容量上限があるようなので、古い記事を全て再構成して圧縮を計っている。これは　ジャンプキック　したときの動きだ。

ジャンプした、キックした、といった流れが　リアルタイムに見れる。開発中に動きがおかしくなったときの調査で役に立つ。
この　グラフみたいなやつが　アニメーター。　別に、アニメ以外のことにでも使える。
アニメーション・クリップを作るときに、アニメーターが　オマケに１個　作られる。
空中で歩いてしまっているときがある。
手作業で モーションとモーションをつなげていると、ミスというのはある。じゃあ直そう。こういうとき、Unityのアニメーター・コントローラーが使える。
公式の記事はこれ。「AnimatorController」unity DOCUMENT
https://docs.unity3d.com/ja/current/ScriptReference/Animations.AnimatorController.htmlここは読み飛ばして、あとで読み返してもいい。
普段、これ（上図、黄色の円）で開発していると思うが、これが ユニティ・エディター(UnityEditor)。ゲーム・ビュー（上図、赤色の円）でゲームを動かしているのが ユニティー・エンジン(UnityEngine)　だ。C#スクリプトを書くとき、と冒頭に書くことがあるだろう。
ゲームとしてリリースするときは、 using UnityEditor; を使っているコードは製品に含めないだろう。using UnityEditor; を使うときは、特別ルールが１つあって、あとで説明する。
これ、アニメーター(Animator)。
これ、レイヤーの一覧。　上図では [Base Layer] の１つしか使っていない。
これ、ステートマシン。線が引っ張ったりしているやつだ。
日本語で言うと　状態遷移図。
この六角形には、さらに　ステートマシン　が入っている。
ステートマシンというのは　親子の入れ子構造にできる。
この四角いのが　ステート。微妙に GUIで表示されているものと、C#スクリプトでのプロパティー名は異なる

ステート　と　ステート　をつないでいるのが、トランジション（白い矢印）だ。
ステートマシン（六角形）のやつ　ともくっつく。微妙に GUIで表示されているものと、C#スクリプトでのプロパティー名は異なる

トランジションは、コンディションを持っている。[Inspector]で見れるやつだ。なんとか図にしようとすると　こんな感じ。
主要なのが６つ。
（１） Layer
（２） StateMachine
（３） State ※ステートマシンの入れ子の葉っぱに当たる
（４） Transition ※StateとStateを結んでいる線。 StateMachineともつながる。
（５） Condition
（６） Position実装を見ると チャイルドなんとか という入れ物にラッピングされるように　ステートマシンが入っているが、基本的にステートマシン上の位置（座標とか）を入れているラッパーで包んでいるだけだ。ツリー構造に変わりはない。今はまだ　プログラムの書き方を説明していないが、これらの部品は　C#スクリプトから作ることができる。多くの部品は読み取り専用だが、新規作成／追加／削除　を利用して　取っ換えることができる。
部品によっては　全部廃棄して新規から同じものを作り直す 全取っ替え をしなければいけないものもある。GUIを使って手で線を引っ張っていると　数が多くて　つらいので、C#スクリプトから作れるようになっていこう。じゃあ、このアニメーターは何のためのGUIかというと、リアルタイムに状態遷移を確認、不具合調査をするための監視ウィンドウぐらいに思っておこう。using UnityEditor; を使うときは、特別ルールが１つある。
Assestフォルダーの下にどこでもいいので Editor フォルダーを作って、その下に using UnityEditor; を使う C#スクリプトを入れることだ。
(上図は、Editor フォルダーを作った例)Editor フォルダーは何個作ってもいい。他に関連する特別なフォルダー名としては Editor Default Resources も使うことがあるかもしれない。「特殊なフォルダー名」unity DOCUMENTATION
https://docs.unity3d.com/jp/current/Manual/SpecialFolders.html
Editor フォルダーを右クリックして、[Create] - [C# Script] を選び、いいかげんな名前 Banana1 というスクリプトをとりあえず作るとする。上図左下を見てほしい。
いつもは Assembly-CSharp プロジェクトの下に C# スクリプトを書いていたと思うんだが、ユニティー・エディター用の C#スクリプトは Assembly-CSharp-Editor プロジェクトの下に自動的に分別される。Banana1.cs には次のように書く。
このように　メニューは追加できる。
ばっちり　効いているようだ。このテスト手法はよく使う。Unityで知っておきたい基本操作は別記事にまとめた：http://qiita.com/muzudho1/items/8fa08d0d2b4c205df49c（再掲）
https://docs.unity3d.com/ja/current/ScriptReference/Animations.AnimatorController.html
まず、Assets フォルダーの下に Mecanim というフォルダーを作る。
Mecanim という名前のフォルダーに意味はない。サンプルでの練習が終わったら消してもいい。一度に実行すると　変化についていけないので、コメントアウトしながら　少しずつ実行していく。

サンプル・プログラムは　変数名や　コメント等を　改造してしまった。この C#スクリプトを　さっきのように Editor フォルダーの下に入れ、[MyMenu] - [Create Controller] から実行すると、Assets/Mecanim フォルダーの下に StateMachineTransitions.controller （アニメーター・コントローラー）ファイルが作られ　……（１）画面左端の方には　TransitionNow、Reset、といったトリガーが並び、……（２）そのとなりの方眼紙のところには　smA、smB　といった六角形の箱（これをステートマシンと呼ぶ）ができている。なお、smC は smB の中に入っている。……（３）
ほらね。[Entry] [Any State] [Exit] は　どこにでも入っている。
[(Up) Base Layer] は、上に戻るぐらいの意味だ。ステート（長方形）を追加する。あとで線を引っ張るものは、var を使って　変数に取り置きしている。（５）

最初に作ったのが stateA1 なので、smA の方に　暗いオレンジ色の矢印が伸びているようだ。（６）

左上のパンくずリストに書いてあるとおり、smA の中に stateA1 ができている。また、１つ上の階層の Base Layer の Entry から伸びてきた線が、Entry から入ってきて stateA1 につながっている。オレンジ色の線は、最初に実行されるステートにつながっている。明示的に設定していないときは暗い色の線になっている。（７）

smB の中もにぎやかだ。 stateB1、stateB2 が新しく作られている。 smC は　その前の（３）で作ったものだ。ここでは　Entry から stateB1 につながっている。（８）

smC の中には stateC1 と stateC2 が作られている。
よく分からないコードもある。
stageA1 が Exit につながったのは分かるんだが　……（５）
別に smA の Any State も、上の階層の Any State も、stateA1 にはつながっていない。……（６）？C#スクリプトで Any State から線を引く方法はあるんだが、ひとまず公式のサンプル通り　先に進もう。
さっき説明し忘れたんだが……。線（トランジション）をクリックして　Inspector ビューを見ると

Conditions に GotoB1 トリガーが設定されていることが分かる。……（７）
また、smC に線が伸びているが、これは stateC2 がデフォルト設定になっているので、そこへ伸びていっているものだ。
上の階層から Entry を経由して stateC2 に線がつながっている。
ステートを直接つなぐ以外にも、ステートマシンをつなぐ方法がある。この場合、遷移元のステートマシンの Exit と、遷移先のステートマシンの Enter がつながる。
smB ではなく、smC へ飛んでいる。一部　はしょったが、サンプル・プログラムは　ここまでだ。
これで　線をつなげるのは　C#スクリプトから　できることが分かった。ゲーム画面上に置いてあるものを　ゲームオブジェクト　と呼ぶ。
画像（≒スプライト）を貼り付けたり、モーション遷移（≒アニメーター）を付けたりする。ゲームオブジェクトとは別にスプライトがあるわけだが、このスプライトは単に画像ぐらいと思っておけばいいスプライトは、スプライト・エディターを使って　１枚の画像を　タイル状にスライスしたことを覚えておくこともできる。スプライト・レンダラーは、スプライトを描画するものだ。スプライト・レンダラーに　スプライトを指定すれば、
タイル状にスライスした画像を参照できるようになり、
アニメーションの高速描画を担当させることができる。どのような　アニメーションにするかは、アニメーション　というファイル に覚えさせる。
ドープシート（≒タイムライン）に　スライスした画像を並べてモーション・アニメーションを作ることができる。ここらへん全部、スライスした画像を間にして　依存しあいあっているわけだ。次の記事に続く。「Unityのアニメーター・コントローラーはどこまでC#スクリプトで作成できるかやってみた」
http://qiita.com/muzudho1/items/f6d8a10d057307057b7f「Unityで状態遷移を組むときに使うアニメーター・コントローラーを作成するC#スクリプトのソースコード」
http://qiita.com/muzudho1/items/d2a76d79b8a6b8437897


