More than 1 year has passed since last update.本記事は、筆者が作成したデザインパターンのサンプルの中で、Webで記載されているものより分かりやすいと判断したサンプルを共有することを目的としています。オブジェクト状態の保存と復元を実現するときに活用できるデザインパターンです。
最大の特徴はオブジェクトをMementoで保存するということです。Mementoはオブジェクトの状態を表す情報のみを格納する役割を持っています。状態を表すデータしか保持しないため、オブジェクトそのものよりデータ量が少ないです。そのため、Mementoを使ってオブジェクトの保持・復元を実現する場合には、オブジェクトそのものを保持・復元する場合に比べて使用するメモリ量を減らせるメリットがあります。Mementoパターンの一般的なサンプルは以下の通り、Web上に数多くあります。しかし、上記のサンプルはあまり一般的ではなく、実用性のないサンプルであると私は感じました。
そこで、スナップショット機能をテーマとした実用性のあるサンプルを作成しました。
次項でそのサンプルを示します。サンプルのテーマはスナップショット機能の付いた超簡易版テキストエディタです。
以下にクラス図とソースコード(C#で実装)を示します。それぞれのクラスの責務を説明していきます。TextEditorクラス
テキストの追記とスナップショットの作成、スナップショットからの状態復元を責務として持ちます。
AppendTextメソッドでテキストの追記、PrintTextメソッドでその時点でのテキストを表示します。
CreateMementoメソッドは、メソッドが呼び出された時点でのMementoを作成します。
SetMementoメソッドは、指定したMementoを使って状態を復元します。
一般的なMementoパターンでのOriginator(作成者)と同じ責務を持ちます。
OriginatorはMementoの作成とMementoからの状態の復元を行います。TextEditorMementoクラス
TextEditorの内部情報を保持する責務を持ちます。
TextEditorクラスの状態を復元するためにテキスト情報を保持します。
一般的なMementoパターンでのMemento(形見)と同じ責務を持ちます。
MementoはOriginatorの内部情報を保持します。TextEditorSnapShotManagerクラス
TextEditorのスナップショットの保存、指定したスナップショットにTextEditorを復元する責務を持ちます。
SaveSnapShotメソッドで名前を付けてスナップショットを保存します。
LoadSnapShotメソッドで指摘した名前のスナップショットにTextEditorを復元します。
対象とするTextEditorはコンストラクタで受け取ります。
一般的なMementoパターンでのCaretaker(世話人)と同じ責務を持ちます。
CaretakerはOriginatorの状態の保存と復元を責務として持ちます。Clientクラス
TextEditorを利用する責務を持ちます。
TextEditorとTextEditorSnapShotManagerを使って、TextEditorのスナップショットの作成、スナップショットからの復元の動作を確認します。2点あると考えています。
まずは、スナップショット機能という比較的実用的なサンプルである点です。スナップショット機能を作る際にはある程度は参考になるのではないかと思います。
次にクラスごとの責務が明確な点です。通常のサンプルでは、Caretakerとして振る舞うクラスがCaretakerを使う責務も持っており、責務分割がされていません。一方、上記のサンプルでは、Caretakerとして振る舞うクラス(TextEditorSnapShotManagerクラス)とCaretakerを使うクラス(Clientクラス)がしっかり分割されています。


