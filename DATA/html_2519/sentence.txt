More than 1 year has passed since last update.音声データを再生したいが、waveファイルやmp3ファイルを別ファイルで配布しないでリソースで同梱して扱いたい。というのを叶える方法を調べてみた。Visual Studio 2019を使っているが、昔のバージョンでもいけるはず。またusing変数宣言はC# 8.0の記法なので適宜置き換えて読んでほしい。
また、エラー処理や例外処理は端折っているので、適宜補うべし。C#のプロジェクトを作成し、あらかじめ音声データファイルをリソースに登録しておく。
wavの場合、リソースの種別は「オーディオ」となる。
mp3の場合、リソースの種別は「ファイル」となる。
これらは勝手に設定されて、変更できなさそう。（調査不足）登録したリソースは、次のように自動的に実装が作られる。リソースの名前や定義に、拡張子は含まれないようだ。
これらのリソース定義を使用しても良いし、自分でResourceManagerを使って取得しても良い。リソース定義を使った場合は、wav（オーディオ）はstreamで、mp3（ファイル）はbyte[]で取得できる。
以下では、リソースをstring等で選ぶことを考えて、自分でResourceManagerを使って取得する方法で記述している。winmm.dllからPlaySoundをインポートする。
引数で渡す予定のFlagも、別途enumで定義しておく。再生はPlaySoundにbyte配列を渡すことで行える。
オーディオリソースはstreamなので、いったん別のbyte配列に読み込む。停止も同じAPIで、第一引数をnullに、第三引数を0にする。これ以上のPlaySoundの利用方法は省略。NAudioは次で配布されているMs-PLライセンスの、.NET向け音声再生APIである。dll一つで扱える簡単さでありながら様々な音声形式に対応する。wav形式も対応しているので、PlaySoundではなくNAudioを使うこともできる。
https://github.com/naudio/NAudio再生は、NAudioのAPIであるMp3FileReaderにMemoryStreamを渡すことで行う。
再生状態はWaveOut.PlaybackStateで判別できる。これをnowaitでポーリングすると音声再生が乱れたのでwaitを入れている。多分ちゃんと調べる方法はある。（調査不足）停止はWaveOut.Stop()で行える。exe単体ないしはdllの同梱のみで、音声データを再生する方法を調べた。
とにかく再生できれば良かったので、再生中かどうかを考慮したり音声デバイスを選んだりなどは本記事では省略している。


