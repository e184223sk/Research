先日PowerPointファイルを利用して発表動画を作成する機会があったのですが，何度も噛んだり，制限時間に間に合わなかったり撮り直すことになりました．すごく喉が痛くなったので，機械に読み上げてもらうようにしようと思った次第です．やろうとしていることは以下のようなものです．今回は5までのやり方を示そうと思います．
ここまででナレーションありのスライド動画をUnityで表示させることができるようになります．ナレーションはスライドのメモを読み上げる形で実現します．UnityRecorder等を利用することで動画をエクスポートすることもできます．今回の記事で実装した内容はGitHubで公開しています．
詳しくはそちらを確認いただけるとありがたいです．6まで実装すると以下のような動画がPowerPointファイルを投げるだけで作成できるようになりました．

YouTubeの怪しい美容広告みたいになりました．Microsoft.Office.Interop.PowerPointライブラリを利用することで，C#で.pptxや.pptといったPowerPointファイルを開いたり，修正，画像の書き出しといったことが可能になります．以下のコードで，スライドを１枚の画像として書き出し，ノートをstringで取得します．UnityでPowerPointファイルを利用するのに一番問題となるのは，画像の保存場所です．
一般的にUnityではデータの保存場所としてApplication.persistentDataPathなどを利用しますが，これらは実行時Unityがアクセス権を持っており，PowerPointSDKからこの場所にデータの保存が行えないという問題がありました．
なのでFILE_PATHにはC:\Users\User\DocumentsなどUnityが触れない場所を設定する必要があります．一般的な.jpgファイルの読み込み方法と同じです．
以下のスクリプトで.jpgファイルをTexture2Dに変換します．先ほど取得できたスライドのノートを音声合成APIに送信し，AudioClipを作成します．
音声合成は必要になった場合にリアルタイムで合成結果を受け取るストリーミング音声合成が一般的ですが，今回は発言内容が事前にすべて決まっているため，先にリクエストを全て送信しておき，結果をキャッシュするようにします．今回は音声合成APIとしてWatson Text To Speech APIを利用しました．カタログからText To Speechを選択します．
リージョンを選択し，「作成」を押します．
リソースリストから今作成したサービスを選択し，APIキーとURLをメモしておきます
これでWatson側の設定は以上です．
WatsonにはIBM Watson SDK for Unityという便利なUnity用SDKが存在し，これを利用することで多くのサンプルやUtilityスクリプトを利用できますが，今回はText To Speechのみを利用するため，自分でWebRequestを実装します．まず，先ほど取得したAPIキーからアクセストークンを取得するリクエストを記述する必要があります．音声合成リクエストにはAPIキーではなくこのトークンを送る必要があります．トークンを取得するリクエストは以下のように記述します．今回はJsonのパースにNewtonsoft Jsonを利用しました．どんなものでもよく，AccessTokenパラメータのValueが目的のアクセストークンです．一応，Newtonsoft Jsonの場合のパースする対象オブジェクトは以下のような構造になっています．そしてリクエストを送信し，合成結果を取得するのは以下のように記述します．ACCESS_TOKENには先ほど取得したアクセストークンを，URLにはWatsonのページで取得したUrlを記述してください．これで合成音声のバイナリを取得できたので，UnityのAudioClipに変換する作業を行います．方法は私の前回の記事Google Cloud Text-To-Speechを利用してUnityでキャラクターをフルボイスに！でも使わせていただいた，WAVクラスを利用します．最後に，画像表示と音声再生を同時に行い，音声が終了したら次のスライドを表示し音声も再生させる機構を実装します．実装は簡単で，音声再生に使うAudioSourceをUpdateで監視しておき，isPlaying（再生中）がfalseになったら次の処理を行います．これでスライドの読み込みから音声合成，スライド送りが実装できました．今回はPowerPointファイルをUnityで読み込み，音声合成を行うことでナレーションありのスライド動画を自動で作成する手順を紹介しました．今回示したコードのサンプルは，実際には「リクエスト可能サイズに合わせたテキストの分割」や「分割された音声ファイルの結合」が必要です．そのような処理も含めた，UniSlideToMovieというサンプルプロジェクトをGitHubで公開していますのでそちらも確認していただけたらと思います．また，この次の記事として，今回触れられなかった「6. アバターを表示し，口パクさせる」処理について書きたいと思います．そちらもよろしくお願いします．


