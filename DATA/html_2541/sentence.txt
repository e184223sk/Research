More than 1 year has passed since last update.値オブジェクトの悩みポイントとどう付き合っていくかを見させていただいてのですが、
悩みがちな項目にがありました。
NullObjectパターンじゃないの？と自分は思っていたのですが、ネットで言及している情報があまりなかったのでここが良いよっていう点を投稿してみます。以下のようなドメインで考えます。を用意してみました。値オブジェクトの抽象クラスには値オブジェクトを実装するを使用しています。値オブジェクトの特性を満たせていればなんでも良いです。
値オブジェクトの生成はstaticファクトリメソッド派です。例えばユーザーIDのようなNullを許容しない値オブジェクトは以下のようにガチガチに作れば良いと思ってます。例えば名前のように(今回想定しているシステムでは)必須ではない項目に関しては別途Null名前のように名前を継承したNullObjectを用意すれば使う側は動作の違いを意識する必要がなくなるはず。例えば生年月日のように(今回想定しているシステムでは)必須ではない項目に関しては別途Null生年月日のように生年月日を継承したNullObjectを用意すれば使う側は動作の違いを意識する必要がなくなるはず。
今回はDateTime.MinValueを有り得ない値として表現しました。DateTimeをNull許容型にして操作するのも有りかと。例えば性別種別のように(今回想定しているシステムでは)必須ではない項目で、画面上の都合で選択していないという状態を表現するのにもNullObjectで良いかと。業務知識として選択なしというのを扱うのならば素直にenumに追加して上げても良いはず。プリミティブな値からユーザーを復元する際の例を書いてみます。こんな感じでnullか否かを意識することなくすっきり書けます。許容外の値が来た時のエラーハンドリングは必要ですけど。ユーザーをリポジトリを介して保存する例を書いてみます。というようなDAOがあったとして値を詰め込むときもNullか否かを意識せずに詰め込めます。
フレームワーク特有の詰め込み方がある場合には拡張メソッドなどで特有の処理を書いたほうが良いかと。
ドメインの方にフレームワーク特有の処理を書いてしまうと業務知識が汚染される気がします。その場合はなんかを値オブジェクトに用意するのではなくのように型判定で分岐しましょう。業務知識としてはnullは許したくなくてもDB等保存側の制限でNull許容にしなければならないときがあります。
その際はなあなあにせずきちんと業務知識として検討しないといけません。
(nullをそのまま代入するか、別値として内部では処理するか、とか)
その際にNullObjectとして型分けしておけば処理の差分が書きやすいかと思っています。値オブジェクトのNullableな値を取り扱う場合についてNullObjectパターン以外で便利な方法があればご教示頂きたいです。
あと値オブジェクトのNullObjectパターンだとこの場合に対応出来ない、とか。


