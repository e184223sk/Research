
    public class 生年月日 : ValueObject
    {
        protected DateTime _生年月日 { get; }

        public virtual string 生年月日スラッシュ =&gt; _生年月日.ToString("yyyy/MM/dd");
        public virtual string 生年月日ハイフン =&gt; _生年月日.ToString("yyyy-MM-dd");

        public static 生年月日 Create(object o)
        =&gt; DateTimeに変換(o) switch {
            null =&gt; new Null生年月日(),
            DateTime d when d.Equals(DateTime.MinValue) =&gt; new Null生年月日(),
            DateTime d when d &gt; DateTime.Now =&gt; throw new ArgumentException("今日より未来の生年月日は不可", "_生年月日"),
            var d =&gt; new 生年月日(d.Value),
        };

        private static DateTime? DateTimeに変換(object o)
        =&gt; o switch {
            string s when string.IsNullOrEmpty(s) =&gt; null,
            string s =&gt; 文字列をDateTimeに変換(s),
            DateTime d =&gt; d,
            _ =&gt; throw new ArgumentException("DateTimeに変換出来ません。" + o.ToString(), "_生年月日"),
        };
        private static DateTime? 文字列をDateTimeに変換(string s)
        {
            DateTime? d = null;
            DateTime d2;
            var result = DateTime.TryParse(s, out d2);
            if (result) d = d2;

            return (result) ? d : throw new ArgumentException("DateTimeに変換出来ません。" + s, "_生年月日");
        }

        private 生年月日(DateTime _生年月日) =&gt; this._生年月日 = _生年月日.Date;
        protected 生年月日() =&gt; _生年月日 = DateTime.MinValue;

        protected override IEnumerable&lt;object&gt; GetAtomicValues()
        {
            yield return _生年月日;
        }
    }

    public class Null生年月日 : 生年月日
    {
        public override string 生年月日スラッシュ =&gt; "";
        public override string 生年月日ハイフン =&gt; "";
    }

