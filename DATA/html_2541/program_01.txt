
    public class 名前 : ValueObject
    {
        protected string _名前 { get; }
        public virtual string 名前文字列 =&gt; _名前;
        public virtual string 名前様付 =&gt; _名前 + "様";

        public static 名前 Create(object _名前)
        =&gt; _名前 switch {
                string s when string.IsNullOrEmpty(s) =&gt; new Null名前(),
                string s when s.Length &gt; 60 =&gt; throw new ArgumentException("名前は60文字以下", nameof(_名前)),
                string s =&gt; new 名前(s),
                _ =&gt; throw new ArgumentException("文字列以外です。" + _名前.ToString(), "_名前")
            };
        private 名前(string _名前) =&gt; this._名前 = _名前;
        protected 名前() =&gt; this._名前 = null;

        protected override IEnumerable&lt;object&gt; GetAtomicValues()
        {
            yield return _名前;
        }
    }

    public class Null名前 : 名前
    {
        public override string 名前文字列 =&gt; "";
        public override string 名前様付 =&gt; "";
    }

