
    public enum 性別
    {
        男 = 1,
        女 = 2
    }

    public class 性別種別 : ValueObject
    {
        protected 性別? _性別 { get; }

        public virtual string 文字列 =&gt; Enum.GetName(typeof(性別), _性別.Value);
        public virtual int 値 =&gt; (int)(_性別.Value);

        public static 性別種別 Create(object o)
        =&gt; o switch {
            null =&gt; new 性別種別選択外(),
            int i when i == 0 =&gt; new 性別種別選択外(),
            var v =&gt; new 性別種別(性別に変換(v))
        };
        public static 性別 性別に変換(object o)
        =&gt; o switch {
            int i =&gt; (性別)Enum.ToObject(typeof(性別), i),
            string s =&gt; (性別)Enum.Parse(typeof(性別), s),
            _ =&gt; throw new ArgumentException("性別種別に変換できません。" + o.ToString(), "_性別")
        };
        public static 性別種別 Create男() =&gt; Create(1);
        public static 性別種別 Create女() =&gt; Create(2);
        public static 性別種別 Create選択外() =&gt; Create(null);

        private 性別種別(性別 _性別) =&gt; this._性別 = _性別;
        protected 性別種別() =&gt; _性別 = null;

        protected override IEnumerable&lt;object&gt; GetAtomicValues()
        {
            yield return _性別;
        }
    }

    public class 性別種別選択外 : 性別種別
    {
        public override string 文字列 =&gt; "選択外";
        public override int 値 =&gt; 0;
    }

    public class 性別種別一覧
    {
        private static List&lt;性別種別&gt; _一覧 { get; } = new List&lt;性別種別&gt;{
            性別種別.Create選択外(),
            性別種別.Create男(),
            性別種別.Create女(),
        };

        private static List&lt;性別種別&gt; _選択外無一覧 { get; } = new List&lt;性別種別&gt;{
            性別種別.Create男(),
            性別種別.Create女(),
        };

        public static List&lt;性別種別&gt; 一覧 =&gt; _一覧;
        public static List&lt;性別種別&gt; 選択外無一覧 =&gt; _選択外無一覧;
        public static List&lt;(string, int)&gt; 名称と値一覧 =&gt; _一覧.Select(x =&gt; (x.文字列, x.値)).ToList();
    }

