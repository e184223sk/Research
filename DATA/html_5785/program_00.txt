        /// &lt;summary&gt;
        /// 選択肢の列挙の全組み合わせを展開
        /// choices {1,2,3}⇒ 戻り値{1,2,3}{1,3,2}{2,1,3}{2,3,1}{3,1,2}{3,2,1}
        /// &lt;/summary&gt;
        /// &lt;typeparam name="T"&gt;型引数&lt;/typeparam&gt;
        /// &lt;param name="choices"&gt;選択肢の列挙&lt;/param&gt;
        /// &lt;returns&gt;展開結果&lt;/returns&gt;
        public static IEnumerable&lt;T[]&gt; Expand&lt;T&gt;(this IEnumerable&lt;T&gt; choices)
        {
            //重複あり
            if (choices.Count() != choices.Distinct().Count()) { throw new Exception("has duplicate value"); }

            //選択結果は空からスタート
            var choosed = new T[] { };

            //展開開始
            var query = Expand(choices, choosed);
            return query;
        }

        /// &lt;summary&gt;
        /// 選択肢の列挙の全組み合わせを展開(再帰)
        /// &lt;/summary&gt;
        /// &lt;typeparam name="T"&gt;型引数&lt;/typeparam&gt;
        /// &lt;param name="choices"&gt;選択肢の列挙&lt;/param&gt;
        /// &lt;param name="choosed"&gt;選択済要素の列挙&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        private static IEnumerable&lt;T[]&gt; Expand&lt;T&gt;(IEnumerable&lt;T&gt; choices, IEnumerable&lt;T&gt; choosed)
        {
            //選択肢がなくなったら終了
            if (!choices.Any()) { yield return choosed.ToArray(); }

            foreach (var choice in choices)
            {
                //選択肢から1つ選んで、選択済要素に入れる
                var newChoosed = choosed.Concat(new T[] { choice });

                //選択肢から削除
                var newChoices = choices.Where(v =&gt; !choice.Equals(v));

                //新たな選択肢と選択済要素で再帰
                var query = Expand(newChoices, newChoosed);
                foreach (var qq in query)
                {
                    //配列を順次返す
                    yield return qq.ToArray();
                }
            }
        }

        /// &lt;summary&gt;
        /// 結果表示用
        /// &lt;/summary&gt;
        /// &lt;typeparam name="T"&gt;&lt;/typeparam&gt;
        /// &lt;param name="query"&gt;&lt;/param&gt;
        public static void DisplayElement&lt;T&gt;(this IEnumerable&lt;T[]&gt; query)
        {
            foreach (var q in query)
            {
                Console.WriteLine(string.Join(" ", q));
            }
        }

