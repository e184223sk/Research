More than 3 years have passed since last update.　以前、GNUのMIPソルバー「GLPK」についての解説記事を作成しました。
　　GLPK for C#/CLIで遊ぼう！
　　GLPKを手頃に扱えるラッパークラスを作成しました
　また、ソルバーライブラリ「Microsoft Solver Foundation」についての解説記事も書きました。
　　Microsoft Solver Foundationを使ってみる
　今回の記事では、よりモダン・高速なライブラリである「Google Optimization Tools」についての解説を行います。　まず、公式サイトからzipをダウンロードしてください。
　Visual Studio 2017の場合、2017/09/29時点で「or-tools_VisualStudio2017-64bit_v6.4.4495.zip」を落とせば大丈夫です。
　なお、ソースコードおよびリリースバイナリ全部にアクセスしたい場合は、GitHubの当該ページに当たると良いでしょう。　次に普通にVS上でプロジェクトを作成し、そこにzip内のbinフォルダにある「Google.OrTools.dll」を参照で追加します。
　名前で察せられると思いますが、このバイナリはx64版しかありませんのでビルド設定に注意しましょう。　実行には「Google.Protobuf.dll」も必要ですので、プロジェクト内にコピーしておくと便利でしょう。2017/09/29 21:19訂正：Google.Protobuf.dllは無くても実行に問題はないようです。※以下は「Visual Studio 2017でC#を用いて開発する場合」の記述になります。不思議なことに、v6.3のzip(or-tools_VisualStudio2017-64bit_v6.3.4431.zip)だとビルドできこそすれ実行できなかったので注意が必要です　いつものサンプル問題を定式化してみました。　GLPKやMicrosoft Solver Foundationと異なり、「変数」「制約式」をGoogle.OrTools.LinearSolver.Variable型およびGoogle.OrTools.LinearSolver.Constraint型として指定しますので、より直感的に問題を構成することができます。
　また、Make○○VarArrayメソッドやMake○○VarMatrixメソッドを使うことで、問題に使用する変数を1次元配列・2次元配列として確保・初期化することができます。
　更に、計算速度も(無償で使える中では)高速なようです。今後は積極的に利用していきたいですね。
　……フットプリントがかなり大きいけどな(GLPKで2MB,MSFで2.5MBなのに17MB近くもある)Microsoft Solver Foundationで最適化問題を解く | tocsworld


