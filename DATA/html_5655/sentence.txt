More than 3 years have passed since last update.前回は、Wikipedia「ビンパッキング問題」に乗っている２つのアルゴリズムのうち、アルゴリズムAを改良してみました。
今回は、アルゴリズムBを改良し、その後、さらに別の視点で改良を加えてみます。繰り返しになりますが、Wikipedia「ビンパッキング問題」アルゴリズムは、荷物の全体像が分からないという前提のアルゴリズムです。
改良版では、条件を緩和し、「全体像が把握できる」という前提で、より良い解を求めようというものです。アルゴリズムBの改良版では、単に、最初にソートしてしまおうという単純なものです。と、こんな感じです。実に簡単な改良です。クラス名をBinPackingSolver21としました。安易なネーミングですみませんm(_ _)m変更したのは、一か所のみ。をにしただけです。
それ以外は、まったく同じアルゴリズムです。それでは、本当に改良されたのかどうかを確かめてみます。
ちょっと試しただけでは、改良されたか確認できなかったので、ランダムに生成したデータで検証することとしました。それでは、実行してみます。確かに、改良されています。でも、結果が悪くなる場合もありますね。ということは、前回のアルゴリズムAの改良版も、結果が悪くなる場合がありそうです。
そのため、前回示したアルゴリズムAの改良版に対しても、同じような確認コードを書いて確かめてみました。改良版の負けの割合が随分と多いですね。それでもトータルで見れば、アルゴリズムAにおいても、全体像が事前に把握できるのであれば、改良版を採用したほうが良いという結論になりますね。ここまで書いてみて思いました。じゃあ、この４つのアルゴリズムを全部試してみて、一番良い結果を採用すればいいんじゃないかなと。
ビンパッキング問題のアルゴリズムについてちゃんと調べたわけじゃないので、もっと素晴らしいアルゴリズムがあると思いますが、
数学の専門家でもなんでもないプログラマーの僕には、このような泥臭いコードが似合っていると思います。人手でやるんじゃ手間がかかってしかたありませんが、コンピュータにやらせるんだったら、あっという間に答えがみつかりますから、全然問題ありません。ということで、以下のようなBinPackingMixedSolverクラスを定義しました。４つのアルゴリズムを全部試してみて、そのなかから最もビンの数が少ない結果を返しています。
こんな時にもLINQのSelectメソッド使えますね。便利です。最後に、BinPackingMixedSolverの使い方のサンプルを示します。PrintResultメソッドは、第１回で示したメソッドです。
前回試してみた、３つのデータで解を出してみました。以下、実行結果です。3つ目の結果は前回よりも良い結果になっています。続く...この記事は、Gushwell's C# Programming Pageで公開したものを大幅に加筆・修正したものです。


