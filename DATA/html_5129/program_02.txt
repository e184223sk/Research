
public class Envelope
{
    public Envelope(BigInteger integer)
    {
        Integer = integer;
    }

    public BigInteger Integer { get; }
}

internal class Program
{
    private static void Main()
    {
        var ret = Factorial(new Envelope(100_000), new Envelope(1));
        Console.WriteLine(ret.Integer);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static bool Equal(Envelope x, int y) =&gt; x.Integer == y;

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static Envelope Sub(Envelope x, int y) =&gt; new Envelope(x.Integer - y);

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static Envelope Mul(Envelope x, Envelope y) =&gt; new Envelope(x.Integer * y.Integer);

    private static Envelope Factorial(Envelope current, Envelope accum)
    {
        if (Equal(current, 0)) return accum;
        return Factorial(Sub(current, 1), Mul(current, accum));
    }
}

