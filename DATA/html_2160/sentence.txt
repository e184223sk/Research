More than 1 year has passed since last update.初めての方は初めまして。以前からご覧頂いている方はお久しぶり。nqdiorことDELLです。
[C# その2 Advent Calendar 2019]-23日目の投稿です。今回はもはやC#になくてはならない相棒「Linq」を最大限活用するにはどう用いるか、という自分なりの答えのひとつ（令和1stジェネレーション）を書いてみたいと思います。関数型プログラミングの定義は広義ですので、今回は一旦「高階関数(Linq)を使うプログラミング」という前提でお話します。データベーステーブルからデータをインプットし、縦横結合・検索・集計を60ステップほど行って、50近いフィールドを持つテーブルにアウトプットするプログラムを書いていました。C#上でのINPUTとOUTPUTのイメージは以下の通り。
どちらもデータの持ち方はIEnumerable&lt;T&gt;(T...ClassType)です。構築にあたり自分が目指したのは、以下の3点です。普通にコードを組むならば、以下の3点に集約されると思います。ただ、この方法だと以下の課題があると考えていました。複数ステップのまとまりごとに出力結果を保持する中間エンティティを作成しました。
マッピングオブジェクト → [中間エンティティ（複数）] → 結果オブジェクト中間エンティティに作成するプロパティは以下の2種類です。
1. 入力側プロパティ ... 出力側の値算出に必要な、入力側のプロパティ。readonly属性を付与し、コンストラクタで値設定。
2. 出力用プロパティ ... 入力側になく、出力側にのみある項目のプロパティ。getterのみ保持。出力用にプロパティ（フィールド）に関しては、ほぼすべてカプセル化を行い、入力側プロパティが変更されたら自動的にgetter側で出力用フィールドの値が書き換わるように実装の隠蔽を行います。上記オブジェクトに対してLinq側でUNION, JOIN, Where, GroupByを行い、入力側の値を変更します。
出力側の値をLinqの射影(Select)で、次ステップの中間エンティティの入力側にマッピングします。各プロパティの設定に必要な細かい計算は、全てオブジェクト側に委任します。
※図では処理ごとに中間エンティティを持っていますが、複数処理を跨いで中間エンティティを触っても問題ありません。つまり、関数型プログラミングでオブジェクト指向のオブジェクトを用いるという感じでしょうか。商品購入履歴と各割引率が入力されたとき、顧客ごとの税込請求金額合計を求めるコードを書きました。オブジェクト側は入力値が設定されたら割引後価格が算出され、割引後価格が算出されたら税込み価格が算出されます。
入力値によって各プロパティが連鎖的に自動計算される形です。オブジェクト指向のカプセル化ですねー。コード側は、計算クラス見てもらって分かる通り、処理単位であるLinq単位で1メソッドとなっています。「関数型ぽい」ですね！プログラムを長期メンテナンスしていくことが想定される場合は、いかに短いコード量で把握しやすいようシンプルに書けるか。
また、カプセル化による切り分けで楽にメンテナンスできるかを想定して書くことが必要になるかと思います。今回のコードが完成形とは思っていませんが、ひとつの着地点として引き続き考えていきたいと思います。
ご意見ご感想等あればお気軽にコメントお願い致します！平凡なプログラマにとっての関数型プログラミング - anoparaLINQでの外部結合の方法が載っています。ぜひご参照ください。
LINQでの内部結合・外部結合


