More than 3 years have passed since last update.画面上に情報を被せて表示する必要があったので、色々調べた。最終目標として、以下のような表示を目指した。
Frameworkは、4.7を使用していますが以前のバージョンでも動作するとは思います。Window のPropertyを以下の様に設定することで、透過することができます。Xaml で書くとこんな感じWindow のPropertyを以下の様に設定することで、全画面表示にできます。Xaml で書くとこんな感じWindow のPropertyを以下の様に設定することで、最前面固定表示にできます。Xaml で書くとこんな感じWindowのクリックをスルーするには、拡張Windowスタイルを変更する必要があります。
拡張Windowスタイルの取得と設定に P/Invoke を使います。
ひとまず、OverlayWindowの分離コードに記述していきます。演算子に関しては以下を参照さて、ここまですればオーバーレイ用のWindowとして使用できます。
ですが、Alt+Space でシステムメニューが開けてしまったりと、残念なポイントがあるので修正していきます。Window のPropertyを以下の様に設定することで、タスクバーに表示されないようにできます。Xaml で書くとこんな感じシステムメニューが表示されないようにするには、 Windowスタイルを変更する必要があります。
WindowクラスのWindowStyleプロパティではなく、NativeなWindowスタイルの設定です。なので、これまた P/Invoke で対応していきます。演算子に関しては以下を参照Windowプロシージャをフックして、Alt+F4が入力された時に処理済みとしてマークします。上で紹介したコード片をまとめて、ビヘイビアにします。これを、Windowに適用します。ビヘイビアにするより、継承元のクラスとした方が使い勝手が良かった(^^;)WPFアプリケーションでウィンドウプロシージャをフックするWPF でシステムメニューのないウィンドウを作るWPFでフルスクリーン表示半透明の、触れないフォームの作り方C#(WPF) – xamlで『タスクバーにアイコン非表示』『ウィンドウ非表示』設定


