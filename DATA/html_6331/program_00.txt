private RectList MaskToRect(string filePath)
{
    Bitmap bmp = new Bitmap(filePath);
    RectList list = new RectList();

    toolStripProgressBar1.Maximum = bmp.Size.Height;
    toolStripProgressBar1.Value = 0;

    for (int y = 0; y &lt; bmp.Size.Height; y++)
    {
        for (int x = 0; x &lt; bmp.Size.Width; x++)
        {
            if (list.Contains(x, y))
                continue;

            Color c = bmp.GetPixel(x, y);
            if (c.R == 0 &amp;&amp; c.G == 0 &amp;&amp; c.B == 0)
            {
                Color cx;
                Color cy;
                int x_max;
                int y_max = bmp.Size.Height;
                int y2;

                for (x_max = x; x_max &lt; bmp.Size.Width - 1; x_max++)
                {
                    for (y2 = y; y2 &lt; bmp.Size.Height - 1; y2++)
                    {
                        cy = bmp.GetPixel(x_max, y2 + 1);
                        if (cy.R != 0 || cy.G != 0 || cy.B != 0)
                            break;
                    }
                    if (y2 &lt; y_max)
                        y_max = y2;

                    cx = bmp.GetPixel(x_max + 1, y);
                    if (cx.R != 0 || cx.G != 0 || cx.B != 0)
                        break;
                }

                list.Add(new Rect(x, y, x_max, y_max));
            }
        }

        toolStripProgressBar1.Value++;
    }

    return list;
}

public class Rect
{
    public int Left { get; set; }
    public int Top { get; set; }
    public int Right { get; set; }
    public int Bottom { get; set; }
    public int X
    {
        get
        {
            return Left;
        }
    }
    public int Y
    {
        get
        {
            return Top;
        }
    }
    public int Width
    {
        get
        {
            int result = Right - Left + 1;
            return result;
        }
    }
    public int Height
    {
        get
        {
            int result = Bottom - Top + 1;
            return result;
        }
    }
    public Rect(int left, int top, int right, int bottom)
    {
        Left = left;
        Top = top;
        Right = right;
        Bottom= bottom;
    }
    public bool Contains(int x, int y)
    {
        bool result = Left &lt;= x &amp;&amp; x &lt;= Right &amp;&amp; Top &lt;= y &amp;&amp; y &lt;= Bottom;
        return result;
    }
}

public class RectList : List&lt;Rect&gt;
{
    public bool Contains(int x, int y)
    {
        bool result = false;
        foreach (Rect rect in this)
        {
            result = rect.Contains(x, y);
            if (result)
                break;
        }
        return result;
    }
}

