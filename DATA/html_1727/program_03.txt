
// &lt;auto-generated /&gt;
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using myop.Models;

namespace myop.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class myopContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =&gt;
                {
                    b.Property&lt;string&gt;("Id")
                        .HasColumnType("TEXT");

                    b.Property&lt;string&gt;("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property&lt;string&gt;("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property&lt;string&gt;("NormalizedName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim&lt;string&gt;", b =&gt;
                {
                    b.Property&lt;int&gt;("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property&lt;string&gt;("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property&lt;string&gt;("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property&lt;string&gt;("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =&gt;
                {
                    b.Property&lt;string&gt;("Id")
                        .HasColumnType("TEXT");

                    b.Property&lt;int&gt;("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property&lt;string&gt;("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property&lt;string&gt;("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property&lt;bool&gt;("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property&lt;bool&gt;("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property&lt;DateTimeOffset?&gt;("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property&lt;string&gt;("NormalizedEmail")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property&lt;string&gt;("NormalizedUserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property&lt;string&gt;("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property&lt;string&gt;("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property&lt;bool&gt;("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property&lt;string&gt;("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property&lt;bool&gt;("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property&lt;string&gt;("UserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim&lt;string&gt;", b =&gt;
                {
                    b.Property&lt;int&gt;("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property&lt;string&gt;("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property&lt;string&gt;("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property&lt;string&gt;("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin&lt;string&gt;", b =&gt;
                {
                    b.Property&lt;string&gt;("LoginProvider")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property&lt;string&gt;("ProviderKey")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property&lt;string&gt;("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property&lt;string&gt;("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole&lt;string&gt;", b =&gt;
                {
                    b.Property&lt;string&gt;("UserId")
                        .HasColumnType("TEXT");

                    b.Property&lt;string&gt;("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken&lt;string&gt;", b =&gt;
                {
                    b.Property&lt;string&gt;("UserId")
                        .HasColumnType("TEXT");

                    b.Property&lt;string&gt;("LoginProvider")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property&lt;string&gt;("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(128);

                    b.Property&lt;string&gt;("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("myop.Models.Client", b =&gt;
                {
                    b.Property&lt;string&gt;("ClientId")
                        .HasColumnType("TEXT");

                    b.Property&lt;string&gt;("AccessType")
                        .HasColumnType("TEXT");

                    b.Property&lt;string&gt;("AllowedScope")
                        .HasColumnType("TEXT");

                    b.Property&lt;string&gt;("AuthMethod")
                        .HasColumnType("TEXT");

                    b.Property&lt;string&gt;("ClientName")
                        .HasColumnType("TEXT");

                    b.Property&lt;string&gt;("ClientSecret")
                        .HasColumnType("TEXT");

                    b.Property&lt;string&gt;("GrantTypes")
                        .HasColumnType("TEXT");

                    b.Property&lt;DateTime&gt;("Iat")
                        .HasColumnType("TEXT");

                    b.Property&lt;string&gt;("RedirectUris")
                        .HasColumnType("TEXT");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("myop.Models.Code", b =&gt;
                {
                    b.Property&lt;string&gt;("CodeId")
                        .HasColumnType("TEXT");

                    b.Property&lt;string&gt;("ClientId")
                        .HasColumnType("TEXT");

                    b.Property&lt;DateTime&gt;("Iat")
                        .HasColumnType("TEXT");

                    b.Property&lt;string&gt;("Nonce")
                        .HasColumnType("TEXT");

                    b.Property&lt;string&gt;("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("CodeId");

                    b.ToTable("Codes");
                });

            modelBuilder.Entity("myop.Models.Token", b =&gt;
                {
                    b.Property&lt;string&gt;("UserId")
                        .HasColumnType("TEXT");

                    b.Property&lt;string&gt;("AccessToken")
                        .HasColumnType("TEXT");

                    b.Property&lt;string&gt;("ClientId")
                        .HasColumnType("TEXT");

                    b.Property&lt;DateTime&gt;("Iat")
                        .HasColumnType("TEXT");

                    b.Property&lt;string&gt;("RefreshToken")
                        .HasColumnType("TEXT");

                    b.Property&lt;string&gt;("Scope")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim&lt;string&gt;", b =&gt;
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim&lt;string&gt;", b =&gt;
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin&lt;string&gt;", b =&gt;
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole&lt;string&gt;", b =&gt;
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken&lt;string&gt;", b =&gt;
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

