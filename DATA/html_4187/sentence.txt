More than 1 year has passed since last update.この記事は KLab Engineer Advent Calendar 2018 の17日目の記事です。iOSの自動化ツールである「ショートカット」アプリと、x-callback-urlを使った連携をXamarinで実装してみました。x-callback-url のページにはInterAppCommunication(以下IAC)というフレームワーク用意されていますが、これに似たものをXamarin+C#に移植して実装します。x-callbackも「ショートカット」アプリもiOS用のものなので、iOSユーザが対象です。簡単に説明すると、自動化マクロをビジュアルプログラミングできるiOSアプリです。スクリプトの共有もできます。
昔は「workflow」と呼ばれていたようですが、名称を「ショートカット」に変えたようです。とても検索しづらい。変数や繰り返しなど、基本的なプログラミング機能を備えているほか、「カレンダー」などの標準のiOSアプリだけでなく、「Twitter」「Evernote」などへの操作も標準で用意されています。
SSH経由でスクリプトを実行したり、「Pythonista」(有料アプリ)と連携してPythonコードを実行することもできるようなので、なかなか夢が広がります。URLスキームを利用したiOSアプリ間の連携を行うためのプロトコルです。
アプリAがアプリBを起動し、アプリBの処理が終わったらアプリAに処理が戻る、といった事ができます。URLのクエリパラメータとして引数を受け渡しができるので、細かい連携も可能です。それなりに昔からあるので、いろいろなアプリが対応しているようです。URLは以下の書式で記述しますx-callback用の引数は以下のものがあります。x-callback-urlでのみ使うので、なるべくシンプルにiOS&gt;アプリ&gt;単一ビューアプリで作ります。チーム設定やプロビジョニングは慣れないとハマるポイントですが、この記事では割愛します。
おもちゃを作って試す程度ならこのあたりの記事が参考になります。
【Xcode】AppleDeveloperProgramに登録不要！！実機ビルドする方法
Xamarin StudioでiOSの無料実機テストするまでのメモ書きURLスキームで起動できるようにするためにはInfo.plistを変更する必要があります。
以下のように、詳細設定&gt;URLを追加を選択してURLSchemeを設定します。
今回はxcallbackurlで起動できるようにしました。
「ショートカット」アプリがx-callbackのパラメータを埋めてくれるので、実際には以下のように呼び出されます。xcallbackurl://x-callback-url/test?x-cancel=shortcuts-production://x-callback-url/ic-cancel/82FF00AF-11AF-4A86-A94C-E7DB7EB69950&amp;x-error=...ここからx-sucessを取り出して実行してみますまずURLスキームで起動された場合のURLからクエリを取り出します。
次に x-success の返答URLに hoge=fuga というパラメータを追加してコールバックを返します。ちなみに初期状態では System.Web がなかったので、 System.Web.Services のパッケージを追加しました。 プロジェクト&gt;参照の編集 から追加できます。実行すると一度作成したアプリが起動し、すぐに「ショートカット」がアクティブになります。戻り値も受け取れました。提供されているObjective-CのフレームワークInter-App Communication(IAC)を参考にC#に移植してみます。「ショートカット」アプリから呼び出せるようになれば十分遊べるので、URLスキームで起動する側ことにしました。挙動を実装するためのインタフェースとして IXCAganet を作ります。
さらに、インタフェースをまとめるクラスをSingletonで作っておきます。x-callback用のパラメータとアクション用のパラメータを分解しています。
簡略化のため、使う予定のない x-source は取得していません。
機能実装で利用する parameters はC#で扱いやすいDictionary
で処理します。
URLスキーム自体は同じキーを複数登録できてますが、混乱の元なのでキーが単一になるように制限してみました。DictionaryにまとめたクエリパラメータをURLに変換する処理です。
エラー時のクエリパラメータは、参考にしているIACの実装に合わせたキーを設定するようにしました。URLエンコードは HttpUtility.UrlEncode(urlString) を単純に呼ぶだけでは駄目でした。
HttpUtility.UrlEncode はスペースを + に変換しますが、ショートカットは %20 になる想定で、エンコード方法に差があるのが原因のようです。
HttpUtility.UrlEncode(Uri.EscapeUriString(urlString)) とした所、ショートカット側で正しくデコードできる形式になりました。おそらくこんな面倒な事をしなくても簡単な方法はありそうですが、自分の検索能力では見つからず。。。力不足を実感します。大まかに以下の処理をしています。Agent中ではどんな実装をしているのか分からないので、雑にtry-catchで囲んでおきます。
エラーを握りつぶしているので若干怖いですが、ここでは規格通りに呼び出されたx-callbackなら確実に完了するような実装に倒しました。まず書式を考えます。入力例: add?lhs=2&amp;rhs=4.2
結果例: result=6.2ついでに文字列のエンコーディングを確認するため、出力用の文字を指定できるように拡張しておきます。入力例: add?lhs=2&amp;rhs=4.2&amp;text=result
結果例: result=result%3D6.2これを実装すると以下のような感じになります。
入力ミスに気づきやすいように、actionの引数を処理できない時は専用のエラーを出すようにしました。非アクティブ中にメモリが開放されたりするので、アクティブになった時にactionを登録し直しておきます。
念の為、多重登録にならないように非アクティブになる時には登録を解除しておきます。こちらの記事を参考にさせていただきました。
AppDelegateのメソッドが呼ばれるタイミングと実装すべき内容（iOS11）以下のように組みました や &amp; もエンコードで壊れることなく、コールバックを実行できました。Objective-Cの NSError が元々持っているためだと思いますが、errorCode や errorDomain といった情報を持っているのは便利そうでした。
IACではもう少しうまくエラー処理をしていて、利用者側が意識しなくても、それなりにわかりやすいドメインが選ばれるようになってました。IACでは IACDelegate に OnSuccess と OnFailure しか用意されていません。
Successがboolで成功かキャンセルを判断するようになっています。
この辺りの意図はあまりつかめませんでした。キャンセルでは戻り値用の辞書を渡さないので、この記事の実装では使わない引数は受け取らずに済むように、明確に関数を分けました。この記事の実装では、利用可能なAgentを毎回取得していますが、IACではactionをキーとした辞書から処理をO(1)で呼び出しているようでした。UIApplication.CanOpenURLという関数があります。指定したSchemeのアプリがインストールできるか調べるための関数です。
いかにも UIApplication.OpenURL を実行する前に呼んだほうが良さそうに見えますが、x-callbackでの用途なら 呼ばないのが正解 のようです。というのも、iOS9以降では何もしないと 必ずfalseが返ります 。
正しく判定するには、Info.plistに LSApplicationQueriesSchemes の配列項目を作り、調べたいschemeを列挙しておく必要があります。x-callbackはどんなアプリから呼び出されるのか分からないので、予め列挙しておくことができません。
どうしてもURL開けたかどうか確認したいなら UIApplication.OpenURL のcallbackで判定すると良さそうです。ややこしいですが、多分アプリがインストールされているのか判断できてしまうので、プライバシーの点で問題になったのでしょう。この記事では戻り値として1つのクエリパラメータを渡すものしか実装しませんでしたが、複数のクエリパラメータを渡した場合は「ショートカット」アプリでの扱い方が以下のように違います。1つのクエリパラメータが返った時は、キーを捨てた値だけが文字列として次の処理に渡されます。
複数のクエリパラメータが返った時は、すべてのキーを含んだ辞書として扱います。
辞書はJsonに変換したり、標準機能でキーを指定して取り出すこともできます。個人で楽しむ分には困らないくらいには自由に拡張できるようになりました。これ以外にも、IACのバインディングライブラリを作成してXamarinから呼び出せるようにしたり、「Pythonista」アプリを購入してPythonで拡張したり、標準機能では出来ない拡張機能を呼び出す方法はいろいろあります。振り返ると、数ある方法の中でも茨の道を進んだ気もしますが、こういうライブラリは偉い人の知恵が詰まっているので、車輪の再発明とはいえ適度に勉強になる題材でした。
自分なりの工夫もいくつか入れてみましたが「いやいや！元の方が良いよ！」などのツッコミもお待ちしております。最後まで読んで頂き、ありがとうございました。iOSアプリ間連携の実装に x-callback-url を使う
x-callback-urlを使ってみた
【Swift】特定のアプリがインストールされているかどうかで処理を分ける 2017完全版 - URL SchemesとLSApplicationQueriesSchemes -
How do I replace all the spaces with %20 in C#?


