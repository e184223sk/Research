
[CompilerGenerated]
private sealed class &lt;YieldSample&gt;d__1 : IEnumerable&lt;int&gt;, IEnumerable, IEnumerator&lt;int&gt;, IEnumerator, IDisposable
{
    private int &lt;&gt;1__state;
    private int &lt;&gt;2__current;
    private int &lt;&gt;l__initialThreadId;

    int IEnumerator&lt;int&gt;.Current
    {
        [DebuggerHidden]
        get { return &lt;&gt;2__current; }
    }

    object IEnumerator.Current
    {
        [DebuggerHidden]
        get { return &lt;&gt;2__current; }
    }

    [DebuggerHidden]
    public &lt;YieldSample&gt;d__1(int &lt;&gt;1__state)
    {
        this.&lt;&gt;1__state = &lt;&gt;1__state;
        &lt;&gt;l__initialThreadId = Environment.CurrentManagedThreadId;
    }

    [DebuggerHidden]
    void IDisposable.Dispose() { }

    private bool MoveNext()
    {
        switch (&lt;&gt;1__state)
        {
        default:
            return false;
        case 0:
            &lt;&gt;1__state = -1;
            Console.WriteLine("yield return 1");
            &lt;&gt;2__current = 1;
            &lt;&gt;1__state = 1;
            return true;
        case 1:
            &lt;&gt;1__state = -1;
            Console.WriteLine("yield return 2");
            &lt;&gt;2__current = 2;
            &lt;&gt;1__state = 2;
            return true;
        case 2:
            &lt;&gt;1__state = -1;
            return false;
        }
    }

    bool IEnumerator.MoveNext()
    {
        //ILSpy generated this explicit interface implementation from .override directive in MoveNext
        return this.MoveNext();
    }

    [DebuggerHidden]
    void IEnumerator.Reset()
    {
        throw new NotSupportedException();
    }

    [DebuggerHidden]
    IEnumerator&lt;int&gt; IEnumerable&lt;int&gt;.GetEnumerator()
    {
        if (&lt;&gt;1__state == -2 &amp;&amp; &lt;&gt;l__initialThreadId == Environment.CurrentManagedThreadId)
        {
            &lt;&gt;1__state = 0;
            return this;
        }
        return new &lt;YieldSample&gt;d__1(0);
    }

    [DebuggerHidden]
    IEnumerator IEnumerable.GetEnumerator()
    {
        return System.Collections.Generic.IEnumerable&lt;System.Int32&gt;.GetEnumerator();
    }
}

