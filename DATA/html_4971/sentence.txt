More than 3 years have passed since last update.ナイト巡回問題とは、チェスを使った数学的パズルの一種です。チェスのナイトをチェス盤の上を動かし、すべてのマス(64)を通り最初の場所に戻ってくる経路を求めるというものです。
もしかしたら「最初の場所に戻ってくる」という制約をつけないバージョンが一般的かもしれません。ご参考: Wikipedia ナイト・ツアー以下に、解の一つを載せます。1から64までを線で結んでいます。
実際にはコンソールアプリで解いているので、このようなグラフィカルな表現ではありませんが...それにしても画像がでかいなー(笑)この問題を解くには、8-クィーンパズル
MagicStarパズルのように、バックトラック法を使います。簡単に解き方を説明すると、とこんな感じです。なお、ナイトを動かした場所には、何番目に移動したかを記録する番号を振っておきます。もちろん、失敗したときには、後戻りしないといけませんから、再帰処理でこれをやっています。
解は一つだけ求めています。ちなみに、このプログラムでは、ナイトの開始位置を、チェスゲームのナイトの初期配置の一つ(2,1)を選んでいます。解を求めるクラです。このクラス自体は、コード量も少なくそれほど複雑なことをしているわけではありません。
なお、開始位置は、Solveメソッドの第2引数の値を変えることで変更できます。チェス盤を表すクラスで、BoardBaseクラス(後述)を継承しています。Solverクラスは、このChessBoardを使い、ナイトを置いたり、取り外したり、何歩目かを記録したりしています。以下C#のコードです。このプログラムでは、解を一つだけ求めています。全ての解を求めたい場合は、C#でパズルを解く - バックトラッキングで8-Queenパズルを解くで示したようなやり方で、SolveInnerメソッド/Solveメソッドを変更し、IEnumerable&lt;Chessboard&gt;を返すようにする必要があります。このソースでは、3つのクラスを定義しています。
Pieceは駒クラスです。何も置いていないマスにはEmpty駒が置いてあるものとしています。Footmarkは、足跡を示すクラスで、ナイトが通ったマスには、このFootmarkが置かれます。Numberは、何歩目かを表すプロパティです。Pieceから継承しています。Chessboardに置けるのは、Pieceオブジェクトなので、このような継承関係を持たせています。Chessboardウラスは、そのなの通りチェス盤を表すクラスです。問題を解くための（チェス盤を操作する）各種メソッドが定義してあります。実行結果です。数値が騎士の巡回する順番を示しています。最後の64から初期の1の位置に移動できますから、ちゃんと巡回できているのが確認できます。試しに、右上を開始位置にして解いてみました。大丈夫そうですね。このBoardBaseクラスは、「ナイト(騎士)の最適配置問題」などで利用したものと同じものです。前述のBoardクラスの基底クラスです。X × Y の盤面を表し、基本的な操作を定義しています。これは似たようなパズルでも再利用できるような汎用的な機能に絞っています。このBoardBaseクラスは、コンソールアプリに依存しない作りにしています。UWP、WinFormsでもそのまま使えると思います。このBoardBaseを継承して、当パズル専用のBoardクラスを定義します。内部では1次元配列を使っていますが、インデクサを定義して、1次元配列、2次元配列としても扱えるようにしています。
ただし、すべてのメソッドで１次元対応と２次元対応のものを用意するのは面倒なので、どちらか一方にしています。まあこれは好み以外の何物でもありません。１次元のインデックスによるアクセスができるようにしている理由は、一重ループで処理が書けるので、コードが簡潔になるからです。LINQのコードも書きやすくなります。2次元配列として見た場合の、X座標、Y座標は、0 からではなく、1から始まります。
つまり、board[1,1] は、いちばん左上を示し、8×8の盤ならば、board[8,8]が右下を示すことになります。なお、盤の周りには番兵用の領域を用意しています。これにより範囲外かどうかの判断を簡単に出来るようにしています。ナイト(騎士)の動きに対応できるよう、番兵は二重にしています。派生クラスや派生クラスを利用するクラスが、できるだけこの番兵の存在に依存しないように、ToDirectionという関数を定義し、X方向、Y方向のペアで表す移動方向(ベクトル)をインデックスで表す方向に変換するようにしています。上の図は 4×4の盤を表しています。グレー部分が番兵が置いてある盤の周囲で、水色部分が実際の盤です。
盤面上の数値は、１次元配列のインデックスを表しています。BoardBaseクラスはジェネリッククラスにしていて、そのパラメータの型は、盤面上に置けるクラスの型です。この記事は、Gushwell's C# Programming Pageで公開したものを大幅に加筆・修正したものです。


