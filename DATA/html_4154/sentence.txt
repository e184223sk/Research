本記事はC#言語機能におけるカスタム属性について調べたものとなります。
サンプルコードの実況環境に関してはMono 5.16.0(C# 7.3サポート)となっております。属性とはprivateやpublicのような追加情報をクラスやメンバに与える機能を指します。System.Attributeを継承するクラスを作成することで、privateやpublicのような属性を用意できるC#の機能です。カスタム属性はクラスやメンバに対して自由に追加することができます。また、この機能は、リフレクションと組み合わせて使うことで非常に強力な機能を生み出すことが可能です。自分でカスタム属性を作成することもできます。定義するためには、System.Attributeを継承したpublicな属性クラスを作成する必要があります。定義時には、クラス名の最後に「Attribute」をつけることが推奨されています(実際既存のカスタムクラス群はそのような名前付けがされています)。ただし使用時には、Attributeというサフィックスを省略することができます。カスタム属性を使用することで以下のようなメリットがあります。カスタム属性によってはパラメータを渡すことが可能なものもあります(後述)。属性自体が引数を取らない場合は括弧の省略が可能です。ただし以下のような注意点もあります。カスタム属性は以下のような記述して使用することができます。位置指定パラメーターとは、指定した属性クラスのコンストラクタに渡される引数のことです。特定の順序で値を指定する必要があり、省略はできません。以下の場合はOldMethodを使用した場合に、「Old version. Don't use.」という警告が表示されるよう属性をメソッドに付与しています。
複数の属性を指定することも可能です。その場合は,で区切ります。
属性クラスによっては、クラス内でpublicと指定されているフィールドやプロパティに対して値を設定することができます。この値を設定するためにフィールドやプロパティ名を指定する箇所を名前付きパラメーターと呼びます。コンパイラやVisual Studioに対して指示を行える便利な属性がいくつか標準ライブラリによって提供されています。これらは名前の後にAttributeというサフィックスが入っていますが、使用時には省略することができます。バリデーションに使用する属性として有用なものはSystem.ComponentModel.DataAnnotations下に存在しており、Validatorクラスを使用することで、対象データの妥当性を検証することができます。(バリデーションってなんだ？という方は「分かりそう」で「分からない」でも「分かった」気になれるIT用語辞典「バリデーション(validation)」へ）基本的に属性の対象となるのは、その直後に続くクラスやメソッド、フィールドとなります。しかし、明示的に属性の対象を変更することができます。属性対象としては以下のものを指定できます。特にプロパティやイベントでは主にmethodやparam、field辺りを使うこととなります。標準ライブラリで提供されているような属性はSystem.Attributeを継承したクラス、又はその派生クラスを継承したクラスです。つまり同様に継承を行うことで自分自身でも独自の属性クラスを作成することができます。作成する属性クラスにプロパティが含まれている場合はプロパティは読み取り/書き込み可能にしておく必要があります。ここで重要となるのは、作成する属性クラスの振る舞いを決めるAttributeUsage属性です。この属性の位置指定パラメーターであるAttributeTargetsと名前付きパラメーターであるAllowMultipleとInheritedを確認してみましょう。「AttributeTargets」属性を適用できる範囲を指定できます。例えばAttributeTargets.Classを設定することで、クラスに対して属性を設定可能、とできます。AttributeTargets.Allであれば全ての要素に対して適用が可能です。また、複数のAttributeTargetsの値を渡すことも可能です。「AllowMultiple」作成した属性をターゲットに対して複数回適用が可能かどうかをbool値で指定します。falseであれば一度のみとなります。デフォルト値はfalseです。「Inherited」作成した属性のターゲットが継承された後も、そのターゲットに設定された属性が一緒に継承されるかどうかをbool値で指定します。デフォルト値はtrueです。上記を踏まえてサンプルコードを見てみましょう如何でしたでしょうか。一口に属性と言っても調べてみるととても奥が深い機能であるということが伝わったかと思います。属性機能をどんどん活用して楽しいC#ライフを送りましょう。


