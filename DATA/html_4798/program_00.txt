    public static class IReadOnlyListExtensions
    {
        public static async Task ParallelForEachAsync&lt;T&gt;(this IReadOnlyList&lt;T&gt; items, int maxConcurrency, Func&lt;T, Task&gt; action)
        {
            using (var semaphore = new SemaphoreSlim(maxConcurrency))
            {
                var tasks = new Task[items.Count];
                for (int i = 0; i &lt; items.Count; i++)
                {
                    tasks[i] = InvokeThrottledAction(items[i], action, semaphore);
                }

                await Task.WhenAll(tasks);
            }
        }

        static async Task InvokeThrottledAction&lt;T&gt;(T item, Func&lt;T, Task&gt; action, SemaphoreSlim semaphore)
        {
            await semaphore.WaitAsync();
            try
            {
                await action(item);
            }
            finally
            {
                semaphore.Release();
            }
        }

    }

