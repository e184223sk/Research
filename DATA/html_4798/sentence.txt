More than 3 years have passed since last update.本番の開発でいろいろな問題に出会っていると、やっぱりテスト駆動開発は気持ちいいし、安心感がある。しかし、結構な人はテストを書いていない。多分その理由はやったことがない、知らないとかもあるかもしれないが、テストを書くのが難しいのではないだろうか？サンプル程度のものは独立したものは書きやすいのだが、本番の環境で使うフレームワークやミドルウェアなどが絡んだテストはどう書いていいかわからないときもある。どうやって書いたらいいだろう？個人的にはテスト駆動開発が好きなので、DevOps 野郎として、どんなコードでもテスト駆動で書けるようになってみたいと思うようになった。これからたまに、これ、どうやってテスト書くんやろう？と思ったお題に対して、どのようにテストを書いていったかの試行錯誤して記録してみたい。同僚から下記のようなカッコいいコードが送られてきた。動作するのはお墨付き。これは何をしているかというと、拡張メソッドで、IReadOnlyList に拡張メソッドをつけて、スロットリング付きの ParalellFor 的な実装をしてくれた。きれいに１０個づつ並列で実行してくれている。＃ テストのアイデアさて、次回からこのコードを書くときにテスト駆動で書けるようにどうやってテストを書くか考えてみる。並列性を正確にアサートするのは難しそうなので、こんな戦略を考えてみた完ぺきとは言えないが、async/await などは、スレッドを常に作るとかではないので、完璧に平行で実行されているかはわからないが、少なくとも、このライブラリのポイントである、Max XX 多重で並列実行されていることがアサートできればいいと考えた。このコードのポイントとしては、ConcurrentStack を使って、count を Interlocked をつかってロックして、開始時にインクリメント、終了時にデクリメントしている。この状態で、現在の count 値を ConcurrentStack にプッシュしていく。最後に、Linq の Max() メソッドをつかって、最大値をとると、実行を１秒ぐらいまっているので、最大値が 10 になるはずだ。実際のループは100にしているので、10ずつ実行されているのがアサートされる。基本的には、平行数を数えるというアプローチなのだが、ReactiveExtension を使って、単位時間当たりの Window で実行された数を数えて 並列数を計算するというアプローチも考えた。多分OnNext(1) を呼ぶことは３秒に対して無視できるほど小さいと考えて、それが平行して実行されたあと、３秒まって、無視できるぐらい小さい時間実行されて、３秒まつという感じなので、３秒のウインドウの間に、少しづつずれて実行されるはず。だから、そのウインドウ内の同時実行数は１０になるはずという感じ。プログラミングテクニック的には、Stream Analytics のように時間に関するデータを扱うのが得意なリアクティブエクステンションを使った。インポートしたライブラリは下記の通り。Winodow は、Providers のパッケージに入っています。Window メソッドで、タイムウインドウを設定して、SelectMany の部分でサマリつまり３秒間に発生したイベントの合計を出して、それをアサートしています。なぜかはわかっていませんが、Assert の例外がなぜか飛ばないので、それを内部でキャッチして、最終的に Exception の数でアサートしています。ちなみに、Delay のタイミングを 1 と　2 に分けているのはそうしないとうまくウインドウ枠に入らなかったからです。ちなみに実行時間も最初の案が25ms に対して、こちらは30 sec なので時間的にもメリットがありませんでした。しかし、ReactiveExtensionsで初めて自分だけでコードを書いたので、満足感はありましたｗ今回初めてやってみましたが、ほかにいいソリューションがある人は是非コメントいただければと思います。また難しそうなネタがあったらシェアしてみたいと思います。


