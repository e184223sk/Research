More than 3 years have passed since last update.Microsoft.AspNetCore.TestHostを使用して、ASP.NET Core Webアプリケーションをオンメモリにホストした状態でのテストを行います。TestHostを用いることで、HTTPリクエストをエミュレートしたエンドツーエンドの試験が可能になります。要は、Javaで埋め込みコンテナを使ってテストする～、みたいな奴のASP.NET Core版です。テスト対象となるASP.NET Core Webアプリケーションのプロジェクトが作成され、.NET Core 1.1へアップデート済みの状態とします。また、今回はわかりやすいようにAPIコントローラーの呼び出しをテスト対象とするため、APIコントローラーを追加済みの状態とします。以下に完成形のサンプルを用意しています。テストプロジェクトの構築手順について記述します。ASP.NET Coreアプリケーションのソリューションにテストプロジェクトとして「Class Library (.NET Core)」のプロジェクトを追加します。作成されたプロジェクトはターゲットフレームワークが.NET Standardになっているため、そのままではASP.NET Coreアプリケーションのプロジェクトを参照できないのでproject.jsonの内容を変更します。ターゲットフレームワークの変更と、必要なライブラリの参照を追加したproject.jsonは以下の様になります。行っている作業は以下になります。なお、Microsoft.DotNet.InternalAbstractionsについては、1.0環境では問題ありませんが、Microsoft.AspNetCore.Mvcを1.1.0にあげると問題が発生する(Visual Studioのテストエクスプローラーにテストが表示されない、dotnet testコマンドによるテストでは例外が発生する)ため追加しています。テストコードは以下の内容となります。テスト対象プロジェクトのStartupをホストしてTestServerのインスタンスを作成し、そこからクライアントの作成を行って、HTTPリクエスト/レスポンスのエミュレーションによるテスト内容になります。テスト用のカスタマイズを行う場合、TestServerのインスタンス作成前にconfigやWebHostBuilderをいじったりします。あとは、Visual Srudioのテストメニューやdotnet testコマンドによりテストを実行するだけです。ホスティングまで疑似ってテストすると重いと思うかもしれませんが、テストの実行時間は1個目こそ500msくらいかかりますが、それ以降は10msくらいで終わるので気にしなくていいと思います。ところで、Startup内でServiceProviderに登録しているコンポーネントについて、テスト用のモックへの置き換えはどこでやるのがええんやろね(・ω・)？Startupのコンポーネント登録箇所をvirtualにしてそこで、とか？


