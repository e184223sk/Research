今回は「空」のテンプレートからASP.NET Core MVCアプリケーションをセットアップする際の手順を記載します。「Web アプリケーション（モデル ビュー コントローラー）」テンプレートは、最初からMVCプロジェクトに必要な最低限の構成が用意されているので便利です。
ただし、最初からjQueryやBootstrapが組み込まれていたりと、場合によっては不要になるものも組み込まれています。
そのため、著者はまっさらな「空」のテンプレートから作成するようにしています。ASP.NET Core MVC 3.1 入門 その５ 「View」今回は「ASP.NET Core 3.1」「空」のプロジェクトを選択します。VisualStudioで以下のような画面が立ち上がります。「空」のテンプレートのソリューションエクスプローラーを眺めてみましょう。こちらのテンプレートには、MVCテンプレートとは異なり、ControllersやViewsといったMVC用のフォルダ等は一切含まれておりません。これから作成していきます。Startup.csのConfigureServicesメソッドを以下のように変更してください。
ConfigureServicesメソッドでは、アプリケーションで使用するサービスを追加（登録）します。AddControllersWithViewsは、Viewを使ったControllerを追加するという意味です。
これによって、ViewとControllerを用いた（MVCの基本的な）機能が組み込まれます。MVCパターンに沿った形で名前空間を構成します。
ルートにControllersフォルダを追加してください。Controllersフォルダに空のControllerを追加してください。
ここではChatControllerとしておりますが、もちろん、ご自身が作成するアプリケーションに含まれる機能と対応したController名をつけてください。アクションメソッド（Indexメソッド）のメソッド名を右クリック &gt; ビューの追加と進んでください。「Razor ビュー」を選択します。
なお「スキャフォールディング」というのは、要は雛形を自動生成する機能のことを示します。ここではViewの雛形を自動生成してもらうために、この機能を使います。続いてビュー名ですが、アクションメソッド名とします。
アクションメソッドで呼び出されるViewメソッドが
明示的に指定しない限り、/Views/コントローラー名/アクションメソッド名.cshtmlを読み込むためです。
テンプレートは「Empty（モデルなし）」を選択します。Startup.csのConfigureメソッドを以下のように変更し、Routeも合わせて登録しておきます。
Configureメソッドでは、Routeの定義に代表されるように、アプリケーションがHTTPリクエストに対してどのように応答するかを定義します。
Routeについてはこちらの記事を参照してください。デフォルトのRouteは先ほど作成したControllerのIndexアクションメソッドに向けておきます。F5で実行します。
作成したControllerのIndexアクションメソッドが呼び出されていることが確認できればOKです。レイアウトページについてはこちらの記事を参照してください。Views &gt; Sharedフォルダを作成します。Sharedフォルダを右クリック &gt; 追加 &gt; 新しい項目と進んでください。Razorレイアウトを選択します。
ファイル名は最初から_Layout.cshtmlとなっているので、そのままでOKです。_Layout.cshtmlが追加できました。スタートページ(_ViewStart.cshtml)についてはこちらの記事を参照してください。Viewsフォルダを右クリック &gt; 追加 &gt; 新しい項目と進んでください。Razorビューの開始を選択します。
ファイル名は最初から_ViewStart.cshtmlとなっているので、そのままでOKです。_ViewStart.cshtmlが追加できました。F5で実行します。
レイアウトページが適用されていることが確認できればOKです。
分かりづらいですが、タブの表示名に&lt;title&gt;が効いてIndexとなっています。Views  に _ViewImports.cshtml を追加します。
このファイルでは、複数のViewで利用する名前空間のインポートをおこないます。Viewsフォルダを右クリック &gt; 追加 &gt; 新しい項目と進んでください。Razorビューのインポートを選択します。
ファイル名は最初から_ViewImports.cshtmlとなっているので、そのままでOKです。_ViewImports.cshtmlが追加できました。
以後、複数のViewで利用する名前空間が発生した場合には、このファイルでusingすると効率的です。@addTagHelperディレクティブにより、Viewでタグヘルパーが使用可能になります。最初のパラメーターでは、読み込むタグヘルパーを指定します。
すべてのタグヘルパーを指定する場合は * を使用します。2 番目のパラメーターでは、タグヘルパーを含む名前空間を指定します。Microsoft.AspNetCore.Mvc.TagHelpers
=&gt; ASP.NET Core に組み込まれているタグヘルパーが存在する名前空間下記のコードを Views/_ViewImports.cshtml に追加すると、
Microsoft.AspNetCore.Mvc.TagHelpers に含まれるすべてのタグヘルパーを、
=&gt; ワイルドカード*での指定によるもの
Viewsフォルダまたはサブフォルダ内のすべてのViewで使用可能にする
=&gt; Views/_ViewImports.cshtmlに定義したことによるものという意味になります。Configurationクラスが appsettings.jsonに設定した値の取得機能を提供してくれます。
まだ設定値が無いので、ここではConfigurationを定義して、取得できる状態までとしておきます。ルートにwwwrootフォルダを作成します。
スタイルシートや画像ファイル、JavaScriptファイルといった静的ファイルを格納するフォルダで、Webルートと呼びます。スタイルシートや画像ファイル、JavaScriptファイルといった静的ファイルを利用可能にします。
Startup.csのConfigureメソッドを以下のように変更し、UseStaticFilesメソッドを呼び出します。
これでwwwrootに格納されているファイルにアクセスできるようになります。wwwrootにスタイルシートを追加します。wwwroot &gt; cssフォルダを作成します。cssフォルダを右クリック &gt; 追加 &gt; 新しい項目と進んでください。スタイルシートを選択します。
ファイル名はsite.cssとしておきます。レイアウトページで参照します。wwwroot &gt; jsフォルダを作成します。jsフォルダを右クリック &gt; 追加 &gt; 新しい項目と進んでください。JavaScriptファイルを選択します。
ファイル名はsite.jsとしておきます。レイアウトページで参照します。以後はアプリケーション固有の機能を追加していきます。以上となります。
ありがとうございました。


