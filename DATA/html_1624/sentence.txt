アプリケーションを開発する際に、テストは必須なのですが、データベースのMoqを作るのも面倒だったり、設定ファイルやコードの一部をテストのたびに変更するのが面倒でした。
本番環境でもテストでもコードを変更せずに使えるようにしたいなと思い、試行錯誤・・・ようやく一つの形ができたので、記事として紹介させていただこうと思いました。
DbContextをDIを利用して...とやってみたものの、PrismのUnityコンテナーを使用したところ、うまく動作しないことがあり、ASP.NETとかならServiceCollectionを使用してと思うのですが、デスクトップアプリでしかもPrismだと使えなかったりといろいろと課題がありました。
とりあえず、MoqではなくSqliteInMemoryを使用することにし、MictrosoftのSQLite を使用した EF Core アプリケーションのテストを参考にしました。
ところがテスト一つだけなら動きますが、複数のテストがあると、うまくいきませんでした。そこで調べ続けているうちにデータ ポイント - EF Core と InMemory プロバイダーを使ったテスト作成のヒントという記事を見つけました。
これがとても参考になり、DbContextOptionsを利用したテスト環境を構築することができました。EF Coreを使用したデータベース利用環境です。初めて作成する人向けの部分ですので、不要の方は読み飛ばして、次のDBDbContextOptionsFactory作成からお読みください。ここでは、Prism環境を前提にしたサンプルですので、シンプルなPrism Blank App(.NET Core)で作成します。

ちなみに今回はテスト環境のため、ViewやViewModelは触りません。EF Core関係のNuGetパッケージ
・Microsoft.EntityFrameworkCore
・Microsoft.EntityFrameworkCore.Design
・Microsoft.EntityFrameworkCore.SqlServer
・Microsoft.EntityFrameworkCore.Sqlite
・Microsoft.EntityFrameworkCore.Tools
Infrastructuresフォルダをプロジェクト下に作成して、その中にSampleModelクラスとSampleDbContextクラスを作成します(フォルダ名やクラス名はサンプル用のためで適当です)。
ここまででソリューション構成はこんな感じになっていると思います
データベースとして使用するサンプルモデルを作成しますEF Coreを使用したDbContextのコードを作成します仰々しく書いていますが、使用するデータベースは何か設定するただのStaticクラスです。
接続文字列をここに書けるようにしていますが、設定ファイルから読み込んだり、JSONを使用したりといろいろありますので、別にこういうクラスではなくても、そのあたりは読者の方々の環境によって変更してもらえればと思います。ここまでで、基本的な環境構築は終わったので、次から、今回の肝となるDbContextOptionsFactoryの作成をしますPrismのDIコンテナーを使用して、オブジェクト注入できるようにインターフェースを作成します
Infrastructuresフォルダ内にIDbContextOptionsFactoryクラスを作成して以下のコードを記述しますInfrastructuresフォルダ内にDbContextOptionsFactoryクラスというインターフェース実装コーディングをします。
中身としては、要するにDbContextOptionを指定されたDBによって作成するファクトリークラスですSqliteInMemoryでは、DbConnectionがnullの場合のみDBを作成して、使いまわしができるようにしています。
あと、option.ConfigureWarnings(x =&gt; x.Ignore(Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.AmbientTransactionWarning));
というコードは、トランザクションを使用していると、AmbientTransactionWarningが発生して、テストが失敗してしまうので、それを回避するためのものです。Prismを使用する場合、コンテナーに登録することでDIを行うことができるようになります。
App.xamlを開いて、その中のRegisterTypesで以下のようにコーディングします以上で環境構築は完了です。
書いてしまうと、シンプルなんですが、ここまで来るのに、いろいろと試行錯誤を重ねました。
最後にテストを実際に走らせてみようと思います。Repositoryとなるものですが、今回はサンプルなので単純なDbAccessクラスを作成して、Add, Delete, Updateのコードを記述します。
ポイントは、先述したIDbContextOptionsFactoryをDIで使用しているところです。新しくMSTestプロジェクトを作成します。
テストの一例ですテストの際にポイントとなるのはDataSourceのデータベース名を共有したいテストごとに名前を変更するということです。
ここではテスト名.dbとしていますが、こうすることで、別のテストを作成した場合は、別のインメモリーデータベースを使用することができるようになります。
こうすることで、初期データやテストデータを様々に変更したり、共有したりしながらテストを行うことができるようになります。今回はSqliteInMemoryを使用したテスト環境構築の一例を紹介させていただきましたが、DbContextOptionsFactoryに本番環境としてSQL Serverを使用するコードを記載しています。このあたりをいろいろといじれば、EF Coreでサポートされている形式に合わせてDbContextOptionを生成することができるようになると思います。


