using System.Collections.Generic;
using UnityEngine;
using Photon.Pun;
using Photon.Realtime;
using UnityEngine.UI;

 public class ViewMatchWaitingPlayers : MonoBehaviourPunCallbacks
{
    public GameObject RoomButton;

    public void Start()
    {
        //ロビーへ移動する
        PhotonNetwork.JoinLobby();
    }

    //ルームに動きがあった場合
    public override void OnRoomListUpdate(List&lt;RoomInfo&gt; roomList)
    {
        Debug.Log("[function]ReloadRooms");
        foreach(RoomInfo r in roomList)
        {
            //プレイヤーが存在しているルーム
            if (r.PlayerCount &gt; 0)
            {
                RoomButtonCreate(r);
            }
            else
            {
                RoomButtonDelete(r);
            }
        }
    }

    //ルームボタンの作成
    public void RoomButtonCreate(RoomInfo r)
    {
        //すでに存在していたのなら情報の更新
        if (gameObject.transform.Find(r.Name))
        {
            RoomInfoUpdate(gameObject.transform.Find(r.Name).gameObject, r);
        }
        //新しく作られたルームならばボタンの作成
        else
        {
            var roomButton = (GameObject)Instantiate(RoomButton);
            roomButton.transform.SetParent(gameObject.transform, false);
            RoomInfoUpdate(roomButton, r);
            //生成したボタンの名前を作成するルームの名前にする
            roomButton.name = r.Name;
        }
    }

    //ルームボタンの削除
    public void RoomButtonDelete(RoomInfo r)
    {
        //ボタンが存在すれば削除
        if (gameObject.transform.Find(r.Name))
        {
            GameObject.Destroy(gameObject.transform.Find(r.Name).gameObject);
        }
    }

    //ルームボタンのInfoの更新
    public void RoomInfoUpdate(GameObject button, RoomInfo info)
    {
        foreach (Text t in button.GetComponentsInChildren&lt;Text&gt;())
        {
            if (t.name == "RoomName")
            {
                t.text = info.Name;
            }
            else if (t.name == "MaxPLayerCount")
            {
                t.text = info.MaxPlayers.ToString();
            }
            else if (t.name == "RoomInPlayerCount")
            {
                t.text = info.PlayerCount.ToString();
            }
        }
    }
}

