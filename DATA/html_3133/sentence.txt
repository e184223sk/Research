More than 1 year has passed since last update.OSSでCQRS+ESのframeworkがあったので習熟を兼ねて紹介してみます。EventFlow is a basic CQRS+ES framework designed to be easy to use.詳細はドキュメントを参照してほしいのですが等々欲しい機能は一通り揃っている印象です。写経しても面白くないので以下の業務内容を定義して実装してみることにしました。ソース集約やエンティティを一意に決めるためのIDになります。様々な場所で使われます。Guidをラップしている感じです。Identityを継承します。後述しますがSingleValueObjectを継承しているのでSingleValueObjectConverterで変換可能です。親クラスとしてValueObjectが存在し、それを継承してSingleValueObjectが存在します。プリミティブな型を一つだけしか持たない値オブジェクトならばSingleValueObjectで十分です。
SingleValueObjectConverterはSingleValueObjectに特化したJsonコンバータで、プロパティがGetOnlyの場合でも値を詰めてくれます。こんな感じでValueObjectを入れ子にしたいときがあるとお思います。
本当ならプロパティはGetOnlyにしたいんですけど、JsonConverterのデシリアライズ時に上手く値を詰めてくれず止む無くsetを付けています。
これの解決方法は調査中です。このフレームワークではエンティティと集約を明確に分けています。今回は集約の中にエンティティが入ることがなかったのでEntity型は使っていません。
ただ、な感じなので一意な値を持った値オブジェクト程度の扱いなのかなと。↑は集約の例です。AggregateRootを継承します。その際に自身と使用するIdentityを設定します。
IEmitについては後述。ドメインイベントを定義します。AggregateEventを継承します。
イベントを実現するために必要な情報を詰め込みます。
このイベントもjsonのシリアライズ/デシリアライズがフレームワーク内部で発生するのですがプロパティがGetOnlyだと値が入ってくれません。
JsonConverterの問題だと思うのですが引数無しコンストラクタで生成してからsetしている感じです。EventVersionAttributeはドメインイベントのバージョンを管理してくれます。
イベントソーシングの場合ドメインイベントの内容が変化したとしても過去のドメインイベントはそのまま残しておく必要があります(復元できなくなるため)。
この機能は試していないので詳細はEvent upgrade参照。コマンドとコマンドハンドラーを定義します。
コマンドとコマンドハンドラーは1:1の関係です。
ドメインイベントとコマンドは関連付いている必要はないです。CommandとCommandHandlerをそれぞれ継承します。
Commandにはコマンドを実行するのに必要な情報を詰め込みます。
CommandHandlerはそのコマンドで実行したいことを記載します。
ただしドメインイベントを発行するためのメソッドEmitはAggregateRootのprotected virtualメソッドのため最後は集約のpublicメソッドを呼ぶ必要があります。Emitが呼ばれるとを実装しているクラスのApplyメソッドが呼ばれます。今回で言うと利用者集約のApply。
このApplyについての実装方法はいくつかあるのですがまた今度(ドキュメント)。後述しますがどうにかICommandBusのインスタンスを取得してCommandを生成してPublishAsyncするだけです。ドメインイベントをEmitするとそのイベントがイベントストアに収納されるのですが、その際に対応付けているRead modelが更新されます。IAmReadModelForがポイントです。(IAmAsyncReadModelForもあります)
これを設定しておくと指定しているイベントが発行されたときに更新処理が走ります。このクラスはQueryの機能で使用します。Read model Storeに格納されている情報を取得します。今回はRead modelがIn-memoryの場合の話です。詳細はここ参照。取得したい場所でどうにかIQueryProcessorのインスタンスを取得しProcessAsyncをコールします。
↑で定義したIReadModelを単純に全部取り出したい場合は↑の感じで大丈夫です。(InMemoryQueryの引数はFunc&lt;IReadModel, bool&gt;なpredicate)独自のDTOを取得したい場合はIQueryとIQueryHandlerを実装します。今まで作成したクラスをアプリケーションの最初でEventFlowに設定します。それぞれのクラスはアセンブリ名で一気に登録することもできます。(AddDefaults)駆け足での紹介となってしまいましたが雰囲気は伝わったでしょうか。。
とりあえずGitHubに上げたソースでCQRSの一通りの動作を実施できることは確認しました。
気になった方はとりあえず触ってみることをおすすめします。ドはまりしたところはJsonConverterらへん(特にデシリアライズ)なので想定通りの動作にならない場合はJsonConverterを差し替えて挙動を確認してみると良さげです。


