
    public static class DryIocInterception
    {
        public static void Intercept&lt;TService, TInterceptor&gt;(this IRegistrator registrator, object serviceKey = null)
          where TInterceptor : class, IInterceptor =&gt;
          registrator.Intercept&lt;TInterceptor&gt;(typeof(TService), serviceKey);

        public static void Intercept&lt;TInterceptor&gt;(this IRegistrator registrator, Type serviceType, object serviceKey = null)
            where TInterceptor : class, IInterceptor =&gt;
            registrator.Intercept(serviceType, Parameters.Of.Type(typeof(IInterceptor[]), typeof(TInterceptor[])), serviceKey);

        public static void Intercept(this IRegistrator registrator, Type serviceType, Type[] interceptors, object serviceKey = null)
        {
            registrator.Intercept(
               serviceType,
               Parameters.Of.Type(
                   typeof(IInterceptor[]),
                       request =&gt;
                       {
                           var list = new List&lt;IInterceptor&gt;();
                           foreach(var t in interceptors)
                           {
                               list.Add((IInterceptor)request.Container.Resolve(t));
                           }
                           return list.ToArray();
                       }),
               serviceKey);
        }

        public static void Intercept(this IRegistrator registrator,
            Type serviceType, ParameterSelector interceptorsParameterSelector, object serviceKey = null)
        {
            Type proxyType;
            if (serviceType.IsInterface())
                proxyType = ProxyBuilder.CreateInterfaceProxyTypeWithTargetInterface(
                    serviceType, ArrayTools.Empty&lt;Type&gt;(), ProxyGenerationOptions.Default);
            else if (serviceType.IsClass())
                proxyType = ProxyBuilder.CreateClassProxyTypeWithTarget(
                    serviceType, ArrayTools.Empty&lt;Type&gt;(), ProxyGenerationOptions.Default);
            else
                throw new ArgumentException(
                    $"Intercepted service type {serviceType} is not a supported, cause it is nor a class nor an interface");

            registrator.Register(serviceType, proxyType,
                made: Made.Of(
                    pt =&gt; pt.PublicConstructors().FindFirst(ctor =&gt; ctor.GetParameters().Length != 0),
                    interceptorsParameterSelector),
                setup: Setup.DecoratorOf(useDecorateeReuse: true, decorateeServiceKey: serviceKey));
        }

        private static DefaultProxyBuilder ProxyBuilder =&gt; _proxyBuilder ?? (_proxyBuilder = new DefaultProxyBuilder());
        private static DefaultProxyBuilder _proxyBuilder;


        public static void Intercept&lt;TInterceptor&gt;(this IRegistrator registrator, Func&lt;Type, bool&gt; predicate)
           where TInterceptor : class, IInterceptor
        {
            foreach (var registration in registrator.GetServiceRegistrations().Where(r =&gt; predicate(r.ServiceType)))
            {
                registrator.Intercept&lt;TInterceptor&gt;(registration.ServiceType);
            }
        }
    }

