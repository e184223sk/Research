
        public static IServiceProvider CreateServiceProvider()
        {
            var services = new ServiceCollection();
            services.AddLogging(loggingBuilder =&gt; {
                loggingBuilder.ClearProviders();
                loggingBuilder.SetMinimumLevel(Microsoft.Extensions.Logging.LogLevel.Trace);
                loggingBuilder.AddNLog();
            });

            var container = new DryIoc.Container(rules =&gt; rules.With()).WithDependencyInjectionAdapter(services);

            container.Register&lt;TraceInterceptor&gt;(reuse: Reuse.Transient);
            container.Register&lt;TraceInterceptorAsync&gt;(reuse: Reuse.Transient);

            container.Register&lt;IService, Service&gt;(reuse: Reuse.Scoped);
            container.Intercept(typeof(IService), new Type[] { typeof(TraceInterceptor), typeof(TransactionInterceptor) });

            return container.BuildServiceProvider();
        }


