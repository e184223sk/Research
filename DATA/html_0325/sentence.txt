こちらは Unity #2 Advent Calendar 2020 の 8日目の記事ですまた今回は、解説が長くなってしまうため前編と後編に分けることにしますmm
後編では、Firebaseの実装関連を全て Firebase Advent Calendar 2020 の16日目に投稿予定の記事『UnityとFirebaseでアプリ開発する際にユーザーデータの取り扱い方まとめ』でまとめようと思いますたので一緒にご覧ください。今回は、タイトルの通り超初心者がUnity/C#を学び、さらにFriebaseを使ってアプリ開発したい人向けとなります。
プログラミング初心者でもUnityは、書籍が豊富なだけでなく、Asset Store や Unity Learn、Unity Japan YouTubeチャンネル などUnityコンテンツの制作・開発においてとてもサポートが豊富なので、熱意があれば小学生から高齢者まで幅広くもの作りができる、あらゆる可能性を持ったツールだと思います。私は、とあるサービスでUnityのインストラクターをやっているのですが、担当している生徒さんはほとんどプログラミング初心者でUnityを学びつつC#/プログラミングも学んで、その上で目的であるゲーム作りやVR/AR作りなども学んでいるため、学ぶことが多くお手上げ状態になってしまいます。
どんなに学びやすい環境でもスキルを身に付ける量が多いと、どうしてもモチベーションが下がってしまいますよね。そこで今回は、初心者がUnityでiOS/Androidのアプリ開発を目指している方にだけターゲットになってしまいますが、「どうぶつタワーバトル」や「飛べゴリラ」などのインディー/カジュアルゲームの開発でコスパ最強な mBaaS の Firebase について、活用方法や必要になってくる知識のサポートについて解説していきたいと思います！各用語について本記事の定義をさせてください。改めてターゲットはこちらになります。本記事を参考にするには次の項目が問題ないことをご確認ください。今回は、Firebase Authentication (Auth) と Firebase Realtime Database (Database) を活用するので、私が過去に書いた FirebaseとUnityでアプリ開発（ハンズオンみたいなやつ）を参考に FirebaseAuth.unitypackage と FirebaseDatabase.unitypackage をUnityにインポートし、Firebaseの導入を済ませておいてください。また、公式ドキュメントをもとに一度Firebaseを実際に使ってどんなものなのか知ってもらいたいです。
次の項目を一通りやってみて、途中でわからなくて止まってしまっても全部確認してやってください🙏　今回、AuthとDatabaseを活用する理由ですが、カジュアルなゲームや2D/3Dのコンテンツの開発でユーザーデータの登録/取得が必要になる場面が多いため、他にもFirebaseの導入が必要かもしれませんが、まずは最低限の導入から進めることをオススメします。アプリの要件次第ですが、例えばゲームアプリの開発でランキングシステムを実装するとします。
一端末で完結するアプリ（ノベルゲームや人狼ゲームなど）であれば PlayerPrefs などを用いて、ローカルにデータを保持するだけで事足ります。
ですが、オンラインで様々なユーザーがランキングを争う要件となると、全ユーザーのゲームデータを管理する サーバー が必要となります。そこで、FirebaseのDatabaseでゲームデータを保持させ、アプリを使用するユーザーのみDatabaseへアクセスできるようにセキュリティの担保、およびユーザーを管理するAuthを使うことで、サーバーの開発と運用をやらなくて済みます。　Databaseを使用するならAuth必須だと思っていいでしょう。
Firebaseはある一定から従量課金制になるので、使った分だけ請求が発生します。そのため、誰でもアクセスでき（".read": true）誰でも書き込みでき（".write": true）る脆弱なDatabaseのルールで運用してしまうと、Databaseが攻撃されて多額の請求が発生してしまう可能性が考えられます。そのため、作るアプリを使用するユーザーのみアクセスと書き込みができる設定にしておけば不正アクセスを特定できるし、後からさらにセキュリティを強化することが可能です。　本来は、SNS連携でスマートにユーザー管理したいのですが、Unityの場合はiOS/Androidともに個別対応が必要で大変なので、今回も前回同様にパスワードでの認証を扱います。
　
※実装関連は後半へ続く　ユーザーデータをDatabaseに保存することで作る機能の幅がグッと広がります。
ゲームならランキング機能やゲームデータの共有機能、ゲーム以外でもフレンド機能などを開発できるようになります。私が過去に開催したイベント Unity Developer Jobs #1 でご登壇していただいた @tktrvr さんの 発表内容 で、アバターライブ配信プラットフォーム「トピア」 のチャット・ギフトの実装は、Firebase Realtime Databaseで実装されているとのことでした。　
※実装関連は後半へ続くさて、実際にAuthとDatabaseを扱って、Unity/C#の初心者さんはサンプルコードや公式ドキュメントの解説についてレベルが高く感じ、全然頭に入らないしどうしたらいいのかわからない状態になった方は少なくないんじゃないでしょうか。ここからが本記事の本題でして、これから次の項目を一つ一つFirebaseに合わせて解説していきます。
Unity/C#の初心者さんは、どうキャッチアップすればUnityでFirebaseを使ってアプリ開発できるのか一緒に抑えていきましょう！Jsonは、1要素をKeyとValueで取り扱います。このValueでは、文字列や数値を取り扱える他に新たに要素を増やしたり、配列でもあたりを管理することができる上に人間がとても管理しやすいデータ型でもあります。例えば、以下のようなテーブル情報があったとして、次のようなJsonフォーマットを文字列で管理することができます。
Json形式はフォーマットが存在するため、JSON Pretty Linter Ver3のようなWebツールを使って確認すると作業しやすいですね。Usersテーブル↓　
FirebaseのDatabaseでは、JsonのようなKeyとValueでやり取りします。一般的なデータベース（MySQLやPostgreSQL）は、SQL（Structured Query Language）をベースに設計されているため、SQLを学ぶ必要があります。SQLの学習はとても難しいですが、JSONであればKeyとValueの設定さえ把握してしまえばいいので、JsonのWebツールなどを活用してサクッと身に付けましょう！非同期は、以下のように『通常同期処理とは違って、メイン処理（メインスレッド）が終わっても別で処理（サブスレッド）が進んでいる。』だけ知り、それ以外で非同期を理解しようとしなくて大丈夫です。　
非同期処理の場合、上記のように処理の結果が変わります。
そのため、いつものようにメソッドを扱う感覚でプログラミングしてしまうと、タイミングによって処理結果がバラバラになってしまって不具合の原因を作りかねません。非同期の場合、処理がどのタイミングで結果を出してくれるのか意識するために、フローチャート や シーケンス図 を書きながらプログラミングするとよいでしょう！非同期処理が必要になる箇所ですが、Firebaseが提供している *****Async( ... ).ContinueWith( task =&gt; { 【ここの処理全て非同期処理】 } ) とAsyncが付いているメソッド全てになります。Authでは、アカウントの作成（ CreateUserWithEmailAndPasswordAsync ）とログイン（ SignInWithEmailAndPasswordAsync ）などで非同期処理が求められ、Databaseでは、データの取得（ GetValueAsync ）で非同期処理が求められます。　　各プログラミング言語で非同期をテーマにした書籍が出ているぐらい、初心者ベテラン関係なく、非同期はとても難しいです。なので、最低限扱えるレベル学習するだけで大丈夫ですーUnityの非同期には歴史がありまして、その辺は @4_mio_11 さんの 古来よりUnity非同期を実現していたコルーチンとは何者か？ を参考にされてください。先ほど解説で出た ContinueWith メソッドの引数＝ラムダ式（無名関数）になります。
これも非同期同様に難しい分類なので、書き方と扱い方さえ把握すれば理解しようとしなくていいです。ラムダ式は以下のような書き方で、ソースコードを簡略化することができます。　
ラムダが無名関数と言われているように、ラムダ式になるとメソッド名と返り値の型を明示しなくてもプログラミングとして動きます。さらに知りたい方は、@toRisouP さんの 【C#】わかった"つもり"になれる「ラムダ式」解説 を参考にされてください。いかがだったでしょうか、個人的にFirebaseを扱うことでキャッチアップの量が増えてしまいますが、ここまで解説した最低限の範囲を学んで、Firebaseを用いて作っているアプリにユーザーデータを保存して取得できる機能が作れたら、Unity超初心者から卒業してるレベルじゃないでしょうか。実装内容は、全て後編の Firebase Advent Calendar 2020 の16日目に投稿予定の記事『UnityとFirebaseでアプリ開発する際にユーザーデータの取り扱い方まとめ』でまとめさせていただきますましたmm　ちなみに公式ドキュメントのサンプルコードは、そのままでは扱えないコードを記載していることがためにあります。
上記のように変なところに閉じブロックがあったり、Unityではないですが、過去にiOSのネイティブアプリでFirebaseを導入した際にサンプルコードだけではエラーになって調査しながら組み込んだことがありました。このように、公式ドキュメントであっても全て正しいわけではなかったりするので、『公式のサンプルコードなのにエラーになるなあ、日本語記事は見つからないけど海外の記事に似たようなエラーの人がいるみたい。翻訳してもわからないから直接公式に問い合わせしよー』ぐらいの感覚で気楽にやらないとやっていけませんので笑　  


