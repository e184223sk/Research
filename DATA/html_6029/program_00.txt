/// &lt;summary&gt;
/// 循環リスト
/// &lt;/summary&gt;
/// &lt;typeparam name="T"&gt;&lt;/typeparam&gt;
class InfiniteList&lt;T&gt; : IEnumerable&lt;T&gt;
{
    private readonly List&lt;T&gt; _list;

    public InfiniteList(IEnumerable&lt;T&gt; source)
    {
        _list = source.ToList();
    }

    public IEnumerator&lt;T&gt; GetEnumerator()
    {
        while (true)
        {
            foreach (T val in _list)
            {
                yield return val;
            }
        }
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return this.GetEnumerator();
    }
}

class Program
{
    static void Main(string[] args)
    {
        // 単純な循環リスト
        int[] a12345 = { 1, 2, 3, 4, 5 };
        InfiniteList&lt;int&gt; infiniteInt = new InfiniteList&lt;int&gt;(a12345);
        foreach(var x in infiniteInt.Take(20))
        {
            Console.WriteLine(x);
        }

        // ランダムな値を返す関数のリストにすればランダムな無限リストが得られる
        var rnd = new Random();
        Func&lt;int&gt;[] r = { () =&gt; rnd.Next() };
        InfiniteList&lt;Func&lt;int&gt;&gt; infiniteFunc = new InfiniteList&lt;Func&lt;int&gt;&gt;(r);
        foreach(var f in infiniteFunc.Take(20))
        {
            Console.WriteLine(f());
        }
    }
}

