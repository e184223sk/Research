More than 3 years have passed since last update.ASP.NET MVC5とEntityFramework6.xをベースとして、簡単なWebアプリケーションを作成するチュートリアルをまとめました。以下のような方を対象にしています。今回は、住所録をもとに地図を表示する機能 を目標に実装していきたいと思います。
今回は以下の環境を使っています。環境：
- Windows10
- VisualStudio2017 Community
- SQL Server Express 2017
    - SQL Server Management Studio 2017　　今回はEntityFrameworkを使ったDBファーストという手法で開発を進めます。くだけた言い方をすると、先にデータベースを作成しておき、EntityFrameworkを使ってWebアプリとの橋渡しを行う開発手法といった感じです。というわけで、まずは住所録を入れるDBの構築を行います。
SQL Server Management Studio (以下、SSMS)を起動し、データベースを作成しましょう。
オブジェクトエクスプローラーの[データベース]フォルダを右クリックし、データベースを追加します。今回はEfPracticeという名前にしました。次に、テーブルを追加します。今回は下記のようなデータが入ります。  ◆カラム項目(カラム名)：型  註1：性別は本来下記リンクのように扱うべきですが、今回は練習ということでcharにしています。 https://qiita.com/yuba/items/567f8f47c9bb5a20200e作成したDBに、下記のSQLを実行しましょう。（EfPracticeを右クリック→新しいクエリ)
実行後、下図のような状態になっていれば成功です。  次は作成したテーブルに使うデータを入れていきます。
下記の私のGitHubページにあるsanple_data.csvというファイルを右クリック→リンク先を保存 でファイルをダウンロードしてください。https://github.com/ymstshinichiro/MVC5_tutorial※参考：https://yamagata.int21h.jp/tool/testdata/次に、先ほどと同様に新しいクエリを作成し、下記のSQLを実行します。
その際、読み込むファイルのパスはご自身がダウンロードしたファイルのパスを指定してください。テーブルのデータが正しく入っているか確認してください。ここまででデータベースの作成は完了です。では、本題のWebアプリケーションの作成に入っていきます。
まずはVisualStudioを起動しましょう。
上部メニューから ファイル→新規作成→プロジェクトを選択すると下記の画面が現れます。
右側のペインでVisualC#→Web→ASP.NET Webアプリケーションを選択し、名前を AddressPractice としてください。  OKを押して、次の画面ではMVCを選択します。バージョンで多少の違いはあるかもしれませんが、下記のようなファイル/フォルダ構成になっていればOKです。では次に、先ほど作成したDBを取り込んでいきます。まず初めにEntityFrameworkをプロジェクトにインストールします。
EntityFrameworkについての詳しい説明は譲りますが、ざっくり言うと「DBとアプリケーションの連携を簡潔に記述できるようにするもの（O/Rマッパー）の、ASP.NET対応版」です。  では、インストールの方法ですが、ソリューションエクスプローラ上で現在のプロジェクト名を右クリック→Nugetパッケージの管理 をクリックします。現れたウィンドウで 参照 を選択し、EntityFrameworkを検索、インストールをクリックして完了です。次に、最初に作成したDBと連携させます......が、その前にいったんビルドします。
上部メニューから ビルド→ソリューションのリビルドを実行してください。  無事完了したら、ソリューションエクスプローラー上のModelフォルダを右クリック→追加→新しい項目をクリックし下記のウィンドウを表示させます。右のペインで データ を選択し、ADO.NET Entity Data Model を選択します。
名前を、EfPracticeContextに変更し追加をクリックしてください。データベースからEFDesignerを選択し、次へ。出てきた画面で、新しい接続をクリックします。  ここで、最初に作ったDBの情報が必要になるため、SSMSを立ち上げ、使うデータベース右クリック→プロパティを開きます。出てきたウィンドウの 名前 の文字列をコピーしてください。  VisualStudioに戻って、コピーした文字列を サーバー名 の欄に貼り付けます。
そうすると、データベース名を選択できるようになるので、こちらもさきほどのEfPracticeを選択し、OKをクリック。  下記の画面に戻るので、次へをクリックします。  データベースオブジェクトを選択する画面が現れるので、テーブルにチェックを入れたら、完了をクリックします。Modelの下に新たなファイルが作成されていればOKです。ここでももう一度リビルドしておいてください。
SSMSも閉じてOKです。  ここからはコードの記述に入っていきますが、初めにごくごく基本のHelloWorldをやってみます。まず、ソリューションエクスプローラーのContorollerの上で右クリック→追加→コントローラ をクリックすると下記のウィンドウが現れるので、MVC5コントローラー-空を選択し、追加します。名前は何でもよいのですが、一つ注意点があります。必ず末尾にControllerと付く名前にしてください。後ほど解説しますがURLのルーティングに関係しているためです。スキャフォールディングが終わると、Controllerの下に HelloWorldController.cs ファイルが作られ、Views/HelloWorld　というフォルダが新たに作成されます。では、作成された HelloWorldController.cs の Index をドラッグしながら右クリック→ビューの追加をクリックします。下記のウィンドウが現れるので、そのまま追加をクリックします。
Views/Helloworld の下に Index.cshtml というファイルが新たに作成されました。
では、ここに下記のコードをコピペしてください。続いて、App_Start/ RoutteConfig.cs ファイルを開きます。１９行目のとなっているところを、と、書き換えましょう。この作業により、このアプリケーションを実行したときに最初にリクエストされるURLが、
http://[サーバー名]/HelloWorld/Index
となるよう変更されました。（※変更前は  http://[サーバー名]/Home/Index だった）完了したらファイルを上書き保存し、ビルド→実行（F5キーを押下）します。
以下の画面が現れれば成功です。
いったん画面を閉じましょう。上記の例からわかるように、ASP.NET MVC5では、http://[サーバー名]/コントローラ名/ビュー名  という形でURLがルーティングされ、コントローラは “コントローラ名controller”にするという命名規則がある点に注意してください。(今回の例では HelloWorldがコントローラ名のため、HelloWorldController と名付けました)
また、コードの書き方からなんとなく読み取れると思いますが、アプリケーションの動作の流れを書くと以下のようになります （例：HelloWorld/Index の場合）  ◆サーバーから見た動作
1) クライアントから /HelloWorld/Index に対してGet要求が来る2) HelloWorldController.cs のActionResult Index() 内の処理を実行する
→ここにReturn View() の記述がある場合、ActionResultと同名のビューHTMLをレスポンスとして渡す。  (Return Viewだけでなく、別のページへリダイレクトしたり、コントローラ内の別処理へ飛ばすことも当然可能です。)　　
基本的にはこの流れの2)の部分に様々な処理を追加していきます。
基本がつかめたところで、次にEntityFrameworkを使ってみます。
先ほどの流れと似ていますが、Controller上で右クリック→追加→新規スキャフォールディングアイテム を選択すると、以下のウィンドウが現れます。
ここで、一番上の EntityFrameworkを使用した、ビューがあるMVC5コントローラを選んで、追加を押下します。現れたウィンドウで下記のように選択し、コントローラ名を addressControllerに変更し、追加を押下します。 さきほどのHelloWorldControllerと違い、色々と処理が書かれています。
が、基本は同じです。ActionResult ビュー名 になっており、Views/Addressの下には Create,Delete,Details,Edit,Indexというcshtmlファイルができています。
試しにこの状態で実行しましょう。
最初はHelloWorldが表示されますので、アドレスバーにURLを直接入力してください。  となっているのを,  に変更します。  以下のような画面が表示されると思います。一行目の安藤さんの右端の列を見ると、Edit,,Detail,Deleteとありますが、これらの各リンクをクリックすると、それぞれ編集、詳細、削除の画面に遷移します。
また、左上のCreate New というリンクをクリックすると、新しいデータを入力できる画面が現れます。
このように、EntityFrameworkを使うとデータの操作を行うWebアプリケーションのひな型を簡単に作成することができます。  それぞれのページでどのような処理が動き、どのようなページがViewとして表現されているのか、自分で動かしながら調べてみてください。   Views/address/Indexの中身を見てみると、モデルのデータをforeachで順番に表示しているのが見てとれます。無駄な処理をしているわけではないのですが、よりスマートな解決方法としてWebGridというオブジェクトを使う方法があるので紹介します。  まず初めに、addressController.csに以下のコードをコピペしてください。次に、Views/Addressの下に GridIndex.cshtml というファイルを追加し、下記をコピペしてください。  非常にシンプルな記述ですが、これでも一応表示はできます。リビルドして実行すると、下記の画面が表示されるはずです。正直めっちゃ見づらいですね。簡便な記述になったとはいえ、出力がこれでは意味がありません。
GridIndex.cshtmlを編集して、きれいにしていきます。まずは下記のようにタイトルに表示する文字列を変更します。実行すると下図のようになります。若干よくなりましたが、まだ気になる点がたくさんあります。とりあえず以下の二点を修正します。
- 枠線がない
- 列幅があってないというわけで、GridIndex.cshtml にインラインでCSSを入れてみます。下記のようになります。よくなりましたが、まだ幅があっていません。 固定電話と住所のフリガナを非表示にし、各列に幅のStyleを追加しました。
また、生年月日のフォーマットを変更し、時刻を表示しないようにしています。  実行結果は以下になります。最後に、ページャーを上下に表示するよう変更します。
本体のページャーを非表示にして、grid.pager()を本体の上下で呼び出せばOKです。実行結果
仕上げに、住所を地図上でも表示できるようにしてみたいと思います。
ご存知googleMapを活用していくわけですが初めの準備が少々面倒です。  まず、googleアカウントが無い方はアカウントをとってください。
アカウントができたら下記のリンクに従ってAPIキーを取得しましょう。
https://lab.syncer.jp/Web/API/Google_Maps/JavaScript/  キーの制限 という項目まで進んだら、リファラーを */address/* に設定しておいてください。  
ではまず、さきほど作ったGridIndex.cshtmlに一部追記をします。ひとまずこの状態で表示してみます。右端にmap というリンクが追加されました。
押してみると、住所録の詳細に遷移します。
この詳細の下に地図を表示したいと思います。  では、Views/address/Details.cshtml を開き、すでにあるコードの最下行から、以下をコピペで付け足してください。一番上の ここにAPIキー と書かれた部分を、自分のAPIキーに書き換えたら、まずはさきほどのGridIndexを表示させて、Mapのリンクをクリックします。
そうすると、下記のような画面が表示されるはずです。GetGeocodeボタンを押下すると、住所のポイントに地図が移動します。また、下のほうにある逆ジオコードは、上記の住所とは全く関係なく、緯度経度から住所を表示する実装になっています。
こちらも色々触って、確認してみてください。以上で今回のチュートリアルは終了です。
自分も初学者なため拙い部分多々あったかと思いますが、ご意見いただけますと幸いです。宜しくお願いいたします。


