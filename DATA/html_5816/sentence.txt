More than 3 years have passed since last update.きよしこの夜、RPG制作楽しんでるナムアニクラウドです！
本日はRPG好きの私がパッシブ効果について語っちゃうよ。プログラミング脱初心者くらいの人は、プログラムの読み書きはできるようになったけど、これをどうすれば具体的なゲームを作れるの？と疑問に思っている人も多いハズ。今回はそんな方に対してゲーム制作のとっかかりになる記事を目指して（あと自分の趣味を爆発させる目的で）書きます。今回書くプログラムは同期的な書き方をするのでDirectXなどを使った派手なグラフィックのゲームにそのまま使えるものではないのですが、コンソールの文字だけのプログラムで動かすのには適していますし、派手なグラフィクのゲームでも今回の考え方は役立ちますのでぜひ挑戦してみてください。パッシブ効果とは、RPGの戦闘においてプレイヤーの操作なしに発動する効果のことです。ポケモンで言えば「特性」ですね。「状態異常」や「パッシブスキル」と呼ばれるものもパッシブ効果です。逆にパッシブ効果じゃない物は、ポケモンで言えば「技」です。とにかくプレイヤーがゲームを操作して発動させるものはパッシブ効果ではないものであり、私は「アクティブ効果」と呼んでいます。パッシブ効果はアクティブ効果に比べて種類が豊富です。どんなものがパッシブ効果なのでしょうか？こんな具合で、パッシブ効果はRPGなら必ずと言っていいほど出会うギミックなのです。これがプログラムでサラッと書けると、RPG作りが楽しくなる気がしませんか？そんなパッシブ効果はどのように作られているのでしょうか？私の作っているゲームをなぞる感じで軽く紹介いたします。まずはRPGもどきのプログラムを書きます。ターン制で、敵も味方も一人きりのものにしましょう。まずは戦闘に参加しているキャラクターのクラスを作ります(バトラーと呼ぶことにします)。そして、戦闘システムのプログラムは以下の通りです。戦闘が自動で進み、HPの変化が表示されるだけのシステムです。HPが0になっても戦闘が続きますがご愛嬌ということで……ターンの終わりにダメージを受ける「毒状態」を作ってみましょう。まずは何も考えずにクラスを作ります。毒状態に必要なものを追加しましょう。以下のものが必要と思われます：ドカッと書いてしまいましたね。順番に解説してみます。まず、毒状態は戦闘参加者のひとり(バトラーと呼びます)にダメージを与える操作を行うので、毒状態にかかっているバトラーへの参照をプロパティOwnerに持っておきます。次に、毒で実際に受けるダメージ量も指定する必要がありますので、その量を保存するプロパティPowerも必要です。これら2つのプロパティを初期化するために、コンストラクタPoisonStatusも用意しました。次にバトラーに手を加えます。毒状態にかかる機能のために、以下のように実装を追加します。そして肝心のダメージを発生させる処理ですが、PoisonStatusにOnTurnEndなるメソッドを作り、ターンの終了タイミングが来たら戦闘画面を支配しているクラスに呼んでもらうことにしました。戦闘システムに毒の処理を呼び出すコードを追加すると以下のようになります。このプログラムを開始すると適切な初期化をして敵に毒を与えたのち、という流れを、無限に繰り返しています。OnTurnというメソッドが出てきますが、その中には対称のバトラーのターンが来たときに実行する処理が書いてあります。毒状態にかかるきっかけとなるアクティブスキルなども、ゆくゆくはこの中で呼ばれるでしょう。そしてその後の部分で、バトラーが毒状態にかかっていればPoisonStatusのOnTurnEndメソッドを呼び出します。ここではBattlerクラスのPoisonプロパティがnullでなければ毒状態にかかっているとみなしています。雑でしたが、毒状態を作ったりするのはこんな雰囲気でできます。続けて他の状態異常も考慮してみましょう。状態異常は毒状態だけではありません。たとえば、ターンが経過するとHPが回復する「リジェネ」を実装するとどうなるでしょうか？それは次のようなクラスで表されるでしょう：バトラーのHPを操作する状態異常なので、バトラーへの参照をプロパティOwnerに持っています。また、回復量をAmountプロパティに持っています。それから、OnTurnEndメソッドを前述の戦闘システムのメソッドから呼んでもらうことで、HPの回復処理を実現することにしました。バトラーがリジェネにかかっている状態を表現するために、Battlerクラスを少し弄ります。そうすると、戦闘システムに少し追加すればリジェネの実装が完了しそうですね。おや……ちょっと戦闘システムが長くなってきましたね。というか、*1の部分と*2の部分がすごく似ていて、PoisonがRegenerationに変わったくらいの違いしかありません。実際のところ、PoisonStatusもRegenerationStatusも状態異常の一種であるし、2つのOnTurnEndメソッドはどちらも「ターン終了時に呼ばれる」という点で同じ役割のはずです。このような同じ役割を持つメソッドを持ったクラス群は、基底クラスを作って共通に扱えるようにしたほうが良いでしょう。そこで、BattlerStatusなるクラスを作り、PoisonStatusやRegenerationStatusはそれを継承する形にします。さっそくやってみましょう。まず、BattlerStatusクラスは次のようになります。それから、PoisonStatus, RegenerationStatusクラスでは、OnTurnEndメソッドにoverrideキーワードをつけてBattlerStatus.OnTurnEndメソッドをオーバーライドするようにします。これで、PoisonStatusクラスもRegenerationStatusクラスも、同じBattlerStatusクラスの変数に代入できるようになります("アップキャスト"という仕組みのことですね)。次に、Battlerクラスがいろいろな状態異常を統一的に扱えるようにする必要があります。新しいBattlerクラスは次のようになります。状態異常は複数同時にかかることがあることにして、状態異常のコレクションをListクラスを使って保持することにしました。Listクラスを使うために、System.Collections.Generic名前空間をusingしています。そして、戦闘システムは次のようになるでしょう：ワオ！すっきりしました。しかも、今後どんなに状態異常を増やしてもへっちゃらです！プログラミングの世界では、「同じことを2度書くな」と言われています。この原則はDRYの原則(Don't Repeat Yourself)と呼ばれています。変数を使ったり、継承を使ったりして、似ている処理はひとつにまとめましょう。また別の話題に入ってみます。「攻撃力上昇」の状態異常を作ってみましょう。まずは、攻撃処理を作ってからがよいでしょう。ここまでなんとなく存在していたOnTurnメソッドを実装する形で攻撃処理を実現しましょう。新しいOnTurnメソッドは次の通りです。ターンが来たらライバルを攻撃してHPを減らすようにしてみました。そのためにOnTurnメソッドの引数を増やしてバトラーを受け取るようにしています。BattleFlow.Battleメソッドではこれを反映する必要があるでしょう。新しいBattleFlow.Battleメソッドは以下の通りです。それでは実際に「攻撃力上昇」の状態異常を作っていきます。方針としては、ライバルを攻撃するときに呼ばれるメソッドを作り、そのメソッドが元の攻撃力を補正したあとの新しい攻撃力を返すようにするのがよさそうです。新しい状態異常は、もちろん先程作ったBattlerStatusクラスを継承します。ですので、攻撃するときに呼ばれるメソッドをBattlerStatusクラスに追加します。ModifyPowerメソッドが攻撃力を変化させるメソッドです。引数で元の攻撃力を受け取り、戻り値で新しい攻撃力を返します。これを攻撃力上昇の状態異常クラスでオーバーライドするわけです。前回はBattlerStatusに定義するメソッドはabstractをつけて抽象メソッドにしたのですが、今回はvirtualに変更して仮想メソッドにしてみました。攻撃力上昇の状態異常はターン終了処理などは特にありませんので、その実装を省略できるようにするためです。今後いろいろな状態異常を作ると、いちいち全てのタイミングの処理を実装するのがしんどくなってきますので、このようにしました。BattlerStautsクラスでは、OnTurnEndの中では何もしませんし、ModifyPowerからは元の攻撃力がそのまま返されますので、どちらも呼び出しても何もしません。攻撃力が5上がるようにしてみました。次に、このパッシブ効果を実際に有効にしてみます。ここで読者さんに問題です。攻撃力上昇のパッシブ効果に複数かかっているときに、全ての攻撃力アップを重ねて反映させるにはどうすれば良いでしょうか？例えば、上記の攻撃力上昇状態が2つなら、攻撃力は5+5で10増えます。 ヒント：攻撃力アップが一つだけの場合は次のようにできるでしょう：……では答えです。計算用の変数を用意し、状態異常のコレクションをforeachで列挙し、状態異常ごとにModifyPowerメソッドを呼び出すことで、全ての攻撃力アップ状態を反映させることができます。ちなみに、C#らしいLINQを使った書き方だとつぎのようになります：AggreagateというメソッドがLINQのメソッドです。これを使えば、配列の要素を使って元の値を連続で書き換える処理を行うことができます。さて、他にもいろいろ語りたいことはありますが、予想外に長くなって疲れてしまったのでここまでということで！
パッシブ効果の実装は他にもいろいろな工夫が必要な場面があるでしょう。以下のようなものです：RPGのプログラミングはとても奥が深いです。みなさんもぜひ挑戦してみてください。


