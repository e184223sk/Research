・アカウント登録後、ログイン状態にせずログインさせる
・アカウントと給与データを紐づける必要なことは2つと考えました。
①アカウント登録後、ログインしていない状態にする
②アカウント登録後、ログイン画面に遷移するログイン処理（Register.cshtml.csのOnPostAsyncメソッド）で下記の記述があるのでログインしてしまっています。
なのでこれを削除します。また、ホームページにリダイレクトしているところを、ログインページにリダイレクトするようにします。アカウント登録します。
ログイン画面が表示されました。
右上を見るとログイン状態にもなっていませんので実装完了です。
やることは2つ。
①給与データ登録時に"DUMMY"としていた登録ユーザID・更新ユーザIDを、ログイン中のユーザ名で設定する
②一覧ページの表示時に、ログイン中のユーザの情報のみを表示するようにする
※ログインしていない状態で一覧ページには行けないようにしますがそれは後で。
　今回はログイン中のユーザー名が取得できなければ何も表示しない（＝引っかかるデータがない）にします。SalariesControllerのCreateメソッドを書き換えます。登録してみます。桁間違えて総支給50兆円になっちゃったけど5000兆円ほしい。
まだいじっていない編集画面で確認すると、ログイン中のユーザ名が登録されていることがわかります。
同じくSalaryControllerのIndexメソッドを修正します。
登録ユーザIDがログイン中のユーザと同じものだけを返します。ログインしていない状態だと引っかかるデータがないため、なにも表示されません。
ログイン状態だとログイン中のユーザが登録したデータが表示されます。
違うユーザに編集すると…
表示されません。
モデルクラスの各数値項目に、アノテーションを付けます。今のところパスワード変更くらいしか使わないので、それ以外消します。
_ManageNav.cs.htmlからPassword以外消します。_LoginPartial.cs.htmlで右上のボタンを押したときの遷移先をChangePasswordにします。ヘッダー部分（Manage your accountとかの部分）も変更します。ChangePassword画面も日本語にしておきます。このようになります。
今の時点では、「localhost:ポート番号/」にアクセスすると、ようこそ的な画面になりますが、
Indexページを表示するようにします。
デフォルトをSalaries/Indexにするようにしました。（Homeはいらない。）
ヘッダーの「ホーム」やシステム名のところは直接Home/Indexを呼ぶようになっているので、それも直します。なりました。
ログアウトのPOSTリクエストに対する処理を書き換えて、ログイン画面に遷移します。
なんだか無理やりすぎな気がする…基本、未ログイン状態でSalary操作系のページにはアクセスしてほしくありません。
まずはSalary操作系のページ全てに対して匿名ユーザのアクセスができないようにします。
SalariesControllerクラスにAuthorize属性を付けます。ホーム（Indexにリダイレクトされる）を開くと、上記のアクセス制御によりログイン画面に遷移します。
次回はデータを可視化する方法を考えます。


