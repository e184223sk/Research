
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel.Design;

namespace class_capule
{
    class Student
    {
        //クラス自体の変数は下記の4行で定義
        private int id;
        private string name;
        private int weight;
        private int height;

        // 下記の4行でStudentクラスの変数に直接アクセスできない様にカプセル化
        public int Id { get; set; }
        public string Name { get; set; }
        public int Weight { get; set; }
        public int Height { get; set; }
    }

    class Program
    {
        static void Main()
        {
            //渡されるデータが幾つなのかはコンソールから渡す
            var N = int.Parse(Console.ReadLine());

            int[] represent = new int[2];
            const int standard = 160;

            //今回は身長によって2つのクラスに分ける
            var listH = new List&lt;Student&gt;();
            var listL = new List&lt;Student&gt;();

            //渡されたN回数分をループで回す
            for (int i = 1; i &lt;= N; i++)
            {
                //Ver. 9.0からStudentクラスをインスタンス化(newだけで以下のクラス名は省略できる)
                Student src = new();

                //コンソールからまず身長が渡されるとする
                int studentTall = int.Parse(Console.ReadLine());
                string hoge = studentTall &gt;= standard ?  "High": "Low";

                //Student型の変数srcに新規内容として格納(iが出席番号)
                src.Id = i;
                src.Height = studentTall;


                //基準の身長で入れるリストを分ける
                if (hoge == "High")
                {
                    listH.Add(src);
                }
                else
                {
                    listL.Add(src);
                }
            }

                //体重がコンソールから入力される(半角スペース区切りで1行の入力)
                int[] weightArr = Array.ConvertAll(Console.ReadLine().Trim().Split(' '), int.Parse);

                //名前がコンソールから入力される(半角スペース区切りで1行の入力)
                string[] nameArr = Console.ReadLine().Trim().Split(' ');

                for (int i = 1; i &lt;= N; i++)
                {
                    //身長によって入れているListが異なるので条件分岐にて振り分ける
                    //その際に出席番号としてidをclassで持たせているので
                    //そのidがListに入っているStudentクラスにあるかどうかを判定する

                    //listのメソッドのFindメソッドを利用して、
                    //その中でラムダ式にて該当idを探す ←これ大切です‼️‼️‼️‼️‼️
                    if (listH.Find(x =&gt; x.Id == i) != null)
                    {
                        //コンソールから取得した体重と名前をFIndメソッドで見つけたidのクラスに付与する
                        listH.Find(x =&gt; x.Id == i).Weight = weightArr[i];
                        listH.Find(x =&gt; x.Id == i).Name = nameArr[i];
                    }
                    else if (listL.Find(x =&gt; x.Id == i) != null)
                    {
                        //コンソールから取得した体重と名前をFIndメソッドで見つけたidのクラスに付与する
                        listL.Find(x =&gt; x.Id == i).Weight = weightArr[i];
                        listL.Find(x =&gt; x.Id == i).Name = nameArr[i];
                    }

                }

            Dictionary&lt;string, int&gt; dictHighList = new()
            {
                { "studentId", 0 },
                { "heaviest", 0 },
            };
            Dictionary&lt;string, int&gt; dictLowList = new()
            {
                { "studentId", 0 },
                { "heaviest", 0 },
            };

            // 各グループの一番体重の重い人を調べる
            for (int i = 1; i &lt;= N; i++)
            {
                // 各グループに存在するID で一番体重が重たい
                if (listH.Find(x =&gt; x.Id == i) != null
                    &amp;&amp; listH.Find(x =&gt; x.Id == i).Weight &gt; dictHighList["heaviest"])
                {
                    dictHighList["studentId"] = listH.Find(x =&gt; x.Id == i).Id;
                    dictHighList["heaviest"] = listH.Find(x =&gt; x.Id == i).Weight;

                }
                else if (listL.Find(x =&gt; x.Id == i) != null
                    &amp;&amp; listL.Find(x =&gt; x.Id == i).Weight &gt; dictLowList["heaviest"])
                {
                    dictLowList["studentId"] = listL.Find(x =&gt; x.Id == i).Id;
                    dictLowList["heaviest"] = listL.Find(x =&gt; x.Id == i).Weight;
                }
            }

            int highHeight = listH.Find(x =&gt; x.Id == dictHighList["studentId"]).Height;
            int highWeight = listH.Find(x =&gt; x.Id == dictHighList["studentId"]).Weight;
            string highName = listH.Find(x =&gt; x.Id == dictHighList["studentId"]).Name;

            int lowHeight = listL.Find(x =&gt; x.Id == dictLowList["studentId"]).Height;
            int lowWeight = listL.Find(x =&gt; x.Id == dictLowList["studentId"]).Weight;
            string lowName = listL.Find(x =&gt; x.Id == dictLowList["studentId"]).Name;

            Console.WriteLine("下記が出力結果です");
            Console.WriteLine($"{standard}以上の一番重たい人:{highName} 身長:{highHeight}cm 体重:{highWeight}kg");
            Console.WriteLine($"{standard}以下の一番重たい人:{lowName} 身長:{lowHeight}cm 体重:{lowWeight}kg");
            Console.ReadKey();
        }
    }

}

