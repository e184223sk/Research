DEMO
CODE※1
Build.hoge.unitywebのdataなどが重いので、
Wi-Fi接続またはLAN接続のPCで確認ください。※2
判定部分とは実質無関係なので、
OnGUI()を画面表示に使用しており、かつ、
OnGUI()の関連処理で文字列処理を多用しています。
ですので上記処理が起因のGCのスパイクが発生します。※3
時間精度の引き下げが行なわれる事があるようなので、
処理時間がミリ秒の精度に丸められることがあります。
同処理が施されたブラウザでは処理時間が正確に計測出来ません。
Firefoxであれば、
Firefoxの設定エディターにて、自己責任の上、
privacy.reduceTimerPrecisionをfalseにすれば、
処理時間の丸めなしにはできないようですが、
処理時間の丸めの精度は変更できるようです。Unityの存在を先日知り、
Unity及びC#のお勉強も兼ねて、
波動拳の入力受付をしてみよう、
という思いに何故か至りました。Unity及びC#を今回初めて触る、
オブジェクト指向恐怖症のIT業界外の人間で、
html,css,JavaScriptやPythonを、
休日等に少々触る程度の素人ですので、
本内容に間違いや勘違いが見受けられるかもしれません。カプコン社のストリートファイター等の技名を使用していますが、
あのコマンドね、と認識が伝わりやすいだろう、という意図です。冒頭のDEMOから以下を削除した、
波動拳のみの判定のCODEで記載。・波動拳(強)以外の技の削除
・溜め時間取得用処理の削除
・同時押し判定緩和用処理の削除
・本解説に不要なinput処理の削除
・本解説に不要な処理時間低減施策削除
・Inspectorへのデバッグ表示用処理削除
・GameViewへのデバッグ表示関連処理削除全体のざっくりした流れは以下です。・各種enum設定
・技のコマンドのクラスとそのList　…①
・十字キーとパンチキックの状態取得用のクラス
・キー履歴保持のクラスとそのList
・void Start()
　・技のコマンドのListの反転　…②
　・キー履歴保持のためのインスタンス生成
　・フレームレートの設定
・void Update()
　・今フレームのキーの状態をキー履歴保持のListに追記
　（ある程度の量になったら古い履歴情報から順次削除）
　　・foreach
　　　・foreach
　　　　・技のコマンドのひとつひとつを順次判定処理　…③
　　　　（波動拳は下⇒右下⇒右⇒Pなので4回判定）
　　　　（foreach1回目はP 　の判定）
　　　　（foreach2回目は右　の判定）
　　　　（foreach3回目は右下の判定）
　　　　（foreach4回目は下　の判定）以下の条件をListに設定。
1つ目の入力：キーの下　を押している、次の入力(1つ目と2つ目の入力)は6フレーム以内であること、次の判定とは(1つ目と2つ目の判定は)同一フレーム不可。
2つ目の入力：キーの右下を押している、次の入力(2つ目と3つ目の入力)は6フレーム以内であること、次の判定とは(2つ目と3つ目の判定は)同一フレーム不可。
3つ目の入力：キーの右　を押している、次の入力(3つ目と4つ目の入力)は7フレーム以内であること、次の判定とは(3つ目と4つ目の判定は)同一フレーム可能（右とＰの同時押しOK）
4つ目の入力：キーのＰ　を押した。波動拳は下⇒右下⇒右⇒Pだが、
処理順はP⇒右⇒右下⇒下の順序で判定を行なうため反転。キー履歴保持のList内に条件に合うキーが存在するかを判定。
以下の全ての条件判定が成立していれば波動拳入力受付承認。
foreach1回目：現在のフレームに、Ｐを"押した"という条件に合うキーが存在するか判定。
foreach2回目：(Ｐ　の成立フレーム-7)から(Ｐ　の成立フレーム-0)の間で、右　を"押している"という条件に合うキーが存在するか判定。
foreach3回目：(右　の成立フレーム-6)から(右　の成立フレーム-1)の間で、右下を"押している"という条件に合うキーが存在するか判定。
foreach4回目：(右下の成立フレーム-6)から(右下の成立フレーム-1)の間で、下　を"押している"という条件に合うキーが存在するか判定。CODEDebug.Logは結構重くて、
環境によって違うかもしれませんが、
1回で0.1msとか持っていかれるので、
処理時間計測時は使用しない方がいい。WebGLのBuildに関する備忘録。
WebGLのBuildすると日本語の表示が出来ないので、
Assets/ResourcesにNotoSansMonoCJKjpを配置して使用。Unityを触られている人なら不要とは思いますが、念の為。Unity Hub でプロジェクトを新規作成。2D(または3D)で作成。
※1 Unityのバージョンは2020.3xxfxとかであれば大丈夫かと...
※2 プロジェクト名と保存先はお任せします。
　↓
{ Unity 起動 }
　↓GameObject⇒Create Empty
InspectorウインドウでAdd Component⇒New script⇒Nameはscript⇒Create and Add
ProjectウインドウのAssetsに追加されたscriptをダブルクリック。
　↓
{ Visual Studio Community 起動 }
　↓下記コードをコピペ。
エンコードをUnicode(UTF-8シグネチャ付き)の形式に変更してscript.csを上書き保存。
Visual Studio Community を終了。
　↓
{ Unity をアクティブウインドウにする }
　↓File⇒Save
File⇒Exit
　↓
{ Unity Hub をアクティブウインドウにする}
　↓上記で作成したプロジェクトをクリックしてUnityを再度起動。
　↓
{ Unity 起動 }
　↓Edit⇒PlayUnityを再起動しないと、
当方の環境での話なのかもしれませんが、
Input Manager の動作が何故かもっさりしてしまいます。


