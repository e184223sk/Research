More than 1 year has passed since last update.この記事では、ASP.NET MVC5のプロジェクトにて、
Entity Data Modelを利用してデータベース(SQL Server)と接続。
最終的に以前、こちらの記事で作成したログイン画面の認証を固定値でなく、データベース接続して認証する方式に修正する方法をまとめてあります。・Visual Studio Community 2019
こちらでダウンロード可能です。(無料)・SQL Server 2019 Developer エディション
こちらでダウンロード可能です。(無料)こちらの記事で作成したログイン機能のプロジェクトを使用して解説していきます。今回は、Microsoft SQL Server でデータベースを作成して、ユーザーマスタ(M_USER)を作成します。
SQL Serverのインストールに関しては、ここでは割愛します。SQL Server上で、以下のSQLを実行してください。データベースの環境構築ができたら、プロジェクト上でADO.NET Enitiy Data Modelを追加して、
データベースの情報をマッピングする為のEDMを作成します。まずはEDMファイルを格納する為のフォルダをプロジェクト内に追加します。
ここではDALというフォルダを追加しました。追加したフォルダを右クリック→「追加」⇒「新しい項目」を選択します。追加する項目を選択する画面が開くので、「データ」内にある「ADO.NET Entity Data Model」を選択します。続いてEntity Data Modelウィザードが起動されます。
まずは「モデルに含めるコンテンツ」の設定です。
Modelには「EF Designer」で作成する方法と、「Code First」で作成する方法の2種類ありますが、
今回は「EF Designer」の方法で「データベースからEF Designer」を選択します。次にデータ接続する設定になりますが、
先ほど環境構築で作成したデータベースを選択後、
作成するエンティティの名前も決められますが、ここではデフォルト通りに進みます。データベースの設定が完了すると、
マッピングする対象のモデル（テーブル、ビュー、ストアドプロシージャなど）を選択する画面が表示されます。
ここではユーザーマスタ(M_USER)を選択します。
モデルの名前空間も設定できますが、ここではデフォルトのままにします。EDMファイルでデザイナー上で編集すると以下のダイアログが表示される事がありますが、「OK」で問題ありません。
※何度も表示されると面倒なので、ここでは「今後このメッセージを表示しない」のをつけました。その後、EDMファイルが作成され、
EDMファイルを選択すると、以下のようなデザイナー画面が表示されます。また、作成したModel1.edmx内のModel1.tt内にM_USER.csが作成されている事を確認できるはずです。EDMファイルを作成したので、ログイン処理のプログラムを修正します。まずはEDMファイルを格納したDALフォルダへ参照する為、2行目にusingを追加、
データベースからデータを取得する際の技術であるLINQを使用する為のusingを3行目で追加しています。29行目から37行目でログイン処理を
前回のハードコーディングからユーザーマスタ(M_USER)の認証に修正しています。
LINQのAnyメソッドで、入力したユーザーID、パスワードに一致したデータが、ユーザーマスタ(M_USER)に存在するかチェック。
存在する場合はtrueが返します。※元のソースコードを見たい方は、こちらの記事を参照ください。さぁ 早速実行してみましょう！【実行結果】ユーザーマスタ(M_USER)に追加したtest_userで無事にログインができました！ということで
今回はEntity  Data Modelを利用してデータベース接続する方法をご紹介しました。自分でデータベース接続するクラスを作成する方法もありますが、
この方法でデータベース接続すると、新規テーブル作成やテーブルのカラム追加時に
マッピングするモデルのソースを簡単に自動生成できるので、
初心者の方にはおすすめです！


