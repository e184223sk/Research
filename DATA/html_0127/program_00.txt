
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;


namespace Qiita_WPF
{
    /// &lt;summary&gt;
    /// MainWindow.xaml の相互作用ロジック
    /// &lt;/summary&gt;
    public partial class MainWindow : Window
    {
        bool max = false;
        double bTop;
        double bLeft;
        double bWidth;
        double bHeight;
        bool isMax=false;
        public MainWindow()
        {
            InitializeComponent();

            wMove.MouseLeftButtonDown += ThisDragMove;
            wCls.Click += (o, e) =&gt; this.Close();
            wSzcg.Click += WindowSizeChange;
            wMin.Click += (o, e) =&gt; WindowState = WindowState.Minimized;


            WindowState = WindowState.Normal;
            this.SizeChanged += wSizeChanged;
        }
        void ThisDragMove(object o, MouseButtonEventArgs e)
        {
            if (isMax)
            {
                int x = System.Windows.Forms.Cursor.Position.X;
                int y = System.Windows.Forms.Cursor.Position.Y;
                double xm = e.GetPosition((Canvas)o).X;
                double ym = e.GetPosition((Canvas)o).Y;

                sizeChenge();
                double w = this.Width;
                this.Left = x - (w / SystemParameters.WorkArea.Width) * xm;
                this.Top = y - ym;
                max = false;
            }
            DragMove();
            if (this.WindowState == WindowState.Maximized)
            {
                WindowState = WindowState.Normal;
                sizeChenge();
                max = true;
            }
        }
        private void wSizeChanged(object sender, SizeChangedEventArgs e)
        {
            wMove.Width = this.Width - 135;
        }
        private void WindowSizeChange(object sender, RoutedEventArgs e)
        {
            sizeChenge();
        }
        void sizeChenge()
        {
            if (!isMax)
            {
                System.Windows.Forms.Screen s1=null;
                foreach (System.Windows.Forms.Screen s in System.Windows.Forms.Screen.AllScreens)
                {

                    if(Top&gt;=s.WorkingArea.Top&amp;&amp; Top &lt;= s.WorkingArea.Top + s.WorkingArea.Height &amp;&amp; Left &gt;= s.WorkingArea.Left &amp;&amp; Left &lt;= s.WorkingArea.Left + s.WorkingArea.Width)
                    {
                        s1 = s;
                        break;
                    }

                }
                if (s1 == null)
                {
                    return;
                }

                bTop = Top;
                bLeft = Left;
                bWidth = Width;
                bHeight = Height;
                Top = s1.WorkingArea.Top;
                Left = s1.WorkingArea.Left;

                Width = s1.WorkingArea.Width;
                Height = s1.WorkingArea.Height;
                isMax = true;
            }
            else
            {
                Top = bTop;
                Left = bLeft;
                Width = bWidth;
                Height = bHeight;
                isMax = false;
            }
        }
    }
}


