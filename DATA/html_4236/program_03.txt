
public class Option
{
    public string Type { get; set; }
    public string Value { get; set; }
    public int ValueInt { get; set; }
    public List&lt;string&gt; Values { get; set; }
    public bool IsOptionsDoubleQuot { get; set; }
    public Dictionary&lt;string, string&gt; Options { get; set; }

    public Option(string type, string value)
    {
        Type = type;
        Value = value;
    }

    public Option(string type, int valueInt)
    {
        Type = type;
        ValueInt = valueInt;
    }

    public Option(string type, List&lt;string&gt; values)
    {
        Type = type;
        Values = values;
    }

    public Option(string type, Dictionary&lt;string, string&gt; options, bool isOptionsDoubleQuot = true)
    {
        Type = type;
        Options = options;
        IsOptionsDoubleQuot = isOptionsDoubleQuot;
    }

    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("\"");
        sb.Append(Type);
        sb.Append("\": ");

        if (Values != null)
        {
            sb.Append("[");
            sb.Append(string.Join(",", Values.Select(x =&gt; $"\"{x}\"")));
            sb.Append("]");
        }
        else if (Value != null)
        {
            sb.Append($"\"{Value}\"");
        }
        else if (Options != null)
        {
            sb.Append("{");
            if (IsOptionsDoubleQuot)
            {
                sb.Append(string.Join(",", Options.Select(x =&gt; $"\"{x.Key}\": \"{x.Value}\"")));
            }
            else
            {
                sb.Append(string.Join(",", Options.Select(x =&gt; $"\"{x.Key}\": {x.Value}")));
            }
            sb.Append("}");
        }
        else
        {
            sb.Append(ValueInt);
        }

        return sb.ToString();
    }
}

