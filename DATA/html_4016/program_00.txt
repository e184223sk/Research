using System.Linq;
using System.Windows;
using System.Windows.Interactivity;

namespace Sample {
    public class StyleBehaviorCollection : FreezableCollection&lt;Behavior&gt; {
        public static readonly DependencyProperty StyleBehaviorsProperty 
            = DependencyProperty.RegisterAttached(
                "StyleBehaviors",
                typeof(StyleBehaviorCollection),
                typeof(StyleBehaviorCollection),
                new PropertyMetadata(StyleBehaviors_PropertyChanged));

        public static StyleBehaviorCollection GetStyleBehaviors(DependencyObject obj)
            =&gt; (StyleBehaviorCollection)obj.GetValue(StyleBehaviorsProperty);

        public static void SetStyleBehaviors(DependencyObject obj, StyleBehaviorCollection value)
            =&gt; obj.SetValue(StyleBehaviorsProperty, value);

        protected override Freezable CreateInstanceCore()
            =&gt; new StyleBehaviorCollection();

        private static void StyleBehaviors_PropertyChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e) {
            if (e.OldValue == e.NewValue)
                return;

            var value = e.NewValue as StyleBehaviorCollection;
            if (value == null)
                return;

            var behaviors = Interaction.GetBehaviors(sender);
            behaviors.Clear();
            foreach (var b in value.Select(x =&gt; (Behavior)x.Clone())) {
                behaviors.Add(b);
            }
        }
    }
}

