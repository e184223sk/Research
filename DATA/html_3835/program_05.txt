
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class SwitchWall : Block
{

    public bool EnabledStart;
    public ParticleSystem[] WallMovers;
    public GameObject BreakEffect;

    private bool isEnabled = true;

    public ParticleSystem EnergyBall;
    private Vector3 oldPos;

    protected override void Init()
    {
        base.Init();

        sotype = SOType.SwitchWall;

        if (EnabledStart == true)
            SetEnabled(true);
        else
            SetEnabled(false);

        isEnabled = EnabledStart;
    }

    public void ClearLineEffect()
    {
        EnergyBall.gameObject.SetActive(false);
        if (isEnabled)
        {
            EnergyBall.gameObject.SetActive(true);
        }
    }

    /// &lt;summary&gt;
    /// Sets the stats.
    /// &lt;/summary&gt;
    /// &lt;param name="stats"&gt;[0] (0:非表示, 1:表示)状態からスタート&lt;/param&gt;
    public override void SetStats(int[] stats)
    {
        base.SetStats(stats);

        if (stats.Length == 0)
        {
            return;
        }

        switch (stats[0])
        {
            case 0:
                EnabledStart = false;
                break;
            case 1:
                EnabledStart = true;
                break;
            default:
                Debug.Log("Invalid number");
                break;
        }
    }

    private GameObject break_effect;

    //壁を消したり現れたりします
    public void SwitchEnabled()
    {
        isEnabled = !isEnabled;
        if (isEnabled)
        {
            gameObject.GetComponent&lt;BoxCollider2D&gt;().enabled = true;
            gameObject.GetComponent&lt;ParticleSystem&gt;().Play();

            for (int i = 0; i &lt; transform.childCount; i++)
                transform.GetChild(i).gameObject.SetActive(true);
            //destroy effect
            Destroy(break_effect);
        }
        else
        {
            gameObject.GetComponent&lt;BoxCollider2D&gt;().enabled = false;
            gameObject.GetComponent&lt;ParticleSystem&gt;().Stop();
            for (int i = 0; i &lt; transform.childCount; i++)
                transform.GetChild(i).gameObject.SetActive(false);

            //Effect
            break_effect = Instantiate(BreakEffect, transform.position, Quaternion.identity, transform);
            break_effect.GetComponent&lt;particleAttractorMove&gt;().target = SOManager
                .FindStageObject(transform.parent.gameObject, SOType.SwitchWallButton).transform;
        }
    }

    //壁を出現させます
    public void SetEnabled(bool state)
    {
        gameObject.GetComponent&lt;BoxCollider2D&gt;().enabled = state;
        for (int i = 0; i &lt; transform.childCount; i++)
            transform.GetChild(i).gameObject.SetActive(state);
        switch (state)
        {
            case true:
                gameObject.GetComponent&lt;ParticleSystem&gt;().Play();
                break;
            case false:
                gameObject.GetComponent&lt;ParticleSystem&gt;().Stop();
                break;
        }
    }

    public bool GetEnabled()
    {
        return isEnabled;
    }
}

