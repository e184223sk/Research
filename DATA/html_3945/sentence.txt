More than 1 year has passed since last update.OpenCVとUnity組み合わせて遊ぶと楽しいぞという気持ちをツイッターで頻繁に目にしていたある日、OpenCV plus Unityが無料になっていることに気づいてダウンロードしてみました。OpenCV#、OpenCVfor、OpenCVplusとOpenCV系のアセット結構多いし価格帯も違ってて意味わからんので誰かまとめてください…学生に全部買うお金はないです。
↓選べる松竹梅みたくなってるけど何が違うのかは正直謎です。ジェネリック医薬品的なやつなのかな…？
OpenCVplusに関してはあんまり知見がないのでとりあえず画像処理100本ノックの最初の方の問題でもやりながら使い勝手を確認してみます。まず、OpenCV plus Unityをダウンロードしてプロジェクトにインポートします。パッケージをUnityに入れると「Unsafeコードは使えないよ！！！」的なエラーが出てくると思います。C#でもポインタをいじいじできるようにUnsafeなコードを許可してあげましょう。最近はC#でもポインタを使おう界隈が強いですね。(多分ECS、Jobシステムとかを最適に活用するのにポインタの方がいいみたいなアレだと思います。知らんけど)
File&gt;BuildSettings&gt;PlayerSettingsを開いてOtherSettingsの"Allow 'unsafe' Code"の部分にチェックを入れます。

コレでエラーも消えるハズです。OpenCV plus Unityで検索しても公式のリファレンス以外で良さげな知見が少なく、非常に困りました。
OpenCV plus Unity自体がOpenCVをC#で使えるようにしたOpenCVSharpを踏まえて作っているみたいなのでこちらのワードで検索すると知見が結構見つかります。参考にしてください。早速やっていきましょう。詳しい情報を知りたいときは画像処理100本ノックを見ましょう。いい問題集を作って戴きありがとうございます。
下に書いてあるプログラムはこちらに公開しておきます。まずは入力と出力の方法を決めましょう。インスペクタからTexture2Dを取得してそれをOpenCVのMatに変換します。MatからTexture2Dに変換してUGUIのRawImageのtextureにブチ込みます。デフォルトでRGBの各要素を入れ替える関数があるのでそれを利用しましょう。Cv2.
Cv2.CvtColor(変換対象,変換後の代入先,変換方法)Q01と同じ手法でRGBをグレースケールに変換する関数があるのですが、それに頼ってばっかりなのもナンセンスなのでちゃんと１ピクセルごとに処理してみます。各ピクセルのRGB値を取得してグレースケールの変換ルールにしたがって変換します。グレースケールなのでR=G=Bになります。処理する際にvector3やらvec3fやらを使うとUnityが爆発するので注意(多分メモリリークか何か)。vec3bを使ってbytes型で処理するとうまくいきます。注目して欲しいのはこの部分です。vec3b v = mat.At&lt;Vec3b&gt;(yi,xi)で該当ピクセルのBGR(この順番なことに注意！)をbytes型３次元ベクトルで取得しています。
mat.set&lt;Vec3b&gt;(yi,xi,v)で該当ピクセルのBGRをbytes型３次元ベクトルvと設定することができます。代入時にbytesを処理することを忘れないようにしましょう。RGBをグレースケールで取得した後に閾値より大きいか小さいかで黒にするか白にするか決めます。Q2ができれば特に問題はないはず。
Q03では閾値が一定に定められていましたが、本問題では閾値が画像の明暗の度合いからいい感じに定められます。つまり暗めの画像だからって真っ黒になったり白めだからって真っ白になったりしません。
RBGをHue,Saturation,Valueに変換してHueを変更してRGBに戻すことをします。感覚としてはデカルト座標→極座標→デカルト座標って感じのノリな気がします。色の解像度を変更します。RGB各要素について一定の区間内の数値をある数値を一つの数値にします。
今回はRGBそれぞれ256の数値を取れていたのを、4種類の数値で表すように変更する処理を施しています。ピクセルをある程度のチャンクに固めてチャンク内の色の平均値で塗りつぶします。ドット絵っぽくなります。(ドット絵ではない(ドット絵警察))塗りつぶす色をチャンク内平均じゃなくてチャンク内の最高値を用いるプーリングです。画像のノイズを除去する手法の一つで、周辺のピクセルの色の重み付き平均を用いて該当ピクセルを塗りつぶします。
本問題のように周辺ピクセルの情報を利用する処理を用いる際は端っこのピクセルを例外的に処理することを忘れないようにしましょう。重たい…処理に10秒ぐらいかかります。愚直計算したのは誤りだったみたいです。どこがボトルネックなんだろう…
因みにGaussianフィルタはOpenCVにデフォルトで実装されています。面倒な実装が一行で済む上に処理速度もこっちの方が早いです。↓比較画像。左が自前実装、右がデフォルト関数です。若干ブラーの入り方に違いがあるのがわかります。
画像のノイズを除去する手法の一つで、周辺のピクセルの色の中央値を用いて該当ピクセルを塗りつぶします。コレも重たいですね…デフォルトで実装されている関数があるのでこれを利用させていただきましょう。↓比較画像。左が自前実装、右がデフォルト関数です。
わかりやすいドキュメントがなくて大変でした。Unityで画像処理をやってみたい人は触ってみる価値がありそうです。今なら無料ですし。
Unityでやる意味あった？


