More than 1 year has passed since last update.ラズパイ（Raspberry Pi Zero WH）を利用して、Windows PCからの命令によって家の照明器具をオンオフできるデバイスを作りました。
全体の構成は以下のような感じです。
意外とC#でもスマートデバイスの作成ができるんだということを知っていただければと思います。

ほぼC#しか触ったことがなく、ラズパイやサーバの知識がほとんどない状態で様々なサイトの情報を頼りに構築してみました。
自分が取り組んだ順番に、システムの設計をお話していこうと思います。最初の目標として、「家電を赤外線通信によって操作するデバイス」を作成することを考えました。
そのような条件を満たすようなデバイスの構成を考えていたところ、このようなサイトが見つかりました。
格安スマートリモコンの作り方スマートリモコンを1から作る方法について、必要な部品からすべて解説されている素晴らしい記事でした。
これを参考に部品を調達し、記事で挙げられている赤外線送信・受信のサンプルが実行できることを確認しました。
このプログラムをラズパイの外部から起動させることが今回の目的です。以後の作業を快適にするために、ラズパイの操作をWindows PC上で行えるように、ssh接続の有効化を行いました。
Windows 10からRaspberry PiにSSH接続してみる（公開鍵認証）また、C#でコーディングを行ったアプリケーションをラズパイに転送するために、ファイルサーバ化を行いました。
Raspberry Piを使ってファイルサーバーを立てるssh接続は特に問題なく行えましたが、Sambaをインストールしファイルサーバを構築するのに非常にてこずりました。
そもそもWindows上でラズパイが見つからない、、、DNSサーバでは存在が確認できるけどWindows PCからの接続が拒否される、、、などなど。そんな中で、何が問題なのかを解決するのに、こちらのサイトが非常に参考になりました。
日本 Samba ユーザ会-Sambaが動作しないときの診断方法問題になりそうな部分をpingから順に非常に丁寧に解説されており、どこでエラーが起こっているかを細かく確認することができました。
結局、エラーの原因は大きく
1. smb.confの設定ミス
2. Windows側のセキュリティ設定
でした。特にWindows側のセキュリティはWindows10になってから強固になっており、それに対する対応に苦労しました。結果的には
1. SMB1.0の有効化
2. 資格情報マネージャにユーザ名・パスワードを登録する（参考：Win 10 で共有フォルダーにアクセスできなかった件）
3. （2の代わりに）レジストリの設定を変更し、アクセス権限無しでも接続可能にする（参考：NASに接続できない！原因はSMB1.0ではなかった！）3の方法は楽ですがセキュリティリスクがあるので、自分は原因確認として一時的に設定を変更し、これが問題であることを確認したうえで2を行いました。.Netで作成されたアプリケーションでもラズパイのGPIOは操作できるらしいですが、#1で利用したPythonアプリケーションで所望の動作が実現できることを確認できたのでPythonアプリケーションをC#から実行することにしました。こんな感じのコードを書きました。コード中のPYTHON_INTERPRITERはpythonのインタプリタが存在しているアドレスです。で確認できます。
ARGUMENTSはコマンドの引数で、#1のアプリを実行したい場合、python3 irrp.py -r -g18 -f codes light:on --no-confirm --post 130と書けば大丈夫です。.NETアプリケーションをラズパイ上で実行するためには、Monoのインストールが必要です。これでMonoをインストールした後なら、.NETアプリケーションをのように起動することができます。一般的なIoTデバイスに近いような仕様にしたかったので、Google Homeでも使われるGoogle IoT Coreのドキュメントを確認してみました。
Google Cloud IoT Core documentationあまり詳しく確認していませんが、どうやらHTTPとMQTTという通信プロトコルでやり取りができそうです。
MQTTというのはIBMが開発したIoTデバイスの通信規格で、メッセージを多対多でやり取りするのに優れているそうです。
IoT開発未経験者向け！ IoTで注目を浴びるプロトコル、MQTTとは？今回はMQTTを利用します。
MQTTはCやJava、Pythonなど多くの言語で実装されていますが、C#で利用するためにはM2Mqttというラッパーを利用します。
C# (.net) で使える MQTT クライアントMQTTはメッセージをやり取りするためにサーバを立てる必要があります。
今回はCloudMQTTという外部サーバを利用しました。無料で5台まで接続できる上、自分で建てるわけではないのでセキュリティリスクも少なくとても便利です。こんな感じで初期化処理を行います。
ApplicationIDは各デバイスにユニークなもので、Guidクラスが便利です。
プロトコルとセキュリティ設定はよくわかりませんが、このような形にしたところうまくいきました。受信側はこのように受信時のイベントハンドラを設定し、どのトピックを購読するかを指定します。送信側は初期化処理の後以下のようなスクリプトを1行書くだけでメッセージが送信できました。送受信はバイナリでやり取りをしますが、Jsonからデシリアライズ・シリアライズしました。
このコードを持つアプリケーションをWindows PC側、ラズパイ側双方に入れ、実行することでリモートでメッセージをやり取りできました。
一応双方のコードをのせておきます。送受信データは以下のようなstringとenumの2情報から構成されます。
enumのシリアライズ・デシリアライズは少々処理が複雑になりますが、その処理について、今回は本題ではないのでここでは省きます。スクリプトを読んでいただければすぐわかりますが、Client側のコンソールアプリケーションでrecordまたはplaybackと入力し、その後その赤外線メッセージのタイトルを入力することで命令の登録・実行ができます。今回はC#によるコーディングのみでラズパイを用いたスマートリモコンを作成してみました。
あまりにもサーバやラズパイに関する知識がなかったのでC#で書きましたが、ほかの言語での実装にもチャレンジしてみたいです。
ラズパイ側のコードをラズパイ起動時に実行させるようにすればPlug-To-Playにもなりそうです。また、今回MQTTというプロトコルを初めて勉強しましたが、これを利用してAlexaやGoogle Homeといったスマートアシスタントとの連携にもチャレンジしてみたいと思っています。C#で作ってみたので、Unityにも容易に持ち込めるのでそことの連携もいろいろできそうです。


