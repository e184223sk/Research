using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class DrawLineUI : MonoBehaviour
{
    [SerializeField] private Material lineMaterial;  // 線に使うマテリアル
    [SerializeField] private Color lineColor;   // 線の色
    [SerializeField] private float lineWidth;    // 線の太さ
    [SerializeField] private List&lt;GameObject&gt; objList;    
    [SerializeField] private List&lt;Vector2&gt; positionObjList;

    // 追加されたゲームオブジェクトのリスト
    private List&lt;GameObject&gt; addGameObjectList = new List&lt;GameObject&gt;();

    void Start () 
    {
        DrawLine();
    }

    private void DrawLine()
    {
        List&lt;Vector3&gt; positionList = new List&lt;Vector3&gt;();
        positionList = StoringVector2ToVector3(positionObjList);
        for(int index = 0;index &lt; positionObjList.Count - 1;++index)
        {
            CreateLine(positionObjList,index);
        }
    }

    // Vector2のリストを持ってきて、SetActiveを確認しながらCreateLineに使うListに格納していく
    private List&lt;Vector3&gt; StoringVector2ToVector3(List&lt;Vector2&gt; positionObjList)
    {
        List&lt;Vector3&gt; positionList = new List&lt;Vector3&gt;();
        for(int index=0;index&lt;positionObjList.Count;++index)
        {
             if(objList[index].active == false)
             {   //gameObjectが設定されていない場合に飛ばす
                 continue;
             }
         }
        positionObjList.Add(positionList[index]);

        return positionObjList;
    }

    // 新しいオブジェクトを作ってLineRenderともろもろの設定を突っ込むとこ
    private void CreateLine(List&lt;Vector3&gt; vec3List, int indexNum)
    {
        List&lt;Vector3&gt; myPoint = new List&lt;Vector3&gt;();    // LineRendererのPositionを設定するのに使用
        for(int idx = 0; idx &lt; 2; idx++) 
        {
            myPoint.Add(new Vector3(vec3List[indexNum + idx].x, vec3List[indexNum + idx].y, 0.0f));
        }
        // 生成するオブジェクト名
        GameObject newLine = new GameObject ("Line"+addGameObjectList.Count);   
        addGameObjectList.Add(newLine);
        LineRenderer lineRenderer = newLine.AddComponent&lt;LineRenderer&gt; ();
        lineRenderer.useWorldSpace = false;
        lineRenderer.SetVertexCount(2);
        lineRenderer.SetWidth (lineWidth, lineWidth);
        lineRenderer.SetColors(lineColor,lineColor);    // 色の設定
        if(lineMaterial != null)
        {
            lineRenderer.material = lineMaterial;
        }
        Vector3 startVec = myPoint[0];
        Vector3 endVec   = myPoint[1];
        lineRenderer.numCapVertices = 90;
        lineRenderer.SetPosition (0, startVec);
        lineRenderer.SetPosition (1, endVec);
    } 
}


