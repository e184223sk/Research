　作りながら得た知識の備忘録なので、一部不正確な情報があるかもしれません。本記事の内容をうのみにするのではなく、API開発者のドキュメントを確認するようお願いします。なお本記事は1から作ってみよう！といった内容ではなく、APIの解説寄りになっています。
　感想、指摘等コメントお待ちしております。　Discordを使う上でロールの変更など、手動でやるのは面倒な操作がありますよね。そんな時はプログラムに働いてもらいましょう！
　こちらのDeveloper PortalからBotを簡単に作成できます。詳細の手順が気になる場合は、他の方の記事を確認してみてください。　Discord Botを作るためのAPIは様々なものが公開されています。Discord.pyやDiscord.jsがとくに有名なようです。
　今回はMicrosoftの.NETで動くDiscord.Netを採用することにします。理由は私が.NET好きだというのと、Linqなど扱いやすいライブラリが多い(個人差あり)からです。
　ちなみに同じく.NET用APIでDSharpPlusというものも公開されています。　Visual Studio 2019で.NET Frameworkもしくは.NET Coreのコンソールアプリケーション用プロジェクトを作成します。本記事執筆時点でフレームワークのバージョンは.NET Core 3.1を採用しています。
　Discord.NETのライブラリはNuGetから落とせます。NuGetパッケージマネージャーを開き、Discord.NetとMicrosoft.Extensions.DependencyInjectionをプロジェクトにインポートします。　Botを動かすために必要なものは大きく分けて3種類あります。順を追って説明していきます。　Discord.WebSocket.DiscordSocketClientクラスはユーザーとしての基本機能を提供します。基本的にこのクラスのインスタンスを通してBot自身への操作をしていくことになります。　Discord.Commands.CommandServiceクラスは後述するコマンド群を管理するために使用されます。コマンドの登録はDependency Injection(依存性注入)を利用して自動で行われます。　Dependency Injectionによってコマンドを登録、取得するために使用されます。　これらをコードにすると以下のようになります。　クライアントにはメッセージ受信時をはじめ、様々なタイミングで呼ばれるイベントが実装されています。ここに処理を登録することでBotに固有の処理をさせることができます。　Discord.Commands.ModuleBaseを継承したクラスにメソッドを追加することで、独自のコマンドを実装することができます。　引数付きのコマンドを作成する場合は以下のようにします。　一部API機能の使用にはDiscord Gateway Intentを有効にする必要があります。例えば上記のコマンド例で使用した、ユーザーリストを取得するメソッドを有効化するには、これらのインテントを有効化が必要です。
　Discord Developer Portalの個別アプリケーションのページから設定を操作できます。　コマンドの登録のために使用しているDependency Injection(依存性注入)は、クラス間の依存関係を疎結合にし、単体テストをしやすくするためにしばしば使われます。詳細はDependency Injectionについてまとめている記事をご確認ください。


