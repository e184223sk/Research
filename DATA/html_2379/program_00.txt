
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using System.Runtime.Serialization.Json;
using System.Windows;
using System.Windows.Markup;
using System.Xml;
using System.Xml.Serialization;

namespace Serializers
{
    public static class XLizer
    {
        /// &lt;summary&gt;
        /// &lt;see cref="XmlWriter"/&gt; のネームスペース設定
        /// &lt;/summary&gt;
        private static XmlSerializerNamespaces xmlWriterEmptyNameSpace { get { var empty = new XmlSerializerNamespaces(); empty.Add("", ""); return empty; } }

        /// &lt;summary&gt;
        /// &lt;see cref="XmlWriter"/&gt; のシリアライズ設定
        /// &lt;/summary&gt;
        private static XmlWriterSettings xmlWriterSettings { get { return new XmlWriterSettings { Indent = true }; } }

        /// &lt;summary&gt;
        /// &lt;see cref="XmlReader"/&gt; のデシリアライズ設定
        /// &lt;/summary&gt;
        private static XmlReaderSettings xmlReaderSettings { get { return new XmlReaderSettings { CheckCharacters = false }; } }

        /// &lt;summary&gt;
        /// &lt;see cref="DataContractJsonSerializer"/&gt; のシリアライズ設定
        /// &lt;/summary&gt;
        //private static DataContractJsonSerializerSettings dataContractJsonSerializerSettings { get { return new DataContractJsonSerializerSettings { }; } }

        /// &lt;summary&gt;
        /// &lt;para&gt;&lt;see cref="XmlSerializer"/&gt; を使用して &lt;see cref="object"/&gt; をシリアライズします。&lt;/para&gt;
        /// &lt;/summary&gt;
        public static bool XmlSerialize&lt;T&gt;(string filePath, T dataObject)
        {
            try {

                using XmlWriter xmlWriter =
                    XmlWriter.Create(
                        filePath,
                        xmlWriterSettings);

                XmlSerializer xmlSerializer =
                    new XmlSerializer(
                        typeof(T));

                xmlSerializer.Serialize(
                    xmlWriter,
                    dataObject,
                    xmlWriterEmptyNameSpace);

            } catch {
                return false;
            }
            return true;
        }

        /// &lt;summary&gt;
        /// &lt;para&gt;&lt;see cref="XmlSerializer"/&gt; を使用して &lt;see cref="object"/&gt; をデシリアライズします。&lt;/para&gt;
        /// &lt;/summary&gt;
        public static bool XmlDeserialize&lt;T&gt;(string filePath, out T dataObject)
        {
            try {

                using XmlReader xmlReader =
                    XmlReader.Create(
                        filePath,
                        xmlReaderSettings);

                XmlSerializer xmlSerializer =
                    new XmlSerializer(
                        typeof(T));

                var obj =
                    xmlSerializer.Deserialize(
                        xmlReader);

                dataObject = (T)obj;

            } catch {
                dataObject = default;
                return false;
            }
            return true;
        }

        /// &lt;summary&gt;
        /// &lt;para&gt;&lt;see cref="BinaryFormatter"/&gt; を使用して &lt;see cref="object"/&gt; をシリアライズします。&lt;/para&gt;
        /// &lt;code&gt;
        ///     &lt;para&gt;[&lt;see cref="Serializable"/&gt;]&lt;/para&gt;
        ///     &lt;para&gt;class MyClass { ... }&lt;/para&gt;
        /// &lt;/code&gt;
        /// &lt;/summary&gt;
        public static bool BinarySerialize&lt;T&gt;(string filePath, T dataObject)
        {
            try {

                using FileStream fileStream =
                    new FileStream(
                        filePath,
                        FileMode.Create);

                BinaryFormatter binaryFormatter =
                    new BinaryFormatter();

                binaryFormatter.Serialize(
                    fileStream,
                    dataObject);

            } catch {
                return false;
            }
            return true;
        }

        /// &lt;summary&gt;
        /// &lt;para&gt;&lt;see cref="BinaryFormatter"/&gt; を使用して &lt;see cref="object"/&gt; をデシリアライズします。&lt;/para&gt;
        /// &lt;/summary&gt;
        public static bool BinaryDeserialize&lt;T&gt;(string filePath, out T dataObject)
        {
            try {

                using FileStream fileStream =
                    new FileStream(
                        filePath,
                        FileMode.Open);

                BinaryFormatter binaryFormatter =
                    new BinaryFormatter();

                var obj =
                    binaryFormatter.Deserialize(
                        fileStream);

                dataObject = (T)obj;

            } catch {
                dataObject = default;
                return false;
            }
            return true;
        }

        /// &lt;summary&gt;
        /// &lt;para&gt;&lt;see cref="DataContractSerializer"/&gt; を使用して &lt;see cref="object"/&gt; をシリアライズします。&lt;/para&gt;
        /// &lt;code&gt;
        ///     &lt;para&gt;[&lt;see cref="DataContract"/&gt;]&lt;/para&gt;
        ///     &lt;para&gt;class MyClass { ... }&lt;/para&gt;
        /// &lt;/code&gt;
        /// &lt;code&gt;
        ///     &lt;para&gt;[&lt;see cref="DataMember"/&gt;]&lt;/para&gt;
        ///     &lt;para&gt;string Field { ... }&lt;/para&gt;
        /// &lt;/code&gt;
        /// &lt;/summary&gt;
        public static bool DataContractSerialize&lt;T&gt;(string filePath, T dataObject)
        {
            try {

                using XmlWriter xmlWriter =
                    XmlWriter.Create(
                        filePath,
                        xmlWriterSettings);

                DataContractSerializer dataContractSerializer =
                    new DataContractSerializer(
                        typeof(T));

                dataContractSerializer.WriteObject(
                    xmlWriter,
                    dataObject);

            } catch {
                return false;
            }
            return true;
        }

        /// &lt;summary&gt;
        /// &lt;para&gt;&lt;see cref="DataContractSerializer"/&gt; を使用して &lt;see cref="object"/&gt; をシリアライズします。&lt;/para&gt;
        /// &lt;/summary&gt;
        public static bool DataContractDeserialize&lt;T&gt;(string filePath, out T dataObject)
        {
            try {

                using XmlReader xmlReader =
                    XmlReader.Create(
                        filePath,
                        xmlReaderSettings);

                DataContractSerializer dataContractSerializer =
                    new DataContractSerializer(
                        typeof(T));

                var obj =
                    dataContractSerializer.ReadObject(
                        xmlReader);

                dataObject = (T)obj;

            } catch {
                dataObject = default;
                return false;
            }
            return true;
        }

        /// &lt;summary&gt;
        /// &lt;para&gt;&lt;see cref="DataContractJsonSerializer"/&gt; を使用して &lt;see cref="object"/&gt; をシリアライズします。&lt;/para&gt;
        /// &lt;code&gt;
        ///     &lt;para&gt;[&lt;see cref="DataContract"/&gt;]&lt;/para&gt;
        ///     &lt;para&gt;class MyClass { ... }&lt;/para&gt;
        /// &lt;/code&gt;
        /// &lt;code&gt;
        ///     &lt;para&gt;[&lt;see cref="DataMember"/&gt;]&lt;/para&gt;
        ///     &lt;para&gt;string Field { ... }&lt;/para&gt;
        /// &lt;/code&gt;
        /// &lt;/summary&gt;
        public static bool DataContractJsonSerialize&lt;T&gt;(string filePath, T dataObject)
        {
            try {

                using FileStream fileStream =
                    new FileStream(
                        filePath,
                        FileMode.Create);

                DataContractJsonSerializer dataContractJsonSerializer =
                    new DataContractJsonSerializer(
                        typeof(T));

                dataContractJsonSerializer.WriteObject(
                    fileStream,
                    dataObject);

            } catch {
                return false;
            }
            return true;
        }

        /// &lt;summary&gt;
        /// &lt;para&gt;&lt;see cref="DataContractJsonSerializer"/&gt; を使用して &lt;see cref="object"/&gt; をデシリアライズします。&lt;/para&gt;
        /// &lt;/summary&gt;
        public static bool DataContractJsonDeserialize&lt;T&gt;(string filePath, out T dataObject)
        {
            try {

                using FileStream fileStream =
                    new FileStream(
                        filePath,
                        FileMode.Open);

                DataContractJsonSerializer dataContractJsonSerializer =
                    new DataContractJsonSerializer(
                        typeof(T));

                var obj =
                    dataContractJsonSerializer.ReadObject(
                        fileStream);

                dataObject = (T)obj;

            } catch {
                dataObject = default;
                return false;
            }
            return true;
        }

        /// &lt;summary&gt;
        /// &lt;para&gt;&lt;see cref="XamlWriter"/&gt; を使用して &lt;see cref="UIElement"/&gt; をシリアライズします。&lt;/para&gt;
        /// &lt;/summary&gt;
        public static bool XamlSerialize&lt;T&gt;(string filePath, T uiElement)
        {
            try {

                //string xamlString =
                //    XamlWriter.Save(
                //        uiElement);

                //File.WriteAllText(
                //    filePath,
                //    xamlString);

                using XmlWriter xmlWriter =
                    XmlWriter.Create(
                        filePath,
                        xmlWriterSettings);

                XamlWriter.Save(
                    uiElement,
                    xmlWriter);

            } catch {
                return false;
            }
            return true;
        }

        /// &lt;summary&gt;
        /// &lt;para&gt;&lt;see cref="XamlReader"/&gt; を使用して &lt;see cref="UIElement"/&gt; をデシリアライズします。&lt;/para&gt;
        /// &lt;/summary&gt;
        public static bool XamlDeserialize&lt;T&gt;(string filePath, out T uiElement)
        {
            try {

                //string xamlString =
                //    File.ReadAllText(
                //        filePath);

                //var obj =
                //    XamlReader.Parse(
                //        xamlString);

                //uiElement = (T)obj;

                using XmlReader xmlReader =
                    XmlReader.Create(
                        filePath);

                var obj =
                    XamlReader.Load(
                        xmlReader);

                uiElement = (T)obj;

            } catch {
                uiElement = default;
                return false;
            }
            return true;
        }
    }
}


