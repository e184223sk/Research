More than 1 year has passed since last update.UnityでuGUIを使ってUIを組むやり方として、自分は以下の方法を取っています。この 親→子 という参照方向の一方向化はというメリットがあり、スケールしやすいやり方です。実際Unityに最初から用意されているいくつかのコンポーネントもこのような設計になっています（ScrollRectとか）。ですが、何も考えずにこういう実装をするとという手間が発生します。本エントリではこの問題に対して「非再生中にInspectorから値をいじったとき、どうやったら処理を実行できるか」についての4つの方法を紹介します。一番オススメなのは最後の方法なのでどうぞ最後まで読んでください。MonoBehaviourを継承したコンポーネントにOnValidate()メソッドを定義しておくと、Inspectorから自身の値が変更されたときに自動で呼ばれます。やりたいことが単純な場合はこれで十分なのですが、細かく制御しようとするとフィールドごとに古い値を保存しておいて変更があったらifで判定・処理する、みたいな地獄が始まります。これはScrollRectなどのuGUIコンポーネントで採用されているやり方です。[ExecuteInEditMode]と[ExecuteAlways]はどちらも非再生中にMonoBehaviourのコールバックを呼び出してくれるようにするのですが、という違いがあるようなので[ExecuteAlways]が使えるならそっちを使ったほうが良さそうです。参考：uGUIコンポーネントはBitbucketでソースコードが公開されているので全部読みたい方はこちらからどうぞ。このやり方は「再生時と非再生時で同じコードを使い回せる」というメリットがありますが、[ExecuteAlways]などをつけたときにStart()やUpdate()がいつのタイミングで何回呼ばれるのかを知っていないと思わぬ事故の原因になります。またOnValidate()と同様に変更が起きたものを個別で検知できないので、基本的には「変更が必要なものは無差別にUpdate()で全部更新」みたいな感じになると思います。Odin という有料アセット（$55）には[OnValueChanged]という属性が用意されていて、これを使うとフィールドやプロパティの値の変化を個別で検知して指定したコールバックを実行できます。コガネブログさまで紹介されているので詳細は以下のリンク先をご覧ください。以下にコガネブログさまからコードを引用させていただきます。"OnChanged"とstringで指定しているところはnameof(OnChanged)にするとなお良いと思います。この方法は変更を個別で検知できるのでやりたいことにかなり近いのですが、専用のコールバックメソッドを用意しだすとどんどん数が増えて管理しづらくなる欠点があります。指定したコールバックが呼ばれるのは値の変更後なので、変更前の値が取得できないという問題もあります。一番おすすめのやり方です。Property Backing Field Drawer（リンク先はコガネブログさまの紹介記事）という無料アセットを導入すると使えるようになる[PropertyBackingField]を使用します。フィールドに[PropertyBackingField]を指定すると、Inspectorから値を変更したときにプロパティ（名前でよしなに選ばれる）を経由してくれます。以下の2つのコードはコガネブログさまからの引用です。PropertyBackingField 属性にプロパティ名を指定することで変数を好きなプロパティと紐付けることができますプロパティを経由するので前後の値も参照できます。Property Backing Field Drawerを導入するとScripting Define SymbolsにIS_UNITYEDITOR_ANIMATIONS_AVAILABLEというシンボルが勝手に足されます。特に害はないと思いますが、気になる人はAssets/Plugins/Candlelight/Library/Editor/Utilities/UnityFeatureDefineSymbols.csの34行目[InitializeOnLoad]を消すと足されなくなります1。フィールドに[Range]を指定するとInspectorからの入力値に制限をかけてくれますが、プログラムによる値の変更については機能しないことはご存知でしょうか？「Inspectorからの入力値のみに制限をかけたい」ということは稀で、実際には「再生中のプログラムコードによる値の変更」と「Inspectorからの値の変更」両方に同じバリデーションをかけたいはずです。これは[PropertyBackingField]を使うとシンプルに書けます。元からプロパティを実装してあれば冗長にならないので、Property Backing Field Drawerを使っている人はこちらのバリデーションがおすすめです。[Range],[Min]などは窓から投げ捨てましょう。Inspectorで値を変更したときにコールバックを実行する方法としての4つを紹介しました。状況によりけりですが、基本的には最後のやり方で事足りるのではないかと思います。なお Odin は神アセットなので今開催中のマッドネスセール中に半額の$27.5で購入しておくことをおすすめします2。使い方の多くはコガネブログさまで紹介されているのでそちらを読まれると良いです。また、コガネブログさまで紹介されてる機能がOdinのすべてではないので、Unityエディタ上・エディタ拡張実装で何かしら不便に感じることがあればOdinの公式ドキュメントを漁ってみてください。Unity-&gt;Preferences..-&gt;Candlelight から設定できる項目ではこの挙動を止められません。 ↩リンクはアフィリエイトプログラムとかじゃないので安心してください。 ↩


