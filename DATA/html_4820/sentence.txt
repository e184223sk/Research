More than 3 years have passed since last update.ジェネリック制約について使う機会が多くなったのでこの機会に調べたことを自分なりにまとめようと思います。ジェネリックを使う際に宣言の後ろに[where ジェネリックで使う型 : 制限したい型]をつけることで使える型を制限出来ることです。こうすることによってこのクラスでしか使えないようにしたいとか、このクラスでは使ってほしくないなどの使い方が出来るようになります。・例　ジェネリックの対象をクラスのみにしたい場合簡単にどんなのがあるのかまとめました。詳しい説明は公式ドキュメントに載ってます。型パラメーターの制約
https://docs.microsoft.com/ja-jp/dotnet/csharp/programming-guide/generics/constraints-on-type-parametersジェネリック制約にはいくつかルールがあります・ジェネリックの制限
・アクセスレベルの統一全ての型でジェネリック制約が使えるわけではなく、
一定の型はジェネリック制約で指定できません。
C#のバージョンによっては使えたり使えなかったりするので注意です。公式ドキュメントからの引用
where (ジェネリック型制約) (C# リファレンス)一部の型は、基底クラスの制約として許可されません (Object、Array、ValueType)。 C# 7.3 より前は、Enum、Delegate、MulticastDelegate も基底クラスの制約として許可されていません。 次の例では、この型は基底クラスとして指定できるようになったことを示しています。参考ジェネリックの利点と制限事項
https://msdn.microsoft.com/ja-jp/library/ms172194(v=vs.110).aspxコンパイラ エラー CS0702
https://docs.microsoft.com/ja-jp/dotnet/csharp/language-reference/compiler-messages/cs0702ジェネリック制約を使おうとしてるクラスとジェネリック制約の対象のクラスのアクセスレベルを統一する必要があります。例えば、ジェネリック制約を利用しようとしてるクラスのアクセスレベルがpublicで、ジェネリック制約の対象のクラスのアクセスレベルがprivateだったらコンパイルエラーを起こします。コンパイラ エラー CS0703
https://docs.microsoft.com/ja-jp/dotnet/csharp/language-reference/compiler-messages/cs0703全ての型で使えるわけではない点など、細かい点を押さえれば結構便利な機能だと思いました。
このクラスのみで使用したい、このインターフェースを実装してるクラスのみに使用したいなど
利用するケースは結構あると思っていますので、積極的に使っていきたいですね。


