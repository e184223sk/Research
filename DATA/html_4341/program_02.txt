
public class JwtAuthService : IAuthService {
  /* 中略 */

  public JwtAuthService(MyDbContext myDbContext, IOptions&lt;AppSettings&gt; appSettings, IHostingEnvironment env) {
    this.myDbContext = myDbContext;
    this.appSettings = appSettings.Value;
    // インメモリDB を使うので初回のインスタンス生成時にシードデータを作っておく
    if (env.IsDevelopment() &amp;&amp; !this.myDbContext.Users.Any()) {
      this.myDbContext.Database.EnsureCreated();
    }
  }

  // 認証処理
  AppUser IAuthService.Authenticate(string userName, string password) {
    var foundUser = myDbContext.Users.SingleOrDefault(
      x =&gt; x.UserName == userName &amp;&amp; x.Password == password);
    if (foundUser is null) {
      return null;
    }
    foundUser.Token = GetSerializedToken(foundUser.ID, expiredDay: DateTime.UtcNow.AddDays(7));
    foundUser.Password = null;
    return foundUser;
  }

  // token 発行
  string GetSerializedToken(int id, DateTime expiredDay) {
    var tokenHandler = new JwtSecurityTokenHandler();
    // 秘密鍵
    var key = Encoding.ASCII.GetBytes(appSettings.Secret);
    var tokenDescriptor = new SecurityTokenDescriptor {
      Subject = new ClaimsIdentity(new Claim[] {
        new Claim(ClaimTypes.Name, id.ToString())
      }),
      // 有効期限
      Expires = expiredDay,
      // 署名
      SigningCredentials = new SigningCredentials(
        key: new SymmetricSecurityKey(key),
        algorithm: SecurityAlgorithms.HmacSha256Signature
      )
    };
    var token = tokenHandler.CreateToken(tokenDescriptor);
    var serializedToken = tokenHandler.WriteToken(token);
    return serializedToken;
  }
}

