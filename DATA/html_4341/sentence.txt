More than 1 year has passed since last update.ASP.NET Core Identity が重厚で持て余してしまっていたので、
JSON Web Token（通称JWT）で認証処理を行ってみました。JSON Web Token とは、ざっくりいって署名の出来る JSON を含んだ URL Safe なトークンです。 署名とは、署名時に使った鍵を用いて、JSON が改ざんされていないかをチェック出来るようにすることです。 ... 発行者だけが、鍵を使ってトークンが正しいことを検証出来る。JSON Web Token の効用 - Qiita
https://qiita.com/kaiinui/items/21ec7cc8a1130a1a103a記事では色々略して抜粋を載せますので、ソースは以下のリポジトリでご確認ください。
https://github.com/sano-suguru/NetCoreJwtAuthJSON Web Tokenの発行と認証ができる Web API を作りました。
なるべく基礎から理解したかったので空のプロジェクトから作りました。上記のトークンの発行とユーザー情報を返すメソッドが定義されています。
クラスに[Authorize]アノテーションが付いているのでアクセスにはデフォルトで認証が必要です。
認証トークンを発行するAuthenticateは誰でもアクセスできるように[AllowAnonymous]がついています。ユーザー登録の手間を省くためにOnModelCreatingにフックして最初からユーザーを作るようにしておきます。JSON Web Tokenを発行する認証サービスは以下のように実装しました。
ユーザー名とパスワードでデータベースから検索し一致した場合、JSON Web Tokenを発行します。アプリケーションのサービス構成は以下の通りです。
services.AddAuthentication AuthenticationBuilder.AddJwtBearerで認証オプションの設定を行っています。
オプションの設定は Microsoft Docs の方で検索すると出てくると思うのでそちらをご確認ください。今回は Web API のみ実装しリクエストは POSTMAN で行いました。
実際のウェブアプリではトークンを発行した場合は、ローカルストレージに保存するのが一般的なようです。


