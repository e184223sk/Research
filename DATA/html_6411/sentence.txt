More than 3 years have passed since last update.前回の続きです。今回は具体的なWebBrowserとの比較として、以下の機能の実装方法について検証します。urlmon.dllのUrlMkSetSessionOptionを利用すると実現できます→参考難しいことはないんですがアンマネージドなコードを触るのがちょっともやっとします。CefSharp.Wpf.ChromiumWebBrowserのインスタンスを生成する前に、Cef.Initialize(cefSettings)を呼び出すことでUserAgent等の設定を行うことができます。この関数の引数であるCefSettingsは他にもいろいろ設定できる項目があるので後々検証します。今回はUserAgentを設定したいだけなので、UIスレッドでUserAgentを指定したCefSettingsを使ってCefをInitializeするだけです。ちゃんとUserAgentがCefSampleになってます。WebBrowser.Navigating, WebBrowser.Navigatedイベントがあるので、それぞれ遷移前、遷移後の処理をハンドリングすることができます。また、Navigatingのイベントハンドラに第二引数として渡されるNavigatingCancelEventArgsのCancelプロパティをtrueにしておくことで、遷移をキャンセルさせることができます。ChromiumWebBrowser.FrameLoadStart, ChromiumWebBrowser.FrameLoadEndイベントがあるので、それぞれ遷移開始、遷移後の処理をハンドリングすることができます。ただ、このFrameLoadStartイベントでは遷移をキャンセルすることができず、リクエストの書き換えや遷移のキャンセルを制御するにはChromiumWebBrowser.RequestHandlerプロパティを実装する必要があります。RequestHandlerは多機能なので別途検証を行います（今回は行いません）。みたいなことができます。実際にやりたかったのは"クッキーを削除する"ボタンの実装なので、それをどうやって実現できそうかを見ていきます。Cookieをまとめて削除するような機能はなさそうです（あったら教えてください）。一応アンマネージドなコードを触ってInternetSetOptionでいろいろやれば既存のCookieを無視したブラウザを立ち上げることは可能なのですが、直接消すわけではないので"クッキーを削除する"とは違う挙動になってしまいます。（オプションを無効化して再起動すると前のCookieが残ってる）WebBrowserにはDocumentプロパティが存在して、HTMLにjsを挿入することができるので、そのjsでそのドメインのCookieのExpireをいじることは可能なのですが、すべてのページのCookieを削除することは難しそうです。Cookieを操作するためのCookieManagerクラスが用意されていて、Cef.GetGlobalCookieManager()でCookieManagerを取得することができます。CookieManagerには特定のUrlのCookieを消すためのDeleteCookiesが実装されているので、一つだけ消す場合であればそれを呼べばOKです。複数のドメインのCookieを処理するためにはアプローチを少し変える必要があって、ICookieVisitorを実装したクラスを用意して、そのインスタンスをCookieManagerのVisitAllCookiesに渡す必要があります（VisitUrlCookiesってのもあったのでドメインごとに消すとかも簡単にできそう）。またasyncに処理してくれるVisitAllCookiesAsyncというものもあって、こちらは返り値でCookieのListを返してくれるのですが、返ってきたところでどうやって消せばいいのかはよくわかりませんでした。今回はここまでです。次回はRequestHandlerあたりについて書こうと思います。元記事


