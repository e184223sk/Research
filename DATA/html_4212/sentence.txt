More than 1 year has passed since last update.Microsoft Bot Framework V4が2018年9月末にGAしました。Bot Framework V3で元々ボット開発をしていましたが、GAされたからには最新バージョンで作らねば...ということで手を出しましたが、結構躓きましたorz（V3とV4はもはや別フレームワークw）
まだGAされてから時間があまり経っていないということもあって世の中に情報も少ないので、記事を書かせていただきました。誰かのお役に立てれば幸いです。Bot Framework V4で編集しやすいベースとなるボットを作成してAzureにデプロイ
(タイトル通りですが...)既に投稿されている記事の多くは下記二つの方法が多いです。(2018/12時点)
1. Azure PortalでWeb App Botを作成⇒ソースコードダウンロード⇒ローカルで修正⇒Azureに再デプロイ
2. Visual Studioテンプレートを利用⇒ローカルで修正⇒Azureにデプロイ⇒Azure PortalでBot Channel Registration作成確かにどちらの方法でもボット作成が可能ですが、
1.の方法ではVSプロジェクトやアプリ名が固定されてしまう。
2.の方法ではテンプレート自体を理解することが初心者には厳しい。 
　(ミドルウェア、アクセサーなどの各単語を理解しておく必要あり)
などちょっと扱いづらい部分が多々あり、これをベースにして自分用にカスタマイズするのはちょっと辛いかなと感じています。そこで、ボットは単なるWeb APIアプリケーションのことであるというところを考えて作成していきます。
（この記事ではカスタマイズしやすいボットを作成してデプロイすることが目的なので、ボット自体は簡単なユーザが入力した文字とその文字数を返すボットを作成します。）Visual Studio 2017
dotnet core 2.1
Bot Framework Emulator
Microsoft Azure まず下記の手順でWeb APIプロジェクトを作成します。ここは主に@kenakamuさんの記事を参考にさせていただいています。プロジェクトにStrCountBot.csを追加し、コードを以下のようにするStartup.csのコードを下記に修正以上で、ボットが作成できたので動作を確認してみます。
(なぜこんなコードになるのか気になる人は冒頭で述べたようにこの記事を見てください。非常にわかりやすいです。)ローカルで動作することを確認したのでAzureにデプロイします。
1. プロジェクト名を右クリック、「発行」を選択
2. 発行先を「App Service」を選択し、「詳細設定...」を選択
3. ファイル発行オプションの「発行先の追加オプションを削除する」にチェックマークを付けて保存
4. プロファイルの作成を選択
5. 「アプリ名」「サブスクリプション」「リソースグループ」「ホスティングプラン」「Application Insights」の各項目を入力して作成　(「リソースグループ」「ホスティングプラン」は既存のものがない場合は新規作成しましょう)
6. 作成が完了したら「発行」を選択
以上でAzureにデプロイができました。次は、Bot Serviceへの登録作業になります。Azureにデプロイしたボットを登録します。
1. Azure Portalで「リソースの作成」で「Bot Channels Registration」を作成
2. 「ボット名」「サブスクリプション」「リソースグループ」「場所」「価格レベル」「メッセージングエンドポイント」「Application Insights」「MicrosoftアプリIDとパスワード」の各項目を入力して作成＊「メッセージングエンドポイント」は、https://~.azurewebsites.net/api/messages
3. 作成が完了したら、種類が「ボットチャンネル登録」の項目ができているので選択
4. 「Webチャットでテスト」で動作確認しかし、この画像のようにメッセージが送信できません...これは当然の結果で、Bot Framework Connectorを使用してボットを接続するためには、Bot Framework認証が必要で、作成したボットにはその部分が入っていないためメッセージが送れません。なので、次は認証部分をボットに追加してみましょう。前節で述べたように、Bot Framework Connectorを使用してボットを接続するためにはBot Framework認証が必要となります。これはマイクロソフトアプリケーションとして登録されていることが必要になるのですが、実はBot Channels Registrationを作成した際に既に登録されています。（「MicrosoftアプリIDとパスワード」の部分）Startup.csのコードを下記に修正("アプリケーションID","パスワード"は控えたものを使用)Azureに再デプロイして、「Webチャットでテスト」で動作確認無事メッセージが送れるようになりました！ボットもしっかりと返答しています。これで、ローカルで作成したボットをAzureにデプロイして動作させるところまでの一連の流れができました。今後は、ローカルでコード修正・動作確認して、Azureにデプロイ！という循環を回して自分用にカスタマイズしていきたいところですが、Startup.csに認証部分を実装するだけの修正方法ではこれから開発する上で問題が生じます。
というのも、この実装だとクラウドでは動くのですが、ローカルでは動かなくなりますw (アプリケーション登録しているのはクラウドの方だけなので、ローカルで実行すると認証部分でむしろエラーになります...)
また、IDやPasswordをコードに直接書き込む行為はセキュリティ面からいってあり得ないと思われます。なので、セキュリティに少し配慮しつつ、ローカル／クラウドのどちらでもボットが動くように修正していきます。Bot Framework V4ではボットファイル(.bot)がボットに関わる全ての設定を定義するようになっています。実際にボットをローカルでテストする際にBot Framework Emulatorで作成した.botを見てみると、となっていて、servicesのキーに対する値として、ローカルでテストするときのエンドポイント情報が書き込まれています。現在のコードでは.botを参照せずに実行していますが、Bot Framework V4ではリソース管理をこのボットファイルで行うため、参照して実行するのが普通となります。
なので、.botにクラウドでのエンドポイント情報を追加し、コードに.botを参照すること、また実行環境がローカルかクラウドかを認識させて認証するかしないかの分岐をすることでローカルでもクラウドでも動作できるようになります。その作業をしていきましょう！.botのローカル／クラウドのそれぞれのエンドポイントのnameのキーに対する値をdevelopment/productionにしておく＊"id"は適当な文字列で問題ないです。Bot Framework Emulatorで、.botを開き、歯車のマークを選択「Encrypt keys stored in your bot configuration」にチェックマークを付け、.botを暗号化（Secretキーは控えておきましょう!）＊.botは初めに述べたように、設定を持つファイルなので取り扱いに注意する必要があり、Bot Framework V4では .bot の中のセキュリティに関する値を暗号化する機能があるため、この作業をしています。appsetting.jsonを下記に修正 ("Secretキー"は控えたものを使用)Startup.csを下記に修正＊Microsoft.Bot.Configurationはおそらくないはずなので、「Nugetパッケージの管理」からインストールする必要があります。ローカルで動作することを確認Visual Studio 2017で.botのプロパティで出力ディレクトリにコピーを「常にコピーする」に変更してAzureにデプロイ
Webチャットでテストして動作確認これで、セキュリティに少し配慮しつつ、ローカル／クラウドのどちらでもボットが動くようになりました！ちょっと長くなりましたが、いかがでしたでしょうか？（手順通りやったのにできないとかあったらすみません...）
これで、ローカルでもクラウドでも動くようなベースとなるボットができたので、あとはBot Framework V4について理解を深めるなりして、LUISと連携させたり、ステート管理した対話をさせたりなどカスタマイズしてみてください。


