どうも、ろっさむです。今回は「Unityを使っているなら皆知ってるよね？え？知らないの？なんで？」レベルの機能である「ScriptableObject」についてまとめていこうと思います。
僕は知りませんでした。ゲームやアプリの中で変化せず、あちこちで共用するデータを格納する時に便利なクラスです。例えば、敵のパラメータがよく例として挙げられています。個別のゲームオブジェクト等にアタッチはせず、都度アセットをロードして使用することになります。なので余計なオブジェクトがなく、エンジン側からのコールバックを殆ど受け取りません。敵Aのステータスとして仕様書側でHP100と決まっていた場合、コード上でHPを定義する場合に以下の手法があります（実際パラメータとなるとHPだけじゃなくて色んな情報が入ってきます）。他にもJsonなどで実装できますが、もう一つの手法としてScriptableObjectを知っておくと良いかもしれません。
ScriptableObjectを継承したパラメータ定義用クラスを作成し、Unityのアセットとして扱うことでEnemyAのインスタンスがどれだけ作られてもパラメータの数値等を参照する際にはパラメータ定義用アセットを一つ見ればわかるようになります。また、EnemyAが出現しないマップなど、EnemyAが画面上に出てこない場合はそもそも読み込まなければメモリも確保されません。つまり、無駄にメモリを確保しなくてもよくなるわけですね。また、パラメータ部分だけ別アセットとして用意している状態となるので、コンフリクトもしづらく、値の調整も行いやすくなります。パラメータ調整の他にも表情のblendshapeの名前リストの格納や、UIに使用するテキストデータ等にも使用することができるでしょう。応用すればイベントシステムも作成することができるようです。ScriptableObject自体はUnityエディタでもよく使用されているようなので、使いこなすことができれば様々な恩恵が受けられそうです。また、ScriptableObject は一応ゲーム中に変化するデータを扱う事も出来ますが、実機ではゲームが終了した後にデータは全て初期値に戻るため、セーブデータ的な使い方はできません（イベント期間中のステータスバフなどなら使えるかもしれませんが）。逆にエディタ上で値を変更すると、そのままアセットに直保存されます。「エディタ上で実行中にパラメータ等の値を変更してゲームバランスを調整する」という工程がこの仕様によって非常に楽に進めることができます。具体的には、アセットファイルへの書き込みは AssetDatabaseクラスから行われ、スクリプト側からパラメータ等の値を変更した際には明示的に AssetDatabase の SaveAsset() を呼び出す必要があります。ただ、このSaveAsset()は実機での起動中は呼び出すことができません（UnityEditor.dllへの参照がないため）。このように、マスターデータの更新の頻度がそこまで高くなく、ゲーム内に組み込みたい場合には ScriptableObject は役に立ちます。逆に、ソシャゲのようなマスターデータの更新頻度が高く、チート対策も必要で…という場合にはデータが必要になるタイミングで都度Json形式などでサーバからデータをDLする仕組みの方が安心できます。では実際にどのように作成して、使えば良いのか、というところですが、こちらもそこまで難しくはありません。流れとしてはとなります。
順番に見ていきましょう。こちらは簡単です。ScriptableObjectを派生したクラスを作成していきましょう。もしもパラメータ自体が増えたり、複数種類のパラメータを一つのAssetの中に持ちたい場合には、別途データ用のstructやclasssを用意すると良いでしょう。先ほどのコードであれば、Editor上からAssets &gt; Create &gt; ScriptableObjects &gt; CreasteEnemyParamAssetという項目を押すことでEnemyParamAssetがDataという名前でアセット化されてassetsフォルダに入ります。ただ、もし外部ファイル(json,csv...etc)からパラメータを読み込んでScriptabeObjects側に流し込む場合には、アセット化する機能を持つクラスとScriptableObjects派生クラスで分けて制作していく流れになるかと思います。外部ファイルを読み込んでScriptableObjects側に流し込む方法だと、外部ファイルの値がマスターデータ扱いで、ScriptableObjectはそのマスターデータをゲームに流し込むためのクッション扱いになります。
この方法には以下のメリット・デメリットがあります。メリット：デメリット：ちなみにcsv等の外部ファイルからScriptableObjectを作成する無料アセットも存在しているのでチェックしてみると良いかもしれません。https://assetstore.unity.com/packages/tools/integration/csv-serialize-135763?aid=1101l4PmM&amp;utm_source=aff
これでAssetが指定したフォルダ下に作られるようになりました！
後は実際にInspectorなどから必要に応じてアセットの値を直接変更できます。あとは使い方ですが、こちらもシンプルにResources.Load等でデータを取得して使用するだけです。もしくは可能そうならEditor上でScriptableObjectのアセットをアタッチする方法もあります。ScriptableObjectは知ってみると非常に使い勝手が良く、Unityの実行速度にも優しい応用のきく機能です。
データ管理と使用は使えそうなら ScriptableObject を使用して効率的に行っていきましょう！


