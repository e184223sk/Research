
using System.IO;
using UnityEditor;
using UnityEngine;

// AssetDatabaseを使用しているため、ビルド時には含めないようにしないとビルドエラーが起きる
#if UNITY_EDITOR
public static class CreateEnemyParamDataAssetFromCsv
{
    private const string AssetPath = "Assets/Resources/Data/Enemy/";
    private const string CsvPath = "Assets/Data/Status/Enemy/xxxx.csv"

    // MenuItem属性を付けることでEditorの上部メニューに`ScriptableObjects &gt; CreateEnemyParamAsset`が表示されます
    // 押下すると`CreateEnemyParamDataAsset()`が実行されます
    [MenuItem("ScriptableObjects/CreateEnemyParamAsset")]
    private static void CreateEnemyParamDataAsset()
    {
        var enemyParamAsset = CreateInstance&lt;EnemyParamAsset&gt;();

        // この辺で外部ファイルパスを用いてデータを読みこみ、
        // 作成したenemyParamAssetに値を流し込む処理を挟む....
        // 例えばenemyParamAsset.EnemyParamList.Add(hogeParam); 的な

        // 流し込んだ後は実際に作成します
        // ここで作ったアセットの置き場所であるパスの指定もできます
        var assetName = $"{AssetPath}{enemyType}Data.asset";
        AssetDatabase.CreateAsset(enemyParamAsset, assetName);

        // Asset作成後、反映させるために必要なメソッド
        AssetDatabase.Refresh();
    }
}
# endif

