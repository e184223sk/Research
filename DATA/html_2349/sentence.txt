自分用の学習メモです。
既に多くの人が書いている内容です。そのため、初心者である僕の記事を読むよりも他の人の記事読んだ方が100%良いです (参考サイトを読んだ方がいい)現在、取り組んでいるドイツのHarz大学との合同ゲームプロジェクトにてゲームを作る上でせっかくなので設計を頑張ってみようと思いました。
ちゃんとした設計をするのは初めてだったので色々と調査をしました。
調査を進める中でUniRxというライブラリを使うと良いということを知りました。これを使ってみたいと思いました。が、その解説の中でDelegate、Eventという知らない概念があったので、それについて調べました。(ついでラムダ式、Action、匿名関数も勉強した)C#入門者を苦しめるDelegate、Action、Event、ラムダ式、匿名関数は全てDelegateの派生形です。なのでまずDelegateをわかるようにするのが大切。Delegateは関数型志向の考え方をプログラムとして実現するための機能です。
関数型志向とは「関数をまとめて変数として扱おうゼ!!」という発想のことです。よくあるのはコールバックの中でコールバックに書いた処理が終わった後に追加で何かしらのメソッドを実行したいときにコールバック関数にメソッドごと渡すというパターンです。他にもメソッドの中身をごっそりと変えるということもできる(てことは、Strategyパターン?) 注)ここではあくまで型を作っただけ(structやenumのような新しい型を作るのがdelegate)ここまでで型の定義とその型を持つ変数の使い方が決まったとすることでMethod1,2,3のdelegete系変数の中身を宣言できる(A、B、Cはそれぞれの型と一致する引数と戻り値を持つ関数)クラス名の部分にはDelVoidを型宣言したクラス名を書くついでにdelegateに対する処理の追加についても説明します。
以下のようにするとAの後に処理Bを追加できます。これで先ほど代入したA,B,Cの内容をMethod1,2,3内で宣言している箇所に貼り付けて使うことができます。Actionはdelegateの省略表現のように書く。引数は＜string,int＞のように「,」で区切ることで複数渡せる引数がない場合はでおk要はActionによって明示的な名前(DelVoidのようなやつ)をつけずに引数と戻り値だけで判断することができる
ただし、Actionは戻り値を返すことができないvoid関数しか作れない戻り値を返したい場合はFuncを使う
書き方は以下の通り例えばはのような関数のdelegateとなる引数がない場合は以下のように書く例えば、はという関数のdelegateとなる今までAction action = Aと書いていた
これは別にメソッドAを書かなければいけないのでめんどいし、場合によっては可読性が落ちる
これをと書き換えることができる。それだけ1行だけの処理であれば、delegate、Actionをより簡単に書ける
1行じゃなくても、書ける。匿名関数の省略記法。だいたいこっちを使うことが多い(2021/01/27 追記)
下のように書く他にも様々な記法があるが、一番簡潔なものを覚えておけば、とりあえずは使える。必要に応じて調べればおkほぼdelegateと同じ違いは外からの代入と実行ができないこと
Delegateとの使い分けは「その関数型変数を内部でしか使わないように限定するかどうか」ということ(カプセル化するかどうかってことか？)カプセル化する場合はEvent
そうでない場合(interface的な時?)はDelegateと覚えておけばとりあえず丸い(多分他にも細かい違いがあると思うけど、今は無視!!)例1例2エラーの例これは外部でdelegateを実行しようとしたり、代入しているのでNG大丈夫な例外からdelegateに処理を付け加えるのはセーフdelegateだけわかってればとりあえずはこの辺の概念はふわっとわかるようになる!!1.http://kan-kikuchi.hatenablog.com/entry/Delegate
2.https://qiita.com/RyotaMurohoshi/items/740151bd772889cf07de
3.https://hk-ryukyu.club/hideto/archives/49#toc6


