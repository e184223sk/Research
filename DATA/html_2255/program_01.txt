
using System.Collections.Generic;
using UnityEngine.SceneManagement;


namespace sample
{
    /// &lt;summary&gt;
    /// ゲームマネージャ.
    /// &lt;/summary&gt;
    public class GameManager : SingletonMonoBehaviour&lt;GameManager&gt;
    {


        Dictionary&lt;string, RuntimeManagerBase&gt; managerDic;


        protected override void Awake()
        {
            base.Awake();
            managerDic = new Dictionary&lt;string, RuntimeManagerBase&gt;();
            DontDestroyOnLoad(this);
            SceneManager.activeSceneChanged += ActiveSceneChangeListener;
            SceneManager.sceneUnloaded += SceneUnLoadedListener;
        }


        /// &lt;summary&gt;
        /// 登録済みのランタイムマネージャを取得.
        /// &lt;/summary&gt;
        /// &lt;typeparam name="T"&gt;&lt;/typeparam&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static T GetRuntimeManager&lt;T&gt;() where T : class
        {
            if (!Instance.managerDic.ContainsKey(typeof(T).ToString())) return null;
            return Instance.managerDic[typeof(T).ToString()] as T;
        }


        /// &lt;summary&gt;
        /// ランタイムマネージャを登録.
        /// &lt;/summary&gt;
        /// &lt;param name="manager"&gt;&lt;/param&gt;
        public static void RegisterRuntimeManager(
            RuntimeManagerBase manager)
        {
            string typeString = manager.ToString();
            if (Instance.managerDic.ContainsKey(typeString)) return;
            Instance.managerDic.Add(typeString, manager);
        }


        // シーンが破棄された故タイミングのリスナ.
        static void SceneUnLoadedListener(
            Scene scene)
        {
            // ランタイムマネージャはこのタイミングで破棄.
            Instance.managerDic?.Clear();
        }


        // シーン変更検知,Unityの仕様上beforeには何も入っていない,afterにロードされたシーンがある.
        static void ActiveSceneChangeListener(
            Scene before,
            Scene after)
        {
        }


    }
}


