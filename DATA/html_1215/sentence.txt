More than 1 year has passed since last update.※7月1日追記　この記事で3通りの問題の対策を提起しましたが、実際にはどれも別の問題が発生するため使えませんでした…。ASP.NETでNlogを使って、ログを出力していました。
userIdを見て動的に出力ファイルを変更していたのですが、マルチスレッドの影響で出力先が変わることがあったので、原因と対策を記します。私の実装はスレッド間で共通のstaticなloggerを作成していました。問題は☆の位置で別スレッドからlogger.Factory.Configuration.Variablesの値が変更されると出力先も変わってしまいます。原因はloggerがstaticであり、スレッド間で共通のオブジェクトだからです。こちらの対策ですが、ロックすることで同期をとるのもいいと思いますが、私はスレッドごとにloggerのインスタンスを作ることにしました。スレッドが立ちあがる際にインスタンス生成されるように記述しておくことで各スレッドごとにloggerが出来上がります。
私はControllerのBaseに置きました。私の勝手な認識でlogger.Factory.Configurationを更新したら、logger.Factory.ReconfigExistingLoggersで反映するものだと思っていたのですが、これをやってしまうと、別スレッドのLoggerまで書き換わってしまいます。Variablesの値は書き換えた時点でloggerのインスタンスに反映されています。
ReconfigExistingLoggersの利用は注意が必要でした。logger.Factory.Configuration.Variablesの値はスレッド間で共通の値だったため(内部的に同期を取っているよう)、コードから書き換えてはいけないようです。代わりにスレッド単位で設定できるNLog.MappedDiagnosticsContextクラスの値を書き換えます。
以下はこのクラスのコメントですつまりスレッドごとに固有のDictionaryですね。次に使い方を記します。Web.config側で${var:userId}のように指定しているところは${mdc:item=userId}に変更します。
filename="./Logs/${mdc:item=userId}/${mdc:item=outputDateTime}.csv以上3つの設定でマルチスレッドでも出力先は正しく動的に変更されるようになりましたが、大量の同時書き込みがあるとサーバーの物理メモリがパンクしてしまうということが発生したので今のところこの対策ではだめでした…。
解決したら追加します…。


