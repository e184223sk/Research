class LimitSizeHelper
{
    #region LimitMaxHeight添付プロパティ
    public static double GetLimitMaxHeight(DependencyObject obj) =&gt; (double)obj.GetValue(LimitMaxHeightProperty);
    public static void SetLimitMaxHeight(DependencyObject obj, double value) =&gt; obj.SetValue(LimitMaxHeightProperty, value);
    public static readonly DependencyProperty LimitMaxHeightProperty =
        DependencyProperty.RegisterAttached("LimitMaxHeight", typeof(double), typeof(LimitSizeHelper),
                new PropertyMetadata(1d, (d, e) =&gt; AddLimitMaxSize(d, e, false)));
    #endregion

    #region LimitMaxWidth添付プロパティ
    public static double GetLimitMaxWidth(DependencyObject obj) =&gt; (double)obj.GetValue(LimitMaxWidthProperty);
    public static void SetLimitMaxWidth(DependencyObject obj, double value) =&gt; obj.SetValue(LimitMaxWidthProperty, value);
    public static readonly DependencyProperty LimitMaxWidthProperty =
        DependencyProperty.RegisterAttached("LimitMaxWidth", typeof(double), typeof(LimitSizeHelper),
                new PropertyMetadata(-1d, (d, e) =&gt; AddLimitMaxSize(d, e, true)));
    #endregion


    private static void AddLimitMaxSize(DependencyObject d, DependencyPropertyChangedEventArgs e, bool isWidth)
    {
        if (d is FrameworkElement targetObj
            &amp;&amp; targetObj.Parent is Panel panel
            &amp;&amp; e.NewValue is double newValue &amp;&amp; newValue &gt; 0)
        {
            panel.SizeChanged += (o, _) =&gt;
                Parent_SizeChanged(targetObj, panel, isWidth, newValue);
        }
    }

    private static void Parent_SizeChanged(FrameworkElement targetObj, Panel panel, bool isWidth, double ratio)
    {
        var otherSumSize = panel.Children
            .Cast&lt;FrameworkElement&gt;()
            .Where(x =&gt; x != targetObj)
            .Sum(x =&gt; isWidth ? x.ActualWidth : x.ActualHeight);

        double maxSize = ((isWidth ? panel.ActualWidth : panel.ActualHeight) - otherSumSize) * ratio;

        if (isWidth)
            targetObj.MaxWidth = maxSize;
        else
            targetObj.MaxHeight = maxSize;
    }
}

