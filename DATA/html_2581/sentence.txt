More than 1 year has passed since last update.C#布教活動しているなかで、初心者ごろしなのがコンパイルエラーな気がしてきたので、トラブルシューティング的なものを書いてみたい。
結果、思ってたのと違う記事が出来上がった。
というわけで、読み物としてお楽しみください。わざとコンパイルエラーを通らないコードを書いてコンパイルエラーを潰していく様を書いてみる。
※この記事全体でいえることですが、別なコードを書いている場合は、同じコンパイルエラーでも、とるべき対処法は変わります。場当たり的にコンパイルエラー潰すより、文法を学ぶなり、まっとうなサンプルコードを見るなりしたほうが、トータルでみると早くて、まともな設計ができるようになると思うので、この記事は意味がない。ちゃんと勉強しましょう。Windows10 で、コマンドプロンプトで実行。
この記事では、パスが通せていることを前提にしています。where cscの結果：
C:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe'InitializeComponent' は現在のコンテキスト内に存在しません
というコンパイルエラーがでる場合。InitializeComponentは、通常、Visual Studioを使っている前提のソースコードです。
(Formのコードなどがツールで自動生成されたものです。)
コマンドプロンプト環境でコンパイルするのはハードル高いです。
この記事を見ても解決できません。ごめんなさい。Hello Worldをやりたくて下記みたいなコードを書いたとします。
(ふつうはコンパイル通るコードをコピペしてHello Worldやると思いますが。)csc BadExample.csと打ってコンパイルすると、下記のようにおこられます。C#で処理を書くときはクラスで囲めということです。
※「うっかり」以外でこのエラーが出るようなコーディングをしている場合は、いますぐコンパイル作業をやめてC#の文法を学びましょう。
(まずは、長くても数十行くらいのコンパイルが通るサンプルコードを持ってきて、なんとなくの書き方を知るのがよいかと。)Step.0に対してクラスで囲んで対処。↓コンパイルエラーむしろコンパイルエラーが増えました。１つ潰すとコンパイルエラーが増えることはよくあります。なお、慣れないうちはコンパイルエラーは先頭から潰しましょう。エラーメッセージのフォーマットは、
ファイル名(行番号,文字位置): error エラー番号: エラーの説明 です。
特に「行番号」は大きな手掛かりになります。Step.1への対策として、ID(いわゆる識別子)を付ける。コンパイルしてみます。
すると、下記コンパイルエラーとなります。Step.2のコンパイルエラーは、
「このコードを書いた人はきっと『BadExampleクラスがWriteLineメソッドを持っているコードを書きたい。』のだろう。」と解釈してエラーメッセージをだしています。実際にやりたいことは、WriteLineを呼び出して「Hello World」を表示したい。（この記事ではそういう設定と思ってください。）
なので、下記のように修正してみます。コンパイルしてみます。
すると、下記コンパイルエラーとなります。エラーが、「〇〇は現在のコンテキスト内に存在しません。」だけになりました。
ようやく構文エラーが消えました。
構文エラーの場合、直接の原因でない箇所でもコンパイルエラーがでたりするので、まずは構文エラーを潰すのが定石だと思います。（括弧の閉じ忘れとか、識別子が１個抜けてるとか、セミコロンを忘れているとかとか。）
Visual Studio Codeなどの、構文をある程度解釈して色分け表示してくれるようなエディタや統合開発環境を選べば、うっかり系の構文エラーはかなり減らせます。Step.3では、コンパイラがWriteLineがないと言っているので、検索キーワードwriteline site:microsoft.comとかでググるなりします。
(今回のように、クラスを探すだけならsite:microsoft.comを付けるのがおすすめです。)「Console.WriteLine - Microsoft Docs」
https://docs.microsoft.com/ja-jp/dotnet/api/system.console.writeline?view=netframework-4.8
が見つかるはずなので、開きます。(Consoleを知っているというテイで、ご容赦ください。。)名前空間:System 
Assemblies:System.Console.dll, mscorlib.dll, netstandard.dllとかかれているはずです。(別のクラスにもWriteLineがあるので注意。)
というわけで、名前空間をつなげてSystem.Console.WriteLineとしてあげると、コンパイラがこれを特定できます。
(なお、using 名前空間;と宣言しておくと、名前空間.は省略できます。
※Consoleはクラス名なので省略できません1。)コンパイルしてみます。
すると、下記コンパイルエラーとなります。文字列は""で囲む。(記事を書いている途中で、このミスは「わざとらしすぎる」ので、最初から"HelloWorld"にしようかと思ったが、警告内容が変わってめんどくさいので、そのままにした。)ちなみに@"xxx"とすると、エスケープ文字を処置しなくて済むので、ファイルパスとかを埋め込むときとか正規表現書くときはこっちのほうが楽。ダメな例："c:\tmp.txt" (※\tはタブ文字と解釈される。\tに限らず、基本的にエスケープをミスっててもコンパイルは通ってしまうケースが多い。)
OKな例："c:\\tmp.txt" もしくは @"c:\tmp.txt"エスケープ文字や"を含まない文字列については、@付きの表記のほうがミスしにくいのでお勧めしたい。コンパイルしてみます。
すると、下記コンパイルエラーとなります。Mainメソッドがないよ。
※C言語ユーザーは違和感あるかもしれませんが、mainではなくMainです。ググってC#のMainの書き方を調べたことにしてください。
[STAThread]をつけ忘れてハマると可哀想なので、つけておきます。これでいけるでしょ。完成！
↓コンパイルエラーディレクティブまたはアセンブリ参照が不足しています。は、名前空間の指定が足りていなくて、コンパイラが見つけられていないケースが多いです。
※コンパイルオプションが必要な場合もあります。2site:microsoft.com をつけてググります。STAThreadAttribute Class 
名前空間:System 
Assemblies:System.Runtime.dll, mscorlib.dll, netstandard.dllSystem に存在しているので、という風にすればコンパイル通ります。
下記でも問題ないですが、STAThreadにSystemつけているのはあまり見ないスタイル(※個人の感想です)。BadExample.exeの実行結果：もうBadExampleじゃないけど、名前変えるとミスしそうなのでこのまま。・・・見てくれた方はありがとうございます。お疲れさまでした！コンパイラのメッセージを英語と日本語の両方を載せたいと思い、調べた。コマンドプロンプトで chcp 437 を実行するとcscの警告内容も英語に変えられる。日本語(Shift_JIS)はchcp 932。
参考: 
http://pocketstudio.jp/log3/2012/02/13/change_language_and_chcp/
https://www.ipentec.com/document/windows-codepage-list「省略できません」はちょっと嘘ですが、この記事を読む段階では知らないほうがよい気がします。(using static使えば、staticなクラスについては省略可能になる。Mathクラスとか使いまくる場合はいりようになるかもしれない。) ↩cscの/r:DLLへのパスオプションでアセンブリ参照を追加しないといけないケースがあります。(Excel使う場合とか。大体はC:\Windows\assembly\以下をdir /s 名前空間名.dllすればでてくると思います。参考: https://www.atmarkit.co.jp/fdotnet/dotnettips/846extratfromgac/extratfromgac.html  ) ↩


