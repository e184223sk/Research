More than 3 years have passed since last update.EntityFrameworkでConcurrencyCheckを使用した楽観的排他制御とそのリカバリロジックを書いた場合に単体テストを行う方法が分からなかったので考えてみた。例えばこんなEntityとContextを作成した場合在庫を更新するロジックを書いてみるここでDbUpdateConcurrencyExceptionをキャッチした時の中を単体テストでチェックしたいなぁって思った時に、MoqのCallBackとCallBaseを利用してテストを書くことができる。単体テストはこんな感じ単体テストではSqliteのオンメモリーDBを使用した。MoqのCallBaseをtrueにすることでラッパー的な動作が可能になる。
SetupのチェインにてCallBaseを呼ぶことでベースクラスのSetupで指定した関数を呼ぶことが出来る。
Callbackを使用することで関数の実行前や実行後に処理を挟むことができる。これら２つを組み合わせてSaveChangesAsync()が呼ばれる前に在庫データを別Contextにて更新してしまえば、DbUpdateConcurrencyExceptionを発生させることが出来る。もちろんmoqにてSaveChangesAsyncを乗っ取って、全ての模擬動作を書くこともできるけど、ぶっちゃけめんどい。


