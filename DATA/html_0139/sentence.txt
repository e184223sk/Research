ASP.NET CoreではコントローラーやRazorPagesに対するインテグレーションテストを想定して、インメモリでテスト用WebサーバーをホストするためのWebApplicationFactoryクラスがあらかじめ用意されています。このクラスの利用方法はASP.NET Core MVC アプリのテストにまとめられていますが、対象がXUnitになっているためNUnitの場合このままでは利用できません。
この記事では、ASP.NET Core+NUnitを利用したインテグレーションテストの開始方法を説明します。dotnetコマンドで作られるテスト対象のWebApiプロジェクトと、NUnitを利用したテストプロジェクトを追加していきます。
テストプロジェクトはテスト対象のWebApiプロジェクトに対する参照と、WebApplicationFactoryクラスを利用するためにMicrosoft.AspNetCore.Mvc.Testingパッケージを追加します。Visual Studioでソリューションを開くと、次のような構成のソリューションが作成されます。
まずはプロジェクトファイルの&lt;Project Sdk="Microsoft.NET.Sdk"&gt;を&lt;Project Sdk="Microsoft.NET.Sdk.Web"&gt;に変更します。続いて、テスト用Webサーバーの起動クラスを追加します。XUnitの例では、IClassFixture&lt;T&gt;を継承することでWebApplicationFactoryのインスタンスを取得していましたが、NUnitではIClassFixtureは使えないので、OneTimeSetup属性で指定したメソッドでApiWebApplicationFactoryを作成し、HttpClientを取り出してこれを利用します。実際にインテグレーションテストを実施する場合は、ConfigureWebHostメソッドをオーバーライドしてデータベースの参照先をRDBからメモリーデータベースにしたり、外部サービスをモックに差し替えるなどいくつか追加で実施する必要がありますが、実施方法はXUnitと変わりがありませんのでASP.NET Core MVC アプリのテストのASP.NET Core アプリを機能テストするを参照してください。


