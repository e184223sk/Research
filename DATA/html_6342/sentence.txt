More than 3 years have passed since last update.(2017/06/09更新しました)Qiitaには「いいね」と「ストック」があり、「いいね」された数は記事から見ることができるが、「ストックされた数」は見ることができない
「いいね」されなくてもどれくらいの人に「ストック」されたか分かればモチベ向上や記事の需要とかがわかりそうだと思ったから見れるようなやつをWPFで作ってみたDL先：DropBox/QiitaStocksViewerこんな感じでユーザーIDを入れて読込開始を押すと自分が投稿した記事の情報が取得できる
Items、Contributions、いいね数、コメント数はスクレイピングで取得し、他はQiitaAPIで取得している
URLはクリックすると既定のブラウザで開けるようにした
ストック者数のとこを押すとストックした人のIDも分かるようにしてみた
あとCSVに保存できる誰得機能も付けてみた('ω')APIについてはQiita API v2ドキュメントを見ればなんとなく分かると思う
Qiita API v2では認証なしのリクエストはIPアドレスごとに60回/hと制限されている
今回作ったコードでは、まずユーザーの投稿記事取得のために1回、投稿した各記事の情報取得のために投稿記事の数だけリクエストしている
そのため、たくさん記事を投稿している人や1時間以内に何度もリクエストを送ると制限されてしまう
なのでアクセストークンを入れて認証ありでリクエストできるようにしてみた
（認証状態だと1000回/hまでOK）
アクセストークンは
Qiitaの設定&gt;アプリケーション&gt;個人用アクセストークン&gt;新しくトークンを発行する
で作れる
(OAuthはよくわからんからやめた)

アクセストークンの説明は自分がわかるように書いて、スコープはread_qiitaにして発行するを押せばアクセストークンが発行されるのでそれをコピペすればOK
(セキュリティとかは気を付けること)
自己流にガリガリと作ってみたから変なとこあるかもしれない(;´･ω･)※ReactiveProperty、Json.NET、HtmlAgilityPackを使用している
以下参考かずきのBlog@hatena/ReactiveProperty オーバービューマイクロソフト系技術情報 Wiki/JSONのparseを色々試してみた。kitayama lab/C#とHtmlAgilityPackでスクレイピングしてみた長くなりそうだからざっくり説明（需要があれば詳しく解説する）
記事の情報を持つクラス(PostInformation)を定義して、その配列をModelに持たせる
Modelは他にもユーザーIDとかアクセストークンとかコマンドを持っている
記事の情報を持つクラス(PostInformation)はインナークラスにストック情報をもつクラス(StockInformation)を持ち、コンストラクタで記事IDを渡すと勝手にストック情報を取ってくれるようにしてある
情報を取得するコマンドはユーザーIDが入力されている時だけ有効にしていて、
実際の処理は1.ユーザーページのhtmlを取得してHtmlDocumentにLoadさせ、XPathを指定してItemsとContributionsを取得
2.QiitaのAPIを叩く
2.帰ってきたJsonをJson.NET使ってConvert
3.記事情報の配列を一旦クリアして記事の数だけ追加、同時に初期化で情報をセット
4.記事情報の追加時、ユーザー名と記事IDからURLを作り、1と同様にスクレイプしていいね数とコメント数を取得
5.ストック情報取得という感じ
アクセストークンが入力されていたらAuthorizationリクエストヘッダに詰め込んでリクエストしてるよ指定するXPathとかは、使いやすくするためenumにし、拡張メソッドので値を取得している
(参考:C#のenumに関連する小技。)XPathはChromeでF12押してコピペしたいつもの
もはやコメント不要( ˘ω˘)重要そうなDataGridのとこだけざっくり解説まず、各列のヘッダーを中央にしたかったからStyleでDataGridColumnHeaderをターゲットに設定している
また、セル内のテキストも中央に表示させたいので同様Styleで設定
DataGridは記事の各情報を各列に定義している3列目のストック数の列はテンプレートにしてボタンを定義し、押したときにポップアップでストックした人のIDが表示されるようにしている
5列目のURLでは、CellTemplate内でLabelを設定し、LabelにHyperlinkを入れ、ビヘイビアを使って動作させている
ビヘイビアはこんな感じビヘイビアについてはココが参考になると思うAPIとかJsonとか初めて触ってみたけどなんとかなった(/・ω・)/
スクレイピングも初めてやってみたけどできて満足(ﾟ∀ﾟ)
ホントは記事の閲覧数も取得してみたかったけど無理っぽい(´・ω・｀)
やる気が出れば機能拡張とかするかも


