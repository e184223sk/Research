More than 1 year has passed since last update.この投稿では、BlazorのJavaSciript相互運用機能のコードを読んでいきます。を読んでいることを前提とします。vesrion : 3.0.100-preview5-011568の確認を行います。JavaScript相互運用機能の使い方はこのような感じです。@injectはサービスのインジェクトを行います。Componentのrazorファイル内で、IJSRuntimeをインジェクトし、そのインスタンスを使うことで、JavaScriptを呼び出すことができます。Blazorでは、はデフォルトで作成されていて、@injectをするだけでサービスをインジェクトすることができます。自分で作ったサービスは、デフォルトで作成されないので設定をする必要があります。それではコードを見ていきます。リポジトリは、「aspnet/AspNetCore」です。Blazorのコードは「AspNetCore/src/Components/Blazor/」にあります。IJSRuntimeはデフォルトで作成されています。ですので、まず作成している場所を探しましょう。dotnet new blazor -oコマンドでBlazorプロジェクトを作成した時のProgram.csは以下の通りです。BlazorWebAssemblyHostはこのようになっています。CreateDefaultBuilderメソッドは、WebAssemblyHostBuilderのインスタンスを生成しています。次に、WebAssemblyHostBuilderをみてみます。WebAssemblyHostBuilderのCreateServiceProviderメソッド内に注目します。はデフォルトで作成されていますが、ここで作成していることがわかりました。Instanceにだけ注目するとここですね。次は、WebAssemblyJSRuntime.Instanceをみていきましょう。WebAssemblyJSRuntime.Instanceは、MonoWebAssemblyJSRuntime型のstaticフィールドです。MonoWebAssemblyJSRuntimeは今までみたきたものと別のアセンブリで、「Mono.WebAssembly.Interop」にあります。コードはこちら。MonoWebAssemblyJSRuntimeの各メソッドは内部でInternalCallsを使っています。InternalCallsはexternとなっています。コメントによるとMono配布のdriver.cの中に実装があるのではないでしょうか。簡単にですが、JavaScript相互運用機能・IJSRuntimeのコードを追ってみました。主要な実装はexternでC言語で書かれているようです。また機会があれば追ってみます。


