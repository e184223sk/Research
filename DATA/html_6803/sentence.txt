More than 3 years have passed since last update.C#Adventcallenderの8日目ですよ～
昨日はなんか難しそうなでも面白い記事だったので今日は簡単？な記事を僕は新しいものが大好きです。
もちろんC#7も心待ちにしています。僕が初めてC#に触れたのはC#3.5の時なのでその最先端のLINQももちろん触っていて
今ではLINQ星人です。最近はRXなんて形態も出てきましたね。新卒の就活でも意図的にC#が使える仕事を選んでありがたいことにC#っていうかUnity使ってます。$\texthuge{が}$$\textlarge{だがしかし}$Unityちゃん界隈だとLINQではなくforを多く使う人が若干多めな傾向にあるような気がします。
（アセット買いあさってみるとわりとforが多い）
個人的にはとてももやもやーっとしますのでforeachからLINQへの置き換えを書いていきます。
全ての例でforeachにしますが大丈夫ですよね。速度がどうとかいう議論はほかでやってください。C++とかCとかアセンブラとかおすすめですよ。for/foreach/if/switch/whileって昔々にできた古い言葉ですごく抽象度が高いんですね。例えばforは繰り返しで使う構文ですが、そもそもなぜ繰り返しをするのかを記述できない
なのでなぜ繰り返すのかデータの加工なのか抜き出しなのかそういう記述ができるLINQや他言語メソッド群を優先的に使うべきだと思います同様にifも分岐ですが、なぜ分岐したいのかがわからない
ここでは書きませんが例えばポリモーフィズムという方法をとっても良いしファクトリメソッドでも良いわけです本当にこの文脈でそれを使うのが一番具体的なの？という意味ではこの辺の話も似たようなものかなと思います。
おめえ本当に今null使う必要あるん？というお話
null安全でない言語は、もはやレガシー言語だとりあえずこんなクラスを基底クラスとして始めます。
ようするにPositiveは1～9の配列、Negativeは-1～9の配列です。
Writeは配列表示するだけStartは両方実行してみるテスト用ですLegacyメソッドに古い方法LinqメソッドにLINQの方法を記述していきます。明日から使えるLINQの置き換えです。
すぐできます今から使うと幸せになります。配列から条件に合う物をだけを抜き出すには別のリストを用意してforとifを使って条件に合ったものを…やめましょう。
Whereをつかえば一行です。たとえば、3の倍数だけを抜き出すような操作は次の1行で書けます。配列のすべての値に一定の操作をするいわゆる射影と呼ばれる操作、これをするには別の配列をつくってそこにforeachをつかって順番に計算した値を入れて…
ではなくSelectを使いましょう。たとえば、配列の中身をそれぞれ二乗した配列を作る操作はこの一行で書けます。配列の中から条件に合う要素をもつデータをどれでもいいから一つ取り出したいことがあります。
（それはもしかしたら一意性が保証されているかもしれないし、そうでないかもしれません）
そんな時はforとifを使って条件に合う要素があったらそれを返せば…いえいえそんなときはFirst/FirstOrDefaultやLast/Single等を状況によって使用します。例えば、Firstは配列の中で条件に合う要素のうち最初の一つの要素を取得するメソッドです
Lastはもちろん配列の中で条件に合う要素のうち最後の一つの要素を取得するメソッドです
Singleは条件に合うものが複数あった場合例外を送出します。それぞれのメソッドは条件に合う要素がなければ例外を送出します。もし例外ではなくその型のデフォルト値(default(T))を返してほしい場合は
FirstOrDefault/LastOrDefault/SingleOrDefaultを使用します。（決してtry/catchを使用してはいけません。）基本的にはFirstが速度の面で若干有利です。ですから特に理由がない場合Firstの利用をお勧めします。
ただし、結局はO(n)の操作になるので、「ユーザーIDが10であるユーザーを検索する」というような主キーとなるようなものがある場合そもそも主キーをKeyとしたDictionaryを検討してください。（Dictionaryの検索はO(1)に近いです。）今度はforeachではなくifとcontinue/breakが必要ですか？という置き換えです。先程のWhereやSelectをちゃんと使ってあげれば、continueもbreakもほとんど必要なくなりますよ。
という感じです。と言うかですね。この2つのキーワードについては書く必要に迫られたときは一旦立ち止まってください。
LINQで大抵回避できます。そしてそちらのほうが大抵わかりやすい書き方ができます。ネストも減りますしね。
そして本当の処理部分だけを書いたforeachを記述してください。ここまで来てリストを2つ一緒にループさせるときはもう役立たずじゃんと思う人もいるかもしれません。
そういう状況があまり思いつかないのですが、その用途であればZipで可能です。（なおUnityには未実装・・・おい・・・）ちなみにSelectにはSelect(this IEnumerable,Func)というオーバーロードがありFuncのintに何番目かのインデックスが入ります。他に2つ以上のリストを扱う方法としてリストの結合はConcat,もっと複雑な統合はJoinを使います。その他覚えておいたほうが良いTipsです。
簡単に示します。リストが空かどうかはAnyを使って判別します。
いままでLengthやCount()を利用していた人も多いのでは？list.Any()はlistに値が一つでもあればtrueひとつもなければfalseです
例えばこのように書くとlistが空の場合何も処理をせずに戻すコードになります。リストの中身をキャストしたい時もあります。
贅沢を言えばリストの中から特定の形のデータだけ抜き出したいとか・・・そういうときにはOfTypeを使います。
Castというメソッドもありますがそちらはキャストが失敗したら例外を出します。
用途によって使い分けてください。こんなのもあったので参考にどうぞ
【C#】Where(it =&gt; it is Xxx).Select(it =&gt; it as Xxx)って書かず、OfType使おう！【LINQ】わりと面倒くさいこの作業はDistinctを利用します。Reverseを使います。
UI作成とかにどうぞどんどん新しい知識増やしていかないとstaticおじさんになっちゃいますね。
この知識もまだ使えるけどいつごみになるかわかんないですしね。最近はRxやnull安全とか
言語も色々出てくるしツールも多くて若いけど大変です。C#7はどうなるのかしら、あとC#6にそろそろ対応するはずのUnityちゃんはよ！！
まってるんだから！この記事で使われたメソッドはここに簡単に一覧にしています。
LINQチートシート的なもの


