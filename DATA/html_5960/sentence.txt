More than 1 year has passed since last update.数回に分けて、四則演算を行う数式（例えば、(1＋5) * (2+3)のような式）を入力し、その計算結果を求めるプログラムを書いて行こうと思います。第一回目の今回は、逆ポーランド記法で表された数式を計算するクラスを定義します。逆ポーランド記法を利用した数式の計算(1) 逆ポーランド記法の計算 ← 当記事
逆ポーランド記法を利用した数式の計算(2) 数式をトークンに分割する
逆ポーランド記法を利用した数式の計算(3) ReversePolishNotationクラスを改良する
逆ポーランド記法を利用した数式の計算(4) Contextクラスを定義する
逆ポーランド記法を利用した数式の計算(5) Interpreterパターンで数式を解析する
逆ポーランド記法を利用した数式の計算(6) 最後の仕上げ逆ポーランド記法（Reverse Polish Notation, RPN）とは、数式の記述方法で、演算子を被演算子の後に記述する表記法です。日本語では、後置記法とも呼ばれたりします。
この記法は、演算の優先順位を指定する括弧が不要な点が特徴のひとつです。たとえば、(1＋5) * (2+3)は、と記述します。詳しくは、Wikipediaのページをご覧ください。まずは、逆ポーランド記法を表すクラスReversePolishNotationを定義します。このクラスは、与えられた式(文字列形式)を空白で区切って、リストに保持しているだけの簡単なものです。2つのコンストラクタとプロパティを持っています。次に、このReversePolishNotationクラスが保持している式を計算するクラスRpnCalculatorを定義します。Wikipediaに書かれているように、スタック(Stack&lt;T&gt;)クラスを利用し、計算をしています。ReversePolishNotationクラスに保持されたリストの先頭から順に要素を取り出し、演算子でなければ(つまり数値ならば）、スタックにその値を積み、演算子だったら、スタックから値を２つ取り出し計算を行い、その結果をスタックに積みます。これを繰り返すことで、計算を行います。例えば、1 5 + 2 3 + *ならば、とこんな感じで、計算をしていきます。スタックの状態は、以下のように変化します。左側がスタックのTOPです。これをコードにしたのが、以下のRpnCalculatorクラスです。このクラスは、staticクラスとしました。
すべての計算が終わった時には、スタックの先頭に計算結果が入っているので、それを返すようにしています。ここまでできれば、コンソールから逆ポーランド記法の数式を入力し、それを計算するコードは簡単に書けますね。Ctrl+Z&lt;Enter&gt;するまで、繰り返しています。以下、実行例です。無事、実行できました。ということで、RpnCalculator.Calculateができたので、あとは、通常の数式を逆ポーランド記法に変換することができれば、キーボードから入力された数式を計算するプログラムが書けるということですね。ただ、数式を逆ポーランド記法に変換するのが、意外と厄介なんですよね。次回からは、数式を逆ポーランド記法に変換して、それを計算するプログラムを少しづつ作成していきたいと思います。続く。この記事は、Gushwell's C# Programming Pageで公開したものを加筆・修正したものです。


