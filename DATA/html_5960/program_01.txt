
using System;
using System.Net;
using System.Collections.Generic;

namespace Rpn.App {
    public class RpnCalculator {
        // 後置記法を計算する
        public static decimal Calculate(ReversePolishNotation rpn) {
            Stack&lt;object&gt; stack = new Stack&lt;object&gt;();
            foreach (var token in rpn.Tokens) {
                if (IsOperator(token)) {
                    var b = (decimal)stack.Pop();
                    var a = (decimal)stack.Pop();
                    var c = Operate(a, b, token);
                    stack.Push(c);
                } else {
                    stack.Push(decimal.Parse(token));
                }
            }
            return (decimal)stack.Pop();
        }

        private static decimal Operate(decimal a, decimal b, string ope) {
            switch (ope) {
                case "+":
                    return a + b;
                case "-":
                    return a - b;
                case "*":
                    return a * b;
                default:
                    return a / b;
            }
        }

        public static bool IsOperator(string s) {
            if (s.Length == 1) {
                if (s[0] == '+' || s[0] == '-' || s[0] == '*' || s[0] == '/')
                    return true;
            }
            return false;
        }
    }
}


