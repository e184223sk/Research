
public static class Def
{
    public delegate bool WhenFunc(Core.UserActionExecutionContext ctx);
    public delegate void BeforeFunc(Core.UserActionExecutionContext ctx);
    public delegate void DoFunc(Core.UserActionExecutionContext ctx);
    public delegate void AfterFunc(Core.UserActionExecutionContext ctx);

    public interface Button { }
    public interface AcceptableInOnClause : Button { }
    public interface AcceptableInIfButtonClause : Button { }
    public interface AcceptableInIfSingleTriggerButtonClause : AcceptableInIfButtonClause { }
    public interface AcceptableInIfDoubleTriggerButtonClause : AcceptableInIfButtonClause { }

    public class LeftButton   : AcceptableInOnClause, AcceptableInIfDoubleTriggerButtonClause { }
    public class MiddleButton : AcceptableInOnClause, AcceptableInIfDoubleTriggerButtonClause { }
    public class RightButton  : AcceptableInOnClause, AcceptableInIfDoubleTriggerButtonClause { }
    public class WheelUp      :                       AcceptableInIfSingleTriggerButtonClause { }
    public class WheelDown    :                       AcceptableInIfSingleTriggerButtonClause { }
    public class WheelLeft    :                       AcceptableInIfSingleTriggerButtonClause { }
    public class WheelRight   :                       AcceptableInIfSingleTriggerButtonClause { }
    public class X1Button     : AcceptableInOnClause, AcceptableInIfDoubleTriggerButtonClause { }
    public class X2Button     : AcceptableInOnClause, AcceptableInIfDoubleTriggerButtonClause { }

    public interface Move { }
    public interface AcceptableInIfStrokeClause : Move { }
    public class MoveUp    : AcceptableInIfStrokeClause { }
    public class MoveDown  : AcceptableInIfStrokeClause { }
    public class MoveLeft  : AcceptableInIfStrokeClause { }
    public class MoveRight : AcceptableInIfStrokeClause { }

    public class ConstantSingleton
    {
        private static ConstantSingleton singleton = new ConstantSingleton();

        public readonly LeftButton   LeftButton      = new LeftButton();
        public readonly MiddleButton MiddleButton    = new MiddleButton();
        public readonly RightButton  RightButton     = new RightButton();
        public readonly WheelDown    WheelDown       = new WheelDown();
        public readonly WheelUp      WheelUp         = new WheelUp();
        public readonly WheelLeft    WheelLeft       = new WheelLeft();
        public readonly WheelRight   WheelRight      = new WheelRight();
        public readonly X1Button     X1Button        = new X1Button();
        public readonly X2Button     X2Button        = new X2Button();

        public readonly MoveUp    MoveUp    = new MoveUp();
        public readonly MoveDown  MoveDown  = new MoveDown();
        public readonly MoveLeft  MoveLeft  = new MoveLeft();
        public readonly MoveRight MoveRight = new MoveRight();

        public static ConstantSingleton GetInstance()
        {
            return singleton;
        }
    }

    public static ConstantSingleton Constant
    {
        get { return ConstantSingleton.GetInstance(); }
    }
}

