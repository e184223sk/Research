
public class OnElement
{
    public class Value
    {
        public readonly List&lt;IfSingleTriggerButtonElement.Value&gt; ifSingleTriggerButtonElements = new List&lt;IfSingleTriggerButtonElement.Value&gt;();
        public readonly List&lt;IfDoubleTriggerButtonElement.Value&gt; ifDoubleTriggerButtonElements = new List&lt;IfDoubleTriggerButtonElement.Value&gt;();
        public readonly List&lt;IfStrokeElement.Value&gt; ifStrokeElements = new List&lt;IfStrokeElement.Value&gt;();
        public readonly Def.AcceptableInOnClause button;

        public Value(Def.AcceptableInOnClause button)
        {
            this.button = button;
        }
    }

    private readonly Value value;

    public OnElement(List&lt;Value&gt; parent, Def.AcceptableInOnClause button)
    {
        this.value = new Value(button);
        parent.Add(this.value);
    }

    public IfSingleTriggerButtonElement @if(Def.AcceptableInIfSingleTriggerButtonClause button)
    {
        return new IfSingleTriggerButtonElement(value.ifSingleTriggerButtonElements, button);
    }

    public IfDoubleTriggerButtonElement @if(Def.AcceptableInIfDoubleTriggerButtonClause button)
    {
        return new IfDoubleTriggerButtonElement(value.ifDoubleTriggerButtonElements, button);
    }

    public IfStrokeElement @if(params Def.AcceptableInIfStrokeClause[] moves)
    {
        return new IfStrokeElement(value.ifStrokeElements, moves);
    }
}

