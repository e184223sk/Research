
public class IfDoubleTriggerButtonElement
{
    public class Value
    {
        public readonly List&lt;DoubleTriggerBeforeElement.Value&gt; beforeElements = new List&lt;DoubleTriggerBeforeElement.Value&gt;();
        public readonly List&lt;DoubleTriggerDoElement.Value&gt; doElements = new List&lt;DoubleTriggerDoElement.Value&gt;();
        public readonly List&lt;DoubleTriggerAfterElement.Value&gt; afterElements = new List&lt;DoubleTriggerAfterElement.Value&gt;();

        public readonly Def.AcceptableInIfDoubleTriggerButtonClause button;

        public Value(Def.AcceptableInIfDoubleTriggerButtonClause button)
        {
            this.button = button;
        }
    }

    private readonly Value value;

    public IfDoubleTriggerButtonElement(List&lt;Value&gt; parent, Def.AcceptableInIfDoubleTriggerButtonClause button)
    {
        this.value = new Value(button);
        parent.Add(this.value);
    }

    public DoubleTriggerBeforeElement @before(Def.BeforeFunc func)
    {
        return new DoubleTriggerBeforeElement(value.beforeElements, value.doElements, value.afterElements, func);
    }

    public DoubleTriggerDoElement @do(Def.DoFunc func)
    {
        return new DoubleTriggerDoElement(value.doElements, value.afterElements, func);
    }

    public DoubleTriggerAfterElement @after(Def.AfterFunc func)
    {
        return new DoubleTriggerAfterElement(value.afterElements, func);
    }
}

