
public class WhenElement
{
    public class Value
    {
        public readonly List&lt;IfSingleTriggerButtonElement.Value&gt; ifSingleTriggerButtonElements = new List&lt;IfSingleTriggerButtonElement.Value&gt;();
        public readonly List&lt;IfDoubleTriggerButtonElement.Value&gt; ifDoubleTriggerButtonElements = new List&lt;IfDoubleTriggerButtonElement.Value&gt;();
        public readonly List&lt;OnElement.Value&gt; onElements = new List&lt;OnElement.Value&gt;();
        public readonly Def.WhenFunc func;

        public Value(Def.WhenFunc func)
        {
            this.func = func;
        }
    }

    private readonly Value value;

    public WhenElement(List&lt;Value&gt; parent, Def.WhenFunc func)
    {
        this.value = new Value(func);
        parent.Add(this.value);
    }

    public OnElement @on(Def.AcceptableInOnClause button)
    {
        return new OnElement(value.onElements, button);
    }

    public IfSingleTriggerButtonElement @if(Def.AcceptableInIfSingleTriggerButtonClause button)
    {
        return new IfSingleTriggerButtonElement(value.ifSingleTriggerButtonElements, button);
    }

    public IfDoubleTriggerButtonElement @if(Def.AcceptableInIfDoubleTriggerButtonClause button)
    {
        return new IfDoubleTriggerButtonElement(value.ifDoubleTriggerButtonElements, button);
    }
}

