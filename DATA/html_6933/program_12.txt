
public static class Window
{
    ...
    public static WindowInfo From(IntPtr hWnd) { ... }
    public static Point GetCursorPos() { ... }
    public static Point GetPhysicalCursorPos() { ... }
    public static WindowInfo GetForegroundWindow() { ... }
    public static WindowInfo GetPointedWindow() { ... }
    public static WindowInfo WindowFromPoint(Point point) { ... }
    public static WindowInfo FindWindow(string lpClassName, string lpWindowName) { ... }
    public static IEnumerable&lt;WindowInfo&gt; GetTopLevelWindows() { ... }
    public static IEnumerable&lt;WindowInfo&gt; GetThreadWindows(uint threadId) { ... }
}

public class WindowInfo
{
    ...
    public readonly IntPtr WindowHandle;
    public readonly int ThreadId;
    public readonly int ProcessId;
    public readonly IntPtr WindowId;
    public string Text;
    public readonly string ClassName;
    public readonly WindowInfo Parent;
    public readonly string ModulePath;
    public readonly string ModuleName;
    ...
    public bool BringWindowToTop() { ... }
    public long SendMessage(uint Msg, uint wParam, uint lParam) { ... }
    public bool PostMessage(uint Msg, uint wParam, uint lParam) { ... }
    public WindowInfo FindWindowEx(IntPtr hwndChildAfter, string lpszClass, string lpszWindow) { ... }
    public WindowInfo FindWindowEx(string lpszClass, string lpszWindow) { ... }
    public IEnumerable&lt;WindowInfo&gt; GetChildWindows() { ... }
    public IEnumerable&lt;WindowInfo&gt; GetPointedDescendantWindows(Point point, Window.WindowFromPointFlags flags) { ... }
    public IEnumerable&lt;WindowInfo&gt; GetPointedDescendantWindows(Point point) { ... }
}

public class ForegroundWindowInfo : WindowInfo
{
    public static new class NativeMethods
    {
        [DllImport("user32.dll")]
        public static extern IntPtr GetForegroundWindow();
    }

    public ForegroundWindowInfo() : base(NativeMethods.GetForegroundWindow()) { }
}

public class PointedWindowInfo : WindowInfo
{
    public static new class NativeMethods
    {
        [DllImport("user32.dll")]
        public static extern IntPtr WindowFromPhysicalPoint(Point point);
    }

    public PointedWindowInfo(Point point) : base(NativeMethods.WindowFromPhysicalPoint(point)) { }
}

