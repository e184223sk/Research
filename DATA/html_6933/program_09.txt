
[DllImport("user32.dll", SetLastError = true)]
private static extern uint SendInput(uint nInputs, INPUT[] pInputs, int cbSize);

[StructLayout(LayoutKind.Sequential)]
protected struct INPUT
{
    public int type;
    public MOUSEINPUT data;
}

[StructLayout(LayoutKind.Sequential)]
protected struct WHEELDELTA
{
    public int delta;
}

[StructLayout(LayoutKind.Sequential)]
protected struct XBUTTON
{
    public int type;
}

[StructLayout(LayoutKind.Explicit)]
protected struct MOUSEDATA
{
    [FieldOffset(0)]
    public WHEELDELTA asWheelDelta;
    [FieldOffset(0)]
    public XBUTTON asXButton;
}

[StructLayout(LayoutKind.Sequential)]
protected struct MOUSEINPUT
{
    public int dx;
    public int dy;
    public MOUSEDATA mouseData;
    public uint dwFlags;
    public uint time;
    public UIntPtr dwExtraInfo;
}

// https://msdn.microsoft.com/ja-jp/library/windows/desktop/ms646273(v=vs.85).aspx
[Flags]
private enum XButtonType
{
    XBUTTON1 = 0x01,
    XBUTTON2 = 0x02
}

// https://msdn.microsoft.com/ja-jp/library/windows/desktop/ms646270(v=vs.85).aspx
[Flags]
private enum InputType
{
    INPUT_MOUSE    = 0x0,
    INPUT_KEYBOARD = 0x1,
    INPUT_HARDWARE = 0x2
}

// https://msdn.microsoft.com/ja-jp/library/windows/desktop/ms646260(v=vs.85).aspx
[Flags]
private enum MouseEventType 
{
    MOUSEEVENTF_MOVE       = 0x0001,
    MOUSEEVENTF_LEFTDOWN   = 0x0002,
    MOUSEEVENTF_LEFTUP     = 0x0004,
    MOUSEEVENTF_RIGHTDOWN  = 0x0008,
    MOUSEEVENTF_RIGHTUP    = 0x0010,
    MOUSEEVENTF_MIDDLEDOWN = 0x0020,
    MOUSEEVENTF_MIDDLEUP   = 0x0040,
    MOUSEEVENTF_XDOWN      = 0x0080,
    MOUSEEVENTF_XUP        = 0x0100,
    MOUSEEVENTF_WHEEL      = 0x0800,
    MOUSEEVENTF_HWHEEL     = 0x1000,
    MOUSEEVENTF_ABSOLUTE   = 0x8000
}

private const int WHEEL_DELTA = 120;

protected void Send(INPUT input)
{
    var messages = new INPUT[1];
    messages[0] = input;
    SendInput((uint)messages.Length, messages, Marshal.SizeOf(messages[0]));
}

protected INPUT ToInput(MOUSEINPUT mouseInput)
{
    var input = new INPUT();
    input.type = (int)InputType.INPUT_MOUSE;
    input.data = mouseInput;
    return input;
}

private MOUSEINPUT GetMouseInput()
{
    var mouseInput = new MOUSEINPUT();
    mouseInput.time = 0;
    return mouseInput;
}

protected MOUSEINPUT MouseLeftDownEvent()
{
    var mouseInput = GetMouseInput();
    mouseInput.dwFlags = (int)MouseEventType.MOUSEEVENTF_LEFTDOWN;
    return mouseInput;
}

protected MOUSEINPUT MouseLeftUpEvent()
{
    var mouseInput = GetMouseInput();
    mouseInput.dwFlags = (int)MouseEventType.MOUSEEVENTF_LEFTUP;
    return mouseInput;
}

protected MOUSEINPUT MouseRightDownEvent()
{
    var mouseInput = GetMouseInput();
    mouseInput.dwFlags = (int)MouseEventType.MOUSEEVENTF_RIGHTDOWN;
    return mouseInput;
}

protected MOUSEINPUT MouseRightUpEvent()
{
    var mouseInput = GetMouseInput();
    mouseInput.dwFlags = (int)MouseEventType.MOUSEEVENTF_RIGHTUP;
    return mouseInput;
}

