More than 1 year has passed since last update.夏ぼっちカレンダー（仮）の18日目の記事です。
記事の中に間違いなどあれば指摘していただけると幸いです。要素数5のリストの
List.Sort((a,b)=&gt;(a-b))の中身を以下のコードで出力してみます。すると以下のように出力されます①それぞれのaとbの値の決め方
②ループの回る回数（処理の回数）
③returnされた値の利用方法まず、順番が前後しますが「③returnされた値の利用方法」についてです。Sortにはいくつか種類があり、
ここで使用されている種類は「Sort(Comparison)」です。
他に、Sort()やSort(IComparer)があります。Sort(Comparison)はComparisonデリゲートから返された値が
負の場合に要素の位置を交換します。つまり、
上の例では以下のことが起こっています。① 5 4 3 2 1の配列が存在
② 4と5が比較され、-1が返される
③ 負の値が返されたので4と5の順番を逆にする
④ 4 5 3 2 1の配列になる
⑤ 3と5が比較され、-2が返される
⑥ 負の値が返されたので3と5の順番を逆にする
⑦ 4 3 5 2 1の配列になる
…ここから、
「③returnされた値の利用方法」は
負の時に要素の順番を入れ替えることだということが分かります。次に
「①それぞれのaとbの値の決め方」と「②ループの回る回数（処理の回数）」
についてです。要素が16未満の際は「挿入ソート」
それ以外は（たぶん）イントロソート（クイックソート＋ヒープソート）
の使用になるようです。上の要素数は5だったので
挿入ソートが行われていました。そのため、
「①それぞれのaとbの値の決め方」と「②ループの回る回数（処理の回数）」も
挿入ソートの方法に沿ったものになっていました。要素数を20にするとクイックソートになりました。以下のように出力されますここから、
「①それぞれのaとbの値の決め方」と「②ループの回る回数」は、
ソートする際に使用するアルゴリズムによることが分かりました。・Sort(Comparison)はComparisonデリゲートから返された値が、負の場合に要素の位置を交換する
・デリゲートの引数の値の決め方と、処理の回数はアルゴリズムによるC#の配列やListをソートする (List.Sort)
List.Sort Method
C#の安定ソートを検討
ノームソート
【Unity】ソートアルゴリズム12種を可視化してみた
Sortメソッドの並び替え順序
ヒープソート
イントロソート
挿入ソート
C# デリゲートについて
Comparison Delegate


