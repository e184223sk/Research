More than 3 years have passed since last update.チェリー本ことプロを目指す人のためのRuby入門に『RGB変換プログラム』という例題があります。
そちらで自分なりに C# + VSCode + dotnet CLI でテスト駆動開発したのでまとめました。。プロを目指す人のためのRuby入門は Ruby プログラマーでなくても勉強になる凄い本だと思います。。ライブラリとテストのプロジェクトを構築します。visual studio code でtdd-csharpディレクトリを開く。Required assets to build and debug are missing from 'tdd-csharp'. Add them?と聞かれるので Yes を選択。正しく作成できたか.csprojを確認tdd-csharp.Lib/class1.csを削除して、ColorConveter.csを作成する。
メソッドは未実装例外をスローする仮実装。tdd-csharp.Test/UnitTest1.csを削除する。
先に失敗するテストを書く。テストを実行する。
未実装例外で失敗するが、プロジェクト参照ができてビルドが通ることは確認できる。期待値をそのまま返してテストが通るコードにする。今度は成功する。検証コードを追加する。
複数ケースでテストするから XUnit のパラメータ付きテスト形式にする。テストを実行する。固定値を返しているから失敗する。ColorConverter.ToHexをちゃんと実装する。intを16進数stringにするには以下の方法がある。短い$""文字列補間を使うことにする。※簡単な C# コードを検証するときはcsi.exeとかTry.Netが便利。
※Try.Netはブラウザで実行できる C# のコードランナー。数値を0埋めのstringにする場合は書式設定でできる。ただ、今回は対象が16進数stringなので数値-&gt;文字列の書式設定ができない。なので2文字になるまで左側に'0'埋めはstring.PadLeftでやる。ColorConverter.ToHex()メソッドはこうなる。テストを通す。さらにテストケースを追加する。3つ目のテストケースも通る。.PadLeft(2, '0')が3回登場している。
これでは何か変更があったときに3か所も直す必要がある。
配列に入れて繰り返し処理にする。メソッドが壊れていないかテストするforeachが使えるということは LINQ が使える。
Enumerable.Aggregateを使うともっと短くできる。
整数の配列new int[]も匿名型の配列new[]にできる。型は推論してくれる。デグレしていないか確認する。これでリファクタリングは終了。まず失敗するテストコードから。ColorConverter.cs を開き未実装例外をスローするtoRgbを定義。ColorConverterTest.csを開きテストを追加する。タプル同士を ==、!= 演算子で比較できるようになったのは C# 7.3 からなので設定する。
*.csprojに&lt;LangVersion&gt;7.3&lt;/LangVersion&gt;もしくはを&lt;LangVersion&gt;latest&lt;/LangVersion&gt;追加する。Ctrl + ,で Visual Studio Code の設定を開く。
以下の設定を追加。ビルドを通す。ominisharp が最新バージョンになっていない場合、ダウンロードとインストールされる。
うまくいかない場合、一度 Visual Stuidio Code を閉じてからもう一度行うとうまくいく。ビルドが通ったので、テストする。未実装例外で失敗する。
テストをパスする仮実装をする。仮実装がテストをパスすることを確認。パラメータ付きテストに書き換えて、2つ目のテストケースを追加する。InlineData属性引数に直接タプルを渡したかったけど、
An attribute argument must be a constant expression, typeof expression or array creation expression of an attribute parameter type [tdd-csharp.Test]
と怒られるので上記のようになった。メソッドの引数に直接タプル書くのはできるけどInlineDataにはダメだった。テストを実行する。固定値を返しているためテストが失敗する。
※タプル同士の比較はメンバーごとの == を &amp;&amp; で繋いだものに展開される。ToRgbの実装に入る。16進数stringを数値に変換する方法簡単なConvert.ToInt32を使う。ToRgbの実装は以下のようになる。テストを実行する。ちゃんとパスすることを確認。
さらにテストケースを追加する。3つ目のテストケースも無事パス。カンマで区切ることで複数の変数を同時に宣言できる。正規表現を使えばSubstringを3回書かなくても1度で取得できる。
\wは単語に使用される正規表現。アルファベット、数字、アンダーバー(_)、ひらがな、カタカナ、漢字などにマッチする。2文字ずつ取得するので以下のようになる。Regex.Matchesはマッチした文字列をMatchCollectionで返す。
MatchCollectionはIEnumerable&lt;T&gt;を実装していないので.Cast&lt;Match&gt;()している。テストをパスすることを確認しリファクタリングを終了。ユニットテストの AAAXUnit のテストメソッドの属性その他テスト用語テスト駆動開発のサイクルRed -&gt; Green -&gt; Refactor最終的なソースコード


