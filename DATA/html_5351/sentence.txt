More than 3 years have passed since last update.プログラム経験はそこそこあるものの、ゲーム開発経験は薄い私が、Unity の初心者向けチュートリアル はじめてのUnity を今日一日で、えいやっ！と試してみたときのメモです。私の悪い癖で、変に細かいところばかり気になり、横道にばかり反れますが… まあ、そんな面倒な初心者もいるんだな、などと、生温く見守っていただければ幸いです。ほんの少しでも、新しい興味のきっかけや、何かの参考になることがあれば嬉しいです。Unity の ダウンロードサイト から Free 版をインストールします。Windows 用の Unity 2017.4.0f1 Personal (64bit)。最初の起動で Unity アカウントの新規登録もできました。最初のページ プロジェクトを作成する から順に実施していきます。「シーンを保存する」でファイルが作成されたようなので、一応、確認してみます。拡張子が .unity なファイルの中身は YAML 形式のようですね。念のためバックアップをとっておきますw2ページ目の ステージを作成 に進み、「3D Obejct」の「Plane」を作成します。初の「GameObject」の作成！ですね。記念してさきほどの stage01.unity ファイルを見て、追加されたものを見てみましょう。かなりの情報が増えています…細かな値はわかりませんが、ざっと眺めると以下のことに気がつきます。そしてアプリ右側の Inspector をみると、作成した GameObject に対して、その下にこれら4つに対応した設定欄があることに気がつきます。なるほど、って感じですね。さて、「四枚のPanelを設定」まで作業を進めましょう。Panel はマウスでおおまかに移動した後、右側の Inspector で Position の数値で整列・微調整するほうが楽ですね。Panel が3枚追加されたことにより、stage01.unity ファイルの記述はだいぶ増えています。まあ同じ Panel なので大差はないでしょうから、最初に追加した Panel の項目の変化だけ見ておきましょう。最初に追加した Panel は名前を「Ground1」に変え、位置を移動しました。その変化が stage01.unity ファイルにダイレクトに反映されていますね。わかりやすくて好感がもてます。さて「床の色を塗る」に進みましょう。Materialファイルを作成すると、mat ファイルというのが新しく作成されました。さきほど 3D Object の Panel を追加するときには「HierarchyブラウザでCreate」で、これは Scene のファイルに追記されました。それに対して今回の Material は「ProjectブラウザでCreate」で、こちらは別ファイルが作成されました。この動作の違いは要注意、な気がします。作成した mat ファイルは、以下のように stage01.unity ファイルから参照されているようです。ファイル名でなく ID で管理されているようですね。なお床のテクスチャの選択の際に Default-Checker を選択しますがこれは Unity ツールのインストール先にある、以下のリソースの中にあるようです。さて、壁の作成はこれまでの延長ですから、サクサク進めます。こんなに簡単にステージが作成できるなんて、嬉しいですねぇ。引き続き、「オブジェクトの整理」にはいります。Projectブラウザでフォルダを作って整理すると、実際のファイル階層もそれに連動します。わかりやすくていいですよね。それに対してHierarchyビューで「Stage」オブジェクトを作成して配置すると、例によって、Scene ファイル(stage01.unity) の記述が変更されます。以下が実際に追加された記述ですが、empty オブジェクトだけあって、GameObject と Transform しか作成されないようです。そして Transform の m_Children には下に配置したオブジェクトのIDが並んでいますね。また Stage の下に移動したオブジェクトの記述も以下の部分が変更されています。親の指定が 0 だったのが上記の stage の Transform の ID になり、また(親の下での)並び順が変化しています。※ Parent ではなく Father なんだ… ちょっと珍しいwTransform は画面上の配置だけでなく、Hierarchyビューにおける配置場所も指定している、のが面白いところです。このページの最後に「Stageを静的なオブジェクトとして配置する」を実施します。Static 化を実施すると ファイルのほうでは、0 だった以下のフィールドに値が設定されるようです。同時に設定した Stage および配下の GameObject の m_StaticEditorFlags に 4294967295 という数値が設定されますが、この数は16進数だと32ビットの FFFF FFFF になるので、まあフラグ値なのでしょう。3ページ目の プレイヤーの移動 に進み、「3D Obejct」の「Sphere」を作成します。物理モデルを追加することで再生すると落下するようになりますね。この物理モデルですが、例によってシーンファイルには以下のように追記されました。設定画面とセーブファイル、対応がわかりやすくていいですね。ちょっとの修正であれば、テキストエディタで実施できちゃうかも？キタ！スクリプトの追加です。今回のチュートリアルでは C# で記述していますが、私は JavaScript のほうが得意なので、あえて UnityScript で記述してみます。あれ、C# しか選べないぞ……ググってみると、Unity 2017.2あたりからサポート外になった模様。なんてこった、Unityを選んだ最大の理由が消えちまったぜ！まあ C# も少し経験あるので、古の記憶を呼び覚ましつつ、まずはコピペで進めましょう(ぉぃ)最初に表示されたコードは以下ですが、説明に従い、さくっと空にします。そしてコードを追加していくわけですが、と Public 変数を追加しただけで、Inspector 上に自動で設定欄が表示されて連動するだなんて、便利な時代になりましたなー (ジジィ的感想)とまあこれで再生すると、カーソルキーやゲームパッドで Player の球を動かすことができるようになりました。いい感じで進んでいます。4ページ目の カメラを動かす に進みましょう。このページはコードをそのまま利用しただけなのですが、以下の Target 欄に Player オブジェクトを設定するところで、(Transform) と表示されているのが興味深かったです。Payer は GameObject だと単純に思っていたのですが、ここで渡されているのは、それに含まれる Transform のほうなのですね。FollowPlayer の C# コード内でクラスの指定があるので納得の動作なのですが、変数定義をみてちゃんと値を渡しているのが地味に凄いな、と。いやほんと、便利な時代に… (以下略)ちなみに Target 欄に関しては当然ですが、Scene ファイル(stage01.unity) に追記されます。ここで ID に指定されている 1736258363 は、Player に関連付けられた Transform の ID です。5ページ目の アイテム回収の追加 に進みましょう。ここで新しく出てきたのが「HierarchyビューのItemを選択し、ProjectブラウザのPrefabフォルダへドラッグ＆ドロップ」する操作です。結果として Item.prefab ファイルが生成され、その中身は以下になります。これまでオブジェクトを作成するごとに Scene ファイル (stage01.unity) に追加してきた定義と同じようにみえます。HierarchyビューにもItemが残りますが、若干、色が変わったような？ Scene ファイル(stage01.unity) に追加された情報も確認してみましょう。Scene ファイル(stage01.unity) に残されたほうの Item は、Item.prefab に記載された内容への参照で、だいぶ情報の量が少ないようにみえます。更に Item を増やしてみると、その目的は明確になります。2つ目の Item も上記とほぼ同じ参照情報で、名称など変更点が追記されています。私の理解した Item.prefab ファイルの役割とはItem.prefab ファイルは、Scene に配置した Item たちのスーパークラスで、全ての情報をもっている。Scene で使用される各 Item はこれとの差分情報だけをもつため、少ない情報量で多くの Item オブジェクトを利用できる。という感じでしょうか。データと比較してみて気がついたのですが、Inspector で太字で表示されている項目が、その Item 用に差分として管理されている情報のようです。prefab はなかなか面白い仕組みで、これがドラッグ一発で設定できるのは楽で良いですね。6ページ目の ゲームのUIを追加する に進みましょう。ここでの注目は、スクリプト中で用いられた MonoBehaviour.Update() 関数でしょうか。「Update は MonoBehaviour が有効の場合に、毎フレーム呼び出されます」だそうで、ゲームでは便利に使えそうですね。今回のサンプルのように、画面には表示されない Controller オブジェクトにまとめて実装するのが管理しやすそうです。7ページ目の ゲームのクリアを追加する に進みましょう。このページは今までの技術の応用で、特に注目すべき点は無いような気もしますが。チェックボックスを外すことで最初は非表示にしておいたオブジェクトをC# コードのほうで条件をみて表示させるあたりはいろいろ応用がききそうですね。いよいよ最後のページ、障害物とリスタート に進みましょう。ここで障害物を追加して、やっとゲームとして完成です。今までの技術の応用がほとんどですが、Material で Emission を設定するだけで、簡単に障害物を光らせることができるのは、さすがですね。また Player のボールが障害物の壁に当たった時にと、シーンの再読み込みですぐにゲーム再開できるのは面白いところです。SceneManager をうまく利用して、タイトルやゲームオーバー用の Scene を追加し、そちらに遷移させることで、よりゲームらしいサンプルに拡張できそうですね。また最後にある注釈に従って、ライティング設定の最後にある Auto のチェックを外さないと、画面が暗くなる症状が発生しました。全部が終わったあとに、あらためて公式サイトのチュートリアルを眺めているのですが インターフェースと基本 は必見！ですね。先に観ておけば良かった… と少し後悔してみたり。また今回のチュートリアルとほぼ同じゲームを作成するビデオ 玉転がし(9) があるんですが、今回のと比較しながら観てみると面白いです！同じことやるのに、そういう設定の仕方もあるのか！そう操作すると早いのね！などと。理解がかなり深まります。これらビデオ系のチュートリアルなんですが、けっこう日本語字幕が付いています。付いていなくとも自動翻訳の機能があり日本語を指定できるので、英語が苦手な人でもあまり問題なく理解できるとおもいます。たまに訳されすぎるので、おや？と思ったところは英語字幕に戻して見直してみると更に良し！以上、Unity のチュートリアル 「はじめてのUnity」に従って簡単なサンプルゲームを作成してみました。簡単なコードを書くだけで、これだけちゃんと動作するゲームが作成できるのは素晴らしいですね。みなさんも是非、Unity で遊んでみてください。


