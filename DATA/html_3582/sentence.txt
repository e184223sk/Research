More than 1 year has passed since last update.最近、Unity のDIフレームワーク Zenject に触れる機会がありました。過去に業務で、Java の DIフレームワーク Spring (厳密にはWeb開発向けの Spring Boot )を利用したことがあるので、その比較をしてみたいと思います。DIとは何か？については、過去にこんな記事を書いたので、興味があればご覧ください。
肥満な物語でDIを解説するクラスのフィールドに注入の設定を記載することをフィールドインジェクションと呼びます。Zenjectでは [Inject] 、Spring では @Autowired を使います。記述方法がかなり似ていますね。コンストラクタインジェクションについては、特に違いはありませんでした。Spring界隈では、フィールドインジェクションはなるべく使わずに、コンストラクタインジェクションを積極的に利用しよう！という声が多い気がしますが、Zenject界隈では特にそういう声はきかない気がします。インスタンスをコンテナに対して１つだけ作ることを、Springではシングルトンと呼びます。
Zenjectでは AsSingle() というメソッドがあります。Springでは、 @Scope("singleton") というアノテーションを利用します。ただ、Springの場合、デフォルトでシングルトンなので、実は、 @Scope("singleton") は省略可能です。インスタンスを再利用せずに、注入要求があるたびに、別々のインスタンスを生成することを、Springではプロトタイプと呼び、Zenjectではトランシェントと呼ぶようです。Zenjectでは AsTransient() を利用します。Springでは、 @Scope("prototype") を利用します。C#とJavaが似ているからかもしれませんが、Zenject と Spring はかなり似ているなぁと思いました。
SpringはWebバックエンド開発、Zenjectはゲームシステム開発と、利用シーンが全然違いますが、そのどちらでも利用されるDIというアーキテクチャは本当にすごいなぁと改めて思いました。


