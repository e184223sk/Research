More than 1 year has passed since last update.2019/07/03 目次を追記
記事が多数になってしまったので、他記事へのリンクを追加しました。UiPath Studio 2018.3 Early access - Beta release をさわってみた2 (カスタムアクティビティ) にて、2018.3版から導入される新しいカスタムアクティビティの作成方法をしらべました。そうしたら「既存のアクティビティを呼び出す、アクティビティ」などは簡単に作成できるのですが、たとえばこのような、GUIをもつようなアクティビティはどうやら作成することが出来ないことがわかりました。ってなわけでやっぱり、2018.2までの既存のカスタムアクティビティの作り方は知っておく必要がありそう、となりましたので、整理しておきます。。ただ、先人の知恵には感謝です。
【UiPath】カスタムアクティビティの作成（事前準備と実践初級）  このページに、かなりの情報が整理されていました！！いつも参考にさせていただいています。感謝します！https://visualstudio.microsoft.com/ja/vs/ より Visual Studio Community をインストール。2018/10/02現在2017版が最新ぽい。 次へ次へでインストールできますが、「個別のコンポーネント」タブで Windows Workflow Foundation を選択することを忘れずに。。いわゆる *.nupkg を作成するコマンドラインツール。コレを使って自作アクティビティが入ったDLLをnupkgに格納します。
https://www.nuget.org/downloads よりダウンロードして、任意の場所に解凍しておきましょう。UiPathの出している Creating a Custom Activity コレを追っかけつつ「stringの配列を渡したらWindowsのパスを生成して返してくれる」ようなアクティビティを作ってみます。こんな感じにWindowsのパスを返してくれます。
Visual Studioを起動し、ファイル &gt;&gt; 新規作成 &gt;&gt; プロジェクト を選択
Visual C# &gt;&gt; クラスライブラリ(.NET Framework)を選択
としました。Gitで管理したい人は適宜「新しいGitリポジトリの作成」を選択します。つづいて、アクティビティ作成のためのライブラリの参照を追加します。メニューより、 プロジェクト &gt;&gt; 参照の追加 を選択し
下記の通り、にチェックを入れてOKをクリックします。
さて、アクティビティを追加していきます。ソリューションエクスプローラの「Path」ってなってるアイコンを右クリックして、 追加 &gt;&gt; 新しい項目 を選択Workflow &gt;&gt; コードアクティビティを選択。クラス名は「Combine.cs」としました。
C#のソースコードが追加されたと思います。追加したソースは、初期状態は、こんな感じになっています。InArgument はこのアクティビティの引数、Execute メソッドはこのアクティビティが実行されたときの処理を記述するメソッドです。あとでもうすこし整理しますが、とりあえず下記の通り、 OutArgument なプロパティを一つ定義しました。このOutArgument なプロパティは、Executeの実行結果を格納するためのプロパティです。Executeでは InArgumentの値にHello Worldを追記して、OutArgumentにSetしています。つづいて、GUIクラスを追加します。さきほど同様、ソリューションエクスプローラを右クリックして、 追加 &gt;&gt; 新しい項目 を選択し、次は、 Workflow &gt;&gt; アクティビティデザイナー を選択します。クラス名は「CombineDesigner.xaml」としました。
下記のようなGUIエディタが起動すると思います。
先ほどのC#のソース Combine.cs に、このXAMLファイルとの紐付けなどをおこなったり、このエディタでUIを構築したりしていきますが、いったんそれらは後回しにして先に進みます。つづいて、アクティビティが格納されるnupkgの元になる情報を作成していきます。ソリューションエクスプローラを右クリックして プロパティを選択
表示される画面で一番うえの「アプリケーション」を選択します。

アセンブリ名: ActivitiesPathUtils とします。ちなみに  Creating a Custom Activity ここにImportant!
The NuGet Package Id field must contain the keyword “Activities” to appear in the Manage Packages window, in Studio.と書いてあるとおり、アセンブリ名は 「Activities」という文字列を含んでいる必要があるようです。2018/10/18追記上記の通り ActivitiesPathUtils にしたアセンブリ名ですが、https://www.nuget.org/packages/UiPath.Platform.Activities/ にあるライブラリを見た感じだと、ネーミングは kino.UiPath.Utils.Activities
とかのほうが、それっぽいですね。。2018/10/18追記 ここまでまた アセンブリ情報 のボタンをクリックし、
などと入力しておきます。タイトルとか説明は、まあなんでも結構です。ここまでで一度ビルドします。ツールバーの Debug をReleaseへ変更し、
ビルド&gt;&gt;ソリューションのビルド を選択します。

出力(コンソール)のところに、下記のようなActivitiesPathUtils.dll が出力された、的な文言が表示されていればOK。そのバスに実際にDLLが出力されていることを確認しましょう。ソースコードを含んだDLLが作成できたので、そのファイルをnupkgにパッケージングしていきますが、そのための設定ファイルをnuget.exeを使って作成します。具体的には下記の通り、.Netのプロジェクトファイル Path.csprojがあるディレクトリに移動して、下記コマンドを実行します。あ、nuget.exeにはパスを通しておくか、事前準備で配置した場所をフルパス指定してください。というメッセージが表示され、下記のようなxmlファイル(Path.nuspec)が作成できたと思います。コレを書き換えていきますが、結論いうと下記の通り書き換えればOKです。version など、さっき記載したアセンブリ情報のプレースホルダになってる箇所はそのままにしつつ、authorsはプレースホルダがないっぽいので固定的に。xxx_URL_HERE_OR_DELETE_THIS_LINEの箇所はとりあえず行削除。このうち、については、DLLファイルをlibディレクトリ直下に配置せよっていう指示ですが、コレを書かないとUiPath Studioでは参照されない箇所(lib¥net461 っていうディレクトリ配下)にDLLが置かれるっぽく、その対応のためのおまじないです。正しい対策方法があればしりたいのですが、今回はコレで行きます。ちなみに上記のディレクトリ階層(lib¥net461)は、.Netのバージョン毎にDLLを置くための配慮みたいですね。。2018/10/18追記
他のヒトの nupkgを見てて、こうやればよさそうってのが分かってきたので整理しました。ちょっと分量があったので、UiPathのカスタムアクティビティのnupkgの作り方(元記事の訂正) にまとめました。
2018/10/18追記 ここまでようやくnupkgを作成します。先ほどのディレクトリで、下記の通りコマンドを実行します。なんか色々と怒られてますが、Path.nuspec と Path.csproj などに記載している情報を元に、ActivitiesPathUtils.0.0.1.nupkg を作成することが出来たと思います。遭遇したトラブルとしては、一度ビルドをしないとDLLが見つからないっていうエラーが出る、ソースを修正したあとは、ビルド &gt;&gt; ソリューションのクリーン、と、ビルドをしないと旧DLLがパッケージされちゃう、-Prop Configuration=Release オプションをつけないと、Debugの方のDLLも入れようとしてエラーになっちゃう、などがありましたのでご注意。2018/10/18追記ソースを修正したらソリューションのクリーンとビルドをしないと旧DLLがパッケージされちゃう件は「ソリューションのリビルド」でもよさそうです。2018/10/18追記 ここまで最後に、このnupkgが置かれる場所(今回は Z:\git\Path\Path ってなってます)を、Visual Studioのパッケージマネージャ配置場所として指定します。このVisual Studioのパッケージマネージャの設定は、Visual Studioに追加機能としてインストールするモジュール達の配布場所を設定する箇所で、URLやローカルのパスを指定することが出来ます。で、この指定はどうやらUiPath Studioと共通になってるぽく、ここに設定するとUiPath Studio側にも追加されます。なのでどっちのStudioでやってもイイのですが、今回はVisual Studio側でやります。ツール &gt;&gt; NuGet パッケージマネージャ &gt;&gt; パッケージマネージャ設定 を選択
パッケージソースを選択、右上のプラスアイコンで、パッケージソースを追加
名前とソース(ファイルパス)を設定します。名前は何でもよく、ソースは、先ほどのnupkgが置かれた場所(Z:\git\Path\Path) を指定しました。で更新をクリックすると
下記の通り、利用可能なパッケージソース に追加されたので、OKをクリックします。
パッケージソースの場所は今回  Z:\git\Path\Path っていう中途半端な場所になりましたが、実運用を考えたパッケージソースの場所は、ちゃんと検討が必要になりそうですね。以上で、Visual Studioでの作業は完了です。やったことを整理すると、などになります。ソースコードの修正はこの次のサイクルでやるとして、つぎはこのnupkgをUiPath Studioへ配布・インストールしてみます。UiPath Studioでプロジェクトを開始後、Activities ペインの段ボールっぽいアイコン(Manage Packagesて書いてある)のをクリック。
表示されるダイアログの、Available &gt;&gt; ALL をクリックします。先ほどの nupkgが表示されればOKです。ときおりナゼか表示されないこともあって、上部の検索ボックス(Search in Available)をいじると出てきたり、微妙に不安定な気がしますorz。。まあ、表示されたら Install をクリックしてnupkgをインストールします。
インストールがうまくいったら、Installed &gt;&gt; ALLをクリックして、下記の通りインストール済みであることを確認してください。
StudioのActivityペインに、インストールしたアクティビティが表示されていると思いますので、ドラッグアンドドロップしてみましょう。
先ほど作成したアクティビティのソースと見くらべてみると、Combine.csで定義したプロパティ:が、Studio上のPropertiesに対応しています。
Textに定義された「"こんにちは"」がExecute でと処理されてresultへセットされ、Studio上でresult 変数に格納され、それをつぎのアクティビティ Write lineでコンソール出力しています。実行してみると、
うごきましたねーー。。。ひきつづきなどをやりたいのですが、とても長くなったのでまずはここまで。本丸は次回です。。https://github.com/masatomix/UiPath_Path/tree/0.0.1
に配置しました。


