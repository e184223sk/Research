More than 1 year has passed since last update.C#で文字列検索には、string.Containsメソッドやstring.IndexOfメソッドを使用してきました。しかし、これらの方法より速く検索できる方法があるのでないのかと思い、調べたところ、接尾辞配列(suffix array)というものが文字列検索で利用されている記事が多くあったことから、実装してみました。接尾辞配列（せつびじはいれつ）やサフィックス・アレイ（英: suffix array）とは、文字列の接尾辞（開始位置を異にし終端位置を元の文字列と同じくする部分文字列）の文字列中の開始位置を要素とする配列を、接尾辞に関して辞書順に並べ替えて得られる配列である。
(引用先)：Wikipedia 接尾辞配列まず、接尾辞配列を作成するメソッドを作成しました。動作には問題なかったのですが、接尾辞配列を作成しているCreateSuffixArrayメソッドがかなり時間を使っていました。確認したところ、連番の配列を作成する際、Enumerable.Rangeで列挙したオブジェクトをToListメソッドで実体化させて作成していましたが、要素数が多くなるとかなり時間がかかっていました。ToArrayメソッドでも試してみましたが、少しだけ速くなった程度でした。
そのため、Enumrable.Rangeではなく、普通に配列を作成してforループで値を代入したところ、速度は改善しました。※Enumrable.Range.ToListとEnumrable.Range.ToArrayと配列生成+forループの3種類で、0～10000の連番配列を1000回作成した時間を測定しました。測定にはStopWatchクラスを使用しました。次に、Sort部分がかなり時間がかかっていました。そのため、List.Sortの内部動作をReference Sourceで確認したところ、ソートに関してはArray.Sortが行っていることがわかったので、ソート部分をArray.Sortに変更し、文字列比較にもstring.Compareからif文やnull判定など無くしたCultureInfo.CurrentCulture.CompareInfo.Compareにしましたが、そこまで大きく速度は変化しませんでした。やはり、接尾辞配列作成の際に使用するソート部分にかかる時間を何とかしないと、実用的には使えなさそうです。接尾辞配列の構築の高速化には、SA-IS法というものがあるらしいので、次回に実装して速度を確認してみます。今日のところはこのくらいで...。何か間違い、良い方法などあればコメントで情報提供よろしくお願いします。


