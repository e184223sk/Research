
using System.Collections.Generic;
using UnityEngine.Events;

/// &lt;summary&gt;
/// UnityAction拡張イベントクラス ver引数なし
/// &lt;/summary&gt;
public class UnityActionWrapper
{
    /// &lt;summary&gt;
    /// イベント.
    /// &lt;/summary&gt;
    public event UnityAction Event
    {
        add { lock (_event) _event += value; _delegates.Add(value); }
        remove { lock (_event) _event -= value; _delegates.Remove(value); }
    }
    private event UnityAction _event = () =&gt; { };
    private List&lt;UnityAction&gt; _delegates = new List&lt;UnityAction&gt;();

    /// &lt;summary&gt;
    /// Add 拡張演算子.
    /// &lt;/summary&gt;
    public static UnityActionWrapper operator +(UnityActionWrapper self, UnityAction del)
    {
        lock (self._event)
        {
            self._event += del;
            self._delegates.Add(del);
        }
        return self;
    }

    /// &lt;summary&gt;
    /// Remove 拡張演算子.
    /// &lt;/summary&gt;
    public static UnityActionWrapper operator -(UnityActionWrapper self, UnityAction del)
    {
        lock (self._event)
        {
            self._event -= del;
            self._delegates.Remove(del);
        }
        return self;
    }

    /// &lt;summary&gt;
    /// 登録されているメソッドを実行します.
    /// &lt;/summary&gt;
    public void Invoke()
    {
        if (_event != null) _event.Invoke();
    }

    /// &lt;summary&gt;
    /// 登録されているメソッドを全てremoveします.
    /// &lt;/summary&gt;
    public void Clear()
    {
        foreach (var del in _delegates)
        {
            _event -= del;
        }
        _delegates.Clear();
    }
}

/// &lt;summary&gt;
/// UnityAction拡張イベントクラス ver引数1
/// &lt;/summary&gt;
public class UnityActionWrapper&lt;T0&gt;
{
    /// &lt;summary&gt;
    /// イベント.
    /// &lt;/summary&gt;
    public event UnityAction&lt;T0&gt; Event
    {
        add { lock (_event) _event += value; _delegates.Add(value); }
        remove { lock (_event) _event -= value; _delegates.Remove(value); }
    }
    private event UnityAction&lt;T0&gt; _event = arg0 =&gt; { };
    private List&lt;UnityAction&lt;T0&gt;&gt; _delegates = new List&lt;UnityAction&lt;T0&gt;&gt;();

    /// &lt;summary&gt;
    /// Add 拡張演算子.
    /// &lt;/summary&gt;
    public static UnityActionWrapper&lt;T0&gt; operator +(UnityActionWrapper&lt;T0&gt; self, UnityAction&lt;T0&gt; del)
    {
        lock (self._event)
        {
            self._event += del;
            self._delegates.Add(del);
        }
        return self;
    }

    /// &lt;summary&gt;
    /// Remove 拡張演算子.
    /// &lt;/summary&gt;
    public static UnityActionWrapper&lt;T0&gt; operator -(UnityActionWrapper&lt;T0&gt; self, UnityAction&lt;T0&gt; del)
    {
        lock (self._event)
        {
            self._event -= del;
            self._delegates.Remove(del);
        }
        return self;
    }

    /// &lt;summary&gt;
    /// 登録されているメソッドを実行します.
    /// &lt;/summary&gt;
    public void Invoke(T0 arg)
    {
        if (_event != null) _event.Invoke(arg);
    }

    /// &lt;summary&gt;
    /// 登録されているメソッドを全てremoveします.
    /// &lt;/summary&gt;
    public void Clear()
    {
        foreach (var del in _delegates)
        {
            _event -= del;
        }
        _delegates.Clear();
    }
}

/// &lt;summary&gt;
/// UnityAction拡張イベントクラス ver引数2
/// &lt;/summary&gt;
public class UnityActionWrapper&lt;T0, T1&gt;
{
    /// &lt;summary&gt;
    /// イベント.
    /// &lt;/summary&gt;
    public event UnityAction&lt;T0, T1&gt; Event
    {
        add { lock (_event) _event += value; _delegates.Add(value); }
        remove { lock (_event) _event -= value; _delegates.Remove(value); }
    }
    private event UnityAction&lt;T0, T1&gt; _event = (arg0, arg1) =&gt; { };
    private List&lt;UnityAction&lt;T0, T1&gt;&gt; _delegates = new List&lt;UnityAction&lt;T0, T1&gt;&gt;();

    /// &lt;summary&gt;
    /// Add 拡張演算子.
    /// &lt;/summary&gt;
    public static UnityActionWrapper&lt;T0, T1&gt; operator +(UnityActionWrapper&lt;T0, T1&gt; self, UnityAction&lt;T0, T1&gt; del)
    {
        lock (self._event)
        {
            self._event += del;
            self._delegates.Add(del);
        }
        return self;
    }

    /// &lt;summary&gt;
    /// Remove 拡張演算子.
    /// &lt;/summary&gt;
    public static UnityActionWrapper&lt;T0, T1&gt; operator -(UnityActionWrapper&lt;T0, T1&gt; self, UnityAction&lt;T0, T1&gt; del)
    {
        lock (self._event)
        {
            self._event -= del;
            self._delegates.Remove(del);
        }
        return self;
    }

    /// &lt;summary&gt;
    /// 登録されているメソッドを実行します.
    /// &lt;/summary&gt;
    public void Invoke(T0 arg0, T1 arg1)
    {
        if (_event != null) _event.Invoke(arg0, arg1);
    }

    /// &lt;summary&gt;
    /// 登録されているメソッドを全てremoveします.
    /// &lt;/summary&gt;
    public void Clear()
    {
        foreach (var del in _delegates)
        {
            _event -= del;
        }
        _delegates.Clear();
    }
}

/// &lt;summary&gt;
/// UnityAction拡張イベントクラス ver引数3
/// &lt;/summary&gt;
public class UnityActionWrapper&lt;T0, T1, T2&gt;
{
    /// &lt;summary&gt;
    /// イベント.
    /// &lt;/summary&gt;
    public event UnityAction&lt;T0, T1, T2&gt; Event
    {
        add { lock (_event) _event += value; _delegates.Add(value); }
        remove { lock (_event) _event -= value; _delegates.Remove(value); }
    }
    private event UnityAction&lt;T0, T1, T2&gt; _event = (arg0, arg1, arg2) =&gt; { };
    private List&lt;UnityAction&lt;T0, T1, T2&gt;&gt; _delegates = new List&lt;UnityAction&lt;T0, T1, T2&gt;&gt;();

    /// &lt;summary&gt;
    /// Add 拡張演算子.
    /// &lt;/summary&gt;
    public static UnityActionWrapper&lt;T0, T1, T2&gt; operator +(UnityActionWrapper&lt;T0, T1, T2&gt; self, UnityAction&lt;T0, T1, T2&gt; del)
    {
        lock (self._event)
        {
            self._event += del;
            self._delegates.Add(del);
        }
        return self;
    }

    /// &lt;summary&gt;
    /// Remove 拡張演算子.
    /// &lt;/summary&gt;
    public static UnityActionWrapper&lt;T0, T1, T2&gt; operator -(UnityActionWrapper&lt;T0, T1, T2&gt; self, UnityAction&lt;T0, T1, T2&gt; del)
    {
        lock (self._event)
        {
            self._event -= del;
            self._delegates.Remove(del);
        }
        return self;
    }

    /// &lt;summary&gt;
    /// 登録されているメソッドを実行します.
    /// &lt;/summary&gt;
    public void Invoke(T0 arg0, T1 arg1, T2 arg2)
    {
        if (_event != null) _event.Invoke(arg0, arg1, arg2);
    }

    /// &lt;summary&gt;
    /// 登録されているメソッドを全てremoveします.
    /// &lt;/summary&gt;
    public void Clear()
    {
        foreach (var del in _delegates)
        {
            _event -= del;
        }
        _delegates.Clear();
    }
}

