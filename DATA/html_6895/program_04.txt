
public class Location {
    public Location() : this(0, 0) {
    }
    public Location(int x, int y) {
        this.x = x;
        this.y = y;
    }

    public int x;
    public int y;

    public static readonly Location Origin = new Location();
    public bool IsOrigin { get { return this.Equals(Origin); } }

    public int Distance(Location loc) {
        if(loc.x &lt; this.x &amp;&amp; loc.y &lt; this.y)
            return Math.Abs(this.x - loc.x) + Math.Abs(this.y - loc.y);
        else
            return Math.Abs((this.x - this.y) - (loc.x - loc.y));
    }
}

public class Slider {
    public Slider(Location sLoc, Location eLoc) {
        this.StartLoc = sLoc;
        this.EndLoc = eLoc;
    }

    public Location StartLoc { get; private set; }
    public Location EndLoc { get; private set; }
}

public class StringDiff {
    List&lt;string&gt; Operation;

    public StringDiff() {
        this.Clear();
    }

    public void Clear() {
        Operation = new List&lt;string&gt;();
    }

    public void DeleteString(string Substring) {
        Operation.Add("- " + Substring);
    }

    public void InsertString(string Substring) {
        Operation.Add("+ " + Substring);
    }

    public void AsItIsString(string Substring) {
        Operation.Add("  " + Substring);
    }

    public IEnumerable&lt;string&gt; Items {
        get {
            foreach(string item in Operation)
                yield return item;
        }
    }

    public double Similarity {
        get {
            double rdel = Ratio("- ") * 0.9;
            int cdel = Math.Sign(rdel);
            double radd = Ratio("+ ") * 0.9;
            int cadd = Math.Sign(radd);
            double rsty = Ratio("  ") * 1.0;
            int csty = Math.Sign(rsty);

            return (rdel + radd + rsty) / (cdel + cadd + 1);
        }
    }

    double Ratio(string type) {
        double len = Operation.Where(s =&gt; s.StartsWith(type)).Sum(s =&gt; s.Length - 2);
        double sum = Operation.Where(s =&gt; s.StartsWith(type)).Sum(s =&gt; Math.Pow(s.Length - 2, 2));

        return len == 0 ? 0 : sum / Math.Pow(len, 2);
    }
}

