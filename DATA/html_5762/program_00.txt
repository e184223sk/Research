using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace WpfApp1
{
    /// &lt;summary&gt;
    /// MainWindow.xaml の相互作用ロジック
    /// &lt;/summary&gt;
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        private void button_Click(object sender, RoutedEventArgs e)
        {
            MessageBox.Show(GetLocalMachineName());
        }

        public string GetLocalMachineName()
        {
            return Environment.MachineName;
        }

        private void button1_Click(object sender, RoutedEventArgs e)
        {
            MessageBox.Show(GetLocalUserName());
        }

        public string GetLocalUserName()
        {
            return Environment.UserName;
        }

        private void button2_Click(object sender, RoutedEventArgs e)
        {
            MessageBox.Show(GetOSName());
        }

        public string GetOSName()
        {
            return System.Environment.OSVersion.ToString();
        }

        private void button3_Click(object sender, RoutedEventArgs e)
        {
            String message = "";
            foreach (var prop in typeof(EnvInfo).GetProperties())
            {
                //Console.WriteLine(prop.Name + ": " + prop.GetValue(null));
                message += prop.Name + ": " + prop.GetValue(null) + "\n";
            }
            MessageBox.Show(message);
        }

        public class EnvInfo
        {
            private static string getRegistryValue(string keyname, string valuename)
                =&gt; Registry.GetValue(keyname, valuename, "").ToString();

            public static string os_version { get; }
                = Environment.OSVersion.VersionString;

            public static string os_product_name { get; }
                = getRegistryValue(@"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion", "ProductName");

            public static string os_release { get; }
                = getRegistryValue(@"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion", "ReleaseId");

            public static string os_build { get; }
                = getRegistryValue(@"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion", "CurrentBuild");

            public static string os_bit { get; }
                = Environment.Is64BitOperatingSystem ? "64 bit" : "32 bit";

            public static string process_bit { get; }
                = Environment.Is64BitProcess ? "64 bit" : "32 bit";

            public static string framework_version { get; }
                = Environment.Version.ToString();

            public static string registry_framework_version { get; }
                = getRegistryValue(@"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full", "Version");

            public static string registry_framework_release { get; }
                = getRegistryValue(@"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full", "Release");

            public static string host_name { get; }
                = Dns.GetHostName();

            public static string machine_name { get; }
                = Environment.MachineName;
        }

        private void button4_Click(object sender, RoutedEventArgs e)
        {
            System.Diagnostics.Process.Start(@"c:\Windows\System32\mspaint.exe");
        }

        private void button5_Click(object sender, RoutedEventArgs e)
        {
            System.Diagnostics.Process.Start(@"c:\Windows\System32\notepad.exe");
        }

        private void button6_Click(object sender, RoutedEventArgs e)
        {
            //notepadのプロセスを取得
            System.Diagnostics.Process[] ps =
                System.Diagnostics.Process.GetProcessesByName("notepad");

            foreach (System.Diagnostics.Process p in ps)
            {
                //プロセスを強制的に終了させる
                p.Kill();
            }
        }

        private void button7_Click(object sender, RoutedEventArgs e)
        {
            double fsize = button7.FontSize;
            if (fsize == 16.0)
            {
                button7.FontSize = 10.0;
                button7.Content = "FontSize";
            }
            else
            {
                button7.FontSize = 16.0;
                button7.Content = "Control font size changes from 10 to 16.";
            }
        }

        private void button8_Click(object sender, RoutedEventArgs e)
        {
            System.Diagnostics.Process.Start(@"c:\Windows\System32\DisplaySwitch.exe", "/internal");
        }

        private void button9_Click(object sender, RoutedEventArgs e)
        {
            System.Diagnostics.Process.Start(@"c:\Windows\System32\DisplaySwitch.exe", "/clone");
        }

        private void button10_Click(object sender, RoutedEventArgs e)
        {
            System.Diagnostics.Process.Start(@"c:\Windows\System32\DisplaySwitch.exe", "/extend");
        }

        private void button11_Click(object sender, RoutedEventArgs e)
        {
            System.Diagnostics.Process.Start(@"c:\Windows\System32\DisplaySwitch.exe", "/external");
        }
    }
}

