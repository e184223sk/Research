
public class UserInfo : IEnumerable&lt;string&gt;
{      
  public UserInfo(List&lt;String&gt; userList)
  {
    var properties = typeof(UserInfo).GetProperties();
    NameList = new List&lt;string&gt;();
    //propertiesから、各Name取り出し
    foreach (var (name, index) in properties.Select((prop, index) =&gt; (prop.Name, index)))
    {
      if(index == properties.length - 1)
      {
        //配列の最後はthisプロパティなので、スキップする
        break;
      }
      //UserInfoのプロパティ名のリストを作成
      NameList.Add(name);
      //全プロパティを初期化
      this[name] = headerlist[index];
    }
  }
  public string ID{get;set;}
  public string Name{get;set;}
  public string Password{get;set;}
  public string email{get;set;}
  //プロパティのインデックス用途
  private List&lt;string&gt; NameList;

  //添字でのアクセス用
　private string this[string propertyName]
  {
    get =&gt; typeof(UserInfo).GetProperty(propertyName).GetValue(this).ToString();
    set =&gt; typeof(UserInfo).GetProperty(propertyName).SetValue(this, value);
  }
  //インデクサでのアクセス用
  public string this[int num]
  {
    get =&gt; this[NameList[num]];
    set =&gt; this[NameList[num]] = value;
  }
  //リスト型への代入用
  public List&lt;string&gt; ToList()
  {
    var res = new List&lt;string&gt;();
    NameList.ForEach(name =&gt; res.Add(this[name]));
    return res;
  }
  public IEnumerator&lt;string&gt; GetEnumerator()
　{
　　for (var i = 0; i &lt; NameList.Count; i++)
　　{
　　　yield return this[i];
　　}
　}  
　System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
　{
　  return this.GetEnumerator();
　}
}

