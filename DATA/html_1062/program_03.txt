
using NUnit.Framework;
using MessagePipe;
using Zenject;
using UnityEngine;
using System;

namespace XXXX
{
    public class DisposableTest
    {
        // イベント送る方
        public class Publisher
        {
            [Inject] private IPublisher&lt;MyEvent&gt; _publisher;

            public void Send(MyEvent ev) =&gt;
                _publisher.Publish(ev);
        }

        // イベント受け取る方
        public class Subscriber : IDisposable
        {
            private readonly IDisposable _disposable;

            public Subscriber(ISubscriber&lt;MyEvent&gt; subscriber)
            {
                var bag = DisposableBag.CreateBuilder();

                subscriber
                    .Subscribe(x =&gt; Debug.Log($"{x.Message}"))
                    .AddTo(bag);

                _disposable = bag.Build();
            }

            void IDisposable.Dispose()
            {
                _disposable.Dispose();
            }
        }

        // 送るイベント
        public class MyEvent 
        { 
            public string Message; 
        }


        private DiContainer _container;

        /// &lt;summary&gt;
        /// SubscribeのIDosposableをかならず何らかの形でハンドリングする必要がある。
        /// しなければリークする
        /// &lt;/summary&gt;
        [Test]
        public void イベントを破棄する()
        {
            _container = new DiContainer();

            var option = _container.BindMessagePipe();
            _container.BindMessageBroker&lt;MyEvent&gt;(option);

            // イベントを受ける方
            using (_container.Instantiate&lt;Subscriber&gt;())
            {
                // イベントを投げる方
                var publisher = _container.Instantiate&lt;Publisher&gt;();
                publisher.Send(new MyEvent { Message = "テストメッセージ" });
            }
        }
    }
}

