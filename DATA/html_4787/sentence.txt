More than 3 years have passed since last update.おそらくは、大部分の方は、感覚的に使い分けれていると思いますが、なぜそうなるかを理解できていないと、思わぬところで不具合を生み出します。※誤ったコーディングにつながると感じる内容がありましたら指摘いただけると助かります。string 変数を別 string 変数に代入して値を変更した場合、それぞれの値はどのようになるでしょう？値型の場合は、変数そのものに値が格納されます。
ですので、個々の変数は完全に独立し、a2 の値を変更した場合は、a2 の値だけが変わります。StringBulider 変数を別 StringBulider 変数に代入して値を変更した場合、それぞれの値はどのようになるでしょう？参照型の場合は、変数には値に紐づくアドレスが格納されます。
ですので、b1 に b2 を代入した場合は、両方の変数には同一の値に紐づくアドレスが格納されるため、b2 の値を変更した場合は、b1 の値も変わります。string 変数を、関数に「値渡し」と「参照渡し」で設定し、関数内で値を変更した場合、呼び出し元の変数の値はどうなるでしょう？引数の値渡しの場合（c1→pv）は、受け取った値（"aaa"）を変数を引数に格納して処理されます。ですので、pv の値を変更しても、呼び出し元の c1 の値は変更されません。
一方、引数の参照渡しの場合（c2→pr）は、受け取った変数（c2）を引数に格納して処理されます。ですので、pr == c2 となり、pr の値を変更すると、c2 の値も変更されます。StringBuilder 変数を、関数に「値渡し」と「参照渡し」で設定し、関数内で値を変更した場合、呼び出し元の変数の値はどうなるでしょう？引数の値渡しの場合（d1→pv）は、受け取ったアドレスを変数を引数に格納して処理されます。ですので、d1 と pv は別変数ですが、同一アドレスの値と紐づくため、pv の値を変更すると、呼び出し元の c1 の値も変更されます。
引数の参照渡しの場合（d2→pr）は、受け取った変数（d2）を引数（pr）に格納して処理されます。ですので、pr == d2 となり、pr の値を変更すると、d2 の値も変更されます。参照型の変数を関数の引数として設定し、関数内で new した場合、呼び出し元の参照型の変数値はどうなるでしょう？引数の値渡しの場合（e1→pv）は、受け取ったアドレスを変数を引数に格納して処理されます。ですので、d1 と pv は別変数ですが、同一アドレスの値と一旦は紐づきます。しかし、pv を new して格納されるアドレスが新しくなるため、pv と d1 のつながりが断たれ、pv の値を変更しても、呼び出し元の e1 の値は変更されません。
引数の参照渡しの場合（e2→pr）は、受け取った変数（e2）を引数（pv）に格納して処理されます。ですので、pr == e2 となり、pr を new して格納するアドレスを新しくしても、e2 に格納されるアドレスもあわせて変更されるため、pr を変更すると、e2 も変更されます。ポインタの概念を理解している方は、まず問題ないです。Javaを知っている方は、String の比較で == を使うと意図しない動作をするので、感覚的に理解できている場合が多いです。C#から始めた若手のコードレビューしてたら、言葉は聞いたことがあるかも程度が結構いたので、今回まとめてみました。
が、自分自身も漠然としたイメージで捉えているようで、有益な指摘を頂いてます。ありがたいです。おおいに勉強させていただいてます。


