More than 1 year has passed since last update.現在使ってるJsonライブラリの処理を早く出来ないかどうか検討しました。・現在サーバーAPIのレスポンスをパースするJSONライブラリが遅いと感じてるのでなんか出来ないかどうか検討したい
・もっと早いライブラリがあると思うけどライブラリを差し替えるとけっこうな作業になるので今のままでやってみたい
・本来であればJSONを無くしてgRPCみたいなものを使いたいけどこれも差し替える作業が大きいので現在のものを改善できれば良い最初にクラスを開いてみるとstringのアロケーションが多いなーと思いました。stringがコンストラクタに渡されてパースしながらstring.substring()を利用してガンガン再帰呼び出しがされてしまいます。jsonが深くなるほどこれの呼ぶ回数が多くなるのでもともとのstringよりメモリが結構膨らむよね。パースが遅いだけじゃなくてGCも多く走らせてしまいます。もし次のオブジェクトがstringじゃなければstring化しなくていいのではないか？
1個ずつのcharをチェックして次のデータが true、false、null、数字などだったらsubstringのコールを飛ばしてみよう。擬似コード：これを実装したらsubstringを呼ぶ回数が減るはずです！ちなみに同じロジックを使ってStringBuilderでも拡張できます！
Gavin Pughさんが作ってくれた  http://www.gavpugh.com/source/StringBuilderExtNumeric.cs を参考してください上記だとある程度stringアロケーション減らせたけどまだjsonオブジェクトや配列などがsubstringに入ってくる。最終的なstringオブジェクトのみアロケートするように出来るでしょうか？現在のライブラリだとstringが受け取るconstructorしかないけど、これMemoryStreamだったらどうかな？
もともとのコンストラクタじゃなくて新しくを作ってみました。もともとのパース処理を真似しながら１個ずつのcharをチェックしながらjsonパースしていく。　こうするとアロケーションが発生する時はjsonの中のstringタイプのオブジェクトがある時だけになります。では、このMemoryStreamがどこから来るでしょうか？ stringをMemoryStreamに変換するだけだと意味がなくなります。HTTP通信周りのシステムを見てみると内部にMemoryStreamを使ってます！　今までは通信が終わったらこのMemoryStreamがbyte[]に変換されてたけどそれを飛ばして直接にJsonに渡したらさらに快適。けっこう大きい通信もあるのでこのbyte[]変換が必要ないならGCなども改善されます。こっちのテスト環境で試してみたけどもともと1.25秒かかったものが0.25秒になりました！　5倍じゃん！
やっぱり無駄なものを削りましょう


