前回は Client Credentials Flow を使いましたが、今回は Azure Web Apps にデプロイした ASP.NET Core Web API から Managed Identity を使って Microsoft Graph API を叩いてみたいと思います。前回同様、User Principal Name を指定してユーザー情報を取得するシンプルな Web API を開発していきます。Visual Studio を開いて新しいプロジェクトを作成します。
ASP.NET Core Web API を選択して次へをクリックします。
プロジェクト名と場所を入力して次へをクリックします。
設定を確認して作成をクリックします。
Microsoft Graph Client のインスタンスを作成するために IAuthenticationProvider の実装を用意します。Managed Identity を利用するため DefautlAzureCredential クラスのインスタンスを生成します。ApiModel は前回と同じです。Service インターフェースとクラスについても前回と同じです。コントローラーも前回と同じです。DI のために AddSingleton を追加します。シングルトンにしておくとアクセストークンの期限内は既存のアクセストークンを利用し、期限が切れると自動的に新規のアクセストークンを取得してくれます。（AddScoped AddTransient にするとリクエストのたびにアクセストークンを新しく取得します）DefaultAzureCredential を呼び出していることと、呼び出す AuthenticationProvider が変わっているだけで、基本的には前回と同じです。コーディングはここまでです。Visual Studio のソリューションエクスプローラー上でプロジェクト名を右クリックして発行を選択します。
Azure を選択して次へをクリックします。
Azure App Service (Windows) を選択して次へをクリックします。
適当な Web App を選択して（無ければ作成して）次へをクリックします。
API Management の作成はスキップするのでこの手順をスキップするを有効にして完了をクリックします。
公開準備が完了したら発行をクリックします。
発行が完了したらブラウザが起動して自動的に発行した Web App にアクセスされますが、まだ正常に呼び出すことはできません。Azure Portal から作成した Web App を開き ID を選択してシステム割り当てマネージド ID が有効化されていることを確認します。（無効の場合は有効化します）
現時点では Azure Portal からアクセス許可が付与できません。Windows PowerShell から Microsoft Graph へのアクセス許可を付与していきます。Azure Portal でアクセス許可が付与されたことを確認します。
アクセス許可の付与後、以下の URL にアクセスしてユーザー情報が返ってくることを確認します。（user@example.com の部分は実在する User Principal Name に置き換えてください）


