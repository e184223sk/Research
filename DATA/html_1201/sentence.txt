More than 1 year has passed since last update.C# で等値演算子をオーバーロードしたら null が引数に渡されたときハマってしまったので、その流れや解決策をメモ。まず、 C# では以下のようにして等値演算子（==）をオーバーロードすることができる。しかしこのサンプルコードでは、引数 a が null のとき NullReferenceException が発生する。ここで正常な挙動を確認すると、以下のようになっている。このことから、サンプルコードのように愚直に Equals メソッドを呼び出すわけにはいかない。では以下のようにしてみるとどうだろう。このコードは、実行してみれば分かるが、引数 a、b の内容によらず StackOverflowException が発生する。
それは、a や b が null かどうかを判定する条件式で等値演算子を使うことによって、無限ループ（無限再帰）を作り出しているためである。再帰呼び出しを回避しつつ、null 判定をすることができるのが、 ReferenceEquals メソッドである。
ReferenceEquals メソッドは 参照の等価性を評価するため、null の変数は参照も null であるから、正しく判定をすることができる。以上のことから、等値演算子をオーバーロードする際には、以下のようにすると良い。サンプルコードでは省いていたが、等値演算子をオーバーロードするときには、非等値演算子も同時にオーバーロードする必要がある。
ここでは再帰にならないため、以下のように簡潔に実装することができる。Equals メソッドをオーバーライドするときにも、同じ方法を使ったほうが良い。
等値演算子をオーバーロードしている状態で以下のように実装すると、引数 obj が null でないとき、何度か再帰呼び出しをすることになる。無限ループに陥ることはないので問題はないが、以下のようにして回避することができる。または、そもそも as 演算子ではなく is 演算子を使うことでも回避できる。
（記事を書いていて気づいた）hoge == null ではなく ReferenceEquals(hoge, null) を使おう。https://docs.microsoft.com/dotnet/api/system.object.referenceequals
https://docs.microsoft.com/dotnet/csharp/language-reference/operators/equality-operators
https://docs.microsoft.com/dotnet/csharp/programming-guide/statements-expressions-operators/how-to-define-value-equality-for-a-type


