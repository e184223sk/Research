More than 1 year has passed since last update.深いネストに困ってませんか？例えば次のようなコードです。foreach 文と if 文のネストが深すぎて、書いた本人でさえ何をやっているコードなのか分からない・・・
今回は深いネストの解消方法をいくつか紹介したいと思います。※サンプルコードは C# で書いていますが、他の言語でも考え方は同じです。「アーリー・リターン（early return）」は「早期リターン」「ガード節」とも呼ばれています。メソッドの先頭で渡された引数が不正な値でないかチェックして、もし不正な値であれば return で即メソッドを抜けてしまいます。そうすることで、その後の処理は引数に不正な値でないか気にする必要がなくなるので、コードがスッキリします。【Before】【After】「アーリー・コンティニュー（early continue）」は「アーリー・リターン（early return）」の continue 版です。考え方は「アーリー・リターン（early return）」と同じなのですが、意外と使われていないような気がするので、あえて別物として紹介します。【Before】【After】次のサンプルコードを見てください。【Before】の IsEvenNumber メソッドでは、 まず if 文で条件判定して、その結果を一旦変数「result」に代入してから戻り値として返しています。一方、【After】の IsEvenNumber メソッドでは、if 文も変数「result」もなく、かなりスッキリしていますね。if 文の中身は必ず boolean 値になるので、if 文は使わず boolean 値をそのまま使うことで、無駄な if 文を削減できます。【Before】
【After】C#には LINQ（リンク）という非常に強力なライブラリがあり、これを使うと繰り返し処理がスッキリしたコードになります。foreach 文は ForEach メソッドに置き換えることができるので、これだけでもネストを一つ減らすことができますね。※ LINQ をまだ使ったことないという方は、別記事「はじめての LINQ」を参照してください。※ Java であれば「Stream API」、Python であれば「内包表記」が LINQ の代わりとして使えます。【Before】
【After】ネストの解消方法として「処理をメソッドに分離する」方法がよく紹介されているのを見ますが、正直おすすめしません。確かにネスト数は減るのですが、代わりにメソッドの呼び出し階層が増えてしまうので、根本的な解決にはならないからです。ネスト数が減ったからといって、必ずしも可読性が向上するとは限らないのです。「処理をメソッドに分離する」はあくまで最終手段だと思いましょう。


