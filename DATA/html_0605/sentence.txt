複数のWebシステムと、それを統括する1つのWebシステム…みたいな構成にしたいとき、
ただAreasで分けるだけだと、結局1プロジェクトに複数のWebシステムが全部入ってくることになってしまう。
別システムは別プロジェクトで開発したいと思ったのでちょっと調べた。
結果[AreaRegistration]なるクラスを使えばある程度出来るらしいのでまとめておく。

メインのサイトはテンプレート[MVC]で作成する。

出来上がりはこんな感じ。

実行するとこう。親の顔より見たデフォルトページ。

こちらのテンプレートは空、コア参照のMVCにチェックを入れる。
//こちらのテンプレートをMVCで作成したら起動に失敗したのでとりあえず空。詳しい人何でか教えてください。

出来上がりはこう。
ControllerもViewもないからまだ動かない。Controllerを作成する。
Controllersフォルダを右クリックして[追加]→[コントローラー]→[MVC5コントローラー -空]とりあえず自動作成されたコードをそのまま使う。Viewを作成する。
Controllerを作成するとViewsフォルダ内にSubSystemHomeフォルダ(Controller名から自動作成)が作成される。
SubSystemHomeフォルダを右クリックして[追加]→[ビュー]→ビュー名を「Index」に指定。//Qiitaでcshtml(Razor?)のコード入れるときの設定も誰か教えて…デフォルトで実行するコントローラーが[SubSystemHome]なので、ルーティングを変更。
App_Startフォルダ内、RouteConfig.csを変更するここまでやると別システム側も単独で動く。
今回の肝。
別システム側にAreaRegistrationクラスを継承したクラスを作成する。
メイン側のプロジェクトから別システムをプロジェクト参照する。
メイン側をデバッグ実行して、URLを[localhost:(PortNumber)/SubSystem]にアクセスする。
無事エラーになりました。
エラーになる理由は、ビューが見つからないから。
実行しているのはMainSiteであり、SubSystem側のビューを見に行くことができないからです。
ASP.NET MVCはビュー(cshtml)がdllに含まれないので、ファイルとして存在する必要があります。表示されたエラーを見ると[Areas]フォルダを参照していることがわかります。
Areasフォルダは普通にArea分けするときに作るフォルダです。
エラーに表示された通り、\Areas\SubSystemを作成し、
その中にSubSystemWebのViewsフォルダをコピーします。

これがあるから冒頭で「ある程度」と書きました。
「参照設定を変えるだけで機能を追加したり削除したりできる」というお手軽さには微妙に届かない残念な結果です……以上です。
もっといいやり方がある気がするので、詳しい方教えてください。


