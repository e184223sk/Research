

ObservableDataGenerator generator = new ObservableDataGenerator();

// 生成するデータ数
int dataCount = 20;

// データ項目
var fields = Observable
    // 連番
    .Range(1, dataCount)
    // 今日から一か月間のランダムな日付
    .And(generator.Random(dataCount, DateTime.Today, DateTime.Today.AddMonths(1)).Select(d =&gt; d.Date))
    // 1～100 のランダムな整数を前ゼロ編集した文字列
    .And(generator.Random(dataCount, 1, 100).Select(value =&gt; value.ToString("d3")))
    // a, b, c, d, e を順番に返す
    .And(generator.Each(dataCount, "a", "b", "c", "d", "e"))
    // A, B, C, D, E の何れかを返す
    .And(generator.Any(dataCount, "A", "B", "C", "D", "E"))
    // A, B, C, D, E の何れかを返す（A:50%, B:30%, C:10%, D:5%, E:5%）
    .And(generator.AnyWithProbability(dataCount
        , new string[] { "A", "B", "C", "D", "E" }, new double[] { 0.5, 0.3, 0.1, 0.05 }))
    // [a, b, c] と [1, 2, 3] の何れかを組み合わせた文字列
    .And(generator.Any(dataCount, "a", "b", "c").Zip(generator.Any(dataCount, 1, 2, 3), (a, i) =&gt; a + i))
    // -10000～10000 のランダムな整数または25%の確率でnull
    .And(generator.RandomOrNull(dataCount, 0.25, -10000, 10000))
    ;

// データ項目の配列にまとめて返す
var plan = fields.Then((field1, field2, field3, field4, field5, field6, field7, field8) =&gt; 
    new object[] { field1, field2, field3, field4, field5, field6, field7, field8 }
);

// Observable なデータソースを生成
var source = Observable.When(plan);

// 生成された値を列挙してみる
foreach (object[] values in source.ToEnumerable())
{
    System.Diagnostics.Debug.WriteLine(string.Join(",", values));
}


