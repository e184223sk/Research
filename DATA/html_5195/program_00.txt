public class VRMShapesControl : MonoBehaviour
{

    private VRMBlendShapeProxy _proxy;

    [Range(0, 1)]
    public float A;

    [Range(0, 1)]
    public float I;

    [Range(0, 1)]
    public float U;

    [Range(0, 1)]
    public float E;

    [Range(0, 1)]
    public float O;

    [Range(0, 1)]
    public float Blink;

    [Range(0, 1)]
    public float Joy;

    [Range(0, 1)]
    public float Angry;

    [Range(0, 1)]
    public float Sorrow;

    [Range(0, 1)]
    public float Fun;

    [Range(0, 1)]
    public float LookUp;

    [Range(0, 1)]
    public float LookDown;

    [Range(0, 1)]
    public float LookLeft;

    [Range(0, 1)]
    public float LookRight;

    [Range(0, 1)]
    public float Blink_L;

    [Range(0, 1)]
    public float Blink_R;


    // Update is called once per frame
    void Update()
    {
        if (_proxy == null)
        {
            _proxy = GetComponent&lt;VRMBlendShapeProxy&gt;();
        }
        else
        {
            foreach (BlendShapePreset t in Enum.GetValues(typeof(BlendShapePreset)))
            {
                _proxy.SetValue(t, GetPropertyValue(t));
            }
        }
    }

    private float GetPropertyValue(BlendShapePreset t)
    {
        switch (t)
        {
            default:
                return 0;
            case BlendShapePreset.A:
                return A;
            case BlendShapePreset.Angry:
                return Angry;
            case BlendShapePreset.Blink:
                return Blink;
            case BlendShapePreset.Blink_L:
                return Blink_L;
            case BlendShapePreset.Blink_R:
                return Blink_R;
            case BlendShapePreset.E:
                return E;
            case BlendShapePreset.Fun:
                return Fun;
            case BlendShapePreset.I:
                return I;
            case BlendShapePreset.Joy:
                return Joy;
            case BlendShapePreset.LookDown:
                return LookDown;
            case BlendShapePreset.LookLeft:
                return LookLeft;
            case BlendShapePreset.LookRight:
                return LookRight;
            case BlendShapePreset.LookUp:
                return LookUp;
            case BlendShapePreset.O:
                return O;
            case BlendShapePreset.Sorrow:
                return Sorrow;
            case BlendShapePreset.U:
                return U;
        }
    }
}

