
public static class NLoggerExtensions
{
    public static void InfoEx(this NLog.ILogger logger, string message
        , string callerClassName = ""
        , [CallerMemberName] string callerMemberName = ""
        , [CallerFilePath] string callerFilePath = ""
        , [CallerLineNumber] int callerLineNumber = 0)
    {
        if (string.IsNullOrEmpty(callerClassName)) { callerClassName = GetCallerClassName(2); }
        NLog.LogEventInfo info = new NLog.LogEventInfo(NLog.LogLevel.Info, logger.Name, message);
        // 呼び出し元情報を設定します。
        info.SetCallerInfo(callerClassName, callerMemberName, callerFilePath, callerLineNumber);
        logger.Log(typeof(NLoggerExtensions), info);
    }
    public static async Task InfoAsync(this NLog.ILogger logger, string message
        , string callerClassName = ""
        , [CallerMemberName] string callerMemberName = ""
        , [CallerFilePath] string callerFilePath = ""
        , [CallerLineNumber] int callerLineNumber = 0)
    {
        if (string.IsNullOrEmpty(callerClassName)) { callerClassName = GetCallerClassName(4); }
        NLog.LogEventInfo info = new NLog.LogEventInfo(NLog.LogLevel.Info, logger.Name, message);
        // 呼び出し元情報を設定します。
        info.SetCallerInfo(callerClassName, callerMemberName, callerFilePath, callerLineNumber);
        await Task.Yield();
        logger.Log(typeof(NLoggerExtensions), info);
    }
    private static string GetCallerClassName(int skipFlames)
    {
        return new StackFrame(skipFlames).GetMethod().DeclaringType.FullName;
    }
}

