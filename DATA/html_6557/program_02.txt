
using System;
using System.Diagnostics;
using System.IO;
using System.Management;

namespace UE4ProcessManager
{
    class Program
    {
        static void Main(string[] args)
        {
            string ue4ExePath = @"UE4Exeのフルパス";
            string killProcessName = "UE4Game";

            // UE4exeを起動する
            ProcessStartInfo psUE4Exe = new ProcessStartInfo();
            psUE4Exe.FileName = ue4ExePath;

            System.Diagnostics.Process.Start(psUE4Exe);

            // 10秒後間スリープ
            System.Threading.Thread.Sleep(1000 * 10);

            // UE4Gameに一致するプロセスを殺す
            System.Diagnostics.Process[] ps = System.Diagnostics.Process.GetProcessesByName(killProcessName);
            foreach (System.Diagnostics.Process p in ps)
            {
                string parentProcessName = GetParentModuleName(p.Id);
                if(parentProcessName == Path.GetFileNameWithoutExtension(ue4ExePath))
                {
                    p.Kill();
                    break;
                }
            }
        }

        private static string GetParentModuleName(int id)
        {
            return Process.GetProcessById((int)GetParentProcessId(id)).ProcessName;
        }

        private static string GetParentArguments(int id)
        {
            return Process.GetProcessById((int)GetParentProcessId(id)).StartInfo.Arguments;
        }

        private static uint GetParentProcessId(int id)
        {
            var query = string.Format("SELECT ParentProcessId FROM Win32_Process WHERE ProcessId = {0}", id);

            using (var search = new ManagementObjectSearcher(@"root\CIMV2", query))
            //クエリから結果を取得
            using (var results = search.Get().GetEnumerator())
            {

                if (!results.MoveNext()) throw new ApplicationException("Couldn't Get ParrentProcessId.");

                var queryResult = results.Current;
                //親プロセスのPIDを取得
                return (uint)queryResult["ParentProcessId"];
            }
        }
    }
}


