More than 1 year has passed since last update.表題の通り円とドル換算プログラムを通して静的メソッドを理解して行きます．そこで今回用いる言語はC#を使っていきます．（JavaとかC++，Pythonとかじゃなくてごめんなさい．．）C#を通して静的メソッドが理解できる記事にできたらなと思います．円とドルを換算する時はだいたい1ドル100円くらいでしょと思うので適当に100円に換算するプログラムを書いていってもいいが，流石にそれは汎用性がないので現時点での1ドルがいくらなのかを用いて計算するプログラムを書いていく1ドル　→　107.77円（2019年7月18日現在） これを用いて書いていくとりあえずメソッドとかそんなめんどくさいことを考えずにシンプルに円とドルを換算表を作成する方法を書いていくの結果を出力する際に考えられるプログラミングとしては至極シンプルにコードを書いていくとこんな感じになる．このプログラムでドルを円に換算するという点に関しての目的は達成できた．ただ，これ以上改良する必要のないプログラムならこれで十分である．しかし，今は小さなプログラムではあるが，今後大きなプログラムに発展させていくと考えるとこんなプログラムを残されたらたまったもんじゃない．ここでドルを円に換算させるプログラムがMainのメソッドに入ってしまっています．そこでこの問題を解決させる方法の1つとしてドル→円換算している部分をメソッドとして独立させるということです．独立させたプログラムがこちらとりあえずドル→円換算部分をメソッドにしました．するとでてきました．staticが．．．こいつが今回の主役の静的メソッドです．静的というのはインスタンスを生成せずに，プロパティを参照したり，メソッドを呼び出したりすることができます．つまり，インスタンスを生成せずに利用できる物を静的と呼んでいます．例にするとこんな感じです．こんな感じで利用するときは new する必要がなく，そのまま使うことができます．話を戻すと， YenToDollar()は静的メソッドとして置いています．なぜここを静的にしているのかというと，仮にここを静的メソッドにせずにインスタンス生成が必要なメソッドだとしましょう．するとインスタンス化したメソッドを呼び出すにはどのインスタンスなのかを指定する必要があります．ただ，今回の場合ドル→円換算プログラムはわざわざインスタンスを生成して呼び出す必要もないですし，わざわざインスタンスを生成してからメソッドを呼び出すのも面倒ですよね．なので，今回YenToDollarは静的メソッドにしています．（厳密に話すとMainメソッドが静的なのでMainメソッドから直接インスタンスメソッドを呼び出すことができないという説明が必要なのですが，今回は省略します．．）このままだとドル→円といった単方向の換算しかできないので円→ドルの換算のメソッドも追加していきましょう．ここで円→ドル換算する時に繰り返し処理で100ずつ足していますが，1円ずつ足してもほとんど換算している感じがないので100ずつ足しています．出力結果はこんな感じになります．今のままでも機能としては十分に働いてはいるのですが，円とドルの換算プログラムが別のプログラムで必要になった時に今のままでは汎用性が低いです．例えば今のままだと使えそうなメソッドだけを切り取って貼ってといった作業が必要です．それではどうするかというと，ここでクラスを使います．クラスを用いて独立させることで換算させる計算はどのプログラムでも汎用させることが可能ということになってきます．それでは換算するプログラムをクラスにまとめていきましょう．これでとりあえず換算クラスは完成です．ここでこのYenConverterクラスを用いることで機能をまとめることができました．Mainプログラムでの使い方はこんな感じになる．こんな感じでインスタンスを生成してYenConverterに入っているメソッドを呼び出すと言った流れでプログラムしていきます．ただ，このYenConverterのクラスはインスタンスされたプロパティやインスタンスされたフィールドを利用していないので，これらのメソッドは静的にすることができます．なのでYenConverterのメソッドを静的にすると，こんな感じで改変することができます．静的メソッドにすることによって new でインスタンス化する必要もなくなり，よりプログラムがスッキリしました．YenConverter.csには見てわかるように静的メソッドしかありません．ここから，YenConverterのクラスは静的クラスにすることができます．静的クラスとは今までの説明で薄々勘付くとは思いますが，インスタンスを生成しなくても使えるクラスです．例を出すとConsoleも静的クラスです．（Console.WriteLine()もインスタンス化しなくても出せる！）よって変更した後のYenConverter.csはこうなります．円→ドル換算を例に静的メソッドを説明していきました．この使い方をマスターするだけで，ドルだけじゃなくてポンドや色んな換算もクラスで処理することができます．一応色々な通貨の換算できるクラスだけ載せておきます．最後までみてくださりありがとうございました！


