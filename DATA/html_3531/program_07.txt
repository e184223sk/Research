
using System;
using System.Threading.Tasks;
using PolyToolkit;
using UnityEngine;

namespace Daimao.Nekomimi.Poly
{
    public static class PolyTasker
    {
        public static Task&lt;PolyListAssetsResult&gt; SearchListAssetsAsync(PolyListAssetsRequest assetsRequest)
        {
            var tcs = new TaskCompletionSource&lt;PolyListAssetsResult&gt;();
            PolyApi.ListAssets(assetsRequest, result =&gt;
            {
                if (result.Ok)
                {
                    tcs.SetResult(result.Value);
                }
                else
                {
                    tcs.SetException(new Exception(result.Status.errorMessage));
                }
            });
            return tcs.Task;
        }

        public static Task&lt;PolyListAssetsResult&gt; SearchUserListAssetsAsync(PolyListUserAssetsRequest assetsRequest)
        {
            var tcs = new TaskCompletionSource&lt;PolyListAssetsResult&gt;();
            PolyApi.ListUserAssets(assetsRequest, result =&gt;
            {
                if (result.Ok)
                {
                    tcs.SetResult(result.Value);
                }
                else
                {
                    tcs.SetException(new Exception(result.Status.errorMessage));
                }
            });
            return tcs.Task;
        }


        public static Task&lt;PolyListAssetsResult&gt; SearchLikedListAssetsAsync(PolyListLikedAssetsRequest assetsRequest)
        {
            var tcs = new TaskCompletionSource&lt;PolyListAssetsResult&gt;();
            PolyApi.ListLikedAssets(assetsRequest, result =&gt;
            {
                if (result.Ok)
                {
                    tcs.SetResult(result.Value);
                }
                else
                {
                    tcs.SetException(new Exception(result.Status.errorMessage));
                }
            });
            return tcs.Task;
        }

        public static Task&lt;PolyAsset&gt; FetchThumbnailAsync(PolyAsset asset, PolyFetchThumbnailOptions options)
        {
            var tcs = new TaskCompletionSource&lt;PolyAsset&gt;();
            PolyApi.FetchThumbnail(asset, options, (polyAsset, status) =&gt;
            {
                if (status.ok)
                {
                    tcs.SetResult(polyAsset);
                }
                else
                {
                    tcs.SetException(new Exception(status.errorMessage));
                }
            });

            return tcs.Task;
        }

        public static Task&lt;PolyAsset&gt; GetAssetAsync(string name)
        {
            var tcs = new TaskCompletionSource&lt;PolyAsset&gt;();
            PolyApi.GetAsset(name, result =&gt;
            {
                if (result.Ok)
                {
                    tcs.SetResult(result.Value);
                }
                else
                {
                    tcs.SetException(new Exception(result.Status.errorMessage));
                }
            });

            return tcs.Task;
        }


        public static Task&lt;(GameObject obj, PolyAsset polyAsset)&gt; ImportAsync(PolyAsset asset, PolyImportOptions? options = null)
        {
            var tcs = new TaskCompletionSource&lt;(GameObject obj, PolyAsset polyAsset)&gt;();
            PolyApi.Import(asset, options ?? PolyImportOptions.Default(), (polyAsset, result) =&gt;
            {
                if (result.Ok)
                {
                    tcs.SetResult((result.Value.gameObject, polyAsset));
                }
                else
                {
                    tcs.SetException(new Exception(result.Status.errorMessage));
                }
            });
            return tcs.Task;
        }
    }
}

