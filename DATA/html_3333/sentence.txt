More than 1 year has passed since last update.Microsoftより今後の.NETは.NET Coreに統合されていくことがアナウンスされました。
WindowsでもLinuxでもx86でもARM64でも動作するプラットフォームは大変強力です。クロスプラットフォームといえばPythonやJavaScriptがありますが、
動作速度が早いことや開発のしやすさ、過去の資産が豊富などC#には別の魅力があります。今回はJetson nano に .NET Core 3.0 を導入してI/Oの制御を行ってみたいと思います。githubのissue とか gist に情報があります。
以下のコマンドでインストールできます。先ほどのgithubのissueを見てみるとInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently master).となっているので、ARM64勢は最新版の.NET Core 3.0を使うのが良さそうです。
とは言っても上のコマンドで入るのはPreview版です。利用は自己責任ですね。(2019.5.23時点).NET Core 3.0は強力です。(新機能の説明)
C#8.0対応なのも嬉しいですし、LinuxでSerialPortが使えるようになりました。
Jetson nanoとは関係ないですが、Raspberry PiのGPIOをサポートしてたり、IoT向けの用途を意識しています。ちなみに、Raspberry Piにおいては前提になるパッケージは少し異なります。
(コマンド：sudo apt-get install curl libunwind8 gettext apt-transport-https)
本体インストールのコマンドはファイル名の"arm64"のところを"arm"に変更してインストールできます。コンソールアプリケーションを作成して実行してみますJITコンパイラが動作するため起動が若干もたつきますが、
「Hello World!」と表示されれば成功です。ここはぜひともVSCodeを使いたいところです。
がしかし、[WARNING]: Processor architecture 'aarch64' is not currently supported by the .NET Core debugger. Debugging will not be available.悲しみ。サポートされるまでは根性でデバッグするしか無いようです。
ハードウェア依存部を切り離して大半をWindows環境で開発するなどデバッグ負担を減らす工夫が必要ですね。
複雑なことをやろうとするとアレですが、まぁ、IoT機器として使うレベルの単純なハードウェア制御ならなんとかなるんじゃないでしょうか。ちなみにですが、最近insiderリリースされたVSCodeのリモート開発機能もx86/x64しかサポートしていないのでJetsonやRPiでは使えません。IO制御方法はパッと思いつく方法は以下の2パターンです。このうち前者はCPUのハードウェアマニュアルが無料公開されてい様子。断念します。以下のディレクトリ
/sys/class/gpio/ 
にGPIOの仮想ファイルを作成してアクセスします。
最初は、仮想ファイルは無く、exportなどのディレクトだけがある状態です。exportにGPIOのピン番号を書き込むと、仮想ファイルが生成されます。
GPIO12に出力する場合の例は以下の通り（実行時には、管理者権限が必要になる）GPIO番号が異なっている以外は Raspberry Piと同じですね。.NET Core 3.0ではRaspberry PiのGPIO制御がサポートされているらしいですが、GPIO番号が異なるためおそらく使えない（未検証 2019.5.23時点）ので、今回は別の方法で行います。Raspberry Piと一緒ということは、上記のコマンドライン操作を
丸々C#で模擬することで制御できそうです。
軽く調べてみると、やはり先達がいらっしゃいます
【C#】.NET Core 2.0でRaspberryPi 3のGPIOを操作してLチカ！上記の実装を参考にGPIOクラスを軽く作ります。詳細な実装はgithubの方を参照ください。
ポイントになる部分のみ抜き出して解説します。ポートの作成はコンストラクタの処理の中で実施しますGPIOフォルダの中のdirectionに信号の方向を設定します端子状態を設定しますここまででLチカくらいなら可能になります。
処理を色々追加すればクラスが完成です。
→実装例以下のコードで正しく動いているか確認します。次はラッパークラスを作って既存のLinuxライブラリ、できればCUDAやNEONを扱うようなものをC#から扱いたいと思います。（いつやるかは未定）


