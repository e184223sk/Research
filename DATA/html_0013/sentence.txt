C++（C++/CLI）で定義したテンプレートをD言語で利用可能です。
また、C#で定義したテンプレート（ジェネリック）をC++（C++/CLI）で利用可能です。
この記事は、テンプレートの利用例について書きました。以下の環境でコンパイルしています。テンプレートの利用例として、D言語から基本データ型を引数にして、C++の関数を呼び出す処理を作成しました。
callWrapperは、C++側で定義したテンプレート関数です。D言語側で使用するために関数宣言しています。
printTypeは、D側で実装、使用するテンプレート関数です。C++のソースコードの中でC#で作成したテンプレート関数CSharpClass::printTypeを呼び出しています。
「テンプレートの実体化」については、後ほど補足します。ソースコードcsc.csのprintTypeは、自身のTypeを出力するテンプレート関数です。
これを使って、D言語からの呼び出し時の基本データ型がC#でどのように扱われるかを確認したいと思います。C++側でインスタンス化されないテンプレート定義はオブジェクトファイルに格納されないため、D言語とのオブジェクトファイルとのリンク時にエラーが発生します。
このため、明示的なインスタンス化が必要となります。D言語のレファレンス（Interfacing to C++）でもC++側でインスタンス化を行っていたので、それに倣いました。「"printf" は未解決」エラーが発生する場合、この記事にある通り、legacy_stdio_definitions.libをリンクする必要があります。コンパイルは「VS2019用 x64 Native Tools コマンドプロンプト」から実行します。
D、C++、C#を１つのEXEファイルcppc.exeにまとめました。実行結果は、以下のようなMarkdown形式の表となります。
D、C++、C#の基本データ型についての比較表になります。


