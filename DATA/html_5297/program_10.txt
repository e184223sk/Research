
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using System.Data.Entity;
using System.Data.Entity.Migrations;

using System.Linq.Expressions;

namespace DiconExp
{

    public class SampleContext : DbContext
    {
        public DbSet&lt;User&gt; Users { get; set; }
        public DbSet&lt;Character&gt; Characters { get; set; }
    }

    public class User
    {
        public int Id { get; set; }
        public int Level { get; set; }
        public int Age { get; set; }

        public override string ToString() =&gt; $"{Id} / Level = {Level}, Age = {Age}";
    }

    public class Character
    {
        public int Id { get; set; }
        public int Power { get; set; }
        public int YearsOld { get; set; }

        public override string ToString() =&gt; $"{Id} / Power = {Power}, YearsOld = {YearsOld}";
    }

    internal sealed class SampleConfiguration : DbMigrationsConfiguration&lt;DiconExp.SampleContext&gt;
    {
        public SampleConfiguration()
        {
            AutomaticMigrationsEnabled = false;
        }

        protected override void Seed(SampleContext context)
        {
            context.Users.AddOrUpdate(
                p =&gt; p.Id,
                new User { Id = 1, Level = 3, Age = 13 },
                new User { Id = 2, Level = 19, Age = 24 },
                new User { Id = 3, Level = 8, Age = 19 },
                new User { Id = 4, Level = 7, Age = 33 },
                new User { Id = 5, Level = 13, Age = 11 },
                new User { Id = 6, Level = 20, Age = 28 }
            );

            context.Characters.AddOrUpdate(
                p =&gt; p.Id,
                new Character { Id = 1, Power = 3, YearsOld = 13 },
                new Character { Id = 2, Power = 19, YearsOld = 24 },
                new Character { Id = 3, Power = 8, YearsOld = 19 },
                new Character { Id = 4, Power = 7, YearsOld = 33 },
                new Character { Id = 5, Power = 13, YearsOld = 11 },
                new Character { Id = 6, Power = 20, YearsOld = 28 }
            );

            context.SaveChanges();
            base.Seed(context);
        }
    }




    public class Program
    {

        #region 凡庸的なクラス、プロパティ名の違いを吸収してクエリ！

        public interface IEntityReader&lt;TEntity&gt;
        {
            IEnumerable&lt;TEntity&gt; GetEntities(params Expression&lt;Func&lt;TEntity, bool&gt;&gt;[] filters);
        }

        public class EntityReaderBase&lt;TEntity&gt; : IEntityReader&lt;TEntity&gt;
            where TEntity : class
        {
            protected DbContext Context { get; private set; }
            protected DynamicEntityPropertiesRewriter&lt;TEntity&gt; Rewriter { get; private set; }


            public EntityReaderBase(DbContext ctx)
            {
                this.Context = ctx;
                this.Rewriter = new DynamicEntityPropertiesRewriter&lt;TEntity&gt;();
            }

            // コメントを参考にさせていただきました。さらにRewriter適用バージョンです。
            public IEnumerable&lt;TEntity&gt; GetEntities(params Expression&lt;Func&lt;TEntity, bool&gt;&gt;[] filters)
            {
                IQueryable&lt;TEntity&gt; query = Context.Set&lt;TEntity&gt;();
                foreach (var f in filters)
                {
                    query = query.Where(this.Rewriter.Rewrite(f));
                }
                return query;
            }

        }

        #endregion



        #region さらにロジック追加！

        public interface IDiconEntityReader&lt;TEntity&gt; : IEntityReader&lt;TEntity&gt;
        {
            IEnumerable&lt;TEntity&gt; GetPowerful();
            IEnumerable&lt;TEntity&gt; GetGreaterOrEqual(int level, int age);
        }


        public class DiconEntityReader&lt;TEntity&gt; : EntityReaderBase&lt;TEntity&gt;, IDiconEntityReader&lt;TEntity&gt;
            where TEntity : class
        {
            public static readonly int DmyLevel = 0;
            public static readonly int DmyAge = 0;


            public DiconEntityReader(DbContext ctx, string levelName, string ageName) : base(ctx)
            {
                this.Rewriter.Add(nameof(DmyLevel), levelName);
                this.Rewriter.Add(nameof(DmyAge), ageName);
            }

            // つよーい人を取得(レベル20以上、二十歳以上)
            public IEnumerable&lt;TEntity&gt; GetPowerful()
            {
                return this.GetEntities(p =&gt; DmyLevel &gt;= 20 &amp;&amp; DmyAge &gt;= 20);
            }


            // level以上、かつage以上の一覧を取得します。
            public IEnumerable&lt;TEntity&gt; GetGreaterOrEqual(int level, int age)
            {
                return this.GetEntities(p =&gt; DmyLevel &gt;= level &amp;&amp; DmyAge &gt;= age);
            }

        }

        #endregion




        #region Entity Frameworkの範囲外のこと、違う型を抽象的に扱うとなると別のややこしさが出てくる。

        public interface IDiconAccessor&lt;TEntity&gt;
        {
            int GetLevel(TEntity entity);
            void SetLevel(TEntity entity, int level);
            int GetAge(TEntity entity);
            void SetAge(TEntity entity, int age);
        }

        public class UserAccessor : IDiconAccessor&lt;User&gt;
        {
            public int GetAge(User entity) =&gt; entity.Age;
            public int GetLevel(User entity) =&gt; entity.Level;
            public void SetAge(User entity, int age) =&gt; entity.Age = age;
            public void SetLevel(User entity, int level) =&gt; entity.Level = level;
        }

        public class CharacterAccessor : IDiconAccessor&lt;Character&gt;
        {
            public int GetAge(Character entity) =&gt; entity.YearsOld;
            public int GetLevel(Character entity) =&gt; entity.Power;
            public void SetAge(Character entity, int age) =&gt; entity.YearsOld = age;
            public void SetLevel(Character entity, int level) =&gt; entity.Power = level;
        }

        #endregion


        /// &lt;summary&gt;
        /// つよーい人をより強く、しかも年齢もＵＰ！
        /// LINQ to Entitiesで使うわけでないのでここではデリゲートが使える。
        /// 他にいい方法ありそうですけど、とりあえず実験用として用意。
        /// &lt;/summary&gt;
        static void PowerUp&lt;TEntity&gt;(IDiconEntityReader&lt;TEntity&gt; reader, IDiconAccessor&lt;TEntity&gt; accessor)
        {
            foreach (var p in reader.GetPowerful())
            {
                var level = accessor.GetLevel(p);
                var age = accessor.GetAge(p);

                accessor.SetLevel(p, level + 1);
                accessor.SetAge(p, age + 1);
            }
        }




        public static void Main(string[] args)
        {
            using (var ctx = new SampleContext())
            {
                ctx.Database.Log = Console.WriteLine;


                IDiconEntityReader&lt;User&gt; usr = new DiconEntityReader&lt;User&gt;(ctx, nameof(User.Level), nameof(User.Age));
                IDiconEntityReader&lt;Character&gt; chr = new DiconEntityReader&lt;Character&gt;(ctx, nameof(Character.Power), nameof(Character.YearsOld));

                // つぉーい人取得
                var usrItems = usr.GetPowerful().ToList();
                var chrItems = chr.GetPowerful().ToList();

                // 引数付き、レベル、年齢共に10以上取得
                var grt = chr.GetGreaterOrEqual(10, 10).ToList();


                // インターフェースに拘るとダミー変数をどこに置くかが新たな課題。ローカル変数である必要は無さそう。
                int DmyLevel = 0, DmyAge = 0;
                var items = chr.GetEntities(p =&gt; DmyLevel &gt; 10 &amp;&amp; DmyAge &gt; 10, p =&gt; p.Id &gt;= 3).ToList();


                // Userをパワーアップ
                PowerUp(usr, new UserAccessor());

                // Characterをパワーアップ
                PowerUp(chr, new CharacterAccessor());


                // パワーアップの処理を反映・・・　しないでおく。
                //ctx.SaveChanges();

            }

        }

    }


    public class DynamicEntityPropertiesRewriter&lt;TEntity&gt;
    {
        Dictionary&lt;string, string&gt; parameters = new Dictionary&lt;string, string&gt;();

        public void Add(string dmy, string rewriteName)
        {
            this.parameters[dmy] = rewriteName;
        }

        IDictionary&lt;string, MemberExpression&gt; createProperties(ParameterExpression pParam)
        {
            return parameters.ToDictionary(p =&gt; p.Key, p =&gt; Expression.Property(pParam, p.Value));
        }

        public Expression&lt;Func&lt;TEntity, bool&gt;&gt; Rewrite(Expression&lt;Func&lt;TEntity, bool&gt;&gt; node)
        {
            var visitor = new RwVisitor(this.createProperties(node.Parameters.First()));
            return visitor.Visit(node) as Expression&lt;Func&lt;TEntity, bool&gt;&gt;;
        }



        class RwVisitor : ExpressionVisitor
        {
            IDictionary&lt;string, MemberExpression&gt; properties;

            public RwVisitor(IDictionary&lt;string, MemberExpression&gt; properties)
            {
                this.properties = properties;
            }

            protected override Expression VisitMember(MemberExpression node)
            {
                var dmyName = node.Member.Name;
                return this.properties.FirstOrDefault(p =&gt; p.Key == dmyName).Value ?? node;
            }
        }


    }


}

