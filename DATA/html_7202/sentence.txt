More than 5 years have passed since last update.ASP.NET Core で AngularJS + TypeScript してみる。2016/07/05 追記
ASP.NET Core 1.0 が RTM になったので内容を更新しました。Windows 10 Pro
Visual Studio 2015 Community Update 3
.NETCoreApp,Version=v1.0今回は TypeScript の型定義ファイルの管理に typings を使いますので未インストールの場合は入れておいてください。ASP.NET Core Web API プロジェクトを作成します。[新しいプロジェクト] - [Web] - [APS.NET Core Web Application(.NET Core)] を選択して、テンプレートは [Web API] を選択します。プロジェクトを作成したら、まずは Server-side 側から実装しています。今回は Razor を使わないで実行時に直接 html ファイルを表示します。ASP.NET Core アプリケーションで静的ファイルを扱うために Microsoft.AspNetCore.StaticFiles をプロジェクトにインポートします。 project.json の 'dependencies' に直接追加するか、パッケージマネージャーコンソールに以下のコマンドを入力してインポートしてください。Install-Package Microsoft.AspNetCore.StaticFilesproject.json の dependencies が上のようになっていればOKです。
インポートしたら次は静的ファイルを扱うための処理を追加します。Client-side のフォルダ構成を以下のようにしたいと思います。Microsoft.AspNetCore.StaticFiles に定義されている拡張メソッド UseDefaultFiles() と UseStaticFiles() を使って  Client-side で作成する静的ファイルを扱えるよう Startup.cs に処理を追加します。上記メソッドで扱えるようになる静的ファイルはデフォルトだと wwwroot フォルダから見たパスを指定して読込みをおこなうことができます。例えば、 js ファイルを html の script 要素で読込む時は src="app/scripts/hoge.js" と指定します。今回は index.html が wwwroot/app フォルダにあるので静的ファイルを読込むときに、この html ファイルのあるディレクトリからの相対パスで指定できるようにします。追加する処理は以下となります。以下コードです。ts/css ファイルや pug (jade) ファイルなどコンパイルしたファイルを .tmp フォルダに出力する場合や、js/css ファイル を minify して dist フォルダに出力したりする場合は location に設定されているパスを変更すれば Client-side の処理を変更しなくても切替えができます。起動時のURLがデフォルトだと api/values となっていますのでこれを変更します。ソリューションエクスプローラでプロジェクトのフォルダーを右クリックして表示されるコンテキストメニューからプロパティを選択して表示されたタブから[デバッグ]を選択して[起動URL] のテキストボックスを空にして保存します。以上でServer-side の実装は終了です。Web API についてはプログラム作成時にデフォルトで追加されている ValuesController.cs をそのまま使います。続いて Client-side の実装に入っていきます。以下のファイルを作成します。
1. npm 構成ファイル
2. Gulp 構成ファイル
3. Bower 構成ファイル今回 npm でインストールするパッケージは以下となります。プロジェクトのディレクトリに package.json を作成します。今回作成するタスクは以下となります。プロジェクトのディレクトリに gulpfile.js を作成します。gulpfile.js を保存したら、タスクランナー エクスプローラを表示して、タスクの一覧から build タスクを右クリックして 表示される コンテキストメニューから [Bindings] -  [ビルド前] に設定するか、 watch タスクを [Bindings] - [プロジェクトを開く] に設定しておくとよいと思います。今回使用するパッケージは以下となります。プロジェクトのディレクトリに bower.json と .bowerrc を作成します。今回使う定義ファイルは以下となります。
* angular
* angular-route
* jQueryプロジェクトのディレクトリでコマンドプロンプトからコマンドを実行して必要な型定義ファイルを入手します。実行するとプロジェクトフォルダの下に typings フォルダが作成されてそこに型定義ファイルがインストールされます。app モジュールの作成と、画面遷移のルーティングをします。wwwroot/app/scripts フォルダに app.ts を作成します。wwwroot/app/scripts/controllers フォルダに main.ts と about.ts を作成します。まず、main.ts を作成します。ViewModel に 画面に表示するタイトルと Server-side で定義されている Web API (api/values) から Get して 受取った JSON オブジェクトを設定しています。次は、 about.ts を作成します。about.ts は ViewModel に 画面に表示するタイトルを設定しているだけです。View を作成します。まずは wwwroot/app フォルダに index.html を作成します。とりあえず、ナビゲーションバー内のリンクで遷移する感じです。次は遷移したときに表示する View のテンプレートを作成していきます。wwwroot/app/views フォルダに main.html と about.html を作成します。最後に less ファイルです。wwwroot/app/styles に以下のファイルを作成していきます。全体的なスタイルを app.less で扱います。共通で使う変数やスタイルを _common.less に定義します。それぞれの View に対応する less ファイルを作成します。以上で Client-side の実装は終わりです。ASP.NET Core で AngularJS + TypeScript してみました。 Web API と AngularJS の組み合わせは Server-side とClient-side で分けて開発できるのでなかなかよいです。


