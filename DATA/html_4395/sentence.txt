More than 1 year has passed since last update.※この記事は【VB6・VB】古いコードのリプレース のシリーズその２です。サポートされなくなった関数・今は推奨されない関数の対処まとめです。
今後書き足す予定(2018/11/11現在3まで)1.Integer,Long【VB6】
2.IIf,And,Or【VB】
3.宣言省略【VB6】
4.配列のサイズコンバージョンツールを使っていれば問題はないと思いますが、一応。
VB6のInteger型 = VB・c#のShort型。-32768~32767の範囲。
VB6のLong型 = VB・c#のInteger/int型。VBのIIF、AndとAndAlsoは違う。IIF関数はTrueのときもFalseの時の式を評価してしまう。
And・Or演算子は前がTrueでなくとも2つ目の式を評価してしまう。
なのでTextBox1.Text=""のときもInteger.Parse()を評価してしまいエラーになる。AndAlso・OrElse演算子ならそういうことは起きないため安全。
AndAlso・OrElseを使わないためだけにひたすらIfを重ね書きしてる古いソースをたびたび見る。こういうのはさっさと書き換えましょう。
書き換えていると、例のように「CIntで型変換出来ないケースが考慮されてない問題」とかが埋もれてることに気づけるという副産物もあります。「既存が動いてるから型変換できないような値は来ないはず！だから大丈夫！」
まぁそうなんですけど……バグの温床は潰すに越したことはないです……ないよね……？意外と面倒なやつ。VB6では以下のようなコードが許されていた。いや、iって誰だよ！こういうコードに出会った場合は、１つ１つ中にどういう値が入りうるか、その関数内を全て確認して、問題がなさそうな宣言を入れるべき。これがiみたいなわかり易い名前ならまだ良いですが、中身が全く推測できないような名前の関数の場合もあるんですよね……
コンバージョンツールなどで置き換えた後、Option Strict Onにすればすぐ見つけることが出来るとはいえ、面倒です。調べるのが面倒だからといって、Optionをいじるのは非推奨。【VB】
(私がやってきた案件では絶対NGでした)c#ならとりあえずvarで宣言して、初期値に最初に使ってる値でも入れとけば多分大丈夫っていう逃げ方も。【c#】色んな方法で配列のサイズをいじくるソースがあります。こういうのは出来れば全部List(Of T)にしたい。
特に量が多くて実行速度を考える場合、配列をリサイズするコストはバカにならない。見ての通り、List(Of T)＆Addの組み合わせは処理条件自体も一緒に１行で書ける上、
実行速度も数百倍早いです。
ということで使わない理由がありません。更に、List(Of T)にはAddRangeというメソッドも用意されているので、ラムダ式を組み合わせれば処理全てを１行で書けます。※ただし、ラムダ式は少し実行速度的には劣ります。
試してみたところ、実行結果はこんな値になりました。５倍は時間かかってますね。
けど、これぐらいならソースコードが１行になるメリットのほうが大きいと思います。これは.NET FrameWork1.0の頃に出た動的にサイズを変更できる配列的な何かですが、
↑のようにObject型で入るのでかなり使いにくいです。(Object型なので当然、実行速度も遅い)
こっちもList(Of T)に変更することを推奨します。


