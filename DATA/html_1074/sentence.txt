More than 1 year has passed since last update.UiPathでは、OrchestratorやUiPath Goなどから、カスタムライブラリを追加することが容易になりましたが、実証実験の段階から、Orchstratorを入れたり、UiPath Goにお客様専用のライブラリを登録することは困難だったり、そもそもネットワークのホワイトリストですら登録いただくことに、大変だったりしますよね本投稿では、自分で作ったカスタムライブラリ（DLL）を.nugetからではなく、直接、呼び出す方法を紹介します。最近では当たり前ですが、昔はUiPathでカスタムライブラリを作成するには、
Visual StudioでDLLを作成し、Nuget ExplorerなどでDLLをnuget化して利用しかありませんでした。UiPathでデバッグするにも、Immediate Panelがなかったり、現時点でもComやラムダ式をデバッグしたり
解析することができませんでした。この記事は2020年6月時点の情報を基に作成しております。
記事の内容は私個人の見解であり、所属する組織の公式見解ではありません。利用イメージは、カスタムライブラリのDLLを特定のフォルダ（例えばプロジェクトの配下など）に格納し、
xamlファイルをInvokeするのと同じような感じで、DLLファイルから呼び出してみたいと思います。サンプルで利用できるDLLはこちらで用意しました。
https://github.com/takusonix/UiPathCustomLibrary/raw/master/UiPathCustomLibrary/bin/Release/UiPathCustomLibrary.dllソース内容はこちらです。サンプルDLLを利用せずに、ご自身で用意いただいても構いません。UiPathのプロジェクト構成は、このようになっています。
カスタムライブラリのサンプル(UiPathCustomLibrary.dll)はプロジェクト直下に格納しています。
UiPathでasmという変数を作成します。
asmの型をBrowse for Types...を選択します。
Type NameにSystem.Reflection.Assemblyを入力し、Asssemblyを選択します。
Assign(代入)アクティビティを追加し、左辺にasmを設定します。
Assignの右辺に以下の値を設定します。これで、DLLをロードすることができました。実行するメソッドの変数を追加します変数に値をそれぞれ設定します。実行結果を設定する変数 resultObj を追加し、変数の型をObjectに変更します。
実行と実行結果を設定するAssignを追加します。
resultObjの値に、以下の値を設定します実行すると、Hello Worldのメッセージが表示されます。
（メッセージボックスが前面に表示されてない場合、画像の通り、タスクバーからUiPathRobotの無名のタスクをせんたくしてください。）
本投稿では、メソッドの呼び出しまでに留めております。
サンプルのカスタムライブラリで用意している Test2やTest3のメソッドや、引数の設定、実行結果の取得については、別投稿します。もし、よければLGTMをお願いします。


