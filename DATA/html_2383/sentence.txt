Blazorのコンポーネントでロジックとビューを分離して記載する方法のメモ。2020/05/27: Partialクラスによる分離方法を追記しました。
2020/08/12: Partialクラスによるクラス継承を追記しました。Blazorのサンプルコードの多くは、下記のようにrazorファイルの中にHTML要素とバインドするC#コードを合わせて記載しています。このような手法とは別に、razorコンポーネントとC#コードを分離して記載するコードビハインドといった記載も可能です。今回はその方法を紹介します。まずは元となるC#側のコードを作成します。分離しない場合の変更点としては下記になります。次にrazorコンポーネント側を作成します。分離しない場合のrazorコンポーネントとの違いは下記になります。Inject属性を付与したプロパティを使用することで依存性の注入が可能になります。
(具体的なクラスの指定は通常通りStarup.csから指定する。)現在のBlazorでは上記の方法とは別に分離が可能になっています。
raozrファイルと対になるようにcsのファイルを作成するだけです。Counter.razor
Counter.razor.cs(追加)razor側は、codeブロックを除いたものを記載します。C#コード側は、クラスをpartialクラスにする必要があります。
それ以外はrazor側に書いていた場合と同じように記載できます。
(変数やメソッドはprivateで対応可能)基底のクラスを作り、継承させたい場合には下記の2つの対応が必要です。簡単にですが、Blazorにおけるコードビハインドの方法を紹介しました。
ロジックとビューを分離することで、下記のようなメリットなどが得られます。https://www.telerik.com/blogs/using-a-code-behind-approach-to-blazor-components
https://docs.microsoft.com/ja-jp/aspnet/core/blazor/dependency-injection?view=aspnetcore-3.0
https://gunnarpeipman.com/blazor-code-behind/


