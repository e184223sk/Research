More than 1 year has passed since last update.Blazorがリリースされてから1年程経ったのでしょうか。
ボチボチとドキュメントとか記事とかが上がってきているみたいなので重い腰をあげてやってみることにしました。Blazorやってみたいけどどうすりゃいいんだろ、って人多いと思う(?)のでその手助けとなる記事になればと。とりあえず色々とよくわかんないのでBlazor Advent Calendar 2019を一通り読んでみました。分かった事としてはこう。MVC時代にrazor記法という、HTMLとC#を悪魔合体させられる記述が可能となった。cshtmlという拡張子。例えば、こんな感じ。C#の構文と組み合わせる事で同じような記述を排除できるスグレモノ。
ただ、クライアントの処理は当然、JavaScriptで書く必要があった。まーしょうがないよね。そんな時に現れたのがBlazor。
コイツはクライアント処理までC#で記述することができます。razorという拡張子。フルC#により処理が完結させられるのは興奮しました。これをみればある程度は分かる、かも。
.razorファイルにUIやらロジックやらを書いていけばいいのはわかった。十分に理解できた。ただ気になった事として、.razorファイルがめちゃめちゃfatになりませんか？ってのが非常に気になりました。でも大丈夫っぽさそうで、
Blazorでコードビハインドでロジックとビューを分離して記述するに解決策が書いてあり、どうやらちゃんと分けて書くことができるようで安心しました。今回はPartial Classでコードを書きます。ViewModelを使ってもよかったですが、DIをわざわざ書いてやる必要があったのでパス。あとでGIFとソースコードを載せます。さて、これから実際に作っていきます。特に要らないとも思いましたが、やったことないことをちゃんとやっていこうと思ったので簡易的ですが、LucidChartというサイトで作ってみました。
私の場合は色々と環境が整っていたのでやったのは.NET Core 3.1のSDKをインストールするぐらい。
Download .NET Core 3.1Visual Studioが入ってないとかBlazorのテンプレートがない場合は以下の記事を参考にするとよいと思います。
C#でSPAを作るBlazorの、開発環境の作り方 - Visual Studio編Blazor をお勧めできる人は誰か?を読んだんですが、サーバーとクライアントのどちらをどういう場合に使い分けるのかがよく分からなかったので取り急ぎはサーバーの方で作成します。サーバー兼クライアントとして動かせるのでまーよいでしょう。
↓↓↓↓↓↓↓ あなたの記事の内容
とりあえず実行してみて動くっていうのは初学者からすると物凄くハードルが下がるので非常にありがたいです。ということで作りたてほやほやのソリューションをデバッグしてみるとこうなります。
───────
とりあえず実行してみて動くっていうのは初学者からすると物凄く分かりやすいので非常にありがたいです。ということで作りたてほやほやのソリューションをデバッグしてみるとこうなります。
↑↑↑↑↑↑↑ 編集リクエストの内容
色合いがすげーイイ感じです。
では早速、このイイ感じの画面をぶっ壊していきます。ログイン画面を生成していきましょう。MainLayout.razorをBodyだけにします。
左のナビゲーションからページ遷移をさせたくないので。インデックスページをログイン画面として使います。当初は、こういう書き方をしていましたが、調べてみるとEditFormタグを使えばValidationをイイ感じにやってくれることが分かったので以下の様に変更しました。EditFormについては以下の記事を参考にさせていただきました。Blazorでコードビハインドでロジックとビューを分離して記述するにも書いてありますが、razorファイルに対応するcsファイルを作成することでコードビハインドとして扱ってくれます。今回で言うと、Index.razor.csファイルをPagesフォルダ直下に作成してみてください。すると、勝手に紐づけてくれます。しゅごい。
コードビハインドはこうなります。少しハマってしまったことが2点あります。
1点目に、Navigation.NavigateToメソッドで遷移するにあたって、NavigationManagerを、Injectする必要があります。
遷移先のページを保持している情報を取得しなければいけないということですね。2点目に、OnSubmitイベントとOnValidSubmit/OnInvalidSubmitイベントは併用不可であり同時に定義すると実行時エラーが発生してしまいます。念の為に書いておくと、実用的な使い勝手としては断然、OnValidSubmit/OnInvalidSubmitイベントでしょうね。でも併用できても良いと思うんだけどなー。ここまでくれば大体ログイン画面はできました。
Modelsフォルダとその中にLoginData.csを作成してください。
LoginData.csを以下の様なモデルを作成してやればある程度完成です！チャットページに遷移できるように、Pagesフォルダ以下にChat.razorファイルを追加することで以下のような動きになります。最低限。@page "/Chat"だけ記述されていれば遷移出来るはずです。
テキストボックスへ未入力時にアノテーションが効いててイイ感じです。
ただ今の状態だと、何かしらの値がIDとパスワードに入ってさえいればログインできてしまうのでこの点は後で実装します。Blazorだとクライアント処理もC#で書ける反面、全ての処理をrazorファイルに記述しないといけないと思っていましたが、ちゃんとそこら辺を考えてあって分離できるのはよい機構だなと思いました。次の記事では、遷移先のチャットページを作成してみたいと思います。参考にさせて頂いたページ


