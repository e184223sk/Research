More than 1 year has passed since last update.モチベーションも大事だと思うので覚書として使用します。
感想例外はC#7からswitchで使う方法もあるらしくプロパティやenumで複数処理する必要がある場合に使えると思うが、
それだけのエラー数毎の作成は骨が折れると思いました。
端折ってばかりですが…DB扱う際実践的にやっていこうと思います。理想はサクッと仕様だけメモって自作出来ればいいけど、なかなかうまく行かない☂
モチベも落ちたので一旦切り替えて年内は通訳関係の事業計画書製作に専念したいと思います。
例外が投げられた(発生した)時に行う処理です。
分岐としても使えますが重いので普通は使いません。
初期プログラミング界では大半がこの例外処理だったそうです。
(その時代じゃなくてよかった…)以前行った既定値外例外処理コード

            // 既定値外
            int numOfTesters = exNo;

            // 文字は代入されずwhileへ、既定値外は代入されwhileへ、既定値は代入されwhileパス
            if (int.TryParse(Console.ReadLine(), out var nType))
            { numOfTesters = nType; }


            while (numOfTesters &lt; 0)
            {
                Console.Write("retype. ");
                if (int.TryParse(Console.ReadLine(), out nType))
                    numOfTesters = nType;
            }


このように、例外を処理できます。if whileで既定値以外の既定値外と文字を処理してループにしました例外処理の定番、try{例外123...} catch{処理}
またcatchにwhen付けれるようなった(例外処理同じならまとめてcatch)
catch (Exception e) when (e is ArgumentNullException || e is ArgumentOutOfRangeException)事前知識:基本的なコード例をここに示します

using System;
using System.IO;

namespace ConsoleApplication1
{
    class Program
    {
        static void Main(string[] args)
        {
            try
            {
                Console.Write ("fileパス指定 ");
                StreamReader strmRdr = new StreamReader(Console.ReadLine());
                Console.WriteLine(strmRdr.ReadToEnd()); //内容をすべて読み込む
                strmRdr.Close(); ////.ReadToEnd後関連付けられたすべてのシステムリソースを解放 
                Console.ReadLine();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }


        }

    }
}


try catchせずパス間違った場合エラー

using System;  
using System.IO;  
namespace ConsoleApplication1 {  
    class Program {  
        static void Main(string[] args) {  
                Console.Write ("fileパス指定 ");
                StreamReader strmRdr = new StreamReader(Console.ReadLine());
                Console.WriteLine(strmRdr.ReadToEnd()); //内容をすべて読み込む
                strmRdr.Close(); ////.ReadToEnd後関連付けられたすべてのシステムリソースを解放
        }  
    }  
}


このように、try catchでファイルが存在しない場合のエラーを処理できましたException classは、例外メッセージを取得するライブラリです。
使用する際はシリアル化(エラーメッセージや設定ファイルの転送や保存)するといい。主なExceptionクラスとメンバ Best 5
memo: いずれ学習する他の例外処理
async，await，Await in catch and finally blocks



