        /// &lt;summary&gt;
        /// アルファベットを返す。
        /// 例えば、引数が1の時はA、2の時はB、27の時はAAとなる。
        /// 引数が不正な場合は&lt;see cref="string.Empty"/&gt;を返す。
        /// &lt;/summary&gt;
        /// &lt;param name="index"&gt;インデックス。1以上の値が有効&lt;/param&gt;
        /// &lt;returns&gt;アルファベット&lt;/returns&gt;
        public static string ToAlphabet(int index)
        {
            string alphabet = string.Empty;
            if (index &lt; 1) return alphabet;

            while(index &gt; 0)
            {
                // A-Zの変換を0-25にするため1を引く
                index--;
                // ASCIIではAは10進数で65
                alphabet = Convert.ToChar(index % 26 + 65) + alphabet; 
                index = index / 26;
            }

            return alphabet;
        }

        /// &lt;summary&gt;
        /// AからZのインデックスを返す。
        /// 例えば、引数がAの時は1、Bの時は2、AAの時は27となる。
        /// 引数が不正な場合は-1を返す。
        /// &lt;/summary&gt;
        /// &lt;param name="name"&gt;アルファベット。半角大文字のみ有効&lt;/param&gt;
        /// &lt;returns&gt;インデックス&lt;/returns&gt;
        public static int ToAlphabetIndex(string alphabet)
        {
            if (string.IsNullOrEmpty(alphabet))
            {
                return -1;
            }

            if (new Regex("^[A-Z]+$").IsMatch(alphabet))
            {
                int index = 0;
                for (int i = 0; i &lt; alphabet.Length; i++)
                {
                    // ASCIIではAは10進数で65
                    int num = Convert.ToChar(alphabet[alphabet.Length - i - 1]) - 65;
                    // A-Zの変換が0-25になっているため1を足して、A-Zが1-26になるようにする
                    num++;

                    index += (int)(num * Math.Pow(26, i));
                }
                return index;
            }

            return -1;
        }


