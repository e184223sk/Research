More than 1 year has passed since last update.前回：ASP.NET Core MVCであみだくじを作ってみる 4 (cssの作成)
今回は、Razorを使ってマスク領域を隠したり表示したりする機能を作ります。
また、くじの数の変更に対応できるよう、選択肢やくじを動的に描画するようにします。ASP.NET Core の Razor 構文リファレンスを参照しながら作っていきます。選択肢番号を押下した時に呼ぶアクションをKujiController.csに追加します。POSTされるように、Kuji\Index.cshtmlの&lt;div class="kuji-container"&gt;をformタグで囲み、
選択肢ボタンを&lt;a href="#"・・・からbuttonに変更します。
formタグには、タグヘルパー asp-controller、asp-actionをセットし、KujiControllerのIndexアクションを呼ぶようにします。
buttonには、どのボタンを押下したかをIndexアクションのパラメータに渡せるよう、asp-route-idをセットします。KujiControllerのIndexアクションでSelectIdに選択したくじ番号をセットしています。
未選択の時は、SelectId＝0です。このため、SelectId＝0の時だけマスク領域を表示するようにしています。&lt;!--モデルをコントローラーへ通知--&gt;の部分は、KujiControllerのIndexアクションで自身のViewに戻るため、
モデルデータが消えないようにhidden項目にデータを持たせています。くじの数を固定で作ってきましたが、せっかくHomeビューで数を設定できるようにしたので、
選択肢ボタンやくじを、くじの数によって動的に描画することにします。くじの縦線の長さや縦線と縦線の間に引く横線の数や位置がランダムになるよう、Randomクラスで乱数を発生させました。
また、縦線と縦線の間に引く横線が同じ行番号にならないよう工夫してみました。&lt;div class="kuji-line"&gt;の中を以下のように変更します。@{ }とすると、{ }の中にC#コードを埋め込むことができます。
&lt;div&gt;や&lt;button&gt;などタグの中では、@{ }の中でも変数には＠を付ける必要があるようです。Homeビューでくじの数を設定→結果の文字列を入力→くじを作る→選択肢ボタンを押下したのが下図の動きです。
今回は、Razorを使ってマスク領域を隠したり表示したりする機能を作成しました。
次回は、Razorを使って選択した番号のあみだを辿る処理を作ります。
次回分はこちら⇒ASP.NET Core MVCであみだくじを作ってみる 6 (Razorを使う あみだを辿る編)


