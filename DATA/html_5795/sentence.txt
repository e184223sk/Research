More than 3 years have passed since last update.最近 Kotlin をよく使っているので、 C# とくらべて「お、これはイイな！」と思ったところを挙げてみました、今後足してく予定。これ↓も似たような話かな。C#Kotlin圧倒的短さ！ &amp; copy メソッドなにこれすごい！
Json のモデルクラスを作る時にはほんと便利。C#Kotlin圧倒的短さ！
これが型を後ろに書く言語の強みなのか？？？C#Kotlin代入の必要ナシ！
そもそもプライマリコンストラクタの引数はそのままプロパティになる模様（val を付けない場合はイニシャライザ init {} の中でのみ参照可能な変数になるとのことです、コメントで教えていただきました）。C#Kotlinいかなるケースでも val と var の使い分けだけで済むのがイイ！C#Kotlin末端関数において、 null になる可能性を排除して実装できる安心感パない。
(C# でも構造体を多用すればできるけど、目的が違うし実質ムリ)C#Kotlin主にイベントリスナーで、ラムダ式の「引数を使わない」ことを示すために、 C# では「引数名を _ にする」という文化があります。
が、あくまで文化でしかないので、変数 _ が存在しているだけであり、引数が２個あったら両者に _ は使えないし、関数内で _ は変数として普通に使えてしまいます。一方で Kotlin の _ は「使用しない変数名」として特別視されており?、複数の引数に割り当てられるし、関数内で _ を使うとエラーにしてくれます。C# でラムダ式をネストせざるを得ないときに、まあまあな頻度で _ を複数回使いたいなーと感じることがあるので、Kotlin の _ は便利だなー、と思います。API設計は、慎重派なんですよ。
気持ちよさにかまけて非公開とすべきAPIに private を付け忘れそう。まあ便利で使いもするんだけど、 card?.let{ } で代用できるし(これも Smart Cast だとコメントで教えてもらいました)。C# でも Nullable&lt;T&gt; なら 「スコープ内は null でないことを保証できる」 Let 拡張関数が書けるので、参考までに載せときます。上のコードは name が空文字の場合、zip を無視して空文字を返してしまいます。
いつかハマりそうで、オドオドしてます。Smart-cast も Non-local return も、自分が知ってる言語にない機構に拒否反応を示してるだけですね。慣れたらガンガン使いそうです。C# にしかない機能や、これから新たに追加される機能もあると思いますが、あくまで自分が使用する範囲で感じたこと、ということで。C# の方ももちろん進化は続いていて、に代表されるように、モダンと呼ばれる仕様も次々と取り込まれていく雰囲気が好きです。


