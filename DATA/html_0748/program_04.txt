
using System;
using System.Windows;
using System.Windows.Interop;

namespace WpfApp1
{
    public partial class MainWindow : Window
    {
        private bool _isLock;
        public MainWindow()
        {
            InitializeComponent();
        }

        private void ShowButton_Click(object sender, RoutedEventArgs e)
        {
            _isLock = true;
            IsEnabled = false;
            var w = new MainWindow { Owner = this };
            w.Closed += (_, __) =&gt;
            {
                _isLock = false;
                IsEnabled = true;
            };
            w.Show();
        }

        const int WM_SYSCOMMAND = 0x0112;
        const int SC_MOVE = 0xF010;
        const int SC_MASK = 0xFFF0;
        const int SC_MAXIMIZE = 0xF030;
        const int SC_MINIMIZE = 0xF020;
        const int WM_CLOSE = 0x0010;

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            var source = HwndSource.FromHwnd(new WindowInteropHelper(this).Handle);
            source.AddHook(WndProc);
        }

        private IntPtr WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)
        {
            // _isLock が true の間は閉じたり最大化したり最小化したり移動させない
            if (msg == WM_CLOSE)
            {
                handled = _isLock;
            }

            if (msg == WM_SYSCOMMAND)
            {
                var sc = wParam.ToInt32() &amp; SC_MASK;
                if (sc is SC_MOVE or SC_MAXIMIZE or SC_MINIMIZE) // C# 9.0 の書き方なので、それより前の場合は == と || 使って書いて
                {
                    handled = _isLock;
                }
            }
            return IntPtr.Zero;
        }
    }
}

