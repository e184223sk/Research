More than 1 year has passed since last update.opencv_contrib には物体追従(トラッキング)をしてくれる trackingモジュール という素晴らしいモジュールが用意されています。しかし、このトラッキング処理はイメージサイズに反比例してパフォーマンスが低下するという、ある意味当たり前ですが、パフォーマンスの問題を抱えています。時に映像内の物体を追従したいといった時、特にリアルタイム処理したい場合には、この問題は顕著にフレームレートの低下をもたらしてしまうことがあります。この記事はその問題に対する1つの回答です。アイディアは至って簡単です。大きなイメージサイズを扱わず、小さなイメージにリサイズしてからトラッキングを行います。リサイズ処理のコストはトラッキング処理のコストよりも遥かに小さく済みます。VisualStudioのパフォーマンスプロファイラーを使って、CPU処理を計測してみました。OpenCvSharpを使用してカメラ入力の映像をリアルタイムで処理するWPFアプリケーションを作成しました。カメラ入力映像はHD解像度(1280 x 720)ですが、対応前はそのまま処理しており、対応後は内部的にSD解像度(640 x 480)に変換してから処理をしています。トラッキング処理のコアメソッドである OpenCvSharp.Tarcking.Update のCPU占有率を比較しました。計測機器はLenovo Thinkpad T470s (CPU Core i7-7500U @ 2.7Ghz)を使っています。大雑把ですが、結果として、トラッキング処理に使われているCPUが、2/3になりました。参考までに計測に使用したコードの一部を加工して載せます。OpenCvSharpを使う人なら普通に実装できると思います。大雑把な解説ですが、カメラ映像等の取得ループ内で使う前提で、トラッキング領域ごとにnewして、Initでトラッキングしたい領域を指定、イメージが変わるたびにUpdateを呼び出して追従処理をする感じです。マジックナンバーになっていますが、内部的には幅640px超のイメージはアスペクト比を保ったまま640pxにリサイズして処理します。以上。
OpenCVって使い慣れてくると便利です。OpenCvSharpを作ったshimatさん、感謝しています。皆さんも良いOpenCVライフを送ってください。


