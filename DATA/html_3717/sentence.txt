More than 1 year has passed since last update.JSON には非数(NaN)は入れられない。入れられるフォーマットになっていないので仕方ない。
無限大も入れられない。入れられるフォーマットになっていないので仕方ない。
仕方ないんだけど、入れようとしたらどうなってしまうのか、各言語の対応を見ていく。まずはソースコード：これを実行すると：となる。
両者とも例外。まあそうだよね。まずはソースコード：実行するとこうなる：go なので例外でも panic でもなく、エラーになる。まずはソースコード：実行するとこうなる：例外にもエラーにもならず、黙って null にされる。
今回の記事と関係ないけど、null や undefined などを JSON.stringify に食べさせると下表のようになる：JavaScript 難しい。初出時は見出しに「C#」と普通に書く方法がわからないのでバッククオートでくくってみた。と書いていたんだけど、見出しの # C# に続けて半角スペースを打てばよいという編集リクエストを @htsign さんから頂いたので修正した。
ありがとうございます。それはさておきソースコード：
まずはソースコード：実行するとこうなる：ひどい。JSON として valid ではない。
実行環境は macOS 10.14.3 で、である。
10分ぐらい調べた範囲では、回避策はない。ひどい。まずはソースコード：実行するとこうなる：ひどい。JSON として valid ではない。Python3 の場合は回避策がある。j = json.dumps( [val] )
を
j = json.dumps( [val], allow_nan=False )
に変更すればよい。そうすると、出力はになる。正しい。なんでこちらがデフォルトじゃないんだろう。まずはソースコード：無限大と非数の定数や関数がないらしい。
これを実行するとこうなる：これもひどい。
ほとんど調べてないけど、パット見 回避策はなさそう。
ちなみに perl は v5.18.2まずはソースコード：動かすとこうなる：ドキュメントを見ると成功した場合に、JSON エンコードされた文字列を返します。 失敗した場合に FALSE を返します。という PHP のことをよく知らない私にはやや意外な I/F になっていて、それがちゃんと機能しているようだ。初出時とはいえ、エラーの原因などについて知る方法はなさそうな感じ。残念。と書いていたが、エラーを取る関数を間違えていただけだった。実際は上記の通り（そして @rana_kualu　さんのコメントの通り) エラーの原因も取れる。
さらに、そういうオプションを指定すれば例外にすることもできるようだ。
素晴らしい。ちなみに、上記ソースコードで if (is_string($json)) となっている箇所を if ($json) としてはいけない。json_encode(0) は、"0" であり、 "0" は falsy なので不幸になる。C++ には私の知る限り標準的な JSON encoder / parse はない。
よく使われていそうな JSON ライブラリがどうしているのか、二例調査した。仕事で使ったことがある。ヘッダのみなので導入が楽。
で。これを使ったソースコード：実行するとこうなる：ちゃんと例外になる。NaN の場合も std::overflow_error なのはどうなんだとか、throw std::overflow_error("");と、メッセージなしなのはちょっととか、思わなくもないけれど、困ることはないと思う。picojson の他にライブラリ無いかなと思って探して最初に見つけたもの。というわけでソースコード：実行するとこうなる：だまって null にされる。
std::isfinite を呼んでいる場所 を見る限りオプションなどはない模様。jsonc をパースしてくれるので最近使っている jsoncpp。というわけでソースコード：実行するとこうなる：非数は黙って null にされる。よろしくない。無限大は 1e+9999 にするという新しい展開。なるほどとも思うけど、8倍精度浮動小数の最大値がおよそ $1.6113 × 10^{78913}$ らしいので、もう一桁か二桁ほしいところだったかも。useSpecialFloats というオプションがあって、これを使うと非数が NaN に、無限大が Infinity になり、JSON としては不正になる。よろしくない。各言語の対応をまとめると：という感じ。※ 初出時 PHP は「Good」だったが、ちゃんと原因も取れるようなので「Very Good」に変更した。だめな人が多くてびっくりした。


