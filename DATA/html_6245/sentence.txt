More than 3 years have passed since last update.WPF で Prism と  Autofac を使います。Visual Studio Community  2017
.Net Framework 4.6.2
Prism.Autofac 6.3.0Visual Studio で 新規作成から WPF アプリを選択してプロジェクトを作成します。本記事では プロジェクト名を EduPrismWpfApp としています。WPFに限らず Xamrin.Forms など Prism を使って開発をするときに、コントロールを専用のものにしたり、ViewModelLocator の設定など xaml に記述する必要がありますが、これらをテンプレート化してくれている Visual Studio の拡張機能として PrismTemplatePack がありますのでこれを入れておくと少し楽かもしれません。また、今回は使用していませんが Unity や Autofac 用のプロジェクトテンプレートも含まれています。PrismTemplatePack
https://marketplace.visualstudio.com/items?itemName=BrianLagunas.PrismTemplatePack『ソリューションの Nuget パッケージ管理』を開いて参照タブで Prism.Autofac と検索して一致したものをインストールしてください。 または『パッケージ マネージャーコントロール 』で以下のコマンドを入力してもインストールできます。Prism.Autofac
https://www.nuget.org/packages/Prism.AutofacViews フォルダを作成してその中に Shell.xaml をウインドウとして作成します。初期状態でプロジェクト直下に自動生成されている MainWindow.xaml は削除しておきます。プロジェクト直下に Bootstrapper.cs を作成して Bootstrapper クラスに AutofacBootstrapper を継承させます。ここではShell の登録と表示をおこなうための処理を追加します。作成した Bootstrapper をアプリケーション起動時に呼び出すように App.xaml と  App.xaml.cs を修正します。この状態で実行すると作成した Shell が起動することが確認できると思います。ソリューションに新しくプロジェクトを作成します。ソリューションエクスプローラでソリューションを右クリックして表示されるコンテクストメニューから「追加」→「新しいプロジェクト」を選択し『WPF ユーザーコントロールライブラリ』を選択してプロジェクトを作成します。本記事ではプロジェクト名を EduPrismWpfApp.Modules.SampleModule としています。普通のクラスライブラリではなく『WPF ユーザーコントロールライブラリ』で作成する理由としては参照設定など少し楽になるからです。作成されたプロジェクトに自動生成されているクラスまたはユーザーコントロールは削除しておきます。最初に作成したプロジェクトと同じように Nuget から Prism.Autofac のパッケージを追加しておいてください。プロジェクトに Models フォルダを作成してその中に SampleMessageProvider.cs を作成します。今回はサンプルとして、 単純にメッセージ文字列をプロパティとして持っているだけのインターフェイスと、そのインターフェイスを継承したクラスを用意します。プロジェクトに ViewModels フォルダを作成してその中に SamplePageViewModel.cs を作成します。ViewModel ではコンストラクタの引数で先ほど作成した Model のインターフェイスを受取り、読み取り専用のプロパティとして View に公開するようにします。プロジェクトに Views フォルダを作成してその中に SamplePage.xaml をユーザーコントロールとして作成します。View では ViewModel で公開されているプロパティからモデルに定義されているメッセージ文字列を Label 要素にバインドして表示するようにします。Prism 用と Autofac 用の二つの Module を作成します。まずは Prism 用の Module としてプロジェクトの直下に SampleModule.cs を作成します。このクラスに Prism.Modularity.IModule を継承させて Initialize() で 先ほど作成した View が初期表示されるように処理を追加します。また、画面遷移をおこなうためにコンストラクタの引数で IRegionManager を受取るようにしておきます。Autofac 用の Module としてプロジェクトの直下に SampleModuleRegistry.cs を作成します。このクラスに Autofac.Module を継承させて  Load() メソッドを override して Model と View を登録します。Shell.xaml に ContentControl 要素を追加して、 Region 名を指定します。リージョン名の指定は prism:RegionManager.RegionName に 文字列を設定することでおこなえます。Bootstrapper クラスに先ほど作成した Module を登録する処理を追加します。追加する内容は以下となります。この状態で実行すると View が表示されて Model に定義されているメッセージが表示されるのが確認できると思います。


