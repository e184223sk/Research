More than 3 years have passed since last update.デザインパターンの一角, StatePatternをC#で組んでみました.Stateパターンを使えば, 呼び出し側のコードでif文/switch-case文を書かなくて良いというメリットがあります.
今回は, 汎用的に使えるState/Contextのクラスを作ってみます.ソースはこちらベースとなるステートクラスでは, 「自分のステートに遷移した時」と「自分のステートから出て行った時」のイベントを用意しています.各Stateを管理して, Stateの遷移を管理・実行するクラスです.状態の追加には「addState」, 遷移には「transitState」を呼び出せばOKです.State/StateContextを継承した自作State/自作Contextを作り, AddStateを使ってStateを登録していきます.
遷移時のイベントは「onEnter」「onExit」に登録可能です.
詳しいコードはGitHubに上げているので, そちらをご覧ください.↓のように, 具象クラスを別ファイルで実装してみると良いと思います.UnityでUI組むときとかに使えそうです.UIの場合, ユーザからの入力情報は変わらないけど, 階層構造をもっていて画面遷移する事が多いです.
Stateに応じた入力処理・画面遷移を組めば, 呼び出し側のコード(ビヘイビア)は綺麗に保てそうです.呼び出すメソッドが共通化できる時に使わないと, 却ってコードの煩雑化を招きます例えば, こんなケース.StateAとStateBの間で異なるインタフェースしか提供されないと, 結局Context側で無駄な条件分岐が発生します.本来やりたかったのは「呼び出し側のコードがif文/switch-case文を使いたくない」という事なので, 本末転倒です.
「あ, このメソッドは共通化できるな」という見通しが立ってから使った方がよさそうです.(...という認識であってるかなー? ご意見あれば, コメント欄に書き込んで下さると勉強になります)


