More than 1 year has passed since last update.C#のSystem.Security.Cryptography 名前空間ではハッシュや乱数生成、メッセージ認証といった操作や、データの暗号化アルゴリズムが提供されています。
今回はその暗号化アルゴリズムのうち、対称鍵暗号（共通鍵暗号）の1つであるAES暗号と、公開鍵暗号の1つであるRSA暗号を用いて平文を暗号化し暗号文を取得、また逆に暗号文を復号し平文を求めるプログラムを書いてみました。AES(Advanced Encryption Standard)はRijndaelとも呼ばれ
旧規格の対称鍵暗号であるDES(Data Encryption Standard)の安全性が低下したために、NIST(アメリカ国立標準技術研空所)が公募し、2000年に選定された対称暗号である。それでは実際にコードを書いてAES暗号を利用してみます。
AES暗号はSystem.Security.Cryptography.RijndaelManagedクラスで提供されています。
RijndaelManaged クラス : https://msdn.microsoft.com/ja-jp/library/system.security.cryptography.rijndaelmanaged(v=vs.110).aspx
今回はこれを利用します。以下は実際に作成したコードです。Encrypt()は平文と対称アルゴリズムの初期ベクトル、共有鍵の文字列を引数に取り、暗号文の文字列を返す関数である。
一方Decrypt()はその逆で、暗号文と初期ベクトル、共有鍵から平文の文字列を返す関数です。平文は"Hello, World!"という文字列で、初期ベクトル、共通鍵はBlockSizeとKeySizeを共に128ビットに指定しているので、適当な16バイト文字列を指定しています。実行結果は以下の通りこのように、平文を暗号化した文字列を復号して元の平文が得られていることが確認できました。続いてはRSA暗号です。
RSA暗号は公開鍵暗号の1つで、公開鍵と秘密鍵の2つの鍵を用いて暗号化と復号を行う方法であり、暗号やデジタル署名を実現できる方式です。それではこちらも実装してみます。
RSA暗号の実装には
RSACryptoServiceProvider クラス：https://msdn.microsoft.com/ja-jp/library/system.security.cryptography.rsacryptoserviceprovider(v=vs.110).aspx
を利用します。以下は作成したソースコードです。Encrypt()は平文の文字列を公開鍵で暗号化する関数で
Decrypt()は暗号文の文字列を秘密鍵で暗号化する関数です。
公開鍵、秘密鍵の作成はRSAクラスのメソッドToXmlString()を利用します。
このメソッドは作成したRSAオブジェクトのキーを格納するXML文字列を返します。
また、引数をtrueとすることで公開、秘密のRSAキーが含まれ、falseをとすると秘密キーだけが含まれます。暗号化、複合はそれぞれRSACryptoServiceProviderクラスの
Encrypt,Decryptメソッドを利用します。
これらのメソッドは第二引数をfalseとすることでPKCS#1 v1.5パディングを使用することができます。
（trueとすると直接RSAを復号する)RSA暗号方式はといった脆弱性があるため、暗号化前に適切なパディングを行っている。 
RSA暗号 - Wikipedia より引用実行した結果以下の通りこちらも"Hello, world!"といった文字列を平文として指定し、暗号化、復号を行った結果、
平文を暗号化した文字列を復号することで元の平文が得られることが確認できました。


