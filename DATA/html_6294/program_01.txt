
using System;
using System.Security.Cryptography;
using System.Text;

class RSAEncryption
{
    static void Main(string[] args)
    {
        // 平文の文字列
        string plainText = "Hello, world!";
        // 暗号化、復号された文字列
        string encrypted, decrypted;
        // 公開鍵と秘密鍵
        string publicKey, privateKey;

        using (RSACryptoServiceProvider rsa = new RSACryptoServiceProvider())
        {
            // 公開鍵、秘密鍵をXML形式で取得する
            publicKey = rsa.ToXmlString(false);
            privateKey = rsa.ToXmlString(true);

            Console.WriteLine("PlainText\n{0}\n", plainText);

            encrypted = Encrypt(plainText, publicKey);

            Console.WriteLine("Encrypted\n{0}\n",encrypted);

            decrypted = Decrypt(encrypted, privateKey);

            Console.WriteLine("Decrypted\n{0}\n",decrypted);
        }
    }

    /// &lt;summary&gt;
    /// 公開鍵暗号で文字列を暗号化する
    /// &lt;/summary&gt;
    /// &lt;param name="text"&gt;平文の文字列&lt;/param&gt;
    /// &lt;param name="publickey"&gt;公開鍵&lt;/param&gt;
    /// &lt;returns&gt;暗号化された文字列&lt;/returns&gt;
    public static string Encrypt(string text,string publickey)
    {
        using (RSACryptoServiceProvider rsa = new RSACryptoServiceProvider())
        {
            rsa.FromXmlString(publickey);

            byte[] data = Encoding.UTF8.GetBytes(text);

            data = rsa.Encrypt(data, false);

            return Convert.ToBase64String(data);
        }
    }

    /// &lt;summary&gt;
    /// 対称鍵暗号で暗号文を復号する
    /// &lt;/summary&gt;
    /// &lt;param name="cipher"&gt;平文の文字列&lt;/param&gt;
    /// &lt;param name="privatekey"&gt;秘密鍵&lt;/param&gt;
    /// &lt;returns&gt;復号された文字列&lt;/returns&gt;
    public static string Decrypt(string cipher, string privatekey)
    {
        using (RSACryptoServiceProvider rsa = new RSACryptoServiceProvider())
        {
            rsa.FromXmlString(privatekey);

            byte[] data = Convert.FromBase64String(cipher);

            data = rsa.Decrypt(data, false);

            return Encoding.UTF8.GetString(data);
        }
    }
}

