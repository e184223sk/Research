using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

public static class AESCryption
{
    private const string AES_IV  = @"pf69DL6GrWFyZcMK";
    private const string AES_Key = @"9Fix4L4HB4PKeKWY";

    public static void Main()
    {
        // 平文の文字列
        string plainText = "Hello, World!";

        Console.WriteLine("PlainText : {0}\n", plainText);

        // 暗号化された文字列
        string cipher = Encrypt(plainText, AES_IV, AES_Key);
        Console.WriteLine("Cipher : {0}\n" ,cipher);

        Console.WriteLine("Decrypted : {0}\n", Decrypt(cipher, AES_IV, AES_Key));
    }

    /// &lt;summary&gt;
    /// 対称鍵暗号を使って文字列を暗号化する
    /// &lt;/summary&gt;
    /// &lt;param name="text"&gt;暗号化する文字列&lt;/param&gt;
    /// &lt;param name="iv"&gt;対称アルゴリズムの初期ベクター&lt;/param&gt;
    /// &lt;param name="key"&gt;対称アルゴリズムの共有鍵&lt;/param&gt;
    /// &lt;returns&gt;暗号化された文字列&lt;/returns&gt;
    public static string Encrypt(string text, string iv, string key)
    {

        using (RijndaelManaged rijndael = new RijndaelManaged())
        {
            rijndael.BlockSize = 128;
            rijndael.KeySize = 128;
            rijndael.Mode = CipherMode.CBC;
            rijndael.Padding = PaddingMode.PKCS7;

            rijndael.IV = Encoding.UTF8.GetBytes(iv);
            rijndael.Key = Encoding.UTF8.GetBytes(key);

            ICryptoTransform encryptor = rijndael.CreateEncryptor(rijndael.Key, rijndael.IV);

            byte[] encrypted;
            using (MemoryStream mStream = new MemoryStream())
            {
                using (CryptoStream ctStream = new CryptoStream(mStream, encryptor, CryptoStreamMode.Write))
                {
                    using (StreamWriter sw = new StreamWriter(ctStream))
                    {
                        sw.Write(text);
                    }
                    encrypted = mStream.ToArray();
                }
            }
            return (System.Convert.ToBase64String(encrypted));
        }
    }

    /// &lt;summary&gt;
    /// 対称鍵暗号を使って暗号文を復号する
    /// &lt;/summary&gt;
    /// &lt;param name="cipher"&gt;暗号化された文字列&lt;/param&gt;
    /// &lt;param name="iv"&gt;対称アルゴリズムの初期ベクター&lt;/param&gt;
    /// &lt;param name="key"&gt;対称アルゴリズムの共有鍵&lt;/param&gt;
    /// &lt;returns&gt;復号された文字列&lt;/returns&gt;
    public static string Decrypt(string cipher, string iv, string key)
    {
        using (RijndaelManaged rijndael = new RijndaelManaged())
        {
            rijndael.BlockSize = 128;
            rijndael.KeySize = 128;
            rijndael.Mode = CipherMode.CBC;
            rijndael.Padding = PaddingMode.PKCS7;

            rijndael.IV = Encoding.UTF8.GetBytes(iv);
            rijndael.Key = Encoding.UTF8.GetBytes(key);

            ICryptoTransform decryptor = rijndael.CreateDecryptor(rijndael.Key, rijndael.IV);

            string plain = string.Empty;
            using (MemoryStream mStream = new MemoryStream(System.Convert.FromBase64String(cipher)))
            {
                using (CryptoStream ctStream = new CryptoStream(mStream, decryptor, CryptoStreamMode.Read))
                {
                    using (StreamReader sr = new StreamReader(ctStream))
                    {
                        plain = sr.ReadLine();
                    }
                }
            }
            return plain;
        }
    }
}

