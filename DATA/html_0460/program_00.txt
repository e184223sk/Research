using System;
using System.Collections;
using System.Collections.Generic;

foreach (var i in   0.. 10) Console.WriteLine(i); // 0  1  2  3  4  5  6  7  8  9  10
foreach (var i in   0..^10) Console.WriteLine(i); // 0  1  2  3  4  5  6  7  8  9
foreach (var i in  ^0.. 10) Console.WriteLine(i); //    1  2  3  4  5  6  7  8  9  10
foreach (var i in  ^0..^10) Console.WriteLine(i); //    1  2  3  4  5  6  7  8  9
foreach (var i in  10.. 0 ) Console.WriteLine(i); //10  9  8  7  6  5  4  3  2  1  0
foreach (var i in  10..^0 ) Console.WriteLine(i); //10  9  8  7  6  5  4  3  2  1
foreach (var i in ^10.. 0 ) Console.WriteLine(i); //    9  8  7  6  5  4  3  2  1  0
foreach (var i in ^10..^0 ) Console.WriteLine(i); //    9  8  7  6  5  4  3  2  1

static class RangeExtension
{
    public static RangeEnumerator GetEnumerator(this Range range) =&gt; new RangeEnumerator(range);
    public struct RangeEnumerator : IEnumerator&lt;int&gt;
    {
        readonly int Max;
        readonly int Step;

        public int Current { get; private set; }
        object IEnumerator.Current =&gt; this.Current;

        public bool MoveNext()
        {
            if (this.Current != this.Max)
            {
                this.Current += this.Step;
                return true;
            }
            return false;
        }
        public void Dispose() { }
        public void Reset() =&gt; throw new NotSupportedException();

        public RangeEnumerator(Range range)
        {
            var step = range.End.Value &lt; range.Start.Value ? -1 : 1;
            this.Current = range.Start.Value - (range.Start.IsFromEnd ? 0 : step);
            this.Max = range.End.Value - (range.End.IsFromEnd ? step : 0);
            this.Step = step;
        }
    }
}


