
struct MovingData {
    //省略
    public int rotX;
    public int rotY;
    //省略
    public void ResetRotXY() { rotX = rotY = 0; }
    public void ResetAll() { ResetPosXY(); ResetPosZ(); ResetRotXY(); }
}

bool isRightMoving;

protected override void MouseInput(object sender, Rwin.MouseInputEventArgs e) {
    switch(e.ButtonFlags) {
        //省略
        case Rwin.MouseButtonFlags.RightDown:
            isRightMoving = true;
            break;
        case Rwin.MouseButtonFlags.RightUp:
            isRightMoving = false;
            break;
    }

    //省略
    if(isRightMoving) {
        movingNow.rotX += e.X;
        movingNow.rotY += e.Y;
    }
}

private void UpdateCamera() {
    var world = Matrix.Identity;

    float div = 10;
    var viewEye = new Vector3(0 , 10, -45);
    var viewTarget = new Vector3(0, 10, 0);
    var view = Matrix.Multiply(
        Matrix.Multiply(
            Matrix.RotationX(-movingNow.rotY / 100.0f), 
            Matrix.RotationY(movingNow.rotX / 100.0f)
        ), Matrix.Multiply(
            Matrix.LookAtRH(viewEye, viewTarget, new Vector3(0, 1, 0)),
            Matrix.Translation(movingNow.posX / div, -movingNow.posY / div, movingNow.posZ * 0.2f)
        )
    );

var projection = Matrix.PerspectiveFovRH(
    30 * (float)Math.PI / 180, ClientSize.Width / ClientSize.Height, 0.1f, 1000
);
    //省略
}

