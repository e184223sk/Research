More than 3 years have passed since last update.ここでは、C#を用いてカプセル化の例を紹介する。上記のPersonクラスでは、以下に挙げる三点の理由から、カプセル化の利点を享受することができない。フィールドの読み書きを、詳細に制御することができない値の妥当性を検査できない内部変更に弱いC#が用意している、フィールドを取得する仕組みである「プロパティ」を用いることで、クラス内ではメソッドのように表記できるが、クラス外からはフィールドのようにアクセスすることができる。また、フィールドのアクセスレベルをprivateにすることで、利用者側の不用意なアクセスを禁止している。さらに、先述の悪い例で挙げた問題点を解決することができる。読み書きを制御することができる値の妥当性を検査できるこのように、カプセル化においては、以上の二点を適切に設けることで、利用者が複雑な内部処理を意識することなく機能を使えるだけでなく、不用意に内部機能にアクセスすることを防ぐことができる。


