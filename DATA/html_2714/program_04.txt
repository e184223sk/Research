
public bool Solve(int xSize, int ySize) {
    _board = new Board(xSize, ySize);
    return Solve(Piece.PieceList);
}

// 解を求める （再帰メソッド）
private bool Solve(IEnumerable&lt;Piece&gt; pieceList) {
    // 最初のピースを取り出す
    var piece = pieceList.FirstOrDefault();              
    if (piece == null)
        // すべてのペースを使い切った(つまり成功)
        return true;
    // ピースを回転、反転させたものを取り出し試していく。
    foreach (var curr in piece.AllSeries) {
        // すべての位置を順に取り出す、そこにcurrを置いていく
        foreach (var topleft in _board.AllPoints) { 
            // 取り出した位置(左上)にピースを置いてみる
            if (Put(topleft, curr)) {  
                if (CountEmpty().Any(n =&gt; n % 5 != 0)) {
                    // 5で割り切れない空き領域があれば、そこにピースははめ込むことができない。
                    // 枝刈り処理 これ以上試しても仕方が無いので、次を試す。
                    Remove(topleft, curr);
                    continue;
                }
                var newlist = pieceList.Where(o =&gt; o.Char != curr.Char).ToList();
                // 置けたら残りのピースで同じことを繰り返す
                if (Solve(newlist) == true)
                    // 成功したら処理を終える
                    return true;
                // 状態を戻して、次を試す
                Remove(topleft, curr);       
            }
        }
    }
    return false;
}

