
public class Piece {
    // 一つのピースの配列の空白以外の場所の位置を記憶
    public IList&lt;Point&gt; Points { get; private set; }

    // 回転、反転させた全てのパターンを列挙（コンストラクタで設定）
    public IList&lt;Piece&gt; AllSeries { get; private set; }

    //  ピースのサイズ
    public int YSize { get; set; }  
    public int XSize { get; set; }

    // ピースの形を示す文字
    public char Char { get; private set; }

    // 右に90度回転
    public Piece R90() {
        return new Piece {
            Char = this.Char,
            Points = Points.Select(pt =&gt; new Point { 
                    X = pt.Y, Y = this.XSize - pt.X - 1 
                })
              .OrderBy(pt =&gt; pt.Value).ToList(),
            XSize = this.YSize,
            YSize = this.XSize,
        };
    }

    // 左右に反転
    public Piece Mirror() {
        return new Piece {
            Char = this.Char,
            Points = Points.Select(pt =&gt; new Point { 
                    X = pt.X, Y = this.YSize - pt.Y - 1 
                })
              .OrderBy(pt =&gt; pt.Value).ToList(),
            XSize = this.XSize,
            YSize = this.YSize,
        };
    }

    // 回転、反転の８つのピースを得る （左右対称なら４つ）
    private IEnumerable&lt;Piece&gt; AllCandidates() {
        yield return this;
        Piece r1 = this;
        for (int j = 0; j &lt; 3; j++) {
            r1 = r1.R90();
            yield return r1;
        }
        var mirror = this.Mirror();
        if (!_pieceComparer.Equals(this, mirror)) {
            yield return mirror;
            for (int j = 0; j &lt; 3; j++) {
                mirror = mirror.R90();
                yield return mirror;
            }
        }
    }
}


