More than 5 years have passed since last update.以下の理由で、エラーレスポンスを返すときはIHttpActionResult型を使うのが良さそうです。エラーレスポンスを返さないときは任意の型を使うのが良いです。次の4パターンがあります。IHttpActionResult は ASP.NET Web API 2 から増えました。このうちので、今回の議論からは外します。GET /api/pruductsのようなエラーレスポンスを返さないAPIを実装します。メソッドシグネチャで戻り値の型が明示されていて良さげです。が、ちょっと格好わるいです。エラーレスポンスのないAPIは任意の型を使うのが良さそうです。GET /api/pruducts/:idのようなエラーレスポンスを返すAPIを実装します。ここまではエラーレスポンスのないAPIと一緒です。
404などのエラーレスポンスを返す時はどうするのでしょうか？Product型以外はreturnできません。Product型をHttpResponseMessageのサブクラスにしてレスポンスコードを持たせるのは、面倒です。HttpResponseExceptionをthrowします。
例外であれば、メソッドの戻り値と違う型をthrowできます。ここで二つの疑問があります。1番目はヘルパーメソッドを書けば解決できそうです。2番目は例外的状態にだけ例外を使用する - Strategic Choiceによるとパフォーマンスが悪くなる。
可読性が低くなる。
関係ない例外を消費して、他のバグを見逃す危険がある。の点があげられています。
パフォーマンスはチューニングの問題なので、ここでは考えません。
可読性が悪くてバグを見逃す可能性が高い点を考えると
こうすれば・・・可読性はクリアできそうです。ところで、デバッグしてみましょう。ハンドルしていない例外を投げると、デバッガはそこで毎回止まります。
不便です。controllerのテストを書いてみます。動かしてみると・・・
例外が発生します。よく見るとArgumentNullExceptionです。Requestプロパティの値がnullなので、起きる例外です。Requestプロパティに何かしらのstubを設定する必要があります。最初から読みやすいです。はApiControllerに定義されたヘルパーメソッドです。ApiController メソッド (System.Web.Http)に他のメソッド定義があります。もちろん、デバッガで意図せずに止まりません。先ほどのテストコードがそのまま動きます。


