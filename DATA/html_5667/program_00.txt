using System.IO;
using System.Text;
using System.Text.RegularExpressions;
public class IniManager
{
    // Iniファイル情報格納(OrderedDictionary型)
    public OrderedDictionary&lt;string, OrderedDictionary&lt;string, string&gt;&gt; SectionDic { get; set; }
    // Iniファイル情報格納(DataSet型)
    public DataSet SectionDataSet { get; set; }

    // エンコーディング
    public Encoding Encording { get; set; }

    // セクション番号区切り文字
    public string SectionSeparator { get; set; }
    // キー番号区切り文字
    public string KeySeparator { get; set; }
    // セクションと値の間の空白
    public string InsertSpace { get; set; }

    // XML用ルート名
    public string RootName { get; set; }

    // セクショングループ用属性値
    public const string SECTION_GROUP_ATTR = "Grp";
    // パラメーターグループ用属性値
    public const string PARAMETER_INDEX_ATTR = "Idx";
    // XML用ルート名
    public const string DEFAULT_ROOT_NAMER = "Root";

    // セクション用正規表現パターン
    const string SECTION_PATTERN = @"^\s*\[(?&lt;section&gt;[^\]]+)\].*$";
    // パラメーター用正規表現パターン
    const string PARAMETER_PATTERN = @"^\s*(?&lt;name&gt;[^=]+)=(?&lt;value&gt;.*?)(\s+;(?&lt;comment&gt;.*))?$";

    // コンストラクタ
    public IniManager()
    {
        Encording = Encoding.UTF8;
        SectionSeparator = "";
        KeySeparator = "";
        InsertSpace = " ";
        RootName = DEFAULT_ROOT_NAMER;
    }

    /// &lt;summary&gt;
    /// 設定値を取得する
    /// &lt;/summary&gt;
    /// &lt;param name="section"&gt;セクション名&lt;/param&gt;
    /// &lt;param name="keyname"&gt;キー名&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public string GetString(string section, string keyname)
    {
        if (!SectionDic.ContainsKey(section) ||
            !SectionDic[section].ContainsKey(keyname)) return "";

        return SectionDic[section][keyname];
    }

    /// &lt;summary&gt;
    /// 設定値を取得する
    /// &lt;/summary&gt;
    /// &lt;param name="section"&gt;セクション名&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public string GetString(string keyname)
    {
        return GetString("", keyname);
    }

    /// &lt;summary&gt;
    /// 設定情報を取得する
    /// &lt;/summary&gt;
    /// &lt;param name="tableName"&gt;テーブル名&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public DataTable GetTable(string tableName)
    {
        return SectionDataSet.Tables[tableName];
    }

    /// &lt;summary&gt;
    /// 設定値を更新する
    /// &lt;/summary&gt;
    /// &lt;param name="section"&gt;セクション名&lt;/param&gt;
    /// &lt;param name="keyname"&gt;キー名&lt;/param&gt;
    /// &lt;param name="value"&gt;設定値&lt;/param&gt;
    public void SetString(string section, string keyname, string value)
    {
        SectionDic[section][keyname] = value;
    }


    /// &lt;summary&gt;
    /// Iniファイル読み込み
    /// &lt;/summary&gt;
    /// &lt;param name="filePath"&gt;ファイルパス&lt;/param&gt;
    /// &lt;returns&gt;true : 正常 / false : 異常&lt;/returns&gt;
    public bool ReadIni(string filePath, bool isDataSet = false)
    {

        // Ini情報のセット
        SectionDic = GetSections(filePath);

        // DataSet型に変換
        if (isDataSet) return ToDataSet();

        return true;
    }

    /// &lt;summary&gt;
    /// DataSet型に変換する
    /// &lt;/summary&gt;
    /// &lt;returns&gt;true : 正常 / false : 異常&lt;/returns&gt;
    public bool ToDataSet()
    {
        SectionDataSet = new DataSet();

        // XMLデータに変換する
        string xml = ConvertDicToXML();
        if (xml == "") return false;

        // DataSet型に変換する
        using (StringReader reader = new StringReader(xml))
        {
            SectionDataSet.ReadXml(reader);
        }

        return true;
    }

    /// &lt;summary&gt;
    /// Iniファイル情報を取得する
    /// &lt;/summary&gt;
    /// &lt;param name="filePath"&gt;ファイルパス&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public OrderedDictionary&lt;string, OrderedDictionary&lt;string, string&gt;&gt; GetSections(string filePath)
    {
        using (var reader = new StreamReader(filePath, Encording))
        {
            var sections = new OrderedDictionary&lt;string, OrderedDictionary&lt;string, string&gt;&gt;(StringComparer.Ordinal);
            var regexSection = new Regex(SECTION_PATTERN, RegexOptions.Singleline | RegexOptions.CultureInvariant);
            var regexNameValue = new Regex(PARAMETER_PATTERN, RegexOptions.Singleline | RegexOptions.CultureInvariant);
            var currentSection = string.Empty;

            // セクション名が明示されていない先頭部分のセクション名を""として扱う
            sections[string.Empty] = new OrderedDictionary&lt;string, string&gt;();

            for (;;)
            {
                var line = reader.ReadLine();

                if (line == null)
                    break;

                // 空行は読み飛ばす
                if (IsBlank(line))
                    continue;

                // コメント行は読み飛ばす
                if (line.StartsWith(";", StringComparison.Ordinal))
                    continue;
                else if (line.StartsWith("#", StringComparison.Ordinal))
                    continue;

                var matchNameValue = regexNameValue.Match(line);

                if (matchNameValue.Success)
                {
                    // name=valueの行
                    sections[currentSection][matchNameValue.Groups["name"].Value.Trim()] = matchNameValue.Groups["value"].Value.Trim();
                    continue;
                }

                var matchSection = regexSection.Match(line);

                if (matchSection.Success)
                {
                    // [section]の行
                    currentSection = matchSection.Groups["section"].Value;

                    if (!sections.ContainsKey(currentSection))
                        sections[currentSection] = new OrderedDictionary&lt;string, string&gt;();

                    continue;
                }
            }

            return sections;
        }
    }

    /// &lt;summary&gt;
    /// Iniファイルの書き込み
    /// &lt;/summary&gt;
    /// &lt;param name="filePath"&gt;ファイルパス&lt;/param&gt;
    /// &lt;param name="secyions"&gt;更新情報&lt;/param&gt;
    /// &lt;returns&gt;true : 正常 / false : 異常&lt;/returns&gt;
    public bool WriteIni(string filePath, OrderedDictionary&lt;string, OrderedDictionary&lt;string, string&gt;&gt; sections)
    {
        bool result = false;

        // Iniファイル情報を取得する
        var dic = GetSections(filePath);

        // 並び替えた情報を格納
        var sortSections = new OrderedDictionary&lt;string, OrderedDictionary&lt;string, string&gt;&gt;(StringComparer.Ordinal);

        foreach (var sec in dic)
        {
            foreach (var pair in sec.Value)
            {
                if (sections.ContainsKey(sec.Key) &amp;&amp; sections[sec.Key].ContainsKey(pair.Key))
                {
                    if (!sortSections.ContainsKey(sec.Key))
                        sortSections[sec.Key] = new OrderedDictionary&lt;string, string&gt;();

                    sortSections[sec.Key][pair.Key] = sections[sec.Key][pair.Key];
                }
            }
        }

        // 存在しなかったら追記
        foreach (var sec in sections)
        {
            foreach (var pair in sec.Value)
            {
                // 既に登録済みなら何もしない
                if (sortSections.ContainsKey(sec.Key) &amp;&amp; sortSections[sec.Key].ContainsKey(pair.Key))
                    continue;

                // 未登録なら追加する
                if (!sortSections.ContainsKey(sec.Key))
                    sortSections[sec.Key] = new OrderedDictionary&lt;string, string&gt;();

                sortSections[sec.Key][pair.Key] = pair.Value;
            }
        }


        // セクションの最終キーを格納
        Dictionary&lt;string, string&gt; lastdic = new Dictionary&lt;string, string&gt;();
        foreach (var sec in dic)
        {
            if(dic[sec.Key].Count &gt; 0)
            {
                var pair = dic[sec.Key].Last();
                lastdic.Add(sec.Key, pair.Key);
            }
        }

        //result = WriteIni(section.Key, pair.Key, pair.Value, filePath);
        //if (!result) return false;

        result = Write(filePath, sortSections, lastdic);

        return result;
    }

    /// &lt;summary&gt;
    /// iniファイルの書き込み
    /// &lt;/summary&gt;
    /// &lt;param name="filePath"&gt;ファイルパス&lt;/param&gt;
    /// &lt;param name="sectionName"&gt;セクション名&lt;/param&gt;
    /// &lt;param name="keyName"&gt;キー名&lt;/param&gt;
    /// &lt;param name="value"&gt;値&lt;/param&gt;
    /// &lt;returns&gt;true : 正常 / false : 異常&lt;/returns&gt;
    public bool WriteIni(string filePath, string sectionName, string keyName, string value)
    {
        var sections = new OrderedDictionary&lt;string, OrderedDictionary&lt;string, string&gt;&gt;();

        sections[sectionName] = new OrderedDictionary&lt;string, string&gt;();
        sections[sectionName][keyName] = value;

        return WriteIni(filePath, sections);
    }

    /// &lt;summary&gt;
    /// Iniファイルの書き込み
    /// &lt;/summary&gt;
    /// &lt;param name="filePath"&gt;ファイルパス&lt;/param&gt;
    /// &lt;param name="dsSections"&gt;セクション情報&lt;/param&gt;
    /// &lt;returns&gt;true : 正常 / false : 異常&lt;/returns&gt;
    public bool WriteIni(string filePath, DataSet dsSections)
    {
        var sections = new OrderedDictionary&lt;string, OrderedDictionary&lt;string, string&gt;&gt;();

        foreach (DataTable dt in dsSections.Tables)
        {
            ToDictionary(dt, ref sections);
        }

        return WriteIni(filePath, sections);
    }

    /// &lt;summary&gt;
    /// Iniファイルの書き込み
    /// &lt;/summary&gt;
    /// &lt;param name="filePath"&gt;&lt;/param&gt;
    /// &lt;param name="dtSections"&gt;&lt;/param&gt;
    /// &lt;returns&gt;true : 正常 / false : 異常&lt;/returns&gt;
    public bool WriteIni(string filePath, DataTable dtSections)
    {
        if (dtSections.Rows.Count == 0) return false;

        var sections = new OrderedDictionary&lt;string, OrderedDictionary&lt;string, string&gt;&gt;();
        ToDictionary(dtSections, ref sections);

        return WriteIni(filePath, sections);
    }

    /// &lt;summary&gt;
    /// Dictionary型に変換する
    /// &lt;/summary&gt;
    /// &lt;param name="dtSections"&gt;セクション情報&lt;/param&gt;
    /// &lt;param name="sections"&gt;更新セクション情報&lt;/param&gt;
    /// &lt;returns&gt;true : 正常 / false : 異常&lt;/returns&gt;
    private bool ToDictionary(DataTable dtSections, ref OrderedDictionary&lt;string, OrderedDictionary&lt;string, string&gt;&gt; sections)
    {
        foreach (DataRow dr in dtSections.Rows)
        {
            string groupNo = "";
            if (dtSections.Columns.Contains(SECTION_GROUP_ATTR))
            {
                groupNo = dr[SECTION_GROUP_ATTR].ToString();
                if(groupNo == "0") groupNo = "";
            }

            string sectionName = dtSections.TableName + SectionSeparator + groupNo;
            if (sectionName == RootName) sectionName = "";
            if(!sections.ContainsKey(sectionName))
                sections[sectionName] = new OrderedDictionary&lt;string, string&gt;();

            string indexNo = "";
            if (dtSections.Columns.Contains(PARAMETER_INDEX_ATTR))
            {
                indexNo = dr[PARAMETER_INDEX_ATTR].ToString();
            }

            foreach (DataColumn column in dtSections.Columns)
            {
                if (column.ColumnName == SECTION_GROUP_ATTR ||
                    column.ColumnName == PARAMETER_INDEX_ATTR ||
                    column.ColumnName == RootName + "_Id") continue;

                string keyName = column.ColumnName + KeySeparator + indexNo;
                string keyName2 = keyName;
                if(indexNo != "")
                {
                    var keyno = GetKeyAndNo(keyName, KeySeparator);
                    keyName2 = keyno.Item1;
                }
                sections[sectionName][keyName] = dr[keyName2].ToString();
            }
        }

        return true;
    }

    /// &lt;summary&gt;
    /// iniファイルの書き込みメイン処理
    /// &lt;/summary&gt;
    /// &lt;param name="filePath"&gt;ファイルパス&lt;/param&gt;
    /// &lt;param name="sortSections"&gt;ソート済更新情報&lt;/param&gt;
    /// &lt;param name="lastdic"&gt;最終パラメーター情報&lt;/param&gt;
    /// &lt;returns&gt;true : 正常 / false : 異常&lt;/returns&gt;
    private bool Write(string filePath, OrderedDictionary&lt;string, OrderedDictionary&lt;string, string&gt;&gt; sortSections, Dictionary&lt;string, string&gt; lastdic)
    {
        bool isSave = false;
        bool isWrite = false;
        StringBuilder sb = new StringBuilder();
        bool isExistsSection = false;

        using (var reader = new StreamReader(filePath, Encording))
        {
            var sections = new OrderedDictionary&lt;string, OrderedDictionary&lt;string, string&gt;&gt;(StringComparer.Ordinal);
            var regexSection = new Regex(SECTION_PATTERN, RegexOptions.Singleline | RegexOptions.CultureInvariant);
            var regexNameValue = new Regex(PARAMETER_PATTERN, RegexOptions.Singleline | RegexOptions.CultureInvariant);
            var currentSection = string.Empty;

            // セクション名が明示されていない先頭部分のセクション名を""として扱う
            sections[string.Empty] = new OrderedDictionary&lt;string, string&gt;();

            for (;;)
            {
                var line = reader.ReadLine();

                if (line == null)
                    break;

                // 空行は読み飛ばす
                bool isContinue = IsBlank(line);
                if (!isContinue)
                {
                    // コメント行は読み飛ばす
                    if (line.StartsWith(";", StringComparison.Ordinal))
                        isContinue = true;
                    else if (line.StartsWith("#", StringComparison.Ordinal))
                        isContinue = true;

                    // 全て終わった
                    if (sortSections.Count == 0)
                        isContinue = true;
                }

                if (isContinue)
                {
                    sb.AppendLine(line);
                    continue;
                }

                // 存在しなかったら追記
                var matchNameValue = regexNameValue.Match(line);
                if (sortSections.ContainsKey("") &amp;&amp; currentSection == "")
                {
                    isExistsSection = true;
                }

                if (isExistsSection &amp;&amp; matchNameValue.Success)
                {
                    string newline = line;
                    // name=valueの行
                    string keyName = matchNameValue.Groups["name"].Value.Trim();
                    if (sortSections[currentSection].ContainsKey(keyName))
                    {
                        isWrite = true;

                        string value = sortSections[currentSection][keyName];
                        sortSections[currentSection].Remove(keyName);

                        string curvalue = matchNameValue.Groups["value"].Value.Trim();
                        if (curvalue != "")
                        {
                            if (curvalue != value)
                            {
                                // 現在値があるなら置換する
                                if(curvalue.Contains(" "))
                                {
                                    // 現在値に空白が含まれていた場合、単純な置換(キーやコメントなども置換される可能性がある)
                                    newline = line.Replace(curvalue, value);
                                }
                                else
                                {
                                    // 現在値に空白が含まれていない場合、値のみ置換
                                    newline = Regex.Replace(line, @"(=\s+|=)([^;|\s]+)(\s+;.*|)", "${1}" + value + "${3}");
                                }
                                // 現在値と違う値なら保存する
                                isSave = true;
                            }
                        }
                        else
                        {
                            // = の位置に半角スペースを1つ空けて値をセット
                            newline = Regex.Replace(line, @"(=)(\s[^;].*)", "${1}" + InsertSpace + value + "${2}");
                            if(value != "" &amp;&amp; newline.IndexOf(value) == -1)
                            {
                                newline = Regex.Replace(line, @"(=)", "${1}" + InsertSpace + value);
                            }
                            // 現在値と違う値なら保存する
                            if (newline != line) isSave = true;
                        }
                    }

                    // 書き換え行のセット
                    sb.AppendLine(newline);

                    // 新規パラメーターがあれば最終キー後に追記する
                    if (lastdic[currentSection] == keyName)
                    {
                        foreach (var s in sortSections[currentSection])
                        {
                            sb.AppendLine(string.Format("{0}" + InsertSpace + "=" + InsertSpace + "{1}", s.Key, s.Value));
                        }
                        sortSections[currentSection].Clear();
                    }

                    // セクション内のパラメーターが存在しない
                    if (sortSections[currentSection].Count == 0)
                    {
                        // セクションを削除する
                        sortSections.Remove(currentSection);
                    }
                    continue;
                }

                isExistsSection = false;
                var matchSection = regexSection.Match(line);
                if (matchSection.Success)
                {
                    string sectionName = matchSection.Groups["section"].Value.Trim();
                    if (sortSections.ContainsKey(sectionName))
                    {
                        currentSection = sectionName;
                        // 対象のセクション行が存在
                        isExistsSection = true;
                    }
                }

                // 行のセット
                sb.AppendLine(line);
            }
        }

        // 新規セクションとパラメーターを追記する
        foreach (var sec in sortSections)
        {
            // 未登録のセクションを追加する(一行空行)
            if (sb.Length != 0) sb.AppendLine("");
            sb.AppendLine(string.Format("[{0}]", sec.Key));
            isWrite = true;
            isSave = true;
            foreach (var pair in sec.Value)
            {
                // パラメーターを追加する
                sb.AppendLine(string.Format("{0}" + InsertSpace + "=" + InsertSpace + "{1}", pair.Key, pair.Value));
            }
        }

        // 保存処理
        if (isWrite &amp;&amp; isSave)
        {
            File.WriteAllText(filePath, sb.ToString(), Encording);
        }

        return true;
    }


    /// &lt;summary&gt;
    /// 末尾数値分割処理
    /// &lt;/summary&gt;
    /// &lt;param name="value"&gt;対象キー&lt;/param&gt;
    /// &lt;param name="separator"&gt;区切り文字&lt;/param&gt;
    /// &lt;returns&gt;分割情報&lt;/returns&gt;
    private Tuple&lt;string, int&gt; GetKeyAndNo(string value, string separator)
    {
        if (Regex.IsMatch(value, @"[0-9]$"))
        {
            string pattern = @"(?&lt;Key&gt;.*\D)(?&lt;No&gt;\d+$)";
            if (separator != "")
                pattern = string.Format(@"(?&lt;Key&gt;.*){0}(?&lt;No&gt;\d+$)", separator);

            Regex reg = new Regex(pattern);
            Match mat = reg.Match(value);
            string key = mat.Result("${Key}");
            string no = mat.Result("${No}");

            return new Tuple&lt;string, int&gt;(key, int.Parse(no));
        }
        else
            return null;
    }

    /// &lt;summary&gt;
    /// セクショングループ件数を取得する
    /// &lt;/summary&gt;
    /// &lt;returns&gt;セクショングループ件数&lt;/returns&gt;
    private OrderedDictionary&lt;string, int&gt; GetSectionGroupCount()
    {
        OrderedDictionary&lt;string, int&gt; secCount = new OrderedDictionary&lt;string, int&gt;();

        foreach (var section in SectionDic)
        {
            if (section.Key != "")
            {
                string key = section.Key;
                var keyno = GetKeyAndNo(section.Key, SectionSeparator);
                int cnt = 1;
                if (keyno != null)
                {
                    key = keyno.Item1;
                    if (secCount.ContainsKey(key))
                    {
                        cnt = secCount[key];
                        cnt++;
                    }
                }
                secCount[key] = cnt;
            }
        }

        return secCount;
    }

    /// &lt;summary&gt;
    /// XMLデータに変換する
    /// &lt;/summary&gt;
    /// &lt;returns&gt;XMLデータ&lt;/returns&gt;
    private string ConvertDicToXML()
    {
        if (SectionDic.Count == 0) return "";

        StringBuilder sb = new StringBuilder();

        sb.AppendLine("&lt;?xml version = '1.0' encoding = 'utf-8' ?&gt;");
        sb.AppendLine(String.Format("&lt;{0}&gt;", RootName));

        // 同一名カウントチェック
        OrderedDictionary&lt;string, int&gt; secCount = GetSectionGroupCount();

        // XMLデータ生成
        foreach (var section in SectionDic)
        {
            int grpno = -1;
            string key = section.Key;
            var keyno = GetKeyAndNo(key, SectionSeparator);
            if (keyno != null)
            {
                key = keyno.Item1;
                grpno = keyno.Item2;
            }
            // 複数存在するならグループ扱い
            if (grpno == -1 &amp;&amp; key != "" &amp;&amp; secCount[key] &gt; 1) grpno = 0;

            // パラメーターが連番のみかチェック
            bool isDataGrp = true;
            foreach (var pair in section.Value)
            {
                if (!Regex.IsMatch(pair.Key, @"[0-9]$"))
                {
                    isDataGrp = false;
                    break;
                }
            }

            string grp = grpno &gt; -1 ? string.Format(" {0}='{1}'", SECTION_GROUP_ATTR , grpno) : "";
            if (key != "") sb.Append(string.Format("&lt;{0}{1}", key, grp));

            int no = 0;
            int oldNo = -1;
            string pkey = "";
            bool isFirst = false;
            foreach (var pair in section.Value)
            {
                pkey = pair.Key;
                if (key != "")
                {
                    if (isDataGrp)
                    {
                        keyno = GetKeyAndNo(pkey, KeySeparator);
                        if (keyno != null)
                        {
                            pkey = keyno.Item1;
                            no = keyno.Item2;
                        }
                        if (no != oldNo &amp;&amp; no &gt; 0)
                        {
                            if (isFirst)
                            {
                                sb.AppendLine(" /&gt;");
                                sb.Append(string.Format("&lt;{0}{1}", key, grp));
                            }
                            sb.Append(string.Format(" {0}='{1}'", PARAMETER_INDEX_ATTR, no));
                        }
                        oldNo = no;
                        isFirst = true;
                    }
                    sb.Append(string.Format(" {0}='{1}'", pkey, pair.Value));
                }
                else
                {
                    // セクションが無い場合
                    sb.AppendLine(string.Format("&lt;{0}&gt;{1}&lt;/{0}&gt;", pkey, pair.Value));
                }
            }
            if (key != "") sb.AppendLine(" /&gt;");
        }
        sb.AppendLine(String.Format("&lt;/{0}&gt;", RootName));

        return sb.ToString();
    }

    /// &lt;summary&gt;
    /// 空行判定
    /// &lt;/summary&gt;
    /// &lt;param name="line"&gt;対象文字列&lt;/param&gt;
    /// &lt;returns&gt;true:空行 / false:空行以外&lt;/returns&gt;
    private bool IsBlank(string str)
    {
        // 空行(全角スペース、タブ、半角スペースのみを対象にする)
        Regex re = new Regex(@"\s");
        string blankline = re.Replace(str, "");

        return (blankline.Length == 0);
    }
}

