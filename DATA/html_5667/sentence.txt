More than 1 year has passed since last update.これは、Visual Basic Advent Calendar 2017の24日目の記事となります。設定ファイルをxml形式で作成したところ、ユーザーからIni形式で慣れているので変更して欲しいという要望がありました。
既に本体プログラムはReadXmlでDataSet型にして設定を読み込むようになっていたため、本体プログラムに出来るだけ影響しないようにIni形式をDataSet型に変換するクラスを作成しました。下記のようなiniファイルがあった場合、Dictionary型およびDataSet型にして取得できます。
特徴として、セクション名が同じで末尾数字が違った場合、同一グループとして扱います。また、キー名も同様で末尾数字が同じなら同一グループになります。
iniファイルのパースはAPIを使わず独自に行っているため、UTF-8に対応しています。
また、読み込みだけでなく書き込みも出来ます。※内部ではini形式をXML形式に変換してDataSetのReadXmlメソッドを読んでいます。セクション名(DATABASE)のDictionary型の内容
セクション名(DATABASE)のDataTable型の内容
セクション名(ENCODING)のDataTable型の内容
セクション名(FONT1,FONT2,FONT3)のDataTable型の内容
同一セクション名(FONT)でまとめています。Grpの列が自動で追加され末尾数字がセットされます。末尾数字が無い場合、0 になります。
セクション名(DATA1,DATA2)のDataTable型の内容
同一セクション名(DATA)と同一キー名(Code,Str)でまとめています。GrpとIdxの列が自動で追加され末尾数字がセットされます。
SetStringメソッドでセクション、キー、値をセットするとSectionDicプロパティを書き換えます。
また、SectionDicプロパティを使わず、書き換える部分のみのDictionary型を作成して指定することも出来ます。例ではDataTable型を指定して2回に分けて書き込みしていますが、DataSet型で一度に書き込むことが出来ます。IniManagerクラスを作成しています。【2018/06/22追記】C#を追加しました。
【2018/08/25追記】VB版とC#版が違うのに気が付きました。C#版が古かった。IniManagerクラスの中で、次サイトの「ジェネリック版OrderedDictionary」を使用しています。読み込みだけならDictionary型で充分だったのですが、書き込みする上ではOrderedDictionaryのように順序の保証が必要でした。
ジェネリック版OrderedDictionary - smdnこのジェネリック版OrderedDictionaryは、C#版しか公開されていないのですが、SharpDevelop Ver 4.4のC#からVB.NETへのコンバート機能を使用しました。ちなみに最新版のSharpDevelop Ver 5には変換機能がつかなくなりました。正しく変換されなかったところは次のように修正しました。コード改変や配布は自由です。
このツールによる義務／責任を何ら負いません。但し、ジェネリック版OrderedDictionary - smdnはMITライセンスとなっています。え、C#版が欲しいって、これはVisual Basic Advent Calendarなんですよ。
ウソです、もともとC#で作成したのを、この記事用にVisual Basic用に書き換えました。そのうち、GitHubに公開します。【2018/08/25追記】
C#版がVB版と比べて古かったのを修正。
初期値が存在しない場合に値変更が反映されない不具合を修正しました。
InsertSpaceプロパティを追加(デフォルトは半角スペース1つ)、値書込時にセクションと値の間の半角スペース1つ固定を可変にしました。これで、半角スペース無しが設定可能です。【2018/09/07追記】
タブのみの行があった際に別セクション扱いになってしまう不具合があり、空行判定(半角スペース、全角スペース、タブ等)を正規表現の"\s"で空文字に置換して長さ 0 なら空行扱いとするように修正しました。


