
    public static void PlayClip(AudioClip clip) =&gt; Call(Method.PlayClip, clip, 0, false);
    [Obsolete("The parameters &lt;startSample&gt; and &lt;loop&gt; are not working")]
    public static void PlayClip(AudioClip clip, int startSample, bool loop) =&gt; Call(Method.PlayClip, clip, startSample, loop);
    public static void StopClip(AudioClip clip) =&gt; Call(Method.StopClip, clip);
    public static void PauseClip(AudioClip clip) =&gt; Call(Method.PauseClip, clip);
    public static void ResumeClip(AudioClip clip) =&gt; Call(Method.ResumeClip, clip);
    public static void LoopClip(AudioClip clip) =&gt; Call(Method.LoopClip, clip);
    public static bool IsClipPlaying(AudioClip clip) =&gt; Call&lt;AudioClip, bool&gt;(Method.IsClipPlaying, clip);
    public static void StopAllClips() =&gt; Call(Method.StopAllClips);
    public static float GetClipPosition(AudioClip clip) =&gt; Call&lt;AudioClip,float&gt;(Method.GetClipPosition, clip);
    public static int GetClipSamplePosition(AudioClip clip) =&gt; Call&lt;AudioClip, int&gt;(Method.GetClipSamplePosition, clip);
    public static void SetClipSamplePosition(AudioClip clip, int iSamplePosition) =&gt; Call(Method.SetClipSamplePosition, clip, iSamplePosition);
    public static int GetSampleCount(AudioClip clip) =&gt; Call&lt;AudioClip, int&gt;(Method.GetSampleCount, clip);
    public static int GetChannelCount(AudioClip clip) =&gt; Call&lt;AudioClip, int&gt;(Method.GetChannelCount, clip);
    public static int GetBitRate(AudioClip clip) =&gt; Call&lt;AudioClip, int&gt;(Method.GetBitRate, clip);
    public static int GetBitsPerSample(AudioClip clip) =&gt; Call&lt;AudioClip, int&gt;(Method.GetBitsPerSample, clip);
    public static int GetFrequency(AudioClip clip) =&gt; Call&lt;AudioClip, int&gt;(Method.GetFrequency, clip);
    public static int GetSoundSize(AudioClip clip) =&gt; Call&lt;AudioClip, int&gt;(Method.GetSoundSize, clip);
    public static AudioCompressionFormat GetSoundCompressionFormat(AudioClip clip) =&gt; Call&lt;AudioClip, AudioCompressionFormat&gt;(Method.GetSoundCompressionFormat, clip);
    public static AudioCompressionFormat GetTargetPlatformSoundCompressionFormat(AudioClip clip) =&gt; Call&lt;AudioClip, AudioCompressionFormat&gt;(Method.GetTargetPlatformSoundCompressionFormat, clip);
    public static string[] GetAmbisonicDecoderPluginNames() =&gt; Call&lt;string[]&gt;(Method.GetAmbisonicDecoderPluginNames);
    public static bool HasPreview(AudioClip clip) =&gt; Call&lt;AudioClip, bool&gt;(Method.HasPreview, clip);
    public static AudioImporter GetImporterFromClip(AudioClip clip) =&gt; Call&lt;AudioClip, AudioImporter&gt;(Method.GetImporterFromClip, clip);
    public static float[] GetMinMaxData(AudioImporter importer) =&gt; Call&lt;AudioImporter, float[]&gt;(Method.GetMinMaxData, importer);
    public static double GetDuration(AudioClip clip) =&gt; Call&lt;AudioClip, double&gt;(Method.GetDuration, clip);
    public static int GetFMODMemoryAllocated() =&gt; Call&lt;int&gt;(Method.GetFMODMemoryAllocated);
    public static float GetFMODCPUUsage() =&gt; Call&lt;float&gt;(Method.GetFMODCPUUsage);
    public static bool IsTrackerFile(AudioClip clip) =&gt; Call&lt;AudioClip, bool&gt;(Method.IsTrackerFile, clip);
    public static int GetMusicChannelCount(AudioClip clip) =&gt; Call&lt;AudioClip, int&gt;(Method.GetMusicChannelCount, clip);
    public static AnimationCurve GetLowpassCurve(AudioLowPassFilter lowPassFilter) =&gt; Call&lt;AudioLowPassFilter, AnimationCurve&gt;(Method.GetLowpassCurve, lowPassFilter);
    public static Vector3 GetListenerPos() =&gt; Call&lt;Vector3&gt;(Method.GetListenerPos);
    public static void UpdateAudio() =&gt; Call(Method.UpdateAudio);
    public static void SetListenerTransform(Transform t) =&gt; Call(Method.SetListenerTransform, t);
    public static bool HasAudioCallback(MonoBehaviour behaviour) =&gt; Call&lt;MonoBehaviour, bool&gt;(Method.HasAudioCallback, behaviour);
    public static int GetCustomFilterChannelCount(MonoBehaviour behaviour) =&gt; Call&lt;MonoBehaviour, int&gt;(Method.GetCustomFilterChannelCount, behaviour);
    public static int GetCustomFilterProcessTime(MonoBehaviour behaviour) =&gt; Call&lt;MonoBehaviour, int&gt;(Method.GetCustomFilterProcessTime, behaviour);
    public static float GetCustomFilterMaxIn(MonoBehaviour behaviour, int channel) =&gt; Call&lt;MonoBehaviour, int, float&gt;(Method.GetCustomFilterMaxIn, behaviour, channel);
    public static float GetCustomFilterMaxOut(MonoBehaviour behaviour, int channel) =&gt; Call&lt;MonoBehaviour, int, float&gt;(Method.GetCustomFilterMaxOut, behaviour, channel);

