　この断りを書かないと怒られそうなので。
　「今回紹介するのはラムダ式のごく一部です」
　ラムダ式、クエリ式に興味を持ってもらえたらいいな～という程度です。自分が使っていて便利だなと感じた場面をいくつか紹介しようと思います。何卒御容赦下さい。ちなみに言語はC#です。　ラムダ式・クエリ式とは、本来ならば関数を定義するところを簡単に1行で書けたり、配列を直感的に操作できるすごい奴だよ。
　ラムダ式・クエリ式とまとめて書きましたが、今回紹介するのはラムダ式のみになります。
　正直ラムダ式紹介するだけでも知らない方からすれば結構楽しんでもらえると思います。自分自身初めて触れたときには「プログラミングって案外ラフなんだなー」と感心したものです。　基本的にラムダ式と言うと=&gt;や-&gt;といった矢印が用いられていることが多いです。(もしかしたら他にも記法があるのかも？)
　一般的にプログラミングの関数はC++ならint function()やPythonではdef function()等、名前をはじめに決めて処理を内部に書くことが基本ですが、簡単な関数、ましてや1度や2度しか使わない関数にも同様に名前を付けて使わなければならない場面があったりします。しかしと言うかやはりと言うかモブみたいな関数に一丁前に名前を付けて主役級の関数と同じ扱いをするのは疲れてくるわけです。
　そこでいよいよ登場「ラムダ式」となるわけですが、ラムダ式はDelegateやActionといった匿名関数(無名関数)の延長線なので、詳しく知りたい方は調べてみると面白いかもしれません。繰り返しになりますが本ページでは「ラムダ式のごく一部」しか紹介しませんので悪しからず。　「文字列"Hello World"を空白で分割してそれぞれ配列に格納して各要素を出力する」ということをforeachと=&gt;でそれぞれ書いてみました。言わずもがなforを使うこともできますが、その場合は少しだけforeachに比べて書く文字数が多くなります。
　ForEach()を使うと怒られるかもしれませんが、これはあくまで簡単な例ということで。(ForEach()はラムダ式を用いる、つまりDelegateを生成している分、単純なforやforeach等よりもリソースを食う可能性がある。)　「csv形式のファイルから数値を配列に格納する」プログラムです。これはセーブデータの外部ファイルへの保存等応用の幅は広いと思います。上記の出力の部分に関してはあえて別途書きましたが、書く文字数はそれを差し引いても圧倒的な差があることがわかると思います。あとはラムダ式のほうが視線を縦に動かさずに済むのでそういった意味では可読性も高いかもしれません。自分の場合はラムダ式を用いた方が楽で何をやっているのか見やすいので使う機会が多いですね。　ラムダ式やクエリ式等はあくまでも楽に書くための補佐的文法でしかないので、基本的な文法でもあらゆることが代替可能ではありますが、開発の際の時間、文字数、人材等のリソースの無駄な部分がカットできる可能性がありますので、「一度しか使わない代入のためだけの関数がバグの原因っぽいけど関数作りすぎてどの辺にあったかわかりづらい」や「配列を操作するのにわざわざfor文で操作するの面倒くさい」等痒い所に手が届く仕組みがLinqには備わっているので、ぜひリファレンスや他の記事を一読してみるのもいいかもしれません。


