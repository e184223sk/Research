More than 1 year has passed since last update.##### 2020/7/1追記 #####この記事は古いので最近書かれたブログ記事を紹介しておきます。↓の記事はテストの書き方をいろいろ紹介してるのでまだ参考になるかも？##### 追記ここまで #####Unityを使っている人はと思ったときに、いったいどうしているだろうか？まったくもってナンセンス。時間のムダ！Unity Test Runnerを使え！「テストコードとかめんどくさくて書く気ないし」とか関係ない！今すぐ使え！csharppad ではUnityやプロジェクトのコンテキストでコードを実行できないので論外として、それ以外の確認方法についての話。このサイクルにおけるそれぞれのステップにかかる時間的コストはかなり大きい。コンパイルに時間がかかるのはしょうがない[1]としても、毎度毎度プレイモードに移行する2,4のオーバーヘッドがひどい。また、既存のコード/コンテキストに影響を受けて、それ単体で得られるはずだった結果とは異なる結果になるかもしれない。　
　
Unity Test Runnerを使うと実行したいコードのコンテキストを局所化でき、プレイモード移行のオーバーヘッドを0にしてトライ＆エラーを爆速にできる可能性がある。（実行にかかった時間も自動で計測・表示されるので、簡易的なパフォーマンス計測にも利用できる）Unityのテスト実行ツールで、NUnit という.NET用テスティングフレームワークが使われている。
グローバルメニュー→「Window」→「Test Runner」でウィンドウを開くテストコードを書くとウィンドウに一覧で表示してくれて、などができる。ボタンワンクリック（もしくは項目をダブルクリック）で実行可能。
「Run All」「Run Selected」などのボタンがあり、使い方は雰囲気でわかる使い方に関する詳細は以下を参考に最初はテストの機能を有効にするために若干のクリック操作が必要、マニュアル読むべし。設定が済んだら後はクラスファイルを新しく作ってテストコードを書くだけ。とりあえず後述のサンプルクラスをそのままコピペして実行してみて、雰囲気を掴むといい。ぜんぜん難しくない。　
　
テストは実行する環境によってEditModeテストとPlayModeテストの２種類がある。コードの挙動を確認したいだけの場合はAssertを使わなくてもDebug.Log()やブレークポイントによるステップ実行でも十分。ただ、Assertを使うとなどいくつかメリットがあるので、できればAssertを使う。
初回で何事もなくテストが通ると若干不安になるが、たぶん大丈夫だ。Unityで使えるAssertはの２つがあるが、基本的にはUnityのものを使う[3]。UnityEngine.Asertions.Assertのメソッドをまとめた。
ちなみに引数を２つ取る場合は(expected, actual)の順番。※詳細はリファレンスを参照
※NUnitのものと違い、UnityのAssertにはThat()などはない（貧弱ゥ！）EditModeテストは爆速で回せるので基本的にこっちを使えるように工夫する。例えば Unity API に関係ないロジックはMonoBehaviour継承クラスに直接記述するのではなくC#のピュアなクラス内に実装することでEditModeテストを可能にしつつ、必要があればMonoBehaviour継承クラスにインスタンスとして持たせるようにする。また、など、ライブラリ/フレームワークの「Unityのヒエラルキーに依存しない機能」の学習/確認にはEditModeテストが最適。その際、確認した挙動にはコメントを追記してサンプルコードとして残すことによって、プロジェクトの他のメンバーの学習の手助けとすることができる。テストコードだと最小構成で実行できるうえにわからない/気になる部分を編集して即実行して試せるのが最高にイケてる。EditModeと比べて実行に時間がかかるが、非同期テスト/MonoBehaviour関連テストはPlayModeテストとして書く必要がある。それとPlayModeテストを有効にするとその分ビルド時にバイナリサイズが大きくなるので注意。Note: Enabling PlayMode tests for all assemblies includes additional assemblies in your Project’s build, which can increase your Project’s size as well as build time.（マニュアルより）アプリケーションのテストコードを書くか書かないかはプロジェクトによりけりだが、Unityで「ちょっとコードを書いて実行する」のにこれほど適しているものは他にないと思う。準備についてもウィンドウを開いて最初の一回だけボタンをポチっとすれば、あとは動かそうと思っていたコードをちょろっと書くだけ。繰り返しになるがUniRxやZenjectなどの学習にはマストになると思う。Reactive Extentions再入門（かずきのブログ） を読んだだけでRxをわかったつもりにならず、めんどくさがらずにサンプルコードを自分で実行するとより理解が深まるはずだ。NUnitを知らなかった人でもテストを書けるように続きも書いた。Unity Test Runnerの制限についても触れている。
　
　続き→ Unityでちゃんとテストを書きたい人のためのまとめ　
　
はてぶとかPocketに突っ込んで忘れようとしている画面の前の愚かなUnity使いは猛省し、今すぐUnityを開いたほうがいい。まじで。あとで書く
　
　　コンパイル時間をなるべく短くする方法もある。 テラシュールブログ の記事参照。 ↩他にも[TestCase],[TestCaseSource)]などがあり、いずれも同期的に実行される。 ↩Unity向けに最適化されていて、本番ビルド時にストリッピングされる。詳細は Unity公式ブログ の記事を参照。 ↩


