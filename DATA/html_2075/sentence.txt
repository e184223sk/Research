More than 1 year has passed since last update.当記事は、前回の記事「C++アプリケーションとC#アプリケーションで値をやり取りしてみる」 の続編です。前回の記事では、動的に確保した共有メモリで直接値を読み書きしましたが、
そのままではかなり不便です。そこで今回は共有メモリに構造体を書き込み、そこから読み書きしてみたいと思います。まずは、C# .NET Framework WinForm 側で簡易的なフォームを作成し、単体で実践してみます。
ソースコードは以下の通りです。こちらは、該当共有メモリに対して構造体として読み取る関数です。まず初めに、関数の結果として出力する構造体メンバ変数を定義します。
今回はジェネリック関数として定義しましたので、ここでいうTは構造体であるということが保証されています。where T : struct次に、MemoryMappedFileとMemoryMappedViewAccessorがnullであれば新規生成し、
アクセサを使用して該当共有メモリに対して書き込みを行います。
第一引数はpositionつまりオフセットです。
今回は構造体のみを書き込むので、0とします。
第二引数で構造体を受け取ります。使用例:こちらは、該当共有メモリに対して構造体として書き込む関数です。まず初めに、読み取りと同じようにヌルチェックを行います。(省略)アクセサを使用して該当共有メモリに対して書き込みを行います。
第一引数はpositionつまりオフセットです。
今回は構造体のみを書き込むので、0とします。
第二引数には、関数で受け取った構造体T targetStructの参照を渡します。使い終わったリソースはきちんと解放してあげます。fはパースしてくれないらしく、float.TryParse()に失敗して999が書き込まれちゃってますが、
無事成功しました。C++側でも単体で実行してみます。CreateFileMapping()でハンドルを生成します。OpenFileMapping()でハンドルを開きます。リソースの開放です。共有メモリから構造体を読み取ります。共有メモリに構造体を書き込みます。無事成功しました。こちらも問題なく動作しました。最後までご覧いただきありがとうございました。
コードミス/誤字・脱字や間違った情報がございましたら、お手数ですがコメント欄にてご指摘いただけますと幸いです。


