

    public Sprite sprite;

    // ドット絵を保持するマテリアル
    public Material material;

    // マテリアルのメインテクスチャサイズ
    private Vector2Int texSize;

    // Spriteのテクスチャ領域
    private RectInt spriteRect;
    void Start()
    {
        if (!needRestruct) return;
        needRestruct = true;
        heplMessage = null;

        if (fieldsNotReady()) return;
        spriteRect = GetSpriteRect();
        texSize = GetTextureSize();

        Mesh mesh = InitializeCube();
        var newMaterial = Instantiate(material);
        newMaterial.SetTexture("_MainTex", sprite.texture);
        GetComponent&lt;MeshFilter&gt;().sharedMesh = mesh;
        GetComponent&lt;MeshRenderer&gt;().material = newMaterial;
    }

    /// &lt;summary&gt;
    /// テクスチャサイズを取得
    /// &lt;/summary&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    private Vector2Int GetTextureSize()
    {
        var tex = sprite.texture;

        return new Vector2Int(tex.width, tex.height);
    }

    /// &lt;summary&gt;
    /// Spriteのテクスチャ範囲を取得
    /// &lt;/summary&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    private RectInt GetSpriteRect()
    {
        var rect = sprite.textureRect;

        return new RectInt((int)rect.x, (int)rect.y, (int)rect.width, (int)rect.height);
    }
    /// &lt;summary&gt;
    /// pivotからの相対位置をUV座標に変換する
    /// &lt;/summary&gt;
    /// &lt;param name="offestX"&gt;&lt;/param&gt;
    /// &lt;param name="offsetY"&gt;&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    private Vector2 ToUV(float offestX, float offsetY)
    {
        var x = pivot.x + offestX + spriteRect.x;
        var y = pivot.y + offsetY + spriteRect.y;
        var pos = new Vector2( x / texSize.x, y / texSize.y);
        //Debug.LogFormat("ToUV:({0},{1})",pos.x, pos.y);
        return pos;
    }

