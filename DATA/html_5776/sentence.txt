More than 3 years have passed since last update.前回のプロジェクトを使用するのでPrismを使っていますが、ViewModel側で記述する必要はない処理ですが、他のコマンドと合わせるためにViewModel側に記述しています。
※ 以前に作成した「WPFでInkCanvasを使ってみる」で作成したプロジェクトを使用しますので、途中までは、そちらを確認してください。HIRO'sさんのBlog
HIRO's.NET http://blog.hiros-dot.net/人体図画像をお借りしました。
フリーイラスト http://www.sharots.com/ai.html「Prism Template Pack」のインストール
「MahApps」のインストール
「Prism Template Pack」のプロジェクト作成
「InkCanvas」の各種コマンド操作の実装
※「Prism Template Pack」のインストールは、以前の記事を参考にしてください。
 PrismとUnityを使うWPFプロジェクトテンプレートを使ってみる
※「InkCanvas」の各種コマンド操作の実装は、以前の記事を参考にしてください。
WPFでInkCanvasを使ってみる今回もViewModel側でInkCanvasを使用するため、「CommandParameter」にInkCanvas名を入れいています。※「Prism Template Pack」をVisualStudioに拡張済みであれば、「cmdg」と入力すれば、簡単に上記のDelegateCommandが作成できます。このように簡単にパラメータ付のDelegateCommandが作成されるので、fieldNameとCommandNameを変更するだけ済みます。デバッグを実行すると以下のようになります。

といった感じで、TextBoxの追加と選択が可能になりました。
なお、TextBlockやRichTextでも可能です。InkCanvasの子要素でTextBoxを追加して、表示できるところまで確認できましたが、致命的な問題が発生しました。
前回の記事で作成したStrokeを画像ファイルやisfファイルへの保存する方法のままですと、追加したTextBoxが認識されないため、保存ができません。
理由としては、TextBoxをStrokeCollectionに変換していないからです。
そもそもStrokeCollectionへの変換方法がわからなかったので、どうするべきか模索中です。
とりあえず、今回は画面に表示するところまでとしています。


