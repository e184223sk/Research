Windows向けインストーラーの形式として、MSIというものが存在する。
インストーラー作成ツールとしてメジャーなものには、VSのインストールプロジェクト、あるいはInstallShieldなどがあるが、
このMSIを基盤としている(NSISやInno Setupは別の仕組み)。このMSIを作るための手法として、Wix Toolsetというものが存在する。
XMLで宣言的にコンポーネント等を設定して、MSIを作るというものだ。しかしこのwix、再利用がしにくい部分がある、記述が冗長になりやすい、補完が難しい等、作りこんでいくと多少苦しくなる時がある。
そのようなwixをC#で記述することによって、IDE(vsやvscode)の補完や、処理の再利用などをしやすくした WixSharp なるものが存在する。今回は、そのWixSharpをvscodeで記述するための最初のステップや、注意するべき点について記述したいと思う。なお、WixSharpを使うに当たりMSIとWixの関連領域に踏み込むことは不可避なので、これらも並行して学んでいくと良いと思う。WixSharpとは、C#でMSIパッケージの生成をできるようにしたライブラリで、ほとんどの機能はWixのラッパーとなる。
また、Wixに備わっているDTF(Deployment Tool Foundation)を利用することによって、winformsやWPFでのUI記述や、.NETによるカスタムアクションの定義等を容易に行う事が可能になる。
もともとCS-Scriptという、Roslyn以前にC#をスクリプトで使おうというプロジェクトの一つの活用事例として作られたものであるが、実際はCS-Scriptなしでも単体のライブラリとして存在している。今回は執筆時点での最新版である1.15.0をベースに書いていく。本記事の中で必要なものは以下の通りWixSharpはその性質上、Wixの実行バイナリ(candle.exe等)がどうしても必要になる。そのため、Wixの実行バイナリがあるフォルダがどこにあるかを知る必要がある。
定義するための手法は以下のようなものがあり、いずれも設定されたディレクトリ直下にcandle.exe等があることが期待される。
上から順に優先される。MSIからWixをインストールした場合、大抵の場合はWIX環境変数の部分で引っかかると思うさて、Wix実行ファイルの場所特定ができたら、次はMSIを生成するプロジェクトの作成である。
といっても、生成するのは普通のC#のコンソールプロジェクトで、dotnet new console辺りで作ればいいだけである。
ただし、WixSharpのライブラリは.NET Framework製なので、後でTargetFrameworkを.NET Framework系のものに変えておこう(net461とかnet35とか)プロジェクトの生成が完了したら、WixSharpのnugetパッケージを追加することになる。
WixSharpには以下のように複数のnugetパッケージが存在するため、自分のプロジェクトに合わせて参照するものを変えること。プロジェクトの準備ができたら、ソースを編集していく。
おおまかには以下のような流れとなるこの他にも、MSIのネイティブUIを定義できたり、Windows FormsやWPFを使って画面を作成することもできるが、長くなるのでこの記事では取り上げない。wixsharpでは、wixに関するプロパティが細かい所まで設定できるが、その中でも最初に考慮した方が良いものを挙げていく。
下で紹介されている他にも、成果物出力先決定などに使われるOutDir等の設定があるが、あまり重要ではないため省略する。
全て見たい場合は、WixSharpのコードを見ることMSIでいう所の UpgradeCodeプロパティを設定する。
よほどのことが無い限り、MSIのUpgradeCodeは変わらないはずなので、とりあえず設定しておく方がいい。MSIでいう所の ProductCodeプロパティ を設定する。
ProductCodeプロパティはメジャー/マイナーアップグレードの主要な判断材料となるため、よく考えて設定する、しないを決定すること。
また、WixSharpにおいては、各コンポーネント(ファイル等)のGUIDはProductCodeを基点に一意に決定されるため、値の取り扱いについては十分注意すること。これはWixSharp独自のプロパティで、設定すると後述するProductCodeやUpgradeCodeが手動設定されていない場合の基点となる。
WixSharpがUpgradeCode、ProductCodeがどのように決定するかは以下の図を参照。メジャーアップグレードで、ダウングレードを許すか、どのタイミングで既存プロダクトの削除を行うかを設定する。
メジャーアップグレードをしたいならば必ず設定しておくこと。
それぞれのフィールドの意味は以下で、WixのMajorUpgradeエレメントに対応するメジャーアップグレードをどのバージョンからどのバージョンまでで有効にするか等を決定する。
Wixでいう所の、Upgradeエレメントに対応するここでバージョンを設定すると、ProductVersionプロパティが設定され、作成するMSIパッケージのバージョンになる。
ただし、MSIのルールとして、[major].[minor].[build](各構成要素は全て整数)のように形式が決まっているので注意。
詳しくは MSIのドキュメントを参照MSIにおいてバージョン番号は、メジャー/マイナー/スモールアップデートに関わる所なので気を付けること。Wixが標準で用意しているUIのどれを使うかを選択する。使えるのは以下で、WixSharp.WUIというenumクラスの値を指定する。
ここで設定すると、UIRefにIDを指定したものが追加される。
それぞれのダイアログの解説については、Wixのものをそのまま使っているだけなので、wixtoolsetのWixUIダイアログの解説を参照。ここではテンプレートから選ぶような感じになるが、アプリ独自要素(シリアルとか)をインストールUIで設定させたい場合もあるだろう。そのような時はカスタムダイアログを作ることになると思うが、これが書くとまた長いので、公式のサンプルソースへのリンクを紹介するだけに留めたい。サンプルでは、WinFormsやWPFのダイアログをUIシーケンスの中に挟み込んでいる。MSIのユーザー定義プロパティを追加する。
AddPropertiesメソッドで追加が可能。
なお、ここで定義できる値は、全てインストール実行前に値が決定されるものとなることに注意。
具体的に言うと、例えばあるプロパティの値に[PROPERTY_A]\ABCのような、他のプロパティに依存した値を付けても、実際に使う時にはプロパティ指定部分が空になったり、意図した値が反映されない場合がある(インストールディレクトリの指定等)。
そのような場合は、後述するカスタムアクションの一種であるWixSharp.SetPropertyActionを使用する必要がある。このアクションを使う時も、アクションの実行順に注意しないと、意図した結果にならない場合があることに注意。ファイル等のコンポーネントを指定する際、ソースに相対パスを指定した時の基点となるフォルダを指定する。
設定しないときは、カレントディレクトリが使われる。プロジェクトの属性が決まったら、各種コンポーネント(ファイル、レジストリ等)を追加していく。
基本的にインストールルートとなるWixSharp.Dirを作成し、そこにどんどんコンポーネントや配下のフォルダを作成していく形になる。
作成の時はLinq to XMLのように、コンストラクタで追加していってもいいし、インスタンスを作成した後追加していってもいい。ソースでいうとのような感じになる。レジストリを追加するときは、WixSharp.Fileの代わりにWixSharp.RegKeyを使う。
なお、インストールはしないが、カスタムアクションなどで使用するファイルがある場合は、WixSharp.Binaryを使って追加する。これはDirに所属している必要は無い。例えばWindows SDKをインストールする時、インストールするコンポーネントを選択する画面が出てくると思うが、
あれを実現しているのがFeatureという機能となる。
特に指定しない限り、WixSharpは全てのコンポーネントを同じFeatureに属するものとして処理するが、
例えばインストール時にコンポーネントを選択させたい場合は、このFeatureを使うことになる。
基本的には、WixSharp.Featureオブジェクトを最初に生成しておき、各WixSharp.File等のコンポーネントを生成する時、Featureフィールドがあると思うので、そこに設定すればいい。
サンプルコードはWixSharpのリポジトリにあるので、そこを参照することコンポーネントが追加し終わったら、カスタムアクションを追加していく。
カスタムアクションは全てWixSharp.Actionから派生しており、共通属性として以下のものを持つカスタムアクションの種類は、WixSharpにおいては以下のものが公式として存在する。他にWixとしては、ネイティブDLLの中の関数を実行するということも可能だが、WixSharpではデフォルトでやり方が用意されているわけではない。C#でManagedActionを使う場合、いくつかの手順を踏む必要がある。
まず最初に、Microsoft.Deployment.WindowsInstaller.dllを、カスタムアクションを仕込むプロジェクトへ参照追加する必要がある。
カスタムアクションを入れるプロジェクトは、現在wixsharpを使用しているプロジェクトでもいいし、また別途プロジェクトを用意しても構わない。
これは、Wixをインストールするか、zipアーカイブを展開すると、candle.exe等があるフォルダに同梱されている。
これを直接Reference等で参照する。次に、実行するメソッドを定義するわけだが、を満たせばOK。例として下記。上記を満たしたメソッドを用意した上で(仮にCustomActions.Method1とする)、ManagedActionを以下のように追加する。注意点として、ManagedActionを使用すると、その時点でMSIのインストールに.NET Framework依存ができてしまうため、ManagedActionが使用しているフレームワークバージョンは確実に満たせるように、開発要件を定めておくことさて、全てのプロジェクト設定が終わったら、最後にWixSharp.Project.BuildMsi(string path = null)を実行する。
出力されるMSIファイルは、指定が無ければカレントディレクトリの"[プロダクト名].msi"という名前で出力される。
また、同時に生成されたwxsファイルが、"wix/[プロジェクト名].g.wxs"として出力される。
こちらは、生成結果の確認等に使うと良いだろう。また、MSIを作らずにwxsの確認だけ行いたい場合は、WixSharp.Project.BuildWxs(string path = null)を実行する。
こちらはWixのツールを実行しないので、BuildMsiでエラーが出た時にwxsの中身を確認したい場合に使うと良いと思う。ここまでWixSharpの入り口として記事を書いたが、MSIネイティブやWindows Formsを画面に使えたり、あるいはMSIを実行するためのブートストラッパーの作成ができるなど、ここでは紹介していない機能が色々あるので、機会があればまたその辺りの記事を書いてみたい。


