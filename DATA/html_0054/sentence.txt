Teratailで同じような原因の質問が別々の方からあったのでメモ代わりに。
C#のTask配列をforでセットしようとするとエラーになる
基本的な質問ですが、Taskの結果がバラバラになりますさて、まずは下記のサンプルコードを見てください。forループで実行されたTask内で、1秒待ってループカウンタ i をコンソール出力しているだけのコードのように見えますね。これを見て、皆さんはどういう実行結果を想像しますか？
Task End(1～5)が出力されるだけだろ？と思う人は結構いるかもしれません。しかし、実際は…？なんてこった！全部Task End(6)になっています。一体どういう事なんだ…先程のサンプルコードで出力結果が全部Task End(6)になった理由は単純で、非同期Taskが実行されて、実際にコンソール出力するタイミングの時点で、ループカウンタは既に6までカウントアップされてループを終えているからです。ラムダ式外のループカウンタを直接使用した場合、いつの時点でのループカウンタの値が使用されているか判らないのです。ちなみに、VB.NETで同等の処理を行った場合、ビルド時にwarningが発生します。C#でも出してくれてもいいのでは？という気はしないでもないです。
(BC42324より抜粋)warning BC42324: ラムダ式内で繰り返し変数を使用すると、予期しない結果が発生する可能性があります。代わりに、ループ内にローカル変数を作成して繰り返し変数の値を割り当ててください。今度はforループ内でローカル変数countを宣言してループカウンタを割り当て、その値をコンソール出力するようにしてみましょう。1～5がバラバラに出力されましたね。forループ内でローカル変数を宣言する事で、ループ毎に変数が確保され、ループカウンタの値が保持されています。ちなみに、実際にこの手の並列処理を行う場合は、Parallelクラスというものがあるので、そちらを利用した方がよいでしょう。そういう感じの回答もありましたが、単なる同期処理になりTask使う意味が無くなりますので、それならむしろTaskを使用しない方が良いでしょう。さて、実際にawaitさせてみましょう。Task End(1～5)が出力されていますが、普通に非同期で実行すれば1秒で終わる処理が順次同期実行しているので、全体で5秒掛かっています。ループをParallelクラスで並列処理にするには？［C#／VB］
データとタスクの並列化における注意点


