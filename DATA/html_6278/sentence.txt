More than 1 year has passed since last update.この記事を読んでプログラマ初心者の方が、少しでも良いコードを書けるようになることが目的です。そもそも良いコードとは何でしょうか？良いコードとはここでは以下のことについて考えられているコードとなります。　ソースの書き方は人によっていろいろ異なります。 実行結果は同じな処理をしていてもソースは全く違うということもあります。 
　何をやっているかわかりやすいきれいなソースもあれば、本人以外（まれに本人にも）解読不能な汚いソースもあります。 プログラムの実行結果さえちゃんとしていればソースの方は別にきれいでも汚くても構わないのではと思うかもしれませんが、他人と一緒につくったりする時はそうは行きません。 
　ただでさえ他人の書いたソースというのは読みにくいものなのでできる限り見やすいソースを心がけるべきです。 同じコードを２度３度書くのは良いコードとは言えません。なぜなら似たようなコードが複数の箇所にあるようなソースコードは、保守性を著しく低下させてしまいます。仕様変更が入った際に、コピーした複数のコードに対して同じような修正を行わなければなりません。こういった共通部分は1つにまとめます。例えば i や　j ではそれが何を指しているのかが分かりません。適当でどうでもいい数字なら構わないかもしれませんが、なるべく避けるようにしましょう。例えば数を数える場合　i ではなく count 等を用いるといいでしょう。メソッド名、クラス名の命名方法としてこちらを参考にしてみるのがいいと思います。
うまくメソッド名を付けるための参考情報うまくクラス名を付けるための参考情報今さら聞けない、変数や関数の命名規則と、まず覚えるべき英単語200基本中の基本ではありますが、インデントはしっかりとつけるようにしましょう。このくらいの長さならまだ大丈夫ですが長くなればなるほど読みにくくなってきます。ですのでしっかりとインデントするようにしましょう。コードは機械に、コメントは人間に向けて書く考える人もいるかもしれません。
しかし、私たち人間はコードとコメント、つまりソースコード全体で意図を汲み取ることができます。
コードで意図を明瞭に表現する、関係のないものは取り除くなど コメント以外で表現する方法を考え、どうしてもコメントでしか表現できないものをコメントとして残す ようにする。そうすることで、ソースコードがとても読みやすいものになります。　使わなくなった関数やステップをコメントアウトしてとって置くことがあります。コメントアウトされたコードは、今のコードと関係のないものになっていることが多いです。そのため、コードの可読性が著しく損なわれます。
　戻すことが当分ないと思ったら、思い切って削除してしまうことです。削除された事実はSubversionやGitなどのバージョン管理システムで残すことができます。
　いざとなれば、バージョン管理システムから復元することもできます。ソースコードは「今」の状態を保つように心がけることが、読みやすいコードのカギです。コード上で意味を持った数字のことをマジックナンバーと言います。マジックナンバーは数字を直接書いてしまうと、どのような意味かわかりにくくなります。このように書かれると何を行っているのかが分かりません。気の利いたプログラマならとコメントを残すかもしれません。
しかし、マジックナンバーは定数や変数として定義すると、コメントがいならないほどわかりやすくなります。ネストとは入れ子にすることです。
例えばこういうものです。　ネストを深くする人は、弾けるケースを最初にはじいていない、スキップできる要素を最初にスキップしていない場合が多いです。
　複雑な条件分岐がネストしてしまう場合は、わざわざ難しい方法や順序で分岐判定を行っていないかちょっと考えてみるべきだと思います。先ほどのコードを利用するとこのネストを浅くするにはこういった処理で事足ります。
ただし、今回は入力チェックを行っているため、コードの初めでreturnをしていますが、コードの途中でreturnをすると後程説明するgoto文と同じになりますので注意が必要です。goto文を使うとプログラムの流れが読みにくくなるからです。
for 文や if 文ならば、ここで始まって、ここで終わるというのがはっきり分かりますが、goto文はどこにでも行けてしまい（便利な反面）プログラムが読みにくくなります。実際使用する必要のないことのほうがほとんどです。プログラムは上から下に処理が流れるように記述することで他の人が読みやすくなり、良いコードになります。
ですのでやむ負えない場合を除き制御の見通しが悪くなるようなgoto文は書かないようにしましょう。以上を考えながらプログラムをしていくことで、他人が読みやすい「良いコード」が書けるプログラマを目指しましょう。


