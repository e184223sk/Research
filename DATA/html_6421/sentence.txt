More than 3 years have passed since last update.Unityでアプリケーション実装する際にC#使っているときは色々とつらいことが発生しています。その中でもUnityだけでアプリ開発している人が何かほかのC#ライブラリを持込む等するときに気を付けたほうがいいと思うことを備忘録として残します。重要です。UWPアプリケーションは一応C#でかけるのですが、.NET Frameworkとは別物です。いやいや同じC#言語でかけるでしょ！？となると思います。乱暴な言い方ですが、.NET Framework X.XとUWPは別のバイナリで動いてると思ってまちがいないです。
この仕様があるため、.NET Framework X.XでビルドしたクラスライブラリをUWPでは参照することができません（逆もしかり）。Unityは.NET Framework 3.5が基本となっています。ここで「あれ？」となる人がいると思います。さっきも言ったようにHoloLensはUWPアプリケーションです。基本Unityが.NET 3.5なのになぜUWPでアプリケーションが作れるのか。とても簡単な話で単純にUnityでBuildした場合、Unity内で.NET 3.5のC#コードをUWPのプロジェクトに変換して出力しています。Unity上でビルドエラーが出ていない状態のC#のコードであれば何の問題もなくUWPに変換されます。(一部の問題を除いて)以上を踏まえ本題の内容になります。先ほどの一部の問題というのがこれに当たります。Unityは.NET 3.5のルールでコードを書くのでまず.NET 3.5より上位（4.0～)で作られたライブラリは使えません。
これだけならいいのですが、.NET3.5で作られたライブラリはUnity内では使えますが、UnityからHoloLens用にUWPでビルドすると参照できないために動きません。これは先に話したUWPと.NET X.Xのライブラリは参照関係をとれないためです。よって外部のdllを使用して作ったUnityアプリをPlayerで確認してOKでも、ビルドしてダメになるパターンが発生します。１つの方法として、dllの元となるソースコードがある場合、UnityのProjectにコードを全部入れてしまうという方法です。これであればHoloLens用にUWPをビルドするタイミングで変換してくれるので問題なく利用できます。ただし、投入したコードが別のdll（標準の.NETは除く）を見ているとだめなのですが。上記のような対応を行う場合、Unity限定なら必要なライブラリをまとめてパッケージにすることで流用もできますし問題ないです。ただ私の場合、Unity以外の.NETでもライブラリとして使いたいことがあるのでUnityのパッケージでは不便を感じています。現状リリースされている.NETファミリーは最新が.NET Framework 4.7です。この上で動作するC#についてはまた別にバージョンを持っています。最新はC#7.0です。Unityで使える.NET Framework 3.5は.NETとしては１世代以上前の技術になります。このため不便な部分が多々あります。下位のバージョンは処理としては同じことができますが手間が違います。　重い処理を非同期でさせるということはよくある話ですが、複数の非同期処理を組み合わせる処理があると思います。クラウドのサービスを２，３連携して呼ぶようなパターンです。これを.NET 4.5以降では以下のように、次の処理を同期的に待たせたりとかをかなり自然に書けます。非同期処理を待たせたい場合はawait入れるだけでその部分は処理を同期してくれます。.NET 3.5では自分で待機処理を書かないとできないです。Unityで無難にC#で書こうとするとUnity上で全部コード書かないといけない＆HoloLensはUWPのくせにUWPの便利なものが使えない。過去にUWPと組み合わせるために色々試行してるものがあるのですが、まだまだ中途半端です。
色々不便さがあるので、より使いやすい方法でうまくライブラリ化して利用しやすい構造をとれるようにしていきたいと思います。案は色々あるのでいい方法ができればまた報告したいと思います。


