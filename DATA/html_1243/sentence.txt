More than 1 year has passed since last update.最初の記事はこちら今回は Database クラスについての紹介です。
NPocoのバージョンは 4.0.2 です。現時点のコードはこちら複数のコンストラクタが用意されています。大きく分けると
- DbConnection を渡してコネクションを生成する方法(IDbConnection ではない)
- 接続文字列と DbProviderFactory を渡して生成する方法が存在します。これらはどちらを採用するかによってコネクションに管理方法が異なるようです。
(私もDbConnection を使用する方法しか使ったことないので詳細は控えます。)その他オプションとしては DatabaseType, IsolationLevel, enableAutoSelect があります。私は DbConnection と DatabaseType を渡すタイプのものをよく使用します。これはデータベースベンダー毎のクエリの方言を吸収するものです。
このクラス自体は抽象クラスであり、各ベンダー毎の実装クラスが存在します。明示的に指定しなかった場合は DatabaseType.Resolve メソッドにより DbConnection のクラス名に応じた型が自動的に選択されます。既存の DatabaseType の挙動をカスタマイズしたい場合は、自前のDatabaseType を作成し、Database のコンストラクタに渡すとよいでしょうトランザクション分離レベルです。明示的に指定しなかった場合は DatabaseType.GetDefaultTransactionIsolationLevelメソッドの値が使用されます。 ぱっと見た感じMySQL がRepeatableReadでそれ以外がReadCommittedになっています。Fetch メソッドなどで select など以外から始まる名前クエリを記述した際に
select 列リスト from テーブル名 を自動でつけてくれるオプションです。生クエリを書くことなく、自動でクエリ生成をしてくれるものです。これらは 属性を付与したクラスのインスタンスを渡すだけで、自動でクエリを実行してくれます。こちらのQuery は正確にはジェネリクスのついたQuery&lt;T&gt; です。といった感じに記述することができます。手動でクエリを記述するものです。こちらの Query はyield return で1件ずつ返すものです。CompleteTransactionGetTransaction ←これはゲッターではなくトランザクションのスコープを作るメソッドSetTransaction ←これは上記のGetTransaction に対するセッターではない詳細はこちら私はDatabase の外側で DbConnection.BeginTransaction() したものをSetTransaction でセットする方法でトランザクション管理しています。DbCommand からSQL とパラメータ を表す文字列を取得します。私は後述のInterceptor でクエリのログを出力するために利用しています。こちらはSnapshotter クラスで拡張メソッドとして定義されています。Update を実行するときに変更対象列を特定するために使います。使い方はこちらクエリの実行前後に処理を挟む際に使うインターセプターです。ここで紹介したもの以外のメソッドやプロパティも用意されています。


