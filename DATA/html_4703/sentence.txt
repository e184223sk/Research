More than 3 years have passed since last update.C#における、参照まわりの機能が充実してきたので、
変数の渡し方について自分なりにまとめてみました。変数の渡し方について、関連しそうな機能をピックアップしてみます。引数に指定する、ref,outはC#の初期からある機能なので今更ですが、C#7.2よりinが指定できるようになりました。inは、主に大きな構造体を扱う場合の「コピー」を避けるために使われます。
「読み取り専用」の引数だと思うと、少し奇妙な動作をするので注意が必要。以下の理由などから、単に引数を読み取り専用にしたいだけの目的では使用しないほうが良いと思います。C#7.0で refが、C#7.2で ref readonlyが、それぞれ戻り値の型に指定できるようになりました。スコープを辿って問題が無いかどうかはコンパイラがチェックしてくれますので、メモリを破壊するような参照にはなりません。
ただ、refする階層が深くなるとロジックを追いづらくなるので、そこは要注意。
気を付けて使えば、ロジックをよりスマートに書くこともできると思います。C#7.0 より、変数の型にrefを、 C#7.2 より、変数の型にref readonlyを付けることができます。
ref,ref readonlyに指定された変数は、「参照」として扱われます。ローカル変数では、ref readonly とは書けるけれども、readonlyとは書けない不思議な状態となっています。上記二つは、設計思想的には割と対極で、なのですが、どちらも『結果として処理の負荷を軽減する』ための使い方だと思います。C#7.xの機能は使いどころが難しいものが多いですが、きちんと理解しておくことで必要な場面で選択肢として思い浮かべられるようにしたいところです。


