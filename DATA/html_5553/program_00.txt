using System;
using System.Collections.Generic;
using System.Linq;

class MultiValueInt
{
    protected HashSet&lt;int&gt; values;

    //コンストラクタ
    public MultiValueInt() =&gt; values = new HashSet&lt;int&gt;();
    public MultiValueInt(int val) : this(new int[] { val }) { }
    public MultiValueInt(IEnumerable&lt;int&gt; vals) =&gt; values = new HashSet&lt;int&gt;(vals);

    //追加
    public static MultiValueInt operator +(MultiValueInt target, int val) { target.values.Add(val); return target; }
    public static MultiValueInt operator +(MultiValueInt target, IEnumerable&lt;int&gt; source) { source.Select(val =&gt; target.values.Add(val)); return target; }
    public static MultiValueInt operator +(MultiValueInt target, MultiValueInt source) { return target + source.values; }

    //削除
    public static MultiValueInt operator -(MultiValueInt target, int val) { target.values.Remove(val); return target; }
    public static MultiValueInt operator -(MultiValueInt target, IEnumerable&lt;int&gt; source) { source.Select(val =&gt; target.values.Remove(val)); return target; }
    public static MultiValueInt operator -(MultiValueInt target, MultiValueInt source) { return target - source.values; }

    //比較
    public static bool operator ==(MultiValueInt target, int val) =&gt; target.values.Contains(val);
    public static bool operator !=(MultiValueInt target, int val) =&gt; !target.values.Contains(val);

    //オーバーライドしないとなんか警告が出る
    public override bool Equals(object obj) { if (obj is MultiValueInt src) { return src.values.All(val =&gt; this.values.Contains(val)); } else return false; }
    public override int GetHashCode() =&gt; this.values.GetHashCode();
}

