More than 1 year has passed since last update.C#とPowerShellで色々なDBを操作してみます。
環境は以下の通りです。クライアントの環境操作対象のDatabase操作対象のテーブルPowerShellでのusingを用いたリソースの解放処理が標準で存在していなかったので下記を利用する。Dave Wyatt's Blog　Using-Object: PowerShell version of C#’s “using” statement.
https://davewyatt.wordpress.com/2014/04/11/using-object-powershell-version-of-cs-using-statement/外部ライブラリのSystem.Data.SQLiteを利用してデータベースの操作を行います。NuGetで下記をインストールするC#と異なりユーザ定義関数の実行がうまく行きません。（コメント欄参考に実現しました）
また、今回は調査外としましたがPSSQLiteというライブラリがあります。
System.Data.SQLite.dllをラップして使い易くしているようです。古いアクセスの拡張子であるMDBは実は32bitに限り、標準で操作可能です。
COMオブジェクトのMicrosoft ADO Ext(ADOX)を利用してデータベースの作成とテーブルの作成を行います。
.NETのSystem.Data.OleDbを利用してテーブルの操作を行います。C#の場合は、COMとして「Microsoft ADO Ext」を参照します。System.Data.OleDbはバインド変数に名前を付けることができないようです。What's wrong with these parameters?
https://stackoverflow.com/questions/1216271/whats-wrong-with-these-parametersMySQLのインストーラについてくるMySql.Data.dllを利用して操作を行います。
今回はMariaDBを対象としましたがMySQLも同様に動作すると思います。下記からMySQLのインストーラを手にいれてMySql.Data.dllを手に入れます。
https://dev.mysql.com/doc/connector-net/en/connector-net-installation-binary-mysql-installer.html既定では以下にインストールされるので、参照してください。
C:\Program Files (x86)\MySQL\MySQL Installer for Windows\MySql.Data.dllまた下記のストアドプロシージャを作成しておきます。外部ライブラリのNpgsqlを利用して操作を行います。NugetでNpgsqlをインストールします。
下記のストアドプロシージャを作成します。外部ライブラリのOracle.ManagedDataAccessを利用して操作をします。NugetでOracle.ManagedDataAccessをインストールします。標準についているSystem.Data.SqlClientを使用します。事前に下記のストアドプロシージャを作成します。今回はC#やPowerShellでの各種データベースの取り扱いをまとめました。
基本的な操作は全てのDBで同じようなインターフェイスで行われていることがわかります。


