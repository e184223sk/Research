前振りが面倒な人はNUKE の使い方からどうぞ!.NET は昔からビルドツールをあまり必要としていません。実際には MSBuild を暗黙的に使っているのですが、意識して使うことはまれなのではないでしょうか?自分は CI を多用するようになってからビルドツールを利用するようになりました。などなど。最初のうちはコマンドを並べていただけだったのですが、コミットしてプッシュして、CI ジョブはいまた失敗! を繰り返すうちにいやになってきました。コマンドがたくさんあると手元でテストするのも大変です。手元でテストしたコマンドを CI に設定するときにコピペミスなんかやってすごくいらいらします。個人的にはこれが一番好みです。コマンドを並べるのの延長線上ですし。ですが、開発は Windows で、CI は Linux でとなっているとやりにくいんですね。開発が Windows で CI も Windows の時はシェルスクリプトが使えないので、PowerShell を使いました。.NET のクラスライブラリが使えるのはとてもいいです。シェルスクリプトだと、XML をパースして書き換えるとか、接続文字列を書き換えるとかちょっとしんどいんですね。Windows でも Linux でも動くビルドツールということで、紹介してもらった Cake も使いました。検索すると PHP の方が出てくるので、Cake Build で検索するのをお勧めします。Cake はほぼ C# でビルドスクリプトが書けます。Cake Script は (おそらく) C# のコードに変換され、ビルドされ、.NET 上で実行されます。公式・非公式を合わせると、様々なアドインが用意されていまして、かなり便利です。でも、この Cake Script、Visual Studio や Rider のコード補完などの支援を得られないんですね。IDE の支援に頼っている身としてはかなり苦しい。足りないアドインを Cake Script じゃなくて、アセンブリとして作れば IDE の支援が得られるのですが、そのアセンブリの管理がめんどくさいという!ひょんなことから発見したのが NUKE です。使ってみてびっくり。Visual Studio のソリューションに _build って名前のプロジェクトと Build.cs が作られて、そのプロジェクトを実行するという強引さ!普通の C# プロジェクトのなので、IDE のコード補完などの支援がバリバリ効きます!シェルスクリプトほどお手軽ではありませんが、C# のコードを書く延長で書けるのはいいですね!セットアップの前に、Visual Studio でプロジェクトを作りましょう!コマンドでやりたい人はこんな感じで。NUKE は .NET Tool 版がおすすめです。インストールしちゃいます。続いてセットアップです。いろいろと聞かれますが、とりあえずデフォルトでよいでしょう。ただ、GitVersion は No を選んでください。ビルドスクリプトのプロジェクトができましたので、ビルドします。ビルドできました!ところで、横長の顔文字って開発者って日本人なんでしょうか?ビルドスクリプトのカスタマイズは build プロジェクトの Build.cs ファイルを修正します。=&gt; _ =&gt; _ なんて、??? ってな書き方を要求されますが、そういうもんだと思ってください。(FAQ にも書かれているぐらい...)dotnet nuke Restore や dotnet nuke Compile でそれぞれのターゲットを実行できます。詳しくは 公式ドキュメントを読んでいただければ。DotNetBuild() などの関数がタスクになります。タスクの一覧は API Reference にあるクラスのうち、Tasks で終わるものです。Cake と比べると少なめです。ReShaper Command Line Tools を利用して、コード検査をしてみます。そして、dotnet nuke Lint を実行します。と、エラーが出ます。dotnet nuke :fix をしろと仰せなので、実行します。.NET Tools 版の ReSharper Command Line Tools を _build プロジェクトに取り込んでくれます。もう一度 dotnet nuke Lint とすると今度は成功します。残念ですけど、あくまで ReSharper Command Line Tools を実行するタスクなので、コードに問題があってもビルドは失敗しません...が、レポートファイルを読み込んで問題があった時は Fail() を呼び出すようターゲットを書き換えればよいでしょう。パラメーターは以下のように書きます。dotnet nuke --configuration Release とすると、Configuration 変数に Release が入ります。Compile ターゲットで、.SetConfiguration(Configuration) としていますので、リリースビルドになるわけです。何気に IsLocalBuild プロパティが便利でして。これ、開発者のパソコンでビルドされたかどうかを検出してくれます。つまり、CI でビルドされているときはリリースビルドになるんですね。＼（＾ᴗ＾）／少し面白いなあと思ったのが、パス。ディレクトリとかファイルとか。おペーレーターオーバーロードで / を上書きしてそれっぽく書けるようになっています。Lint ターゲットで出力したレポートを Codeclimate 形式の JSON ファイルに変換します。PackageExecutable で NuGet にあるパッケージを実行することができます。ツールを追加したときは dotnet :fix を忘れないでください。inspection-report.json ファイルができていると思います。＼（＾ᴗ＾）／ほかにも、実行ファイルを呼び出すこともできます。詳しくは Lightweight Integration をご覧ください。余談ですが、GitLab は Codeclimate 形式のレポートを Merge Request (GitHub の Pull Request) に表示する機能があります。興味がある方は Code Quality をどうぞ。何気に便利です。シェルスクリプトなどと比べると、起動に少し時間がかかるのが残念ですが、とても書きやすいので満足しています。複雑な処理を書く時も C# のコードそのままですし、何といっても IDE のコード補完やコード検査にコード整形ががっつりききます。ばりばりビルドスクリプトを書きたい人はおすすめです。タスクが少ないのはあれですが、サクッと C# でコード書いちゃえばいいだけなので、あまり気になりませんし。GitVersion との連携も予想外に便利でした。またの機会に開設しようかと思います。


