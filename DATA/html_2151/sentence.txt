More than 1 year has passed since last update.Unityで利用できるReactiveExtensionらしいです。
この説明だと私自身も意味がわからないので、参考リンク1のお言葉を頂戴して説明します。直訳すると「反応性拡張」で、イベントに対する反応を拡張するためのライブラリ何かしらのイベント(ボタンを押した、プレーヤーが移動したなど何でも)に対する反応を
簡単に書くことができるっぽいです。私自身、ソースコードを見に行って、
"はいはいなるほどね"と言えるレベルまで理解できていません。Rxに採用されているデザインパターンで、Observerパターンというのがあるのですが、
それに関しても人に説明できるところまで理解でき次第、まとめようと思っています。今回は、使いながら覚えていきましょう　
という意図で調べながら作ったらなかなか残念な仕上がりだったのでそれをメモに残します。GIFで見たまんまの意味です。
既に何年も前に実装されている先駆者様がいらっしゃいました。
【参考リンク】： UniRXでuGUIのテキストをアニメーションさせる文字を1文字ずつ表示する機能自体は参考リンクで完結しているので、
今回はスキップ機能(文字をいっきに最後まで表示させる機能)をUniRxで実装してみます。特定のキーを押すと1文字ずつ流れる文字を一気にスキップして表示することができます。引数に時間を指定してあげるとその指定した間隔で値を流す(処理を実行)ことができます。ちなみにTimeSpan.FromSecondsというのはどうやらC#の機能のようで
時間を指定するときによく使うみたいです。【参考リンク】：TimeSpan.FromSeconds(Double) メソッドScanというオペレーターは前回発行された値と今発行された値の畳み込みを行うことができます。
平たく言うと重ねて足し合わせるイメージです。accumulationは蓄積、累算などの意味を持つので、言葉の意味で覚えるとわかり易いです。
累算した値に、受け取った値(newValue)を足しているというわけですね。【参考リンク】：UniRxを使ってみるuniRxは非常に便利ですが、
使う上で気を付けることの1つにストリームの寿命管理があります。ストリームというのはメッセージが伝達される経路、仕組み、機構のことらしいです。(またの名をObservableというらしい)【引用元】：ObserverパターンからはじめるUniRxこのストリームというのが役目を終了した(もう必要でなくなった)段階で
購読を終了してあげる必要があります。そうしてあげないと、パフォーマンスが低下したり、
もう存在していないGameObjectを参照してエラーが起きたりします。【参考リンク】：UniRx入門 その2 - メッセージの種類/ストリームの寿命ストリームの購読終了を任意のタイミングで行うことが可能です。
一回変数に入れて、好きなタイミングで呼び出したらいいんじゃないでしょうか。AddToというメソッドを利用して、
先述したもう存在していないGameObjectの参照を未然に防ぐことができます。引数に与えたGameObjectが削除された際に、自動的にDisposeを呼び出してくれます。このメッセージが発行されSubscribeまで到達すると購読が終了するらしいです。今回どこにもOnCompletedを書いてませんが、
どうやらTakeによって指定回数分メッセージが通った際に発行され、
最後のSubscribeに到達しているようです。
(違うかもしれないんで、使ってておかしいと思ったらまた書き直します)前回のストリームが実行中であっても次に作成したストリームを同じ変数に突っ込めば
前回のストリームを止めた上で次のストリームを実行できそう！ダメでした。なので、変数に既に何かしらが格納されているかチェックして
もし入っていたらストリームを止めてます。m_textDispose = Observable.Intervalのように1つの変数に格納したからといって、
ストリームが1つしか作成されるわけではない、前回のストリームは止まらない...というのがわかりました。強い人に見て頂いた際にご指摘頂きましたが、けっこうごちゃごちゃしてしまっています。自分で作っていても感じたことなのですが、・ストリームの処理を条件分岐したい
・ストリームの挙動を途中で動的に変えたいというような要望をUniRx使用時に盛り込むと、
”ストリームB”で”ストリームA”を監視するような状態になるので
条件分岐や変えたい挙動の数だけストリームが増えてしまいます。なので、今回のように
Observable.IntervalをUpdateAsObservableから任意のタイミングで止めるというのは
本来便利なRxを使っているにもかかわらずややこしくなってしまっています。初心者あるあるらしいので、次回からはその辺りも意識してみようと思います。UniRx入門シリーズ 目次
UniRx オペレータ逆引き
UniRxを紐解く「Take(1)とFirst()の違い」
【Unity】【UniRx】Observable.DoXxx()系のメソッドの挙動まとめ
【Unity】UniRx入門リンク集Unityで斑鳩ぽいゲーム作ってチュートリアルの先へ進もう Part8 ↩


