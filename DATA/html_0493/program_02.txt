
/// &lt;summary&gt;
/// 一度しか初期化できない値です。
/// readonlyキーワードの代わりに使用します。
/// &lt;/summary&gt;
/// &lt;typeparam name="T"&gt;ラップする型&lt;/typeparam&gt;
public class UniReadOnly&lt;T&gt;
{
    ///// &lt;summary&gt;
    ///// 値を取得します。
    ///// &lt;/summary&gt;
    public T Value { get; private set; }
    /// &lt;summary&gt;
    /// 初期化されているかどうかを取得します。
    /// &lt;/summary&gt;
    public bool IsInitialized { get; private set; }

    /// &lt;summary&gt;
    /// 値を初期化します。このメソッドは一度しか呼ぶことができません。
    /// &lt;/summary&gt;
    /// &lt;param name="value"&gt;初期化する値&lt;/param&gt;
    /// &lt;exception cref="AlreadyInitializedException"&gt;複数回初期化しようとしたときにスローされます。&lt;/exception&gt;
    public void Initialize(T value)
    {
        if (IsInitialized) throw new AlreadyInitializedException();
        IsInitialized = true;
        Value = value;
    }

    public override string ToString() =&gt; Value.ToString();
    public static implicit operator T(in UniReadOnly&lt;T&gt; readOnly) =&gt; readOnly.Value;
}

internal class AlreadyInitializedException : Exception
{
    public AlreadyInitializedException() : base("すでに初期化されています。")
    {
    }
}

