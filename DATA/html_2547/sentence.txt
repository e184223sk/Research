More than 1 year has passed since last update.Task(UniTask)は便利です。
特にこの昨今awaitで結果を待てるので手続き処理っぽく書きつつ非同期処理が書けます。でも、 Taskじゃない非同期処理はどうしましょう。例えばボタンのクリック。　ボタンのクリックはユーザーが気が向いたときにするものなので非同期です。PlayFabやNCMBといったmBaasのAPI呼び出しなどは通信中画面が止まっては困るのでコールバックで結果（もしくはエラー）を受け取るようになっています。　これもまた非同期です。こういった「非同期だけれど、Taskではない」をTaskに変換してくれる便利な奴がいます。　それが　TaskCompletionSource(UniTaskCompletionSource)です。※この記事では基本Task/TaskCompletionSourceを使いますが、適宜UniTask/UniTaskCompletionSourceに読みかえてくださいintを返すTask Task&lt;int&gt; に対応するのは TaskCompletionSource&lt;int&gt; ですし
floatを返すTask Task&lt;float&gt; に対応するのは TaskCompletionSource&lt;float&gt; です。この返却したいTaskに対応した TaskCompletionSource を new して、 Task をreturn するのが基本形です。しかし、このメソッドのTaskはいつまでたっても結果を返しません。　それはそう。 誰も結果を返してないからです。結果を返すにはこのTaskCompletionSourceのインスタンスに TrySetResult を呼ぶ必要があります。
（なお、キャンセルする場合は TrySetCanceled()を呼ぶ必要がありますが、それはまたの機会に・・・）これで、このメソッドはTaskの結果として32768を返すようになります。
さて。これは非同期でしょうか。違いますね。 これでは return Task.FromResult(32768); と同じです。しかし、ここで一つとても重要なことがあります。それはこの TrySetResultは非同期で呼んでも構わないということです。と言われても良くわからない方もいるでしょう。
例えば。　最初に例で出した ボタンのクリック を絡めてみます。まず、基本形を作ります「指定したボタンを」とあるので、引数でボタンを受け取りますボタンがクリックされたら、結果を返却するようにします。　結果を返却するには TaskCompletionSource の TrySetResult を呼べば良いのでした。完成です。これで、ボタンをクリックするとこの　tcs.Task は 65536 を返却して終了するようになります。
簡単ですね。無事 Taskじゃない非同期処理をTask化できました※これだとbtnのonClickイベントが登録されっぱなしじゃないか！と思った貴方。大正解です。本当はちゃんと解除してあげてください。では、次はほんのちょっと応用です。 （今となってはObsoleteな)WWWクラスをTask化してみますこれまた、基本形を作ります。　ページ情報なので Task は Task&lt;string&gt;  TaskCompletionSourceも TaskCompletionSource&lt;string&gt; にします。「指定したURLから」とあるので、引数でurlを受け取りますWWWクラスはコルーチンで結果を待つ仕組みなので、StartCoroutineで指定したurlからWWWでコンテンツを取得するようにします。結果を返却するには TaskCompletionSource の TrySetResult を呼べば良いのですが、コルーチンの結果は（基本的には）取得できないので、WWWGetの引数に TaskCompletionSource&lt;string&gt; を追加して、WWWGetの中で結果を入れてもらうように修正します。完成です。　コルーチンによる非同期もTaskにすることが出来ました。完全に蛇足ですが、上記二つの例を組み合わせると、「ボタンがクリックされるまで待ち、クリックされたら指定されたURLにアクセスしてコンテンツを取得する」Taskが作れます。んー。すっきりしてますね！今回は非常にシンプルな例を挙げましたが、使ってみるとっかかりにでもなれば幸いです。Taskにしておくと結果が取得しやすいのはもちろんのこと、Task.WhenAnyやTask.WhenAllを使って、複数あるうちのどれか一つのTaskが完了待ちや全てのTask完了待ちなど、ただの非同期処理では難しかった非同期処理同士の連携が簡単にできるようになったりするので（状況に応じて）Task化進めるのも良いと思います。よい。Taskライフを。


