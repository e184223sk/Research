More than 1 year has passed since last update.今回はClangNet(libclangの.NET(C#) Binding)を使った実用的な構文解析のサンプルを作成してみます。
今回作成するサンプルでは、以下の2つの情報を出力する機能を実装します。ClangNetのインストールや使用方法については過去記事をご参照ください。まずは、今回解析対象にするC/C++用ソースコードを用意します。
今回は以下の種類の関数を解析対象にします。解析対象にするソースのサンプルを以下に示します。
解析対象ソースの詳しい説明は割愛します。上記解析対象ソースに対して、関数コールツリー(Invokation Tree)と関数クロスリファレンス(Cross Reference)情報を生成して出力するサンプルを実装します。実現方法を簡単に説明します。
大きく分けると次の3ステップで実現します。1 のTranslation Unit(ソースファイル)解析では、ClangNetの構文解析機能を使って各ソースファイルのAST(抽象構文木)を辿っていき、以下のような情報を収集します。2 のInvokation Tree(関数コールツリー)生成では、1 で収集した情報をもとに、関数定義内で呼び出している関数を再帰的に辿っていきます。
3 の Cross Reference(関数参照情報)生成では、1 で収集した情報をもとに、関数ごとに宣言箇所、定義箇所、呼び出し箇所のテーブルを生成します。ソースファイルからClangNetを使ってASTを解析し、必要な情報を収集します。まずは収集して構築するデータ構造を定義して行きます。それぞれのソースを示します。続いて、ASTを解析してTranslationUnitMapを生成するロジックを実現するクラスを定義します。
また、ASTを解析する部分は、様々なソースファイルの入力に対応できるように設定情報を保持するクラスを定義し、それをパラメータとして渡すようにします。
さらに、関数情報(BehaviorInfo)はカーソルの種別に対応したクラスのインスタンスを生成できるようにFactoryクラスを定義します。
それぞれのソースを以下に示します。  次は、1.で生成したTranslationUnitMapの情報から関数コールツリー情報を生成し、出力する機能を持つクラスを実装します。
関数コールツリーを出力するために、TranslationUnitMapに登録されている各TranslationUnitInfoのBehaviorMapから、種別がDefinition(関数定義)のBehaviorInfoを抽出し、Behavior IDをキーとしたハッシュマップを生成します。
生成するハッシュマップ(BehaviorDefinitionMapクラス)の定義と、ハッシュマップ生成処理の実装コードを以下に示します。生成したBehaviorDefinitionMapを用いて、関数が呼び出している関数情報を辿っていき、関数のコールツリーを出力します。
実装コードを以下に示します。ソース全文を以下に示します。続いて1.で生成したTranslationUnitMapの情報から関数クロスリファレンス(宣言/定義/コール)情報を生成し、出力する機能を持つクラスを実装します。
クロスリファレンス情報を保持するためのクラス(BehaviorCrossReferenceInfo)と、それを関数ごとにまとめるコンテナ(BehaviorCrossReferenceMap)を定義します。
なお、BehaviorCrossReferenceInfoは、重複を排除するためにValueObjectパターンで実装します。
それぞれの実装コードを以下に示します。上記で示したクロスリファレンス情報を生成するコードを実装します。  次に、生成したクロスリファレンス情報を順番に出力します。
実装コードを以下に示します。ソース全文を以下に示します。最後に、1-3.で実装した各機能を呼び出す処理を実装します。解析対象サンプルソースを入力して実行した結果を示します。
上から、ASTのダンプ結果、関数コールツリー、関数クロスリファレンス情報が出力されています。  ClangNetを使って以下の情報を出力する機能を実現するサンプルを紹介しました。作成したサンプルの全ソースはGitHubにおいてあります。
GitHub : Link今回作成したサンプルには、テンプレート関数など対応していないケースがあるので、次回はそれらに対応できるように拡張していきたいと思います。


