More than 1 year has passed since last update.最初の記事はこちら今回はSQLを直接記述してデータベースを操作します。データベースはPostgreSQLを使用しました。前回と同じものを流用Insert, Update, Deleteといった変更操作を行うものについてはこのメソッドを実行します。実行結果ログは以下のように出力されます。Dapper と似たような感覚で操作することができます。ただDapper とは異なり この処理 があるおかげでOracle などの場合でもパラメータを@パラメータ とアットマークで渡せるようです。ここでは empテーブルとdeptテーブルを結合し社員名、部署名を取得します。まずクエリの結果を格納するクラスを用意実行コード実行結果ログは以下のように出力されます。Fetch メソッドでは結果をList&lt;&gt;で返しますが、これ以外にもなどがあります。また 直接クエリを渡す形式の Query&lt;T&gt; というものもあります。
こちらは大量データ処理などのために1件毎に対象をインスタンス化して利用する場合に使うものだと思います。
(間違ってたらすみません。)Query&lt;T&gt;のドキュメントはこちらDatabaseクラスのEnableAutoSelectが有効な場合(デフォルトで有効)生SQLがSELECT, EXECUTE, CALL, EXEC 以外から始まっている場合、自動でSELECT (列一覧) を付与してくれます。この機能はAutoSelectHelperというクラスによって行われています。コード例です。実行されたクエリ実行されたクエリこの機能は大変便利なのですがwith でクエリを開始した場合にもselect 列一覧 が先頭に付与され、不正なSQLになってしまいます。これを回避するためには with の前に ; を付与すれば回避可能です。コードの箇所で説明するとこのif がtrue になるためです。


