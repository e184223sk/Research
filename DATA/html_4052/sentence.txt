先日書いた新卒研修のアウトプット記事が、思いのほか多くの方に見ていただいております。
こんなにLGTMやストックをいただいたのは初めてなので、大変嬉しいです。今回は、ログの構造化について学んだことをまとめてみました。今までログは、ファイルに出力するのが一般的でした。
しかしクラウドやコンテナなどの普及により、そのままファイルに残しておくことは不都合が生じるようになりました。
主に、次の二点の理由からです。近年では、CI/CDなどにより本番環境のコンテナの破棄が頻繁に行われるようになりました。
そのため、アプリケーションログなどの永続的に保存するデータはコンテナの外に出す必要が出てきます。また、業務用のアプリケーションでは立ち上がるコンテナの数はかなり多くなるため、それぞれのコンテナにあるログファイルを一つ一つ検索するのもあまり現実的ではありません。ストリームとは、ログを様々な形で管理する方針のことです。
ログをストリームとして管理してログ基盤に連携すると、上記二つの問題点を払拭することができます。具体例として、以下のようなことができるようになります。プログラム上でログを出力する際にも、ストリームで連携しやすいようにすることが求められます。
ここで登場するのが、ログの構造化です。構造化されていないシンプルな、文字を出力するだけのログです。結果このような構造化されていないログの場合、ストリーム連携に必要な情報が欠落してしまっていたり、その場合の後からの構造化がしにくかったりという問題が発生します。そこで、ログを出す段階で文字列ではなく一般的なJSONで構造化することを考えてみます。結果このログですと、最初から機械的に処理しやすくなっているので後からストリーム連携がしずらくて困ることが少なくなります。C#の構造化ログ出力ライブラリであるSerilogを使うと、以下のように書くことができます。
LogTemplateに@を付けると、プロパティーの構造をそのままログに出してくれるのでわかりやすいですね。結果この記事が少しでも参考になりましたら、幸いです。


