More than 3 years have passed since last update.この記事はUnity5.4.3p3(Mono)で発生した以下のエラーの原因と対処についての記事です。
System.ArgumentException: dateTime.Kind equals Local and offset does not equal the offset of the system's local time zone.
また、文中で出てくるMonoの実装とは、おそらくこう実装されているだろうという参考コードです。System.DateTimeOffset
System.DateTimeに協定世界時(UTC)からのオフセット(System.TimeSpan)を加味することで
異なるタイムゾーンの時刻でも計算できるようにするものです。今回の問題は以下のコードで比較的簡単に発生します。ただし、これにはコード以外の前提条件が必要です。DateTimeOffsetのコンストラクタに渡されたDateTimeのDateTime.KindがDateTimeKind.Localである場合、
UTCからのオフセットの時間がTimeZone.CurrentTimeZoneと異なる場合に発生するエラーです。UnityのMonoでは以下のように実装されていると思われます。前述のコードで発生しているロジックとしては以下の通りです。UnityのMonoでは以下のように実装されていると思われます。つまり、サマータイムの境を超えるような計算をした場合に発生するということです。
もちろん、サマータイム中からサマータイムではない時間への変換も同様です。結局のところ、TimeZone.CurrentTimeZone.GetUtcOffset(dateTime)と違うオフセットを渡すとエラーになるため、以下のようなコードでも簡単に発生する。これはつまるところ次のコードでエラーが発生することを意味するまた、端末の設定によりタイムゾーンが自動で切り替わった場合にも同様に例外が発生するのではないかと思います(未検証)DateTimeOffsetが内部で保持しているDateTimeのDateTimeKindがLocalの場合にオフセットのチェックがされるため、
DateTimeKindをDateTimeKind.Unspecifiedにしてやれば問題は発生しません。
DateTimeKindを使用しなくてもOffsetがあるため、挙動に影響はありません。例えば次のようなコードを使用することで回避できます。コンストラクタでのチェックは依然としてされているものの、
計算の直前でDateTimeKind.Unspecifiedに変換されているので通常の利用時は問題は発生しません。
https://referencesource.microsoft.com/#mscorlib/system/datetimeoffset.cs,5cff8f26f5c7c095Unity以外のMonoについては未検証です。


