以前、下記記事にイベントハンドラの命名案を記載しました。RxはC#のevent構文の上位互換と言われています。
では、同じ解釈を適用する場合、RxのIObservable等の部品の命名パターンはどのように構築すれば良いのか考えてみます。今回の内容は下記記事に記載したRxの解釈に基づいたものとなります。Rx全般に適用可能だと思いますが、ここではUniRxのみを検討範囲とします。以下の形で整理できるのではないかと考えました。Subjectという型の名前自体は、恐らく「主題」という意味で使用しているのではないかと思います。
Observerと繋がるように「観測テーマ」と意訳しても良いと思います。
イベントを発火させる役割で利用する場合は、Subjectはイベントのフィールドの置き換えとなります。このため、イベントハンドラと同じ命名方法が使えそうです。event構文を置き換える場合、Observableはイベントプロパティを置き換える部分となります。このため、こちらもイベントハンドラ名と同じ命名方法でいけそうです。Observerそのものについては、インスタンスに名前を付けて保持することがまずないので、検討対象外とします。Observerに登録する、イベント発火時に呼び出すメソッドの登録処理は以下のように置き換わります。このため、こちらはイベントハンドラのメソッド名と同じ考え方が使えそうです。上記の考え方で書いたプログラムが「英語の自然言語に近いプログラム」となり得るのかどうか、例文を作って検証してみます。(1)〜(4)それぞれのコードを英文になるように組み立て、翻訳サイトDeepLで翻訳して意味の通る日本語となるか検証します。まずは(1)の部分を英文にしてみます。RxをPub/Subパターンで捉えてみるの解釈では、Subjectのインスタンス生成は、Subjectの内部ObserverがSubject利用クラスを観測開始することを意味するのでした。
この役割を示すような英文を考えると、以下のようになりました。翻訳サイトの翻訳結果から、Subjectの部分のみ「観測テーマ」に変更しています。onDeadから創造されたとは思えない程長くなってしまっていますが、以下の部分以外はボイラープレートです。続いて(2)の方です。
自然な文となるように、onDead(Subject)をJohnとします。OnNext()は、上記の文章の中で一番重要な部分のみを抜き出しているという考えです。 enemy.OnDeadとSubscribe()に分解して考えます。RxをPub/Subパターンで捉えてみるの解釈ではObservableはBrokerとなるので、それを説明する文を作りました。(1)と同じで、以下の部分以外はボイラープレートです。RxをPub/Subパターンで捉えてみるの解釈では、Subscribe()はObservableに対して購読の手続きを行うように命令しているのでした。
これを説明するように英文を組み立てます。
自然な文となるように、今度はJaneにOnDead(=Observable)になってもらいます。  命令文として訳してほしいところですが、残念ながら平叙文になってしまいました。
とりあえずそのまま貼っておきます。Subscribe()の引数であるonNext: _ =&gt; this.EnemyDead()の部分はこのようになります。 
Playerの代表はJackに務めてもらいます。こちらも以下の部分以外はボイラープレートです。(1)〜(4)の英文とその訳を繋げました。
便宜上付与したJohn等の名前はメンバ名に戻し、理解しやすいように少し日本語訳に手を入れました。これだけで仕様を説明する文章を作ることができました。補完しているしている語句が多いので、こじつけのように感じられるかもしれません。
しかし、補完している部分は、クラス名やインスタンス名、イベントの内容が変わってもそのまま使えます。
このため、場面によって変わる部分のみコードに記載し、共通部分は脳内でテンプレート化しておいて随時脳内補完するという整理も可能なのではないかと思います。
この脳内補完と翻訳がスムーズに行えるようになると、プログラムを理解する速度が速くなると思います。


