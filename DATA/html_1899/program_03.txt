
using System.Xml;

namespace TestProject.Extension
{
    /// &lt;summary&gt;
    /// XmlDocument拡張クラス
    /// &lt;/summary&gt;
    public class XmlDocumentExtension : XmlDocument
    {
        /// &lt;summary&gt;
        /// ルート要素を作成
        /// ※既存の子ノードはすべて削除します
        /// &lt;/summary&gt;
        /// &lt;param name="el"&gt;要素&lt;/param&gt;
        /// &lt;param name="version"&gt;バージョン&lt;/param&gt;
        /// &lt;param name="encoding"&gt;エンコーディング&lt;/param&gt;
        /// &lt;param name="standalone"&gt;外部依存&lt;/param&gt;
        /// &lt;returns&gt;XmlElementWrapper&lt;/returns&gt;
        public XmlElementWrapper CreateRootOfElementWrapper(string el, string version = "1.0", string encoding = "utf-8", string standalone = null)
        {
            this.RemoveAll();
            this.AppendChild(this.CreateXmlDeclaration(version, encoding, standalone));
            var createEl = this.CreateElement(el);
            return new XmlElementWrapper(this.AppendChild(createEl));
        }
    }

    /// &lt;summary&gt;
    /// XmlElementラッパークラス
    /// &lt;/summary&gt;
    public class XmlElementWrapper
    {
        /// &lt;summary&gt;
        /// XmlElement
        /// &lt;/summary&gt;
        private XmlElement _el;

        /// &lt;summary&gt;
        /// XmlDocument
        /// &lt;/summary&gt;
        private XmlDocument _doc;

        /// &lt;summary&gt;
        /// タグ名
        /// &lt;/summary&gt;
        public string Name =&gt; this._el.Name;

        /// &lt;summary&gt;
        /// コンストラクタ
        /// &lt;/summary&gt;
        /// &lt;param name="node"&gt;XmlNode&lt;/param&gt;
        public XmlElementWrapper(XmlNode node)
        {
            this._el = node as XmlElement;
            this._doc = this._el.OwnerDocument;
        }

        /// &lt;summary&gt;
        /// 子要素を追加
        /// &lt;/summary&gt;
        /// &lt;param name="el"&gt;要素&lt;/param&gt;
        /// &lt;returns&gt;追加した子要素&lt;/returns&gt;
        public XmlElementWrapper AppendChild(string el)
        {
            var addEl = this._el.AppendChild(this._doc.CreateElement(el));
            return new XmlElementWrapper(addEl);
        }

        /// &lt;summary&gt;
        /// 値を設定
        /// &lt;/summary&gt;
        /// &lt;param name="value"&gt;値&lt;/param&gt;
        public void SetValue(string value)
        {
            this._el.InnerText = value;
        }

        /// &lt;summary&gt;
        /// 値を取得
        /// &lt;/summary&gt;
        /// &lt;returns&gt;値&lt;/returns&gt;
        public string GetValue()
        {
            return this._el.InnerText;
        }

        /// &lt;summary&gt;
        /// 属性を設定
        /// &lt;/summary&gt;
        /// &lt;param name="attrName"&gt;属性名&lt;/param&gt;
        /// &lt;param name="value"&gt;属性値&lt;/param&gt;
        public void SetAttribute(string attrName, string attrValue)
        {
            this._el.SetAttribute(attrName, attrValue);
        }

        /// &lt;summary&gt;
        /// 属性を取得
        /// &lt;/summary&gt;
        /// &lt;param name="attrName"&gt;属性名&lt;/param&gt;
        /// &lt;returns&gt;属性値&lt;/returns&gt;
        public string GetAttribute(string attrName)
        {
            return this._el.GetAttribute(attrName);
        }

        /// &lt;summary&gt;
        /// 要素検索
        /// &lt;/summary&gt;
        /// &lt;param name="xPath"&gt;XPath&lt;/param&gt;
        /// &lt;returns&gt;XmlElementWrapper&lt;/returns&gt;
        public XmlElementWrapper SelectSingleNode(string xPath)
        {
            var node = this._el.SelectSingleNode(xPath);
            return node == null ? null : new XmlElementWrapper(node);
        }
    }
}

