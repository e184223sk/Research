
using System;
using UnityEngine;
using UniRx;

public static class SubjectPoolExtensions
{
    public static ISubject&lt;T&gt; CreateSubject&lt;T&gt;(this Component component, string key, bool isBroadcast = true)
    {
        var subject = SubjectPool.Instance.CreateSubject&lt;T&gt;(key);

        if (isBroadcast)
        {
            foreach (var com in UnityEngine.Object.FindObjectsOfType&lt;Component&gt;())
            {
                var listener = com as IObservableAddedListener&lt;T&gt;;
                if (listener != null) listener.OnObservableAdded(component, key, subject);
            }
        }

        return subject;
    }

    public static IObservable&lt;T&gt; FindObservable&lt;T&gt;(this Component component, string key)
    {
        return SubjectPool.Instance.FindSubject&lt;T&gt;(key);
    }

    public static bool RemoveSubject(this Component component, string key)
    {
        return SubjectPool.Instance.RemoveSubject(key);
    }
}

