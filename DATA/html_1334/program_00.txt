    public static class SyntaxGeneratorHelper {
        public static UsingDirectiveSyntax ToUsingDirective(string inUsing) {
            return 
                SyntaxFactory.UsingDirective(SyntaxFactory.ParseName(inUsing).WithLeadingTrivia(SyntaxFactory.Space))
                .WithTrailingTrivia(SyntaxFactory.CarriageReturnLineFeed)
            ;
        }
        public static CSharpCompilation CreateCompilation(SyntaxTree inDaoAST, SyntaxTree inEntityAST) {
            var dotnetCoreDirectory = System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeDirectory();

            var opts = new CSharpCompilationOptions(
                outputKind: OutputKind.DynamicallyLinkedLibrary
            );

            return 
                CSharpCompilation.Create("autoGen", 
                    syntaxTrees: new[] { 
                        inDaoAST, inEntityAST                  
                    },
                    references: new[] {
                        AssemblyMetadata.CreateFromFile(typeof(object).Assembly.Location).GetReference(),
                        MetadataReference.CreateFromFile(Path.Combine(dotnetCoreDirectory, "netstandard.dll")),
                        MetadataReference.CreateFromFile(Path.Combine(dotnetCoreDirectory, "System.Runtime.dll")),
                    },
                    options: opts
                );
        }    
    }
}

