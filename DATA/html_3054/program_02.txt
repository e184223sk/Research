

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Kinect;

namespace v2SwipeGesture
{
    public class SwipeGestureDetector : GestureDetector
    {
        public float SwipeMinimalLength { get; set; }
        public float SwipeMaximalHeight { get; set; }

        public int SwipeMininalDuration { get; set; }
        public int SwipeMaximalDuration { get; set; }

        public SwipeGestureDetector( int windowSize = 20
            , float minLen = 0.4f
            , float maxHgt = 0.15f
            , int minDur = 250
            , int maxDur = 700
            )
            : base(windowSize)
        {
            SwipeMinimalLength = minLen;        //始点と終点の横幅
            SwipeMaximalHeight = maxHgt;     //始点と終点の高低差

            SwipeMininalDuration = minDur;     //ジェスチャ判定時間最小値(ミリ秒)
            SwipeMaximalDuration = maxDur;     //ジェスチャ判定時間最大値(ミリ秒)
        }

        protected bool ScanPositions(Func&lt;Vector3, Vector3, bool&gt; hFunc, Func&lt;Vector3, Vector3, bool&gt; directionFunc,
                                        Func&lt;Vector3, Vector3, bool&gt; lFunc, int minTime, int maxTime)
        {
            int start = 0;

            for (int idx = 1; idx &lt; Entries.Count - 1; idx++)
            {
                if (!hFunc(Entries[0].Position, Entries[idx].Position) || !directionFunc(Entries[idx].Position, Entries[idx + 1].Position))
                {
                    start = idx;
                }

                if (lFunc(Entries[idx].Position, Entries[start].Position))
                {
                    double totalMilliseconds = (Entries[idx].Time - Entries[start].Time).TotalMilliseconds;
                    if (totalMilliseconds &gt;= minTime &amp;&amp; totalMilliseconds &lt;= maxTime)
                    {
                        return true;
                    }
                }
            }           
            return false;
        }

        protected override void LookForGesture(JointType jt)
        {
            //Right to Left 
            if (ScanPositions((p1, p2) =&gt; Math.Abs(p2.Y - p1.Y) &lt; SwipeMaximalHeight,   // Height
                    (p1, p2) =&gt; p2.X - p1.X &lt; 0.01f,                                    // Progression to right
                    (p1, p2) =&gt; (p2.X - p1.X) &gt; SwipeMinimalLength,                     // Length
                    SwipeMininalDuration, SwipeMaximalDuration))                        // Duration
            {
                RaiseGestureDetected(GestureType.SwipeRightToLeft);
                return;
            }

            //LeftToRight
            if (ScanPositions((p1, p2) =&gt; Math.Abs(p2.Y - p1.Y) &lt; SwipeMaximalHeight,   // Height
                    (p1, p2) =&gt; p2.X - p1.X &gt; -0.01f,                                   // Progression to right
                    (p1, p2) =&gt; Math.Abs(p2.X - p1.X) &gt; SwipeMinimalLength,             // Length
                    SwipeMininalDuration, SwipeMaximalDuration))                        // Duration
            {
                RaiseGestureDetected(GestureType.SwipeLeftToRight);
                return;
            }

            //Top to Bottom
            if (ScanPositions((p1, p2) =&gt; Math.Abs(p2.X - p1.X) &lt; SwipeMaximalHeight,   // Height
                    (p1, p2) =&gt; p2.Y - p1.Y &lt; 0.01f,                                    // Progression to right
                    (p1, p2) =&gt; (p2.Y - p1.Y) &gt; SwipeMinimalLength,                     // Length
                    SwipeMininalDuration, SwipeMaximalDuration))                        // Duration
            {
                RaiseGestureDetected(GestureType.SwipeTopToBottom);
                return;
            }

            //Bottom to Top 
            if (ScanPositions((p1, p2) =&gt; Math.Abs(p2.X - p1.X) &lt; SwipeMaximalHeight,   // Height
                    (p1, p2) =&gt; p2.Y - p1.Y &gt; -0.01f,                                   // Progression to right
                    (p1, p2) =&gt; Math.Abs(p2.Y - p1.Y) &gt; SwipeMinimalLength,                     // Length
                    SwipeMininalDuration, SwipeMaximalDuration))                        // Duration
            {
                RaiseGestureDetected(GestureType.SwipeBottomToTop);
                return;
            }
        }

    }
}

