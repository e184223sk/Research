More than 1 year has passed since last update.去年書いたやつだけど公開しとく
今日→去年→5,6年前…とさかのぼります今さらな話ですがDropBoxを整理してたら表題の思ひ出がソースとして出てきたので
せっかくだから誰かのナレッジになればと思い。もはやレガシーになり果てたKinectV2ですが、
当時はインタラクティブコンテンツとして使うにはなかなか面白いデバイスでした。安価で近未来的な機能だったこともあり、簡単なコンテンツでも「えっすごいすごい！」っていうリアクションを得られたため
当時勤めてた会社でもSHIN_DEVELOPが面白いもん作ったってことでやや人気者になれました。先に述べたように、デベロッパーの中ではもはや割と使い古された技術ではありますが
まだまだ一般ウケする存在じゃないかなぁと思うんですよね（実際どうなんだろうな）色々語りたいことはあるんですがそれはまた別の投稿で。
前説が長くなりましたが今回はジェスチャーについて自分なりのナレッジを出したいと思います。勉強会やセミナーで登壇した経験も何回かあるんですが、
Kinectの実装で意識することは「パラパラ漫画」だと主張してきました。
このデバイスに限らず、LeapMotionとかRealSenseとかも概念としては共通しています。1コマ1コマの状態を考えてこうなっていればこうなる、という思考で実装することを意識します。
特にジェスチャーについては、Kinectが取得する1フレーム時の座標の位置関係から
各Jointの値がどう推移したかを解析することがキーとなります。先に白状しておきますが、このソースって確かv1のサンプルか何かを改良したものです。
v2のSDKBrowserにGestureBuilderみたいなのがあったと思いますが、アホなので使い方がよく分かんなかったため「じゃーこれ改造して使ったろ！」ってノリで作ってます。
ユーザー定義演算子とか組み込んでますが、正直あんまり使ったことなかったり…プロジェクト構成は以下のようになります。
実装するのはの5つになります。
順に載っけていきます。ジェスチャーの検出開始時のデータを格納するクラスです。
検出開始と言っても、どこからとかではなく常に検出を行ってます。もう記憶が曖昧になってきた…
EntryデータをListに追加していってトータルの差分を計測します。
ここで追加されるのは対象となるJointのPosition.x , y ,z です。
windowSizeの数だけデータを保管していますが、その理由はよく覚えていません…このクラスがミソになります。
コンストラクタでジェスチャの定義をしていますが、デフォルトで
横方向に40cm以上、縦方向に15cm以上、0.25秒以上、0.75秒以下
の範囲がジェスチャとして認識されるようになっています。
ターゲットとなるJointのPositionを毎フレーム取得＆リスト化し、
リスト内の差分が上記の設定を満たした場合にRaiseGestureDetectedイベントが発生するって仕組みです（確か）上記設定値を右手に適用した場合を例にすると、
右手を0.25秒以上、0.75秒以内に横に40cm動かしたら
RaiseGestureDetectedイベントでSwipeRightToLeft(あるいはSwipeLeftToRight)が検出される形になります。このモジュールはdllとして出力した上でWPFアプリケーションを対象に使用します。
参照にv2SwipeGesture.dllを追加してMainWindow.csとかでと追記するだけで利用可能です。


