More than 3 years have passed since last update.gloops advent calendar 19日目ですはじめまして。 gloopsの s_mino_ri です。
社内ではゲームの運用に携わっているとともに、常にC#の情報を追いかけている生粋のC#オタクでもあります。ここでは、私が運用に携わっているゲームで使用している、独自定義された拡張メソッドを紹介していきたいと思います。
※読みやすさを優先して、引数のnullチェックや例外処理は基本的に省いています
※以下で紹介するメソッドは、すべて現場で使われているままの名前です拡張メソッド (C# プログラミング ガイド)
拡張メソッドとは、C#に用意された言語機能のひとつで、あたかも「既存の型(クラスなど)にメソッドを追加したように見える」メソッドです。
実態はクラスの外にあるただのstaticなメソッドので、クラス内のprivateな変数などにはアクセスできません。
有名なところではLINQが主に拡張メソッドで実装されていますね。当然、拡張メソッドを使いすぎるとメソッドがどこで定義されているのか分からなくなるなどデメリットもあるため、乱用は禁物です。大量にあるデータを5件ずつなどで区切ってページ分け表示する際に使用します。
単純ですが、ページ分けする場所それぞれにSkipとTakeを書くよりも一貫性が出て読みやすくなります。ソーシャルゲームにガチャはつきもの。
このメソッドは、ある集団の中で、特定の集団が選択される確率を計算します。
rateSelectorは要素(ガチャの排出アイテムなど)から、その要素に割り当てられた排出の重み値を選択する述語です。RxにあるBufferとほぼ同じ動作をする拡張メソッドです。大量のデータを、ある個数ごとに分割して返します。
たとえば、所持アイテムを5個ごとに折り返して表示する場合などに使用します。LINQでシーケンスを加工した後、そのままstring.Joinしたい時に頭から囲うのは面倒……。
という要件を叶えるだけのメソッドです。標準ライブラリのDictionaryは、「特定のキーが見つからない場合に規定値を返す」という要件を満たすメソッドがありません。
TryGetをこのために使うと、毎回変数を先に宣言しないといけないため少し不便…ということで用意したメソッドです。ある値が、下限～上限の間に入っているか判定する拡張メソッドです。
不等号の単純なミスを無くしてくれる上、コード上の値の並び順が分かりやすくなります。拡張メソッドは、うまく使うとコードの可読性を上げ、一連の処理を再利用しやすくします。
しかし、前述したようにデメリットもあり、「パッと見で誰が定義したメソッドか分かりにくくなる」「ワンライナー化が(過剰に)進み、コードが横に伸びやすくなる」などのかえって可読性を低下させるような効果をもたらすこともあります。便利な機能ですが、使いすぎには気を付けましょう。


