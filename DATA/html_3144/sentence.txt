メソッドの呼び出し側を修正することなく、機能を追加できるデフォルト引数（オプション引数）は便利ですが、使いどきを誤るとアプリケーションに予期しない影響を及ぼすことがあります。この記事では私が実務でデフォルト引数を追加した際にアプリケーションが動かなくなった体験を元に、デフォルト引数の追加時の注意点と解決方法をまとめます。下の図のように1つのソリューションに共通メソッドを定義するプロジェクトと、それを利用する複数のプロジェクトがある状況で、共通メソッドの動作を変更する修正案件がありました。
共通メソッドは以下のような税込み価格を返すメソッドだったとしましょう。プロジェクトAからの呼び出しのときだけ、税率を変更したかったため、下記のようにデフォルト引数を追加して税率を変更できるようにしました。動作検証も完了し、担当者に修正したコードを渡して、ホッと一息ついていると、担当者が動作検証したところ、プロジェクトBの機能でエラーが起きるとの報告が来ました。私の環境では正しく動作していたため、何が起きたのか確認すると、担当者はプロジェクトAと共通メソッドプロジェクトのみをリコンパイルして動作検証したとのことでした。デフォルト引数を追加した場合、呼び出し側に定数が埋め込まれる形で解釈されます。そのため、リコンパイルしていないプロジェクトBでは、定数が埋め込まれておらず、引数が1つのCalcTaxIncludedPriceメソッドを呼んでしまうため、実行すると以下のようなエラーが起きてしまいます。私が動作検証した際はソリューションごとリコンパイルしており、プロジェクトBもリコンパイルされていたため、エラーに気づくことができませんでした。このようにメソッドにデフォルト引数を追加する場合は、そのメソッドの呼び出し側がリコンパイルされるかどうか注意する必要があります。必ずリコンパイルされるのであれば問題ないのですが、今回のように呼び出し側の一部はリコンパイルしないという場合はメソッドをオーバーロードして機能を追加します。
元のメソッドはオーバーロードしたメソッドを呼び出すようにして処理を一箇所にまとめましょう。こうすれば、引数が2つのメソッドと引数が1つのメソッドが存在するため、修正していないプロジェクトをリコンパイルしなくても、エラーは起きなくなります。この記事では私の実務での体験をもとにデフォルト引数の追加時の注意点と解決方法をまとめました。
呼び出し側を修正せずに機能を追加できるため、デフォルト引数はとても便利ですが、修正していないコードもリコンパイルが必要になるということは理解しておかないと、上で述べたようにアプリケーションに予期しない影響が出てくることがあるため、注意しましょう。それではまた。TomoProgオプション引数・名前付き引数 - C# によるプログラミング入門 | ++C++; // 未確認飛行 C
【C#】デフォルト引数のバージョニング問題 - 滅入るんるん


