More than 3 years have passed since last update.プログラムからブラウザを操作したい、まあ、よくある要求ですな。
そのための2018年現在の定番の方法というのが、Seleniumというやつらしいのであります。
他の人は他の言語でやっていることも多いようなのですが、私はC#でやってみることにします。ついでに、いかにもマルチプラットフォームっぽい.NET Coreで。たぶんもっと新しくても大丈夫。より古いとか、32bitとかだとだめかもしれない。
とりあえず、.NET Coreのプロジェクトを作成します。
一覧に出てこないって人は、Visual Studio Installerで「変更」ボタンを押して、下のほうにある「.NET Core クロスプラットフォーム開発」にチェックを入れてインストールしよう！
ここは用途に応じた種類を選べばいいと思うんですが、今回は手っ取り早く試したいので、「コンソール アプリ」を選びます。デフォルトでなっていると思いますが、一応、ターゲットプラットフォームが「.NET Core 2.0」になっていることを確認しておきます。こっからSeleniumとChromeDriverを入れるのですが、Visual Studioではわりかし楽ちんです。
依存関係のところを右クリックして「NuGet パッケージの管理」を出して、「Selenium」で検索します。
Selenium関係のやつがずらずらと出てくるので、「Selenium.WebDriver」と「Selenium.WebDriver.ChromeDriver」をインストールします。
最新のブラウザに対応させたいので、Seleniumもなるべく新しいのにしておきます。世間的には1とか2とかあるらしいですが、今回インストールするのは、2018年4月現在の最新版Selenium3.11.2と、ChromeDriver2.38.0.1です。
将来、Google Chrome本体がアップデートするとSeleniumが動かなくなる可能性がありますが、そのときはChromeDriverもアップデートしましょう。基本は、ChromeDriverをnewしてUrlを突っ込んで、最後にQuitします。
ChromeDriverのファイルは出力ディレクトリにコピーされるので、オブジェクト生成時にディレクトリを明示的に指定してやります。パスの通った場所に置いておくというのもありです。
(2018/5/8修正　ディレクトリの指定をカレントディレクトリからアセンブリのディレクトリに変更)普通に呼び出しただけなので、当然Chromeの画面が出てきます。
何かエラーが出てるし、Flashが無効で見た目も残念ですが、ちゃんと開けてますね。QuitじゃなくてDisposeでも終了できるからusing句で囲ってもいいとか、Urlプロパティを指定する代わりにNavigate().GoToUrlするとか、書き方はいろいろありそうです。さて、画面が出てくると、自動処理、自動テストには都合が悪いですね。
なので、起動オプションに「--headless」を付けて、UIの表示を行わないヘッドレスモードで起動します。
画面が出なくて動いてるかどうかわかんなくなるので、とりあえずタイトルも表示しときました。
ヘッドレスモードが登場した当初は「--disable-gpu」オプションも必須だったらしいのですが、今は必要ないみたいです。いらなくなりましたっていうアナウンスを見たことがないので、うちの環境でたまたまうまくいっただけかもしれませんが。この辺よく知ってる人がいたら教えてください。ちなみにエラーが出てますが、「--disable-gpu」オプションの有無とは関係なく出ているようです。さて、ここまでできれば、あとはChromeDriverオブジェクトのメソッドなりプロパティなりを使って自動処理なりテストなり好きにできるかと思うんですが、せっかくの.NET Coreなので、Windows以外の環境でもやってみたいですよね。
幸い、Windows 10には、WSL(Windows Subsystem for Linux)という便利なものがあります。
これを使ってみましょう。WSLで使えるLinuxディストリビューションはいくらかあるようですが、ここは深く考えずにUbuntuを使います。設定のどっかでWSLを有効化して再起動して、ストアアプリで「Ubuntu」を検索して入れときましょう。ずいぶん前にやったことなので、細かいことは忘れました。
ストアのレビューにはおっかないこと書いてる人がいますが、2017年9月までのレビューは全部ベータ版だったころの古いレビューなので、恐れずインストールしましょう。以下のサイトの手順に従ってインストールします。以下のサイトを参考にインストールしてみます。基本的に2つ目のサイトのコマンドでインストールできるんですが、自動更新に関してはちょっと気を付けたほうがいいかも(よくわかってない)。なお、今回はHeadlessで動かすので、X Windowとかのインストールは必要ありません。さっき作ったやつがあるのでWSLでリビルドして実行してみます。パスは自分で作った場所に応じて変更してください。やっている内容としては、プロジェクトのディレクトリに移動して、同じソースからリビルドして実行しているだけです。
プログラム本体はリビルドも必要ないようですが、ChromeドライバーがOSごとに必要になるので、そのためにリビルドが必要になるようです。
(2018/5/8修正　ディレクトリ指定方法変更に伴うコマンドのシンプル化)


