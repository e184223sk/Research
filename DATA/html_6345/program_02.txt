
class TestClass
{
    /// &lt;summary&gt;
    /// 静的デストラクタを実現するためのSingletonパターン
    /// &lt;/summary&gt;
    private sealed class Destructor
    {
        /// &lt;summary&gt;
        /// デストラクタ
        /// &lt;/summary&gt;
        ~Destructor()
        {
            // ここに終了処理を記述！！！
            OuterLib.Finalize();
        }

        /// &lt;summary&gt;
        /// Singletonパターンお決まりのprivateコンストラクタ、自クラスのインスタンス、インスタンス取得関数
        /// &lt;/summary&gt;
        private Destructor() { }
        private static Destructor instance = new Destructor();
        public static Destructor GetInstance() { return instance; }
    }
    /// &lt;summary&gt;
    /// 静的デストラクタ実現クラスのstaticな実体
    /// &lt;/summary&gt;
    static private readonly Destructor destructor = Destructor.GetInstance();
}

