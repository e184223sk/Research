More than 1 year has passed since last update.最初はCanvasからWorldSpaceにドラッグ&amp;ドロップで実現したかった・・・
が、ダメ・・・！
      CanvasはあくまでUIを配置するものであり、CanvasのUIそのものが直接的に3D空間に影響を与える目的で用意されたものでない（という予想）では、どのようにしてオブジェクトの配置をするべきなのか？
そもそも、3d空間でクリックやドラッグ&amp;ドロップしてオブジェクトを検知する方法ってどうするんだ・・・？そんな悩みを解決してくれたのがRaycastでしたCameraからクリックした箇所に向けてRayが描画されてるのがわかります。よしやってみようということで、サンプルコードを使ってフリーのAssetに対してやってみると、当たるものと当たらないものがある・・・
当たるものも、見た目通りに当たらない？そもそもRayが当たる条件はどう判定されているのか？その条件に使われるのがColliderです今回Assetストアから適当なキャラクタモデルを使わせてもらいましたが、その中には必ずしもColliderが設定されているとは限りません。
当然自身で、Colliderを設定しないと目的は達成できませんが、キャラクタは各パーツが複数組み合わせってできていて、一つ一つ手でColliderを設定していくのは面倒です。そこで今回はSA collider builderというものを利用させていただきました。ここでは紹介を省きますが、詳しくはこちらの記事が参考になると思いますので、ご参照くださいAdd Componentでこちらを足せば、自動的にこんな感じ（緑枠）のそれっぽいColliderを作ってくれます。
Mesh Colliderよりも軽いし、ボタン一つで子オブジェクトにも自動で反映されてめっちゃ簡単です。Rayが当たる箇所はキャラクターを生成するそれぞれの部品で、腕や足の部分など様々です。
やりたいことはそれをまとめる親オブジェクトを丸ごと動かすことですが、Assetを使っている以上、
どのような階層関係になっているかはasset次第です。そのため、指定のcomponentをもったobjectを再帰的に探すことにしました。GameObjectやTransoformなどに対して拡張メソッドを定義することができます。
今回は以下のようなコードを用意して、GameObjectおよびTransformの親オブジェクトを再帰的に調べるコードを作りました。
ついでに子を持っているか、指定componentをもっているか、調べるメソッドも追加しました。駒の配置および入れ替えを行うソースコードです
前提条件として駒を置くタイルオブジェクトにはTileというタグを付与した状態で、
キャラクタのrootオブジェクトにはPieceAbstractという(クラスを継承した)componentを付与しています。動作は以下のようになります。
参考になれば幸いです。
また、至らない点が多々あると思いますので、もっといい方法などぜひコメントお願いします。


