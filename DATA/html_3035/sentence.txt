More than 1 year has passed since last update..NET Coreを始めたのですが、理解が浅かったのでこまめにまとめたいと思います。
appsettings.jsonの扱いとLoggerの設定についてまとめます。$dotnet new webapp -o SampleAppを実行してプロジェクトを作成します。
以下のようなappsettings.jsonとappsettings.Development.jsonが生成されているはずです。以降では、appsettings.jsonやappsettings.Environment.jsonの設定がどのように反映されているかという話をしていきます。.NET Coreでのランタイム環境は環境変数ASPNETCORE_ENVIRONMENTを利用します。
例えば、$ASPNETCORE_ENVIRONMENT=Development dotnet runとして実行した場合、appsettings.jsonの設定値を読み込み、appsettings.Development.jsonの設定で上書きをします。
当然、$ASPNETCORE_ENVIRONMENT=Production dotnet runとして実行した場合、appsettings.Development.jsonの設定値ではなく、appsettings.Production.jsonの設定を使用します。Program.csではWebHost.CreateDefaultBuilder(args)を実行していますが、手動で設定する場合は以下のようなコードになります。ConfigureAppConfigurationの部分のようにappsettings.jsonが読み込まれているため、ランタイム環境に応じた設定が適用されています。そのため、appsettings.jsonでは各ランタイム環境で共通の設定を記載し、固有の設定はappsettings.Environment.jsonに行うことになります。上記コードのConfigureLoggingを抜粋すると、AddConsole()やAddDebug()が実行されています。
これにより、通常出力とデバック出力をそれぞれ設定することができます。
例えば、appsettings.jsonを以下のような設定にします。Loglevelに関しては以下のようになっており、設定した値以降のログが全て表示されますこの場合は、通常出力ではInformationからログが表示され、デバッグ出力ではDebugからログが表示されます。ConsoleとDebugの設定は任意で、設定しない場合、LogLevelの設定が適用されます。以前に色々検証したコードを久しぶりに動かしたら、コンソールにログが表示されず、あれこれ悩んでしまいました。まとめてみるとすごーく当たり前のことだったと認識しました😀 


