More than 1 year has passed since last update.ソートアルゴリズムの学習として、12種のソートアルゴリズムを実装して可視化してみました。Unityにはあまり関係がなさそうな話題ですが、Unity上で作ったのでUnityタグをつけます。バブルソートのアルゴリズムは以下のような感じです。シェーカーソートはバブルソートを改良したソートアルゴリズムです。
バブルソートでは1方向にスキャンを行っていたところを、往復してスキャンするようにしたものです。コムソートはバブルソートを改良したソートアルゴリズムです。 アルゴリズムは以下になります。
1. データ数n を 1.3 で割った整数部分を間隔 h とします。
2. i を 0 -&gt; n-h-1 でfor文で回します。
3. i番目と i+h 番目を比べたときに順序が逆になっていた場合入れ替えます。
4. 3.が完了したら、h を 1.3 で割った整数部分を新たなhとして再び2.と3.を行います。
5. 4.が終了したときに　h が 1になっていた場合、そこでソート完了です。配列の要素を順番に見ていき、要素を最大値と入れ替えていくことで整列を行います要素を適切な場所へ挿入することで整列を行います。大雑把なアルゴリズムは以下にようになります。
1. 配列からピボットとして要素一つ選び、ピボットより左側のすべての要素は小さく、右側はピボットより大きくなるように互いを入れ替えていきます。
2. ピボットの左側から新たなピボットを選び、1.を行います。 ピボットの右側からも新たなピボットを選び同様の操作を行いソートします。
3. これらを繰り返すことでソートを行います。要素の１の位でバケットソートをし、次に１０の位でバケットソート、その次は１００の位で...
といった感じに、桁に対応する数字でバケツソートを行うソートアルゴリズムです。メモリ使用量がバケツソートよりも少なくて済みます。ヒープ構造の特徴は以下になります。
1. 二分木の根には必ず最大値がくる。
2. 二分木の各親子関係の親ノードには必ず最大値がくる筆者はソートアルゴリズムについては疎いため、本記事には誤りがある可能性があります。
誤りを見つけた場合は教えていただけると助かります。ソート - Wikipedia
https://ja.wikipedia.org/wiki/ソート


