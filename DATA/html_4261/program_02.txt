
// テストコード（コンソールアプリケーション）
class TestProgram
{

    // テスト用の納期検索サービス（モック）
    class DeliveryScheduleSearchSvcForTest : IDeliveryScheduleSearchSvc
    {
        // 検索条件
        public DeliveryScheduleSearchConditionModel Cond;

        // 検索処理
        public DeliveryScheduleSearchResultModel Search(DeliveryScheduleSearchConditionModel cond)
        {
            this.Cond = cond;  // 引数を保存（テストコードで内容を検証できるように）

            // 都合のいいようにデータを作って返却する
            return new DeliveryScheduleSearchResultModel
            {
                DeliveryScheduleDate = new DateTime(2018, 12, 7)
            };
        }
    }

    static void Main(string[] args)
    {
        // 初期化処理（フレームワークやデータベースの初期化など）

        // 納期検索サービスのモックを作る
        var mock = new DeliveryScheduleSearchSvcForTest();

        // 商品受注サービスの入力データ
        var input = new ReceiveOrderInputModel
        {
            // 受注内容をセット
        };

        // 商品受注サービスにモックを渡してインスタンス生成
        var targetSvc = new ReceiveOrderSvc(mock);

        // 商品受注サービスを呼び出す
        var result = targetSvc.Exec(input);

        // 結果を検証
        AssertEqual(ReceiveSatus.SUCCESS, result.Status);
        AssertEqual(new DateTime(2018, 12, 7), result.DeliveryScheduleDate);
        // 以下、result の内容を検証する
    }

    // 検証用のメソッド（あくまで簡易な実装例。本当はもっと考慮すべきことがある）
    static void AssertEqual(object expected, object actual)
    {
        if (!object.Equals(expected, actual)) throw new Exception($"Assertion error! expected: {expected}, but actually: {actual}");
    }
}

