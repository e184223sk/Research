More than 3 years have passed since last update.クラス内に宣言される変数のことです。public/protectedであればインスタンスから直接呼び出すことが可能です。基本的には非公開にしてプロパティから操作します。プロパティから操作を行うフィールドを「バッキングストア」又は「バッキングフィールド」と言います。バッキングフィールドへは、外部からアクセスすることはできません。フィールドに格納されている値(データ)を、読み取ったり書き込んだりするために設定するための手段を指します。プロパティは、クラス外部から見た時は、メンバー変数のように振る舞い、クラス内部から見た時はメソッドのように振る舞います。プロパティを構成するgetter/setterをアクセサと呼びます。一般的には、それぞれgetアクセサ(読み取り時実行)、setアクセサ(書き込み時実行)と呼ばれています。まず第一に、オブジェクト指向言語では、"public"な変数はカプセル化を破壊するため、使用が推奨されていません。ここでプロパティを使用することにより、フィールド自体の独立性が高くなって、仕様変更に強くなります。では、実際どのような場面で必要になるのか、以下を参考にしてみて下さい。また、VisualStudioのようなIDEを使っている場合には、コードレンズなどのツールサポートの恩恵を受けやすいです。プロパティはgetアクセサとsetアクセサの２つで構成されています。この２つはデフォルトで"public"扱いとなっています。ここで、外部から見た時に読み取り(又は書き込み)専用とするためには、どちらか一方のアクセサが持つアクセス修飾子を"private"か"protected"にする必要があります。アクセス修飾子を変更できるのは、どちらか一方、という部分に注意して下さい。ここで、プロパティを使用する際には以下の事柄に注意して下さい。この自動プロパティ機能は「C#3.0」から実装されました。どういったものか早速以下のコードを眺めて見て下さい。この段階で、アクセサの実装部分を省略して書けるようになりました。ただし、フィールドの初期化を行うためには結局元来のような書き方をしたり、コンストラクターに初期化設定処理を書く必要があったのです。これらのデメリットは後述するC#6.0から解消されました。C#6.0で、C#3.0で問題になっていた点が見事克服されました。以下のコードをみて下さい。なんとプロパティに直接代入をするような形で初期化が行われています。しかも"private set;"が消えています！外部からも内部からも読み取り専用である時、「setアクセサは"private"である」ことを前提に省略することができます。この省略機能は、setアクセサにのみ適用可能という部分に注意して下さい。getアクセサのみとなったプロパティは、コンパイラによって"readonlyフィールド"が生成されるので、readonlyと同じ扱いとなります。もし内部からは変更を行える状態にしたい場合は、省略機能を使用せずに、"private set;"を記述してプロパティを作成して下さい。書き込み専用のプロパティを作成したい場合は、以下のようなプロパティを作成して下さい。自動実装プロパティを使用した場合、コンパイラはこっそりと内部で、プロパティのアクセサからのみ、アクセスが可能なバッキングフィールドを生成します。そこにデータの保存を行なっています。プロパティは"virtual"をつけて継承を行い、"override"をすることも可能です。さらに、この他にも、インターフェースにプロパティを定義することも可能です。"abstract"として宣言することもできます。ただし、インターフェース時にsetアクセサが"private(アクセス不可)である"として省略されていた場合、インターフェースを実装するクラスでは、setアクセサの修飾子を"private"または"protected"に変更したり、setを実装して"public(アクセス可能)"とすることができてしまいます。注意して下さい。継承先のプロパティに"new"修飾子をつけたり、"Sealed"にしたり、などなどが可能なので是非活用してみて下さい。ただし、アクセサしか持たないクラスはあまり推奨されていません。引数を取るプロパティとしてインデクサという機能もあります。これはまた別の機会に調べて、まとめられたらなと思います。先ずはここまで読んで頂いて有難うございました。現在UnityではC#6までは対応いるので、今回紹介した機能は使用することができます。個人的には、必ず使わなくてはいけないものではなく、固有の処理を含んでいたり、読み取り専用や書き込み専用にしたい場合にはプロパティを使用するといいのではないかなァと感想です。私自身は結構、引数などでデータの受け渡しを行っているので、これまでにプロパティの恩恵を受けることは多くはなかったのですが、これを機にうまい使い方を模索してみたいと思います。


