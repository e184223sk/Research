More than 3 years have passed since last update.OpenTweenを手探ってみた#1の続きです。フォローフォロワーの変化を記録する機能の実装を試みます。起動時に毎回フォローフォロワーを記録しつつ前回からの変化を調べ、変化があった場合はその時の日付と一緒に変化を記録することにします。C#は簡単にウィンドウの作成ができることを知ったので、ボタンを押したらフォローフォロワーの変化が確認できるウィンドウが出るようにします。まずフォロワーチェックを実装します。フォロワーのIDを取得して記録します。いかにもTwitteAPIを使う感じがするのでAPIについて調べてみます。APIに関してはこちらのサイト( https://syncer.jp/twitter-api-matome )が非常に参考になりました。TwitterAPIのfollowers/idsというエンドポイントでフォロワーのIDが取得できるということなので、「followers/ids」で全体に検索をかけるとTwitterApi.csにFollowersIdsというタスクが見つかります。このタスクを右クリックからFind All Referencesで参照元を調べると、Twitter.csにRefreshFollowerIdsというタスクが見つかります。ここにブレークポイントを立てて実行すると起動時に引っかかるので、起動時にフォロワーのIDを取得しているところだと推測できます。ここにフォロワーIDをテキストで書き出すような処理と、前回起動時に書き出したフォロワーIDからの変化を調べる処理を加えます。newFollowersIdsに取得したフォロワーIDが記録されています。これに対してoldFollowersIdsというハッシュセットを作り、前回起動時のフォロワーIDをテキストから読み出します。その後テキストをnewFollowersIdsの内容で上書きしつつ、newFollowersIdsにもoldFollowersIdsにも含まれるIDを取り除きます。これでnewFollowersIdsには前回から増えたフォロワーだけが、oldFollowersIdsには前回から減ったフォロワーだけが記録されることになりましたが、まだそれを書き出すような処理は加えていません。ここでのユーザーのIDは@から始まるアルファベット列ではなく、ユーザーごとに固有の数列です。このIDを人が見ても何も情報を得られないので、名前や@以下のアルファベット列(スクリーンネーム)を取得してからそれを記録するようにしたいと思います。TwitterAPIを調べると、users/lookupというエンドポイントでIDからユーザー情報を取得できることが分かったので全体に検索をかけてみましたが、それらしいものは見つかりません。このエンドポイントはOpenTweenでは使われていないようです。ということで先ほど見つけたTwitteApi.csにusers/lookupを使うタスクを追加します。先ほどのサイトを参考にしつつ適当にほかのタスクをパクります。これを使ってユーザー情報を取得しそれを記録するようにします。同時に日付も記録します。RefreshFollowerIdsの末尾に次のような変更を加えます。users/lookupは一度に100件までしか扱えないので、変化のあったIDが100を超える場合は100ずつ区切ってから投げるようにしてあります。また、ユーザーIDからユーザー情報が得られなかった場合(主にユーザーが削除されていた場合)はユーザーIDのみを表示するようにしてあります。これで実行すると、OpenTween/bin/Debugの中にフォロワーIDとその変化を記録しているテキストファイルができていることが確認できます。まずウィンドウを作成します。Visual StudioのソリューションエクスプローラーでOpenTweenのところを右クリックし、AddからWindows Formを選択します。ファイル名はFollowercheck.csとします。次にソリューションエクスプローラーでTween.csを右クリックしてOpenするとOpenTweenのGUIが表示されます。「その他の機能」をクリックして「片思いユーザーリスト取得」の下を右クリックし、MenuItemをInsertします。「toolStripMenuItem1」と出ているところをクリックして「フォロワーチェック」とします。「フォロワーチェック」をダブルクリックすると「フォロワーチェック」をクリックしたときに呼ばれる関数に飛ぶので、ここにFollowercheck.csのウィンドウを表示する処理を書きます。これで実行すると「フォロワーチェック」のボタンからウィンドウが表示されることが確認できます。Followercheck.csのウィンドウをいじっていきます。体裁を整えるためにPropertiesウィンドウでTextをフォロワーチェックに、FormBorderStyleをFixedDialogに、MaximizeBoxとMinimizeBoxをFalseにします。フォロワーの変化を表示するのにTreeViewを用いることにします。TreeViewを用いるとこういう感じで表示できます。

ToolboxからTreeViewをドラッグアンドドロップしてウィンドウに追加し、いい感じに配置します。フォロワーチェックのウィンドウをダブルクリックするとFollowercheck.cs内のFollowercheck_Loadというウィンドウが開いたときに呼ばれる関数に飛びます。ここにフォロワーの変化をテキストから読み出してTreeViewに表示する処理を書きます。ファイルを順番に見ていって日付があったらそれを親ノードとして設定、アカウントの変化をその日付の子ノードとして追加するようになっています。ファイルの読み込みのところで怒られるので、Followercheck.csの先頭にを追加しました。これでフォロワーの変化が追えるようになりました。次にフォローチェックを実装します。APIのfriends/idsというエンドポイントでフォローしている人のIDを取得できるらしいので、「friends/ids」で全体に検索をかけてみますがそれらしいところは見つかりません。どうやら使われていないようです。ということなのでTwitterApi.csにfriends/idsを使うタスクを追加します。このタスクを使っているRefreshFollowerIdsに相当するものもないのでそれも作ります。Twitter.csに以下のRefreshFriendIdsを追加します。やっていることはRefreshFollowerIdsと同じでフォローIDを記録しつつ前回からの変化を調べて変化があればそれも記録します。当然このタスクを作っただけでは起動時に呼ばれたりはしません。RefreshFollowerIdsがどうやって起動時に呼ばれているか調べます。全体に「RefreshFollowerIds」で検索をかけるとTween.csでRefreshFollowerIdsAsyncというタスクが見つかります。さらにこれを参照しているという部分が見つかります。これはTweenMainのウィンドウが表示されるときに、loadTasksというリストに実行されるべきタスクをまとめているように見えます。ということで、まずRefreshFollowerIdsAsyncをパクってRefreshFriendIdsAsyncを作ります。必要そうな部分だけ拾うとこんな感じになります。これをloadTasksに追加されるようにします。TweenMain_Shownのの最後にを追加します。これで実行すると、OpenTween/bin/Debugの中にフォローIDとその変化を記録しているテキストファイルができていることが確認できます。ウィンドウに表示するのはフォロワーチェックと全く同様です。Friendcheck.csというWindows Formを作り、OpenTweenのGUIにフォローチェックというボタンを追加してFriendcheck.csのウィンドウが呼ばれるようにします。Friendcheck.csのウィンドウにTreeViewを追加してテキストに記録されたIDの変化を表示すれば完成です。


