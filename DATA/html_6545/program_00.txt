using UnityEngine;
using UnityEngine.SceneManagement;　//SceneManager.LoadSceneの使用に必要
using System.Collections;

public class B_d_ac3 : MonoBehaviour
{

    private float speed = 0.4f;     //移動速度を格納するための変数
    private float fly = 0.4f;　　   //上昇と下降速度を格納するための変数
    private float f_t = 1;　　　    //移動＋上昇下降速度を格納するための変数
    private float torque = 0.2f;   //回転速度を格納するための変数
    private int[] i = new int[2];  //進行許可をするための判定に使用

    private float x = 0; //オブジェクトの座標のx軸に関する情報を格納
    private float y = 0; //同様にy軸
    private float z = 0; //同様にz軸

    public float y_t = 0;

    private GameObject d; //オブジェクトの情報を格納
    private Rigidbody rb; //リキッドボディの情報を格納
    public Vector3 btf;   //オブジェクトの座標の情報を格納するための変数

    void Start()
    {
        d = GameObject.Find("Butterfly"); //使用するオブジェクトを探索
        rb = d.GetComponent&lt;Rigidbody&gt;(); //rbにリキッドボディを格納
　　
　　    fly = f_save.f_sd(); //オプション画面で設定した上昇と下降速度を格納
        if (fly == null || fly == 0) fly = 0.4f; //値を設定していなかった場合デフォルトの値を格納
        speed = f_save.f_sd(); //オプション画面で設定した移動速度を格納
        if (speed == null || speed == 0) speed = 0.4f; //値を設定していなかった場合デフォルトの値を格納
        f_t = t_save.t_sd();          //オプション画面で設定した移動＋上昇下降速度を格納
        if (f_t != null &amp;&amp; f_t != 0) //値を設定していた場合設定した値を適用
        {
             speed = speed * f_t;
             fly = fly * f_t;
         }

        rb.maxAngularVelocity = 2; //回転速度の上限を設定
        i[0] = 0; //値の初期化
        i[1] = 0; //値の初期化
    }


    void Update()
    {
        float y_k = 0;
        y_t = rb.transform.localEulerAngles.y * Mathf.Deg2Rad; //オブジェクトのラジアン角度取得
        if (y_t &gt;= 0 &amp;&amp; y_t &lt;= 90) //オブジェクトの角度が0から90の場合
        {
            btf.x = Mathf.Cos(y_t);      //btfのxに角度のコサインを格納
            btf.y = -1 * Mathf.Sin(y_t); //btfのyに角度のサインを格納

        }
        else if (y_t &gt; 90 &amp;&amp; y_t &lt;= 180) //オブジェクトの角度が90より上から180の場合
        {
            y_k = y_t - 90;
            btf.x = -1 * Mathf.Sin(y_t);
            btf.y = Mathf.Cos(y_t);
        }
        else if (y_t &gt; 180 &amp;&amp; y_t &lt; 270) //オブジェクトの角度が180より上から270の場合
        {
            y_k = y_t - 180;
            btf.x = Mathf.Cos(y_t);
            btf.y = -1 * Mathf.Sin(y_t);
        }
        else if (y_t &gt;= 270 &amp;&amp; y_t &lt;= 360) //オブジェクトの角度が270より上から360の場合
        {
            y_k = y_t - 270;
            btf.x = -1 * Mathf.Sin(y_t);
            btf.y = Mathf.Cos(y_t);
        }
        if (i[0] == 1 &amp;&amp; i[1] == 1)
        { //キーが一度押されていない状態になりかつ移動ボタンが押された場合
            i[0] = 0;
            bot_imp(); //回転の停止
        }
    }

    void FixedUpdate() //物理演算でキャラクターが動く度に呼ばれる処理を設定
    {

        x = Input.GetAxis("Vertical");
        y = Input.GetAxis("Horizontal");
        z = Input.GetAxis("Jump"); //上昇　スペース　下降　ｃ
        if (Input.anyKey)
        {
            rb.AddTorque(0, y * torque, 0, ForceMode.Impulse); //オブジェクトの回転
            rb.AddForce(0, z * fly, 0, ForceMode.Impulse);    //オブジェクトの上昇と下降
            i[1] = 1;//オブジェクトが現在移動中と判定

            if (btf.x &gt; 1.0 || btf.x &lt; -1.0) btf.x = 0; //角度情報が正規の値でないなら0
            if (btf.y &gt; 1.0 || btf.y &lt; -1.0) btf.y = 0; //角度情報が正規の値でないなら0
            rb.AddForce(btf.x * x * speed, 0, btf.y * x * speed, ForceMode.Impulse); //オブジェクトの移動
        }
        if (Input.GetKey(KeyCode.M))
        { //Mキーを押した場合
            SceneManager.LoadScene("キーコンフィグ"); //別のシーンに移動
        }
        if (Input.GetKey(KeyCode.N))
        { //Nキーを押した場合
            SceneManager.LoadScene("example_1");
        }

        else
        {
            i[0] = 1; //何のキーも押されていないことを判定
        }

    }
    void bot_imp()
    {
        rb.angularVelocity = Vector3.zero; //回転運動の停止
        i[1] = 0;
    }
}


