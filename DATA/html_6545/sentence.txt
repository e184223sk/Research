More than 1 year has passed since last update.VR対応の昆虫の動きを体験できるシミュレータをUnityを使用して制作をしました。
C#でスクリプトを書き、物理シミュレーションで昆虫に力を加えて動かしました。
ここで体験する昆虫は人間ができない動作をするものの方がシミュレータとして面白いと思ったので、人間より小さく、人間ができない動作である飛翔が可能な昆虫として蝶を選択しました。Oculus Riftを使うためにパソコンにOculus Utilitiesをインストールしたり、アカウントを作ったりしました。ここでパソコンがOculusを認識できるようになります。
UnityでPlayer SettingsのOther Settingsにある「Virtual Reality Supported」にチェックを入れればOculus Riftのレンズに自分が作成した3D空間が映ります。昆虫体験シミュレータ
実行ファイルとBX_d_Dataの両方をダウンロードして実行してください。
BX_d_DataはGoogledriveでダウンロードすると圧縮されているので解凍してください。動作.gif
右上に小さく映っている映像が実際に動かしたときに体験する視点で、それ以外は昆虫がどの様な動作をしているか三人称視点で見た映像です。
このようにスライダーでMoveSpeed、TimeSpeed、FlyingPowerの値を設定してDecisiveをクリックします。設定画面.gif
Decisiveをクリックするとフィールドに移動し、好きなように動かせます。
先ほどよりもMoveSpeedに高い値を設定すると速く移動します。
同様にFlyingPowerに高い値を設定すると速く上昇、下降します。
全部の値を最高値にするとかなりの速さで移動します。
VRの場合確実に酔うと思います。フィールドの画面の時にキーボードのmキーを押すとオプション画面に移動します。マウスでそれぞれのボタンを押してスライダーにより蝶の移動や上昇と下降の速度を自由に変更できます。Decisiveを押すことで設定を適用し、シミュレーション画面へ移動します。蝶や背景の森の3DCGはAseetStoreで配布されているフリー素材を使用し、スクリプトはC#で書き、Oculus(DK1)でVRで体験できるようにしました。物理エンジンやスクリプトを用いて重力や慣性など現実に近い環境を再現しました。
背景は現実に蝶が存在するであろう森を背景に設定しました。
昆虫視点にするために生物の視点をメインカメラに設定して昆虫の動き自由に操作できるようにしました。
さらに昆虫の移動速度や時間の流れの速さなどをスクリプトで設定し、体験者が任意に操作できるようにしました。森の背景はパソコンのグラフィックボードに負荷をかけるので動きがカクカクしてしまう場合があります。
その場合フィールドの画面でnキーを押すと背景を森から簡素で比較的に負荷が軽い背景に変わるように設定してるのでそちらのフィールドを使用してください。蝶を動かすなら羽ばたくモーションも必要だと思いAseetStoreで無料のモーションを探しましたが見つかりませんでした。
「VRなら一人称視点だしモーションいらないんじゃ？」という事実にこの時の自分は気づきませんでした。 
そこで自分がインポートした蝶の3DモデルのAseetにモーションが付属されていたのを発見しました。
しかしこれを使用しても決まった位置で羽ばたいているだけで自分の思い通りに動かせませんでした。
ここでBlenderでAseetを読み込んで羽のモーションの座標と角度をフレームごとに抜き出しました。
この時フリーの変換ツールを使ってファイルをBlenderが読み込める形式に変換しました。自分のスクリプトで羽のパーツの座標と角度をキー入力が検知される毎に表でまとめた値をループするようにしました。実行結果.gif左羽にスクリプトを適用した瞬間にものすごい速さで空中分解して飛んでいきました。失敗です。蝶のオブジェクトにRigidbodyを適用し、RigidbodyのUse Gravityにチェックを入れて蝶の3Dモデルに重力を設定しました。
ここで蝶のオブジェクトと地面のオブジェクトにColliderを設定し、[Inspector]タブでRigidbodyのCollision DetectionをContinuosに変えます。
この処理をしないと速い速度での衝突検知の処理が間に合わなくなりすり抜け現象が発生してしまいます。B_d_ac2.cの前に書いたtransform.Translateやtransform.Rotateを使用した座標指定で移動するスクリプトです。今見ると変数が全部publicだったりInputManagerを使用してない等の色々な無駄が見受けられますが、今回特に問題なのはtransformによる移動だと移動したときに地面のColliderの衝突判定をすり抜けて移動してしまうことです。
さらにtransformによる移動はオブジェクトの質量を考慮しない移動になるのでシミュレーションとして不適切だと判断しAddForce による移動方法にしました。AddForceのForceMode.Impulseは質量を考慮した計算を行って物体に力を加えるのでシミュレータとしてこちらを使用した方が現実に近い環境を再現できると思い、他にも衝突判定のすり抜けが起きないという利点もあったためオブジェクトの移動にAddForceを使用しました。しかしここで角度を変えても進行方向が変わらないという問題が発生しました。
自分は現在オブジェクトが向いている方向に進行するスクリプトを欲していたのでこのままでは失敗です。
前進、後退の入力をしているのに蟹歩きみたいになってます。そこで解決策として現在オブジェクトが向いている角度の情報を取得し、コサイン成分とサイン成分に分割してAddForceで力を加えることにしました。三角関数を習っててよかったと思いました。まとめるとこんな感じです。
オプション画面は自分が以前制作したゲームのキーコンフィグを流用して作りました。
こうして一度作った物を使い回しできるのもUnityのいいところだと思います。VR対応のアプリケーションを作るのはとても大変だしお金がかかりそうだと思っていましたが、Unityを使えば簡単なものなら無料で作ることができました。　Oculus(HMD)を買わないとデバッグできないけど
次に作る時は風や雨などの自然現象を実装してよりリアリティーあふれるシミュレータを作りたいと思います。幾つかのGifが表示されなくなってしまい原因がわからないので、不格好ですが、リンクを張る形で見れるようにしました。
恐らくサイズ制限が原因だと思いますが(10MB以上のファイルはアップロードできない？)
確証がないので、ご存知の方がいらっしゃれば、教えて頂けると幸いです。


