More than 3 years have passed since last update.Windows PCでBLEデバイスとGATTなるプロトコルで通信する必要性があったので方法を調べてみた．BLE自体については「【連載】Bluetooth LE (1) Bluetooth Low Energy の基礎」に詳しく書いてあったので参照した．どうやら，キャラクタリスティックと呼ばれるレジスタめいたものとそれを識別するアドレスみたいなのが用意されていて，そこを読んだり書いたりするらしい．とりあえず，手元のAndroidにNordicのBLEモニタアプリを入れて挙動を確認すると，理解しやすかった．WindowsでのBLEのサポートを使うには，MetroアプリケーションようのAPIであるところのWindowsランタイム(WinRT?)を使うらしい．
MSDNのレファレンスを見てみると，殆どがデバイスやキャラクタリスティックを検索するためのクラスで，実際に読んだり書いたりするGattCharacteristicはやたらメソッドが少ないようで簡単そうである．
ちなみに，C#からWinRT APIを使う場合，VisualStudioのプロジェクトファイルを外部のテキストエディタで編集したりコンポーネントへの参照を追加したりする必要があるらしい．やりかたは「デスクトップ アプリからのWinRT API利用」を参照のこと．今回，通信したかった相手はNordicチップ上のUARTサービスだったので，サービスやキャラクタリスティックのUIDはNordicのToolboxの定義ファイルから拝借した．
試しに，UARTサービスへのターミナルを書いてみた．ソース内での通信手順は以下の通り．
1. GattDeviceService.GetDeviceSelectorFromUuidを使って目的のUIDを持つサービスを検索するための検索条件(selector)を作成．
2. DeviceInformation.FindAllAsyncを使って検索条件に合致するサービスを持っているデバイスの一覧(collection)を取得．
2. GattDeviceService.FromIdAsyncでデバイス内のサービスを取得．
3. GetCharacteristicsメソッドを使ってサービスの中から目的のキャラクタリスティックの一覧を取得．今回はどっちも一つしか該当しないことがわかってるので，先頭の要素だけを利用した．
4. 受信用のキャラクタリスティックに受信時のコールバックメソッドを登録．
5. WriteClientCharacteristicConfigurationDescriptorAsync(GattClientCharacteristicConfigurationDescriptorValue.Notify)でデバイス→PCのデータが出来た時にPCへ通知するように設定．
6. WriteValueAsyncを使って書き込み用のキャラクタリスティックに書き込み．最終的なコードは結構短めになったがいくつか詰まった点があったのでまとめておく．GATTによる通信はキャラクタリスティックへの書き込みや読み込みを通して行うため，定期的に受信を行うポーリングでは，デバイス→PCの通信で同じ内容が送られてきているのか新しい内容が送られてきていないのかが判別出来ない．
そこで，上記のソースのようにキャラクタリスティックの変更通知を有効にすることで，デバイス→PCの新しい内容が来たときにコールバックメソッドを呼ぶことが出来るようになる．これにより，同じ内容が2度送信された際にきちんと処理出来るようになる．MSDNのデモコードでは，PC→デバイスの通信でGattReliableWriteTransactionを使用している．これは，エラーチェック等の機能を持つリッチな通信らしくイマイチ速度が出ないらしい．今回，利用したNordicのUARTサービスはGattReliableWriteTransactionではなくエラーチェック等のない非同期書き込み(WriteValueAsync)を利用していた．通信自体にエラーチェック等が無いためデータレートが稼げるらしいが，エラーチェック等を自前で実装する必要がありそうだ．（実際，高頻度でデバイスに向かって送信を行うとデータの読み落としが発生した．）おそらく，これはBLEの問題と言うよりC#に僕が慣れていないことによるものだが受信送信共に，メソッドはバイト列のやりとりにIBufferクラスを利用していた．今回のターミナルソフトのように平文ASCIIを送受信したい場合System.Text.Encoding.ASCIIクラスを使って文字列とバイト列を変換する必要があった．おそらく様々な文字コードに対応するためっぽいが，ASCIIの処理ぐらいもう少し簡潔に出来ないものだろうか・・・とりあえずWindows上のC#からBLEデバイスと通信できたので当初の目的は達成できた．が，まだまだ需要が少ないせいかネット上の情報も少ないしもう少しとっとと流行ってほしい・・・（ポケGoPlusとかもBLEだし！）
個人的には慣れ親しんだPythonからWinRTを呼べればうれしいが，Async/Awaitなんかの非同期処理もあるし結構ハードルが高そう・・・とは言うものの，3.5で導入されたし近いうちに使えるようになったりするのかな・・・?


