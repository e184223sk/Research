More than 5 years have passed since last update.Xamarin.Mobileを利用したカメラアプリを試作しました。
あまり自信はないですが、晒します。詳細は以前書いたこちらの記事を参照してください。
・Mac + Xamarin Studio
・プロジェクト構成はPCL
・Xaml不使用
・iOS + Android
・XcodeとAndroidStudioは導入済み・ボタン押下 → カメラ起動 → 写真保存 → 写真表示
・なるべくコードは共通化カメラを利用するため、基本的には実機での動作確認を行います。
Androidは、端末のUSBデバッグがONであれば動くが、iOSは結構大変。。下記リンクで、(元、になるのだろうか)Xamarin正規販売代理店のエクセルソフトの方が丁寧に説明してくださっています。
http://ytabuchi.hatenablog.com/entry/2015/09/18/191258
また、Qiitaにこのような記事があり、助けられました。
Xamarin StudioでiOSの無料実機テストするまでのメモ書き
デフォルトで、Xamarinでプロジェクト作成するときに、Bundle Identifierはすべて小文字に揃えられます。
androidだと普通小文字ですし、それが妥当...なのでしょう...。
とにかく、app.imlで、xcodeに登録したBundle Identifierに合わせる(大文字・小文字)とうまく行きます。そんなわけで今回は、各プラットフォームのComponentsにXamarin.Mobileを突っ込みます。
（NuGetパッケージにMedia Pluginというのがあり、「これを使えば共有部分だけで完結するんじゃね？」と考えていたんですが、
iOSだと落ちちゃいました。この失敗するまでの経緯もいつか記事に残そうかと思います。
うまく行っている方がいましたら、ご教示ください。。。）
2. "Xamarin.Mobile"で検索
3. インストール以上の操作をAndroidとiOSの両方で行ってください。参考にしたのは、下記のリンクです
・Xamarin.Mobile
サンプルが載っているが、わかりづらい...・Camera access with Xamarin.Forms (stack overfslow)
共通UIを使いつつ、イベントを各プラットフォームで捌く方法の説明。
Xamarin.Mobileを不使用。{プロジェクト名}.csは、下記の様にします。
(今回はCameraTest3というプロジェクト名です)・置くのはButtonとImage
・ButtonインスタンスにCommandを設定
・CommandのアクションはtakePicとしている部分(空)
・画像表示のメソッドを用意AndroidManifestの"WriteExternalStorage"と"Camera"にチェックを入れるアクティビティ・Xamarin.Mediaをusingし、MediaPickerインスタンスを作成。
・MediaPickerで、カメラが利用可能か確認。
・global::Xamarin.Forms.Forms.Init(this, bundle);は、appをインスタンス化する前に呼ぶ
・Appをインスタンス化
・カメラのUI(というか、intent)を呼び出すアクションを、AppのCommandに登録
・撮影結果を受け取るリスナー(OnActivityResult)で、画像を保存し、画像表示メソッド呼び出し
・Xamarin.Mobileサンプルの下の方に近い。(上の方は動かない)・delegateに処理を書く
・takePicコマンドに追加するアクションは非同期
・Picker利用はAndroidと同様だが、利用するメソッドはTakePhotoAsync


