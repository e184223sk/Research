

// IsAs

namespace isasoperators3
{
    class Student
    {
        public int stuNo { get; set; }
        public string Name { get; set; }
        public int Age { get; set; }

    }
    // Sample Employee Class
    class Employee
    {
        public int EmpNo { get; set; }
        public string Name { get; set; }
        public int Age { get; set; }
        public double Salary { get; set; }

    }
    class Program
    {

        static void Main(string[] args)
        {
            Student stuObj = new Student();
            stuObj.stuNo = 1;
            stuObj.Name = "Siva";
            stuObj.Age = 15;

            Employee EMPobj = new Employee();
            EMPobj.EmpNo = 20;
            EMPobj.Name = "Rajesh";
            EMPobj.Salary = 100000;
            EMPobj.Age = 25;

            // Is operator

            // Check Employee EMPobj is Student Type

            bool isStudent = (EMPobj is Student);
            // Student=(識別子EMPobjはNewインスタンスStudentと同じです)
            // 前者はユーザー定義型Employee属性、後者はユーザー定義型Student属性なので偽
            Console.WriteLine($"Empobj is a Student ?: {isStudent.ToString()}");// False
            //isStudent.ToString()で確認

            // Check Student stuObj is Student Typoe
            isStudent = (stuObj is Student);
            // Student=(識別子stiObjはNewインスタンスStudentと同じです)
            // 前者後者共にユーザー定義型Student属性なので真
            Console.WriteLine($"Stuobj is a Student ?: { isStudent.ToString()}");//True

            stuObj = null;
            // Check  null object Type
            isStudent = (stuObj is Student);
            // Student=(識別子stuObjはユーザー定義型Studentと同じです)
            // 前者後者共にユーザー定義型Student属性なので真
            // だが、stuObj=null;宣言によりnull(何にも属さない無効な値)になったので偽
            Console.WriteLine($"Stuobj(null) is a Student ?: {isStudent.ToString()}");
            Console.ReadLine();
        }
    }
}



