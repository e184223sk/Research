

class ConvertToBinary
{
    static void Main()
    {
        int r = 50; // 2進数では 5=00000101
        Console.WriteLine(!true);// False
        Console.WriteLine(!false);// True

        Console.WriteLine((int)~r);// -51

        int number = 26, result;
        result = ~number;
        Console.WriteLine($"~{number} = {(long)result}");
        // ~26=-27 

        // ~はビットごとの補数演算を実行し、各ビットを反転
        // キャスト(byte8)ビットを反転 26→~00011010 = 11100101(2進数)←229(10進数)
        // キャスト(int64)ビットを反転 26→~00011010 = 11111111111111111111111111100110(2進数)←-26(10進数)
        // 補数表現     -(00011010 + 1) = -00011011 = -27
        // 2進数は2で割って出た余を1or0にしていき最後の除算1/2か1/1となって最終的に19は10011となる
        // メリット:ビット単位の演算は掛け算/除算より高速


        //値から進数、進数から文字列
        int num2 = System.Convert.ToInt32("0101", 2); // 2進数から10進数に変換(5)
        int num8 = System.Convert.ToInt32("222", 8); // 8進数から10進数に変換(146)
        int num16 = System.Convert.ToInt32("FF33", 16); //16進数から10進数に変換(65331)

        Console.WriteLine(num2.ToString("#.##"));// 文字変換して表示(小数点対応)
        Console.WriteLine(num8.ToString("#.##"));
        Console.WriteLine(num16.ToString("#.##"));
    }
}


