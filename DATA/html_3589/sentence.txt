More than 1 year has passed since last update.Task初心者がUnityでTaskを使えるようにするためのメモ．
まず下記コードを作成しておきましょう．(1234123)をコンソールに出力するプログラムです．簡単ですね．
これをTaskを使って色々弄ってみましょう．Taskはvoidをasync Taskに置き換えるだけで使用できます．そして，awaitを使うとその処理をコルーチンのように待ち，使わずに使えば普通の関数のように実行できます．
次のプログラムを実行してみよう！先ほどのコードのvoidをasync Taskに置き換えただけのものですね．
そして，待ちたいときはawait，待ちたくないときは普通に実行しています．
ここではStartFuncFinish!と1の出力が同時に行われ，最後には3が出力されているのが解りますか？つまり
関数をTaskに置き換えるだけであまり変わっていない
これがTaskの真髄!これだけでも覚えておけば大丈夫です！Taskは普通の関数のように引数の指定や，返り値を取得することも可能です.
また，返り値が返ってくるまで待つ処理が可能となります．
引数，返り値を使用する場合は次のように書きます．最後にawaitを使う場合はasync Task型である必要があるが，普通の関数のように呼ぶ場合はvoidから呼べる．おまじないについてはUnityはメインスレッドで処理を行っているため，UnityのAPIを呼ぶと例外が起こります．そのため，今回は理解しやすいようにAPIを使用してもエラーを吐かない方法で記述しています．本来なら非同期で行うことのできる処理をわざとメインスレッドでコルーチンのように同期的に行っています．
詳しくは　
https://hakase0274.hatenablog.com/entry/2018/12/07/202550
https://qiita.com/toRisouP/items/a2c1bb1b0c4f73366bc6
を参照してください．この方法では，効率が良くないのでUniTaskを導入するのがおすすめです！
これはAssetStoreからUniRxを導入する必要があります．UniTaskはUnityに最適化されたTaskで，TaskをUniTaskに置き換え，using UniRx.Asyncを宣言することで使用可能となります．
また，非同期処理を行いつつ自動でメインスレッドに戻ってきてくれるため，おまじないも必要ありません．
UniTaskではUniTask.Delay()の他にUniTask.DelayFrame()があるためコルーチンのyield return nullのようなフレーム単位での待ちが可能となります．先ほどのコードをUniTaskで書くと次のようになります．さあ，みんなでTaskを使おう！Taskをもっと詳しく知りたい人は
https://qiita.com/acple@github/items/8f63aacb13de9954c5da
を参照してください．


