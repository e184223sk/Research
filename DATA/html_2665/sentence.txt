More than 1 year has passed since last update.C#でNumericUpDownを使おうとすると，いろいろと不満が出てくることがあります。
例えばといった感じです。
文句があるなら自作してしまえということで上記の不満を解決してくれるコントロールを作成しました。
(使いまわせばいいのですがいつも探し回ることになるので自分用のメモも兼ねて投稿)ここではC#の基本的な構文(e.g., usingディレクティブ)の解説はしません。ボタン，マウスホイール操作時の増分を保持するためのフィールドです。
絶対値を使用することも多いので，絶対値も持っておけるようにしてあります。それぞれ，ボタン，マウスホイール操作時の増分を表しています。
値の設定時には，それぞれの値の絶対値を計算して保存しています。
Incrementについては親に同名のプロパティが存在するためnewで修飾しています。Valueをintで操作したいという要望に応えるべく追加したプロパティです。
実装はご覧の通りです。C#では値型は全ビットが0で初期化されるので，何もしないとIncrementとScrollIncrementが0になってしまいます。
それではあまりにもかわいそうなことになってしまうので，初期値を設定しています。この人たちをオーバーライドすることで矢印ボタンクリック時の挙動を変更できます。
ここではbool型の引数を取るUpDownを参照しています。
渡している値についてはUpDownの項で説明します。ボタン操作時の動作を規定しているメソッドです。引数は，「(Incrementプロパティの符号に関わらず)Valueが増加する方向に変化するか」を表しています。
例えば，上向きのボタンが押された場合となるので，「増加するかどうか」は_increment &gt; 0で表せます。
下向きのボタンについては条件が逆になるだけで考え方は同じです。特に難しいことはしていません。
増加の場合は，増分を足した値とMaximumの小さい方をMath.Minで選択することで最大値を超えないようにしています。
減少の場合も考え方は同じです。本当はオーバーフローした際には最大値/最小値を設定するようにした方がいいような気はしますが，そこまで絶対値が大きい値を扱う需要が今のところないので実装していません。 (手抜き)この人をオーバーライドするとマウスホイール操作時の挙動を変更できます。
やりたいことはUpDownと同じなのですが，増加か減少かの判定が若干怪しいので少しまとめておきます。増加させるか減少させるかを表にまとめると以下のようになります。この表を眺めていると，なんとなく排他的論理和に見えてきます。
マウスホイールの操作量はe.Deltaで取得できるので，排他的論理和をとってe.Delta &gt; 0 ^ _scroll_increment &gt; 0で増加か減少かを判定できます。
ここまで来れば，あとはやっていることはUpDownと全く同じです。この記事で紹介したソースコードは自由に利用していただいて構いません。
よりよい書き方や改善すべき点などがありましたら(C#のコードもQiitaの記事も)，コメントなどで教えていただけると幸いです。増加/減少の処理の実装を条件演算子とMath.Min/Math.Minを使用するものに変更しました。


