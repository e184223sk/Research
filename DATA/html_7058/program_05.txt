
private void Form1_Load(object sender, EventArgs e) {
    textBox1.BorderStyle = BorderStyle.FixedSingle;
    textBox1.Visible = false;
    textBox1.Parent = listView1;
}

//    カラム2の直接編集ちっくモードに入るときに、ItemのCheckが入らないようにする
private void listView1_ItemCheck(object sender, ItemCheckEventArgs e) {
    Point pnt = listView1.PointToClient(Cursor.Position);

    ListViewItem item = listView1.Items[e.Index];

    ListViewItem.ListViewSubItem stem = item.GetSubItemAt(pnt.X, pnt.Y);
    if(stem != null &amp;&amp; stem.Bounds.Contains(pnt))
        if(item.SubItems.IndexOf(stem) == 1)
            e.NewValue = e.CurrentValue;
}

private void listView1_MouseDoubleClick(object sender, MouseEventArgs e) {
    CurrentRow = null;
    CurrentColumn = null;

    Point pnt = listView1.PointToClient(Cursor.Position);

    ListViewItem item = listView1.HitTest(pnt).Item;
    if(item != null &amp;&amp; item.Bounds.Contains(pnt))
        CurrentRow = item;
    else
        return;

    ListViewItem.ListViewSubItem stem = CurrentRow.GetSubItemAt(pnt.X, pnt.Y);
    if(stem != null &amp;&amp; stem.Bounds.Contains(pnt))
        CurrentColumn = stem;
    else
        return;

    if(CurrentColumnIndex != 1)
        return;



    Rectangle rect = CurrentColumn.Bounds;
    rect.Intersect(listView1.ClientRectangle);
    rect.Y -= 1;

    textBox1.Bounds = rect;
    textBox1.Text = CurrentColumn.Text;
    textBox1.Visible = true;
    textBox1.BringToFront();
    textBox1.Focus();
}

private void listView1_Resize(object sender, EventArgs e) {
    listView1.Focus();
}

private void textBox1_Leave(object sender, EventArgs e) {
    CurrentColumn.Text = textBox1.Text;
    textBox1.Visible = false;
}

private void textBox1_KeyPress(object sender, KeyPressEventArgs e) {
    switch(e.KeyChar) {
    case (char)Keys.Enter:
        listView1.Focus();
        e.Handled = true;
        break;

    case (char)Keys.Escape:
        textBox1.Text = CurrentColumn.Text;
        listView1.Focus();
        e.Handled = true;
        break;
    }
}

ListViewItem CurrentRow;
ListViewItem.ListViewSubItem CurrentColumn;

int CurrentRowIndex { get { return (CurrentRow == null) ? -1 : CurrentRow.Index; } }
int CurrentColumnIndex { get { return (CurrentColumn == null) ? -1 : CurrentRow.SubItems.IndexOf(CurrentColumn); } }


