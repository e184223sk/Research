More than 1 year has passed since last update.使うプレイヤーはこちらにありますので、素材欲しい方はダウンロードして下さいTerrainはゲームの地形を作るツールです
画像のような地形を簡単に作ることができます
画像のようにCreateをおして3D ObjectからTerrainを選択します
真っ白な地面が出たと思います
このままでは真っ白で味気ないのでテクスチャーを貼ります
テクスチャーは素材名(英語) textureとかで検索してダウンロードして下さい例えば…草原なら grass texture、岩場なら rock texture、砂なら sand textureダウンロードしたテクスチャーは画像のようにAssetsをおしてImport New Assetをおして貼りたいテクスチャーを選びます
そうしたらTerrainを選択し、右側の筆のアイコンをおして、EditTextureをおします
EditTexturesをおして、左上に出るSelectをおして、Addをおします
dテクスチャーのサイズはSizeのXとYをいじると変えられます
全体に選択したテクスチャーが貼られました
このままだと全部草原になってしまうので先程のように必要なテクスチャーをダウンロードして入れましょう
追加の仕方も先程と同じです。土と、岩を追加してみました
画像のように好きな筆とテクスチャを選択すれば、地形を好きなテクスチャで塗ることが出来ます
画像のように各ブラシを選んで地形を作っていきましょう
一番左のブラシは尖った山になり、その右のブラシは頂上が平らになります。
今回はこんな感じにしてみました♪
今回はCharacterControllerというものを使って、プレイヤーの移動とジャンプを実装していきたいと思います①取り付けたオブジェクトにはカプセル状の当たり判定(CapsuleCollider)がつく
②傾斜や段差の判定を自動で行ってくれるとりあえず、3D空間をいい感じに歩き回れてジャンプとかもさせたいんだ！という方にオススメですこちらよりダウンロードして使って下さい
とりあえずはプレーンな棒人間にしてあるのでUnityの操作に慣れたら是非自分で作ってみて下さい画像のようにプレイヤーの待機アニメーションをドラッグ&amp;ドロップします
赤枠内の数字をいじってプレイヤーをスタート地点に移動させます
同様にカメラをプレイヤーの後ろに移動させます
プレイヤーを選択して、AddComponentをおします
下の検索欄に｢ch｣と入力して、CharacterControllerを選択します

では、プログラミングをしていきます
CharacterControllerにはcharacterController.MoveとcharacterController.isGroundedというCharacterController独自のコードがありますので覚えておきましょう①CharacterControllerを移動させる
②()の中にはVector3型の変数を入れる①CharacterControllerが地面についているか判定する
②if(characterController.isGrounded){}のように使うまた、上記のようなコンポーネント独自のコードを扱う場合、①コンポーネントの機能を代入する変数を作成
②コンポーネントの値を作成した変数に代入
③実際に値を操作という手順を踏みます
スクリプトの作り方やプレイヤーにつける方法、スクリプトの書き方はこちらの漫画に出てきますので参考にして下さい今回作成するスクリプトはScratchで表すとこんな感じになります
こちらに対応表がありますので参考にしながら記述していきましょう以下スクリプトです入力し終わったらJumpPower、MoveSpeedに数値を入力してみましょう(お好みで調整してほしいですが、オススメは4、10です)
また、カメラをプレイヤーにドラッグ&amp;ドロップします
！1-4.png名前の通りキャラクターのアニメーションを切り替えます
例えば何もしてない時は、待機アニメーションにしたり、移動キーがおされたら、走るアニメーションに切り替えたりします
切り替えは変数を使って行いますまずは、AnimatorControllerを作成します
画像のように、右クリック → Create → AnimatorControllerで作成します
続いて、Playerと名前をつけて、プレイヤーにドラッグ&amp;ドロップします
作成したAnimatorControllerをダブルクリックして開き、各アニメーションのデータをD&amp;Dします
ドラッグ&amp;ドロップしたアニメーションを選択し、名前を分かりやすいように変更します
今回は待機アニメーションをWait、走るアニメーションをRun、攻撃アニメーションをAttackに変更しました
アニメーションには繰り返し再生するものと単発で終わるものがあります
繰り返し再生するもの(今回の場合は待機、走り)はアニメーションをダブルクリックし、Loop Timeにチェックをいれます
アニメーションは矢印で結んで遷移させます
今回は待機→走り、待機→攻撃、走り→攻撃、走り→待機、攻撃→待機とつなぎます
まずは待機で右クリックし、Make Transitionをおします
続いて、走りの方まで矢印をひっぱり、走りで左クリックして確定します
同様に待機→攻撃、走り→攻撃、走り→待機、攻撃→待機もつなぎましょう
アニメーションの遷移は変数で管理します
そのための変数を作ります
＋をおして、変数の型をBoolにします

変数の名前はRunにしておきます

同様にAttackという変数も作りましょう
各変数がどうなっていたら遷移をするのかを設定します
まずは、待機→走りの矢印を選択します
そうすると右側に設定画面が開くので、Has Exit Timeのチェックを外します
Has Exit Timeはチェックを付けた場合、前のアニメーションを最後まで再生してから切り替えます
チェックを外した場合は、遷移の条件が切り替わった時に、前のアニメーションを中断して次のアニメーションに切り替わります
Conditionsは＋をおしてRunをtrueにします同様に走り→待機、待機→攻撃、攻撃→待機の条件も設定します
設定の条件は以下の通りですこちらもCharacterControllerの時と同様に
①コンポーネントの機能を代入する変数を作成
②コンポーネントの値を作成した変数に代入
③実際に値を操作という手順を踏みますスクリプトにコメントでそれぞれの該当する部分を書いておきましたので参考にしてください簡単に説明するとWASDキーで移動している時はRunをtrue、キーが離された時はRunをfalse、
同様に攻撃のボタンであるマウスが左クリックされたらAttackがtrue、離されたらAttackがfalseになるようになっていますテストプレイしてみるとこんな感じです♪走っている時は、走っているアニメーション、攻撃や待機ポーズもバッチリですね


