More than 3 years have passed since last update.初投稿です。最近話題の仮想通貨のことを調べていたら、取引所にAPIがあって驚いています。しかも公開情報として利用できるんですね。これがすごい。この投稿では、仮想通貨の取引所で公開されているストリーミングAPIを使い、配信されてくるレートや板情報、直近の取引値や取引量を、C#を用いて記録するプログラムを作ります。例えばフィスコ仮想通貨取引所（金融情報で有名なフィスコ）のAPIドキュメントを見ると、ストリーミングAPIの項目に{
 "asks":[[30000.0, 0.1],[30010.0, 0.2],...],
 "bids":[[29500.0, 0.5],[29300.0, 0.1],...],
 "trades":[{"currenty_pair":"btc_jpy","trade_type":"ask","price":30001,"tid":123,"amount":0.02,"date":1427879761},{}...],
 "timestamp":"2015-04-01 18:16:01.739990",
 "last_price:{"action":"ask","price":30001},
 "currency_pair":"btc_jpy"
}レートだけでなく、板情報や、いくらでどれだけの数量の取引が成立した等のトランザクションデータも含まれています。これが簡単に利用できるのはすごい。神。特に日本株だとこういうフリーで利用できるAPIなんて聞いたことありません（あったら教えて欲しいレベル）。人工市場という、実データに依存せずに、純粋にシミュレーションを通じて市場をモデリング化しデータを解析する研究ジャンルが発達してきたことを踏まえると、なかなかこれは感慨深いものがあります。同様のAPIは、ZaifやCoinCheckなどでもありますが、今回はフィスコのAPIを使います。Webサービスではないので、データだけ収集してあとで煮るなり焼くなりするアプローチで行きます。実装はVisualStudio 2017 Communityで行いました。NuGetからWebSocket4Netをインストールしておきます。JSONパースを同時に行う場合は、Json.NETなどのJSONパーサーも用意しておくとよいです（この例では使いません）。ソースは次の3ファイルに分かれています。これらを同一ディレクトリに配置します。
1. Program.cs（エントリーポイント）
2. ReceivedData.cs（受信したデータのオブジェクト）
3. Sockets.cs（複数のWebSocketを管理し、Zip圧縮、切断時の再接続を行うメイン部分）プロジェクト名は「CryptoCurrencyDataMiner」としました。データを保存しているだけなので、本来の意味のデータマイニングではありませんが、仮想通貨のマイニングとかけてこの名前にしてみました。次に各ソースを書きます。保存するテキストファイル名はマシンのローカル時間をISO 8601表記し、ファイル名では使えないセミコロンをアンダーバーに置き換えたものになります。厳密にやるなら、配信されてきたサーバー時間のタイムスタンプを使ってもいいかもしれない。今回はbtc_jpy（ビットコイン対円）とmona_jpy（モナコイン対円）の2つのペアを同時に取得します。拡張は_tickersの配列をいじってください。メッセージキューの部分は、普通のQueueではなくスレッドセーフなConcurrentQueueを使います。イベントハンドラはJavaScriptのクロージャっぽくおしゃれに書いてみました。メッセージ受信時に、キューにEnqueueし、_zipCreateIntervalの間隔（この設定では5分間隔）でキューにたまったデータをZipに吐き出します。Zipファイル名はテキストファイルと同様に、格納時のマシンのローカル時間をISO 8601表記し、セミコロンをアンダーバーに置き換えたものですが、先頭にティッカー名をつけました。ConcurrentQueueではDequeueではなくTryDequeueになるのが特徴で、Dequeueに失敗した場合は一定時間（500ms）後にまたDequeueするようにしました。エラー発生時はErrorLogメソッドで、カレントディレクトリに「error.log」ファイルが作られますが、ここもスレッドセーフになるようにします。TextWriter.Synchronizedだけだと確かに書き込み部分はスレッドセーフになるのですが、StreamWriterでエラーを起こす（ここで衝突のエラーを出している）ので、自前のlockをかけました。厳密にやりたいなら、log4net等のライブラリを使ったほうがいいかもしれません。再接続部分は、OnErrorでopenをかけてもいいのですが、例えばノートPCで動かしてネット接続そのものが切れたときのように、リトライが1回だけだと直らないケースがあります。そのため、別に接続状態をチェックするようなタイマーを用意し、定期的にチェックさせStateがClosedになっていた場合は再接続をトライするようにしました。試しに、ネットワークケーブルをぶち抜いて2～3分して入れ直したところ、ちゃんと再接続されました。このタイマーは60秒間隔で設定しています。追記：5分間隔でも1日300個近いzipができるので、長く使いたければ日や月単位でフォルダ分けしたほうがいいです。ぜひ改造してみてください。btc-jpyの場合、おおよそ1秒間隔で4KBのJSONが送られてくるので生JSONをそのまま保存すると4×60×60×24=337.5MBの容量が必要です。ただし、Zip圧縮で容量が1/6ぐらいになるので計算上は56.25MBとなります（この値は取引の活発さやレートの配信頻度によるので、今後もっと取引が活発になれば容量は増える可能性があります）。実際、2018年1月現在、Zaifのデータで30時間放置してみたところ、btc-jpyでは57.7MB（46.2MB/d）、mona-jpyでは21.7MB(17.4MB/d)だったので、そこまで保存するのが非現実的というわけではありません。マイナーなペアだったらもっと容量は少なくなります。今のところそこまで本気で収集する予定はないので、使っていないノートPCで動かしていますが、もし本格的にやるなら言語書き換えてVPSなんかで動かそうかなーと思案中。では皆さんよい仮想通貨ライフを～～


