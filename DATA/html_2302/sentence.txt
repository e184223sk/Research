More than 1 year has passed since last update.PONOS Advent Calendar 2019の6日目の記事です。昨日は私の「MonKey - Productivity Commands」のカスタムコマンドでさらにUnity上の作業を効率化するでした。
MonKey - Productivity Commands - Asset Store本記事はPONOS Advent Calendar 2019の以下の記事の続編となります。今回はコマンドにパラメータを渡して実行する方法について紹介します。なお、の環境で動作確認しています。コマンドの実行時にパラメータを追加するためにはMonKey.Command属性の付与されたstaticメソッドの引数に対してMonKey.CommandParameter属性を付与します。
MonKey.CommandParameter属性の第一引数にはパラメータ表示時の説明文を設定してください。このコマンドをコマンドパレットで開くと以下のような表示になります。
パラメータが設定されたコマンドは、コマンド名の左側に吹き出しアイコンが表示されており、パラメータの有無を判別できます。

このコマンドを選択すると、以下のようなパラメータ入力画面が表示されます。

任意のパラメータ（今回はint型のパラメータなので整数値）を入力して実行します。

コマンドに渡されたパラメータの値を使用して、処理が実行されました。MonKeyがデフォルトでサポートしているパラメータの型は以下の通りです。
これらの型の引数はMonKey.CommandParameter属性を付与するだけでコマンドパラメータ化が可能です。なお、MonKey.Editor.Internal.CommandParameterInterpreteを継承したクラスを用意することで、ここにある以外の型もパラメータとして利用することが出来ます。今回は使用例として、デフォルトで定義されていないRect型のコマンドパラメータに対応してみましょう。MonKeyのコマンド実行に入力されるパラメータは文字列です。
そのままではRect型のコマンドパラメータとして渡すことはできないので、入力された文字列を適切にRect型へパースする処理が必要となります。Rect型のオブジェクトを作成するためには「x」「y」「width」「height」の4個の数値が必要ですので、今回はこれらの4個の数値をカンマ(,)区切りで入力してもらうルールにします。このルールに従うとコマンドパラメータに
1, 2, 100, 200
という文字列が入力された場合、
x = 1, y = 2, width = 100, height = 200
というRectオブジェクトが作成されます。次にRect型をパラメータに指定したコマンドを用意します。入力された矩形情報をコンソール出力するだけの、シンプルなコマンドです。
さて、試しにこのコマンドを実行してみますが…

パラメータの入力後に「Error」と表示され、コマンドを実行することができませんでした。
Rect型はデフォルトでサポートされている型ではなく、「文字列を適切にRect型へパースする処理」もまだ実装していないので、Rect型のコマンドパラメータをコマンドへ渡せずにエラーとなってしまっているようです。また、コマンド内の以下の処理についても、valueがnullで渡されてしまうため、NullReferenceExceptionが発生していました。さて、それでは「文字列を適切にRect型へパースする処理」を実装するために専用のCommandParameterInterpreterクラスを用意しましょう。今回はRect型に対応するので、RectInterpreterという名前にします。
スクリプトはEditor以下に設置してください。では、もう一度実行してみましょう。



入力した文字列から矩形情報を作成し、コンソールに出力することができました！コマンドパラメータを指定してコマンドを実行することで、柔軟に処理を実行することができます。
MonKeyの優れている点の一つだと思うので、是非活用していきましょう。明日は@karizumaiさんです！


