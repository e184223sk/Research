
//    public new T GetComponent&lt;T&gt;() where T : Component
//    {
//        var type = typeof(T);
//        if (_componentCache.ContainsKey(type) == false)
//        {
//            var component = base.GetComponent&lt;T&gt;();
//            if (component == null) component = gameObject.AddComponent&lt;T&gt;();
//
//            _componentCache.Add(type, component);
//        }
//
//        return (T) _componentCache[type];
//    }

    public new T GetComponent&lt;T&gt;() where T : Component
    {
        return (T) _componentCache[typeof(T)];
    }

    private void AddCache&lt;T&gt;() where T : Component
    {
        _componentCache[typeof(T)] = base.GetComponent&lt;T&gt;();
    }

