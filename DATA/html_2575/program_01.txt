
using OfficeOpenXml;

    class ExcelManagerEx
    {
        /// &lt;summary&gt;
        /// Excel操作用オブジェクト
        /// &lt;/summary&gt;
        private ExcelPackage _excelPackage = null;
        private ExcelWorksheet _excelWorksheet = null;

        /// &lt;summary&gt;
        /// Excelワークブックを開く
        /// &lt;/summary&gt;
        public void Open()
        {
            try
            {
                // Excelファイルを開く
                var fileInfo = new FileInfo(@"e:\book1.xlsx");
                _excelPackage = new ExcelPackage(fileInfo);

                // シート名で参照
                _excelWorksheet = _excelPackage.Workbook.Worksheets["Sheet1"];
            }
            catch (Exception ex)
            {
                throw (ex);
            }
        }

        /// &lt;summary&gt;
        /// Excelワークブックをファイル名を指定して保存する
        /// &lt;/summary&gt;
        /// &lt;param name="filename"&gt;ファイル名&lt;/param&gt;
        /// &lt;returns&gt;True:正常終了、False:保存失敗&lt;/returns&gt;
        public bool SaveAs(string filename)
        {
            try
            {
                var fileInfo = new FileInfo(filename);
                _excelPackage.SaveAs(fileInfo);
            }
            catch
            {
                return false;
            }

            return true;
        }

        /// &lt;summary&gt;
        /// セル書込(R1C1形式)
        /// &lt;/summary&gt;
        /// &lt;param name="row"&gt;row&lt;/param&gt;
        /// &lt;param name="col"&gt;col&lt;/param&gt;
        /// &lt;param name="value"&gt;value&lt;/param&gt;
        public void WriteCell(int row, int col, object value)
        {
            // 値を書込
            _excelWorksheet.Cells[row, col].Value = value;
        }

        /// &lt;summary&gt;
        /// セル書込("A1"形式)
        /// &lt;/summary&gt;
        /// &lt;param name="address"&gt;address("A1"形式)&lt;/param&gt;
        /// &lt;param name="value"&gt;value&lt;/param&gt;
        public void WriteCell(string address, object value)
        {
            // 値を書込
            _excelWorksheet.Cells[address].Value = value;
        }

        /// &lt;summary&gt;
        /// セル読取(R1C1形式)
        /// &lt;/summary&gt;
        /// &lt;param name="row"&gt;row&lt;/param&gt;
        /// &lt;param name="col"&gt;col&lt;/param&gt;
        /// &lt;returns&gt;セルの値&lt;/returns&gt;
        public object ReadCell(int row, int col)
        {
            // セル読取
            return _excelWorksheet.Cells[row, col].Value;
        }

        /// &lt;summary&gt;
        /// セル読取("A1"形式)
        /// &lt;/summary&gt;
        /// &lt;param name="address"&gt;address("A1"形式)&lt;/param&gt;
        /// &lt;returns&gt;セルの値&lt;/returns&gt;
        public object ReadCell(string address)
        {
            // セル読取
            return _excelWorksheet.Cells[address].Value;
        }

        /// &lt;summary&gt;
        /// レンジ読取(R1C1R2C2形式)
        /// &lt;/summary&gt;
        /// &lt;param name="rowFrom"&gt;row From&lt;/param&gt;
        /// &lt;param name="colFrom"&gt;col From&lt;/param&gt;
        /// &lt;param name="rowTo"&gt;row To&lt;/param&gt;
        /// &lt;param name="colTo"&gt;col To&lt;/param&gt;
        /// &lt;returns&gt;レンジ&lt;/returns&gt;
        public object[,] ReadRange(int rowFrom, int colFrom, int rowTo, int colTo)
        {
            // レンジ読取
            return (object[,])_excelWorksheet.Cells[rowFrom, colFrom, rowTo, colTo].Value;
        }

        /// &lt;summary&gt;
        /// レンジ読取("A1:B2"形式)
        /// &lt;/summary&gt;
        /// &lt;param name="address"&gt;address("A1"形式)&lt;/param&gt;
        /// &lt;returns&gt;レンジ&lt;/returns&gt;
        public object[,] ReadRange(string addresso)
        {
            // レンジ読取
            return (object[,])_excelWorksheet.Cells[addresso].Value;
        }
    }

