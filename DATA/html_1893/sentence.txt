atcoderの過去問を解いている際に、最大二部マッチングに帰着できる問題に遭遇した。
C - 2D Plane 2N Points
（なお、この問題自体はグラフ理論の知識無しでも工夫すれば解ける問題だったので、気になった方は考えてみてください）競技プログラミングでは最大二部マッチング問題は頻出らしいのですが、自分は初心者に毛が生えた程度の実力なので、最大二部マッチング問題であることには気付いたものの対応するデータ構造、アルゴリズムを用意していませんでした。典型問題だしググれば出てくるだろうと思ったんですが、やはり競技プログラミングでC#erは圧倒的に少数派らしく、コピペで使用できそうなソースコードを見つけることができなかったので、自分で実装したものを残しておくことにします。最大二部マッチング問題は、最大フロー問題の特殊な場合として扱える。以下の記事が参考になります。
‪実世界で超頻出！二部マッチング (輸送問題、ネットワークフロー問題）の解法を総整理！‬今回使用するDinic法というものは最大フロー問題を高速に解くことができるアルゴリズムで、Ford-Fulkerson法を改善したもの。アルゴリズムの動作原理は以下の記事が詳しい。
tkw's diary - Dinic法有向グラフの辺の数だけAddEdgeを呼び出し、辺の始点、終点、フローを与えてやればよいです。MaxFlowが最大フローを返します。このソースコードは辺のフローがint型の範囲内のものでしか使用できません。辺のフローがlong型やdouble型の問題に利用したい場合は、EdgeクラスのCapプロパティに対応する部分を書き換える必要があります。C#のジェネリックは数値型のみというような制約が現状ではできないようです。にしてももうちょいうまいやり方なかったのか。式木とか使うとできるみたいなことは聞いたことありますが。C#は競プロでの利用者少ないし速度もそんな早くないしでなかなかつらいんだけど、やっぱり好きな言語なのでこれからも使っていきたいです。この記事がC#erの助けになったら嬉しいな。間違い、改善点等ありましたらコメント等でご指摘いただけると幸いです。


