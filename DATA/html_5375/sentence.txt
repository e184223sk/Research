More than 3 years have passed since last update.　この記事は連載の一部となっています。連載インデックスは 【ILP 連載】自分で ILP を実装してみよう！ をご覧下さい。　今回もややライトな記事になります。　ILP の仕様を理解するために、Hyperledger Quilt の Java で書かれたコードを C# に移植していっていますが、OER のエンコード・デコードをするためにジェネリクスが多用されたコードとなっており、Java と C# でジェネリクスまわりの思想が違うためにやや苦労しています。Java の方は Type Erasure の思想、C# の方は Reification の思想という事で、一筋縄には行かない事態となっております（汗） まぁ、全部 C# に合う様に書き直してしまえばいいんでしょうが、まだ本家の方にも色々修正が入りそうですし、C# の方だけ構造が違うと他の人も見にくいでしょうし、できるだけ一致させておきたい気はしています。　そんな訳で、必要に駆られて C# の Type まわりの仕様について少し勉強してみました。特に、ジェネリックなインターフェースを持つかどうかをどうやって判定したらいいのかという部分について、調べてみた記事になります。　例えば、 IGenericInterface&lt;T&gt; があったとします。これを実装したクラス、 GenericInterfaceClass : IGenericInterface&lt;object&gt; があったとします。この時、 GenericInterfaceClass が IGenericInterface&lt;T&gt; を持つかどうかを判定するにはどうしたらよいでしょうか？　結論としては、GetGenericTypeDefinition() を使え という事になりますが、サンプルコードを添付しておきます。　という訳で、 GetGenericTypeDefinition を使うとうまくいきました。サンプルコードは GitHub のリポジトリ にも置いておきました。　それではみなさま、よい ILP ライフを！


