
// これでは年齢しか取れない
var maxAge = IDOLList.Max(x =&gt; x.Age);
// 特に何もしない場合、例外が発生
var max = IDOLList.Max();
// 最高齢の人の名前と年齢が同時に取れる
var maxAgeIDOL = IDOLList.Select(x =&gt; new IDOLAge(x)).Max();
// 高橋 礼子,31
Console.WriteLine($"{d.Name},{d.Age}");

// 比較用のクラスを作成
class IDOLAge : IComparable&lt;IDOLAge&gt;
{
    public string Name{ get; set; } 
    public int Age{ get; set; } 
    public IDOLAge(IDOL x)
    {
        Name = x.Name;
        Age = x.Age;
    }

    public int CompareTo(IDOLAge other)
    {
        return Age - other.Age;
    }
}

