WindowsCommunityToolkit の中にあるMVVM用ライブラリ Microsoft.Toolkit.Mvvmの紹介Youtubeに以下のようなベンチマークが出ており、

そのパフォーマンスと省メモリーに興味がわいたので試してみました。
触って2日目ですので軽いご紹介です。MVVM Lightにインスパイヤされた、よりモダンで軽量なライブラリ。同作者も携わっているとのこと。nugetで Microsoft.Toolkit.Mvvm をインストールすればOK。
依存関係なし、40kBぐらいのDLLが１つのみでした。4つの機能がありますが独立しているのでObservableObjectだけ利用するなど好きなものを使えます。詳しくはサンプルドキュメントやソースコードで確認してください。INotifyPropertyChanged の実装です。他のMVVMフレームワーク同様、継承して使います。また、INofityPropertyChanged を実装していないModelクラスをラップしてPropertyChangedに反応させることもできます。ObservableObjectの派生として、IMessenger 機能を有したObservableRecipient(後述)や
INotifyDataErrorInfo も実装したObservableValidatorもあるのでそれらの機能が必要になったときにVMの継承を変えればMessengerやValidationが使えるようになります。ICommandの実装です。使い勝手も他MVVMライブラリでいうDelegateCommand等とほぼ同様。CanExecute や CommandParameter にも当然対応。非同期版もあり Func&lt;Task&gt;を利用できます。非同期版は CancellationToken を受けることも可能です。これでだいぶ使いやすくなりました。おそらくこのライブラリの一番の特徴はこの Messenger 機能で、MvvmLight と比べるとメモリ利用は100分の1以下、実行速度も5～10倍以上というベンチマーク結果がでています。（紹介Youtubeから）

弱参照でメモリーを自動管理してくれるWeakReferenceMessengerと強参照版のStrongReferenceMessengerがありますが、ここでは弱参照の方を使ってViewとViewModel間のメッセージングをしてみます。まずはメッセージ用クラスを作ります。（今回はライブラリが用意している値変更メッセージ ValueChangedMessage&lt;T&gt; ( ソース ) を継承しましたが、参照型ならOKなので、テスト目的ならクラスを作らずstringをそのままメッセージに使っても動きます。）このメッセージをViewとViewModel間で送受信するのですが、送信側は単純です。受信側は、受信登録をコンストラクタなどで行い、受信するコールバックを登録します。これで受信できるようになります。ViewModelで受信する場合はObservableRecipientを使って登録処理を省略できます。ObservableObjectを継承しているので PropertyChanged イベントも対応しています。いらなくなったらメッセージ購読解除。強参照版も使い方はほぼ一緒です。
他に用意されているメッセージタイプ等についてはサンプルのドキュメントやソースコードをご確認ください。Inversion of Control(制御の反転)を実装したクラス。
ソースコードを見ればわかりますが必要最小限のヘルパーです。そのためIServiceProviderを実装する別のDIライブラリが必要になります。ここでは Microsoft.Extensions.DependencyInjectionを使って自作のILoggerでも登録してみます。登録するサービスはサンプルとして自作のMyLoggerにしてみます。これをサービスとして登録します。今回はWPFにしたのでapp.xaml.csで登録します。IoC.Defaultというstaticプロパティが用意されているのでそれを使いシングルトンとして登録します。ConfigureServices()に指定する引数 IServceProvider はMicrosoft.Extensions.DependencyInjectionを利用してます。登録したMyLoggerをViewModelで使ってみます。GitHub
https://github.com/windows-toolkit/WindowsCommunityToolkit/tree/master/Microsoft.Toolkit.Mvvmサンプルとドキュメント
https://github.com/windows-toolkit/MVVM-Samples/tree/master/docs/mvvm公式ドキュメント
  - Microsoft.Toolkit.Mvvm.ComponentModel
  - Microsoft.Toolkit.Mvvm.Input
  - Microsoft.Toolkit.Mvvm.Messaging
  - Microsoft.Toolkit.Mvvm.DependencyInjection


