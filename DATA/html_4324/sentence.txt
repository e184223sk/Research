昔作っていたWPFアプリ（.NET5）に、パッケージ化やら証明書やらのメンドクサイ作業一切なしでトースト通知を実装することができました。
＃アプリ自体の説明はこちら
＃リポジトリはここ
最近、UWPアプリからしか使えなかった機能がクラシックデスクトップアプリ（WinForm, WPF）でも使えるようになってきてます。トースト通知もそのひとつのようで。@okazukiさんのtweetでAPIの仕様変更を知りました。今回手を加えたアプリを作った当時（2020年夏頃）、せっかくだからトーストも実装したいなぁ〜と考えてはいたのですがあまりのめんどくささに断念してました。＃ちなみにこんな実装が必要だったらしい...↓というわけで、どのくらい実装がラクになっているのか、以前開発したWPFアプリにトースト通知機能を実装して確認してみます。まずは単純なメッセージを表示するだけの機能を実装してみます。NuGetで必要なパッケージを追加
Microsoft.Toolkit.Uwp.Notificationsパッケージを追加。プロジェクトのターゲットフレームワークをWin10向けに変更　←大事！
最初これを忘れていてしばらくつまづいてました...
公式の記事でも言及されてますが、変更せずに「net5.0-windows」のままになっているとToastContentBuilderのShowメソッド定義がない、とコンパイル時点で怒られます。
トースト通知する処理を実装
メッセージを表示するならこれだけでOK表示イメージ　↓
すごい！めちゃ簡単！実はここまでの機能（メッセージの表示のみ）だと、WinFormsのNotifyIcon.ShowBalloonTipを使ってすでに実装できてました。
↓WinFormsのNotifyIconを利用した通知
せっかく純正Toastが使えるようになったので、トーストコントロール内で項目の選択をしてアプリ側で対応する処理を行う対話型の実装をしてみます。トーストにはいろいろなコンテンツを埋め込むことができるようで、リファレンスをざっと確認するとなど、結構自由にカスタマイズできるよう。
今回の要件に合わせてカスタマイズすると、以下のようなソースになりました。ポイントとしては３点。上記のソースだとこんなイメージのトースト通知になります。
ToastNotificationManagerCompat.OnActivatedイベントをリッスンしておくことでトーストコントロール上のユーザ操作を検知することができます。App.xaml.csとかで購読開始して、ユーザ操作を検知したらその内容に合わせて必要な処理を行うよう実装します。
＃イベントはUIスレッド以外で処理されるようなので、UIを触る場合はDispatcherを経由する必要があります。ポイントは２点。ターゲットフレームワークの変更は必要でしたが、それ以外は数十行のコードを書くだけでトースト通知が実装できました！去年の状況からは想像もできない簡単さですねぇ。
一時期は「クラシックデスクトップアプリ」なんて呼ばれてしまっていたWPFですが、Microsoftの方針転換のおかげで最新機能が簡単に実装できるようになってきてます。WPF、まだまだイケるぞ！


