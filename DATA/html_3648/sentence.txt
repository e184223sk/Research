More than 1 year has passed since last update.この記事は、「Unity 2017～」および「.NET 4.x (C#6)」を前提としています。同じオブジェクト(GameObject)を複数作って使う場合、プレハブを使いますよね。
あらかじめシーンに配置して使うこともありますが、私はどちらかというと動的に生成したいことが多いです。例えば、以下のような使い方で、uGUIでフライテキスト(ダメージの数値表示とかテロップとかの類)を表示するプレハブを作るものとします。使う側は、単にクラスの静的メソッドを呼ぶだけです。
このFlyTextクラスは、例えば以下のようになります。このクラスを使う場合は、クラス名と同じ名前のプレハブをResourceフォルダに用意することになります。
(ここでは、簡素化するためにエラーは無視しています。)しかし、このままでは、タイミング次第で複数が重なって表示されることになります。上記のフライテキストの場合なら、「既に表示中なら、表示中のものを消してから、新たに表示する」ようにしたいです。
そして、それを組み込むだけなら話は簡単です。
しかし、使い道によっては、「既に表示中なら、表示中のものを残して、新たに表示しようとしたものを破棄する」ような場合もありそうです。
他にも、モーダルダイアログのように複数重ねる可能性があって、最前だけを特別扱いしたいような場合もあるでしょう。uGUIの例ばかりですが、私の場合は、プレハブから動的に生成して数や挙動を管理したいものが多くあります。
それぞれに同じようなことを書くのが面倒なので、共通化できないか考えた末に、以下のようなアプローチになりました。このクラスを使うフライテキストは、以下のようになります。フライテキストの基本的な使い方は変わっていません。以下のような使い方が可能になります。モーダルダイアログのように必要なだけ重ねて使いたい場合は、コンストラクタへ渡す引数が省略されて、以下のようになります。そして、複数のダイアログが重なり合っていても、以下のようにして応答すべき最も手前のダイアログを判別できます。最後までお読みいただき、どうもありがとうございます。
初めてQiitaで記事を書きました。
ご意見、ご感想、ご提案など、何でもいただければうれしいです。なお、ManagedInstance.cs以外のスクリプトは未検証です。
また、マジックナンバー使ってて汚いですが、その辺りはご容赦ください。※「ManagedInstance.cs」で使用している「OnDestroyCallback」は、この記事のスクリプトには含まれていませんので、コガネブログ様の記事をご覧ください。
いつも役立つ記事をありがとうございます。この場を借りてお礼申し上げます。


