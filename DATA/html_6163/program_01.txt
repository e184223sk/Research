
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Timers;

namespace CancellationSample
{
    public class CancelSample
    {


        private async Task EternalLoopAsync(CancellationToken ct)
        {
            while (true)
            {
                ct.ThrowIfCancellationRequested();
               // if (ct.IsCancellationRequested) { return; }
                await Task.Delay(6000);
                Console.WriteLine($"Eternal Loop: {DateTime.Now}");

            }
        }

        public async Task ExecAsync()
        {
            try
            {
                await TimerEventAsync();
            } catch (OperationCanceledException ce)
            {
                Console.WriteLine($"Canceled!: {ce}");
            }
        }

        private CancellationTokenSource cts;

        private async Task TimerEventAsync()
        {
            cts = new CancellationTokenSource();
            var timer = new System.Timers.Timer();
            timer.Interval = 19000;
            timer.Enabled = true;
            timer.Elapsed += new ElapsedEventHandler(CancelHappens);
            await EternalLoopAsync(cts.Token);

        }

        private void CancelHappens(object source, ElapsedEventArgs e)
        {
            Console.WriteLine("Cancel happens!");
            cts.Cancel();
        }

    }
}


