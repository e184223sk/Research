More than 3 years have passed since last update.非同期を扱うメソッドで、CancellationToken というのが時々登場しますが、なんとなくしかわかっていなかったので、ちょっとサンプル作って試してみました。とっても簡単でした。Program.csCancelSampleCancellation Token は、非同期処理を実施するときに、非同期処理をキャンセルするための仕組みです。非同期のルーチンを実行した後で、どうやってその処理を取り消せばいいでしょう？そういう時に使います。使い方はとっても簡単です。呼び出し側に、CancellationTokenSource クラスのインスタンスを定義して、そのToken を呼び出す非同期メソッドに渡してやればいい感じです。ここでは、19000ミリ秒後に、イベントハンドラが発火して、CancelHappens メソッドが起動されて、cts.Cancel() で、キャンセルが発行されます。呼び出されたほうはどうなっているか？というと、Cancel が発行されると、if 文で何かの処理をするなり、例外を発生させるなりで、キャンセル処理に対応できるようになっています。ct.ThroIfCanllationRequested() が例外がスローされるパターンで、 ct.IsCancellationRequested が Boolean の値を検査して、自分でキャンセル処理を行うものです。今は例外モードになっていますが、実行するとこんな感じです。予想通り。キャンセルが起こったら例外が発生する感じです。呼び出される側のプログラムは、6000 ミリ秒毎に再び動作するような作りになっていますので、３回ループが回ってそのあとに、Cancel されるので、４回目の現在時が表示されたあとに、キャンセルの例外が発生します。考え方自体は迷わなかったのですが、当初は例外が起こらないように見えて「あれー」と思いました。
当初はこういうコードでした。Program.csCancelSample.csこれだと、きっと、非同期メソッドを実行して、このExec をさっと抜けているので、例外の表示され先がないので、何も起こらないようにみえるという感じだと思います。先のソースのように、ここで、await と、例外のキャッチを入れておけば、例外が投げられているのがわかります。以上です。次は Linq を学んでみたいと思います。


