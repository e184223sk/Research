More than 3 years have passed since last update.neuecc先生の､C#でTypeをキーにしたDictionaryのパフォーマンス比較と最速コードの実装
に記載のあった､BenchmarkDotNetが個人的に相当刺さった｡なので､備忘録がてらまとめてみたいと思うのでお付き合い頂ければ幸い｡例えば､Aと言う実装と､Bと言う実装が有ってどっちが早いの?とか
HogeMogeの時間的コストはどんなモノなのかみたいなとき､Stopwatchとか使ってベンチマーク取るわけだけど､実際問題などなど､まぁ面倒ばっかり多くてしんどかった｡
しかも環境が偏って､全く別のところで差異が出て有りもしない理由を探ったり､逆に本来有意に差が付くはずなのに付かなくて見落としたりと､まぁ面倒だし罠も多い｡で､その辺のコトをまとめてしてくれる便利フレームワークが､BenchmarkDotNetてかんじです｡安心と信頼のNugetから落としてくればOK｡
コマンドラインにPM&gt; Install-Package BenchmarkDotNetとぶち込むか､NugetのギャラリーでBenchmarkDotNetを探せば良い感じ｡
蛇足ながら使える環境は､.NET Framerowk 4.6以降か､.NET Core 1.1以降となってる｡
また､英語版の公式ドキュメントはこのへんにある｡試しに､List&lt;int&gt;とint[]の読み取りアクセスコストの差異があるのか?有るとしたらどれほどなのかみたいなシナリオをこさえて試してみよかと｡ベンチマークを取りたいコードはこのように書く｡上記に提示したコードのように､ベンチマークの対象となるメソッドには､[Benchmark]属性を付与しておく｡
また､以下のような制約がある｡逆に､戻り値は会っても無くても良い｡実行する方法は､エントリポイントにこれで実行するだけ｡
ただ､コンフィグ書いてないときは､実行時の環境(Debug/Relase/X86/x64)に依拠するのでその辺は注意｡
個人的には､Releaseビルドデバッガ無し実行あたりで良いと思います｡
(ただ､Roslynでランタイムコンパイルしてベンチマーク本体は多分別プロセスで動いてるような雰囲気はある)BenchmarkDotnetはできる限り正確に結果を出そうとする｡
で､正確に結果を出そうとすれば手数を増やして結果を安定させる必要があるけど､当然時間がかかる｡
なので､みたいな検証は事前に行う必要があるわけでそこまで時間をかけたくない｡
ソのようなときは､ベンチマークメソッドのあるSomeTestクラスに､
[DryJob]属性や､[ShortRunJob]を付けることで､実行時間を短縮出来る(当然､正確性とのトレードオフはある)
[DryJob]は､文字通り試運転なので､結果を計測するには全く向かない｡だけど､テストベンチ自体がまともに動くか確認するには有用だと思う｡[ShortRunJob]は文字通り短縮した形でテストを実行するので､パラメタライズなベンチマークで当たりを付けたり､事前実験するならこれが良いかと思います｡実行すると､コンソールが出てきて先の例だと､以下のような結果が出てくるこの部分は､結果のエクスポート先がどこにあるかで次は､ベンチマーク毎の結果の詳細が出てくる｡ここからわかるのは､みたいに環境系のレポートに続いて実行結果の統計情報が出てくる　1. Mean:算術平均値
　2. StdErr:標準誤差
　3. N:試行回数
　4. StdDev:標準偏差
　5. Min､Q1,Median,Q3,Max:四分位数
　6. IQR:四分位範囲
　7. LowerFence,UpperFence:外れ値としてフィルタする下限と上限 1
　8. ConfidenceInterval:信頼区画(ココでは､99.9%)
　9. Margin:信頼区画とMeanの片側マージン
　10. Skewness:歪度
　11. Kurtosis:尖度この中で一番意味を持つのが､まず間違いなくMean｡
これの比較で複数のベンチマークをしたときとか､相対的な差をみることが出来る｡ただ､ココでは深く扱わないけど､取ったサンプルが暴れているかどうか 2はある程度気にした方が良い気がする｡で､続いてこんな感じで､サマリが出てくる｡今回は､基本的な使い方をまとめてみました｡
時間があれば､Rを使ったPlottingや､パラメタライズテストの実行方法､ランタイムにJitを別個指定したテストの実行方法など
応用的な解説が出来たらと思います｡サンプルが正規分布に従うと仮定したとき､取り得るであろう値の99.3%を有効数として､他を外れ値として弾くときの閾｡ ↩同じベンチマークを走らせているのに､毎回結果が大きく変わるとなると､ベンチマークそのものに定常性がなくなるのでそこは気にすべきかなぁって｡ ↩


