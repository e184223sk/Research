
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using UnityEngine;

/// &lt;summary&gt;
/// 処理負荷の計測テスト
/// &lt;/summary&gt;
public class MeasureTest : MonoBehaviour
{
    const int COUNT = 500; // 計測回数
    const int N = 100000; // 配列の長さ
    int[] a = new int[N]; // 何らかの配列


    void Start()
    {
        string text = "";
        text += string.Format("計測日時 : {0}\n", System.DateTime.Now);
        text += string.Format("計測回数 : {0}\n", COUNT);
        text += string.Format("配列アクセス回数 : {0}\n", N);
        text += string.Format("For(ms),ForEach(ms)\n");

        for (int i = 0; i &lt; COUNT; i++)
        {
            double forSec = TestFor();
            double foreachSec = TestForEach();

            text += string.Format("{0},{1}\n", forSec, foreachSec);
        }

        // 計測結果は外部ファイルへ
        FileManager.Save(text);
    }

    // forループの処理時間の計測
    double TestFor()
    {
        int x;
        var sw = new Stopwatch();
        sw.Start();
        for (int i = 0; i &lt; N; i++)
        {
            x = a[i];
        }
        sw.Stop();

        return 1000.0 * (double)sw.ElapsedTicks / (double)Stopwatch.Frequency; // 処理時間
    }

    // foreachの処理時間の計測
    double TestForEach()
    {
        int x;
        var sw = new Stopwatch();
        sw.Start();
        foreach (var item in a)
        {
            x = item;
        }
        sw.Stop();

        return 1000.0 * (double)sw.ElapsedTicks / (double)Stopwatch.Frequency; // 処理時間
    }
}

