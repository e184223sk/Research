More than 3 years have passed since last update.if(a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3)を常にtrueにしたい、という話が結構前にありました。
Can (a== 1 &amp;&amp; a ==2 &amp;&amp; a==3) ever evaluate to true?これをC#で推奨されない方法で解決してみたいと思います。さて、この問題ですべきことを見てみましょう。まあ単純な話で、副作用を持つプロパティを使用すればいいのでは……と思いきや、単純にその方法で実装してしまっては、次のようなコードにおいて、問題文の条件を達成できません。問題で与えられているのは、if(a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3)を常にtrueにすることです。ということで今回は、以下のようなコードで条件を達成することを考えます。文脈キーワードとは、特定の文脈でのみキーワードとなるキーワードのことです(正確には、contextual keywordといいます)。
たとえば、C#においてyieldは単独ではキーワードではありません。
ですが、後ろにbreakやreturnがつくと、yield breakやyield returnという一つのキーワードとして動作するようになります。さて、ご存知の通り、C#においてvarは文脈キーワードです。
以下のコードがコンパイル可能なことからもわかるでしょう。これはvarという名前のフィールドを宣言しています。
そして、以下のコードもコンパイル可能です。わかりにくいのですが、Main()にあるvarの型は型推論を行うためのvarではなく、VarClassで定義された型としてのclassのvarです。さて、見かけ上何もしていない風に見せかけたいので、var型の変数varに1を代入したいのですが、当然1はそのままでは数値なので代入できません。
そのため、暗黙の型変換を定義します。これでvar型の変数aに、1が型変換されて入るようになります。次に、aと数値の==での比較をtrueにする方法を考えましょう。
これは単純で、==演算子をオーバーロードするだけでOKです。が、!=演算子もオーバーロードする必要があります。これで左辺にvar型、右辺にint型が来たときの==の動作を定義することができました。
最後にvar.classを隠蔽するためにvar.classを別ファイルに分けてあげれば完成です。


