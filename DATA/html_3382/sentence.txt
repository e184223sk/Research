More than 1 year has passed since last update.Prism関連
https://qiita.com/tera1707/items/4fda73d86eded283ec4f#prism%E9%96%A2%E9%80%A3wpfxamlこの記事は、前二つの記事(↑参照)のまとめです。※参考：【Unity】RegisterInstanceとRegisterTypeの違い。※本格的な実践はしてないので、以下はほぼ想像です。実際に簡単なDIを使うコードを書いてみて、下記が便利かなと思った。注入するクラス(今回でいうとDogやCat)を、使うところ(Person)でnewしなくてよいので、Personの単体テストをするときに、DogやCatを単体テスト用のものに差し替えたいとき、登録の部分(RegisterInstance)でnewしているところだけ差し替えればよいので、Personの中でnewしてるところを書き換えるよりは確かに楽そう。(特に、DogやCatを使うところが多い場合に)単体テスト用猫クラスを作って、登録の部分だけ差し替える。これで実行すると、注入される側のPersonに何も手を入れなくても、単体テスト用の猫クラスを使って、Personが動く。同じように、分担して開発してるときに、Personクラスを作っている人は、とりあえず簡易的に動かすための猫クラスを作っておいて、Personクラスの開発中はそれで猫を動かす。猫が出来上がったら、登録の部分だけそっちに載せ替える、ということができそうなので、確かに楽になりそう。かずきさんprism教育ページ
prismを、機能一つ一つに分けて説明してある。
https://github.com/runceel/PrismEduDIの解説
DIについて、コードを交えて優しく書いてくれている。
https://hiroronn.hatenablog.jp/entry/20170531/1496186979DI(Unity)でInstanceを登録、読み出しのサンプル～依存性注入
サンプルコード。
http://blogs.wankuma.com/nakamura/archive/2008/10/28/160029.aspx
http://blogs.wankuma.com/nakamura/archive/2008/10/29/160096.aspxRegisterInstanceとRegisterTypeの違い
http://pro.art55.jp/?eid=1177842


