More than 1 year has passed since last update.恥ずかしながら、最近までWeb系のプロダクト（最近主流のキラキラしてるやつ）にはほとほと疎く
この間ようやくIFTTTなるものを知った。で、いろいろ弄っているうちになんか面白そう！と思って表題のアプリを作ってみようと思い立ったのが昨日。
大変雑な感じの組み方をしてしまったのだけれど、せっかくなので記事にしてしまおうと思ってみたり。一応わかりやすさのために用語を簡単にまとめておきたい。うーん、シンプル。
ちなみにwebhookを利用してるので、IFTTT経由しなくてもDiscordにメッセージ投げるのは出来ちゃいます。
IFTTT弄らない分手間もかからないかも。
ただ、IFTTTを経由することで、IFTTTから出力先に指定できる400超のサービスに拡張できるってのは間違いなく魅力かと。さて･･･しっかり書くのは明日にして、とりあえず成果だけ挙げてお休み。
気がついたら2時回ってたので･･･
ちゃんと計測してないけど、4時間くらいで出来る簡単なアプリ。{再生したトラックのタイトル} - {アルバム名}/{アーティスト名}
の書式。この書式はWindowsアプリで整える。まずはDiscord。
Discordのサーバーアイコンを右クリック。
コンテキストメニューから[サーバー設定]-[webhooks]を選択。サーバーの設定画面に遷移するので、ここで[webhookを作成]ボタンを押下。
webhook契機でメッセージを送る際のデフォルト名と、投稿先のチャンネル、アイコンなどを設定し、
WEBHOOK URLをコピーする。！注意！
Webhook URLを公開すると、匿名の誰かが好き勝手メッセージ投げられるようになる。控えよう。後はコピーしたURLにjson形式のデータをPOSTしてやればDiscordへの投稿はOK。
jsonのKeyは色々あるけど、とりあえず使うならcontent(本文)さえ入れておけばOK。
お手軽なキーと内容の表はこんな感じなお、Content-Typeはapplication/jsonをちゃんと指定しないとおむずがる模様。参考にさせていただいたもの：DiscordにWebhookでいろいろ投稿する
https://qiita.com/Eai/items/1165d08dce9f183eac74今回一番使いたかったところ。
先にも述べたとおり、IFTTTを介さなくてもjson形式のbodyを書き込んだHTTPリクエストを送ればDiscordに投稿は出来る。
ただし、別のサービスに送りたくなったときにソースを直す必要があるわけですよ。
あ、ハードコーディングする場合ね？
もちろんそこはいくらでもやりようがあるんだけど。とにかく、IFTTTを使いたかったので、いいんですぅ！（ゴリ押し）で、IFTTT。もうこれ説明割愛してもいいんじゃないの？ってくらいサンプルにあふれてるんだけど、
一応webhook入力の例は見当たらなかった気がするから書いてみよう。まずはIFTTTにアクセス。
※アカウントの登録はしてある前提。New Appletを選択し、をクリック。[Choose a service]画面の検索窓に"webhook"と打ち込み、出てきた[webhook]をクリック。Choose trigger画面に遷移するので、[Receive a web request]を選択。すると、triggerに必要な情報を埋めてね！画面に遷移するので、
必要なEvent Nameテキストボックスに任意の文字列を設定する。ちなみに、気になったので試してみたら、日本語も指定できました。
エンコードによる差異とか出そうで怖いからascii文字のみの方がよさそうだけども。ここまででtriggerの設定はOK。
次にこの画面のをクリックしてDiscordに投げるwebhookの設定をしていきます。[Choose action service]画面に遷移したら、triggerの設定時と同じように、検索窓に"webhook"と入力し、
出てきた[webhook]をクリック。[Choose action]画面で[Make a web request]をクリックし、次の画面へ[Make a web request]をクリックし、遷移した[Complete action fields]画面で送信するHTTPリクエストの内容を設定。
設定項目と対応は以下の通り今回のBodyはシンプルにこんな感じ{ 
   "username" : "IFTTT music", 
   "avatar_url": "https://img.icons8.com/color/1600/ifttt.png", 
   "content" : " {{Value1}}" 
 }{{Value1}}の部分にはtrigger側のwebhookで投げられてきたHTTPリクエストのvalue1キーの値がそのまま入るイメージ。入力が終わったら画面下部の[Create action]をクリック。
[Review and finish]画面で[Finish]ボタンを押下してappletの作成を完了しましょう。これでIFTTTの設定は終わり。
ちなみにIFTTTのwebhookによるトリガは、[webhook service]の[Documentation]ページから動作を確認することが出来ます。Service一覧から[webhooks]を選択し、Webhooks画面へ。
または、ここから移動。画面右上にあるDocumentationボタンを押下してDocumentation画面へ移動。
Documentation画面の[To trigger an Event]以下の値を書き換えて[Test It]ボタンを押下することで
作成したHTTPリクエストを送ることが出来ます。ちなみに、この画面にはアカウント固有のキーが表示されてるので
例によって公開しないほうがいいです。
悪戯し放題！さて、ここまできてようやく大詰め。
iTunesで再生した楽曲を取得するお時間です。参考にさせていただいたサイトさんの内容とかなり被るので要点を表. iTunesAppイベント一覧表.IITTrack型プロパティえー、つらつら書いたんですが
上の成果を見てもらってわかるとおり、今回触ったのは
Album、Name、Artistくらいなので、ほかは一応調べたけど使う場合はちょっと疑ってくださいなソースは･･･どうしよう？
勢いで作ったから雑なんだよなぁ･･･
まあ、部分部分上げます。起きたらね！・・・起きた！（19時）ってことでちょろちょろソース挙げていきます。参照の加え方とかは参考にさせていただいたページをご覧あれ。
iTunesをインストールしてるPCなら問題なくiTunesLibは見つかるハズ。今回はなんとなくFormアプリケーションで組みましたが･･･ぶっちゃけコンソールアプリで十分だった気がする。コンストラクタでiTunesAppオブジェクトを取得し、イベントを登録する。
iTunes.(Event名) += ... って部分ね。
･･･そういえばDesigner.csの読み方に関する記事書こうとしてガッツリ忘れてたなぁ。
再生中のトラックが有る場合、トラック情報が更新されたか判定するためのメソッドに処理を投げるようにしてます。
わざわざObject型にキャストしてるのは、iTunesAppのイベントと共通の処理にしたかったから。イベントハンドラ内の処理としてHTTPリクエスト投げるにあたって、using System.Net;が必要で、終了時はCOMオブジェクトを解放しないといけませんよ、と
登録したイベントハンドラはiTunes.(イベント名) -= ...で削除してます。
COMを解放するにあたってusing System.Runtime.InteropServices;を追加する必要あり。ちょっとその、きったないソースだけど勢いで作ったから多少はね？
しっかり作る場合はちゃんと例外処理とかログとかいい塩梅で入れなきゃだけど。参考にさせていただいたもの : 
from Agonymous coward - C#でiTunes COM SDKを叩いて曲情報を表示したりアートワークを埋め込んだりしてみる
_liTunesEventsInterfaceReference(英語)
IITTrack Interface ReferenceIFTTT : https://ifttt.com/discover
IFTTTアイコン : https://icons8.jp/icon/new-icons/all


