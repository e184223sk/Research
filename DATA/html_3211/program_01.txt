

class ENumDictionary&lt;TKey, TValue&gt; : IEnumerable&lt;KeyValuePair&lt;TKey, TValue&gt;&gt; where TKey : struct, IConvertible
{
    private TValue[] array = null;

    public ENumDictionary()
    {
        int length = Enum.GetNames(typeof(TKey)).Length;
        array = new TValue[length];
    }

    public IEnumerator&lt;KeyValuePair&lt;TKey, TValue&gt;&gt; GetEnumerator()
    {
        return new MyEnumerator(this);
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public TValue this[TKey key]
    {
        set
        {
            array[KeyToIndex(key)] = value;
        }
        get
        {
            return array[KeyToIndex(key)];
        }
    }

    private static int KeyToIndex(TKey key)
    {
        return (int)(object)key;
    }

    private static TKey IndexToKey(int index)
    {
        return (TKey)(object)index;
    }

    public TValue this[int i]
    {
        set { array[i] = value; }
        get { return array[i]; }
    }

    class MyEnumerator : IEnumerator&lt;KeyValuePair&lt;TKey, TValue&gt;&gt;
    {
        private ENumDictionary&lt;TKey, TValue&gt; dictionary;
        private int getIndex;
        private KeyValuePair&lt;TKey, TValue&gt; currentValue;

        public MyEnumerator(ENumDictionary&lt;TKey, TValue&gt; enumDictionary)
        {
            dictionary = enumDictionary;
            getIndex = 0;
        }

        object IEnumerator.Current =&gt; currentValue;

        KeyValuePair&lt;TKey, TValue&gt; IEnumerator&lt;KeyValuePair&lt;TKey, TValue&gt;&gt;.Current =&gt; currentValue;

        public void Dispose()
        {
        }

        public bool MoveNext()
        {
            if (getIndex &gt;= dictionary.array.Length)
            {
                return false;
            }

            TKey key = IndexToKey(getIndex);
            TValue value = dictionary.array[getIndex];
            currentValue = new KeyValuePair&lt;TKey, TValue&gt;(key, value);
            getIndex++;
            return true;
        }

        public void Reset() { getIndex = 0; }
    }

    public void Add(TKey key, TValue v0)
    {
        array[KeyToIndex(key)] = v0;
    }
}

