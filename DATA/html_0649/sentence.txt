Couchbase .NET SDKは、System.Threading.Tasks名前空間のクラスを用いた「タスクベースの非同期パターン（TAP）」を使用して、るCouchbaseServerに対する非同期操作を実現します。同期操作のための固有のAPIはない代わりに、Task.Resultメソッドを使用して、すべてのタスクをブロッキング方式で同期的に実行できます。.Netにおける非同期プログラミング、特に「タスクベースの非同期パターン（TAP）」に関する詳しい情報は、こちらのMicrosoftのドキュメントをご確認ください。後述の全ての処理は、Clusterオブジェクトで接続を開始し、バケットとコレクションをオープンするところから始まります。awaitの利用は、非同期操作を行うための最も基本的な方法です。ここでは、例外処理は考慮していないことにご注意ください。GetAsyncメソッドは、GetResultを返します。そのGetResultのContentAsメソッドを使用して、戻り値を読み取ります。上記で利用した同じメソッド(UpsertAsync, GetAsync)を同期的に呼び出すこともできます。その場合、次のように、Resultプロパティを使用します。上記の同期処理と同様のことを行う別の方法は、Task.GetAwaiter().GetResult()のようにAwaiterを明示的に呼び出すことです。特定の状況では、多数のタスクの（実行順序のない）組み合わせを同時に実行したい場合があります。このようなバッチ処理を行うためには、Task.WhenAllを使用します。この例では、4つのドキュメントを非同期にフェッチし、全ての結果が返されるまで状態を一時停止します。次に、結果のリストをループして各ドキュメントを同期的に処理しています。上述したように、非同期処理は、実行順序に関係のないタスクの組み合わせの実行という意味で、本質的にバッチ操作です。下では、上とは少し異なる方法による実装例にコメントを附しています。参考情報Couchbase公式ドキュメント .NET SDK　/ Advanced Data Operations / Async &amp; React APIs


