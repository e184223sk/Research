
using System;
using System.Reflection;
using System.Threading;

namespace ReflectionSpike
{

    public class SomeClass
    {
        private static AsyncLocal&lt;string&gt; current = new AsyncLocal&lt;string&gt;();
        public static string Current
        {
            get { return current.Value; }
            private set { current.Value = value; }
        }

        public SomeClass(string message)
        {
            Current = message;
        }

        private static void Message(string name)
        {
            Console.WriteLine($"Hello World, {name}");
        }
    }

    class Program
    {
        static void Main(string[] args)
        {

            var some = new SomeClass("hello");
            var property = typeof(SomeClass).GetProperty("Current", BindingFlags.Static | BindingFlags.Public);            
            property.SetValue(null, "World");

            var method = typeof(SomeClass).GetMethod("Message", BindingFlags.Static | BindingFlags.NonPublic);
            method.Invoke(null, new object[] {"Tsuyoshi"});

            Console.WriteLine(SomeClass.Current);
            Console.ReadLine();


        }
    }
}


