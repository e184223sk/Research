More than 1 year has passed since last update.Unity以外でもそうですが、メッシュは頂点の塊です。
そしてそれらはTriangleやそれらを結ぶIndexで構成されています。
つまり、勝手に順番を変えてしまうと頂点の情報はぐちゃぐちゃになってしまい、ちゃんとしたオブジェクトとして表示することはできません。
そのため、メッシュを切断して別のオブジェクトに分けようとすると、それなりに頂点郡を計算してポリゴンを縫い合わせてやる必要があります。今回はそんなメッシュのカットを行うサンプルを公開してくれている人がいたので、そのサンプルを読んだメモを書いていきます。実際に実行してみたのが以下のものです↓
左側の3本のラインがカット面を示していて、その平面できれいに切断されているのが分かるかと思います。
しかも、しっかりと切断面に別のマテリアルが割り当てられているのにも注目です。まずは大まかな流れから説明します。
具体的になにをしているかを見るよりも、切断に必要な処理がなんなのか、という視点で見てもらうといいかと思います。
全体像を把握した上でコードを読んでいくと処理内容が推測しやすくなり、理解を促すはずです。※1 ... 三角形（ポリゴン）を線（平面）で分断するとどこをどう切っても必ず2辺と交わる。つまり新しい頂点は2つ作られる。
どれかの辺に平行でない限り、必ず2辺と交わる頂点が平面のどちら側にあるかは内積を使って簡単に調べることができます。
具体的には、点 $p$ と、平面の位置 $p_0$、および面の法線 $n$ を使って、として計算することができます。
ちなみに UnityEngine.Plane クラスにはこうした平面に対する処理を簡単にしてくれるメソッドが多数あるので、実際はそちらを利用したほうが手軽です。サンプルのコードを抜粋すると以下になります。これは、切断対象となったメッシュの、計算中の頂点が平面のどちらにあるかを bool で取得している部分です。さて、上記の平面の表裏の判定により、大部分の頂点は左右に適切に振り分けることができます。
残るは、平面と交差しているポリゴンの各辺を分離して、新しい頂点を得ることができれば、ひとまずすべての頂点を左右に振り分け、かつ切断面に使える頂点郡を得ることができます。ということで、辺を分断する頂点の求め方です。色々文章で説明する前に、下の図を見てもらうと分かりやすいかと思います。グラデーションがかかっている平面が切断面です。
この平面により、頂点が左右どちらかに分断されます。図では $p_0$ と $p_1$ が平面の左側、$p_2$ が平面の右側、そして黄色い点が分断された頂点になります。点の割り出し方は、$p_0$ および $p_1$ から、$p_2$ 方向への距離を算出します。（$\vec{p_2 p_0}$ と $\vec{p_2 p_1}$）
（平面への距離の算出は、以前書いた「[Unity] 任意の無限遠の平面とベクトルとの交点を求める」を見てもらうと分かるかと思います）が、上の方でも書きましたが、UnityEngine.Plane クラスにはこの距離を算出するのに適したメソッドがあります。
参考にしたコードでもそれを利用して計算を行っています。
その部分だけを抜粋すると、ここで blade は切断面を表す UnityEngine.Plane クラスのインスタンスです。
これに Raycast メソッドがあり、レイを飛ばしてやることで、任意の点と方向を元に、平面への距離を算出することができます。
（上の例では out distance に距離が入り、メソッド自体は、平面とレイが交差する場合に true を返します）Raycast を用いて切断頂点までの「距離」を求めることができました。
ただこれはスカラー値で、あくまで「距離」しか分かりません。
しかし、辺の長さとの比率と各頂点情報から平面上の頂点（つまり分断点）を求めることができます。具体的にはこの3工程を行うことで頂点を求めることができます。
これを、分断された辺の分、つまり2辺分行うことで分断された頂点を求めることができる、というわけです。サンプルコードの該当部分を抜粋すると以下のような形になります。↑の日本語は解説用に自分が付け加えたコメントです。上記までで全頂点の振り分け、および新頂点の算出が終わりました。
最後は、新しく生成された頂点を利用して、切断面のポリゴンを形成します。切断面の形成には、上記で算出した新頂点を使って行います。
基本的な考え方は以下のフローになります。※1 ... 切断対象となったポリゴンから必ず2頂点が生成される
※2 ... 切断面は左右のオブジェクトそれぞれに必要で、単純に向きが逆のため該当のコードを示すと以下になります。上記のコードを理解する上で地味にポイントだったのは、重複する頂点が存在する、という点。
簡単のためにまず板ポリを考えてみます。すると、板ポリは2枚のポリゴンで形成されますが、これを切断すると新頂点は4つ生成されます。
三角形（ポリゴン）1枚に対して2頂点生成されるからですね。
そして重複する点は1つです。上記画像の左右の頂点はそれぞれの色に対応したポリゴンから生成された頂点です。
そして中央のものが2つの色に分けられていますが、これが重複した頂点になります。
左右それぞれのポリゴンから頂点が生成されるので4つ生成されているのが分かるかと思います。さて、今度はこれをキューブに拡張して考えると、先程は重複しなかった両端の点も、キューブの側面側の頂点と重複することになります。
結果としてすべての新頂点が必ず2つずつ重なることになります。なので冒頭の動画のように、キューブを切断すると新頂点は16個生成され、実際に切断面のポリゴンとして利用される頂点は8つになります。
実際に、上図の点を数えると8個あるのが分かるかと思います。それぞれが重複しているため、新頂点として生成されるのは16、ということですね。上記のfor文の入れ子になっている方（k += 2で回している方）は、ここで生成された重複頂点を調べてグルーピングする役割を担っています。
すでに説明したように、Cubeを切断した場合、Cubeをぐるっと取り囲むように16個の頂点が作られます。対象がCubeひとつならこの頂点郡をひとつのカット面として利用しても問題ありませんが、大体の場合はモデルは複雑な形状をしています。例えば角を持つモンスターが腕を振り上げているシーンを想像してください。
そしてその振り上げた手と角を一度に切断した場合、角の部分と腕の部分、それぞれ「ふたつのカット面」が生成されるのがイメージできるかと思います。
この「角」と「腕」のカット面を形成する頂点郡をグルーピングするのが前述のグルーピングの役割、と書いた意味です。実装としてはシンプルです。
上記では「角」と「腕」を例に出しました。
そして大体の場合において、このふたつのカット平面の頂点は重なることがありません。つまり、入れ子のfor文が行っているのは、必ず重複頂点が生成される事実を利用して、重複頂点を結んでいくことで「角」と「腕」のカット面を意味的にふたつにグルーピングしている、というわけです。上の板ポリの例で言えば、最初に青い色の頂点をグループに追加し、そこから調査を開始します。（調査用のリストとしてcapVertTrackerを利用しています）
最後に追加した頂点と同じ位置にある頂点を探します。
すると、重複した位置にある黄色い頂点が見つかります。そして「見つかった頂点の次の頂点」をcapVertTrackerリストに加え、再度検索を行います。（板ポリの例で言えば右端の黄色い頂点）
板ポリではこれでグルーピングが完了します。仮に、板ポリの次に示したCubeの例で言えば連続的に別の面の頂点が見つかります。
あとは同じ検索・追加処理を、対象頂点が見つからなくなるまで繰り返すことで、無事にカット面を形成する頂点郡のグルーピングが完成する、というわけです。さぁ、これで必要な情報はすべて整いました。
あとは調べられた頂点を使ってポリゴンを形成する、つまり3頂点を選び出してそれを結んでいく作業です。ただ、上図とコードを見てもらうと分かりますが、新しく生成された頂点は16、うちポリゴン形成に利用するのは8頂点（※）あります。
これをどう結ぶか、を考えないとなりません。今回のサンプルではシンプルに、全頂点の平均位置を求め、それと、新頂点を順番に結んで、ピザを切り分けたような形でポリゴンを形成するような処理になっています。※ ... 最初、頂点検索のアルゴリズムが分かりづらかったのですが、上のように8頂点を見つけ出す処理でした。が、実はこのアルゴリズムの場合、重複した、同じ位置にある点についてもポリゴンを形成していて、若干冗長な処理になっているようです。（つまり、同じ位置に重なるように2枚のカット平面が存在することになる）
ただ、負荷的にとても増える、というものでもないのでこのままにしているのだと思います。（Simple Cutって言ってるし）上記はキューブの断面ではないですが、青い8頂点が新頂点として生成されたもの、として考えてください。
これの平均位置を取ると中心あたりになり、オレンジの点（$c$）となります。あとはこれを、順番に結んでいけば切断面のポリゴンが形成できる、というわけです。
順番とは、「$1, 2, c$」,「$2, 3, c$」,「$3, 4, c$」... という具合です。最後にこの、切断面のポリゴンを形成するコードを以下に示します。以上が、メッシュの切断を行っているコードの解説となります。下のコードは、上で解説したコードの全文です。
自分の理解のために各処理について日本語でコメントを入れているので、分かりづらい点などはそちらも合わせて見てもらうと理解が促されるかもしれません。


