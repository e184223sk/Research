More than 1 year has passed since last update.こんばんは
OpenCvSharp4を使ってWEBカメラのキャリブレーションを行ったので備忘録として残します。
キャリブレーション自体の理論や理屈はまだまだ理解できていないのでコードが動いただけですが。。。WEBカメラ : FullHD 1080P(200万画素カメラ)
キャリブレーションファイル作成：python(python-opencv)
カメラレンズ歪み計算：C#(opencvsharp4.windows)本当はOpencvsharpでキャリブレーション計算も行いたかったのですが
いかんせん3系のサンプル達の流用が難しく、4系で置き換えるのも私のレベルでは太刀打ちできそうにもなかったので大人しくサンプルのあるpythonで計算を行いますというわけでこちらを参考に以下のコードを作成して実行します。
核になる部分はほとんどコピペです。。。
いや、ほんとありがたい。
参照画像の枚数、正方形の1辺のサイズ、交差ポイントの数、カメラ解像度の設定は
環境に合わせて設定します。
今回はこちらを作成し、A4サイズで印刷してプラ板に貼って使用しました。
正方形1辺=20mmなので2.0cm、交差ポイントは横方向8、縦方向13です。
↓のようにまんべんなく移動させながら歪み計算を行います。


40枚分チェスボードのコーナーが検出できれば歪みを計算します。
↓のように結果が確認できます。同時に"calib.yml"が出力されている事も確認できます。
まずはopencvsharpをインストールします。
何故か上側のOpenCvSharp4では実行時にDLLの読み込みエラーが発生したので
OpenCvSharp4.WIndowsをインストールします。
インストールが完了したら"calib.yml"と検証用の画像を用意し
以下のコードを動かします。歪み計算がうまく機能していれば↓のようになります。
・補正前
・補正後
ちゃんと補正されているのが確認できます。やったね！(^O^)3系と4系で結構コードに違いがあり、旧バージョンのサンプルを4で書き直そうと思っても敷居が高かったです。。。
本家OpenCVの公式サイトではC++, pythonのサンプルソースがありますがこれをC#に置き換えるのも自分にとってはなかなか難しい。
今回は計算部分をC#で書くのは諦めて補正パラメータを使用するところだけC#で書くことにしました。
それでも3系と4系でFileStorageの書き方がかなり変わっていたので割と時間がかかりました。ちゃんとWikiを見ればすぐにわかるのですが3系のサンプルばかり追っかけていたので気づくのに時間がかかってしまいました。ちゃんと調べるべきでしたね。上記URLに感謝です。
https://qiita.com/ReoNagai/items/5da95dea149c66ddbbdd
https://github.com/shimat/opencvsharp/wiki/FileStorage
https://stackoverrun.com/ja/q/11850575
http://hima-tubusi.blogspot.com/2016/02/opencvsharp_3.html
https://qiita.com/Kazuhito/items/cc6b8a0bd75cf9689bf9
https://www.learnopencv.com/camera-calibration-using-opencv/


