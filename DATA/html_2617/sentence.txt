More than 1 year has passed since last update.たいていのWindowsの画面の自動操作は以下で紹介した方法で可能になっています。RPA九人衆による「ｱｶﾈﾁｬﾝｶﾜｲｲﾔｯﾀ」の自動化
https://qiita.com/mima_ita/items/d4655de865f30bb51c65実は厄介なケースがあって、それはJavaで画面を作っているケースです。
今回はJavaで作られた画面を例に自動操作が可能かどうか検討してみましょう。実験環境
Windows10 Home
Java 8
Visual Studio 2019
PowerShell 5.1
UiPath 2019.10.0-beta 111Javaで画面を作成する主な方法としてSwingを使用する場合と、JavaFxを使用する場合があります。下記のページを参考に簡単なSwingの画面を作成します。すべてのコードは以下にあります。
https://github.com/mima3/testjavagui/tree/master/java/Swing001JavaFxでも単純な画面を作成します。
すべてのコードは以下にあります。
https://github.com/mima3/testjavagui/tree/master/java/Java8Fx001JavaFXはJDK 11以降、Oracle JDKから分離されます。そのためJavaFxの画面を作る場合、以下のような手順が必要になります。(1)JavaFXをダウンロードする。
https://gluonhq.com/products/javafx/(2)ダウンロードしたフォルダ中のlibの中のjarをプロジェクトの参照ライブラリに追加する。
(3)実行時
コマンドラインから実行する場合Eclipseで実行する場合の実行構成
作成したJavaの画面をinspect.exeを使用してUIAutomation経由で操作できるかを確認します。UIAutomationでコントロールの情報が取得されていないことが確認できます。つまりSwingで作成したアプリケーションはUIAutomation経由で操作が不可能です。UIAutomationの要素が取得されており、ControlTypeも適切に設定されていることが確認できます。
実際にPowerShellを使用して自動操作をしてみましょう。実行結果
これを実行するとJava11のJavaFxを使用した画面は正常に完了しますが、Java8のJavaFxを使用した画面は下記のエラーを出力します。Java8で作成したJavaFxに対してUiAutomationのValuePatternで値を設定すると下記のエラーが出ます。PowerShell側Java側このエラーはJava11で作成したJavaFxの場合は発生しません。Java Access Bridgeを使用することでWindowsはJavaのGUIを操作することが可能になります。JavaやJava Access Bridgeを使用するプロセスが32bitか64bitかは意識して使用するようにしてください。最初にJava Access Bridgeを使用したGUI要素の探索ツールであるAccess Bridge Explorerの使用方法について説明します。(1)Java Access Bridgeを有効にする(2)%JRE_HOME%\jre\binにWindowsAccessBridge-64.dllが存在することを確認し、環境変数PATHに %JRE_HOME%\jre\binを追加する。
古いバージョンだときは下記からダウンロードする必要がある。
https://www.oracle.com/technetwork/java/javase/tech/index-jsp-136191.html(3)下記からAccess Bridge Explorerをダウンロードする。
https://github.com/google/access-bridge-explorer/releases(4)Access Bridge Explorerを起動する。
※Java Access BridgeではSwingで作成した画面しか操作できません。JavaFxで作成した画面を操作することは不可能です。.NETからJava Access Bridgeを操作するサンプルは下記に公開されていました。
https://github.com/jdog3/JavaAccessBridge.Net-Sample上記を基にクリック操作やコンソールアプリからの操作を可能したサンプルが以下になります。
https://github.com/mima3/testjavagui/tree/master/csDoAccessibleActionsで実行可能な操作はコントロール毎にことなり、なにができるかは、GetAccessibleActionsで調べることができます。
JabApiではJava Access BridgeのAPIを呼び出す関数を纏めて実装してあります。
今回は64ビットで動作していることを前提としているので必要に応じてJabApi.csの下記の行を変更してください。なお、Java Access Bridgeの初期処理にあたるWindows_runはメッセージポンプを必要としており、メッセージが処理されないと後続の処理が正常に動作しません。
大元になった.NETからJava Access Bridge操作サンプルでFormLoad時にWindows_runを入れなければならいと言っているのはこのためです。
今回はコンソールで動作するように以下のようにWindows_run後にDoEventsを実行するようにしました。実行結果
C#を基にPowerShellでも同じ操作を行うスクリプトが記述できます。
使用しているJabApi.dllはダウンロードするかソースコードからコンパイルしてください。
GitHubに挙げたDLLは64bit+.NET2.0なので環境によっては使用できません。ツールからJava拡張機能をインストールすることでJavaのGUI操作が可能になります。

拡張機能をインストールすると「%JRE_HOME%\bin\」にUiPathJavaBridgeV8_x64.dllが、格納されます。拡張機能をインストールすると、いつも通りに画面が作成できるようになります。
実行結果
GUIのテストフレームワークを利用して自動操作がおこなえるかもしれません。
今回の目的と違っていたので、詳しくは調べていません。AutomationはSwingとJavaFxのGUIを簡単にテストできるフレームワークです。Javaで記載することもできますが、下記のようなGroovyのスクリプトで記載することも可能です。JavaFXのシンプルでクリーンなテストフレームワークです。
https://github.com/TestFX/TestFXAssertJ SwingはSwingのGUIのテストが可能のようです。
今はFest Swingをフォークしたものになります。Java Swing UI test driver replacement for Fest [closed]
https://stackoverflow.com/questions/31168990/java-swing-ui-test-driver-replacement-for-fest


