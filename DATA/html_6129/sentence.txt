More than 3 years have passed since last update.実は次のポストのコンセプトを理解するための、ヤクの毛刈りなのですが、拡張メソッドについて調べてみました。
拡張メソッドは、既存のメソッドや、インターフェイスに対して、後付けでメソッドを生やせる仕組みです。 Ruby とかだと、普通にクラスを書けばそうなりますが、静的言語ではどうなるでしょう？例えば次のようなクラスがあります。こいつに対して拡張メソッドを使って、メソッドを追加してみましょう。本体には手を入れずにです。呼び捨ては失礼なので「様」づけするメソッドを追加します。ここで、のポイントは、static のクラスに、static のメソッドを書いて、(this 型 変数名) の定義をしてあげるだけになります。実際これを呼び出すためのメソッドはこんな感じ実行結果は、　完璧！想定通り。しかし、だまされてはいけません、これは、あくまで、static メソッドが、インスタンスメソッドのように見せかけているだけなので、private にはアクセスできませんし、Mock とかするときに、拡張メソッドだったらMockできません。（Mock の回でお話ししました）　
　だから、普通は自分がメンテしているクラスだったら、ちゃんとクラスにインスタンスメソッドを書くべきだと思います。じゃあ、どんな時に良いかというと、インターフェイスに対しても同じようにかけるということらしいです。いつも超絶お世話になっているブログによると、と、普通に呼び出したら、こうなるところを、こう書けるのがメリットとあります。これはカッケー。もしかすると、これ使うと、自分で Map や flatMap 書けるんじゃね？というわけで、C# にない、Map を実装してみましょう。Ruby で大好きだったやつで、イテレーターに関数適用するメソッドです。ちなみに、C# だと、Linq を使えばできますが、そこはあえて実装してみましょう。先ほどのメソッドに追加単純に、先ほど学んだ 拡張メソッドに対して、引数に Function を渡すようにしています。もともとの型は、どういう型にかわるかわかりませんので、型を変えています。そして、単純に関数適用して、結果を戻しています。
こんなコードをかいてみました。で結果は？おお！できてる。わしMap 実装しちゃったよ！俺カッケー度が高いテクニックですね。flatMap も同じように実装できるかも！　拡張メソッド理解できるとカッコいいですね！


