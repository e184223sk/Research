
public static IEnumerable&lt;T&gt; MinBy&lt;T, U&gt;(this IEnumerable&lt;T&gt; source, Func&lt;T, U&gt; selector)
{
    return SelectBy(source, selector, (a, b) =&gt; Comparer&lt;U&gt;.Default.Compare(a, b) &lt; 0);
}

public static IEnumerable&lt;T&gt; MaxBy&lt;T, U&gt;(this IEnumerable&lt;T&gt; source, Func&lt;T, U&gt; selector)
{
    return SelectBy(source, selector, (a, b) =&gt; Comparer&lt;U&gt;.Default.Compare(a, b) &gt; 0);
}

private static IEnumerable&lt;T&gt; SelectBy&lt;T, U&gt;(IEnumerable&lt;T&gt; source, Func&lt;T, U&gt; selector, Func&lt;U, U, bool&gt; comparer)
{
    var list = new LinkedList&lt;T&gt;();
    U prevKey = default(U);
    foreach (var item in source)
    {
        var key = selector(item);
        if (list.Count == 0 || comparer(key, prevKey))
        {
            list.Clear();
            list.AddLast(item);
            prevKey = key;
        }
        else if (Comparer&lt;U&gt;.Default.Compare(key, prevKey) == 0)
        {
            list.AddLast(item);
        }
    }
    return list;
}

