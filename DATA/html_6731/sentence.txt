More than 3 years have passed since last update.この記事は、以下2つの環境における ASP.NET Identity のカスタマイズ手順記録です。Visual Studio Community 2015 で検証、Entity Framework を使用した Code First 開発を想定しています。ご存じとは思いますが念のため。
ASP.NET Identity はASP.NET標準搭載の認証・資格管理システムで、以下のような機能が簡単に実装できるようになります。これら全てを独自実装するのは大変なので、ASP.NETでログイン認証を持つWEBシステムを作るのであればほぼ必須の機能と言えます。
そのため基本的には ASP.NET Identity の仕様に合わせながら、必要な部分はカスタマイズで対応するのがよいと思います。ASP.NET Identityで作成したユーザー情報をDB上で確認すると、主キーとなるIdは 文字列型 の GUID として登録されています。ユーザーIdを対象とした総当たり攻撃を防ぐという意味では非常に効果的ではありますが、システム要件によってはユーザーIdは連番のほうが都合が良いこともあるかと思います。そこで ASP.NET Identity をカスタマイズして、ユーザーIdを int型 に変更してみます。ASP.NET MVC 5 + ASP.NET Identity 2.2 で実装する場合です。プロジェクトは、以下の手順で作成したものを使用します。ApplicationUserクラスを確認すると、IdentityUserを継承しているようです。IdentityUserの定義を確認してみると、IdentityUser&lt;string, IdentityUserLogin, IdentityUserRole, IdentityUserClaim&gt; を継承していました。IdentityUserLogin, IdentityUserRole, IdentityUserClaimも確認してみます。それぞれ、型引数がstring型のジェネリッククラスを継承していることが確認できました。
ユーザーIdをint型にするためには、これらをすべてstring型からint型に変える必要があります。型引数がint型のジェネリッククラスに変更したカスタムクラスを作成します。このカスタムクラスを使って、関連クラスを置き換えていきます。あとは、あちこちでコンパイルエラーとなっている箇所に対して、下に挙げる変更を反映させていきます（20箇所くらい）。コンパイルエラーが無くなったらMigrationとUpdateを実行。AspNetUsersテーブルのIdカラムが int型 になりました。ASP.NET Core MVC + ASP.NET Core Identity 1.0 で実装する場合です。プロジェクトは、以下の手順で作成したものを使用します。ApplicationUserクラスを確認すると、同じくIdentityUserを継承しています。IdentityUserの定義を確認してみると、先ほどと違いIdentityUser&lt;string&gt;のみを継承しています。
更に、IdentityUser&lt;TKey&gt;の定義を確認すると、ASP.NET MVC 5 のときはバラバラに指定していた型引数が共通化されていました。先ほどと同様にint型のジェネリッククラスに変更していきますが、型引数が共通化されたため、変更箇所は以下の3箇所だけで済みます。初期配置されている Data\Migrations\00000000000000_CreateIdentitySchema.cs と ApplicationDbContextModelSnapshot.cs を削除してMigrationとUpdateを実行。こちらも、AspNetUsersテーブルのIdカラムを int型 にすることができました。実際にWeb画面上からユーザー登録してみると、Idが連番で登録されることが確認できます。ASP.NET Coreはクロスプラットフォームになっただけでなくコードも改良されているようなので、.NET Frameworkを使い続ける場合でも移行するメリットはあるかもしれません。


