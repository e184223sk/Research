using System.Collections;
using System.Collections.Generic;
using UnityEngine;

[RequireComponent(typeof(MeshRenderer))]
[RequireComponent(typeof(MeshFilter))]
public class DrawTrapezoidSight : MonoBehaviour
{
    public GameObject TargetSight;
    public Vector3 SightDirection = Vector3.up;

    [Range(10, 170)]
    public float Angle = 60;
    [Range(0, 1)]
    public float Thickness = 0.1f;
    [Range(1.0f, 4.0f)]
    public float Range = 4;

    private Mesh mesh;

    private Vector3[] vertices;
    private int[] triangles;

    private void Awake()
    {
        CreateMesh();
    }

    public void CreateMesh()
    {
        mesh = new Mesh();
        GetComponent&lt;MeshFilter&gt;().mesh = mesh;

        vertices = new Vector3[4];
        triangles = new int[] { 0, 1, 2, 0, 2, 3, };

        UpdateVertices();
    }

    public void UpdateVertices()
    {
        float sin = Mathf.Sin(Angle * 0.5f * Mathf.Deg2Rad);
        float cos = Mathf.Cos(Angle * 0.5f * Mathf.Deg2Rad);

        Vector3 v_left = new Vector3(-sin, 0, cos).normalized;
        Vector3 v_right = new Vector3(sin, 0, cos).normalized;

        float fix_range = Range;
        if (cos != 0)
        {
            fix_range = Range / cos * Mathf.Sqrt(sin * sin + cos * cos);
        }


        vertices[0] = v_left * Thickness * 0.99f * fix_range;
        vertices[1] = v_left * fix_range;

        vertices[3] = v_right * Thickness * 0.99f * fix_range;
        vertices[2] = v_right * fix_range;

        mesh.vertices = vertices;
        mesh.triangles = triangles;

        mesh.RecalculateNormals();
    }

    private void UpdateSight()
    {
        transform.position = TargetSight.transform.position;
        Vector3 direction = TargetSight.transform.TransformDirection(SightDirection);
        Vector3 projected_direction = Vector3.ProjectOnPlane(direction, Vector3.back).normalized;

        Quaternion rotation_to = Quaternion.LookRotation(projected_direction, Vector3.back);

        transform.rotation = rotation_to;

    }

    // Update is called once per frame
    void Update()
    {
        UpdateSight();
    }
}


