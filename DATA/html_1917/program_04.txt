
// カスタムコンバータの定義
class ParentConverter : JsonConverter
    {
    public override bool CanConvert(Type objectType)
    {
        return objectType == typeof(Parent);
    }

    //シリアライズ処理
    public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
    {
        writer.WriteStartObject();
        writer.WritePropertyName("Prop0");
        writer.WriteValue(((Parent)value).Prop0);

        if (value is Child1 child1) //型を調べて、適切な処理に分岐する
        {
            writer.WritePropertyName("ChildType");
            writer.WriteValue(1);
            writer.WritePropertyName("Prop1");
            writer.WriteValue(child1.Prop1);
        }
        else if (value is Child2 child2)
        {
            writer.WritePropertyName("ChildType");
            writer.WriteValue(2);
            writer.WritePropertyName("Prop2");
            writer.WriteValue(child2.Prop2);
        }
        else
        {
            throw new JsonWriterException();
        }
        writer.WriteEndObject();
    }

    //デシリアライズ処理
    public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
    {
        JObject jobject = JObject.Load(reader); //JObject型でJSONの中身を読めるようにする
        switch ((int)jobject["ChildType"])      //ChildTypeの値によって、適切な処理に分岐する
        {
            case 1:
                return new Child1() { Prop0 = (string)jobject["Prop0"], Prop1 = (int)jobject["Prop1"] };
            case 2:
                return new Child2() { Prop0 = (string)jobject["Prop0"], Prop2 = (double)jobject["Prop2"] };
            default:
                throw new JsonReaderException();
        }
    }
}

