More than 1 year has passed since last update.前回に関連した内容です。.NET Coreの国際化対応はデフォルトでは.resxを使いますが、それ以外の方法も使える仕組みになっています。今回はデータベースのテーブルに保存した内容を用いて国際化対応をします。デフォルトではLocalizationServiceCollectionExtensionsのAddLocalizationメソッドを実行することで.resxファイルを用いた国際化が可能です。国際化関係のクラスは以下のような階層になっています。StringLocalizer&lt;T&gt; はコンストラクタで IStringLocalizerFactory を受け取っており、ファクトリが生成したIStringLocalizer のインスタンスをフィールドに保持しています。
そしてIStringLocalizer インスタンスに処理を委譲する仕組みになっています。なのでResourceManagerStringLocalizer, ResourceManagerStringLocalizerFactory に相当するクラスを用意することで、データベースから取得するローカライザを作ることができそうです。上記の内容を踏まえた上で データベースを用いて国際化対応をしてみます。ソースは以下の場所に配置しています。データベースはPostgreSQL, データベースアクセスを簡略化するためにDapper を使っています。また動作確認はWebアプリで行いました。
ただしビューにあたる部分は.cshtml ではなく生HTML(Vue.js)を使っています。
つまりサーバー側はWebAPIとして動かしています。テーブルの形状(タテ持ち、ヨコ持ち)は任意ですが今回は以下のようにしました。以下のデータを入れています。SQLの検索結果の1レコードを表すクラスを用意データベースから取得したレコードを保持するクラスデータベースからレコードを取得しDbLocalizedStringSource を返すクラスIStringLocalizerの実装クラス
DbLocalizedStringSource に委譲しています。
(ResourceManagerStringLocalizer を参考)IStringLocalizerFactory の実装クラス
DbStringLocalizer の生成とキャッシュをしています。
(ResourceManagerStringLocalizerFactoryを参考)Startup で使用するクラスを登録する。
AddLocalization より前にDbStringLocalizerFactoryをしておく使用方法は.resx を使うときと同じです。まずカテゴリ用に2つのクラスを用意します。IStringLocalizer&lt;T&gt; をインジェクションするだけです。今回はデータベースを用いましたが、上記のポイントを押さえていれば、任意の方法を使って国際化対応ができそうです。ただこの実装方法ではまだ少しだけ課題が残っています。これらを改善すればもう少し実用的なものになりそうです。


