More than 3 years have passed since last update.本エントリーは某社内で実施するデザインパターン勉強会向けの資料となります。
本エントリーで書籍「Java言語で学ぶデザインパターン入門」をベースに学習を進めますが、サンプルコードはC#に置き換えて解説します。第1回：Iteratorパターン
第2回：Adapterパターン
第3回：Template Methodパターン
第4回：Factory Methodパターン
第5回：Singletonパターン
第6回：Prototypeパターン
第7回：Builderパターン
第8回：Abstract Factoryパターン
第9回：Bridgeパターン
第10回：Strategyパターン　
第11回：Compositeパターン
第12回：Decoratorパターン
第13回：Visitorパターン
第14回：Chain of Responsibilityパターン
第15回：Facadeパターン
第16回：Mediatorパターン
第17回：Observerパターン
第18回：Mementoパターン
第19回：Stateパターン
第20回：Flyweightパターン
第21回：Proxyパターン　Commandは「命令」という意味で、「この仕事を行いなさい」という「命令」をクラスに表したデザインパターンです。
命令を1つの「もの」として表現することにより、命令の集まりから履歴管理や複数の命令をまとめて新しい命令を作成することが可能になります。
　また、Commandは「イベント駆動型プログラミング」で使われるEventと呼ばれる場合もあります。GUIに関わるプログラミングではEventがよく登場しており、マウスのクリック、キーの操作といったイベントが起きた先に、そのイベントを「もの」にしておき、発生した順に処理していくという形で使われています。Commandパターンを用いた、お絵かきプログラムを作成します。ICommandインターフェースは、System.Windows.Input内に存在します。
今回はExecuteメソッドのみの実装を行いたいため、インターフェースを作成します。今回のサンプルプログラムでは使用していないが、関連しているパターンがある。・Compositeパターン
マクロコマンド（具体的命令役）を実現するために、使用される場合がある。・Mementoパターン
Commandの履歴を保持するために、使用される場合がある。・Prototypeパターン
発生した命令を複製するために、使用される場合がある。　「命令」をオブジェクトとして表現するCommandパターンを用いることで、命令の履歴管理、再実行、複製などを行うことができるようになります。これまでに学習したCompositeパターン、Mementoパターン、Prototypeパターンを組み合わせて使用することで、命令というオブジェクトを管理しやすくなる場合があります。


