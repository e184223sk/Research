
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using System;

[CustomEditor(typeof(LoadCSV_Pokedex))]
public class CsvLoaderEditor_Pokedex : Editor
{
    public override void OnInspectorGUI()
    {
        var LoadCSV = target as LoadCSV_Pokedex;
        DrawDefaultInspector();

        if (GUILayout.Button("ポケモン図鑑データの作成"))
        {
            SetCsvDataToScriptableObject(LoadCSV);
        }
    }

    void SetCsvDataToScriptableObject(LoadCSV_Pokedex loadCSV)
    {
        string pokemonName = null;

        // ボタンを押されたらパース実行
        if (loadCSV.csvFile == null)
        {
            Debug.LogWarning(loadCSV.name + " : 読み込むCSVファイルがセットされていません。");
            return;
        }

        // csvファイルをstring形式に変換
        string csvText = loadCSV.csvFile.text;

        // 改行ごとにパース
        string[] afterParse = csvText.Split('\n');

        // ヘッダー行を除いてインポート
        for (int i = 1; i &lt; afterParse.Length; i++)
        {
            string[] parseByComma = afterParse[i].Split(',');

            int column = 0;

            // 先頭の列が空であればその行は読み込まない
            if (parseByComma[column] == "")
            {
                continue;
            }

            // ファイルを作成
            string fileName = parseByComma[column] + ".asset";

            pokemonName = parseByComma[column];
            column += 1;

            //一応今回はResourcesに生成
            string path = "Assets/Resources/" + fileName;

            // PokeDexのインスタンスをメモリ上に作成
            PokeDex pokedex = CreateInstance&lt;PokeDex&gt;();

            pokedex.TypeList = new List&lt;PokeDex.Type&gt;();
            pokedex.AbilityList = new List&lt;string&gt;();

            // タイプ1
            if (!String.IsNullOrEmpty(parseByComma[column]))
            {
                pokedex.TypeList.Add(FromTypeNameToType(parseByComma[column]));
            }
            column += 1;

            // タイプ2
            if (!String.IsNullOrEmpty(parseByComma[column]))
            {
                pokedex.TypeList.Add(FromTypeNameToType(parseByComma[column]));
            }
            column += 1;

            //H種族値
            if (!String.IsNullOrEmpty(parseByComma[column]))
            {
                pokedex.BaseH = int.Parse(parseByComma[column]);
            }
            column += 1;

            //A種族値
            if (!String.IsNullOrEmpty(parseByComma[column]))
            {
                pokedex.BaseA = int.Parse(parseByComma[column]);
            }
            column += 1;

            //B種族値
            if (!String.IsNullOrEmpty(parseByComma[column]))
            {
                pokedex.BaseB = int.Parse(parseByComma[column]);
            }
            column += 1;

            //C種族値
            if (!String.IsNullOrEmpty(parseByComma[column]))
            {
                pokedex.BaseC = int.Parse(parseByComma[column]);
            }
            column += 1;

            //D種族値
            if (!String.IsNullOrEmpty(parseByComma[column]))
            {
                pokedex.BaseD = int.Parse(parseByComma[column]);
            }
            column += 1;

            //S種族値
            if (!String.IsNullOrEmpty(parseByComma[column]))
            {
                pokedex.BaseS = int.Parse(parseByComma[column]);
            }
            column += 1;

            // 特性1
            if (!String.IsNullOrEmpty(parseByComma[column]))
            {
                pokedex.AbilityList.Add(parseByComma[column]);
            }
            column += 1;

            // 特性2
            if (!String.IsNullOrEmpty(parseByComma[column]))
            {
                pokedex.AbilityList.Add(parseByComma[column]);
            }
            column += 1;

            // 特性3
            if (!String.IsNullOrEmpty(parseByComma[column]))
            {
                pokedex.AbilityList.Add(parseByComma[column]);
            }
            column += 1;


            //図鑑No.
            if (!String.IsNullOrEmpty(parseByComma[column]))
            {
                pokedex.PokeDexNo = int.Parse(parseByComma[column].TrimStart(new Char[] { '0' }));
            }
            column += 1;

            // インスタンス化したものをアセットとして保存
            var asset = (PokeDex)AssetDatabase.LoadAssetAtPath(path, typeof(PokeDex));
            if (asset == null)
            {
                // 指定のパスにファイルが存在しない場合は新規作成
                AssetDatabase.CreateAsset(pokedex, path);
            }
            else
            {
                // 指定のパスに既に同名のファイルが存在する場合は更新
                EditorUtility.CopySerialized(pokedex, asset);
                AssetDatabase.SaveAssets();
            }

            AssetDatabase.Refresh();
        }
        Debug.Log(loadCSV.name + " : ポケモン図鑑データの作成が完了しました。");
    }


    PokeDex.Type FromTypeNameToType(string TypeName)
    {
        PokeDex.Type Type = PokeDex.Type.Normal;

        switch (TypeName)
        {
            case "ノーマル":
                Type = PokeDex.Type.Normal;
                break;

            case "炎":
                Type = PokeDex.Type.Fire;
                break;

            case "水":
                Type = PokeDex.Type.Water;
                break;

            case "電気":
                Type = PokeDex.Type.Lightning;
                break;

            case "草":
                Type = PokeDex.Type.Grass;
                break;

            case "氷":
                Type = PokeDex.Type.Ice;
                break;

            case "格闘":
                Type = PokeDex.Type.Fighting;
                break;

            case "毒":
                Type = PokeDex.Type.Poison;
                break;

            case "地面":
                Type = PokeDex.Type.Land;
                break;

            case "飛行":
                Type = PokeDex.Type.Fly;
                break;

            case "エスパー":
                Type = PokeDex.Type.Psy;
                break;

            case "虫":
                Type = PokeDex.Type.Insect;
                break;

            case "岩":
                Type = PokeDex.Type.Rock;
                break;

            case "ゴースト":
                Type = PokeDex.Type.Ghost;
                break;

            case "ドラゴン":
                Type = PokeDex.Type.Dragon;
                break;

            case "悪":
                Type = PokeDex.Type.Dark;
                break;

            case "鋼":
                Type = PokeDex.Type.Metal;
                break;
        }

        return Type;
    }
}

