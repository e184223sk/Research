More than 1 year has passed since last update.この記事は、「【Unity】音ゲーの仕組みを学び「〇〇の達人」をUnityで作る　パート１」の続きです。読んでない方は、先にパート1から読んでください。パート1、パート3はこちら【Unity】音ゲーの仕組みを学び「〇〇の達人」をUnityで作る　パート１
【Unity】音ゲーの仕組みを学び「〇〇の達人」をUnityで作る　パート3今回は、曲の再生、ノーツをタイミングよく弾いたかチェックするロジック、ノーツを弾いたときのエフェクトを実装していきます。パート1では、譜面データ、GameManager、NoteControllerを作りました。
そして、ノーツを出現させるロジックとノーツを動かすロジックを実装しました。GameManager ・・・ 譜面からノーツを出現させるロジック、ノーツを動かすロジックの一部分(ノーツを動かし始めるタイミングの管理)
NoteManager ・・・ ノーツを動かすロジック忘れてしまった方は、さらっとパート1を復習しましょう。ミュージック自作は流石に自作できないので、完全商用フリーで使用できる音楽素材が集まっている魔王魂より、曲を拝借します。自分はシャイニングスターという曲を使用しました。調査の結果、bpmは158ということだったので379.746835443038(ms)おきにノーツを配置しないといけませんね。曲をダウンロードし、「Assets　→　Resources → Charts → [ダウンロードした曲名]」にAudioClip.mp3という名前で保存しておきましょう。また、新しく曲にあった譜面データを作成し、同じフォルダにChart.jsonという名前で保存しましょう。※細かすぎるので、Nodejsで譜面自動作成スクリプトを書いてjsonファイルを作りました。SetChartボタンプッシュ時に、AudioClipをセットし、Playボタンプッシュ時に再生させます。
両ボタンのイベント検知はGameManager(Script)で管理してたので、GameManager(Script)に追加します。ヒエラルキーから値をセットできるように、ClipPathを作成する。ClipPath　・・・　曲データのパススクリプトから曲を再生できるように、Musicを作成する。Music ・・・ 後でGameManagerにアタッチするAudioSourceGameManager読み込み時に、アタッチされているAudioSourceを取ってきて、Musicにセットする。SetChartボタンプッシュ時実行されるLoadChart()関数で、Music.clipに再生させる曲のAudioClipをセットさせる。Playボタンプッシュ時実行されるplay()関数で、曲を再生させる。次はGameManagerにAudioSourceコンポーネントをアタッチしましょう。
アタッチできたら、Play On Awakeのチェックを外し、FilePathとClipPathを書き換えましょう。GameManagerでノーツをタイミングよく弾いたかチェックさせます。
また、「Dキー」でdonを「Kキー」でkaを弾けるようにします。タイミングよく弾けたかチェックするためには、キーを押したときにノーツをチェックするべき盤面なのかそれともチェックしなくていい盤面なのかを決めます。次に、チェックする盤面においてどのノーツが対象なのかを決めます。最後にタイミングのずれ幅に応じて、 不可(失敗)もしくは良(成功)なのかを決めます。つまり、キーを押したタイミングで一番弾くべきタイミングが近いノーツを見つけ、タイミングのずれ幅によって処理を切り分けていきます。ノーツをタイミングよく弾いたかチェックするために、CheckRange、BeatRange、NoteTimingsを作成する。CheckRange ・・・ 良(成功)もしくは不可(失敗)になる領域
BeatRange ・・・ 良(成功)になる領域
NoteTimings ・・・ ノーツのタイミングのみ入った配列GameManager読み込み時、CheckRangeとBeatRangeをセットします。
キーを押したタイミングとノーツの弾くべきタイミングが80(ms)より大きく120(ms)以内なら不可(失敗)、80(ms)以内なら良(成功)になります。「Dキー」と「Kキー」を押したとき、ノーツをタイミングよく弾いたかチェックするbeat関数を実行させるようにします。キーの入力受付はthis.UpdateAsObservable().Where(_ =&gt; Input.GetKeyDown(KeyCode.[キー])).Subscribe(_ =&gt; 実行したい関数)で、キーを押した際に関数を実行してくれます。
`譜面データを読み込むとき、Notesを作成するとともにNoteTimingsも作る。ノーツをタイミングよく弾いたかチェックするbeat関数を作る。キーを押したタイミングと一番近いタイミングをNoteTimingから取得します。
一番近いタイミングとの差がによって、何もしないのか、不可(失敗)にするのか、良(成功)にするのか分岐させています。不可(失敗)もしくは良(可)であれば、SetActive(false)でノーツを非表示にするようにしています。Destroy()でノーツのゲームオブジェクト自体を削除できますが、Destroy()は処理が重いため使用しません。最後に、BeatPointの位置がわかるようにエイムを追加しましょう。BeatPointと同じ位置にBeatPointViewという名前でGameObjectを作成し、エイム画像をつけましょう。BeatPointVewのz座標を少し後ろにずらしてください。ノーツが流れてきたとき、ノーツが隠れないようにするためです。背景が寂しいので、背景画像を用意して入れもいいかもしれません。私の背景画像はアウトですので真似は決してしないでください。キーを押した時、「ドン」と「カッ」の効果音が再生されるようにします。効果音も自作できないので、魔王魂より、似た効果音を拝借します。フリー効果音素材の戦闘効果音の戦闘7(どんっ)と戦闘15(ビンタ)が「ドン」と「カッ」近いので採用します。戦闘7(ドン)と戦闘15(ビンタ)をダウンロードし、「Assets　→　AudioClip」にdon.mp3、ka.mp3という名前で保存しておきましょう。実装を始める前に、UniRxのサブジェクトとオブザーバーについて説明しておきます。UniRxのサブジェクトとオブザーバーは、簡単に何かのタイミングでメッセージを通知し、別の場所に書いた処理を実行させることができます。メッセージを通知するサブジェクトとメッセージを受け取るオブザーバーの作り方は下記です。メッセージの通知とメッセージの受け取り方は下記です。それでは、サブジェクトとオブザーバーを使って効果音を鳴らしていきましょう。UniRxのサブジェクトとオブザーバーを実装します。効果音を再生するイベントを通知・検知できるようにするため、SoundEffectSubject、OnSoundEffectを作成する。キーが押されたタイミングで、OnNext(ノーツのタイプ)により、効果音再生のイベントを通知させる。ここで使用していないオブザーバーのOnSoundEffectは、SoundEffectManagerで使います。後で作成するSoundEffectManagerで効果音再生の管理をさせます。「Assets　→　Scripts」にSoundEffectManager.csを作成します。※後でSoundEffectManagerにアタッチします。「ドン」と「カッ」の効果音を再生をさせるために、GameManage、DonPlayer、KaPlayerを作成する。GameManager ・・・ ゲームを管理しているコンポーネント
DonPlayer ・・・ 「ドン」を再生できるAudioSource
KaPlayer ・・・ 「カッ」を再生できるAudioSource「ドン」と「カッ」のオーディオを再生させるdonPlay()とkaPlay()関数を作成する。効果音再生イベントを検知し、先ほど作成した関数を実行できるようにする。次に、SoundEffectManagerを作成します。SoundEffectManagerという名前でGameObjectを作成し、SoundEffectManager(Scripts)をアタッチしてください。そして子要素にDonPlayerとKaPlayerという名前でGameObjectを作成してください。DonPlayerとKaPlayerにAudioSourceを追加し、先ほどダウンロードした効果音をAudioClipにセットしてください。最後に、SoundEffectManagerのSoundEffectManager(Script)の変数をセットしましょう。
ドラッグアンドドロップで登録していってください。ノーツを弾いた時、「良」と「不可」のメッセージが表示されるようにします。サブジェクトとオブザーバーを作り、「良」、「不可」を判定する箇所で、OnNext()で通知です。※効果音を実装した時とほぼ同じなので説明省きます。後で作成するMessageEffectManagerでメッセージ表示の管理をさせます。「Assets　→　Scripts」にMessageEffectManager.csを作成します。※後でMessageEffectManagerにアタッチします。基本的に、効果音を実装した時と同じです。違いとしては、効果音再生の箇所がオブジェクトの表示に変わったところと、200(ms)後に自動的に非表示にさせているところです。次に、MessageEffectManagerを作成します。MessageEffectManagerという名前でGameObjectを作成し、MessageEffectManager(Scripts)をアタッチしてください。そして子要素にGoodとFailureという名前でGameObjectを作成してください。GoodとFailureに表示させたいメッセージ画像を貼りましょう。
そして、GoodとFailureは非アクティブ状態にしておいてください。※Splite Renderコンポーネントで画像は貼れます。最後に、MessageEffectManagerのMessageEffectManager(Script)の変数をセットしましょう。
ドラッグアンドドロップで登録していってください。ここまで実装できれば、動かしてみましょう。
曲を聴きながらノーツを弾を弾けるようになっているはずです。ついに音ゲーがまともにプレイできるようになりました。次回はラスト、スコア(コンボ等)を実装します。


