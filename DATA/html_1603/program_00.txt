
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using Windows.Devices.Bluetooth;
using Windows.Devices.Bluetooth.Advertisement;
using Windows.Devices.Bluetooth.GenericAttributeProfile;
using System.Runtime.InteropServices.WindowsRuntime;        //Asbuffer

namespace FormsAppBleQiitaTest
{
    public partial class Form1 : Form
    {
        static BluetoothLEAdvertisementWatcher watcher;
        public Form1()
        {
            InitializeComponent();
            StartBle();                 //起動と同時にBleデバイスとの接続を試みる。
        }
        static public string textLog;
        static public string textWriteData;
        //ラベルの文字をタイマーで更新する
        private void timer1_Tick(object sender, EventArgs e)
        {
            labelNotifyData.Text = textLog;
            labelWriteData.Text = textWriteData;
        }
        //スキャン他　起動時に呼び出し
        public static async void StartBle()
        {
            watcher = new BluetoothLEAdvertisementWatcher();
            watcher.Received += Watcher_Received;
            watcher.ScanningMode = BluetoothLEScanningMode.Active;
            watcher.Start();
            textWriteData = "Write : 0";
        }
        static bool isBleFind = false;
        static bool isBleNotify = false;
        static bool isBleWrite = false;
        public static async void Watcher_Received(BluetoothLEAdvertisementWatcher sender, BluetoothLEAdvertisementReceivedEventArgs args)
        {
            var bleServiceUUIDs = args.Advertisement.ServiceUuids;
            textLog = "MAC:" + args.BluetoothAddress.ToString();
            foreach (var uuidone in bleServiceUUIDs)
            {
                textLog = uuidone.ToString();
                if (uuidone.ToString() == "00002220-0000-1000-8000-00805f9b34fb")       //目的のサービスUUIDを探す
                {
                    textLog = "Find";
                    isBleFind = true;
                }
                if (isBleFind == true)
                {
                    watcher.Stop();       //目的のサービスUUIDをみつけたらスキャン終了
                    textLog = "Stop";
                    BluetoothLEDevice dev = await BluetoothLEDevice.FromBluetoothAddressAsync(args.BluetoothAddress);
                    GattDeviceService service = dev.GetGattService(new Guid("00002220-0000-1000-8000-00805f9b34fb"));
                    var characteristicsRx = service.GetCharacteristics(new Guid("00002221-0000-1000-8000-00805f9b34fb"));
                    CHARACTERISTIC_UUID_RX = characteristicsRx.First();
                    if (CHARACTERISTIC_UUID_RX.CharacteristicProperties.HasFlag(GattCharacteristicProperties.Notify))
                    {
                        CHARACTERISTIC_UUID_RX.ValueChanged += characteristicBleDevice;
                        await CHARACTERISTIC_UUID_RX.WriteClientCharacteristicConfigurationDescriptorAsync(GattClientCharacteristicConfigurationDescriptorValue.Notify);
                        isBleNotify = true;
                    }
                    var characteristicsTx = service.GetCharacteristics(new Guid("00002222-0000-1000-8000-00805f9b34fb"));
                    CHARACTERISTIC_UUID_TX = characteristicsTx.First();
                    if (CHARACTERISTIC_UUID_TX.CharacteristicProperties.HasFlag(GattCharacteristicProperties.Write))
                    {
                        isBleWrite = true;
                    }
                    break;
                }
            }
        }
        public static byte[] RxData;
        public static GattCharacteristic CHARACTERISTIC_UUID_RX;
        public static GattCharacteristic CHARACTERISTIC_UUID_TX;
        //Notifyによる受信時の処理
        public static void characteristicBleDevice(GattCharacteristic sender, GattValueChangedEventArgs eventArgs)
        {
            byte[] data = new byte[eventArgs.CharacteristicValue.Length];
            Windows.Storage.Streams.DataReader.FromBuffer(eventArgs.CharacteristicValue).ReadBytes(data);
            RxData = data;
            textLog = "Notfy : " + RxData[0].ToString() + "," + RxData[1].ToString();
            return;
        }
        //終了時の処理
        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (isBleFind == true) CHARACTERISTIC_UUID_RX.Service.Dispose();
        }
        //ボタンがクリックされたときの処理
        byte[] TXdata = { 0 };
        private void buttonWrite_Click(object sender, EventArgs e)
        {
            if (isBleWrite == true)
            {
                var result = CHARACTERISTIC_UUID_TX.WriteValueAsync(TXdata.AsBuffer());
                if (TXdata[0] &lt; 100) TXdata[0]++;
                else TXdata[0] = 0;
                textWriteData = "Write : " + TXdata[0].ToString();
            }
        }
    }
}

