More than 3 years have passed since last update.今回、System.Randomに関して、興味深い知見を得たので、まとめてみることにしてみた。
まだまだ不勉強なこともあり、誤っている点、不適切な語彙の使用等が有るかと思うので、もしあれば、コメントで指摘して頂ければ幸いです。ただ、今回の検証は極めて特殊な状況に関する考察なので、そのは誤解なさらぬようご注意ください。また、今回はどのように乱数を捉えているかというと、出現頻度に焦点を当てており、出現順序は全く考慮していないので、その点ご了承頂ければ幸いです。
乱数生成のアルゴリズムに関しても今回は立ち入っていませんので、その点もご理解頂ければ。乱数の生成がと言う処理を行っていることから、
System.RandomのNext(int maxValue)は、その性質上どうしても生成に偏りが発生する。2これは、当該メソッドで返却される値がとりえる数は、高々2^31-1=2,147,483,647個しかなく、
そしてこの値は素数であることから、maxValueがint.MaxValueである時を除いて、どーやっても割り切れないので、その結果分布に偏りが生じることになる。とは言え、偏りは最大でも1であり、普通は極端な回数を試行しない限り、この偏りが顕在化することはない。それでは、以下のようなコードを作成して、サイコロを振りながら、100回単位で試行回数を記録してみた。で、出てきた結果が以下Actは実際の結果、Expは試行回数/6の期待値となっており、ChiSQTestはそのχ2検定の結果を示している。
よく言われているとおり、試行回数が増えるだけ、結果は均一化していく。上記なら、問題が無いが、実は下記のようにNext(int maxValue)を使って、乱数を生成した後、その剰余を取るようなことをした場合、極端に偏ることがある。当然、この場合、[0,1431655765)となり、これは6では割り切れないので、根本的に若干の偏りが存在はしている。
だが、それは1431655765回試行した際、1が238,609,295個、それ以外が238,609,294個とごくわずかなものとなっている。けれど結果は差に非ずで、試行回数が増えれば増えるほど、偶数の目が出にくく、奇数の目が出やすい傾向が見て取れ、これはχ2検定が数をこなしても0のままで有ることからも客観的に、このサイコロは偏っていると言うことが言える。ちなみに、100000回試行したとき、最初の方法はCase1、2番目の方法はCase2として出目の頻度をグラフプロットしてみ結果は以下の通り。一般的に使う限り、問題はほぼ起きないし、逸般的な使い方をしても、ほぼ偏りは行いコトの方が多い。
けれど、状況によって偏りが濃縮されてしまうことがある。乱数は、一様分布であれば、バラバラであることが至上であり、ばらけていることが正しいことなので、正確なのか否かの検証が困難ではある。
けれど、こんなことにならないようにある程度の回数を試行して、検証することは必要なのかなと考えました。次回は、なぜ偏るのか?と言う点に焦点を当ててさらに深く掘り下げてみたいと思います。ここが疑似乱数生成している部分。 ↩Next(int minValue,int maxValue)の場合は、また変わってくる。 ↩


