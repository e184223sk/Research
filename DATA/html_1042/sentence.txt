More than 1 year has passed since last update.本エントリーはC#向けです。言語によっては同じような実装ができない（必要ない）場合もありますのでご注意ください。enumによる処理分岐をswitch文（switch式でも実質同じ）を記載したとき、enumが取り合えない値であった場合はdefaultで例外をスローするのは一般的な実装です。しかしdefaultの行は、普通にテストすると通過しないためカバレッジ率が低下します。さて、この課題を解決する目的はどこにあるのでしょうか？私は別にカバレッジ100%原理主義者ではありませんから、カバレッジを通すこと自体が目的ではありません。目的はふたつあります。テストでカバレッジが通過していない箇所は「テストをしなくても良い理由」が必要です。そしてそれは、プロダクトが継続している限り管理し続ける必要があります（私は通常、その理由をコードコメントに残します）。テストを実施する都度、通過していない箇所はそれで良いのか判断しつづける（つまりコメントを目で確認する）のは非常につらいことですから、通せるところは通してしまった方が結果的に楽なケースが多いでしょう。例えば先のコードは、つぎのように記述することで同じように動作しますし、カバレッジもenumの範囲内で100%になります。「case VerticalAlignment.Bottom」を削除してdefaultにその実装を移動しています。しかしこの実装をしてしまうと、VerticalAlignmentに4番目の値が追加されたときにBottomと同じ挙動で動作してしまいます。新しいenum値が追加されてもコードが修正されていない場合、例外をスローし、早期にバグを発見できるようにするべきです。このため、この解放は利用できません。今回はこの問題を解決するテスト手法についてまとめたいと思います。つぎのようにします。C#のenumは取りえない値からも正常にキャストできます。だからこそswitch文にdefaultが必要なのですが、今回はそこを逆用して異常な値を取るenum値を生成してテストします。これで前述のdefaultは通過し、カバレッジも取得できるようになります。こうして生成した異常なenumを渡して例外がスローされるテストコードを記述しておきます。これで、ふたつの目的はクリアされます。カバレッジは通過しますし、enumに新たな値が追加されたとき、分岐を追加せずに実行すると例外が発生しバグを早期に補足できます。このアイディアは、つぎのTwitterでつぶやいたところ発生した議論をまとめたものです。switch分の通らないdefalutでカバレッジ下がるの、なんかいい対処方法ないのかな？@haxeさん、@_midoliy_さん、@okazukiさん（登場順）アドバイスありがとうございました。


