More than 5 years have passed since last update.前回の記事では Microsoft Bot Framework (v3.0) のテンプレートを使って、チャットできるBOT (Webサービス) を簡単に作成しました。Microsoft Bot Framework v3.0 からはじめるBOT開発: 最初の一歩編以下、コミュニケーションのプロセスを扱う Dialog についてもう少し詳しく説明していきます。BOT としての基本操作、メッセージを受信したら内容を取得して返答を返すプロセスを作成していきます。Bot Framework を使うための開発環境 を参考に開発環境を作成し、Visual Studio テンプレートから Bot アプリケーションの作成 と同じプロセスで新規アプリケーションを作成します。今回は EchoBot という名称で作成しています。
テンプレートから作成される MessageController.cs (Controllerフォルダ下にあります) を編集します。
まずは、Bot.Builder.Dialogs への参照を追加します。テンプレートでは Post クラスで受信メッセージを元に返答を返すコードが作成されていますが、一旦この部分を削除 or コメントアウトします。ユーザーからのメッセージを受信したどうかは Microsoft.Bot.Connector.Activity.GetActivityType で診断します。
ActivityType.Message なら返答を作成して送信する Post クラスを MessagesController クラス内に下記のように作成します。Microsoft.Bot.Builder.Dialogs.Conversations.SendAsync で受信したメッセージに返答できます。返答を作成するクラスは EchoDialog です(→次の項目で作成します)。
ActivityType.Message 以外の Activity の場合は、テンプレートの HandleSystemMessage をそのまま利用します。
いずれの場合も、HttpStatusCode.Accepted (=202) を返します。テンプレートでは activity.Type == ActivityTypes.Message で直接 Activity を判定していますが、上記では先に activity != null で Activity の有無を判定するコードになっています。次に Post クラスの下に返答を作成する EcoDialog クラスを作成します。ユーザーのメッセージは Microsoft.Bot.Connector.IMessageActivity で取得でき、下記のコードではそれを単純に返す返答を生成します。この単純な返答作成ではあまり問題ありませんが、会話数をカウントする場合など Serializable を忘れずに。ここまでの内容で動作を確認します。Botアプリケーションのローカル実行とエミュレーターによるアクセス と同様に Visual Studio から F5 でビルド＆デバック実行を開始し、Bot Framework Channel Emulator からメッセージを送信します。入力したメッセージと同じ文章が返答されれば OK です。



