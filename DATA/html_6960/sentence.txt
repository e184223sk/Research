More than 3 years have passed since last update.先月C#の案件をこなしている中で、LINQを触る機会があったのでメモ。
と～～～～っても使いやすくて、素敵な構文でした。C#すごいわほんと。
LINQについてはかなりの数の記事がありますので、あくまでこれは私の備忘録としてメモしておきます。統合言語クエリ (LINQ, Language INtegrated Query, リンクと発音する)とは、.NET Framework 3.5において、様々な種類のデータ集合に対して標準化された方法でデータを問い合わせる（クエリ）ことを可能にするために、言語に統合された機能のことである。開発ツールはVisual Studio 2008から対応している。今回の開発で用いたのは C#でのLINQ to Objectというヤツで、よくある形のforやforeach文で処理を行うのではなく、
一つの要素のカタマリに対してクエリを投げることで、射影（Select）を行ったり、選択（Where）を行ったりできます。Java7でずーっと育ってきた私としては、中々このLINQの書き方には慣れ込めず、思ったよりも
コーディングに時間が掛かってしまいましたが、出来上がったコードはとーってもリーダブルで、
読みやすく、整ったコードになったと思います。余計な変数が生まれない高階関数って素晴らしいっすわ。まだまだ勉強不足なところはありますがあたりまでは使いこなせるようになったので、それぞれ備忘録としてササッと残しておきたいと思います。Selectは、要素全てに対して処理を行った結果を取り出します。表示結果
従来のforeachを使ったコードよりも、圧倒的に行数が少なくなります。
Selectでは、要素それぞれに対して値を２倍し、それらの集合を取得しています。
今回、foreachのコードと比較するためToArray()を終端処理として入れていますが、
単に表示するだけであれば、これも必要ありません。Whereは、要素の中から指定した条件に合致するものを取り出します。表示結果
Selectと同様にArrayでやろうと思ったんですけど、foreach版が面倒になったのでListで取得することにします。
LINQ版は、Whereで40以上の条件指定し、それに合致するもののみ選択して取得しています。
終端処理はforeach版に合わせてListにしています。
これも、行数が削減され、可読性が上がっているのがわかると思います。
LINQは１行１行が意味のある処理となるのがいいですね。Distinctは、要素の中から重複しているものを排除します。表示結果
このメソッド、超便利っす。何も考えずにSQLのDistinctと同じ形で使えるし、
見栄えもとってもいいですね。Concatは、要素と要素を連結させます。表示結果
Concatで一発です。すごい。Skipは、要素を指定した数だけ読み飛ばします。表示結果
インデックスに関連する処理は、for文を使う必要があり、面倒なコードが増えてしまいます。
LINQと比較すると、差は歴然ですね。使いましょう。Skip。Takeは、要素を指定した数だけ読みます。
Skipと組み合わせると、範囲指定することもできます。表示結果
ToDictionaryは、Selectして得られる結果をDictionaryとして受け取ります。表示結果
Key、Valueそれぞれに対してSelectし、Dictionary化します。
実務上ではわざわざToDictionary()を加えて辞書にする必要は少ないかもしれませんが、
覚えておきたいと思います。SelectManyやToLookUpなど、他にも幾つか覚えることができたものがあるので、
そちらも近いうちに備忘録化したいと思っています。LINQ素晴らしい！またC#案件が来るのを楽しみに待っていようと思います。


