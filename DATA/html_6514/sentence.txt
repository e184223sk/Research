More than 1 year has passed since last update.この記事は C# で開発をしているのに、まだ LINQ（リンク）が使えていない人向けの入門記事です。LINQ が使えていない理由は何でしょうか？「難しくて理解できない」
「SQL っぽくて読みづらい」
「とっつきにくくて試せていない」
「メリットが分からない」
「必要性を感じない」そういった人にも LINQ を理解してもらえるように、できるだけ簡単に説明していきます。LINQ とは何でしょうか？
公式（MSDN）には、以下のように説明されています。統合言語クエリ (LINQ: Language-Integrated Query) は、クエリ機能を C# 言語 (および Visual Basic や場合によってその他の .NET 言語) に直接統合する一連の技術の名前です。 LINQ を使用すると、クエリは、クラス、メソッド、イベントなどと同じように、高度な機能を備えた言語構成要素になります。クエリを記述する開発者の場合、LINQ で最も違いを認識できる "統合言語" 部分はクエリ式です。 クエリ式は、C# 3.0 で導入された宣言クエリ構文で記述します。 クエリ構文を使用すると、データ ソースに対する複雑なフィルター処理、順序付け、およびグループ化の操作を最小限のコードで実行できます。 同じ基本的なクエリ式のパターンを使用して、SQL データベース、ADO.NET データセット、XML ドキュメントとストリーム、および .NET コレクション内のデータを照会および変換します。この説明で理解できた人がいれば、その人は天才ではないでしょうか。ここではあまり難しく考えず、「LINQ は foreach のパワーアップ版」と覚えてください。LINQ はよく誤解されることがありますので、その誤解を解いておきます。LINQ は SQL とは一切関係ありません。LINQ の典型的な例として、以下のようなサンプルコードが提示されることがあります。「from」「where」「orderby」「select」と SQL でおなじみのキーワードが出てきますので、勘違いしてしまう人が多いのではないかと思います。この誤解を避けるため、この記事では極力これらのキーワードを使わずに説明していきます。C# 以外の言語でも利用できます。
詳しくは別記事「LINQライブラリまとめ」を参照してください。foreach と比較した場合、処理速度はほとんど変わりません。LINQ は 2007 年 11 月にリリースされた C# 3.0 で導入されました。
人の感覚にもよると思いますが、もうかれこれ 10 年以上前の技術なので、十分枯れていると言ってよいでしょう。LINQ の書き方には「クエリ構文」と「メソッド構文」の 2 種類があります。
どちらで書いても構わないのですが、この記事では C# の文法として馴染みのある「メソッド構文」を採用します。LINQ の前に覚えておきたい C# の文法が ３ つあります。
「型推論」「匿名クラス」「ラムダ式」です。
※すでに知っている人は読み飛ばしてもらって構いません。型推論は変数宣言に「var」キーワードを使用します。
右辺の式を評価して、自動的に変数の型を決めてくれます。[コンソール出力結果]匿名クラスは「class」キーワードでクラスを定義することなく、名前無しのクラスを使用することができます。[コンソール出力結果]ラムダ式はメソッドをオブジェクト化する機能です。
あまり深く考えず、デリケートの省略表記だと思っておきましょう。[コンソール出力結果]それでは LINQ メソッドの使い方を見ていきましょう。[コンソール出力結果][コンソール出力結果][コンソール出力結果][コンソール出力結果][コンソール出力結果][コンソール出力結果][コンソール出力結果]最後に LINQ メソッドの組み合わせについて紹介します。LINQ メソッドの戻り値は IEnumerable 型になっているため、メソッドチェーンとして繋げて使うことができます。[コンソール出力結果]以上で LINQ メソッドの説明は終わりになりますが、いかがだったでしょうか。
想像していた LINQ とは違って、案外「普通の C#」として習得できたのではないでしょうか。
もしかしたら今まで LINQ と知らずに使っていたメソッドもあったかもしれません。最後にこれまで説明を避けてきた Select と Where も紹介しておきます。
実は「LINQ メソッドの組み合わせ」のところで紹介した FindAll メソッド、ConvertAll メソッドを以下のように置き換えることができます。[コンソール出力結果]実は LINQ でできることは foreach や for を使っても実現することができます。
それでは LINQ を使うとどんなメリットがあるのか見ていきましょう。少ない行数、ネスト数で簡潔なコードを書くことができます。forearch と for を使った場合と LINQ を使った場合を比較してみます。
forearch と for を使ったコードは １５ 行ありますが、LINQ を使ったコードは僅か ４ 行しかありません。（コンソール出力のコードの行数は除いています）
また、LINQ を使ったコードは複雑になっても {} のネスト数が増えません。[コンソール出力結果]foreach や for で書いたコードはループ処理の内容が {} の中に記述されているので、中の処理を追って読んでいかないと、そのループ処理が何をやっているのか理解できません。LINQ では処理の内容ごとに決まったメソッドが用意されているので、書いたコードが何をやっているのかが明確になります。機能的に十分なのであれば LINQ を優先して使うべきでしょう。Where や OrderBy はそれぞれ処理が独立しており、自由に組み合わせることができます。
foreach や for で書いた場合と比較して、実装や修正が簡単に行えます。今回の記事は入門者向けということもあってかなり端折ってますので、もっと LINQ のこと知りたいという人は他の解説サイトや書籍などで勉強して頂ければと思います。公式（MSDN）
https://msdn.microsoft.com/ja-jp/library/bb397676.aspx＠IT＞LINQ基礎編
http://www.atmarkit.co.jp/fdotnet/csharp30/csharp30_06/csharp30_06_01.html追記：2017/03/28
続きの記事「続・はじめての LINQ」を書きました。


