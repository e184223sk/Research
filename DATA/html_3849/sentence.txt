More than 1 year has passed since last update.　　
　　
　　
この記事は『プログラミング完全未経験からUnityでの開発現場に迎え入れてもらえた世界一の幸せ者』の記事です。そのつもりでお読みください。前回、前々回の記事をベースに話が進みます。
前回→SteamVR Pluginを使わないVRでのフェード
前々回→3Dのフェード別に読まなくても超初心者級のことしかしてないので大丈夫だと思います。コルーチンを使えば、指定した時間に呼び出せる！
調べたら↑が出てきたので「なんて便利な機能なんだ！」と思って使いまくってました。
しかし、秒数指定をしたループ処理で、何百、何千回と呼び出したところ、
微妙にずれてました。あまり時間を気にしない場合は構わないのですが、厳密に秒数指定したい場合に
どうすればいいのかわからなかったので調べました。UnityのDocumentationを参考に説明を進めます。スクリプトライフサイクルフローチャートのページを見てください。説明に不要なものを省いたものがこちらです。(図①)
図①の矢印をたどると、
Update→yield WaitForSecondsとなってます。また、
FixedUpdate→yield WaitForFixedUpdateともなっています。実際にコードを見ながら、具体例を挙げて説明していきます。前提条件として、FPSは90で安定しているものとします。
つまり、1秒÷90フレーム=0.011...となり、
1フレームあたり0.011秒の時間が経過するということです。
(厳密に言うと違いますがそれは後程説明します)↓コルーチン内で0.1秒ごとに処理が行われるよう指定したループがあります。yeild WaitForSeconds(指定秒数)→指定秒数を超えるまで待機→yeild WaitForSeconds以降の処理となるのですが、指定秒数を超えるまで待機するというのは全ての処理が止まるわけではありません。
全ての処理が止まってしまったら
指定秒数を超えたことを誰に確認してもらえばいいんだ？という問題に陥ります。つまり、指定秒数を超えたことを確認するために動いている人がいます。
それがUpdateです。しかし、Updateは1フレームごとにしか呼ばれません。
毎フレーム0.1秒を超えたか確認しようと頑張ります。1フレーム目:0.011→まだ超えていない
2フレーム目:0.022→まだ超えていない
3フレーム目:0.033→まだ超えていない
　　　　・
　　　　・
　　　　・
8フレーム目:0.088→まだ超えていない
9フレーム目:0.099→まだ超えていない
10フレーム目:0.11 →超えた！いや過ぎてますやん
0.1秒後ではなく0.11秒後に超えたことを認識しています。
これが誤差の原因です。たった1回の処理なら誤差は0.01秒ですが、これが100回、1000回となると
1秒、10秒と膨れ上がります。先程の例で鋭い人は
「じゃあ0.011秒間隔で秒数指定すれば誤差0じゃん！」
と思ったかもしれません。ですが、Updateは1フレームが等間隔で呼ばれ続けるものではありませんのでそれは無理です。
様々な処理に影響されるので安定してFPSをキープしたとしても、微妙にずれてしまいます。そこで役に立つのがFixedUpdateです。
FixedUpdateは毎フレーム等間隔で呼ばれます。
そんな便利なFixedUpdateはコルーチンにも活かされています。それがWaitForFixedUpdateです。
このように使います。FixedUpdateのフレーム間隔が0.02であった場合、
誤差無く0.02秒間隔で呼ばれます。前回の記事をもとに
VRのフェードの実装をいい感じに頑張りました。サブカメラの動的な生成から設定までStart内で行うようにしてます。VRでなくても動くので本当に指定した秒数で呼ばれているか確認したい人は
コピペして動かしてみてください。もちろんEditorで設定することもできます。
Project　Settings→Time→Fixed Timestepの項目です。
Start内でカメラ、キャンバス、パネルを生成しているので
シーンを破棄して読み込むたびに2つ、3つと増えてしまっていました。なのでロードの度に古いカメラ、キャンバス、パネルを消す処理を加えました。カメラの子にキャンバス、パネルを設定しているので
カメラを消せば全て消えます。WaitForFixedUpdateを利用してフレームを固定することで
呼び出し時間による誤差は改善できましたが、
alphaを加算代入するたびに微妙にずれるという煩わしい現象に悩まされました。恐らくこれ→浮動小数点数型のズレなのでそのズレを想定してあらかじめ引いておくという
パワープレーで乗り切りました。私の記事にしては長くなりました。読んでくださった方ありがとうございます。実際に動かすとこんな感じで実行回数と秒数が見れます。
何秒まで誤差がないか実験したところ、
180秒まで誤差0でした。(厳密に0なのか保証はできませんが)これを使えば
"時間制限でだんだん視界が奪われる"
といったギミックとかにも活かせそうです。


