More than 3 years have passed since last update.この記事はC# Advent Calendar 2016の3日目の記事です。今回は1年くらい前に作ったライブラリについて書いていきます。(記事を書くにあたって1年近くアップデートしていなかったものを急遽アップデート入れたのは秘密です。)ADO.NETのDBに対して通信が発生する各処理で診断を行えるようにしたライブラリです。パッケージはNuGetに公開済みでコードはGithub上で公開しています。System.Data.Common名前空間を各クラスをラップした作りになっています。現在対応しているターゲットのフレームワークは以下の通りです。似たようなライブラリにMiniProfilerというものがあります。出来ることはほぼ一緒ですが、MiniProfilerがフックしているのはSQL実行の部分のみで、他の通信部分、例えばコネクションのOpen / Closeやトランザクションの開始 / 終了にフックすることは出来ませんでした。これらの処理にフックすることが出来れば各処理にかかった時間だけでなく、コネクションを繋ぎっぱなしにしていた時間やトランザクションを張っていた時間まで知ることが出来ます。この辺に不満があったためMiniProfilerを使わずに新しくAdoNetProfilerを作ることにしました。あとMiniProfilerは一応まだ開発されているようですが、.NET Coreの対応は進んでいないようです。先ほども書きましたがパッケージをNuGetにアップロードしているのでNuGetから落として使うことが出来ます。DbConnectionを継承したコネクションクラスのオブジェクトと、後で説明しますがIADoNetProfilerというインターフェースを実装したオブジェクトを、DbConnectionクラスのラップであるAdoNetProfilerConnectionというクラスのコンストラクタに渡せば、これまで通りのDBアクセス処理のロジックを書くことが出来ます。もう一つの方法はDbProviderFactoryからコネクションを生成する使い方です。アプリケーションの起動時または初期化時に、AdoNetProfilerFactoryのInitializeメソッドにIAdoNetProfilerを実装したクラスのTypeを渡せば、DbProviderFactoriesからDbProviderFactoryを取得して、そこからコネクションクラスを生成すればAdoNetProfilerConnectionのインスタンスが生成されます。ただしこの方法は .NET Framework をターゲットとしたアプリケーションでしか使うことが出来ません。(DbProviderFactoriesが .NET Core に存在しないためです。)フックした時の処理を定義したインターフェースがIAdoNetProfilerです。このインターフェースを実装して、ADO.NETの各処理に挟みたい処理を書くことが出来ます。IAdoNetProfilerが用意しているメソッドは以下の通りです。(ドキュメントコメント入れると長くなるので省略します。)見てわかる通り非常に多いです。というのも基本的にフックする各処理の前後分、メソッドを用意しているためです。フックポイントは以下になってます。各処理をデリゲートで渡して内部で呼び出してもらうようにする、というインターフェースも一応考えてはいますが呼び出されなかったり(ここはRoslyn Analyzerでどうにかなりそう)、DataReaderの読み込み処理が前と後で別々のクラスのメソッドになっていてデリゲートにしにくい、という問題があってなかなか進んでいない状況です。割と有名なのでご存知の方も多いと思いますが、ASP.NET専用のプロファイリングツールです。Webアプリケーションの実行中に各処理をタイムラインで、詳細情報をタブで表示することが出来ます。(以下はタイムラインの例です。)開発チームがマイクロソフトに吸収されてASP.NET Coreへの対応の期待も高まったのですが、現状開発は止まっているようです。Glimpseは独自のプラグインを作成することが出来るのですが、AdoNetProfilerも対応プラグインを作成してあります。NuGet経由でインストール出来ます。元々Glimpse.Adoというプラグインが本家で開発されていたのですが、表示される情報が少ないことからAdoNetProfilerでも対応することにしました。タイムラインでは各DBアクセスの処理だけでなく、コネクションの接続期間やトランザクションの発行期間が見れるようになっています。拡張タブは Connection / Transaction / Command をデフォルトで用意しており、各々ドリルダウンでより詳細を表示していくイメージになります。Connectionタブではコネクション単位で実行されたSQLやトランザクションの情報を見ることができ、同一の接続先に対して複数回接続されたり、同一ステートメントのSQLを複数回検知すると警告が出るようにもなっています。Transactionタブではトランザクション発行中に実行されたクエリが見れるようになっています。Commandタブでは実行されたクエリのパラメータや取得・更新件数など詳細な情報を見ることが出来ます。また、表示している情報の格納しているクラスのスコープはpublicになっているので、これらの情報をもとにさらに独自のタブを表示することも可能です。DBアクセスに限らず外部I/Oのアクセスはボトルネックになりやすいので何らかの形で診断できるようにしておいた方が良いと思います。どんな形であれ.NETの標準として何か用意はして欲しいですね。今後のアップデート予定ですが、とりあえずIAdoNetProfilerのインターフェースをもっと使いやすい形にはしたいですね。あと.NET CoreでADO.NETの内部処理が一部変わっている箇所があるようなのでもしかしたらバグなんかもあるかもしれません。
その時は各SNSで連絡していただくか、GithubでIssuesを上げてもらえると幸いです。


