More than 1 year has passed since last update.Blazor WebAssembly を試してみようかなと思い立ったので以下のドキュメントを写経してみました。ASP.NET Core Blazor の概要今のところプレビューなので自前で入れます。.NET Core SDk 自体も 3.1.102 以降である必要があります。私は、現時点での最新版の 3.1.201 が入っていました。以下のコマンドでプロジェクトテンプレートをいれます。入れると、Visual Studio のプロジェクトテンプレートの Blazor アプリの中に Blazor WebAssembly App が生えます。右下の ASP.NET Core hosted にチェックを入れると、ASP.NET Core のプロジェクトも作れて、そこに WebAssembly も入れてデプロイ出来るので Azure WebApps とかにデプロイするのが楽そうなので、それのチェックを入れて作ります。新規作成すると、以下のようなテンプレートが生成されます。
この段階で ASP.NET Core 側の API を叩いて画面に表示する例のコードまで入ってい
るのはありがたいですね。Server 側プロジェクトにある WetherForecastController が WebAPI です。Client 側プロジェクトの Pages/FetchData.razor を見ると以下のように WetherForecast の URL 叩いています。いいね。何も考えずにローカル実行をするとブラウザーが立ち上がって WebAssembly の Blazor が動きますね。完璧。Azure WebApps にデプロイしてみましょう。デプロイするのは Server 側のプロジェクトです。右クリックから発行を選びます。適当に発行先を選んで（もしくは新規作成）デプロイをすると、本当にすんなりと動きます。WebApp とかだと https://サイト名.azurewebistes.net/ 直下に作られるので気にしなくていいのですが、そうではなくて https://example.com/YourAppName/ のようなパスの下に展開されるときはアプリのベースパスの設定が必要なので、デプロイするときは、そこに気を付けましょう。アプリのベース パスプレビューなのでデプロイまで、もう少しハマると思ったら、何もハマらなかったのでちょっと拍子抜けしました。少し WebAssembly 上での起動時のシーケンスでも追ってみようと思います。Client 側プロジェクトには Program.cs があります。ここにある Main メソッドがクライアントサイドの C# としてのエントリーポイントになるでしょう。見てみると以下のような感じで WebAssmeblyHostBuilder を作ってルートのコンポーネントの登録をしたり、Http 呼び出しに使う HttpClient クラスの登録をしてから実行してるように見えます。App クラスはどうなっているかというと、ただの App.razor ファイルです。&lt;Found Context="routeData"&gt; の部分と &lt;RouteView RouteData="@routeData" の routeData は、名前が一致していないといけないようですね。DefaultLayout は typeof(MainLayout) となっているので、Shared/MainLayout.razor がレイアウト定義に使われています。@Body でレイアウトファイルを適用したファイルの中身が展開される場所なんでしょうね。App.razor の Router タグは自動的に RouteAttribute が適用されているもの（.razor ファイル内で @page が指定されているもの)を探してくれます。例えば Pages/Index.razor を見ると @page "/" と書かれています。これで、デフォルトの https://example.com/ などのような URL にアクセスされたときに自動的に Index.razor に行きつくようになっています。Program.cs の builder の Services に自前クラスを追加することで DI も動きますね。例えばこんな感じ MyClass を追加して…Index.razor などで使うには @inject クラス名 変数名 のような行を追加したらインジェクション出来ます。FetchData.razor のように C# のコードを .razor の中に直接うめることは出来ますが、partial class を使って .cs ファイルに分離を出来ます。部分クラスのサポート結構いい感じに出来そうですね。HTML/CSS は好きだけど JavaScript が苦手な人にはいいかもしれない。WebAssembly 系の弱点の起動処理が重い点を除けば…。


