More than 3 years have passed since last update.Service Fabricについては下記のMSDNのページを参照するとよい
 Sevice Fabricの概要
 開発環境を準備する
 最初の Azure Service Fabric アプリケーションを作成する
 ローカル クラスターでアプリケーションのデプロイおよびアップグレードを開始する
 Azure ポータルを使用して Azure で Service Fabric クラスターを作成する*Host OSをLinuxにしたり、C#以外の言語でも開発自体は可能下記のテーブルを参照し、ユーザIDからをJson形式で名前を返すAPIを作成する
・Actorが定期的にDBからデータを取得し、Stareful Serviceのデータを更新
・Web APIにアクセスの際はStateful Serviceをコールし、Stateful Serviceで永続化されたデータを返すソリューションの新規作成からService Fabricを選択する
最初に作成するサービスのタイプを選択。(今回はStateful Serviceから作成するためステートフルサービスを選択)
上記でステートフルサービスを選択した場合、Service Fabric、ステートフルサービスの2つのプロジェクトが作成される
Interfaece用のプロジェクトを新規で追加する。
別のサービスとのデータをやり取りするためのModelを作成  データ更新用のInterfaceを作成  StatefulServiceに実装する(追記:2017/06/13データ更新がされないバグのため修正)データ取得用のInterfaceを作成StatefulServiceに実装するCreateServiceReplicaListenersに外部からのリクエストリスナーを追加Service Fabricのプロジェクトのコンテキストメニューから追加⇒Service Fabricサービスの新規作成...を選択する
アクターサービスを選択
ActorとInterfaceのプロジェクトが追加される
データ更新用のInterfaceを作成Actorに実装※Azure ServiceのエミュレータからLocalDBに接続する場合は下記を参照
Azure Service Fabric - エミュレーターからLocalDBへの接続先ほど作成したUpdateメソッドを定期的に実行して、DBからデータを取得するため、
Alarmを実装する。
定期的に処理を実行する機能としてAlarmの他にTimerがある。
AlarmとTimerの違いは下記を参照。
アクターのタイマーとアラームOnactivateAsyncメソッドにAlarmの起動処理を実装
RegisterReminderAsyncは引数の順番にAlarm名、Alarmに関連付けられた状態、実行遅延、実行間隔となる
(2017/08/30追記 原因不明だが、アップデート時に前回起動のreminderが終了されない場合があるので、終了処理を追記)IRemindable Interfaceを継承し、Alarmから呼ばれる処理をReceiveReminderAsyncメソッドに実装する。(2017/06/17追記) Alarmの終了処理を記述(終了処理の記述がないと、更新のデプロイ時に失敗するので必ず終了処理を記述)ActorのAlarmやタイマーの起動はOnActiveAsyncメソッドで起動する。
OnActiveAsyncはActor内のいずれかのメソッドがコールされたタイミングで実行されるため、
最低1回はメソッドをコールする必要がある。
下記を参考にActorServieを独自のものにすることで、起動時にメソッドをコールし、自動的に
AlarmやTimerを起動することができる。Azure Service Fabric - ActorのTimerやAlermを自動で起動Service Fabricのプロジェクトのコンテキストメニューから追加⇒Service Fabricサービスの新規作成...を選択する
ステートレスWebApiを選択
WebApiのプロジェクトが追加される
適当なControllerを作成し、Getメソッドを実装Visal Studioの構成マネージャーを開きすべてx64になっていることを確認。
AnyCpuの場合はx64に設定(存在しない場合はAnyCpuをベースにx64を作成)
構成マネージャーですべてx64にしVisual Studioの開始ボタンを押下すると、エミュレーターへの
デプロイが開始されるService Fabric Explorerを確認し、各サービスでエラーがないことを確認
ブラウザやRest ClientからApiをたたいてみる。
APIの実行結果が確認できる。StateMangerのReliableDictionaryはレコードの容量が大きくなるとパフォーマンスが悪くなるので注意。
MSDNでは80kByte未満が推奨。
テスト周りではまりポイントが多いので、次はテストについて書きます。


