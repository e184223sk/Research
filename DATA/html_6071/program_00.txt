using System;
using System.Security.Cryptography;
using System.Text;

namespace AESSample
{
    class Program
    {
        /// &lt;summary&gt;
        /// 文字列をAESで暗号化
        /// &lt;/summary&gt;
        /// &lt;param name="text"&gt;暗号化したい文字列&lt;/param&gt;
        /// &lt;returns&gt;Base64形式で暗号化された文字列&lt;/returns&gt;
        private string Encrypt(string text)
        {
            // 初期化ベクトル            ----- (4)
            const string AesIV = @"&lt;半角16文字（1byte=8bit, 8bit*16=128bit&gt;";
            // 暗号化鍵
            const string AesKey = @"&lt;半角32文字（8bit*32文字=256bit）&gt;";

            // 暗号化方式はAES           ----- (1)
            AesManaged aes = new AesManaged();
            // 鍵の長さ                  ----- (2)
            aes.KeySize = 256;
            // ブロックサイズ（何文字単位で処理するか）
            aes.BlockSize = 128;
            // 暗号利用モード             ----- (3)
            aes.Mode = CipherMode.CBC;
            aes.IV = Encoding.UTF8.GetBytes(AesIV);
            aes.Key = Encoding.UTF8.GetBytes(AesKey);
            // パディング                 ----- (5)
            aes.Padding = PaddingMode.PKCS7;

            // 暗号化するためにはバイトの配列に変換する必要がある
            byte[] byteText = Encoding.UTF8.GetBytes(text);

            // 暗号化
            byte[] encryptText = aes.CreateEncryptor().TransformFinalBlock(byteText, 0, byteText.Length);

            // Base64形式（64種類の英数字で表現）で返す
            return Convert.ToBase64String(encryptText);
        }

        static void Main(string[] args)
        {
            Program p = new Program();
            // 暗号化
            string encryptStr = p.Encrypt("Hello World!");

            Console.WriteLine("暗号化後の文字列:{0}", encryptStr);

            Console.ReadLine();
        }
    }
}


