.NET core コンソールアプリを運用していますが
いつのまにか機能を詰め込みすぎて、全体が把握できなくなり
機能追加が困難な時期がやってきました。そこで、ConsoleAppFramework を導入してコードを整理しようと思います。しかし、ログなどは Microsoft.Extensions の仕組みを使うようです。
残念ながら Microsoft.Extensions 関連は素人なので、
使い慣れたSerilogとの組み合わせ方法を探すのに苦労しました。
ようやく形になってきたので記録します。（ConsoleAppFrameworkの機能の一部しか活用できていませんが、
　最初の一歩として参考になれば幸いです）ConsoleAppFramework - .NET Coreコンソールアプリ作成のためのマイクロフレームワーク（旧MicroBatchFramework)慣れてしまうと普通のコンソールアプリには戻れませんね。まずは結論からということでProgram.csとConsoleAppBaseの実装です。以上で全部です。以下で、各部を説明します。ログはSerilogを使いますので、とりあえず以下のものをインストールmainでは、ロガーを作成してConsoleAppFrameworkを起動します。起動後は、ConsoleAppFrameworkが、引数に応じて適切なConsoleAppBaseクラスを実行してくれます。なおロガーの細かい設定は後述ロガーの設定は appsettings.json にて行うスタイルにします。appsettings.jsonから設定を読み込む処理は Serilog.Extensions.Hosting のSampleの書き方を参考にしました。余談ですが　appsettings.jsonについて。
テスト環境で「appsettings.Develogment.json」
本番環境で「appsettings.Production.json」
を優先して読み込むとのことHost.CreateDefaultBuilderで設定している内容は
・Serilogの登録
・appsettings.jsonから設定情報を読み込む
　（設定情報は以下のようなSettingクラスを用意するスタイルです）ここでservicesに設定したものは、後で作成するConsoleAppBaseのコンストラクタで受け取ることができます。
機能が増えて共通的に使いたいものができたら、ここでいろいろ増やせばよさそうです。上記のコードで準備が整いましたので
実際の処理部分を記述します。ConsoleAppFrameworkのサンプルにあるHelloメソッド相当の機能に、ロガーと設定情報クラスを追加すると、以下の形になります。コンストラクタでロガーと設定情報クラスを受け取ることができますが
この辺りはMicrosoft.Extensionsのお仕事DIがよくわからなかったのですが
　「コンストラクタで書いたものが勝手にセットされてくる」
と思ったら、便利さがわかったつもりになりましたw設定クラスとSerilogの設定は以下の要領で以前は引数で処理を分岐する部分を長々と記述していましたが
今後はConsoleAppFrameworkが引き受けてくれますのでProgram.csはシンプルに保てます。そして、これまで苦労していた、
　・巨大クラスで見通しが悪く、影響範囲を考慮しながら慎重に機能追加
　・いつの間にか似たような処理を複数作っていた
といった時代とはおさらばできます。  新機能を追加したい場合は、新規にConsoleAppBaseを追加すれば、
従来の機能への影響を気にせず追加でき、共通機能はDIから受け取って使いまわせます。クラスが増えても、コンストラクタを見れば
共通利用で使っているクラスが把握できるので安心です。同じ処理のコードや、マスタデータが、複数クラスで必要になったら、DIに切り出す手が使えます。なるべく見通しよいコード量でConsoleAppBaseを維持したいですね。appsettings.jsonの実行時パス問題が発生した場合は以下参照How can I get my .NET Core 3 single file app to find the appsettings.json file?
https://stackoverflow.com/questions/58307558/how-can-i-get-my-net-core-3-single-file-app-to-find-the-appsettings-json-file


