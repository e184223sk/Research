using System;

namespace CSharp80
{
    public class ImmutableValueClass : IEquatable&lt;ImmutableValueClass&gt;, IComparable, IComparable&lt;ImmutableValueClass&gt;
    {
        public int Id { get; }
        public string Name { get; }
        public string? Remarks { get; }
        public int? ParentId { get; }

        public ImmutableValueClass(int id, string name, string? remarks = null, int? parentId = default)
            =&gt; (Id, Name, Remarks, ParentId) = (id, name ?? throw new ArgumentNullException(nameof(name)), remarks, parentId);

        public bool Equals(ImmutableValueClass? other)
            =&gt; !(other is null)
            &amp;&amp; (Id, Name, Remarks, ParentId) == (other.Id, other.Name, other.Remarks, other.ParentId);

        public override bool Equals(object? obj)
            =&gt; obj is ImmutableValueClass other &amp;&amp; Equals(other);

        public override int GetHashCode()
            =&gt; HashCode.Combine(Id, Name, Remarks, ParentId);

        public override string ToString()
            =&gt; $"{nameof(ImmutableValueClass)}: {{ {nameof(Id)}: {Id}, {nameof(Name)}: {Name}, {nameof(Remarks)}: {Remarks}, {nameof(ParentId)}: {ParentId} }}";

        public void Deconstract(out int id, out string name, out string? remarks, out int? parentId)
            =&gt; (id, name, remarks, parentId) = (Id, Name, Remarks, ParentId);

        public int CompareTo(object? obj)
            =&gt; obj is null ? 1
            : obj is ImmutableValueClass other ? CompareTo(other)
            : throw new ArgumentException(nameof(obj) + " is not a " + nameof(ImmutableValueClass), nameof(obj));

        public int CompareTo(ImmutableValueClass? other)
            =&gt; other is null ? 1 : Id - other.Id;

        public static bool operator &gt; (ImmutableValueClass? left, ImmutableValueClass? right)
            =&gt; (left, right) switch
            {
                (ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &gt; r.Id,
                ({}, null) =&gt; true,
                (null, {}) =&gt; false,
                (null, null) =&gt; false
            };

        public static bool operator &lt; (ImmutableValueClass? left, ImmutableValueClass? right)
            =&gt; (left, right) switch
            {
                (ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &lt; r.Id,
                ({}, null) =&gt; false,
                (null, {}) =&gt; true,
                (null, null) =&gt; false
            };

        public static bool operator &gt;= (ImmutableValueClass? left, ImmutableValueClass? right)
            =&gt; (left, right) switch
            {
                (ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &gt;= r.Id,
                ({}, null) =&gt; true,
                (null, {}) =&gt; false,
                (null, null) =&gt; true
            };

        public static bool operator &lt;= (ImmutableValueClass? left, ImmutableValueClass? right)
            =&gt; (left, right) switch
            {
                (ImmutableValueClass l, ImmutableValueClass r) =&gt; l.Id &lt;= r.Id,
                ({}, null) =&gt; false,
                (null, {}) =&gt; true,
                (null, null) =&gt; true
            };
    }
}

