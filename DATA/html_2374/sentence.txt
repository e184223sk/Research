More than 1 year has passed since last update.みなさんこんにちは。ハーツテクノロジーの James です。この記事は業務の中で得られた知見から書かれています。この記事の目的は、開発言語別の実行速度と、おおざっぱな行数（ステップ数）を把握するのが目的です。以下の４種類の言語で、同じアルゴリズムを実装し、その実行速度とコード行数を測ります。今回、調べたかった開発言語は以下の５つです。計測に使うアルゴリズムには「ライプニッツの公式を使って円周率を求める」を選びました。短いコードですが、それなりにCPUを酷使するので目的は達成できると考えています。結果的に、コードは３パターン作成し、計測しました。どれも、ライプニッツの公式を使って円周率を計算するコードです。小数点以下100桁までを、1e8 回繰り返し計算します。小数点以下100桁まで計算のためpi(π)とval(加減する値(1-1/3+1/5-1/7+1/9-⋯))を使います。小数点以下の桁数は設定できます。1/3と同じ感じの無限小数をvalで保存して、一度は加算(+)一度は減算(-)と繰り返します。piとvalを加減算と同時に一番後から数の上げと下りを計算します。double 型は小数点以下15桁の精度まで計算と表記ができますが、今回はもっと多い桁数を計算して表記したかったので int 配列を作成しました。小数点以下20桁までを、分母が 1e9 になるまで繰り返し計算します。3回(小数点以下double(15)まで、1e9まで計算)やはり C++ がよい成績を出しました。でも、2番目に Javascript が速いです。これは予想外。。。Python は3位のC#より3倍以上、最大で約100倍遅いです。追加で、MinGW と Visual Studio の速度の違いも意味があると思います。どちらも「O2」最適化オプションで計測しました。コード量はコメント業も空白行も含む純粋な行数です。好みの書き方に左右されるので、あくまでも参考値です。コード量は C++, C# が長めで Python, Javascript 短めに思います。３つとも Javascript と Python は長さ面で似ていましたが、速度面では反対の感じに結果がでました。この計測の前に g++(C++ compiler) で「-O2」オプションを使わずに計測しました。その計測のときにはJavascriptが速度面で1位でした。でも最適化オプション「-O2」を使ったあとで結果が変わりました。しかし速度だけでなくコード量を一緒に見れば Javascript が合理的な言語だと思いました。ABC、３つの中で１つ（B,山崎さんのコード）だけ Javascriptが速い結果が出ました。それもなぜJavascriptが速いかが解決してないので簡単なテストをしました。
ループの速度が違うのでループを1回は1e5反復,2回は1e6反復して5回1e9までテストしました。(オプションで -O2使う)10^9反復する場合だけ結果を整理します。(単位: 秒)総合的にVS2019はループカウント(q)のデータタイプがdouble時には一番速かったけどそれも10^7からはJavascriptより遅くなりました。
でもMinGWはdoubleを使う時だけ(aかqかは関係ない)10^7からJavascriptより遅くなりましたが、doubleを使用しない時(aとq全体)にはJavascriptより全体の場合で速くなりました。
VS2019がループカウント(q)をdoubleで使う時だけMinGWと同じ実行時間が出ましたが、intとlong longを使う時にはVS2019がMinGWより3~4倍ぐらい遅くなりました。まだ結果について明快な解答がありません。でも個人的にJavascriptが結構いい言語ということを知りました。このあと Python がどこまで発展するかまだわからないが、今は速度が必要で、資金など資源が不足ぎみなら C++ より Javascript を使うのもいいと思いました。みなさまのご意見もお聞かせください。よろしくお願いいたします。


