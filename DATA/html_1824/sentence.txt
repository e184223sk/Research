More than 1 year has passed since last update..NET Coreで、イベント情報収集のためにSystem.Diagnostics.DiagnosticSourceというものが追加された。一応公式文書として DiagnosticsSource User's Guideはあるが、日本語リソースはあまりなく、かつガイドでも若干自分が知りたいことについてわかりにくい部分があったので記事を書こうと思う。
DiagnosticSourceにはさらにActivityというものも存在するが、記事が長くなるのでこれはまた別の機会に。簡単に言うと、動作中のアプリから、診断用のイベント情報を収集するためのクラス。
ここでいう診断用のイベント情報とは、ロギング、トレース等、アプリケーションの状態を把握するために、アプリケーション内部から発信される情報を言う。
特徴としては、ただ、という点があることも注意。受信側の処理としては、opentelemetryと組み合わせることで、多様なプラットフォームに情報を送信することも可能となる。実際opentelemetryのdotnet実装では、System.Net.Http.HttpClientの統計情報の取得を行うモジュールを、HttpClientが提供するDiagnosticSourceを使って実現している。現在のdotnetのメジャーなロギングフレームワークとして、Microsoft.Extensions.Logging.ILoggerとその仲間たちがある。
これはロギングにおいては確かに優秀ではあるが、ログのメイン情報が不定形な文字列であるという前提があるため、型付の情報を扱う場合に、文字列のパース等でオーバーヘッドが大きくなるという欠点がある。
よって、エラー等の不定形な情報を単純にファイルに記録したい等の用途には向いていると思うが、例えば処理経過時間の統計を取りたいという時には、jsonやcsv等の特定の形式に出力して解析する等、回りくどい方法をとる必要があり、また効率も良くない。
それに対して、DiagnosticSourceはイベント受信時点でobjectの状態で渡されるため、キャストの必要はあるものの、型情報を失うことなく統計情報を効率的にトレースサービスに送信することが可能となる。また、ILoggerは基本的に上層から渡されたILoggerインスタンスを使うという仕組みのため、必ずILoggerを受け取る口を作らなければならず、ライブラリ側がILoggerの取り廻しに苦労してしまう場合がある。さて、イベント収集というと、既存の仕組みでも様々あるが、中でも役割が一番重なるのがEventSourceだろう。
EventSourceも昔からあるが、ETWやLTTng等、プラットフォームが持つトレースフレームワークに依存しているのが特徴で、これに由来する制約もあったりする(シリアライズ可能な型しか渡しちゃダメとか)。ただし、フレームワークに依存する強みとして、外部からの情報取得が容易(dotnet-traceや、APIからの取得等)という点や、ログ出力のオーバーヘッドが小さい特徴がある。どちらがいいのという話であれば、個人的には制約が少ないDiagnosticSourceを使うのがいいと思う。出力方法については頑張るという感じで。
一応DiagnosticSourceからEventSourceへの出力というものもあるので、どうしてもEventSourceを使う要件が出てきたならば、こちらを使うこともできる(使い方は少々面倒だったりするが)。まず、機能を使うための準備を行う。netcoreappでは1.0のころからあるものなので、特に準備の必要はないが、netstandardでは2.1でも追加はされていないため、ライブラリプロジェクト等で使う場合はnugetで追加する必要がある。追加されれば、System.Diagnostics.DiagnosticSourceとSystem.Dianostics.DiagnosticListenerが使用できるようになっているはず。イベントを送信するには、以下のような実装が必要。注意点として、DiagnosticListenerは名前(Nameプロパティ)でその一意性を判断するように設計されているため、DiagnosticListenerの名前つけは非常に重要な要素となる。
dotnet core開発チームが推奨しているルールとしては、等がある。ただし、これらはあくまでも推奨なので、従わなくても良い。受信する側は以下の処理が必要dotnet/extensionsから提供されているもので、NuGetで取得可能(Microsoft.Extensions.DiagnosticAdapter)
Subscribeの引数をより楽に記述できるようにしよう、という趣旨のライブラリ。参照を追加すると、以下の機能が拡張メソッドとして使用できるisEnabledはDiagnosticSource.IsEnabledで使用されるものということで分かりやすい。しかし、第一引数のobjectは説明も少ないため使い方がわかり辛い。例えば、以下のようにDiagnosticSourceを使用しているクラスがあったとする。targetとして、以下のようなクラスを実装する。ポイントは2点以上のクラスを作り、以下のようにするすると、リフレクションを使って対応するイベント名に対して自動的に振り分けてメソッドを実行してくれるように設定を行ってくれる。なお、戻り値は見ないので、async Taskを使うとおかしなことになるので注意。DiagnosticSourceは単純にログを出力するには面倒な部分もあるが、やはりちゃんとした統計情報を取りたい場合は避けて通れない道だろうとは思う。
また、ライブラリ側で何らかのログ機構を作りたい場合、上からILoggerを受け取るよりもすっきりした設計にできるので、ライブラリを作成している場合は有用だろう。今回は紹介していないが、EventSourceに流す方法や、Activityの使い方も、そのうち記事にしてみたい。


