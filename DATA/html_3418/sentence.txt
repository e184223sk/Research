More than 1 year has passed since last update.プログラミングにおいて、配列、リスト、シーケンスなどのコレクションを扱う機会は非常に多いです。「プログラミング言語でコレクションがどれくらい扱いやすいか」は重要な点だと筆者は考えます。さてC#には、コレクション関連の言語機能として「LINQ」が、10年以上前、C# 3.0の頃からあります。そんなLINQですが、後発のプログラミング言語のコレクション機能と比べると、不足している部分があると筆者は考えました。そんな考えから筆者は「ImportedLinq」というライブラリを作成しました。この投稿では、「ImportedLinq」作成の背景と使用例を紹介します。このようなクラスを使って説明します。ゲームでのロジックをイメージしてください。モンスターのリストがあります。この中から一番高いレベルの値を求めます。どんなコードを書けばいいでしょうか?このような場合、LINQのMaxメソッドを使うことで、非常に簡潔に、次のコードのように1行で書くことができます。このように、LINQを使えば、短く、読みやすいコードで実装できます。モンスターのリストがあります。この中から「一番レベルの高いやつ」を探します。どんなコードを書けばいいですか?先ほどと似たような問題ですが、違いに注目してください。見つけたいのは、「一番高いレベル」ではなく、「一番高いレベルを持ったモンスターの要素」です。実は、これを実現できるLINQのメソッドは残念ながらありません。さて、解決策・コードを紹介する前に、次の例を示します。モンスターのリストがあります。表示のために、先頭から8個ごとにグループ分けし、リストのリストを作りたいです。 どんなコードを書けばいいでしょうか？残念ながら、これも一発でかけるC#・LINQのメソッドはありません。次の例です。モンスターのリストのリストがあります。 これを平滑化し、IEnumerable&lt;Monster&gt;なmonstersを作りたいです。どんなコードを書けばいいでしょうか？これはLINQを使って一行で書けます。SelectManyを使えば、リストのリストの平滑化は実現することできます。ですが、上記のSelectManyのコードは 「平滑化する」という意図が伝わりにくいと思います。最後の例です。IEnumerable&lt;Monster&gt;なmonstersがあります。 これが空かどうかを調べたいです。 どんなコードを書けばいいですか?これもLINQで書けます。しかし、゙注意が必要です。コメントにもある通り、IEnumerable&lt;T&gt;のシーケンスがから空かどうかの判定は、Countではなく、Anyを使うべきです。LINQおよび配列などのメソッド・プロパティとして「空かどうかを判別する」ためのメンバは存在しません。ゲーム開発、ウェブ開発、モバイル開発、デスクトップアプリ開発などにおいて、このような処理をやりたい状況があると思います。残念ながらこれらができるLINQはありません。このような処理ができるメソッドがあれば嬉しくないですか？これらはLINQで書けますが、もっとわかりやすくならないでしょうか？Java、Kotlin、Scala、Groovy、F#、Haskellなど他のプログラミング言語にはこれらができるコレクション機能があります。しかし、C#・LINQにはそのようなメソッドがありません。他の言語のコレクションメソッド群と比べて 、「C#・LINQがちょっと弱いのでは？負けているのでは？」と感じてしまいました。また、もっとC#・LINQをもっと改善したい、拡充したいと思いました。ということで作りました！「ImportedLinq」というライブラリです。『「他の言語のコレクションで一般的だけど、C#・LINQにはないメソッド」を、 他のプログラミング言語から輸入(Imported)して、 C#・LINQにフィットするようにしたコレクションメソッドライブラリ』です。それでは、「ImportedLinq」の利用例を紹介します。「MaxBy」を使ってモンスターのリストから、一番高いレベルのモンスターを探すコード。「Buffer」を使って モンスターのリストを、8個ごとにグループ分けするコード。「Flatten」を使ってモンスターのリストのリストを平滑化し、IEnumerableを作るコード。「IsEmpty」を使ってIEnumerableなmonstersが、空どうかを調べるコード上記の処理はLINQを使って書くことができませんが、ImprotedLinqを使えば一発で書くことができます。上記の処理は、ImprotedLinqを使えばより読みやすいコードで実装することができます。「ImportedLinq」は 「便利なコレクションメソッドの詰め合わせ」 ではありません。『「ImportedLinq」は「他の言語のコレクションで一般的だけど、C#・LINQにはないメソッド」を、 他のプログラミング言語から輸入(Imported)して、 C#・LINQにフィットするようにしたコレクションメソッドライブラリ』です。「他の言語の便利なコレクションメソッドを、C#でも使いたい」というのが目的です。また「他の言語に慣れている人の「C#になんでこのコレクションメソッド無いの」を解決したい」というのも目的です。今後、他の言語で活用されていて、C#でも活躍する場面がありそうなメソッドがあれば、追加していきたいと思います。C#におけるコレクションライブラリ、「ImportedLinq」以外にもあります。たとえば次の二つです。ImportedLinqはこれらとは目的やモットーが異なります。Ix.NETはRx.NETのIEnumerable版です。Ix.NETはRx.NETにないメソッドは入りません。「こんなメソッドがあればいいのに」と思ってもRx.NETになければ入らないのです。MoreLINQは便利なメソッドがたくさんあるライブラリです。覚えきれないくらいたくさんあります。しかし、現段階ではFlattenとかIsEmptyなどは実装しないそうです。詳しくは、こちらをご覧ください。繰り返しになりますが、ImportedLinqは『「他の言語のコレクションで一般的だけど、C#・LINQにはないメソッド」を、 他のプログラミング言語から輸入(Imported)して、 C#・LINQにフィットするようにしたコレクションメソッドライブラリ』というライブラリです。ソースコードはこちら。他のメソッドの紹介もあります！NuGetはこちら。Unityでの利用は、こちらからunitypackageをダウンロードできます。使ってみてください！


