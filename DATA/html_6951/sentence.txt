・前回足りてなかったこと
・ログインDBをよく見てみると、なんとパスワードが登録されていませんでした。
Register.cshtml.csでハッシュ化したパスワードを設定するようにしました。再度アカウント登録してみると、ハッシュ化されたパスワードが保存されました。
まずログイン画面が英語なのと、メールアドレスを入力するようになっているので、修正していきます。
コードから直すのとcshtmlから直すのとではどちらが楽なんでしょう？
まずはLogincshtml.cs次にLogin.cshtml
Resend email confirmationのリンクは、メール認証を使わないので消しました。ログインしてみます。
ログインできませんでした。
どうやらUserIdではなくUserNameで探しているみたいです。
あんまりやりたくなかったですが（難しそうだから）、SignInManagerをオーバーライドすることにします。色々調べたり試したりしたのですが、結局実装できませんでした…。
そもそもASP.NET CoreのIdentityを使っている（カスタマイズしている）記事が全然見つからず、
Coreじゃないものばかり引っかかって、Coreだと違うインターフェースになってるとかで初学者には厳しすぎました。
なので、認証部分はデフォルトのIdentityを使うことにします。一旦。自分が作ったもの（クラスやらなにやら）は全部消します。
変更したものはもうちょっと後で戻します。（この後、このタイミングで消してよかったと気づく）
1つだけ、DbContextだけはIdentityDbContextを継承した形にします。
以前やったIDのスキャフォールディングをするためです。この状態でIDをスキャフォールディング。
今回もやっぱり全部チェックを入れておきます。
置き換えるか聞かれるのではいを選択
ビルドエラー解消しなきゃいけないので解消しましょう。
解消するのめんどくさいので、Identityフォルダごと消した方が早いですね。
あとStartup.csにIdentityを設定している個所があるので、それも消します。
Views/Sharedにある_LoginPartical.cshtmlも消します。
スキャフォールディング出来たら、Startup.csは下記の通り修正しておきます。
なぜかここは書かれなかった。これでいったん起動。あれ、起動するけどDBマイグレーションいらんのか…？
登録。
今言わないで。（自分が悪い）
というわけでDBマイグレーションは必要ですね。
元のユーザーテーブルになりました。
今回まででで何が困ったかというと…
・メール認証がいらない（配信サービス使うのは面倒だし個人情報を持ちたくない）
・表示名がメールアドレスになっている（EmailをUserNameにも登録しているから。ここは直せる）
・ユーザIDでログインできない（UserNameでしか検索できない）おそらくデフォルトだとログイン時のユーザIDと表示名を別々に保持する手立てがなさそう（＝独自のユーザクラスを実装する必要がある）なので、今回は、
・メール認証なし
・ユーザID（表示も同じ）とパスワードでログイン
で実装します。メール認証がいらないので、以前の記事の通り、アカウント登録のメール関連は削除して、
代わりにユーザID（UserNameに登録する）を保持するように作り変えます。
ポイントはInput.UserNameをIdentityUserのUserNameにセットするところ…ログインも直してしまいます。
ポイントはUserNameを使うところ。左に寄ってるけど後で治すから…
登録完了。ログインした状態になっている。
一度ログアウトし、ログイン
できました。アカウント登録時に使用する文字列とログイン時に使用する文字列と表示文字列が一致。疲れた。。。
・アカウント登録後、ログイン状態にせずログインさせる
・アカウントと給与データを紐づける


