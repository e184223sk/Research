More than 1 year has passed since last update.前回は例が簡単すぎてListenerやVisitorの具体的な使い方がぴんと来なかったので、今回はListenerで計算機を作るための試行錯誤をしてみる。javaで出力したツリー構造も添えて実行結果を確認(前回の記事を参照)。実行Parserの定義の中でexpressionの取りうる要素をORでつないでいるので、これまでのやり方だと実際にどの要素が来たのかはわからない。
そこで、ORでつなぐ全要素（一部だとエラー）に # で代替ラベルを定義する。
すると、それぞれごとにリスナーのメソッドが定義される。
https://github.com/antlr/antlr4/blob/master/doc/parser-rules.md#alternative-labels実行結果Exit***は 親ノードの左下のノード→親の右下のノード→親 の順で起動する。
親ノードには + - * / がなる。
よって、1 + 2は、1 2 +の順にExit***が呼ばれるし、 1*2+3/4は、1 2 * 3 4 / +の順にExit***が呼ばれる。よって、数値のExit***はスタックにpushし、+ - * / のExit***では、スタックから2つpopして、それらを+ - * / で計算し、結果をスタックにpushすれば計算ができる。1*2+3/4は、1 2 * 3 4 / +が2 0.75 +となり、2.75となる。スタックからpopして最初に出てくるのは右辺。
よって、 左辺と右辺の順番で結果が変わる割り算と引き算については、
stack.Pop() - stack.Pop()
で結果を計算できない。


