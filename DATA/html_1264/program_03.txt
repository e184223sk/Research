
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Antlr4.Runtime;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;

namespace Calculator01_2
{
    class CalculatorListener : CalculatorBaseListener
    {
        public override void EnterAddition([NotNull] CalculatorParser.AdditionContext context)
        {
            base.EnterAddition(context);
            Console.WriteLine("--EnterAddition--");
            Console.WriteLine(" GetText():{0}, Node:{1}", context.GetText(), context.PLUS());

            base.ExitExpression(context);
            if (context.children != null)
            {
                for (var i = 0; i &lt; context.children.Count; i++)
                {
                    Console.WriteLine(" children {0}: {1}", i, context.children[i].GetText());
                }
            }
        }
        public override void ExitAddition([NotNull] CalculatorParser.AdditionContext context)
        {
            base.ExitAddition(context);
            Console.WriteLine("--ExitAddition--");
            Console.WriteLine(" GetText():{0},Node:{1}", context.GetText(), context.PLUS());

            base.ExitExpression(context);
            if (context.children != null)
            {
                for (var i = 0; i &lt; context.children.Count; i++)
                {
                    Console.WriteLine(" children {0}: {1}", i, context.children[i].GetText());
                }
            }
        }
        public override void EnterDivision([NotNull] CalculatorParser.DivisionContext context)
        {
            base.EnterDivision(context);
            Console.WriteLine("--EnterDivision--");
            Console.WriteLine(" GetText():{0},Node:{1}", context.GetText(), context.DIV());

            base.ExitExpression(context);
            if (context.children != null)
            {
                for (var i = 0; i &lt; context.children.Count; i++)
                {
                    Console.WriteLine(" children {0}: {1}", i, context.children[i].GetText());
                }
            }
        }
        public override void ExitDivision([NotNull] CalculatorParser.DivisionContext context)
        {
            base.ExitDivision(context);
            Console.WriteLine("--ExitDivision--");
            Console.WriteLine(" GetText():{0},Node:{1}", context.GetText(), context.DIV());

            base.ExitExpression(context);
            if (context.children != null)
            {
                for (var i = 0; i &lt; context.children.Count; i++)
                {
                    Console.WriteLine(" children {0}: {1}", i, context.children[i].GetText());
                }
            }
        }

        public override void EnterMultiplication([NotNull] CalculatorParser.MultiplicationContext context)
        {
            base.EnterMultiplication(context);
            Console.WriteLine("--EnterMultiplication--");
            Console.WriteLine(" GetText():{0},Node:{1}", context.GetText(), context.MULTI());

            base.ExitExpression(context);
            if (context.children != null)
            {
                for (var i = 0; i &lt; context.children.Count; i++)
                {
                    Console.WriteLine(" children {0}: {1}", i, context.children[i].GetText());
                }
            }
        }
        public override void ExitMultiplication([NotNull] CalculatorParser.MultiplicationContext context)
        {
            base.ExitMultiplication(context);
            Console.WriteLine("--ExitMultiplication--");
            Console.WriteLine(" GetText():{0},Node:{1}", context.GetText(), context.MULTI());

            base.ExitExpression(context);
            if (context.children != null)
            {
                for (var i = 0; i &lt; context.children.Count; i++)
                {
                    Console.WriteLine(" children {0}: {1}", i, context.children[i].GetText());
                }
            }
        }
        public override void EnterNumber([NotNull] CalculatorParser.NumberContext context)
        {
            base.EnterNumber(context);
            Console.WriteLine("--EnterNumber--");
            Console.WriteLine(" GetText():{0},Node:{1}", context.GetText(), context.NUMBER());

            base.ExitExpression(context);
            if (context.children != null)
            {
                for (var i = 0; i &lt; context.children.Count; i++)
                {
                    Console.WriteLine(" children {0}: {1}", i, context.children[i].GetText());
                }
            }
        }
        public override void ExitNumber([NotNull] CalculatorParser.NumberContext context)
        {
            base.ExitNumber(context);
            Console.WriteLine("--ExitNumber--");
            Console.WriteLine(" GetText():{0},Node:{1}", context.GetText(), context.NUMBER());

            base.ExitExpression(context);
            if (context.children != null)
            {
                for (var i = 0; i &lt; context.children.Count; i++)
                {
                    Console.WriteLine(" children {0}: {1}", i, context.children[i].GetText());
                }
            }
        }
        public override void EnterParentheses([NotNull] CalculatorParser.ParenthesesContext context)
        {
            base.EnterParentheses(context);
            Console.WriteLine("--EnterParentheses--");
            Console.WriteLine(" GetText():{0},Node:{1}", context.GetText());

            base.ExitExpression(context);
            if (context.children != null)
            {
                for (var i = 0; i &lt; context.children.Count; i++)
                {
                    Console.WriteLine(" children {0}: {1}", i, context.children[i].GetText());
                }
            }
        }
        public override void ExitParentheses([NotNull] CalculatorParser.ParenthesesContext context)
        {
            base.ExitParentheses(context);
            Console.WriteLine("--ExitParentheses--");
            Console.WriteLine(" GetText():{0}", context.GetText());

            base.ExitExpression(context);
            if (context.children != null)
            {
                for (var i = 0; i &lt; context.children.Count; i++)
                {
                    Console.WriteLine(" children {0}: {1}", i, context.children[i].GetText());
                }
            }
        }
        public override void EnterSubtraction([NotNull] CalculatorParser.SubtractionContext context)
        {
            base.EnterSubtraction(context);
            Console.WriteLine("--EnterSubtraction--");
            Console.WriteLine(" GetText():{0},Node:{1}", context.GetText(), context.MINUS());

            base.ExitExpression(context);
            if (context.children != null)
            {
                for (var i = 0; i &lt; context.children.Count; i++)
                {
                    Console.WriteLine(" children {0}: {1}", i, context.children[i].GetText());
                }
            }
        }
        public override void ExitSubtraction([NotNull] CalculatorParser.SubtractionContext context)
        {
            base.ExitSubtraction(context);
            Console.WriteLine("--ExitSubtraction--");
            Console.WriteLine(" GetText():{0},Node:{1}", context.GetText(), context.MINUS());

            base.ExitExpression(context);
            if (context.children != null)
            {
                for (var i = 0; i &lt; context.children.Count; i++)
                {
                    Console.WriteLine(" children {0}: {1}", i, context.children[i].GetText());
                }
            }
        }

        public override void VisitTerminal([NotNull] ITerminalNode node)
        {
            base.VisitTerminal(node);
            Console.WriteLine("--VisitTerminal--");
            Console.WriteLine(" GetText():{0}", node.GetText());
        }
    }
}


