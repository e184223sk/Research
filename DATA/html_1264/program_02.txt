
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Antlr4.Runtime;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;

namespace Calculator01_2
{
    class CalculatorListener : CalculatorBaseListener
    {
        public override void VisitTerminal([NotNull] ITerminalNode node)
        {
            base.VisitTerminal(node);
            Console.WriteLine("--VisitTerminal--");
            Console.WriteLine(" GetText():{0}", node.GetText());
        }
        public override void ExitExpression([NotNull] CalculatorParser.ExpressionContext context)
        {
            Console.WriteLine("--ExitExpression--");
            Console.WriteLine("GetText():{0}, NUM:{1} *:{2} /:{3} +:{4} -:{5}", context.GetText(), context.NUMBER(), context.MULTI(), context.DIV(), context.PLUS(), context.MINUS());

            base.ExitExpression(context);

            for (var i = 0; i &lt; context.children.Count; i++)
            {
                Console.WriteLine(" children {0}: {1}", i, context.children[i].GetText());
            }
        }
        public override void EnterExpression([NotNull] CalculatorParser.ExpressionContext context)
        {
            base.EnterExpression(context);
            Console.WriteLine("--EnterExpression {0}--", context.GetText());
            Console.WriteLine("GetText():{0}, NUM:{1} *:{2} /:{3} +:{4} -:{5}", context.GetText(), context.NUMBER(), context.MULTI(), context.DIV(), context.PLUS(), context.MINUS());

            base.ExitExpression(context);
            if (context.children != null)
            {
                for (var i = 0; i &lt; context.children.Count; i++)
                {
                    Console.WriteLine(" children {0}: {1}", i, context.children[i].GetText());
                }
            }
        }

        public override void EnterEveryRule([NotNull] ParserRuleContext context)
        {
            base.EnterEveryRule(context);
            Console.WriteLine("--EnterEveryRule"); // {0},{1}--",context.Start,context.stop);
            Console.WriteLine(" GetText():{0}", context.GetText());
        }
        public override void ExitEveryRule([NotNull] ParserRuleContext context)
        {
            base.ExitEveryRule(context);
            Console.WriteLine("--ExitEveryRule"); // {0},{1}--",context.Start,context.Stop);
            Console.WriteLine(" GetText():{0}", context.GetText());

        }
    }
}


