More than 3 years have passed since last update.WPF/UWPで同じControlの組み合わせをあちこちで書いている、ということは無いでしょうか。
D.R.Y.！そしてデザインの統一性のためにUserControlでの部品化を行います。
一般的な説明では、UserControlのコードビハインドで依存関係プロパティを定義して、イベントが、、、
とあって、強力で色々できるのは分かりますが、正直結構めんどいです。
かといって対応したViewModelを起こすほどでもないし、Viewで完結していて欲しい。
そんな用途に限定した、可能な限りシンプルにしたUserControlの作り方・使い方を説明します。※17/04/18追記　UWP版を追加しました
説明はWPFで行いますが、UWPでもあまり変わりません。
最後にUWP版の完全コードを載せてあります。まず最も単純なプロパティも含めて完全固定版を作ります。どちらもコードビハインドは使用しません。実行した結果が下記です。
コードビハインドも使用していないし、XAMLも短い、サイコー。
多分これが一番簡単だと思います。……で終わったら、苦労しません。
このようにXAMLの内容が全く同一であれば、簡単にUserControlを作ることが出来ます。
しかしほとんどの場合、プロパティ値の一部分だけ（ほぼ文字列）変更する必要があります。
それが次です。UserControlのプロパティ値を使用する側から指定したものが以下です。コードビハインドは今回もありません。
実行した結果が下記です。

この付箋みたいな物がユーザーコントロールです。ここでのポイントは
UserControlのx:Name="parent"と
その直下のStackPanelのDataContext="{Binding ElementName=parent}"
です。
こうすることで、UserControlのプロパティに対してStackPanel以下の階層からBindできるようになります。
RelativeSourceとかAncestor～とかは不要です。
この例ではStackPanelですが、GridやWrapPanelでも、UserControlの直下の要素に同様の記述をすれば問題ありません。そしてそのバインドされるプロパティは本来は独自の依存関係プロパティを定義すべきですが、
既存のDataContextとForegroundを流用します！
荒っぽい気がしますが、動作はして、コードが短くなります。使用する時は
DataContextにTextBoxに表示したい文字列、
Foregroundに付箋の色
を指定します。
Contentに文字列を指定しそうになりますが、UserControlのContentはStackPanelなので上書きするとStackPanel以下が消滅します。（実用的なものでは）多分これが一番簡単だと思います。単なるラベルとしての利用であれば、XAMLのみで良いですが、
ViewModelと結びつけて入力コントロールとして使用した版が下記です。UserControlは同一です。
実行した結果が下記です。

（起動時）

（変更後）ここでのポイントはMainWindowで使用する際にDataContextにMode=TwoWayを指定する必要が有ることです。
上の例では黄緑色のUserControlの値を変更しても、反映されません。
TextBoxのBindingのデフォルト値はTwoWayですが、UserControlはOnewayなのでそちらが適用されます。
これをUserControl側でTwoWayにする方法は調べたけどわかりませんでした。17/11/12追記：勘違いしていましたが、BindingのデフォルトモードはControlごとではなく、プロパティごとに決まっています。
つまり、これがOnewayなのはUserControlのDataContextプロパティのFrameworkPropertyMetadataのデフォルト値に依るものなので、変更することはできません。UserControlは変更していないので、
（実用的なものでは）多分これも一番簡単だと思います。コードビハインドを使用してさらに拡張します。
多分これは一番簡単ではないです。
IDプロパティとそれに対応するLabelを追加しました。MainWindowViewModelは変更していないので省略します。実行した結果が下記です。
ここでのポイントはStackPanelとUserControlのDataContexの結びつけ
XAMLからコードビハインドに移動することです。↓移動前の状態だとIdプロパティは変更できませんでした。
原因は不明。
Idプロパティは実行時に変更しないので通常のCLRのプロパティです。以上がシンプルなUserControlを最も簡単に実装する方法を探った結果です。
さらにと複雑になってきたら、以下のリンクをご参考下さい。WPF版のコードビハインド解禁版と基本的に同じです。
一部x:Bindを使用しています。UserControlはBinding⇒x:Bindに変更しました。MainPageのコードビハインドは何も書いていないので省略します。ViewModelはWPF版と同じです。A Simple Pattern for Creating Re-useable UserControls in WPF / Silverlight
Walkthrough: Two-way binding inside a XAML User Control
WPF4.5入門 その53 「ユーザーコントロール」 - かずきのBlog@hatena
[UWP]同じようなXAMLを書きたくない。テンプレートコントロールを使うVisualStudio2017
.NET Framework 4.6
C#6


