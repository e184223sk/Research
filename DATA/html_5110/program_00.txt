using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;

namespace ConsoleApp1
{
    class Program
    {
        static void Main(string[] args)
        {
            //  サンプルDLL
            var targetFilePath = @"C:\Windows\System32\shell32.dll";

            var strings = EnumResourceStrings(targetFilePath);
            if (!strings.Any())
            {
                Console.WriteLine("読み込めませんでした");
                return;
            }
            foreach (var str in strings)
            {
                Console.WriteLine("{0} : {1}", str.Item1, str.Item2);
            }
            Console.WriteLine("おわりました");

            Console.Read();
        }

        static IEnumerable&lt;System.Tuple&lt;Int32, string&gt;&gt; EnumResourceStrings(string filePath)
        {
            var retVal = new System.Collections.Generic.List&lt;System.Tuple&lt;Int32, string&gt;&gt;();

            //  メッセージテーブルリソースをもつファイルを読み込みます。
            var hModule = NativeMethods.LoadLibraryEx(filePath, IntPtr.Zero, NativeMethods.LoadLibraryExFlags.DONT_RESOLVE_DLL_REFERENCES | NativeMethods.LoadLibraryExFlags.LOAD_LIBRARY_AS_DATAFILE);
            if (!IntPtr.Zero.Equals(hModule))
            {
                try
                {
                    // STRINGテーブルのエントリを列挙させます。
                    NativeMethods.EnumResourceNames(hModule, new IntPtr(NativeMethods.RT_STRING), (hMod, typ, nam, prm) =&gt; 
                    {
                        // 文字列リソースIDは、得られたリソース名（INTRESOURCE）-1の16倍
                        var resId = (nam.ToInt32() - 1) * 16;
                        var hRes = NativeMethods.FindResource(hMod, nam, typ);
                        if (!IntPtr.Zero.Equals(hRes))
                        {
                            var hGlobal = NativeMethods.LoadResource(hMod, hRes);
                            if (!IntPtr.Zero.Equals(hGlobal))
                            {
                                var bytesLen = NativeMethods.SizeofResource(hMod, hRes);
                                var ptr = NativeMethods.LockResource(hGlobal);
                                if (!IntPtr.Zero.Equals(ptr))
                                {
                                    Int32 offset = 0;
                                    while(offset &lt; bytesLen)
                                    {
                                        var strLen = (UInt16)Marshal.ReadInt16(ptr + (int)offset);
                                        offset += 2;
                                        if (strLen &gt; 0)
                                        {
                                            var str = Marshal.PtrToStringUni(ptr + (int)offset, strLen);
                                            offset += strLen * 2;
                                            retVal.Add(new System.Tuple&lt;Int32, string&gt;(resId, str));
                                        }
                                        resId += 1;
                                    }
                                }
                            }
                        }
                        return true;
                    }, IntPtr.Zero);
                }
                finally
                {
                    // 読み込んだファイルを閉じます。
                    NativeMethods.FreeLibrary(hModule);
                }
            }

            return retVal;
        }

        class NativeMethods
        {
            public const int RT_STRING = 0x00000006;

            [Flags]
            public enum LoadLibraryExFlags : UInt32
            {
                DONT_RESOLVE_DLL_REFERENCES = 0x0000001,
                LOAD_LIBRARY_AS_DATAFILE = 0x00000002
            }

            [DllImport("kernel32.dll", SetLastError = true)]
            public static extern IntPtr LoadLibraryEx(
                string lpFileName,
                IntPtr hFile,
                LoadLibraryExFlags dwFlags
                );

            [DllImport("kernel32.dll", SetLastError = true)]
            public static extern bool FreeLibrary(
                IntPtr hModule
                );

            [return: MarshalAs(UnmanagedType.Bool)]
            public delegate bool EnumResNameProc(
                IntPtr hModule,
                IntPtr lpszType,
                IntPtr lpszName,
                IntPtr lParam
            );

            [DllImport("kernel32.dll", SetLastError = true)]
            [return: MarshalAs(UnmanagedType.Bool)]
            public static extern bool EnumResourceNames(
                IntPtr hModule,
                IntPtr lpszType,
                EnumResNameProc lpEnumFunc,
                IntPtr lParam
            );

            [DllImport("kernel32.dll", SetLastError = true)]
            public static extern IntPtr FindResource(
                IntPtr hModule,
                IntPtr lpszName,
                IntPtr lpszType
            );

            [DllImport("kernel32.dll", SetLastError = true)]
            public static extern IntPtr LoadResource(
                IntPtr hModule,
                IntPtr hRsrc
            );

            [DllImport("kernel32.dll", SetLastError = true)]
            public static extern UInt32 SizeofResource(
                IntPtr hModule,
                IntPtr hRsrc
            );

            [DllImport("kernel32.dll", SetLastError = true)]
            public static extern IntPtr LockResource(
                IntPtr hResData
            );
        }
    }
}


