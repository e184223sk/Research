//EnumerableExtention.HighlyCompositeNumber(10000);
//result:2,4,12,24,36,60,120,180,240,360,720,840,1260,1680,2520,5040,7560
public static IEnumerable&lt;int&gt; HighlyCompositeNumber(int limit)
{
    var maxDivisorCount = 0;
    for (int i = 2; i &lt; limit; i++)
    {
        var divisorCount = CountDivisor(i);
        if (maxDivisorCount &lt; divisorCount)
        {
            yield return i;
            maxDivisorCount = divisorCount;
        }
    }
}

private static int CountDivisor(int value)
{
    if (value &lt;= 1) { return 1; }
    var divisors = new List&lt;int&gt;();
    for (int i = 1; i &lt; value; i++)
    {
        if (value % i != 0) { continue; }

        var f = value / i;
        if (divisors.Contains(f)) { break; }
        divisors.Add(i);
        if (i == f) { break; }
    }
    return divisors.Count;
}

