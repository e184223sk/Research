More than 1 year has passed since last update.ふとしたきっかけで、C#とJavaのオーバーライドの仕様、またC#（とC++）特有のnew修飾子の挙動について調べ直したので投稿します。
なお筆者は、C#からJava（Android）に移行し、Java側から見て執筆していることをご了承ください。ひとつずつ見ていきます。このC#とJavaの違いは設計思想から来ているそうです。次の引用はC++についてですが、C#にも引き継がれている模様。C++では、一般に仮想関数はコンパイル時にどのメンバー関数を呼び出すかを確定できないため、通常のメンバー関数呼び出しよりもパフォーマンスが悪いというデメリットがある。そのため、パフォーマンスを気にするC++プログラマには、継承する必要がないクラスのメンバー関数にvirtual修飾子をつけることを非常に嫌がる向きがある。
wiki:メソッド (計算機科学)対して、Javaはデフォルトで仮想的
wiki:メソッド (計算機科学)なので、すべてのメソッドがデフォルトでオーバーライド可能になっています。
なお、「仮想的」とは、C#においてvirtual修飾子を付与したメンバを指し、オーバーライド可能であることを示します（詳細は次項）。C#では原則オーバーライドが不可能なため、オーバーライドする場合には次のような制約があります。記法は次のようになります。一方、Javaは原則オーバーライド可能であるため、被オーバーライドメソッドには特に何もせず、派生クラス側でOverrideアノテーションを付与しオーバーライドします。さて上記を踏まえた上で、C#のリファレンスを見てみます。new と override には相反する意味があるため、同じメンバーにこの 2 つの修飾子を使用するとエラーになります。 new 修飾子は、同じ名前で新しいメンバーを作成し、元のメンバーを隠ぺいします。 override 修飾子は、継承されたメンバーの実装を拡張します。
new修飾子（C#リファレンス）new修飾子はオーバーライドとは違い、基のメンバ1を隠蔽するとなっていますが、実際にコンソールプログラムを実行して確かめてみます。C#のメソッドはすべて非仮想メソッドであるため、変数の型に応じてどのクラスのメソッドを呼ぶかが決まります。
上記のコードでは、childInParent変数はChild型のオブジェクトを代入しているのだからChild#Hoge()をコールしたいところ、変数がParent型であるため、Parent#Hoge()がコールされてしまいました（※1）。一方で、Child型の変数childは、Hoge()をコールするとChild#Hoge()を出力します。なんか当たり前な感じがしますが、これはParent#Hoge()が同名のメソッドChild#Hoge()で隠ぺいされたことを示します（※2）。また、オーバーライドする場合はvirtual修飾子を付与して仮想メソッド化し、それを派生クラスでoverride修飾子を付けて実装する形になります（※3）。結論を先に書いてしまったのでまとめも何もありませんが、Java沼からするとなんでこんなオーバーライドによく似た機能があるのか疑問に思うかもしれません。
Javaから見たC#の利点としては次のような感じだと思います。間違い等ありましたら修正いたします。また利点を教えていただけたらありがたいです。
読んでいただきありがとうございました。プロパティ、フィールドメンバ等も仮想化できますが、メソッドが最も使いそうなので省略 ↩


