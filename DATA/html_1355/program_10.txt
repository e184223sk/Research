

    public class FeatchDataCSharpTest : TestContext
    {
        [Fact]
        public void ZeroDataCase()
        {
            // set empty record mock
            var forecasts = new List&lt;WeatherForecast&gt;();
            var mockService = new MockWeatherService();
            mockService.Task.SetResult(forecasts);

            Services.AddSingleton&lt;IWeatherService&gt;(mockService);

            var fetchData = RenderComponent&lt;FetchData&gt;();
            // wait until table rendered
            fetchData.WaitForState(() =&gt; fetchData.FindAll(".table").Count &gt; 0);

            var expectedHtml = @"&lt;table class=""table""&gt;
                                    &lt;thead&gt;
                                        &lt;tr&gt;
                                            &lt;th&gt;Date&lt;/th&gt;
                                            &lt;th&gt;Temp. (C) &lt;/th&gt;
                                            &lt;th&gt;Temp. (F) &lt;/th&gt;
                                            &lt;th&gt;Summary &lt;/th&gt;
                                        &lt;/tr&gt;
                                    &lt;/thead&gt;
                                &lt;tbody&gt;
                                &lt;/tbody&gt;";
            fetchData.Find("table").MarkupMatches(expectedHtml);
        }

        [Fact]
        public void ExistsDataCase()
        {
            // set dummy record mock
            var forecasts = new List&lt;WeatherForecast&gt;();
            forecasts.Add(new WeatherForecast() { Date = new DateTime(2020, 5, 1), TemperatureC = 20, Summary = "Sunny" });
            forecasts.Add(new WeatherForecast() { Date = new DateTime(2020, 5, 2), TemperatureC = 10, Summary = "Rainy" });
            forecasts.Add(new WeatherForecast() { Date = new DateTime(2020, 5, 3), TemperatureC = 14, Summary = "Cloudy" });

            var mockService = new MockWeatherService();
            mockService.Task.SetResult(forecasts);

            Services.AddSingleton&lt;IWeatherService&gt;(mockService);

            var fetchData = RenderComponent&lt;FetchData&gt;();
            // wait until table rendered
            fetchData.WaitForState(() =&gt; fetchData.FindAll(".table").Count &gt; 0);

            var expectedHtml = @"&lt;table class=""table""&gt;
                                    &lt;thead&gt;
                                        &lt;tr&gt;
                                            &lt;th&gt;Date&lt;/th&gt;
                                            &lt;th&gt;Temp. (C) &lt;/th&gt;
                                            &lt;th&gt;Temp. (F) &lt;/th&gt;
                                            &lt;th&gt;Summary &lt;/th&gt;
                                        &lt;/tr&gt;
                                    &lt;/thead&gt;
                                    &lt;tbody&gt;
                                    &lt;tr&gt;
                                        &lt;td&gt;2020/05/01&lt;/td&gt;
                                        &lt;td&gt;20&lt;/td&gt;
                                        &lt;td&gt;67&lt;/td&gt;
                                        &lt;td&gt;Sunny&lt;/td&gt;
                                    &lt;/tr&gt;
                                    &lt;tr&gt;
                                        &lt;td&gt;2020/05/02&lt;/td&gt;
                                        &lt;td&gt;10&lt;/td&gt;
                                        &lt;td&gt;49&lt;/td&gt;
                                        &lt;td&gt;Rainy&lt;/td&gt;
                                    &lt;/tr&gt;
                                    &lt;tr&gt;
                                        &lt;td&gt;2020/05/03&lt;/td&gt;
                                        &lt;td&gt;14&lt;/td&gt;
                                        &lt;td&gt;57&lt;/td&gt;
                                        &lt;td&gt;Cloudy&lt;/td&gt;
                                    &lt;/tr&gt;
                            &lt;/tbody&gt;";
            fetchData.Find("table").MarkupMatches(expectedHtml);
        }
    }

