More than 1 year has passed since last update.「迷路を幅優先探索で解く」「迷路を深さ優先探索で解く」に続く第３弾です。幅優先でも深さ優先でもないアルゴリズムで迷路を解いています。ここで示したアルゴリズムはあるサイトで見つけたものなのだと記憶しているのですが、この迷路プログラムの原型は、もう十年も前に書いたものなので、それがどこのサイトなのかがわからなくなってしまいいました(T T)。
そのためこのアルゴリズムの名前もわかりません。 ここでは、勝手に波紋探索という名前を付けました。どうやって経路を求めていくかというと、次のような手順となります。最終的な経路は、ゴールから逆に（番号を一つ減らしながら）たどっていくことで得られます。 逆順に辿る際に、同じ番号が現れた場合はどちらを辿っても構いません。以下の小さな迷路を例に説明します。以下がその実行過程です。
数字が歩数を示しています。0がスタート地点です。 
7歩までと11歩まで進んだところを示しいています。 
数字を表示するために、横幅を3倍にしています。これで、このアルゴリズムのイメージがつかめると思います。この途中結果から分かるように、迷路を全て把握し、自由にアクセスできる神の視点でのアルゴリズムですね。なお、後述するコードで、DebugPrintというメソッドを用意しているので、これを有効にすれば、上記のような表示が得られます。以下C#のコードです。「迷路を幅優先探索で解く」「迷路を深さ優先探索で解く」同様、以下のようなテキストファイルをこのプログラムに読み込ませれば、解を表示してくれます。記号の意味は以下の通りです。実行した結果を載せます。・ は経路を示しています。
.NET Coreで作成し、Macで動かしていますが、コードはそのままでWindowsでも動作します。実際に確かめてはいませんが、この探索方法は解を得るまでの時間が非常に安定していると思います。


