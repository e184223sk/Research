smileBASICから始まり
pythonを学校で習い
luaで遊んで
C#を知る私は今、人生の岐路にいるif ～ elseif ～ else ～の処理直前と言ったところかとにかく、プログラミングを本気でやるのなら...このくだりもうやったな備忘録ならもう最初に前回のまとめした方が見返しやすいのではと思ったので、
これから最初は前回のまとめをする。前回まとめ書いたか書いてないかに関わらず。ところでタイトルを変えた。
なぜなら動的という単語のプログラミング的な意味の認知が、
そもそも間違っていたからである。あと、この記事では、感覚で覚えたあやふやなものを、最低限、言葉にできるくらいはっきりさせるというのが目的だ。完全で完璧な理解までとはいかなくてもよい。
そう、はっきりさせたいのだ。
(結構「理解した」という単語を使ったが、それは正確ではない、他にいい表現が引き出せなかったのだ。)動的 -&gt; インスタンスを作成しないとアクセスできないこと
静的 -&gt; インスタンスを作成しなくてもアクセスできること
プロパティ -&gt; public &lt;型&gt; &lt;名前&gt; { get; set; }のやつ。この単語自体はVisual Studioで知った
インスタンス -&gt; クラス内の動的変数のこと
メソッド -&gt; 関数。 この単語もVisual Studioで知った
public -&gt; どのファイルからでもアクセスできる
private -&gt; アクセスできない 多分継承すればアクセスできるはず
internal -&gt; publicとは違うんだろうけど詳しくは分からない。アクセスできるっぽかったから
protected -&gt; これを使ったことはないし、知らないが、見たことはあるので挙げてみた
abstract -&gt; 継承元のクラスにつけるやつ。確か抽象クラスって名前だった
virtual -&gt; overrideしたいメソッドにつけるやつ
static -&gt; 静的にしたいときにつけるやつ
sealed -&gt; 継承禁止
override -&gt; override 継承クラスにおけるメソッド、プロパティの書き換え
=&gt;演算子 -&gt; プロパティにおける=の役割
(readonly -&gt; 読み取り専用)
(const -&gt; 定数)第二回C#備忘録を投稿して少し経った後にコメントがきた。
ありがとうございます...。
勉強になるのはもちろんだが、自分のはっきりさせたことが本当に正しかったのか、
確かめる手段でもあるからだ。そして、案の定、やばい認識をしていた。そう、動的と静的、そして非静的の意味だ。前回 動的 = 非静的 という認識をしたが違った。私は初めて、動的と静的という単語を知った時、これはtrueかfalseのように、
完全な対義語だと思っていた。
(今までは classType = Dynamic か classType = Staticみたいだと思っていたのだが、)
(本来は classType.Dynamic = false と classType.Static = false のような感じであった。)とりあえずその部分を、自分の言葉で書き直してみる。一般に、「動的か静的」のどちらか一方に定まるのは、言語の種類である。
PythonやLuaなど、場合によって変数の型が変化する言語を動的な言語と言う。動的な言語に対し、
C#のような変数の宣言時に、変数の型を宣言し、その変数の型を変えることができない言語を静的な言語と言う。そういえばそうだ。Pythonの本に「暗黙的な型変換」という単語があったな。
これらの静的に対し、動的と静的の一方に必ずしも定まらないのが、
クラスとメンバだ。(そういえばなんでメンバーじゃなくてメンバなんだろ)上記のような、言語的な静的 = static ではない。どうやら公式リファレンスのクラスのインスタンスの作成数に関係なく、静的メンバーのコピーは 1 つしか存在しません。これ。
これが全てを物語っているらしい。のだが、私はこのメモリがよくわかっていない。だからこの表現をなるべく避けていたのだが...おそらくこれは、コンパイルの仕組みまで話を展開していかないといけないであろう。
なんとなくは分かるのだ。あやふや。
感覚的には言いたいことがわかるのだが...ここら辺を言葉として出力するには、まだ私の知識が足りないのであろう。例えば定数はコンパイル時に固定される...みたいな...?
定数とコンパイルの話をどこかで見かけた。残りの１つは()を見逃すという、プログラミングしてる人としてそれちょっとどうなの、みたいな感じのことをしてしまった。
getとsetは勝手に消えません！！実はどこかでdynamicを見かけたことがある。
当時は 静的と動的が 相反する概念だと思っていたので、なぜdynamicがあるのか分からなかった。
だからこんな感じで書いてエラーでて？？？ってなっていた。我ながらあっぱれだ。非静的というのは静的でも動的でもないことである。貼ってあったリンクをみていたらこんなのも見つけた。これが(クラス、変数的な)動的と静的が必ずしも一方に決まるわけではないという証明になるだろう。余談だがvarとは全然違う。そこは「理解している」。さて、静的を理解するためにコンパイルとかもっと奥深い場所に乗り込もうとしたのだが、
どうしたものか。
プロパティという小石に躓き、転んでけがしてしまったのである。前回で
役割は分かったのだが、記事を書いた後にプロパティについて調べまくったのだ。
主に使い方を。そうして出てきた記事は
「プロパティって素晴らしい！」「プロパティを使いましょう！」
とプロパティの長所を説明するばかりで、参った。あれ？これじゃあフィールドいらなくね？まずプロパティの基本形はこうだ。これだけはフィールドいらなくね？とはならないだろう。
問題は次の省略形だ。省略形はデータを保持するためのフィールドを必要としない。そして、「みんな！プロパティすげぇよ！便利だよ！使えよ！」ここまで来たらもう、フィールドいらないじゃん。参った。なんとなくModのプロジェクトを開いた。目についたことがある。+=という複合演算子(だっけか?)だ。なんか...フィールドじゃなきゃいけない物を見出せそうだったのだが、
それは本当に、感覚...いや、勘レベルのものだった。うーむ...つまり、私はプロパティでは向いていない場合を知りたいのである。
このままだと、私はフィールドを使わなくなってしまう！！どう？ゲシュタルト崩壊しそうじゃない？
正直 今の私 そんなかんじ～公式リファレンスにチュートリアルがあった。そこにはpublicのプロパティは存在しなかった。
publicってたのはプロパティであった。他の記事を見た。
プロパティの素晴らしさが書かれていた。さらに他の記事を見た。
プロパティの素晴らしさが書かれていた。さらにさらに他の記事を見た。
プロパティの素晴らしさが書かれていた。さらにさらにさ(ry
プロパティの短所...
ﾌｧｰｰｰｰｰｰｰｰｰ!あったのだ。プロパティの短所が書かれている記事が。そこには「低速」の文字が。つまりUpdate()のような、毎フレーム呼び出すようなものには
向いていないのだろうか...?わからない。たすけて。以上
第三回C#たすけて備忘録


