
using Reactive.Bindings.Extensions;
using System;
using System.ComponentModel;

namespace RxPropLab
{
    class Program
    {
        static void Main(string[] args)
        {
            var person = new Person();

            // 同期するプロパティを指定して ReactiveProperty を生成する
            var rp = person.ToReactivePropertyAsSynchronized(x =&gt; x.Name,
                ignoreValidationErrorValue: true)
                .SetValidateNotifyError(x =&gt; string.IsNullOrEmpty(x) ? "空" : null);

            // ReactiveProperty を更新すると
            rp.Value = "okazuki";
            // 生成元のオブジェクトのプロパティが更新されます
            Console.WriteLine(person.Name); // okazuki

            // 空文字の場合はバリデーションエラーになるので
            rp.Value = "";
            // Person クラスの値は更新されません
            Console.WriteLine(person.Name); // okazuki のまま
        }
    }

    class Person : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;
        private string _name;
        public string Name
        {
            get =&gt; _name;
            set
            {
                _name = value;
                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(Name)));
            }
        }
    }
}

