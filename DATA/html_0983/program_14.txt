
using Reactive.Bindings.Extensions;
using System;
using System.ComponentModel;

namespace RxPropLab
{
    class Program
    {
        static void Main(string[] args)
        {
            var person = new Person();

            // 同期するプロパティを指定して ReactiveProperty を生成する
            var rp = person.ToReactivePropertyAsSynchronized(x =&gt; x.Name,
                x =&gt; x?.ToUpper(), // Person クラスから ReactiveProperty に行く途中で大文字に変換する
                x =&gt; x?.ToLower()); // ReactiveProperty から Person クラスに行く途中で小文字に変換する

            // ReactiveProperty を更新すると
            rp.Value = "OKAZUKI";
            // 生成元のオブジェクトのプロパティは小文字に変換された値が設定されます
            Console.WriteLine(person.Name); // okazuki

            // 生成元のオブジェクトのプロパティが更新されると
            person.Name = "xin9le";
            // ReactiveProperty の値も更新されて、大文字に変換されます
            Console.WriteLine(rp.Value); // XIN9LE
        }
    }

    class Person : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;
        private string _name;
        public string Name
        {
            get =&gt; _name;
            set
            {
                _name = value;
                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(Name)));
            }
        }
    }
}

