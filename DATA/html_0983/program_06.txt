
using Reactive.Bindings;
using Reactive.Bindings.Extensions;
using System;
using System.ComponentModel;

namespace ConsoleApp6
{
    class Program
    {
        static void Main(string[] args)
        {
            var p = new Person();

            // Name プロパティを IObservable にして ReadOnlyReactiveProperty に変換
            var name = p.ObserveProperty(x =&gt; x.Name)
                .ToReadOnlyReactivePropertySlim();
            Console.WriteLine($"name.Value = ${name.Value}"); // 空文字

            // 元の値が変わると ReadOnlyReactiveProperty の Value も更新される
            p.Name = "okazuki";
            Console.WriteLine($"name.Value = ${name.Value}"); // okazuki
        }
    }

    // INotifyPropertyChanged の実装クラス
    class Person : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;
        private string _name;
        public string Name
        {
            get =&gt; _name;
            set
            {
                _name = value;
                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(Name)));
            }
        }
    }
}

