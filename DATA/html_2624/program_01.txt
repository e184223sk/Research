
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using myop.Models;

namespace myop.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class MembersController : ControllerBase
    {
        private readonly myopContext _context;

        public MembersController(myopContext context)
        {
            _context = context;
        }

        // GET: Members/
        [HttpGet]
        public ActionResult&lt;List&lt;Member&gt;&gt; GetAll()
        {
            List&lt;Member&gt; members =  _context.Members.ToList();
            return members;
        }

        // GET: Members/5
        [HttpGet("{id}")]
        public ActionResult&lt;Member&gt; Get(int id)
        {
            List&lt;Member&gt; members =  _context.Members.ToList(); 
            var member = members.Find(i =&gt; i.Id == id);
            if (member == null)
            {
                return NotFound();
            }
            return member;
        }

        // POST: Members/
        [HttpPost]
        public ActionResult&lt;Member&gt; Post([Bind("Id,Name,Email,Birth,Married,Memo")] Member member)
        {
            _context.Add(member);
            _context.SaveChangesAsync();
            return member;
        }

        // PUT: Members/5
        [HttpPut("{id}")]
        public ActionResult&lt;Member&gt; Put(int id,[Bind("Id,Name,Email,Birth,Married,Memo")] Member member)
        {
            _context.Update(member);
            _context.SaveChangesAsync();
            List&lt;Member&gt; members =  _context.Members.ToList(); 
            var m = members.Find(i =&gt; i.Id == id);
            if (m == null)
            {
                return NotFound();
            }
            return NoContent();
        }

        // DELETE: Members/5
        [HttpDelete("{id}")]
        public ActionResult&lt;Member&gt; Delete(int id)
        {
            List&lt;Member&gt; members =  _context.Members.ToList(); 
            var member = members.Find(i =&gt; i.Id == id);
            if (member == null)
            {
                return NotFound();
            }
            _context.Members.Remove(member);
            _context.SaveChangesAsync();
            return NoContent();
        }
    }
}

