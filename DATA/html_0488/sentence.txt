さて、前回サロゲートペア対応した湯婆婆を作りました。C# で湯婆婆を実装してみる（𠮷田さんにも対応）この湯婆婆ですが文字列補間を使ってます。$"xxxx{変数}xxxx" のように書いて文字列中に変数を埋め込むやつですね。C# における文字列補間これは裏では確か string.Format に展開されているらしい？と聞いているのですが、これをやると裏で object の配列1つ、さらに埋め込んでいる変数がプリミティブ型だと Boxing が起きるという感じでパフォーマンスを重要視する人たちにとっては結構辛いもののようです。ということで、べたっと StringBuilder に Append しまくるのと文字列補間でどれくらい違うものなのか測ってみようと思います。.NET でベンチマークといったら BenchmarkDotNet がデファクトです。ということで、サクッと書いてみました。湯婆婆に田中さんの名前を中にしてもらう仕事だけになるべく注力してもらえるように以下のようなベンチマークを書いてみました。TraditionalWorkstyle が元々の処理準拠で NewWorkstyle が文字列補間を排除したバージョンです。では測定してみましょう。.NET Framework 4.7.2 と .NET Core 3.1 と .NET 5 RC2 で実行してみました。.NET 5 だと文字列補間がちょっとだけ早いようにも見えますが、どちらも純粋に Append しただけのものと比べて倍くらいの差があります。newName が char 型なので boxing させたくなければ ToString すればいいじゃない？という話しもあったりします。AnotherWorkstyle がこの改善を入れたバージョンです。実行してみましょう。上から順に .NET Framework, .NET Core 3.1, .NET 5 RC2 です。早くなったけどべったりと Append するのに比べると遅いですね。（ToString を 3 回もしてるのを 1 回にしたら早くなると思うけど気力が尽きた）C# でパフォーマンスといったら名前があがる Cysharp の neuecc さん謹製の ZString というライブラリを xin9le さんに教えてもらいました。そしてここにさらに ZString のベンチマークを追加すると...？？neuecc さんは他にも UniRx, UniTask, MessagePack for C# などなどすごい数のライブラリ書いてるので凄い。ということで ZString も試してみたいと思います。ということでベンチマークにこんなメソッドを追加して…今回は .NET 5 RC2 のみで計測してみました。普通に文字列補間をするよりも 4 倍くらい早い…@fujieda さんが記事書いてくれました。+ での連結は流石…早い…。C#で性能のいい湯婆婆ということで文字列補間を使わずに愚直に Append するだけにすると単純に考えると湯婆婆は今の 2 倍の人の雇用手続きの処理が出来るようになりますね。ZString を使うと 4 倍ですね…凄い。将来的には文字列補間つかっても Append でべったり書くのとそん色ない感じになるといいですね。ここら辺かな？因みに自分は文字列補間は普通に使っていきます。Append で連結は書くのも読むのも辛い…。どうしてもコアな部分で性能が超重要とかではない限りは。


