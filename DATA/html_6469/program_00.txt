using System;
using System.Security.Cryptography;
using System.Text;

namespace TestSettings.Properties {
    internal sealed partial class Settings {
        public override object this[string propertyName] {
            get {
                if(!(base[propertyName] is string)) {
                    return base[propertyName];
                }

                try {
                    return Decrypt(base[propertyName]);
                }
                catch {
                    return Settings.Default.Properties[propertyName].DefaultValue;
                }
            }

            set {
                if(base[propertyName] is string)
                    try {
                        base[propertyName] = Encrypt(value);
                    }
                    catch {
                        base[propertyName] = Settings.Default.Properties[propertyName].DefaultValue;
                    } else
                    base[propertyName] = value;
            }
        }

        byte[] entropy = { 141, 238, 28, 197, 169, 105, 209, 230 };

        object Encrypt(object text) {
            return Convert.ToBase64String(ProtectedData.Protect(Encoding.UTF8.GetBytes(text as string), entropy, DataProtectionScope.CurrentUser));
        }

        object Decrypt(object text) {
            return Encoding.UTF8.GetString(ProtectedData.Unprotect(Convert.FromBase64String(text as string), entropy, DataProtectionScope.CurrentUser));
        }
    }
}

