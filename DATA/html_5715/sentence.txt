More than 3 years have passed since last update.こんにちは。
.net系の開発者してます。
最近はずっとWindowsフォーム触っています。
Windowsフォームを作っていて嫌なことが出てきたので、
それを解消すべく他の選択肢について考えてみました。最新で言うとWindows10向けUWPアプリだけど、
今回はWPFを使用（Xaml+C#ってとこは同じだし）独自のグラフィカルユーザインタフェース (GUI) を持つアプリケーションを、以下に述べるようなModel-View-ViewModelの3つの部分に分割して設計・実装するソフトウェアアーキテクチャパターンである。
[wikipedia]https://ja.wikipedia.org/wiki/Model_View_ViewModelViewModelの状態をバインディングによって表現するためのUIプロパティと画面の状態、コマンドなど持つもの。
UIの状態（コントロールの有効/無効)もプロパティとして持ち、
データバインドで状態をバインドする。データアクセスとビジネスロジック、データを持つまずはともかくやってみましょう。
①新しいプロジェクトで、WPFアプリを選択。
②NugetからPrismのライブラリをインストール。

バージョンは最新の安定板6.3.0で。③MainWindowViewModel.csを追加。

で、その中には下記のように記述します。④MainWindow.Xamlにプロパティをバインドするコントロールを配置します。⑤MainWIndow.xamlのコードビハインドで、画面のDataContextにMainWIndowViewModelを指定します。⑥デバッグ起動すると値が入った状態で画面が起動します。初期値として設定した"Init Value"がデータバインドされたことが確認できますね。続いて、画面にボタンを置いて、何か処理をさせる流れを作ってみましょう。⑦Commandクラスを追加して、ICommandインターフェースを実装し、コンストラクタでViewモデルを受け取るようにします。で、ViweModelも下記をクラス配下に記述します。そのコマンドを実行するボタンを画面上に配置します。
コマンドはCommandプロパティに設定するだけでＯＫ。起動してみると、ボタンがついた画面が出てきて、
ボタンを押下するとテキストボックスに書いてある内容がメッセージボックスで出るような動作になります。また、テキストボックスが空の際は、メッセージは表示されません。
これは、CommandクラスのCanExecuteでFalseが返る場合は、Excuteメソッドが実行されないためです。と、ただprismの基本的なパターンを作成しただけですが、
最初に挙げたWindowsFormの嫌なところはほぼ解消できそうなのではないでしょうか。一回だと書ききれませんでしたが、
prismにはMVVMをもっと突き詰めるための機能がまだまだあります。今後はそこらへんを試してみて、
ある程度の規模の開発で採用できるような開発基盤とか作れたらいいなと思います。


