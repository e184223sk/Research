More than 1 year has passed since last update.この記事は以下の記事について独自検証をしたものです「SinとかSqrt等の算術演算と掛け算の処理負荷を比べてみた」
https://qiita.com/geekdrums/items/1a6e7480f23c9ffbcfc0マサカリウェルカムな元記事作者さんに感謝を元記事のコードはたぶん最適化でいろいろ消し飛んでるこちらで計測した結果：Windows10でC#コンソールアプリで計測、C#のMath関数を利用、コードは記事最下部さすがにSqrtがMultより早いのはおかしくない？世の中にはC#バイナリをソースコードに戻してくれるソフトがある
その1つILSpyにかけてみることにする結果はいC#の最適化対策はよくわからないので
とりあえず結果が使われるかもしれないとコンパイラを疑心暗鬼に陥らせてみる全ての計算がfの最終値に影響するようにしたのと
fをpublicメンバに代入したでILSpyいけてそう他にもildasmで関数呼び出し自体が消えていないかとかも見たけど成果なかったので省略Q:sqrtは掛け算割り算なしで行けるから早くても普通では？
A:さすがに掛け算1回よりは遅いでしょQ:Mult以外は前の計算結果使ってないぞ！最適化されてるんじゃないのか！
A:使わなくても問題ないコード吐かれたからそうしてるSinのデコンパイル結果ついでに機械語レイヤーちゃんとfsin命令込みでループしているのがわかる
(0x01580CC1にfsin命令があり、ループのjmp先はそれよりも前の0x01580CBF、ステップ実行でも確認済み)実行回数と実行にかかった時間をミリ秒単位で出力しただけ具体的に何倍速かもう1回貼っときますねunityは多分計測結果に関係ないだろうという慢心の元外したIL弄ってfへ代入も排除した厳密計測したかったけどC#力が足らない記事ももっと見栄えよくしたかったけどqiita力が足らない自分はC#あまり書かないのでミスあるだろうけど、見つけた人はこの記事みたいに検証記事かいて、どうぞ最後に検証に使ったコード置いときます


