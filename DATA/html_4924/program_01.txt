
using System;
using System.Reflection;
using AnyProject;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace AnyProjectTest
{
    [TestClass]
    public class Class1Tests
    {
        [TestMethod]
        public void TestLocalFunction()
        {
            // Arrange
            Type targetType = typeof(Class1);
            MethodInfo  method = targetType.GetMethod(
                "&lt;PrivateMethodIncludeLocalFunction&gt;g__LocalFunction|2_0", 
                BindingFlags.Instance | BindingFlags.NonPublic);
            object instance = Activator.CreateInstance(targetType);
            var parameters = new object[] { 2 };

            // Act
            var actual = (int)method.Invoke(instance, parameters);

            // Assert
            Assert.AreEqual(4, actual);
        }

        [TestMethod]
        public void TestStaticLocalFunction()
        {
            // Arrange
            Type targetType = typeof(Class1);
            MethodInfo method = targetType.GetMethod(
                "&lt;PrivateMethodIncludeStaticLocalFunction&gt;g__StaticLocalFunction|3_0", 
                BindingFlags.Static | BindingFlags.NonPublic);
            object instance = Activator.CreateInstance(targetType);
            var parameters = new object[] { 2 };

            // Act
            var actual = (int)method.Invoke(instance, parameters);

            // Assert
            Assert.AreEqual(8, actual);
        }
    }
}

