ここ数日 Twitter で private メンバーに対するテストについての議論を見かけました。
自分のスタンスは
「基本的に public メンバーに対するテストがあれば十分だけど、やんごとなき理由があるなら private メンバーのテストも書けば良い」という感じです。議論の内容や自分の主張は本題ではないので置いておくのですが、一連の TL を見ていてふと「private メソッドはリフレクションでテスト出来るけどローカル関数はテスト出来るのか？」と気になりました。
ローカル関数のテストは今まで試したことが無かったので知見がありませんでした。この記事は「ローカル関数のテストは可能か否かが気になったので試してみて結果どうだったのか」という記事です。
決して private メンバーやローカル関数のテストを推奨するものではありません。結論から書くとリフレクションで出来ます。
対象のローカル関数を取得する際には MSIL になった時点のメソッド名などを指定する必要があるので、その点に注意する必要があります。クラス、MSIL、テストコード の例を以下に示します。前述の通りリフレクションでローカル関数を取得する際は MSIL 上でのメソッド名を指定する必要があります。
ローカル関数の MSIL 上でのメソッド名は自動的に決まるため、クラス内のメンバー定義が変わるとメソッド名も変更される場合があります。
※メソッド名の末尾についている 2_0 や 3_0 などの値がコロコロ変わる。また、ローカル関数を定義する際に static が明示されていなくても静的ローカル関数として取り扱うことが出来る場合は自動的に static で定義されます。
※ローカル関数 StaticLocalFunction(int) は static を明示していないにも関わらず MSIL 上では static で定義されている。そのためといった事態やといった事態に注意する必要があります。
テストコードの保守性は控えめに言って劣悪だと思うのでローカル関数のテストは基本的に避けるべきだと言えます。以上です。C# には Internal メンバーを特定のアセンブリに公開する仕組みとして InternalsVisibleToAttribute が有りますが、似たような感じで PrivatesVisibleToAttribute が欲しいです。


