テスト自動化をするうえで、ファイルの検索・読込・書込は鬼門です。テストによって環境が変化することも、環境によってテスト結果が変化してしまうのも望ましくありません。テスト時のみ一時ファイルに切り替えてもよいですが、それでもストレージへのアクセスがあるとテスト時間が長くなってしまいます。そこで、ファイルシステムのモックを簡単につくれる、System.IO.Abstractionsを紹介します。公式ReadMeのサンプルを少し変更した以下のようなアプリを題材にします。あるフォルダの中から"2+2.txt"というファイルを探して、中の答えが間違っていたら修正して警告するアプリケーションです。しかしこのMyComponentクラスはテストする上で以下の問題があります。そこで、System.IO.Abstractionsを使って、この問題を解決します。nugetで以下の2つを入れます。先ほどのコードを修正します。MyComponentAbのコンストラクタで、実際のファイルシステムかモックかを切り替えます。コンソールアプリケーション側からは当然実際のファイルシステムSystem.IO.Abstractions.FileSystem()を入れています。
動作は変わりません。次にMyComponentAbのテストを作ります。テストライブラリはxUnitを使いますが、他のテストライブラリでもたいして変わらないと思います。ソリューションにxUnitテストプロジェクトを追加します。テストしたいプロジェクトの参照を追加して、以下のnugetを追加します。そしてテストコードを追加します。正しいファイルと間違ったファイルの2つのテストを作り、両者とも成功しました。モックファイルシステムはDictionaryの形で保持しています。ファイルの修正が正しくできていることもモックから確認できます。System.IO.Abstractionsはこれ以外にもFileSystemWatcherやFileInfoなどのモックがあります。ぜひ使ってみてください。VisualStudio 2019
C# 9
.NET 5
Microsoft.NET.Test.Sdk 16.9.4 
xunit 2.4.1 
xunit.runner.visualstudio 2.4.3 
coverlet.collector 3.0.2 
System.IO.Abstractions 13.2.38 
System.IO.Abstractions.TestingHelpers 13.2.38 


