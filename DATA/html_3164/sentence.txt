今回は、Step2 です。Step1 で作成したコードをベースに編集を行いますので、Twitter API 環境の整備については説明を省略します。Twitter のツイート データを Azure Data Lake Storage Gen2 (ADLS Gen2) に Parquet 形式のファイルとして自動的に蓄積し、Azure Synapse Analytics (Serverless SQL / Apach Spark) を使って分析できるようにします。ツイート データの継続的な取得と ADLS Gen2 へのデータ蓄積には、Azure Functions を利用します。
Filtered Stream API を C# から扱えるようにすることが目標となります。この API の特徴は、複数のキーワードでストリームをフィルタリング可能ですので、特定の情報を収集する際に向いています。SDK では、この機能は、まだ V2 プレビューに対応していない為、V1.1 を利用します。Step1 同様に、Azure は関係なく、ローカル環境に単純なコンソール アプリケーションを作成し、動作させます。Twitter の開発者向けプログラムを通して提供される API です。各 API では要求に対するレート制限が設定されており、Stream API の一般的な無償利用の場合、50 万ツイート/月の取得制限が入ります。開発には、以下を利用します。OSS (無償) かつ クロス プラットフォームとなりますので、Windows / Mac / Linux などお好きな OS/デバイスをご利用ください。今回の手順では、Visual Studio 2019 を利用します。Visual Studio 2019 を起動し、Step1 で作成したプロジェクトを開きます。Step1 の Sampled Stream V2 API と異なるのは、アプリ認証ではなく、ユーザー認証となることです。Twitter Developer ポータルで作成/取得した API Key / API Secret / Access Token / Access Token Secret の値で、以下のパラメーターを置き換えてください。ストリームを作成するクラスも異なりますので、ご注意ください。フィルターは複数設定することができます。 V2 プレビュー API と V1.1 API では、Language の扱いが異なりますので、日本語の判定方法を変えています。また、v1.1 API では args.Tweet.Source に HTML タグを含む値が入ってきますので、ご注意ください。args.Tweet.Source.Contains("&gt;Twitter ") の部分は、ボットによるツイートを除去するような条件を入れています。StartMatchingAllConditionsAsync は複数のフィルター値が AND 条件となり、StartMatchingAnyConditionAsync は OR 条件でのマッチングになりますので、ご注意ください。上記で主要なコードについて説明しましたが、以下はコード全体となります。GitHub にも各ステップのコードを共有しています。デバッグ実行して、以下のようにキーワードに関連したツイートがリアルタイムに表示されれば、成功です。お疲れ様でした。
Step3 では、Hadoop / Spark / Synapse Serverless SQL で標準的に利用される圧縮済みカラムストア型ファイルである Parquet ファイルの作成/出力を C# コードで実施します。C# 向け Twitter API SDK (TweetinviAPI) Nuget Package サイト
TweetinviAPI - Filtered Stream API リファレンス
クロス プラットフォーム .NET 概要
Twitter 開発者向けサイト
Twitter API サイト
Visual Studio 2019 Community サイト
Visual Studio Code のサイト


