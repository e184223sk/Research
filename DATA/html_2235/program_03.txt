
public struct myStruct
{
    public int x;
    public int y;
}

static void Main(string[] args)
{
    Console.Title = "ジェネリック";

    myStruct ms = new myStruct();
    var pStructure = StructureToPointer&lt;myStruct&gt;(ms);
    Console.WriteLine("構造体ポインタ: " + (Int32)(pStructure));

    Console.ReadKey();
}

////////////////////////////////////////////////////////////////////////
// 構造体のマーシャリング
////////////////////////////////////////////////////////////////////////
public unsafe static IntPtr StructureToPointer&lt;T&gt;(T 構造体) where T : struct
{
    var size = Marshal.SizeOf(構造体.GetType());
    IntPtr pStructure = Marshal.AllocCoTaskMem(size); //アンマネージドメモリの確保
    Marshal.StructureToPtr(構造体, pStructure, false); //確保した領域に構造体ポインタを展開
    Marshal.DestroyStructure(pStructure, typeof(T));//後処理
    Marshal.FreeCoTaskMem(pStructure);//確保したアンマネージドメモリの解放
    return pStructure;
}

