More than 1 year has passed since last update.様々な型に対応する関数(やクラス)を定義することができます。例えば、以下の様な関数があったとします。万が一、scoreとold_scoreがdoubleやfloatであった場合、
以下の様に別で関数定義する必要があります。といったように、複数のパターンを想定した関数を定義することで解決します。
しかしながら、これは悪い例です。
ハードコーディングですし、プログラムのメンテナンス性（保守性）も最悪です。
これを解決してくれるのが、ジェネリックです。今回の場合、以下の様に関数定義を行います。ここでいう、where T : unmanagedは、型がアンマネージド型であることを条件にするという意味です。sbyte byte、short、int、uint、long、
ulong、char、float、double、decimal、bool
がアンマネージド型です。
アンマネージド型 (C# リファレンス)実例として、MarshalのStructureToPtrをメソッドとして簡易化してみます。
(※Marshal.StructureToPtr()もジェネリック型として定義されていますね!)構造体から構造体ポインタへのマーシャリングを簡易化する関数です。
ここでは、where T : structとし、型がstructであることを条件とします。本来、マネージド型である(アンマネージド型ではない)ジェネリック関数ではsizeof()を使用することができません。(sizeof()がアンマネージド型にのみ対応している為)
なので、Marshal.Sizeof()を使用します。実行結果:



