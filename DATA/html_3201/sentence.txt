More than 1 year has passed since last update.マルチプレイ可能な VR ゲームを作ることに興味が湧いてきたので、
C# の勉強も兼ねて MagicOnion を使用して開発していくことにしましたMagicOnion を調査したところ、どうやら StreamingHub を使うことで、
サーバークライアント間でのリアルタイム通信を簡単に実装出来そうなことが分かりました。そこで MagicOnion の README にある StreamingHub のサンプル を動かしてみました ↓余談ですが、今まで C# でサーバサイドのプログラミング経験が無く、先入観で、
「C# で作ったプログラムは Windows OS 環境でないと気軽に動かせないのでは？」と思ってしまっていました。。。しかし、MagicOnion の開発環境を構築していく過程で、全然 Mac でも気軽に開発を進めていけることが分かりました。
そのため、例え Mac 使ってても C# の開発に億劫になる必要は全く無いよと伝えたく記事を書くことにしました。（めっちゃ今更感あるかもしれませんが。。）記事の中で間違っている部分/表現等あれば、有識者の方々にご指摘いただけると非常にありがたいです  (特に記事内で紹介しているソースコード内のコメントアウトの内容とか。。。)ちなみに MagicOnion + Unity + VRM でマルチプレイを実現するためのやりかたは、
既に素晴らしい記事が存在していますので @simplestar さんの こちらの記事 を見たほうが圧倒的に良いです。本記事では初心者も詰まらずシンプルに StreamingHub のサンプルが動かせて、
とにかくマルチプレイのサンプルが動かせるようにすることを目指しています。今回は ↓ の環境で作業を行いました。まずは ↓ のリンクから .NET SDK をダウンロードしてきます。
https://dotnet.microsoft.com/download
ダウンロードが完了したら、dotnet-sdk-X.X.XXX-osx-x64.pkg を開いて .NET SDK をインストールします。正常にインストールが完了したら、ターミナルを開き dotnet コマンドが実行可能な状態か確認します上記の通りバージョン情報が標準出力されれば、開発のための準備は完了です。@rookx さんの .NET CoreでMagicOnionを動かしてみた を参考にプロジェクトのセットアップを行います。これだけで今回のプロジェクトのセットアップは完了です。あとは MagicOnion 関連のソースコードを書きながら、
都度 dotnet run コマンドで動作検証を進めていける状態です。現状の Server フォルダの中身は ↓ の構成になっているはずです。まずは Program.cs の中身を MagicOnion の README の内容 に従って書き換えます。あとは実際にサーバークライアント間でリアルタイム通信を行うために必要なソースコードを追加していきます。
まずは StreamingHub の通信周りの定義を記述した IGamingHub.cs を追加します。次に IGamingHub.cs の定義内容のサーバ側を実装した GamingHub.cs を追加します。現状の Server フォルダの中身は ↓ の構成になっているはずです。この状態で Server フォルダ上で dotnet run を実行してみます。警告が出てきましたが、これは無視で大丈夫です
正常に実行されればエラーは発生せず、ターミナルが待機状態になるはずです。@mitchydeath さんの Unity+MagicOnionで超絶手軽にリアルタイム通信を実装してみた に沿って Unity プロジェクトに MagicOnion をセットアップしておきます。セットアップ完了次第、Unity プロジェクトの Assets/Scripts フォルダに StreamingHub クライアント用のスクリプトを追加していきます。IGamingHub.cs は Unity 側でもクライアント側の実装を行うために必要になるので、Assets/Scripts フォルダに追加しておきます。また IGamingHub.cs の定義内容のクライアント側を実装した GamingHubClient.cs を追加します。最後に GamingHubClient.cs の StreamingHub クライアントを使用することで、StreamingHub サーバ経由でルームに参加したユーザ同士交流が出来るようにします。
そのために GameClient.cs を追加します。あとは GameClient.cs をメインカメラにアタッチして SerializeField の中身をお好みで設定していただければ完成です！ 1.NET で作成した StreamingHub サーバを動かした状態で、
Unity プロジェクトを複製して、
元の Unity プロジェクトと複製後の Unity プロジェクトを開いて両方 Run すると、
はじめに で貼った gif のように動作するはずです。C# は Unity アプリケーションを作成するときには触っていたのですが、
C# でサーバサイドを書いた経験は初めてでした。(MagicOnion に完全に乗っかった形ですが。。)感想としては、環境構築も楽でクロスプラットフォームでライブラリも充実している印象を受けたので、引き続き勉強を続けていきたいと思います。（少なくともマルチプレイの VR ゲームを作り終えるまでは。。）この記事が誰かのお役に立てれば幸いです。C# で開発中に自分が使用したいライブラリが出てきたら、
dotnet add package &lt;パッケージ名&gt; でプロジェクトに追加していくことが可能です。使用したいライブラリを検索する際は nuget を使用します。
Search for packages... の検索欄からライブラリを検索することが可能です。
実際にプロジェクトに追加する際の &lt;パッケージ名&gt; はライブラリを選択後に出てくる、
.NET CLI タブをクリックすることで確認出来ます。↓ は MagicOnion の例。
https://qiita.com/rookx/items/6086b9426f3138a4b700
http://ryuichi111std.hatenablog.com/entry/2017/08/15/153804
https://simplestar-tech.hatenablog.com/entry/2019/05/19/192801
http://tech.cygames.co.jp/archives/3181/
https://qiita.com/mitchydeath/items/cecf01493d1efeb4ae55具体的に言うと StreamingHub クライアント同士で m_RoomName は同一のものを設定します。m_UserName には好きな名前を設定していただいて構いません。m_PlayerTransform にはメインカメラで無くてもプレイヤーとして振る舞う GameObject のTransform を設定していただければ構いません。 ↩


