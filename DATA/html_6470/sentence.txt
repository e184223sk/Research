More than 3 years have passed since last update.以前の以下の投稿で、Visual Studio 2017 において、標準でテンプレートに追加された ASP.NET Core MVC では、構成ファイル web.config から、JSON 形式の appsettings.json に変更されたことに触れました。 この appsettings.json ですが、もちろん、今までの web.config のように、カスタムでアプリケーション固有の構成情報を定義できます。もちろん、以下の方法を使って、カスタムの構成情報を定義した JSON 形式ファイルを作成し、逆シリアライズにより構成情報をロードする方法もありますが、今回は、ASP.NET Core MVC で用意された機構を使った方法により値を取得します。構成ファイルのロードは、Startup.Starup メソッドで定義されています。この時、appsettings.json を以下のように定義したとします。Starup クラス内のスコープであれば、Configuration プロパティ経由で、値を取得できます。
IConfigurationRoot.GetValue&lt;&gt;() メソッド、もしくは、文字列の場合は、インデクサで、構成情報にアクセスできます。Starup.Configuration プロパティ経由での取得方法は、MVC のコントローラー側で利用できませんので、別の方法を利用します。まず、JSON に対応するクラスを定義します。すべての構造に対するクラスではなく、構成情報単位で定義すると良いと思います。
例) ユーザー設定、ページ設定、DB 接続設定等の単位にクラスを定義する
この理由は、最後に説明したいと思います。このように、JSON に対応したクラスの定義を行う場合、JSON 文字列をコピーし、対象のクラス ファイル上で、[編集] - [形式を選択して貼り付け] - [JSON をクラスとして貼り付ける] を選択すると、クラスの定義をペースト出来るので便利です。
Startup.ConfigureServices メソッドにおいて、構成情報を定義したクラスにバインドします。最後に、MVC のコントローラー側での構成情報の取得の実装です。
コンストラクターを定義し、Startup.ConfigureServices においてバインドを行ったクラスをラップする IOptions インターフェースを引数とします。ここで、すべての設定を持つクラスを定義し、引数で渡す方法もありますが、コントローラーで必要とする情報をコードで視覚化するためにも最小限の構成情報を渡すようにすることが良いと考えています。もちろん、複数の構成情報クラスをバインドし、コントローラーのコンストラクターの引数で複数の構成情報クラスを取得することもできます。単にコード量を減らすことが可読性をあげることではなく、意味読みできるコードこそ可読性が高いといえると考えています。サンプル コードは、以下より参照ください。
https://github.com/Hiromasa-Masuda/dotnetcoreSample/tree/master/ConfigurationSample


