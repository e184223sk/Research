using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Runtime.InteropServices;
using System.Threading;
using System.Runtime.CompilerServices;          // for MethodImpl
using System.Runtime.InteropServices.ComTypes;  // for IConnectionPointContainer, IConnectionPoint
using System.Windows.Threading;

namespace WpfApp1
{
    /// &lt;summary&gt;
    /// MainWindow.xaml の相互作用ロジック
    /// &lt;/summary&gt;
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        protected dynamic m_comInstance = null;   // COM インスタンス

        private void CreateButton_Click(object sender, RoutedEventArgs e)
        {
            if (null == m_comInstance)      
            {
                ///////////////////////////////////
                // COM のインスタンスを作成する
                const string progID = "OutOfProcessSample.Application";　// ProgID を指定する

                Type comType = Type.GetTypeFromProgID(progID);
                m_comInstance = Activator.CreateInstance(comType);
                Debug.WriteLine("Instance created.");


