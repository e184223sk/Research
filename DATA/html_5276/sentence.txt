More than 3 years have passed since last update.文字列補間を使って、書式を指定した文字列整形をいろいろ試した。
String.Formatメソッドでの書式指定となにが違うというわけでもないが、記述量が減るので、書式のサンプル集としてはシンプルにまとまった。整数と小数を区切る文字や、整数の桁を区切る文字などの設定は、NumberFormatInfoオブジェクトに含まれる。
現在のカルチャで指定されている値はNumberFormatInfo.CurrentInfoで求めることができる。エスケープ文字をどうしても使いたい場合、$@"..."という書き方もできるのがおもしろい。使用される書式の設定は、DateTimeFormatInfoオブジェクトに含まれる。
現在のカルチャで指定されている値はDateTimeFormatInfo.CurrentInfoで求めることができる。以下はどのカルチャの環境下でも同じ動作をするはずの書式。DateTimeと同様の結果が得られる書式については省略する。DateTimeと同様の結果が得られる書式については省略する。文字列補間式をIFormattableで受け取ることで、IFormattable.ToString(string, IFormatProvider)を使用できる。
これを利用することで、現在使用している環境とは違うカルチャで文字列を整形することができる。
下記では、カルチャに依存しないCultureInfoオブジェクトであるCultureInfo.InvariantCultureを指定している。最後の式がうまくいかないのは、$"{d:F}"を評価した段階で現在のカルチャが適用された文字列に変換されてしまうからだ。上記のIFormattableを使用する方法で、昭和だとか平成といった元号を使った年表記の文字列を取得できる。
DateTime.ToString(string, IFormatProvider)を使用したほうが短かく記述できるが、文字列補間を使用すると書式をコンパイル時にチェックできるという利点がある。標準の数値書式指定文字列
https://docs.microsoft.com/ja-jp/dotnet/standard/base-types/standard-numeric-format-strings
カスタム数値書式指定文字列
https://docs.microsoft.com/ja-jp/dotnet/standard/base-types/custom-numeric-format-strings
標準の日時書式指定文字列
https://docs.microsoft.com/ja-jp/dotnet/standard/base-types/standard-date-and-time-format-strings
カスタム日時書式指定文字列
https://docs.microsoft.com/ja-jp/dotnet/standard/base-types/custom-date-and-time-format-strings
書式を指定して数値を文字列に変換する
https://dobon.net/vb/dotnet/string/inttostring.html
日時（DateTimeオブジェクト）を文字列に変換する
https://dobon.net/vb/dotnet/string/datetimeformat.html
西暦と和暦を変換するには？
http://www.atmarkit.co.jp/ait/articles/0306/06/news004.html
特殊な文字列リテラル
http://ufcpp.net/study/csharp/st_string.html
.ToString(IFormatProvider) on an interpollated string should evaluate to FormattableString.ToString(IFormatProvider)
https://github.com/dotnet/roslyn/issues/12298


