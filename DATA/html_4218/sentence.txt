More than 1 year has passed since last update.本記事は Xamarin Advent Calendar 2018 の14日目の記事です。今回はAndroid、iOS、UWP の各プラットフォーム固有のAPIへのアクセスを共有コードから実行するためのライブラリである「Xamarin.Essentials」を紹介させていただきます。「Xamarin.Essentials」は、長らくプレリリースとして公開がされていましたが、今月初めに正式版1.0がリリースされました
日本語ドキュメントの1.0対応版の翻訳も、この記事を書いている間にどんどん行われていて、ほぼ完了されているようです！さて、Xamarin.Essentials とは何か、簡単に説明します。
Xamarinを使うと、Android、iOS、UWP の各プラットフォーム向けのアプリ開発をC#（またはF#）のみで行うことができ、さらに共通のビジネスロジックや、Xamarin.Forms を使った際にはUIまでを共通のコードで実装することができます。
しかし、バッテリーや位置情報など、プラットフォームに依存するようなAPIを使う場合、Xamarinの標準のままではコード共有ができません。
Xamarin.Essentials は、そういったプラットフォーム依存のAPIを呼び出すためのコードを共通化するためのライブラリです！各OS/プラットフォームのサポートバージョンは以下のとおりです。Xamarin.Essentials で共通のコードで実現できるプラットフォーム依存の機能は以下の29機能です（1.0時点）。
なお、1.0ではプレリリース版と比べいくつかの機能についての統廃合が行われているので、その点は注意が必要です。このようにさまざまな機能のコード共有化を実現する Xamarin.Essentials ですが、実装はどうなっているのでしょうか。ソースコードを見てみましょう。
https://github.com/xamarin/Essentials中身を確認すると、Xamarin.Essentials ディレクトリの下に、各機能ごとの実装が入っています。
ソースコードはプラットフォームごとに xxxx.ios.cs や xxxx.android.cs などのファイルでpartialクラスに分けられていて、各プラットフォームごとの実装が書かれています。
なるほど、こういう仕組みなんですね。例えば、「Clipboard」の実装を見てみましょう。まずAndroid。次にiOS。そしてUWP。各プラットフォームごとに異なる実装を、 PlatformXxxx という名前のメソッドでラップしてくれています。
こうしてみると、Xamarin.Essentialsを直接利用せずとも、固有API呼び出しを実装する際の参考にもなりそうですね。このそれぞれの PlatformXxxx メソッドが、 xxxx.shared.cs のpartialクラスに記述されたpublic な Xxxx メソッドから呼び出されています。なお、.NET Standardアプリ用と思われるものは、このようになっています。現在はどのAPIでもこのように NotImplementedInReferenceAssemblyException を投げるようになっており、中身の実装がされていません。では、これらのプラットフォームごとのpartial クラスに実装されたメソッドを、sharedのメソッドからどうやって呼び分けているのでしょうか？
それはcsprojファイルを見ればわかります。一部の抜粋ですが、となっていて、これを見るとターゲットフレームワークに応じてビルド対象となるソースファイルを切り替えている、という仕組みだとわかります。では、実際に Xamarin.Essentials を使っていきたいと思います。今回は以下の環境で試しました。まずは準備として、したら、します。そしてここが重要なのですが、Android のみ、Essentials利用のために固有の設定を記述します。
ドキュメントによれば、Android プロジェクトの MainLauncher 、または起動されるすべての Activity の OnCreate メソッド内で Xamarin.Essentials を初期化する必要があり、また Android 上で実行時のアクセス許可を処理するために Xamarin.Essentials がすべての OnRequestPermissionsResult を受け取る必要があり、すべての Activity クラスへのコード追加が必要とのことです。
※iOS、UWPは設定不要です。これでXamarin.Essentialsを利用する準備は完了です。超シンプルに、呼び出しのコードを書いてみます。
試す機能は「デバイス ディスプレイ情報 (Device Display Information)」です。まず、MainPage.xamlにボタンをつけます。コードビハインドで、ボタンを押したらディスプレイの幅と高さをアラートする処理を書きます。これだけです！3つのプラットフォーム上で、ちゃんと幅と高さが表示されました！ここでもうひとつライブラリをご紹介します。
Xamarin.Essentials を使ったコードをテストしやすくするための「Xamarin.Essentials.Interfaces」というライブラリです。
こちらも、NuGetからダウンロードできるようになっています。
こちらはまだちゃんと試せていないのですが、Xamarin.Essentials の各クラスをインタフェース化し、モック化可能にしてくれるライブラリで、Ryan Davisさんという方が開発しているものです。このように Moq などと組み合わせて利用するようです。こちらはなんとXamarin.Essentials の最新のコードから生成されているそうで、今後も Xamarin.Essentials 本体の更新に追随して更新されていくようです。
本体のGAに合わせて、1.0がリリースされています。
こちらのサイトで、生成されたインタフェースのコードを確認できます。Azureで動いてますね。ここまでに書いた話だけだと、とても素晴らしい無敵のライブラリかのように思えますが、使う際に注意が必要です。
それは、「機能によってプラットフォーム固有の設定/実装が必要になる場合がある」ことと、「各プラットフォームごとにどんな動きをするか確認しておく」ということです。このあたりの話は、ドキュメントに詳細な記載があります。以下は「バッテリ (Battery)」のドキュメントですが、このようにプラットフォームごとのタブがドキュメントに含まれていたら要注意です。Xamarin.Essentials はまだまだ登場したばかりのライブラリなので、これを使った実装例などはそこまで多くありません。
使いたい機能が1つや2つだけだったり、使いたい機能でプラットフォームごとの設定をたくさんしなければならないものばかりであれば、あえて使う必要もないかもしれませんが、使い方によっては強力な武器になりそうな可能性を秘めていると思うので、機会があればこれを活かしたアプリを作ってみるのもよさそうだと思いました。


