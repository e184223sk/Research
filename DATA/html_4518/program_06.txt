
public static class Extensions {
    /// &lt;summary&gt;
    /// &lt;c&gt;byte&lt;/c&gt; のコレクションを 16 進文字列に変換します。
    /// &lt;/summary&gt;
    /// &lt;param name="source"&gt;16 進文字列に変換したい &lt;c&gt;byte&lt;/c&gt; のコレクション。&lt;/param&gt;
    /// &lt;param name="toLower"&gt;小文字の 16 進文字列に変換する場合は &lt;c&gt;true&lt;/c&gt;、それ以外は &lt;c&gt;false&lt;/c&gt;。&lt;/param&gt;
    /// &lt;returns&gt;&lt;paramref name="source"/&gt; を 16 進数表記に変換した文字列。&lt;/returns&gt;
    /// &lt;exception cref="ArgumentNullException"&gt;&lt;paramref name="source"/&gt; is &lt;c&gt;null&lt;/c&gt;.&lt;/exception&gt;
    public static string ToHexString(IReadOnlyCollection&lt;byte&gt; source, bool toLower) {
        if (source == null) {
            throw new ArgumentNullException(nameof(source));
        }

        var chars = new char[source.Count * 2];
        var ci = 0;
        foreach (var b in source) {
            chars[ci++] = ToHexChar(b &gt;&gt; 4, toLower);
            chars[ci++] = ToHexChar(b &amp; 0x0f, toLower);
        }
        return new string(chars);
    }

    private static char ToHexChar(int b, bool toLower) {
        var val = b &amp; 0x0f;
        if (val &lt; 10) {
            return (char)('0' + val);
        }
        else {
            var offset = toLower ? 'a' : 'A';
            return (char)(offset + val - 10);
        }
    }
}

