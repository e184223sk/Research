
        /// &lt;summary&gt;
        /// 割合100%取得
        /// 四捨五入率を合計すると100％になる方法
        /// &lt;/summary&gt;
        /// &lt;param name="resultList"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static List&lt;decimal&gt; GetPercent100(List&lt;double&gt; levelList)
        {
            var total = levelList.Sum();
            var loop_i=1;//計算loop回数
            // 配列
            List&lt;decimal&gt; result_temp = levelList.Select(x=&gt;Convert.ToDecimal( x* 100 / total)).ToList();
            List&lt;decimal&gt; result = result_temp.Select(x=&gt;Math.Round(x, 1, MidpointRounding.AwayFromZero)).ToList();
            Console.WriteLine(".初期四捨五入数列：" + string.Join(" , ", result) + " sum=" + result.Sum());
            List&lt;decimal&gt; result_hasu = result_temp.Zip(result, (t1, t2) =&gt; t1 - t2).ToList();
            Console.WriteLine(".初期端数：" + string.Join(" , ", result_hasu));
            if (result.Sum() == 100) { return result; }
            do
            {
                // 最大端数と最小端数のindexを算出
                var result_hasu_temp = result_hasu.Where(i =&gt; !(i == 0 || i==Convert.ToDecimal( 0.1 ) || i==Convert.ToDecimal(-0.1))).ToList();
                decimal cnt_hasu = result_hasu_temp.Count();
                decimal max = result_hasu_temp.Max();
                decimal min = result_hasu_temp.Min();
                int maxindex = result_hasu.FindIndex(i =&gt; i.CompareTo(max)==0);
                int minindex = result_hasu.FindIndex(i =&gt; i == min);
                Console.WriteLine("  LOOP" +loop_i+"回目");
                Console.WriteLine("   hasu_temp"+loop_i+":" + string.Join(" , ", result_hasu_temp));
                if (maxindex != -1)
                {
                    Console.WriteLine("   "+(minindex+1)+"番目最小端数:["+min+"]  "+(maxindex+1)+"番目最大端数：[" +max+"] ");
                    if ((minindex != -1 &amp;&amp; maxindex != minindex))
                    {
                        // 最大端数、最小端数の項目は違う
                        // 0.1までの最小調整端数を算出し、最大端数は調整端数を足す、最小端数は調整端数を引く
                        var add = Math.Min((decimal)0.1 - result_hasu[maxindex], result_hasu[minindex]);
                        result_hasu[maxindex] += add;
                        result_hasu[minindex] -= add;
                        Console.WriteLine("    A maxindex != minindex 各自maxindex数+add,minindex数-add add:"+add);
                        Console.WriteLine("    -&gt; 移動後：" + string.Join(" , ", result_hasu));
                    }
                    else if (result_hasu_temp.Average()==max&amp;&amp;result_hasu_temp.Average() ==min
                            &amp;&amp; maxindex == minindex)
                    {
                        //端数すべて同じ
                        // 最大端数が0.1になるまで最小端数を移動
                        if (max&lt;0)
                        {
                        　　//端数＜0の場合
                            var add = (decimal)0.1 - Math.Abs(result_hasu[maxindex]);
                            result_hasu[minindex] -= add;
                        Console.WriteLine("    B 端数すべて同じ max&lt;0 minindex数-add add:"+add);
                        }
                        else
                        {
                        　　//端数&gt;=0の場合
                            var add = (decimal)0.1 - Math.Abs(result_hasu[maxindex]);
                            result_hasu[maxindex] += add;
                        Console.WriteLine("    C 端数すべて同じ max&gt;=0 minindex数+add add:"+add);
                        }
                        Console.WriteLine("    -&gt; 移動後：" + string.Join(" , ", result_hasu));
                        // 端数を結果に試し計上
                        var t3 = result.Zip(result_hasu, (t1, t2) =&gt; Math.Round(t1 + Math.Round(t2, 1, MidpointRounding.AwayFromZero), 1, MidpointRounding.AwayFromZero)).ToList();
                        Console.WriteLine("    端数を試し計上：" + string.Join(" , ", t3) + " sum=" + t3.Sum());
                        if (t3.Sum() == 100)
                        {
                            break;
                        }
                    }
                    else
                    {
                        Console.WriteLine("    ★D★");
                        break;
                    }
                }
                loop_i++;
            } while (true);
            // 端数を結果に戻す
            result = result.Zip(result_hasu, (t1, t2) =&gt; Math.Round( t1 + Math.Round(t2, 1, MidpointRounding.AwayFromZero), 1, MidpointRounding.AwayFromZero)).ToList();
            return result;
        }

