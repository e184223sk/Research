More than 3 years have passed since last update.まず第一にこの記事の作成日が2017/08/14であることを記しておくというのも、現状EntityFrameworkCoreに関する記事はいくつも見つかるがバージョンによってえらい差があるらしく、そのまま実行してまともにDBにアクセスできるものが無かったきっとこの記事ももうちょい先(具体的には.NetCoreAppの標準が2.0になった時)には役に立たなくなっているはずなので、あくまで今時点ではこうすれば動くというものを書いていくなお、先に言っておくが、下記の手順は「動かすためのもの」であって最適な方法ではないと思う。というか最適な方法なんてものがあったらさっさとpreview版のときの情報を消して公式ドキュメントを更新してほしいggrks早い話がO/Rマッパーもっとわかりやすく言うと、sqlをできるだけ直に書かないことでプログラマがオブジェクト指向の範囲の知識でDBとデータをやり取りする仕組みを提供するframeworkggrksちっちゃくて軽いDBだと思えばあっている　つまりは幼女だちなみにEntityFrameworkCoreは根本的にはDBの実装に左右されないようになっているので、一番最初の接続に関するところを変えればSqlServerだろうが何だろうが同様に使える今回は単に自分がSqliteを使いたかっただけggrksコードで書かれたModelが先にあって、DB・テーブルはそれを元にフレームワークが勝手に作ってくれる　そんな感じの作り方のこと適当にクラスライブラリで作っとく別にクラスライブラリじゃなくてコンソールアプリでも同じだと思う、多分以下をインストール安定版じゃないけど知らんとくに説明不要こいつが一番苦戦した多分なんだけど、上述のEntityFrameworkCore.Sqliteが接続するときにSQLitePCLを使ってて、そいつの初期化処理に必要なんだと思う　小二時間返して以下のように書いたら動いたただし情報がバラバラで自分には合ってるのかどうかも判断できないHogeDBContext.csHogeModel.csHogeDBContextTest.csテストは投げやりになって適当に書いたけど、動くはずver2.0.0-preview2-finalって何？刻みすぎじゃない？トネガワさんもびっくりだよ


