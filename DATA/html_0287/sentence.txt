ブラウザー内で C# のコードを実行できる Blazor ですが、DOM 要素を操作するには JavaScript による処理に頼る必要があります。この記事では、Blazor における C# と JavaScript との相互運用 (JavaScript Interop) 、また同機能を用いた JavaScript ライブラリの利用方法について解説します。環境:Blazor で JavaScript Interop を利用する際は、以下のステップが必要になります。まず、呼び出される JavaScript モジュールを以下の通り定義します。C# のソースコードから上記モジュールをインポートし、関数を呼び出します。まず、次の名前空間への参照を追加します。これにより、以下の手順で JavaScript モジュールを参照できます。InvokeVoidAsync() では、実行する関数名を第一引数で、関数へ渡す引数項目をそれ以降の引数で指定します。これにより引数 obj へ渡した値の型 string とその内容 "my first interop" が、ブラウザーのコンソール上へ出力されます。引数として渡せる値は JavaScript 向けに変換が行われます。変換結果の例としては以下の通りです。この変換処理は以下の注意点があります。Tuple が利用できないのは意外な気もしますが、JavaScript 側で対応するデータ構造がないことが理由なのかもしれません。JavaScript Interop による関数の呼び出しと、関数へ渡した値が変換される際の挙動について確認しました。続いて、JavaScript ライブラリを用いて DOM を操作するパターンについて確認します。例として、Chart.js を利用して画面上へグラフを出力するまでの流れを確認します。Blazor のテンプレート プロジェクトでは、連日の気温を一覧表示する FetchData.razor というサンプル コンポーネントが含まれています（気温の数値自体はダミーデータとなっています）。これをもとに、気温の変化を日付順のグラフとして出力させます。まず、Chart.js のライブラリ本体をダウンロードします。これを /wwwroot/js/lib へ配置し、/wwwroot/index.html にライブラリへの参照を追加します。/wwwroot/js 配下に、Chart.js を呼び出す以下のモジュールを定義します。Razor コンポーネント ファイル FetchData.razor にて IJSRuntime への参照と、グラフの出力先となる canvas 要素、要素への参照を格納する ElementReference 型のフィールドを追加します。上記 Razor コンポーネントに対するコードビハインドとして、FetchData.razor.cs を作成します。こちらに Chart.js へ渡すパラメータと対応するデータクラスを定義します。次に、これらデータクラスを用いてパラメータを構成する処理を追加します。上記関数の呼び出しを、ページの初期化処理中に追加します。以上の変更により、画面上へ以下の通りグラフが出力されるようになりました。ライブラリの関数を呼び出す JavaScript モジュールを用意することで、C# のコードから DOM を操作する手順について確認できたと思います。ここでは FetchData.razor コンポーネントへ直接 canvas 要素や各種データクラスを追加しましたが、実際にはグラフを描画する Razor コンポーネントとして定義することが推奨されます。こちらについては別途取り上げたいと思います。参考:


