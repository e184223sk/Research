今日は以下の内容をネタに記事を書いてみようと思います。
記事のネタに丁度いいかなって思ってブックマークしてたのですが、あれからも1月以上がたってしまいました…#WPF でPrismを使い #UserControl を動的に作成して任意の座標に配置するとかドンピシャで参考になる事例が出てこない。あっても断片的なコードで参考にならん。WinForms？今時？ｗって小馬鹿にした言葉を良く見かけるが、WinFormsの方が情報が豊富でWPFより精神的に楽だわ。座標とか表示するデータを管理するクラスを定義して ObservableCollection&lt;T&gt; に突っ込みましょう。
突っ込んだら後は Canvas を ItemsPanel に設定した ItemsControl に表示すれば OK です。今回はサンプルなので表示用データは以下のようなシンプルなレコードにしました。ViewModel も作ります。INotifyPropertyChanged や ICommand の実装を自分でやるのはめんどくさいので Prism.Core パッケージを参照して BindableBase と DelegateCommand は拝借しました。AddCommand が実行されたらランダムな座標をもった Item クラスを作って追加しています。ここまで出来たら、あとはそれをどのように表示するのかというのは XAML の仕事です。コレクションを表示するのは ItemsControl (およびその派生クラス) でやることが多いです。
要素の選択が必要とかツリー状に表示したいとか仮想化したいとか用途に応じて選んでいきます。今回は表示出来ればいいだけなので一番シンプルな ItemsControl にします。ItemsControl 系のコントロールでは、要素をどのように並べるかという Panel を差し替え可能です。今回は指定した座標に題したので Panel を Canvas にしています。Canvas は、まさに指定した座標に要素を配置するためのコントロールです。実行してボタンをぽちぽち押すと、こんな感じで現在時刻がランダムな位置に表示されます。Prism でも基本的に同じです。ですが、例えば Prism の Region 内の指定した座標に View を表示したいという要望であれば先ほど紹介した内容と Prism を組み合わせてやる感じになります。Prism の Region に ItemsControl が指定できるので ItemsPanel を Canvas にしておきます。ViewModel 側では ContentRegion に対して ViewA を表示するように要求する AddCommand を追加しておきます。表示位置とか表示内容はナビゲーションのパラメーターで指定するようにしました。ViewA の ViewModel はこんな感じです。普通の WPF とちょっと違う点としては、Canvas の位置指定を行うための Canvas.Top, Canvas.Left 添付プロパティを設定する場所です。Prism では Region に指定している ItemsControl の Items に直接 View のインスタンスを追加するので、ItemsContainer でラップされないため View で直接添付プロパティを設定します。ということで ViewA.xaml は以下のようになります。実行するとこんな感じになります。ということで、WPF の基本である（と個人的に思ってる）データの管理は C# でやって、それをどのように表示するかは XAML でどうにでもなるという原則がよく出ている例になるかなと思いました。ソースコードは以下のリポジトリに上げています。PureWpf プロジェクトが Prism を使ってないもので PrismApp が Prism を使っているものになります。それでは、良い WPF &amp; Prism ライフを！この記事のポイントは ItemsControl の理解と、Prism の Region への応用という感じです。WPF で ItemsControl や ListBox などを使って柔軟にデータを表示できる例としてインパクトが大きいもの例に ListBox で都道府県選択 UI を作って見た目を日本地図を表示した Yamaki さんの記事があるので紹介しておきます。(13 年前の記事になるのか…）http://yamaki.hatenablog.com/entry/20071011/1192091886



