More than 1 year has passed since last update.申し訳ありません。
この記事の例題のA君はクロージャの使い方を間違えています。
この記事を読むときは十分にご注意ください。
詳しくは@links_2_3_4さんのコメントをご参照ください。
（@links_2_3_4さん、コメントをありがとうございます。）「グローバル変数で定義されてて、どこで変更されとるんか全くわからんっっっっ！！！」誰しもが経験する地獄だと思います。
この記事ではクロージャを使うことで、そんな悪名高いグローバル変数を使わずに保守性の高いコードを書く例を紹介します。
例ではC#を使用しますが、クロージャはJavaScriptやPythonなど数多くの言語で取り入れられているので、C#以外の方はそれぞれの言語に応じた書き方で試してみてください。この記事は以下のような方を対象としています。それでは頑張っていきましょう。そもそもクロージャって何？という人もいるかと思うので、実際のコードでクロージャを使ってみます。MakeCounterメソッドは外部で定義されたローカル変数numをインクリメントするメソッドを返します。
その結果、メソッドを呼び出すたびにnumの値が維持されたままインクリメントすることができます。
このようにメソッドの中で作られるメソッドが外の変数を参照している場合、外で定義した変数を閉じ込めて使用していることからクロージャと呼んだりします。
今回の例でいうと、MakeCounterで定義したnumを参照するincがクロージャとなります。クロージャについて説明したところで、実際にクロージャを使ってグローバル変数を駆逐してみます。
例を出すだけなら他にクロージャを紹介しているサイトと変わらないので、ここでは実際の現場でも起こりそうな自体を想定し、クロージャを適用してみようと思います。
（この例題で登場するグローバル変数は実際にはメンバ変数ですが、クラス内のどこからでも参照できるということで、便宜上グローバル変数と呼ぶこととします。）ある日、システム利用者からA君宛にこんな依頼が届きました。
「画面が開くのに時間がかかるんだけど、もう少し早く開けませんか？」A君が早速、調査対象の画面を調査してみると、画面に表示するフルネームを取得するのに、以下のクラスのGetFullNameメソッドが利用されており、その中で呼ばれるDBアクセスの部分で時間がかかることが分かりました。GetFullNameメソッドを呼ぶとDBアクセスが2回起きてしまうため、余計に時間がかかっていると判断したA君は、DBアクセスを1回で済ませられるように1度目に取得したユーザ情報をキャッシュしておこうと考えました。A君はグローバル変数を利用すれば、キャッシュを実現できそうだと考え、以下のように修正ました。一度DBアクセスして取得したデータをグローバル変数に保持しておき、そのデータを再利用するという方針です。A君は画面が開くのが早くなったことを確認し、コードレビューをしてもらうように上司に連絡しました。上司からのコードレビューのコメントが返ってきました。「_cache変数がグローバルだと誤った使い方で使われてしまうかもしれません。クロージャにしてみてはどうでしょうか？」確かに、このクラスのことを知っているA君は_cache変数の使い方を知っていますが、知らない人がこのクラスに機能の追加や修正をした際に、想定外の使い方で_cache変数を利用してしまう可能性はありそうです。A君は上司のコメントにあったクロージャを調べて実装し直してみることにしました。Findメソッドの内容をFindUsingCacheメソッドで作るクロージャに移動し、Findメソッドはクロージャを呼び出すだけに変更しました。グローバル変数として定義していた_cache変数がクロージャを使うことにより、FindUsingCacheメソッドでしか参照することのできないローカル変数に変更されていることがわかると思います。クロージャに変えたことにより、_cache変数が想定外の使い方をされる可能性がなくなりました。以上の例題を通じて、改めてクロージャを使うことのメリットをまとめてみます。今回はクロージャを使うことでグローバル変数を使わずに、保守性を高くする様子を例題と共に見ていきました。
確かにグローバル変数を使うことでも例題と同じようなことはできます。
しかし、そのグローバル変数が1ヶ月後、半年後、1年後、チームを苦しめているかもしれません。
この記事が保守性の高いコードを書く手助けになれば嬉しいです。それではまた。
TomoProg


