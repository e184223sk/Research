More than 3 years have passed since last update.UnityRoomさんの「1週間ゲームジャム(https://unityroom.com/unity1weeks/1 )」が大盛況だったのは記憶に新しいですね。既に次回の開催も決まっているようです。
そんな折、UnityRoomの管理者であるnaichiさんのこんなTweetがtweetの https://t.co/ZnHOHzjat0 と同じように、簡単にランキング実装できる仕組みを作りたいんだけどNCMBはWebGL対応してないのよなぁ。気合でREST叩けばいけるのかしら？unityroomのDBでそこまでサポートするのはだるいしなぁ。確かに。
WebGL出力はまともな対応しているブラウザさえあればどんな環境でも動くし素晴らしい・・・けど、僕が知る限りの大手mBaaSはWebGL対応しておらず、簡単なランキング処理を実装するのもちょっと技術ハードルや資金ハードルが高かったりが現状です。（MySQLとPHPが使える無料だったり、月300円くらいのレンタルサーバーでもいいんだけど・・・いいんだけど・・・んーーーー。という感じ）なんで各mBaaSはWebGL対応してないの？というと、socket通信絡みの技術的問題な側面もあれば、「WebGL版のプロダクトがそのまま育っても将来の顧客にならない」というビジネス的な側面もあるのかな。と（想像です）ないのなら・作ってしまおう・ホトトギスということで、まだ試作に近いのですが、作ってみました。
コンセプトはです。・GoogleSpreadSheetのページへ行く https://www.google.com/intl/ja_jp/sheets/about/・GoogleSpreadSheetを使う　をクリック
・右下の＋をクリックでシートを追加
・シートの画面が開くので、「ツール」→「スクリプトエディタ」
・function myFunction() {}　は消して、以下のコードをペタっとな (最新はこちら→https://github.com/divide-by-zero/GSSA/blob/master/projects/Assets/GSSA/GoogleAppsScript/GSSA.gs)・ 「公開」→「Webアプリケーションとして導入...」 → プロジェクト名の編集　（好きな名前を。そのままでも良いです）
・プロジェクトバージョンは「新規作成」　アプリケーションにアクセスできるユーザーは「全員（匿名ユーザーを含む）」にして「導入」
・「許可が必要です」のダイアログが表示されるので、「許可を確認」→ 自分のGoogleアカウントを選んで「許可」
2017/08/16追記どうも、Googleさんの挙動がちょっと変更になったらしく、今現在この手順ではエラーが出るようになっているようです。詳しくはこちら
GAS で「一部のスコープへのアクセス権限がありません」と怒られたときの対処法を参照していただけるとよいかと思います(非常に助かりました。 @zk_phi 氏に足を向けて寝られない・・・）が、一応こちらにも修正を。・左下の言語選択から「English(UnitedStates)」を選択
・自分のGoogleアカウントを選択
・This app isn't verified と出るので、左下の「Advanced」を選択
・Go to "自分のプロジェクト名" (unsafe) を選択
・最終確認ぽい画面になるので「Arrow」を選択
以上です。やってくれるぜgoogleさん(ただ乗りしている身なので何も言えませんが）
2017/08/16追記終了。　・「現在のウェブアプリケーションのURL」　をコピーして取っておいてください。
GoogleSpreadSheet上の作業は以上です。　簡単に。というわりに手順が多めですが最初の1回だけですし、あまり迷うところがないのでそんな苦じゃないかと。github(https://github.com/divide-by-zero/GSSA) のReleaseフォルダから GSSA.unitypackage をダウンロード(直リンク：https://github.com/divide-by-zero/GSSA/raw/master/Release/GSSA.unitypackage) し、
使いたいプロジェクトにインポートしてください。
（メニューのAssets→Import Package→Custom PackageからGSSA.unitypackageを選択してImportするか、プロジェクトを起動した状態でGSSA.unitypackageダブルクリックでも大丈夫（なはず））
1番最初のシーンにGSSA/Prefabs/SpreadSheetSetting prefabを配置

※空のGameObjectを配置して、GSSA/Scripts/SpreadSheetSettingsを自分でアタッチしても良いですinspectorのurlの枠に↑でコピーしておいた「現在のウェブアプリケーションのURL」をセット
Is Debug Log Output はチェックを入れると微妙に通信のログが出力されます。デバッグ時にどうぞ。
Default Sheet Name はとりあえず入れなくても良いです（後述）どうやら、この「現在のウェブアプリケーションのURL」で取得できるURLが間違っている事があるようです。script.google.com/macros/u/0/s/AKfy~~/execこんな感じのURLになっている場合script.google.com/macros /u/0 /s/AKfy~~/execが邪魔らしく、/u/0 を取り除いたscript.google.com/macros/s/AKfy~~/execだと正しくアクセス出来るらしいです。（naichiさん情報ありがとうございます！）ちなみに
マニフェストから配置

の中の

のURLには /u/0 は入っていなかったします。なんなんでしょうね。（こっちをコピーするって手もありますね）これで準備完了です！　さぁ使いましょう。NiftyのmBasSに似た感じになってます（ちょっと参考にしつつ、不要だと思ったところをそぎ落としたので似ているだけです）例えば、空のGameObjectに適当なScriptをアタッチして、Startにでもこんな感じで書きますこれで実行をすると、先ほど作ったスプレッドシートに「Chat」というタブが追加され、1行目にnameとmessageとcreateTime(これだけは勝手に作られます）、2行目にそれぞれプログラムで指定した文字列と作成日時の数字が記入されているはずです。
もうお分かりですね。　GoogleSpreadSheetを使って簡易なKey-Value-Storeを用意しました。
Google Apps ScriptにはdoPostかdoGetというメソッドを用意することで、Webサービス風にふるまう事が出来るので、それをインタフェースにSpreadSheetを操作しているだけです。なお、これではSpreadSheetにデータを追加しているだけなので、取得もやってみます。これまたNiftyのmBasSよろしく、Query発行のためにSpreadSheetQueryクラスをnewしています。
なお、コンストラクタに渡しているのはシート名なんですが、「2.Unity側準備」でセットアップしたSpreadSheetSettingsのDefault Sheet Nameに基本的に使用するシート名を記述しておけば省略(nullを指定)した場合そちらが使われます（SpreadSheetObjectも同じです。　無事伏線回収）また、Whereメソッドで絞り込みができます。　AND条件のみ対応しており、その場合にはAndWhereメソッドを使ってください。それぞれのメソッドが自分自身を返すのでメソッドチェーンで書く事も出来ます。＜例＞（なおOR条件はややこしくなるので省きました。要望があれば追加する・・？かも・・・？）ソースがくっついているので、詳しくはソース見てね！って感じもしますが、一応補足。
Whereの第一引数はKeyになる項目。　第二引数は比較式です。=,==,&lt;,&lt;=,&gt;,&gt;=,!=,&lt;&gt; あたりだけ対応しています。他にはがあります。FindAsyncの引数にはcallbackでAction&lt;List&lt;SpreadSheetObject&gt;&gt;が書けるようになっており、戻ってきたListに対しての処理をラムダ式で記述する感じです。そして、何気にFindAsync（SaveAsyncも）はTaskのasync-awaitのように、コルーチンの中であればyield return で待機可能になっています。
具体的には↓な感じこの場合はQueryオブジェクトのResultにList&lt;SpreadSheetObject&gt;が格納されます。(こっちの方が使い良いかも？)
なお、Listの件数はQueryオブジェクトのCountに格納されます。
使っても使わなくてもなんですが、SpreadSheetQueryにはCountAsyncメソッドも用意してあり、こっちは件数だけを返却してくれるので、自分のスコアが何位なのか、などをそれなり高速に調べるのに使えます。データの更新はどうするのか。　というと、SpreadSheetQueryで取得できたSpreadSheetObjectに対して値をセットして、SaveAsyncを呼ぶだけです。SpreadSheetを見るとちゃんと更新されています。
内部的にはobjectIdというid（というか、SpreadSheetでの行番号)を持っていてそれの有り無しで新規か更新か分岐している感じです。本来ならまだ世に出せるレベルじゃないですが次の1week game jamが近かったので・・・。
見る人が見れば突っ込みどころ満載だと思うので、要望やプルリクをくれると非常にうれしいです。
特にGoogleSpreadSheet側... jsド素人なのにやりたいことだけ調べつつ無理やり実装したので辛みがにじみ出ています。
誰かにきれいに書き直してほしいな・・・。あとSpreadSheetの排他処理（ロック処理）なんかをもっとちゃんとやらないとロック範囲が広すぎて速度的に実用に耐えない可能性は十分あります。（まぁ、あくまでも仮設のWebGL版だけの簡易ランキングシステム用。　とか割り切ればそこそこ良い選択肢なんじゃないかなーと思って。）え？ユーザー管理？
ユーザー管理ねぇ…。 やっぱり要ります…？ユーザー管理ではないですが、近いものでSpreadSheetSettings.Instance.UniqueIDプロパティがあります。（まぁ、guidを保存してるだけですけど。）
PC毎（ブラウザ毎かな？）に限りなく一意に近い値を保持しているのでuniqueidを指定してFindAsync
↓
SpreadSheetObjectの戻りがあるようなら、既にデータが登録されているので、そのSpreadSheetObjectを保持、更新などに使用
↓
戻りが無いようなら、新規ユーザーとみなす。とかやれば、ユーザー管理っぽい感じになります。
具体的には以下な感じで。と、まぁ、こんな感じですが。
 ちゃんとランキングを扱うサンプルプロジェクトを準備中なので、近日中出来次第また解説を書きたいと思います（そんなんばっか）チャットを実装のサンプル:UnityのWebGL出力に簡単に無料でKVSを使うサンプル1(Chat編)
ハイスコアランキング実装のサンプル:UnityのWebGL出力に簡単に無料でKVSを使うサンプル2(ハイスコアランキング編)を用意しましたので、興味がある方はこちらもどうぞ。


