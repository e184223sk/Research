GoFのデザインパターンの1つであるStateパターンを体験してみました。Stateパターンとは「状態」をクラスとして持ち、その変化を管理しやすくするためのデザインパターンです。
「状態」を表すStateインターフェースを継承して具体的な「状態」を持つクラスを作成、そしてその「状態」をContextクラスで管理する、というイメージです。なかなか説明が難しくて申し訳ないのですがWikipediaから引用したクラス図を以下に添付いたします。以下にサンプルコードを記載します。
Contextクラスで状態を管理して（セットして）、その状態に応じた処理が動いていることが分かります。今回はなるべく少ない量にしたかったので上記のようなコードにしていますが、調べた感じですと具体的な状態を記載しているクラス（上記だとWeekdayクラスやHolidayクラス）の生成はSingletonパターンを利用しているものも見られましたので1状態につき複数のインスタンスを生成する必要がない場合はそのように実装するのも良いと思います。実はStateパターンを知らずにif文で全部対処したことがありまして...
新しい状態が加わってかつその中の振る舞いも追加されてif文が鬼ネストしたことを思い出しました。あの時これを知っていればもう少し良くなっていたのかな...とも思うと同時に勉強不足を反省しました( ；∀；)
もっとしっかり理解してより良いコードが書けるように頑張るぞーー！！今回の記事を書くにあたり、以下の記事を参考にさせていただきました。とても勉強になりました！ありがとうございました！！


