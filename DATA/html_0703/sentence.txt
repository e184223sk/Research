急遽来月からC#でシステム立ち上げの案件に入ることになり、
最近の.NET周りの技術について勉強することに。以前関わっていたプロジェクトでは、
ASP.Net MVCで構築し、その際ORマッパーなどは使用していなかったが、
.NET Core勉強中にふとEntity Framework CoreというORマッパーが目についたので
触ってみたところ、とても良かったので記事にした次第です。今回は1つのテーブルからデータを取得する処理を
Entity Framework Coreを使用してやってみました。言語：C# 8.0
FW：.NET Core 3.1.401
DB：MySQL 8.0.21
その他：Docker, AdminerなどEFCoreのパッケージをインストールします。
今回はDBにMySQLを使うので、.NETプロジェクト直下で以下コマンドを実行。NuGetパッケージ名は以下サイトに記載してあります。
有名どころのDBは大体あると思う。
https://docs.microsoft.com/ja-jp/ef/core/providers/?tabs=dotnet-core-cli今回は以下のような企業の株価を保持するテーブルを準備します。

とりあえず上記テーブルに2020/9/1時点の東証1部の会社の株価データレコードを挿入します。
本当は時価総額が良かったけどデータが見つからなかった。テーブルのレコードを保持するいわゆるエンティティクラスを作ります。プロパティは、テーブルのカラム名・型を一致させる必要があります。
また、基本的にEntityクラスには主キーのプロパティが必要で、
これが無いとクエリ発行時に例外が投げられます。
主キーにあたるプロパティに[Key]注釈をつけるか、
プロパティ名をidにすると主キーとして認識されます。
（プロパティ名をidにする場合、テーブルのカラム名もidにする必要あり）どうしても主キーを付けられない場合は、クラスに[Keyless]注釈をつけるようです。
（振る舞いがどう変わるかは以下参考。）
https://docs.microsoft.com/ja-jp/ef/core/modeling/keyless-entity-typesDbContextを継承した拡張DbContextクラスを作成します。DbSet型のプロパティとDB接続文字列を設定するOnConfiguringをオーバーライドしたメソッドを実装します。
（実際のシステムでは、接続文字列は外部ファイルや環境変数に外出しした方が良いでしょう。）
このDbSet型のプロパティ名のテーブルを参照するため、
アクセスしたいテーブル名とプロパティ名を一致させる必要があります。これだけでORマッピングの実装は完了です。
昔はJavaでマッピング用の設定ファイルをガリガリ書いてたので
簡単すぎてびっくりしました。最後にDBにSQLクエリを発行して結果を受け取って処理するクラスを実装します。
サンプルとして、指定した業種・株価上位件数の会社の株価を表示するコードを書いてみます。SQLクエリの構築、発行の実装方法としてLINQを使う方法とSQLクエリを書く方法があります。上記のようにLINQでSQLクエリの構築と発行ができます。
なんと・・・これは快適・・・😇
SQL書かなくてもコードアシストでサクサク問い合わせ内容を掛けるのは良いですね！実行結果は以下の通りです。SQLを直接書く場合は上記のようにDbSet#FromSqlRawメソッドで指定します。
バインドパラメータを使う場合は{0},{1}のように指定して、
SQL文に続く引数に値をバインドパラメータ分だけ指定します。またSELECT句にカラムを指定する場合は、
必ずEntityクラスのすべてのプロパティのデータを返すように指定する必要があります。結果は下記のとおり、先ほどと同じです。LINQで実装した場合、どんなSQLクエリが投げられてるんだろう？🤔
まさかSELECT * FROM CompanyStockPrice;で全件取ってきてないよな・・・？
と思ったのでMySQLのSQLログを有効にして発行されたSQLクエリをDBサーバ側で取ってみました。おぉーLINQの処理内容がそのままSQLクエリに反映された形になってますね。
リテラルに指定の値がそのまま記載されてますが
バインドパラメータが埋め込まれたSQLクエリ発行したときでも上記のようにログに出るので
LINQ時もバインドパラメータ化されてるでしょう・・・きっと。ORマッピングが設定ファイル無しでコードだけで済むのは本当に良いですね！
LINQでSQLクエリを構築する方法もやってみると実装が快適です。ただ、実際のシステムのSQLクエリはもっと複雑なものもあるので
LINQで書く場合と生SQLを書く場合とで使い分けが必要そうです。
また、どちらでやる場合も↑には記載していない注意点がいくつかあるので
公式ドキュメントに目を通しておいた方が良いと思います。


