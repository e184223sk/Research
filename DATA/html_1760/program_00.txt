using System;
using System.Activities;
using System.Threading;
using System.Threading.Tasks;
using Company.Product2.Activities.Properties;
using UiPath.Shared.Activities;
using UiPath.Shared.Activities.Localization;

namespace Company.Product2.Activities
{
    [LocalizedDisplayName(nameof(Resources.TestSum_DisplayName))]
    [LocalizedDescription(nameof(Resources.TestSum_Description))]
    public class TestSum : BaseAsyncCodeActivity
    {
        #region Properties

        [LocalizedDisplayName(nameof(Resources.TestSum_A_DisplayName))]
        [LocalizedDescription(nameof(Resources.TestSum_A_Description))]
        [LocalizedCategory(nameof(Resources.Input_Category))]
        public InArgument&lt;int&gt; A { get; set; }

        [LocalizedDisplayName(nameof(Resources.TestSum_B_DisplayName))]
        [LocalizedDescription(nameof(Resources.TestSum_B_Description))]
        [LocalizedCategory(nameof(Resources.Input_Category))]
        public InArgument&lt;int&gt; B { get; set; }

        [LocalizedDisplayName(nameof(Resources.TestSum_C_DisplayName))]
        [LocalizedDescription(nameof(Resources.TestSum_C_Description))]
        [LocalizedCategory(nameof(Resources.Output_Category))]
        public OutArgument&lt;int&gt; C { get; set; }

        #endregion


        #region Constructors

        public TestSum()
        {
        }

        #endregion


        #region Protected Methods

        protected override void CacheMetadata(CodeActivityMetadata metadata)
        {
            if (A == null) metadata.AddValidationError(string.Format(Resources.ValidationValue_Error, nameof(A)));
            if (B == null) metadata.AddValidationError(string.Format(Resources.ValidationValue_Error, nameof(B)));

            base.CacheMetadata(metadata);
        }

        protected override async Task&lt;Action&lt;AsyncCodeActivityContext&gt;&gt; ExecuteAsync(AsyncCodeActivityContext context, CancellationToken cancellationToken)
        {
            // Inputs
            var a = A.Get(context);
            var b = B.Get(context);

            ///////////////////////////
            // Add execution logic HERE
            ///////////////////////////

            // Outputs
            return (ctx) =&gt; {
                C.Set(ctx, null);
            };
        }

        #endregion
    }
}

