　前回 はUiPath Activity Creatorの導入を中心に説明を行いました。　今回は実際にUiPath Activity Creatorを使って簡単なカスタムアクティビティを作成してみます。またアクティビティの入出力を担うプロパティの設定について、代表的な記述の仕方を説明します。　UiPathのサイト上でのサンプルでもつかわれている、足し算カスタムアクティビティを作ってみます。仕様としてはInt32型の入力値a,bを加算し、Int32型の値cを出力します。まずWizardを起動して、Add Activityします。
次に追加するアクティビティの設定を行います。今回はTestSumという名前のアクティビティにしました。
次にプロパティを追加します。a,bがInt32型の入力、cがInt32型の出力です。
これで準備完了です。Activityの定義画面からFinishをクリックします。コードが自動的に生成されたます。そのコードを見てみましょう。　このままではロジックがないので、加算のロジックを追加します。ExecuteAsyncメソッドについて以下のように加算のロジックと、戻り値の設定を行います。これで実装は完了です。それではBuildしてみましょう。
すでにActivity Creatorに設定がありますので、Build指示するだけで、プロジェクトフォルダ\Output\bin\ReleaseまたはDebug\Package以下にnupkgファイルが出力されます。
このnupkgファイルをUipathのパッケージ管理から参照できる場所に置きます。
パッケージ管理からは下記のように見えますので、これをインストールします。
インストールが完了すると、アクティビティパネル上で以下のように表示されます。
これをデザインパネルに配置すると以下のようになります。（下図は値が入力された状態です）
実際に値を入力して、期待する値が表示されるか確認してみましょう。
期待通りの動作が確認できれば完成です。今回実際に自動生成されたプロパティに関する箇所を見てみます。今回のプロパティはInArgument&lt;int&gt;型またはOutArgument&lt;int&gt;型として定義されています。
このように定義することにより、UiPathの呼び出し側からワークフロー上の変数等の値を渡すことができるようになります。多くの場合、UiPathの呼び出し側からは変数を渡す必要があるかと思いますので、基本的にはこの型を使用しましょう。ただし値の取得については
var a = A.Get(context);
のように記述する必要がありますので、その点は注意が必要です。　一方で単純にプロパティの型をInt型として定義することもできます。実際に以下のように記述してBuildしてみます。
public int D {get; set;}このように記述した場合もプロパティは生成されます。以下Dというプロパティが追加されました。
しかしそこには定義した型のリテラル値しか入力することができません。int32で定義された変数iを入力しても下記のようにエラーとなります。
　このようなケースは使い道がないようにも思えますが、その項目によっては、よりユーザビリティが高いUIが用意されています。
　具体的には、例えばbool型を指定するとその項目はチェックボックスとして表示されます。enum型にするとドロップダウンリストとして表示されます。FlagsAttribute付きのenum型の場合は複数選択可能なチェックボックス付きドロップダウンリストとして表示されます。
　なおこのような設定は、現時点ではActivity CreatorのWizardではできませんので、手動で記述する必要があります。　例えば以下を追加してビルドしてみましょう。UiPathの画面上は以下のようにboolはチェックボックスに、enumはドロップダウンリストになります。
FlagsAttribute付きのenumは以下のようにチェックボックス付きドロップダウンになります。
(2020/3/18追記)下図のようにWizardのプロパティ定義画面でDirectionをNoneにすることにより、Wizardからでも上記のようなチェックボックスやドロップダウンリストを作成できます。デザイナー部分のプロパティ設定は、また別の機会に記述します。（その２：終わり）その１　その２　その３　その４　その５　その６


