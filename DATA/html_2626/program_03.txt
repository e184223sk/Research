
protected override void  SetVertexBuffer( BxCmSeparatePatch_Object patch )
{
    if( Buf.HasVertexBuffer() == true )
        Buf.ReleaseVertexBuffer();

    Buf.NumVertices = ( int )( patch.NumSurface * 6 );

    VertexInfo[] vertexAry = new VertexInfo[ Buf.NumVertices ];
    for( uint i=0; i&lt;patch.NumSurface; i++ ) {
        GetPosDiff( patch, i, out BxBezier3Line3F hPosBez0, out BxBezier6Line3F hPosBez1, out BxBezier6Line3F hPosBez2, out BxBezier3Line3F hPosBez3, out BxBezier3Line3F vPosBez0,
            out BxBezier6Line3F vPosBez1, out BxBezier6Line3F vPosBez2, out BxBezier3Line3F vPosBez3, out BxBezier2Line3F hDiffBez0, out BxBezier5Line3F hDiffBez1,
            out BxBezier5Line3F hDiffBez2, out BxBezier2Line3F hDiffBez3, out BxBezier2Line3F vDiffBez0, out BxBezier5Line3F vDiffBez1, out BxBezier5Line3F vDiffBez2,
            out BxBezier2Line3F vDiffBez3 );

        int  tessDenom = GetTessDenom( patch, i );

        SetVertexBufferOne( hPosBez0, hPosBez1, hPosBez2, hPosBez3, vPosBez0, vPosBez1, vPosBez2, vPosBez3, hDiffBez0, hDiffBez1, hDiffBez2, hDiffBez3, vDiffBez0, vDiffBez1,
                            vDiffBez2, vDiffBez3, tessDenom, i, vertexAry );
    }

    GL.GenBuffers( 1, Buf.VboID );

    GL.BindBuffer( BufferTarget.ArrayBuffer, Buf.VboID[ 0 ] );
    GL.BufferData( BufferTarget.ArrayBuffer, new IntPtr( Buf.NumVertices * VertexInfo.Length ), vertexAry, BufferUsageHint.StaticDraw );

    GL.BindBuffer( BufferTarget.ArrayBuffer, 0 );
}

