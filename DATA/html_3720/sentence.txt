More than 1 year has passed since last update.この投稿ではC#の分解の例として、Unityゲームエンジンの各種Vector型の分解を紹介します。C#の分解は、C# 7.0から利用可能です。C#におけるValueTupleの分解の例を次に示します。さて、この分解ですが各種ValueTuple型でなくても、その型がDeconstructという名前のインスタンスメソッドか拡張メソッドを持っていれば使うことができます。標準ライブラリでは、各種Tupleクラス、KeyValuePair&lt;TKey, TValue&gt;クラスなどでも（環境によっては）利用可能です。これについては、こちらの「DeconstructメソッドがKeyValuePairなどに追加されて、ValueTupleみたいに分解宣言できるようになる」を参照してください。Unityゲームエンジンの各種Vector構造体を分解できるようにします。次のようなVector3構造体の拡張関数Deconstructを用意します。これを次のように利用すると、Vector3を分解することができます。最初がxで、次がy、最後がzであることに注意してください。なんでもかんでも分解できるように拡張関数を生やすことはオススメしません。分解の乱用は推奨しません。「どの順序でどの要素が分解されるか、利用者がコード・リファレンスを読まなくても、（ほぼ）正しく伝わる型」のみで、分解を提供すべきだと思っています。Vector3型などはコンストラクタにがあり、大抵のUnity開発者ならば、「分解されるならば、x、y、zの順番で分解されるだろう」、という共通認識を持てると思います。以下、各種Vector構造体のDeconstruct拡張関数群を示します。お使いのUnity・環境がC# 7.0に対応している環境・設定かを確認してください。


