More than 1 year has passed since last update.良い返事ありがとうございます。すみません....
嘘です。
まだC#書き始めて一月ちょいしかたっていないので
すげぇとは思いつつまだ愛せていないです。。。とはいえC#書けるようになると色んな事が出来るようになるよ！！ってのはお伝えしたくなったので
僕が愛してるIoT的なハードウェア的なものと絡めてふーんなんかこんな感じなんだ？
くらいをふわっと伝えられればいいなーと思います。オブジェクト指向でなぜつくるのか
をまず読んでオブジェクト指向の変な先入観を取り払って
スラスラわかるC#
を読んで弄り始めてみると楽しくなると思います！！取っ付き難いと苦手意識持っている人も多いかもですけど意外にやってみると
やっぱりプログラミングって楽しいゾこういう人も居ますしある日いきなりホルス神が送られてくればやってみたくなるかもしれない。
https://qiita.com/sngazm/items/c27b7745fb68139213c2世に居るロボット好きでC#好きで物作りが好きな人が増えて行くそんな記事を書きたい（願望）ちなみにこんなのを作る事が出来るようになるさわりのお話し。
とりあえずRaspberry Piの初期設定は終わっていてリモート操作はできる状態までいった前提で話していく。
その辺はここを見て貰うのが早い
Raspberry Pi 初期設定基本的に下記コマンドはRaspberry Pi上のターミナルに打っている。
コードはWindows10にインストールしているVisual Studio2019で書いてbuildしている。samba導入するとWindowsの共有フォルダが使えるのでファイル共有が少し楽。apt-getをアップデートしないと404エラーでインストールできないことがある「Windowsの機能の有効化または無効化」でSMB 1.0/CIFSのClientとServerをチャックマーク付けて
有効にしないとWindows10だとネットワーク共有に表示されない。SSH接続でファイル転送するのもあり。遠隔ソフトにはこれ
RealVNCをダウンロードインストール
Download VNC Viewer for Windows | VNC® Connect※日本語版とかいうのはくそ古いので注意
デフォルトのログインパスワードは
pi
raspberry.NET CoreのインストールGitHub - dotnet/core: Home repository for .NET CoreここのARM/Linux用のSDKをダウンロード
直接DLするならRasberryPiでwgetするといい
100M位容量がある
俺のどんなときもWi-Fiだとくそ遅い。SDKはホームディレクトリ ~/ に入れておくこと
後の作業でそこから解凍する。
あとSDKインストールの前に以下のコマンドでアップデートとライブラリのインストールを行っておく。ホームディレクトリにdotnetフォルダを作りそこにさっきwgetでダウンロードしてきたファイルを解凍する
※もしDLしてきたファイルがバージョン違ったりするならファイル名を変えてください次にPATHを通す必要があるのでnanoで.bashrc開いて最後の行に以下を挿入保存したら下記コマンドで再読込これでバージョンが出ればインストール成功Raspberry PiはLEDを付けるときに抵抗が必要なのでプラス側でもマイナス側でもどっちでもいいので
200Ωくらいの抵抗を適当にかますとLEDが燃えない。
いきなり燃えるわけではないけどそのまま付けると負荷が大きくて点かなくなる！マイナス側はRaspberry PiのGNDのどこでもいいので付ける
プラス側は今回はコードでGPIO4を使うのでそこに付ける。コードはこんな感じGPIOピンの初期化を行い
1秒ごとにON/OFFを繰り返す感じになっている。めっちゃごちゃごちゃしているがこれは作ってみたラジコン的な奴に色々ついてるのでケーブルがごちゃついている。作った奴に使っているのはタミヤ 楽しい工作シリーズ No.100 トラック&amp;ホイールセットタミヤ 楽しい工作シリーズ No.157 ユニバーサルプレート 2枚セット楽しい工作シリーズ No.168 ダブルギヤボックス 左右独立4速タイプ
モーターを動かすためにはRaspberry Piに直接繋げることはできなくて
モータードライバーという物と電源が別に必要になってくる。ほんとは色々遠隔操作できるようにすると面白いけど多くなりすぎるのでとりあえずモーターを動かすって所までやってみようと思う。まずモータードライバーというのがこれ
TA7291Pデータ
こいつを使ってモーター制御を行う。こいつを使うとモーターを右回り、左回り、ブレーキ、回転速度の制御ができる。
詳しくはこの素晴らしい記事をご覧頂くのが良い上記のようなピンの仕様になっている。今回はこんな感じで配線を行った。このコードでモーターを一つ制御できる。
二つ制御する場合はこれを二つ書けば良い。この先でやることは
二つのモーターをコントロールさせるために
TA7291Pを二つ繋げてそれをコントロールするコードを
さっきのコードを元に書く。
例えば左側のモーターを正転させて右側のモーターを逆転させれば車体を右に回転させることができたりする。C#ならこのコードを一つの言語でフロントと繋げてブラウザからコントロールさせるとかもできるが
一つの記事でまとめると流石に書くのが大変すぎたのでやめた。一通りやるとこんな感じの動作ができる。ひとまずだだーと勢いでここまで書いたけど
こういうハードウェアってココをオンにするオフにするといった感じのすごく単純なコードを書くだけで
制御自体は結構簡単にできてしまう。
それに付随するハードウェア自体のコントロール（今回使っているのだとPWM制御とか）がちょっと理解するのに時間かかったりするが
それも中高レベルの物理がなんとなく分かればそんなに難しくないのでハードウェアちょっとやってみたいんだけど
難しそうだよねってまだチャレンジしていない人がいたら是非やってみて欲しい。
そしてどんどんアウトプットして下さい！1人でも多くのハードもできるエンジニアができることを願って。。参考記事
https://codezine.jp/article/detail/11677


