Windows10でOCRをする方法は大体以上の4つがあります。
今回は主に④のMicrosoftOCRを使いながら、
C#.NETで画面の文字を認識を試みてみます。なお、この記事は"公開型開発プロジェクト"PRODUCTICAの過程で作られた記事です。
ご興味がある方はTwitterの公式アカウントを是非ご覧になってみてください！
https://twitter.com/Productica_lisMicrosoftOCRは、デスクトップ版Windows10に実装されている
Optical Character Recognition(OCR)・文字認識用APIです。様々なOCRの中でも結構精度が高いらしいです。
https://rpa.bigtreetc.com/column/microsoftocr/使い方についてですが、
プロジェクトをUWP形式かWPF形式で作るかによって使い方が違います。・UWPの場合
using Windows.Media.Ocr;を書くことでそのままで使うことが出来る。・UWP以外の場合(WPFやFormsなど)
NuGetでMicrosoft.Windows.SDK.Contractsプラグインを導入する必要がある。
また、それに伴った複数の設定が必要。以下、WPF形式でプラグインを導入して使う方法を説明していきます。Microsoft.Windows.SDK.ContractsはUniversalWindowsのAPIをWPFなどのプロジェクトで使うことが出来るようにするプラグインです。導入することでUWP形式で使えるWindows10の標準APIを使うことができます。導入するためには、VisualStudio上で以下の手順を行ってください。※1.パッケージ管理システムがPackage.configだと導入時にエラーが出る場合がある。
※2.既存のプロジェクトを開く場合、パッケージ管理がPackage.configのままの場合があるので、ソリューションエクスプローラー内の参照ツリーを右クリックし、［Package.configをPackageReferenceに移行する］があればそれを押す。その後、プラグインなどの確認ウインドウが出るので問題がなければOKを押す。
※3.バージョンは幾つかあるので、使用したい・インストール済みのWindowsSDKのバージョンと合わせる。
※4.参照の追加によって競合が発生する場合があります。その場合はエラーに基づいて一部追加した参照を消してください。以下のコードを使い画面全体のキャプチャを取得する。上記で画面の画像は取得できるが、このままではMicrosoftOCRでは処理できません。
何故なら、MicrosoftOCRのインプットはSoftwareBitmapという形式になっているからです。
そのため、取得したBitmapを以下のコードでSoftwareBitmapに変換します。一旦画像を保存して、それをsoftwareBitmap形式に読み込み直すという若干力技じみた実装ではあります。
他にスマートな方法もありそうなので、詳しい方は教えていただけると幸いです。ここはとっても簡単、OcrEngineを作ってSoftwareBitmapを渡すだけ。上記の出力結果ocrResult.textで認識結果(String)を得ることが出来ます。今回はWindows10 OCR APIを使いましたが、実装と検証に多くの時間が割けられるのならば、自分で1から実装することも良いと思います。そういう場合、機械学習を用いた文字認識モデルを作る手法などを考えたり実装することになります。Pythonではそれらの機械学習の実装が頻繁に行われているので、それらリソースを参照しながら各言語で実装を進めるのが良いかもしれません。以下の記事が参考になりそうなので、貼っておきます。
【日本語OCRを作ったので解説してみる】
https://qiita.com/tanreinama/items/8fc1c8af6554654aae00
【文字認識アルゴリズムのFOTSを実装した】
https://qiita.com/jjjkkkjjj/items/bfa03d89eaf6ab0c0487#recognition


