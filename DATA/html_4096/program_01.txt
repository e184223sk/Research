
public static class DelegateExtensions
{

    #region action -&gt; async func

    /// &lt;summary&gt;
    /// Converts the specified action to a async func.
    /// &lt;/summary&gt;
    /// &lt;param name="action"&gt;&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static Func&lt;Task&gt; ToAsync(this Action action)
    {
        return () =&gt; Task.Run(action);
    }

    /// &lt;summary&gt;
    /// Converts the specified action to a async func.
    /// &lt;/summary&gt;
    /// &lt;typeparam name="T1"&gt;&lt;/typeparam&gt;
    /// &lt;param name="action"&gt;&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static Func&lt;T1, Task&gt; ToAsync&lt;T1&gt;(this Action&lt;T1&gt; action)
    {
        return (arg1) =&gt; Task.Run(() =&gt; action(arg1));
    }

    /// &lt;summary&gt;
    /// Converts the specified action to a async func.
    /// &lt;/summary&gt;
    /// &lt;typeparam name="T1"&gt;&lt;/typeparam&gt;
    /// &lt;typeparam name="T2"&gt;&lt;/typeparam&gt;
    /// &lt;param name="action"&gt;&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static Func&lt;T1, T2, Task&gt; ToAsync&lt;T1, T2&gt;(this Action&lt;T1, T2&gt; action)
    {
        return (arg1, arg2) =&gt; Task.Run(() =&gt; action(arg1, arg2));
    }

    #endregion

    #region func -&gt; async func

    /// &lt;summary&gt;
    /// Converts the specified func to a async func.
    /// &lt;/summary&gt;
    /// &lt;typeparam name="TResult"&gt;&lt;/typeparam&gt;
    /// &lt;param name="func"&gt;&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static Func&lt;Task&lt;TResult&gt;&gt; ToAsync&lt;TResult&gt;(this Func&lt;TResult&gt; func)
    {
        return () =&gt; Task.Run(() =&gt; func());
    }

    /// &lt;summary&gt;
    /// Converts the specified func to a async func.
    /// &lt;/summary&gt;
    /// &lt;typeparam name="T1"&gt;&lt;/typeparam&gt;
    /// &lt;typeparam name="TResult"&gt;&lt;/typeparam&gt;
    /// &lt;param name="func"&gt;&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static Func&lt;T1, Task&lt;TResult&gt;&gt; ToAsync&lt;T1, TResult&gt;(this Func&lt;T1, TResult&gt; func)
    {
        return (arg1) =&gt; Task.Run(() =&gt; func(arg1));
    }

    /// &lt;summary&gt;
    /// Converts the specified func to a async func.
    /// &lt;/summary&gt;
    /// &lt;typeparam name="T1"&gt;&lt;/typeparam&gt;
    /// &lt;typeparam name="T2"&gt;&lt;/typeparam&gt;
    /// &lt;typeparam name="TResult"&gt;&lt;/typeparam&gt;
    /// &lt;param name="func"&gt;&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static Func&lt;T1, T2, Task&lt;TResult&gt;&gt; ToAsync&lt;T1, T2, TResult&gt;(this Func&lt;T1, T2, TResult&gt; func)
    {
        return (arg1, arg2) =&gt; Task.Run(() =&gt; func(arg1, arg2));
    }

    #endregion
}

