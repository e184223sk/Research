
private void Initialize()
{
    _skinnedMeshRenderer = GetComponent&lt;SkinnedMeshRenderer&gt;();
    if (!_skinnedMeshRenderer)
    {
        _skinnedMeshRenderer = gameObject.AddComponent&lt;SkinnedMeshRenderer&gt;();
    }

    if (_ovrMesh != null &amp;&amp; _ovrSkeleton != null)
    {
        if (_ovrMesh.IsInitialized &amp;&amp; _ovrSkeleton.IsInitialized)
        {
            _skinnedMeshRenderer.sharedMesh = _ovrMesh.Mesh;
            _originalMaterial = _skinnedMeshRenderer.sharedMaterial;

            int numSkinnableBones = _ovrSkeleton.GetCurrentNumSkinnableBones();
            var bindPoses = new Matrix4x4[numSkinnableBones];
            var bones = new Transform[numSkinnableBones];
            var localToWorldMatrix = transform.localToWorldMatrix;
            for (int i = 0; i &lt; numSkinnableBones &amp;&amp; i &lt; _ovrSkeleton.Bones.Count; ++i)
            {
                bones[i] = _ovrSkeleton.Bones[i].Transform;
                bindPoses[i] = _ovrSkeleton.BindPoses[i].Transform.worldToLocalMatrix * localToWorldMatrix;
            }
            _ovrMesh.Mesh.bindposes = bindPoses;
            _skinnedMeshRenderer.bones = bones;
            _skinnedMeshRenderer.updateWhenOffscreen = true;
#if UNITY_EDITOR
            _ovrSkeleton.ShouldUpdateBonePoses = true;
#endif
            IsInitialized = true;
        }
    }
}

