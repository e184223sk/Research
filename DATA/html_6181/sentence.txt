More than 3 years have passed since last update.WebApi のインテグレーションがあるようなので、試してみた。私は、C# に慣れていないので、いくつかつまづいたが、それを含めてシェアしたい。今回は、私のメインマシンが壊れたため、Visual Studio for Mac でコーディングしてみた。.NET がしっかり動作した。今回のコードは、こちらのリポジトリに置いている。次の方法で、Visual Studio for Mac での環境を整えた。複雑さを低減するために、最も単純にした。Packages を右クリックして、Autofac.WebApi2 で検索して、インストールする。ただし、そのままではうまく動作しなかった。特定のメソッドが見つからない。どうやら、Autofac.WebApi2 の依存するAutofac が古いらしい。(3.5) インストール後、Package を右クリック して、Update するとワーニングは出るが、動作はする。現在のコードをみると、Autofac がバージョン4.6.0 になっている様子。ContainerBuilder#Register で依存が3.5である旨のワーニングが出るが、動作には今のところ支障はない様子。Windows だったらこの辺りは出なかった。Visual Studio Community for Mac では、Windows の Visual Studio ほど賢くないので、Controller のテンプレートなどは存在しない。そのままディレクトリをほって、クラスを書く。今回書いてみたコードはこんなの。ProductsContorller.csProduct.csとても一般的なコードだ。ここに、Autofac のDI の設定を入れる。
Global.asax.cs に次のコードを書く。これだけで、すでに、Autofac が追加された上で、WebApiが動作している。Visual Studio for Mac の実行ボタンを押して、http://localhost:xxxx/api/products や、http://localhost:xxxx/api/product/1 などにアクセスすると、動作しているのがわかるだろう。先ほどは、アセンブリから、コントローラのリストを取得して、登録していたが、個別にコントローラを登録する方法がある。こちらの方法だこれは通常の DI の書き方そのものだ。さて、このままだと、DI の旨味が全く感じられないので、フィルタを作ってみる。ログをコンソールに出力するフィルタを書いてみる。それをDIしてみる。LoggingActionFilter.csILogger インターフェイスと、その実装 ConsoleLogger を提供する。IAutofacActionFilter を実装したクラスを作成してフィルタのインジェクションの準備環境。
Global.asax.cs を変更する。ILogger を登録してあげて、ContainerBuilder#Register のラムダ式を使って、フィルタをかけたいメソッドを登録している。これで、アプリを実行すると、動作は変わらないが、Application Output をみるとと出力される。GetAllProducts を実行したとしても、GetProduct にしかフィルターがかかっていないからこのような動作になる。では、複数のメソッドにフィルタをかけたい場合はどうするのだろう？ すべてのメソッドが対象なら、ラムダ式を書かなければ良い。実行結果じゃあ、複数のメソッドや、複数のコントローラにかけたい場合は？単に列挙すれば良い。実行結果以上です


