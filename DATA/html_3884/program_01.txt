
using System;
using System.Collections.Generic;
using System.Linq;

public static class StringCalculationFunctions
{
    // ネイピア数
    private const double E = 2.71828182845904523536;

    // 有効桁数
    private const int SIGNIFICANT_DIGIT = StringCalculation.SIGNIFICANT_DIGIT;

    // メソッド呼び出し用辞書
    private static readonly Dictionary&lt;(string, int), Func&lt;string[], string&gt;&gt; _methodCache = new Dictionary&lt;(string, int), Func&lt;string[], string&gt;&gt;
    {
        {("Sin",   new Type[]{typeof(string)}.GetValueHash()), (args)=&gt;{ return Sin(args[0]); }},
        {("Cos",   new Type[]{typeof(string)}.GetValueHash()), (args)=&gt;{ return Cos(args[0]); }},
        {("Tan",   new Type[]{typeof(string)}.GetValueHash()), (args)=&gt;{ return Tan(args[0]); }},
        {("Log10", new Type[]{typeof(string)}.GetValueHash()), (args)=&gt;{ return Log10(args[0]); }},
        {("Log",   new Type[]{typeof(string)}.GetValueHash()), (args)=&gt;{ return Log(args[0]); }},
        {("Log",   new Type[]{typeof(string), typeof(string)}.GetValueHash()), (args)=&gt;{ return Log(args[0], args[1]); }},
        {("Ln",    new Type[]{typeof(string)}.GetValueHash()), (args)=&gt;{ return Ln(args[0]); }},
    };

    // Type[]で同じ並びの際に同じハッシュ値を返す
    private static int GetValueHash(this Type[] types)
    {
        int result = 0;
        int length = types.Length;
        for (int i = 0; i &lt; length; i++)
        {
            var shift_l = (i % 32);
            var shift_r = 32 - shift_l;
            var hash = types[i].GetHashCode();
            result += hash &lt;&lt; shift_l | hash &gt;&gt; shift_r;
        }
        return result;
    }

    // 登録されたメソッドを呼び出す
    public static string InvokeMethod(string methodName, params object[] args)
    {
        var argTypesHash = ((args == null) ? Type.EmptyTypes : args.Select(x =&gt; x.GetType()).ToArray()).GetValueHash();
        var cacheKey = (methodName, argTypesHash);
        var func = _methodCache[cacheKey];
        return func(args);
    }

    //====================================================================================================
    // 実体メソッド
    //====================================================================================================

    // Sin
    public static string Sin(string calcStr)
    {
        double result = Math.Sin(Deg2rad(calcStr.ToDouble()));
        return result.ToStringWithDigit(SIGNIFICANT_DIGIT);
    }

    // Cos
    public static string Cos(string calcStr)
    {
        double result = Math.Cos(Deg2rad(calcStr.ToDouble()));
        return result.ToStringWithDigit(SIGNIFICANT_DIGIT);
    }

    // Tan
    public static string Tan(string calcStr)
    {
        double result = Math.Tan(Deg2rad(calcStr.ToDouble()));
        return result.ToStringWithDigit(SIGNIFICANT_DIGIT);
    }

    // log - 10を底としたlogの計算を行う
    public static string Log10(string calcStr)
    {
        double result = Math.Log10(calcStr.ToDouble());
        return result.ToStringWithDigit(SIGNIFICANT_DIGIT);
    }

    // log - ネイピア数 e を底としたlogの計算を行う
    public static string Log(string calcStr)
    {
        double result = Math.Log(calcStr.ToDouble());
        return result.ToStringWithDigit(SIGNIFICANT_DIGIT);
    }

    // log - 自前でベース値を設定する
    public static string Log(string calcStr, string baseStr)
    {
        double result = Math.Log(calcStr.ToDouble(), baseStr.ToDouble());
        return result.ToStringWithDigit(SIGNIFICANT_DIGIT);
    }

    // log - ネイピア数 e を底としたlogの計算を行う
    public static string Ln(string calcStr)
    {
        double result = Math.Log(calcStr.ToDouble(), E);
        return result.ToStringWithDigit(SIGNIFICANT_DIGIT);
    }

    // 角度をラジアンに変換
    private static double Deg2rad(double num)
    {
        return num / 180.0 * Math.PI;
    }
}

