
private static string MultiDiv(string calcStr)
{
    // 掛け算、または割り算に一致
    string d = DECIMAL;
    string pattern = d + @"\*" + d + "|" + d + @"\/" + d;

    return CalculationBase(calcStr, pattern, (baseMatch) =&gt;
    {
        double nResult = 0;

        // 演算子で分割し、計算
        Match match = Regex.Match(baseMatch.Value, @"\*|\/");

        string l = match.Result("$`");
        string r = match.Result("$'");

        if (match.Value == "*")
        {
            nResult = (l.ToDouble() * r.ToDouble());
        }
        else if (match.Value == "/")
        {
            nResult = (l.ToDouble() / r.ToDouble());
        }
        else
        {
            nResult = match.Value.ToDouble();
        }

        // 小数点第n位まで取得し、後ろの余分な0を切り捨てる
        string result = nResult.ToStringWithDigit(SIGNIFICANT_DIGIT);

        // 計算結果が + の場合、前方の文字と結合する際に符号なしでくっついてしまう※ので、符号を追加
        // ※この関数の結果が10、前方の文字が123だとした場合、123 10 =&gt; 12310 になってしまう。
        // 　+ を記述しておけば、 123 +10 =&gt; 123+10 と正しい数式の形に戻せる。
        string prefix = nResult &gt;= 0 ? "+" : "";

        return prefix + result;
    });
}

