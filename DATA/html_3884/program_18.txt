
using System;
using UnityEngine;

public class StrCalcTest : MonoBehaviour
{
    string _dbgStr = "";
    private Vector2 _scrollPosition;

    // Use this for initialization
    void Start()
    {
        // 通常計算
        _Recalculation(
            "3.5 - 0.5 + 21 * 2 / 2.5",
             3.5 - 0.5 + 21 * 2 / 2.5
        );

        // 通常計算
        _Recalculation(
            "-2 + 1 * +2 / -2 / 2.0 * -2 + 5 * 2",
             -2 + 1 * +2 / -2 / 2.0 * -2 + 5 * 2
        );

        // 括弧付き計算
        _Recalculation(
            "(1 + 2.5 + (2 - 3.5) * (1 + 1)) * 5 + 3 * (20 - 8)",
             (1 + 2.5 + (2 - 3.5) * (1 + 1)) * 5 + 3 * (20 - 8)
        );

        // 演算子重複
        _Recalculation(
            "1 * (+2 + (-3)) - -+4 - -+ +- -5",
             1 * (+2 + (-3)) - -+4 - -+ +- -5
        );

        // 括弧の計算
        _Recalculation(
            "2 - (1 * -11)",
             2 - (1 * -11)
        );

        // 括弧の計算
        _Recalculation(
            "1 * (+2 + (-3)) - (-(+4)) - (-(+(+(-(-5)))))",
             1 * (+2 + (-3)) - (-(+4)) - (-(+(+(-(-5)))))
        );

        // 括弧の計算
        _Recalculation(
            "((-20.25) + 4) / ((4 / 2) + 3 * (1 * 2))",
             ((-20.25) + 4) / ((4 / 2) + 3 * (1 * 2))
        );

        // 関数の計算
        _Recalculation(
            "Sin(45)",
             Math.Sin(Deg2rad(45))
        );

        // 関数の計算
        _Recalculation(
            "Cos(45)",
             Math.Cos(Deg2rad(45))
        );

        // 関数の計算
        _Recalculation(
            "Tan(45)",
             Math.Tan(Deg2rad(45))
        );

        // 関数の計算
        _Recalculation(
            "Cos((12)) + Tan((179) + Sin(75))",
             Math.Cos(Deg2rad((12))) + Math.Tan(Deg2rad((179) + Math.Sin(Deg2rad(75))))
        );

        // 余分な括弧の計算
        _Recalculation(
            "((((-(2 + 3) + 9))))",
             ((((-(2 + 3) + 9))))
        );

        // 関数と過剰な括弧の計算
        _Recalculation(
            "((Cos(Sin(( Cos(((((45+45)))) + 90) * - 90 )) * 180)) + 20 + Tan((180)))",
             ((Math.Cos(Deg2rad(Math.Sin((Deg2rad(Math.Cos(Deg2rad(((((45 + 45)))) + 90)) * -90))) * 180))) + 20 + Math.Tan(Deg2rad((180))))
        );

        // 関数と過剰な括弧の計算
        _Recalculation(
            "Cos((((((((-(2+3)+9))))))))",
             Math.Cos(Deg2rad((((((((-(2 + 3) + 9)))))))))
        );

        // Log計算
        _Recalculation(
            "Sin(Log10(10))",
             Math.Sin(Deg2rad(Math.Log10(10)))
        );

        // Log計算
        _Recalculation(
            "Sin(Log(10))",
             Math.Sin(Deg2rad(Math.Log(10)))
        );

        // Log計算
        _Recalculation(
            "Sin(Log(10+2*3, 4*2.4-5))",
             Math.Sin(Deg2rad(Math.Log(10 + 2 * 3, 4 * 2.4 - 5)))
        );

        // Log計算
        _Recalculation(
            "Log10(0.1)",
             Math.Log10(0.1)
        );

        // Log計算
        _Recalculation(
            "Ln(42.22*2)",
             Math.Log(42.22 * 2, Math.E)
        );
    }

    private void OnGUI()
    {
        _scrollPosition = GUILayout.BeginScrollView(_scrollPosition);
        GUILayout.Label(_dbgStr);
        GUILayout.EndScrollView();
    }

    private static double Deg2rad(double num)
    {
        return num / 180.0 * Math.PI;
    }

    // 文字列の式と実際に計算した際の数値結果を入力し、検算を行う
    private void _Recalculation(string str, double nResult)
    {
        string sResult = StringCalculation.Calculation(str);

        // 計算結果が文字列として一致、もしくは誤差の範囲内かどうか
        string isSuccess = (sResult == nResult.ToString() || Math.Abs(sResult.ToDouble() - nResult) &lt;= 0.000000000001) ? "○" : "×";
        string resultStr = "検算結果 : " + "" + isSuccess + "\n" + str + "  =&gt;\n STR : [" + sResult + "]\n NUM : [" + nResult + "]\n\n";

        _dbgStr += resultStr;
    }
}

