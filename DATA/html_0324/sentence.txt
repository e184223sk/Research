C#でAtCoderに参加するうえで(自分なりに)最強の環境を構築する方法をまとめたので記事にまとめたいと思います。先日の記事と異なり、今回は競技プログラミングな内容の記事です。より詳細にコードをみたい方は https://github.com/naminodarie/AtCoderProject をご覧ください。ひとまず、これらをインストールしていれば初期構築は完了です。ローカルで実行するコンソールアプリを作ります。ひとまずこのあたりを設定します。AtCoder では System.Runtime.CompilerServices.Unsafe の 4.7.0 がインストールされているので、ローカル環境にも追加しておきます。SourceExpander をインストールして他のライブラリのコードからコードを生成できるようにします。AtCoder Library の C#移植版 
ac-library-csharp を参照に追加します。AtCoderAnalyzer を参照に追加します。これで、ac-library-csharp の Segtree を使う際にCtrl+.→"Add operator type"を選択すれば演算用の型が自動生成されるなど非常に便利に記述できます。アナライザーを作ったのでC#でのセグメント木の定義を爆速でできるようになったhttps://t.co/OpHmn90FJY pic.twitter.com/zhVKOoDVE7元のコード自動生成後ここまでできたら動作確認してみます。Program.csを実行したら同じフォルダにCombined.csxが生成されていれば成功です。の流れでAtCoderに参加できます。ある程度慣れてくると最大公約数などのライブラリを作りたくなってくるかと思います。そのような自作ライブラリにもSourceExpander.Embedder をインストールしてライブラリにソースコードを埋め込んでおきましょう。ac-library-csharp などの外部ライブラリに依存があっても解決できます。C# で AtCoder に参加するならば標準入出力用のライブラリは作っておいたほうが良いです。Console.ReadLine, Console.WriteLine は非常に遅いので標準入出力を差し替えることで TLE を回避できることもあります。AtCoder Library Practice Contest - J問題 ではConsole.ReadLine, Console.WriteLine を使用した ときは 680 ms
標準入力に独自ライブラリを使用した ときは 564 ms
標準出力に独自ライブラリを使用した ときは 277 ms
標準入出力に独自ライブラリを使用した ときは 170 msという差が出ました。Console.OpenStandardInput() で標準入力を Stream として取得できます。Stream の内容をバッファに格納しつつ、真っ当な C# コードではこのような副作用のあるものはプロパティではなくメソッドにすべきですが、書きやすさを優先してプロパティにしました。入力が配列になっていることもあるので、配列を取得する機能も作っておきます。Console.ReadLine() が遅いのは StreamWriter.AutoFlush がtrueになっているためです。Console.OpenStandardOutput() から StreamWriter を手動生成して StreamWriter.AutoFlush にします。プログラムの最後に Flush() が必須なのが注意点です。ついでに、複数要素をまとめて出力するラッパーメソッドも作成しておくと便利です。この標準入出力ライブラリはNuGetで公開しています(もちろんソースコードを埋め込んであるのでSourceExpanderで使用できます)。https://github.com/naminodarie/Competitive.IO
https://www.nuget.org/packages/Competitive.IO/標準入出力クラスの前処理・後処理は問題ごとに変わらないのでテンプレート化しておきましょう。下記のコードをご覧ください。必要な前処理・後処理をコンストラクタと Run() に入れているので、問題を解く際には Calc() だけを書き換えることに集中できます。利便性のために return した値を出力するような仕組みにしていますが、配列を出力するなど出力が多数ある場合の動作にも対応しています。提出用とは別のエントリポイントを用意しておくと様々なことができます。上記の提出用コードとは別に下記のようなクラスを用意します。すると標準入力の代わりに引数で渡した文字列が入力として使用されます。提出時には影響しないコードとして様々な活用(Combined.csxの内容をクリップボードに追加する、入力をランダムに生成する)ができるのでローカルでのエントリポイント変更はおすすめです。ということでの2点を意識していい感じの環境を作ることができました。


