
public ConsoleWriter WriteLineJoin&lt;T&gt;(Span&lt;T&gt; col) =&gt; WriteMany(' ', (ReadOnlySpan&lt;T&gt;)col);
public ConsoleWriter WriteLineJoin&lt;T&gt;(ReadOnlySpan&lt;T&gt; col) =&gt; WriteMany(' ', col);
public ConsoleWriter WriteLineJoin&lt;T&gt;(IEnumerable&lt;T&gt; col) =&gt; WriteMany(' ', col);
public ConsoleWriter WriteLineJoin&lt;T&gt;(params T[] col) =&gt; WriteMany(' ', col);
public ConsoleWriter WriteLineJoin(params object[] col) =&gt; WriteMany(' ', col);
public ConsoleWriter WriteLines&lt;T&gt;(Span&lt;T&gt; col) =&gt; WriteMany('\n', (ReadOnlySpan&lt;T&gt;)col);
public ConsoleWriter WriteLines&lt;T&gt;(ReadOnlySpan&lt;T&gt; col) =&gt; WriteMany('\n', col);
public ConsoleWriter WriteLines&lt;T&gt;(IEnumerable&lt;T&gt; col) =&gt; WriteMany('\n', col);
public ConsoleWriter WriteLineGrid&lt;T&gt;(IEnumerable&lt;IEnumerable&lt;T&gt;&gt; cols)
{
    foreach (var col in cols)
        WriteLineJoin(col);
    return this;
}
private ConsoleWriter WriteMany&lt;T&gt;(char sep, ReadOnlySpan&lt;T&gt; col)
{
    var en = col.GetEnumerator();
    if (!en.MoveNext())
        return this;
    sw.Write(en.Current.ToString());
    while (en.MoveNext())
    {
        sw.Write(sep);
        sw.Write(en.Current.ToString());
    }
    sw.WriteLine();
    return this;
}
private ConsoleWriter WriteMany&lt;T&gt;(char sep, IEnumerable&lt;T&gt; col)
{
    var en = col.GetEnumerator();
    if (!en.MoveNext())
        return this;
    sw.Write(en.Current.ToString());
    while (en.MoveNext())
    {
        sw.Write(sep);
        sw.Write(en.Current.ToString());
    }
    sw.WriteLine();
    return this;
}

