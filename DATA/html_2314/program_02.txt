
    class Cert
    {
        // 実際の運用時はハードコーディングせず、セキュアな場所に保存し逐一読み込むこと
        // Generate by https://travistidwell.com/jsencrypt/demo/index.html
        internal static readonly string PUBLIC_KEY = @"(略)";

        // 実際の運用時はハードコーディングせず、セキュアな場所に保存し逐一読み込むこと
        // Generate by https://travistidwell.com/jsencrypt/demo/index.html
        internal static readonly string PRIVATE_KEY =  @"(略)";

        internal Pkcs1Encoding RSA { get; }

        public Cert()
        {
            RSA = new Pkcs1Encoding(new RsaEngine());
        }

        /// &lt;summary&gt;
        /// 対称鍵暗号で暗号文を復号する
        /// &lt;/summary&gt;
        /// &lt;param name="cipher"&gt;平文の文字列&lt;/param&gt;
        /// &lt;param name="privatekey"&gt;秘密鍵&lt;/param&gt;
        /// &lt;returns&gt;復号された文字列&lt;/returns&gt;
        public byte[] Decrypto(byte[] cipher, string privateKey)
        {
            // PEMフォーマットの秘密鍵を読み込んで KeyParam を生成
            var privateKeyReader = new PemReader(new StringReader(privateKey));
            var privateKeyParam = (AsymmetricCipherKeyPair)privateKeyReader.ReadObject();

            var RSA = new Pkcs1Encoding(new RsaEngine());
            // RSA暗号オブジェクトを初期化（第1引数trueは暗号化、falseは復号）
            RSA.Init(false, privateKeyParam.Private);

            // 復号対象のバイト列・長さを渡し、復号した結果のバイト列を受け取る
            var decrypto = RSA.ProcessBlock(cipher, 0, cipher.Length);
            return decrypto;
        }
    }

