Standing ModeやSeated ModeにはSteamVRが用意している機能で
リセンター(再トラッキングしてポジションを中央に戻す)が可能ですが、Room-Scaleでのプレイには対応していません。なので、VIVEを担いで営業デモに行った際にはスタート位置をバミるという手法を使っていました。バミらないと、いきなりポリゴンにめり込んだ状態から始まったり、
明後日の方向を向いてしまって、後ろからしゃべりかけられてストーリーが展開する...なんてことが起きます。しかし、バミリは複数のコンテンツを体験していただく際には厄介です。(あれがこっち、これはあっちと余計なことに気を使います)
さらに、コンテンツの内容、作り方によってはスタート位置がまちまちになってしまうので、
部屋の大きさによっては、
・コンテンツAでは前方のスペースに十分なエリアが必要
・コンテンツBでは後方のスペースに十分なエリアが必要
といった具合に、それぞれのコンテンツで必要なエリアの幅が異なることで正しく体験できないという現象が起きかねません。また、私は製作者側なのでデモ時に上記のような状況でも何をどう対処すればいいか瞬時に判断できますが、
コンテンツを使うユーザーからしたら意味不明で、ストレスでしかありません。なので、コンテンツにリセンター機能を実装して組み込むことで、開始位置の固定を取り払いました。やっていることはシンプルで、
スタートと同時にコルーチン内でCameraRigの角度を回転させてCamera(プレイヤー)の向きを補正し、
その後にCameraRigの位置にCamera(プレイヤー)のトラッキング位置を考慮した補正をかけています。位置の補正に関しては前回の記事の内容をそのまま転用しています。今回苦労したのは角度に関してです。図解します。黒い四角がカメラ(プレーヤー)、青い四角がCameraRigだとします。
それぞれのY軸回りのローテーションはy₁ , y₂です。
カメラ(プレーヤー)をVR起動時に、必ずA地点の方に向けた状態でスタートしたいという想定です。シンプルな計算で、実装できます。
カメラ(プレーヤー)とCameraRigのY軸回りのローテーションの差を計算して、CameraRigのY軸回りのローテーションに足すだけです。今回のプログラムでは加算代入によってy₂+y₂-y₁の部分を実装しています。なぜ、コルーチンにしているのかにも、きちんとした理由があり、今回苦労した原因です。その原因とはトラッキングが完了してから補正する必要があるということです。
自分の今いる座標、回転座標が定まっていない(トラッキングが完了していない)状態で補正をかけても
意味がありませんよね。なので、
①Updateでトラッキングの処理が終わる
②Updateより後に実行されるコルーチン内で位置、角度の補正
という流れになっているということです。※コルーチンのUnityの実行順についてはこちらで図解してあります。この実装にはいくつか不具合の元がありまして、既存のコンテンツに後入れで導入した場合、バグを生む可能性があります。例えば、カメラの座標がワールド座標の○○を超えたらイベント発生、などの実装があった場合、
最初の１フレームでそのイベントが発生してしまう恐れがあります。なぜそんなことが起きる可能性があるかというと、最初の1フレームをトラッキングに使用するので、
実際に目に見えて始まる位置(補正後の位置)とは異なる座標を１フレーム分通過してしまうからです。なので、最初の1フレームの間、そのイベントのトリガーはオフにしておいて、
位置補正終了と同時にオンにするなどの工夫が必要です。
今回のコードにもイベントを登録できる形で組み込んでいます。また、トラッキングがMissingになった状態でUpdateの最初の１フレームを通過してしまうと
補正が正しくかからない等の問題点も残しており、まだまだ改善の余地はありそうです。あと今回の内容はOculusコンテンツに導入しても正しく動きます。
むしろ、最初はOculus向けに作ってた機能で、VIVEにつっこんだらなんか動いたからヨシ！って感じです。2019/10/25 追記キーバインドでの実装は下記のような形です。
Awakeで最初のCameraRigのポジションを記録しています。
ただし、ある程度デモが進んだ途中で任意のキーを押されると想定外の動きが発生する場合もあるので
どこかしらのイベントでこの機能をオフにすること(リセットするまで使えない)などの実装をお勧めします。2021/03/18 追記
最終的に下記リンクのようにまとめました。
【Unity(C#)】VRカメラを任意のポジションに移動する方法


