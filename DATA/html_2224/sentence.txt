More than 1 year has passed since last update.　　最近Windows GUIアプリケーションの開発に関わるようになりました。自動テストに関して、一応ないわけではないですが、メンテ追い付かず動いたり、動かなかったりする、まぁよくある話ですね。私自身もそこまでテスト熱心なわけではないですが、何せデグレに恐れて夜眠れなくなる弱い人間なわけで、そんな心の声に従い長く付き合える自動テストを求める旅にでました。　　UIの自動テスト、マウス操作をレコードし、繰り返す実行するいわゆるキャプチャリプレイーはまず思いつくでしょう。RPAという呼び方も最近のはやりらしいが、これはダメですね(RPAがだめなわけではない)、断言しましょう。アプリの反応が早かったり、遅かったりするので、確実に捕まえる保証はないからです。まぁ、実際一回見ればすぐわかる話です。というわけで最初段階で候補から外しました。
　　ご存じのとおり、Windows GUIアプリ（Win32,WinForm,WPF）にはUI AutomationというUIの各種操作をシミュレートする機能を持つFWがあり、UIツリー構造を表示するVSの機能にも使用されているもので、一応自動テストに応用した記事をご紹介しますが、正直使いこなせる自信がないですね。
https://www.atmarkit.co.jp/fdotnet/special/uiautomation/uiautomation_01.html
　　そんなわけでいろいろ調べて、これ以上手がかりなければもうそろそろ諦めるという自分の勘所に来てこころが曇ってきたある日、Friendlyというものが目に入りました、最初に飛び込んだのはかずきさんの記事でした、まだFriendlyそのものの存在はしならい。
https://blog.okazuki.jp/archive/category/Friendly　　かずきさんは足し算アプリの自動テストを紹介しました。UIを捕まえるにはByBindingという見慣れないもので、全部のUIが都合よくBinding使っているわけではないし、文字列なのでインテリセンス効かないし、変わってもビルド時気づかないし、どういうものかいまいちよさ理解できない自分がいました（ByTypeがあるのは知らないだけでした）。とはいえいままでにない期待感がわいてきましたので、早速入れてみることに　同時にFriendlyというキーワードを意識し、ネット記事の探しまくりです。そこでQiitaの2014年のAdvent Canlenderにたどり着き、作者は日本の方で、制作するまでのいきさつも語られてて、Frienldyを詳しくしりたいならこの方ブログがおすすめです。
https://qiita.com/advent-calendar/2014/friendly
http://ishikawa-tatsuya.hatenablog.com/
　
　前置き長くなりました、本題に入ります。
　まずここのソースを実際動かして感覚つかめることにしました。主要API使い方のを中心に、かなり洗練されている感じです、最初の人はまず見ておいたほうがいいと思います。
https://github.com/Ishikawa-Tatsuya/WPFFriendlySampleDotNetConf2016　いくつかポイントをご紹介します。詳しい説明ではなく、メモ程度のものなので、ご容赦ください。　　いかがでしょうか、初歩的なこと一通り書きましたが、まぁ、実際のUIの操作は複雑でこんな一筋にはいきません。たとえばモーダルダイアログはどうでしょう。スレッドが止まるから相手プロセスに行ったきりですよね。そこでWindowControlとAsyncという仕組みが用意されていました。http://ishikawa-tatsuya.hatenablog.com/entry/2015/01/05/230614
詳しくはここに書かれていますので、要点だけ　　これで一般的なモーダルダイアログパターンを突破できたわけですが、実はダイアログが表示されるか不確定な場合は結構厄介で悩みところです。表示されない場合のWaitForNextModal()は現在のTopのダイアログが返されて。dynamic型なので確実に型を判定できないのでそのあとの処理できず結構焦りました。　そんなところですが、UIテスト自動化の戦いがまだまだ続きそうです。これからもFriendlyと末永く付き合いたいので、また新たなネタがありましたら書いていきたいと思います。


