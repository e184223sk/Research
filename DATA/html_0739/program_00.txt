/// &lt;summary&gt;
/// 有限ステートマシン(FSM), where T : class
/// &lt;/summary&gt;
public class StateMachine&lt;T&gt; 
    where T : class
{
    private T m_Owner;
    private State&lt;T&gt; m_CurrentState;
    public State&lt;T&gt; currentState { get {return m_CurrentState;} set{ m_CurrentState = value;} }
    private State&lt;T&gt; m_PreviousState;
    public State&lt;T&gt; previousState { get {return m_PreviousState;} set{ m_PreviousState = value;} }
    private State&lt;T&gt; m_GlobalState;
    public State&lt;T&gt; globalState { get {return m_GlobalState;} set{ m_GlobalState = value;} }
    /// &lt;summary&gt;
    /// コンストラクタ
    /// &lt;/summary&gt;
    public StateMachine(T owner){
        m_Owner = owner;
        m_CurrentState = new NullState&lt;T&gt;();
        m_PreviousState = new NullState&lt;T&gt;();
        m_GlobalState = new NullState&lt;T&gt;();
    }
    /// &lt;summary&gt;
    /// 現在の状態を実行する
    /// &lt;/summary&gt;
    public void Update(){
        m_GlobalState.Execute(m_Owner);
        m_CurrentState.Execute(m_Owner);
    }
    /// &lt;summary&gt;
    /// 現在のStateを変更する
    /// &lt;/summary&gt;
    public void ChangeState(State&lt;T&gt; newState){
        // Assert(newState != null);
        m_PreviousState = m_CurrentState;
        m_CurrentState.Exit(m_Owner);
        m_CurrentState = newState;
        m_CurrentState.Enter(m_Owner);
    }

    /// &lt;summary&gt;
    /// 前のStateに変更する
    /// &lt;/summary&gt;
    public void RevertToPreviousState(){
        ChangeState(m_PreviousState);
    }
}


