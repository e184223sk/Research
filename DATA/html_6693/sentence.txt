More than 3 years have passed since last update.ReactiveExtensionsにおいて､Iobservable.SubscribeはIDisposableを戻り値となるから､こいつを使っていにしえから有るEventよっか相当ましなリソース制御が出来るようにゃなった｡
けど､状況によっちゃDispose出来るタイミングが無かったりすることがあるので､Subscribeの結果が強参照を持たない様に何とかしてみたので､おつきあい頂ければ幸い｡今回､以下のような目標が有ると言うことで一つ｡何をしたかってーと､WeakSubscribeメソッドと言う拡張メソッドを作成した｡まぁ､その中で一服盛ってる｡
内部に､WeakObserverを抱えており､こいつが結構キモとなる｡以下実装こいつが何をしてるかというと､ラップしてる元のIObserverを弱参照化させて､Subscribeされた結果が強参照化しないようにしてる｡
また､IDisposableを保持しており､参照先が消えて無くなったら､Subscriptionを開放するようになってる｡また､保持してたIDisposableオブジェクトも､一度Disposeメソッドを読んだ後さっさと開放するようにしてある｡で､こいつを元に､以下のような拡張メソッドをこさえた｡こっちは比較的単純｡IObservableのSubscriptionの引数に､先のWeakObserverを渡して､貰ってきたIDisposableを設定したら元のIDisposableを返しているだけ｡こんなの作っておけば､概ね便利に使える反面､以下の問題は積み残している｡1.に関しちゃ､重くなるけど､内部でタイマなり走らせて､生存確認することで対応出来るとは思う｡
3.にかんしては､Disposeメソッドを複数回呼ぶとマズい設計はあんまり良くないと思う(と逃げておくw)
2.が結構問題で､この辺割り切らないと駄目かなぁと思いました｡最後に､ロックフリーで､CompareExchange使っていた部分で､Exchange使っても同じ事が出来ると教えてくださった､@Temarinさん有り難うございました!


