More than 3 years have passed since last update.Unity上でTensorFlowのCNNを動かす。
この記事でTensorFLowSharpは導入済みであると仮定している.
ここを記事を見て、手持ちの環境に合わせてTensorFlowSharpをビルドしておく。文法的にC#6でないと動かないと所があるので、ここからから最新版(Unity 2017.1以上)を落としておく。
https://store.unity.com/download?ref=personalプロジェクトを作成後は、Assetsの下にDllsというフォルダを作り、TensorFlowSharp\TensorFlowSharp\bin\Debug の下のTensorFlowSharp.dllとSystem.ValueTuple.dllをコピーしておく。Scripting Runtime VersionをExperiental(.NET4.6 Equvalent)に変更する
変更後、unityの再起動する。Scriptsを作って、paint.csを作成する。

入力パッドとなるplaneを追加する。

planeの位置を以下のように変更する。
Main cameraを操作する。
x:1, y:5, z:-9 がちょうどいい
↓テクスチャ画像Assetsの直下にtexture.jpgを配置する。
texture.jpgをplaneにドラッグアンドドロップして、アタッチする。
Albedoをクリックすると、texture.jpgがアタッチされていることが確認できる
Shader をStandard から　Unit-&gt;Textureに変更する
次にtexture.jpgを選択して、Read/Write Enabledにチェックを入れる。
planeにpaint.csをアタッチする
すると、planeに書き込めるようになる
次はボタンを追加する。
ボタンのtextをRrecognitionにする
ボタンのonclickの設定を行う。
Inspectorの on Click()の[+]を押して、リスナーのメソッドを追加する。paint.SaveTexture()を追加する。
paint.csはplaneにアタッチしてあるので、planeを選択する。
メソッドは paint -&gt; SaveTexture() を選択する。
そして、planeに何かを書き込み後、ボタンを押すとAssetsの直下に画像が保存される。paint.csにコードを加筆する。このような構成にして、スクリプトや学習モデルを配置する。学習モデルは、前回作成したものを使用する。Assets
　├── Scripts
　│　　   ├── DataConverter.cs
　│ 　　  ├── Datasets
　│  　　 │  　　 ├── Helper.cs
　│   　　│  　　 └── MNIST.cs
　│   　　├── SampleTest.cs
　│  　　 └── paint.cs
　└── models
  　　　　  ├── Auto_model.pb
  　　　　  └── labels.txtAssetsの直下にmodelsを作成して、中に前回の記事で作成したAuto_model.pbとlabels.txtを入れる。TensorFlowSharpのLearnの中のDataConverter.csとDatasets/Helper.cs, Datasets/MNIST.csをScriptsの下に配置する。△の90°傾けたボタンを押し、入力パッドに数字を入力後、Rrecognitionボタンを押すと、結果が表示される。実行画面

プロジェクトを上げておく。
https://github.com/MaruTama/tensorflow_for_unity参考
Unityでテクスチャにお絵描きしよう


