
public class AD
{
    :
    /// &lt;summary&gt;
    /// +単項演算子のオーバーロード
    /// &lt;/summary&gt;
    public static AD operator +(AD x)
    {
        var z = new AD(x.Output, 1);
        z.AddInput(0, x, 1);
        return z;
    }
    /// &lt;summary&gt;
    /// -単項演算子のオーバーロード
    /// &lt;/summary&gt;
    public static AD operator -(AD x)
    {
        var z = new AD(-x.Output, 1);
        z.AddInput(0, x, -1);
        return z;
    }
    /// &lt;summary&gt;
    /// -演算子のオーバーロード
    /// &lt;/summary&gt;
    public static AD operator -(AD x, AD y)
    {
        var z = new AD(x.Output - y.Output, 2);
        z.AddInput(0, x, 1);
        z.AddInput(1, y, -1);
        return z;
    }
    /// &lt;summary&gt;
    /// /演算子のオーバーロード
    /// &lt;/summary&gt;
    public static AD operator /(AD x, AD y)
    {
        var z = new AD(x.Output / y.Output, 2);
        z.AddInput(0, x, 1 / y.Output);
        z.AddInput(1, y, -x.Output / (y.Output * y.Output));
        return z;
    }

    /// &lt;summary&gt;
    /// Sqrt関数
    /// &lt;/summary&gt;
    public static AD Sqrt(AD x)
    {
        var z = new AD(Math.Sqrt(x.Output), 1);
        z.AddInput(0, x, 0.5 / z.Output);
        return z;
    }
    /// &lt;summary&gt;
    /// Log関数
    /// &lt;/summary&gt;
    public static AD Log(AD x)
    {
        const double delta = 1e-13;
        var z = new AD(Math.Log(x.Output + delta), 1);
        z.AddInput(0, x, 1 / (x.Output + delta));
        return z;
    }
    /// &lt;summary&gt;
    /// Log関数
    /// &lt;/summary&gt;
    public static AD Log(AD x, double a)
    {
        const double delta = 1e-13;
        var z = new AD(Math.Log(x.Output + delta, a), 1);
        z.AddInput(0, x, 1 / ((x.Output + delta) * Math.Log(a)));
        return z;
    }
    /// &lt;summary&gt;
    /// Sin関数
    /// &lt;/summary&gt;
    public static AD Sin(AD x)
    {
        var z = new AD(Math.Sin(x.Output), 1);
        z.AddInput(0, x, Math.Cos(x.Output));
        return z;
    }
    /// &lt;summary&gt;
    /// Cos関数
    /// &lt;/summary&gt;
    public static AD Cos(AD x)
    {
        var z = new AD(Math.Cos(x.Output), 1);
        z.AddInput(0, x, -Math.Sin(x.Output));
        return z;
    }
    /// &lt;summary&gt;
    /// Tan関数
    /// &lt;/summary&gt;
    public static AD Tan(AD x)
    {
        var z = new AD(Math.Tan(x.Output), 1);
        double cos = Math.Cos(x.Output);
        z.AddInput(0, x, 1 / (cos * cos));
        return z;
    }
    /// &lt;summary&gt;
    /// Tanh関数
    /// &lt;/summary&gt;
    public static AD Tanh(AD x)
    {
        var z = new AD(Math.Tanh(x.Output), 1);
        z.AddInput(0, x, 1 - z.Output * z.Output);
        return z;
    }
    /// &lt;summary&gt;
    /// 絶対値関数
    /// &lt;/summary&gt;
    public static AD Abs(AD x)
    {
        var z = new AD(Math.Abs(x.Output), 1);
        z.AddInput(0, x, x.Output &lt; 0 ? -1 : 1);
        return z;
    }
    /// &lt;summary&gt;
    /// Max関数
    /// &lt;/summary&gt;
    public static AD Max(AD x, AD y)
    {
        return x.Output &gt; y.Output ? +x : +y;
    }
    /// &lt;summary&gt;
    /// Min関数
    /// &lt;/summary&gt;
    public static AD Min(AD x, AD y)
    {
        return x.Output &lt; y.Output ? +x : +y;
    }
    /// &lt;summary&gt;
    /// Sigmoid関数
    /// &lt;/summary&gt;
    public static AD Sigmoid(AD x)
    {
        var z = new AD(1 / (1 + Math.Exp(-x.Output)), 1);
        z.AddInput(0, x, (1 - z.Output) * z.Output);
        return z;
    }
    /// &lt;summary&gt;
    /// Rectified Linear Unit
    /// &lt;/summary&gt;
    /// &lt;param name="x"&gt;&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static AD ReLU(AD x)
    {
        var z = new AD(Math.Max(0, x.Output), 1);
        z.AddInput(0, x, x.Output &gt; 0 ? 1 : 0);
        return z;
    }
    /// &lt;summary&gt;
    /// 累乗関数 x^y
    /// &lt;/summary&gt;
    public static AD Pow(AD x, AD y)
    {
        var z = new AD(Math.Pow(x.Output, y.Output), 2);
        z.AddInput(0, x, y.Output * Math.Pow(x.Output, y.Output - 1));
        z.AddInput(1, y, z.Output * Math.Log(x.Output));
        return z;
    }
    /// &lt;summary&gt;
    /// 平均関数
    /// &lt;/summary&gt;
    public static AD Average(AD[] X)
    {
        var z = new AD(0, X.Length);
        for (int i = 0; i &lt; X.Length; i++)
        {
            z.Output += X[i].Output;
            z.AddInput(i, X[i], 1.0 / X.Length);
        }
        z.Output /= X.Length;
        return z;
    }
    /// &lt;summary&gt;
    /// 合計関数
    /// &lt;/summary&gt;
    public static AD Sum(AD[] X)
    {
        var z = new AD(0, X.Length);
        for (int i = 0; i &lt; X.Length; i++)
        {
            z.Output += X[i].Output;
            z.AddInput(i, X[i], 1);
        }
        return z;
    }
    /// &lt;summary&gt;
    /// 内積関数
    /// &lt;/summary&gt;
    public static AD InnerProd(AD[] X, AD[] Y)
    {
        var N = Math.Min(X.Length, Y.Length);
        var z = new AD(0, 2 * N);
        for (int i = 0; i &lt; N; i++)
        {
            z.Output += X[i].Output * Y[i].Output;
            z.AddInput(i, X[i], Y[i].Output);
            z.AddInput(i + N, Y[i], X[i].Output);
        }
        return z;
    }
}

