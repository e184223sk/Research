namespace AutoDiff
{
    /// &lt;summary&gt;
    /// 自動微分を実現するクラス
    /// 一つのインスタンスが一つの演算や変数を示す
    /// &lt;/summary&gt;
    public class AD
    {
        /// &lt;summary&gt;
        /// 演算の出力値
        /// &lt;/summary&gt;
        private double Output;
        /// &lt;summary&gt;
        /// 演算の入力
        /// &lt;/summary&gt;
        private AD[] Inputs;
        /// &lt;summary&gt;
        /// 入力変数による偏導関数値
        /// &lt;/summary&gt;
        private double[] Differentials;

        /// &lt;summary&gt;
        /// 変数を表すコンストラクタ
        /// &lt;/summary&gt;
        /// &lt;param name="v"&gt;変数値&lt;/param&gt;
        public AD(double v)
        {
            Output = v;
            Inputs = null;
            Differentials = null;
        }
        /// &lt;summary&gt;
        /// 演算を表すコンストラクタ
        /// &lt;/summary&gt;
        /// &lt;param name="v"&gt;演算の結果値&lt;/param&gt;
        /// &lt;param name="InputNum"&gt;入力の数&lt;/param&gt;
        private AD(double v, int InputNum)
        {
            Output = v;
            Inputs = new AD[InputNum];
            Differentials = new double[InputNum];
        }
        /// &lt;summary&gt;
        /// 暗黙の型変換
        /// &lt;/summary&gt;
        public static implicit operator AD(double v)
        {
            return new AD(v);
        }
    }
}

