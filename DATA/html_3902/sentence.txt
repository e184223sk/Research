More than 1 year has passed since last update.Windows10(1803以降)限定ですが、以下の記事に詳しいようにEdgeのエンジンを使ったWebViewが公開されています。
@IT WPFやWindowsフォームでEdgeのWebViewを使うには？［Windows 10 1803以降］改めて最新のWebViewで試したところ上の記事と比較してnugetパッケージ名が変わっていたのと、Localの静的htmlを表示しようとして結構苦労したので、動作するサンプルとともに記事としてまとめておきます。mermaid.jsはフローチャートなどのダイアグラム表示のための優れたライブラリです。わりと単純な文字列からダイアグラムが作れるため、テキストエディタでササッと書くとシーケンス図などが作れて大変便利です。mermaid.jsについては以下の記事が詳しいです。mermaid.jsが素晴らしいけどなかなか使ってる人見かけないので実例晒す(追記あり)便利なので、アプリケーション内でもオブジェクトの関係をフローチャートで表示したいときにmermaid.jsを使いたくなることがありますが、WPFからはWebViewなどを経由して使う必要があります。今回のEdgeエンジン版WebView以前は(Microsoft公式のものでは)IEのエンジンのものしかなかったのでmermaid.jsは動かなかったのです。サンプルが目指したものはmermaid.jsライブエディターのようなものです。簡単にサンプルのポイントを説明します。Microsoft.Toolkit.Wpf.UI.Controls.WebViewをインストールします。
Microsoft.Toolkit.Win32.UI.Controlsには今はDLLが含まれておらず、サブセットそれぞれがパッケージ化されているようです。
https://github.com/Microsoft/WindowsCommunityToolkit/releases/tag/v5.0.0WinFormsでEdgeベースのWebViewコントロールを使用する場合はMicrosoft.Toolkit.Forms.UI.Controls.WebViewをインストールします。確認はしていませんが、こちらも同じようなものだと思います。IUriToStreamResolverを実装するクラスを引数にとるNavigateToLocalStreamUriを使う必要があります。遷移先として指示するhtmlファイルや、html内部で相対的に指示しているjsやcssファイルが要求されるたびに、IUriToStreamResolverのUriToStreamが呼び出されます。UriToStreamでは、相対Uriをローカルファイルのパスに変換してあげます。new Uri(baseDir, uri.LocalPath.TrimStart('/'))のあたりはちょっとイマイチかもしれません。もうちょっとうまい方法があればよいのですが・・・。本題からそれますが、テキストの変更を監視して、一秒間の間の変更イベントを最後のイベントだけにして更新をかけます。ReactiveProperty+Rxを使うとこのあたり簡単にできて良いですね。WebViewそのものには拡大率を制御するメソッドやプロパティが見つからなかったのでJavascriptでやるしかないようです。こちらもThrottleを使い以下のようにしました。もともとはdocument.getElementById("main").style.zoom = x;としていたのですが、document.bodyでbodyが取れるとコメント頂いたので修正しました


