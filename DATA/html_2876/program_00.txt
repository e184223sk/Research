/// &lt;summary&gt;
/// リトライ共通処理
/// &lt;/summary&gt;
/// &lt;param name="caller"&gt;処理を実行するインスタンス&lt;/param&gt;
/// &lt;param name="funcName"&gt;リトライ対象関数名&lt;/param&gt;
/// &lt;param name="parameters"&gt;引数群&lt;/param&gt;
/// &lt;param name="successResult"&gt;対象関数の成功時の戻り値&lt;/param&gt;
/// &lt;returns&gt;&lt;/returns&gt;
private T invokeRetry&lt;T&gt;(object caller, string funcName, object[] parameters, T successResult)
{
    // リトライ最大回数(引数で指定してもいいかも)
    int retryMax = 3;
    // 戻り値を初期化しておく
    T result = default( T );
    var method = typeof( BaseClass ).GetMethod( funcName );
    for(int retryCount = 0; retryCount &lt;= retryMax ; retryCount++)
    {
        result = (T)method.Invoke( caller, parameters );
        // 処理に成功していれば抜ける
        if(successResult.Equals( result ))
        {
            break;
        }
        // リトライ間隔を適当にあけておく
        Thread.Sleep( 500 );
    }
    return result;
} 

