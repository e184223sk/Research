どうも、ろっさむです。今回は様々なusingの使い方を紹介する記事となります。
環境は以下の通りです。ざっと以下の4つの使い方があります。一つずつ見ていきましょう。これは馴染みのある人が多いと思います。異なる名前空間に定義されているクラスを使用する場合には System.Collections.Generic.List&lt;int&gt; numbers;のように「名前空間.クラス名」と記述する必要があります。ここでusingディレクティブをファイルの頭で使用することで、以下のように名前空間の指定を省略して記述できるようになります。こちらはtypedefのように使えるusing エイリアス(別名) ディレクティブという機能です。
名前の通り、名前空間に別名を付けることができます。C#6.0から使える機能です。
usingディレクティブの機能と同じことが静的メソッドにも適用できるようになります。また、列挙型のメンバーも静的なため、この機能が適用できます。普段インスタンス化されたオブジェクトはGCによって管理され、自動で破棄が行われます。ですがファイルなどのアンマネージド リソースを使用する場合はGCの管理対象外となり、以下の流れが必要となります。この、「リソースの使用権を破棄する」を怠ると、ファイルにロックがかかった状態のまま開きっぱなしになって他の処理からアクセスできなくなったり面倒なことが起こります。なのでtry-catch-finallyを使用した上で、処理を行います。finallyは例外が発生しても必ず実行されるブロックなので、ここでリソースの使用権を破棄するためのClose()を呼び出します。しかし、アンマネージド リソースを使用する場合に、毎回これを書くのは面倒くさいかと思います。ここでusingステートメントという機能を用いることで簡潔に書くことができるようになります。usingステートメントを用いることで、コンパイラ側で自動的にリソースの破棄用のILを生成します。ただしこの記述は IDisposable を実装するクラスのみに使用できます。更にC#8.0からは以下のように、変数宣言時にusingをつけることで更なる簡略化ができるようになりました。


