// 参照型 B を参照型 A に代入できるなら、配列 B[] も A[] に代入できる。
string[] strings = new string[] { "a", "b" };
object[] objects = strings;

// 代入後の配列インスタンスは同一参照
Assert.IsTrue(Object.ReferenceEquals(objects, strings));

// ただし、要素に別の派生型の値を設定しようとすると実行時例外が発生する。
// 配列には値を返すだけでなく受け取る役目もあるのに、
// 丸ごと（本来適用すべきでない受け取り操作を含めて）共変を許してしまったことの弊害である。
try
{
    objects[1] = 1;
    Assert.Fail();
}
catch (ArrayTypeMismatchException ex)
{
    // 「配列と互換性のない型の要素にアクセスしようとしました」
    Console.WriteLine(ex.ToString());
}

// 配列の共変性は、不変である値型には適用されない。
/* コンパイルエラー「型 'int[]' を型 'object[]' に暗黙的に変換できません。」
objects = new int[] { 0, 1 };
*/

