  public static class StringEx
  {
    /// &lt;summary&gt;
    /// Python の スライスと同じ結果を取得します。
    /// &lt;/summary&gt;
    /// &lt;param name="target"&gt;このインスタンス。&lt;/param&gt;
    /// &lt;param name="startIndex"&gt;開始文字位置。&lt;/param&gt;
    /// &lt;returns&gt;
    /// このインスタンスの startIndex で始まる部分文字列と等価もしくは取得可能な文字列。
    /// &lt;/returns&gt;
    public static string Slice(this string target, int startIndex)
    {
      if (target == null) return "";
      if (target.Length &lt; startIndex) return "";
      return Slice(target, startIndex, target.Length);
    }

    /// &lt;summary&gt;
    /// Python の スライスと同じ結果を取得します。
    /// &lt;/summary&gt;
    /// &lt;param name="target"&gt;このインスタンス。&lt;/param&gt;
    /// &lt;param name="startIndex"&gt;開始文字位置。&lt;/param&gt;
    /// &lt;param name="endIndex"&gt;終了文字位置。&lt;/param&gt;
    /// &lt;returns&gt;
    /// このインスタンスの startIndex から endIndex までの部分文字列と等価もしくは取得可能な文字列。
    /// &lt;/returns&gt;
    public static string Slice(this string target, int startIndex, int endIndex)
    {
      if (target == null) return "";
      int targetLen = target.Length;
      if (targetLen &lt; startIndex) return "";
      if (startIndex &lt; 0)
      {
        startIndex = targetLen + startIndex;
        if (startIndex &lt; 0) startIndex = 0;
      }
      if (endIndex &lt; 0)
      {
        endIndex = targetLen + endIndex;
        if (endIndex &lt; 0) endIndex = 0;
      }
      if (startIndex &gt;= endIndex)
      {
        return "";
      }
      int len = endIndex &gt; targetLen ? targetLen - startIndex : endIndex - startIndex;
      return target.Substring(startIndex, len);
    }
  }


