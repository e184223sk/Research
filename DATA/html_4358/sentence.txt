More than 1 year has passed since last update.C#でWeb APIを作ろうとすると、core無しのASP.NETとcore付きのASP.NETがあるみたいですが、core付きのほうが新しそう、という理由だけで、ASP.NET coreでWeb APIの作り方を書いていこうかと思います。ちなみにバージョンは、ASP.NET core 2.1になります。今回は、とにかくWeb APIを作って動かすやり方の話になります。そのため、プログラムの解説は全くしません。Web APIの話は１回で収まらないため、プログラムの解説は次回以降で書こうと思います。例として作るAPIは、定番のCRUD４パターンを実装をしていきます。(1) メニューの「ファイル」＞「新規作成」＞「プロジェクト...」を選択します。
(2) 「Web」から「ASP.NET Core Web アプリケーション」を選択します。プロジェクト名は何でもいいですが、今回の例ではTodoにしておきます。
(3) 続いて、プロジェクトのテンプレート選択画面から、上部にある「.NET Core」のバージョン「ASP.NET Core 2.1」を選択し、テンプレートは「空」を選択します。「Dockerサポートを有効にする」「HTTPS用の構成」はチェックを外して「OK」を押します。
ローカルでVisual Studioからデバック実行すると、デフォルトでランダムに設定されたポートで起動します。このままでもいいのですが、個人的に50000番台のポートを使っているのが気に喰わないので変えておきます。(1) プロジェクト名（Todo）を右クリック＞「プロパティ」でプロジェクトの設定画面を開き、「デバッグ」タブを選択すると、「アプリURL」があるので、ポート番号を変更します。番号は何番でもいいのですが、 http://localhost:9999 に変えておきます。
プロジェクトの作成と設定は完了したので、プログラムを作っていきます。モデルには、Todoアイテムを表すTodoItemクラスを作ります。Modelsフォルダがないので、右クリック＞「追加」＞「新しいフォルダー」を選択し、Modelsと入力してフォルダを作っておきます。
Modelsフォルダを作ったら、そこを右クリック＞「追加」＞「クラス...」でTodoItemクラスを作ります。
TodoItemクラスの実装は、次のようにします。ただの構造体クラス（C#ではPOCOと呼ぶらしい）です。続いてルーティングの定義と、APIの処理をするクラスを作ります。プロジェクトを「空」で作ると Controllers フォルダもないので、Modelsのときと同様に、右クリック＞「追加」＞「新しいフォルダ」でフォルダを作っておきます。フォルダを作ったら、Controllersフォルダを、右クリック＞「追加」＞「コントローラー...」を選択します。
コントローラーの種類を選択する画面では、「APIコントローラー - 空」を選択し、クラス名は TodoController にします。

TodoController クラスは次のように実装します。データは、本来はデータベースや他のWeb APIなどから取得しますが、今回はデーターベースを使わないので、コントローラークラスにハードコーディングしてしまいます。また、GETを受け取る２つのメソッド(/api/todoと/api/todo/{id})も実装します。空のプロジェクトの場合、StartUp.csに必要な起動処理が書かれていないので、これも実装します。ConfigureServices()とConfigure()メソッドの中身を次のように書き換えます。これで、GETメソッドだけですが実装完了です。早速試してみましょう。GETメソッドならブラウザからの確認でもいいのですが、今後POSTやPUTなども試したいので、何か確認用ツールを導入しますRESTful APIをテストするときの定番ツールは curl であり、Windowsにも curl はあるのですが（WinCurl）、コマンドプロンプトからではどうがんばっても日本語をUTF-8で入力できない（表示はできる）ので、GUIのツールに頼るしかなさそうです。おそらくブラウザのプラグイン、Chrome の postman か Advanced Rest Client あたりになるかと思います。この記事では、curl の導入方法と、確認 curl のコマンドで書きますが、postman とか使う人は適当に読み替えてください。いちおう、WinCurlの導入方法を書いておきます。https://curl.haxx.se/download.html へ行き、下のほうにある「Windows 64 bit」から、ダウンロードします。
ダウンロードしたファイルは、ただのexe（インストーラーではない）なので、C:\Program Filesなど、適当なフォルダに解凍したフォルダごと置き、環境変数PATHを通しておきます（マイコンピューターを、右クリック＞「プロパティ」で、「環境設定」＞「詳細設定」タブ＞「環境変数」のPATHに追加する）。Visual Studio上でF5を押して起動し、コマンドプロンプトを起動してcurlを実行します。F5を押すと、ブラウザが自動的に起動しますが、今は無視してください（じゃまなので、後で起動しないように設定を変更する）。オプションに -D - を付けて、レスポンスヘッダーも出すようにしておきます。APIの確認をするとき、レスポンスボディしか見ない人がいますが、ちゃんとレスポンスヘッダーも確認するようにしましょう。確認ポイント：TodoControllerクラスに、POST, PUT, DELETE用のメソッドも追加していきましょう。curl などツールを使う場合、いちいちブラウザが起動してうっとうしいので、起動しないように設定します。プロジェクトを右クリックしてプロジェクトの設定を開き、「デバッグ」タブを選択すると、「ブラウザの起動」にチェックが入っているので、チェックをはずします。
ボディがある場合は、Content-Typeヘッダーを付けないと、エラーになります。
※注　コマンドプロンプトから日本語を入力する場合、エンコードがShift_JISになり、エラーになります。ステータスコードが201で、Location ヘッダーがあることを確認しましょう。※注　コマンドプロンプトから日本語を入力する場合、エンコードがShift_JISになり、エラーになります。今回は、動かすことに集中しプログラムの解説を全くしなかったため、プログラムに関しては意味不明だったと思います（特にルーティングとレスポンスの生成）。プログラムの解説は次回以降で行っていく予定です。Web API は core になって、MVC の枠組みの中の１つとなってしまい、いろいろ作るものが多いという印象です。これが複雑さを上げているように思います。


