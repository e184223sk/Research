More than 3 years have passed since last update.前回の記事の続きです。
http://qiita.com/higty/items/ac19b15e2967901982a8この記事では
・型スイッチ（定数、型、変数とのマッチング）
・Out Variables
・ローカル関数
を解説します。IoTでデバイスのデータを保存しているとします。例えば以下のようなデータです。温度（Temperature)、Frequency（3軸振動数）、Gps（位置情報）を記録しているとします。以下のようにデータをObject[]として取得できるとします。それをフィードとしてHTMLで表示するアプリケーションをイメージしてください。HTMLの構築部分ですが今までのC#だとどうしてもコードが煩雑になりがちです。だいたいこんな感じになります。（本当はテンプレートエンジンとか使うと思いますが例なので文字列で構築）型スイッチを使用するとかっこを無くせばという感じでだいぶすっきりします。型スイッチはswitch文にも導入されます。今までのC#だとcase文の部分が煩雑になりがちです。C#7.0ではとても書きやすくなります。型スイッチにはwhenというキーワードも導入されます。温度が30℃以上の場合は文字の色を赤にしたいという要件があったとします。こういう場合にはwhenを使用すると簡単に書けるようになっています。使いどころはメタ的なプログラムをする部分や横断的なコードを記述する部分などでしょう。
・DBの型情報から自動生成するマスタメンテのコントロールの作成部分とか
・ASP.NETのDIで引数で渡されるControllerクラスを各コントローラーごとで処理を変えたいとか
・モバイルの通知などで新着予定、新着タスク、新着メッセージなどをそれぞれの形式で表示したいとか
型スイッチという名前通りObject型に様々な型が入っていてそれぞれの型ごとに処理をしたいような場合に活用ができると思います。これはちょっとした改良ですがout引数用の変数を宣言する必要がなくなり簡単に書けるようになりました。と書いていたのがというように簡単に書けるようになります。楽ちん。今までのC#でフィボナッチ数列を書くにはと書いていました。ラムダ式を使ってと書きたいところですがコンパイルエラーになります。Fの宣言の中でFを呼び出すことができないためです。ローカル関数を使用するとこういった再起処理などで上記のような書き方ができます。もちろんラムダ式として書くこともできます。匿名メソッドで変数がキャプチャされる場合に比べ、パフォーマンスが良くなる場合があります。C#7.0が使えるようになるのが楽しみです。


