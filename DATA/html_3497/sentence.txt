More than 1 year has passed since last update.ASP.NET CoreでCookie認証を使ってログイン・ログアウト機能を実装してみます。
Microsoft.AspNetCore.Authenticationを使うと簡単に行うと簡単に実装できるようです。[Microsoft.AspNetCore.Authentication - Nuget].NET Core SDKのバージョンは以下の通りです。今回はRazorページのテンプレートを使いたいと思います。Visual Studioでは以下の操作でプロジェクトを開始できます。
新規作成 &gt; プロジェクト &gt;新しいプロジェクト &gt; Web &gt; ASP.NET Core Web アプリケーション &gt; Web アプリケーション
.NET Core CLIで作成する場合は以下のコマンドです。完成後のソースはこちらのリポジトリに置きました。
https://github.com/sano-suguru/netcore-app-with-cookie-auth
ところどころ端折っているので実際のコードは上記のリンクからご確認ください。Startup.csに認証ミドルウェアを追加します。
その際、Cookieに、セッションハイジャック等を防ぐためにhttpOnly属性（JSから触れなくする）、Secure属性（SSL時のみクッキーを送信）を設定します。ConfigureServicesメソッドに以下の通り設定を追加。Configureメソッドに以下の通り設定を追加。以下のキャプチャのログインページを作ります。
/Pages/Account/ディレクトリにLogin.cshtmlとLogin.cshtml.csを作成します。
ログインが必要なページに未ログイン状態でアクセスした場合に自動でリダイレクトされるデフォルトのパスが/Account/Loginであるためです。cshtmlではタグヘルパーasp-forでLoginModelクラスのインナークラスInputModelにフォームの値をバインドしています。以下、Login.cshtml.csのLoginModelクラスからログイン処理を抜粋します。
サンプルのため処理べた書きです。実際にはDBアクセス処理やエラー表示が必要になると思います。以下のキャプチャのログアウトページを作ります。
ログアウトは本当に簡単でHttpContext.SignOutAsyncを呼ぶだけです。ログイン・ログアウトページにナビゲーションバーからアクセスできるようにします。
Cotactページをログイン者専用のコンテンツにしてみます。
[Authorize]属性をコントローラークラスに付けるとログイン済みでないとそのコントローラーにアクセスできなくなります。また、アクションメソッドごとに個別に付けることも可能です。ログインしていない状態でナビゲーションバーのContactをクリック（/Contactにアクセス）するとログインページ/Account/Loginに自動でリダイレクトします。
ログインするとログインページに直接アクセスした場合はトップへ、未ログイン状態でログインが必要なページにアクセスしログインページにリダイレクトされた場合にはそのページへ戻ります。ログイン状態では/Contactページを閲覧できます。


