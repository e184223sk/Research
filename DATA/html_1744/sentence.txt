More than 1 year has passed since last update.WPFの初心者です。WPFのなんたるやも知らないまま、Prism &amp; ReactivePropertyで MVVM に挑んでいるところですが・・・全然わかりません。まずはPrismのHello world的なサンプルを作ることにしました。PrismのRegionで、「Window(枠)は１つで内側の表示を切り替える」だけのサンプルアプリを作る。ところが、Regionの使い方がわからない、ビルドが通らない、Viewを表示してもRegionに何も表示されない・・・なかなかにハマってしまいました。さんざん調べまくり、ようやく、参考になる記事と公式サンプルに・・・たどり着いた、というよりは、記事の使い方が分かった、という感じです。結果としてどうすればよかったのか、ほかの初心者の方の参考になれば幸いです。Prismの公式サンプル
「17-BasicRegionNavigation」とやっていることは同じですが、Moduleを使わずに簡易化したものです。Module化しないように作り変えるなんてMVVMの方向性に逆行しているのでしょうが、RegionManagerでNavigateすることだけを切り取るためにあえてそうしました。VisualStudio 2019
Prism Template Packインストール
Prism.Unity 7.2Prismはライブラリでもあり、プロジェクト構築サポート機能??でもあるようです。
WPF(Prism)アプリ作成に先立ち、Prism Template Packをインストールしておきます。VisualStudio自体をグレードアップするようなイメージです。これにより、VisualStudioから Prismのプロジェクトテンプレートが使えるようになります。
VisualStudio MarketPlaceVS2017だとPrism公式サンプルが開けないようです。VS2019にしておきましょう。 (Prismのインストールがうまくいってなかっただけかも)VisualStudioのプロジェクト新規作成で、Prism Blank App (WPF)を選択。
DIコンテナにUnityを選択します。
一度ビルドすると、プロジェクトにPrism.Unityが組み込まれます(Prism Template Packのおかげらしい)。公式サンプル「17-BasicRegionNavigation」では別プロジェクトにRegion埋め込み用のViewを作っていますが、ここでは簡略して同プロジェクトにします。プロジェクト内のフォルダ Views に対し、[追加]&gt;[新しい項目の追加]で、Prism UserControlを選択します。クラス名(コントロール名)をViewAとします。同様にViewBを作成します。

Prismが、Viewに対応するViewModelのクラスの自動生成と、Viewのxamlにprism:ViewModelLocator.AutoWireViewModel="True"の付け足しをしてくれます。公式サンプル「17-BasicRegionNavigation」と同様、それぞれ単にViewA, ViewB と表示するTextBlockを一つあるだけとします。下記はViewAのxamlのサンプル。このサンプルではViewModelでは何もしません。コードも自動生成のままでよいです。INavigationAwareを実装しなくてもとりあえずNavigationされるようです。公式サンプル「17-BasicRegionNavigation」と同様、MainWindowに、Buttonを２つ、Regionを1つ配置します。ButtonによってRegionの内容をViewA⇔ViewB切り替えできるようにします。自動生成されたMainWindowView.xamlに対し、Buttonを２つ追加します。ContentControlは大きさだけ調整します。
ButtonのCommandには、ViewModelに定義するNavigateCommandというプロパティをバインドします。さらにCommandParameterには、切り替えるViewのクラス名を指定します。ViewA.xamlならViewAです。
ViewModelのコード変更は後述します。【備考】Prism7.1 以降でアプリ起動時のコードが変更されています。過去の人気記事とは少し違うことに注意してください。Region上のViewを切り替えることとDI(Dependency injection)とは関係ありませんが、Prismを使うにあたってDIコンテナの使用が前提となります。RegionManagerのクラス登録はPrismが作ってくれるらしく、自分のコード上では何も指定しません。一方で、自分で作るViewはクラス登録が必要です。Viewの切り替え(Navigation)に使えるように、DIコンテナに、ViewA, ViewBのクラスを登録します。※ViewA,ViewBのインスタンスの生成・破棄のタイミングは別途指定が必要になるはずです。未調査＆割愛。ViewA, ViewBを切り替える仕組みとして、MainWindowViewModel内でRegionManagerを使います。そのRegionManagerはDIでもらいます。ところで、PrismでViewModelがRegionManagerをDIコンテナからもらう(サンプルの)コードには２種類あります。プロパティでもらう場合と、コンストラクタでもらう場合です。プロパティでもらうには、Prism.Unityとは別に、NuGetでUnity(作成者: Unity Container Project)をインストールします。[Dependency]を指定するにはusing Unityが必要です。ちなみに過去の人気記事ではusing Microsoft.Practices.Unityとなっていますが、2016年頃にdllが変わったようです。
のようにします。ただし、この場合はMainWindowViewModelのコンストラクタの時点では RegionManagerプロパティがnullです。従ってコンストラクタでRegionの初期表示Viewを指定することはできません。インスタンスが作成された後、何かのイベントで初めて使えるようになるようです。この記事には、MainWindowの(コードビハインドの)Activateイベントで行う例が紹介されています。もう一つの方法、コンストラクタでもらう場合には、NuGetでUnityを取得する必要はありません。このサンプルはこちらを使います。サンプルはMainWindow上のButtonでViewA, ViewBを切り替える、という仕様です。MainWindow.xamlの側ではButtonでCommand="{Binding NavigateCommand}"としています。そのNavigateCommandを、MainWindowViewModelに定義します。さらにCommandParameterを受け渡すためにstringを引数としたCommandとしています。public DelegateCommand&lt;string&gt; NavigateCommand { get; private set; }
このDelegateCommandでNavigate()メソッドを呼び出し、RegionManagerに対しViewを切り替える要求を出します。初期表示の指定にはRegisterViewWithRegion()を使えるようです。切り替えの要求(RequestNavigateメソッド)では、初期表示を指定できませんでした。 まとめて、MainWindowViewModel.csはこのようになります。WPF PRISM 入門エントリまとめ
Prism公式サンプル
[WPF/C#]Prism(6.3.0)のRegionで画面遷移をする
Prism-Samples-Wpfの勉強メモ


