More than 1 year has passed since last update.3DモデルのメッシュカットをOculus Goで行うために軽量化をめざしていろいろやってみたものの解説(？)です。以前、プロトタイプをベタ張りしたものを大幅に改良しました。まだまだ問題がありますが、大体動くと思います。大体の動作としてはこのような感じです(Oculus goでの動作)。
これがdoubleの威力かぁ pic.twitter.com/H2WkMGe9Zv1.　切りたいオブジェクトに、RigidBody、MeshCutのスクリプトをくっつける
2.　オブジェクトを切る刀などを用意して、colliderのIsTriggerをONにする。Cutterのスクリプトをくっつける
3.　切るメッシュカットの基本的な流れは以下で分かりやすく説明されています。
https://qiita.com/edo_m18/items/31961cd19fd19e09b675単に新たな切断面の頂点を生成していきながら何回もざくざく切っていくと頂点数がどんどん増えてしまうため、Oculus goなどのデバイスで動かそうとすると動作がどんどん重くなってしまいます。そこで出来るだけ動作が軽くなるように、1回の処理の内容は増えますが、繰り返しによって頂点が増えて絶対的な処理量が増えるより、同一平面上にある三角形は出来るだけまとめて、繰り返し切っても頂点が増えないようにする作戦を取ることにしました。具体的には切断後の頂点を計算しメッシュを作った後(切断面以外)
1.同一平面上にある三角形を判定して全て集める
2.それらの三角形で形成される平面の外周上で、1直線上にある複数の頂点を両端の2点だけにする
3.外周上で順番通りに並び替え、最小の三角形で構成されるように再構成する
切断面に関しては2-3のみです。基本的にくぼみのあるオブジェクトは想定しておらず、通常の立方体や簡単な立体程度を想定しています。あと、初めは標準的なVector3を使っていましたが、メッシュの再構成などでfloatだと精度的に不十分なようでdoubleで動作させる必要があるようです。Cutterは刀などを用いる場合の刃先の一方向のみで切断する方法と
ライトセーバーなどで動かした方向に切断する方法のどちらかを採用。遊んで改良してくれるとうれしいです
切断後の体積を計算して重さもちゃんと振り分けたら良さそう


