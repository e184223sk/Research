AggregateメソッドとはなんぞやまずはMSの公式ドキュメントを見てみます。シーケンスにアキュムレータ関数を適用します。
(中略)
一般的な集計操作を簡略化するために、標準クエリ演算子には、汎用カウントメソッド、 Count 、および4つの数値集計メソッド (、、、および) も含まれて Min Max Sum Average います。🤔???????
MSの公式ドキュメントは翻訳の質が低いことが多くて困りますね。"Aggregate"は日本語で「集計」とか大体その辺を意味する言葉です。
その名の通り、IEnumerable&lt;T&gt;を継承したコレクションの中身全てについて集計処理を行ってくれる汎用性の高いメソッドです。
やろうと思えばLinqの他のメソッド、Min・MaxもSumもAverageも、Aggregateを使えば自力で書けたりするわけですね。
(処理の意味の明確化のためにはそれ用にあつらえてあるメソッドを使うべきですが)使い方を知る前に、Aggregateがどのような動きをするのか確認しておきましょう。
なお、サンプルコードはトップレベルステートメントを使っているので、C# 9(.NET 5) 以降のバージョンでしかコンパイルが通らない点に注意してください。Aggregateメソッドには3つのオーバーロードがあります。
まずは一番基本的な、集計用のラムダ式一つだけを引数としてとるものからはじめます。Aggregateに渡す集計用ラムダ式には2つの引数が必要です。
上記の例ではresultとcurrentと名付けています。それではAggregateメソッドを実行したときの動きを追ってみましょう。つまり、Aggregateにわたすラムダ式の構成要素は以下のようなものと言えるわけです:このことがわかれば、あとの2つのオーバーロードの理解も簡単です。単に処理の前後に何かしらの処理をくっつけているだけなので。Aggregateの動き方がわかったところで、ようやく本題の具体的にはどんな活用方法があるかを紹介していきます。要素を文字列化して任意のセパレータを挟んだ文字列に変換できます。Linqに用意されているSumやAverage、Min・Maxメソッドは同時に一つの値についてしか計算できません。
リストの中に入っているオブジェクトの複数のプロパティについてこれらの結果を求めたい場合、Aggregateを使って自分で書いてやる必要があります。条件をまとめた配列があれば、真理値の総計を取ることでそれらを満たしているかの調査が1行で書けてしまいます。紹介する使い方は以上でおわりですが、Aggregateメソッドは汎用性の高いメソッドなので、この他にもアイデア次第でいろんな事ができるでしょう。ただ、慣れていないと中々何をやっているかがわかりにくくなりやすいメソッドでもあると思います。
実際に活用する際はAggregateをそのまま使用するのではなく、拡張メソッドにラップして、どのような処理なのかを明確にすることも検討したほうがいいかもしれませんね。


