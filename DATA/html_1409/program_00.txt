
namespace TestApp.ViewModels.Dialogs
{
    public class MessageDialogViewModel : BindableBase, IDialogAware
    {
        private string _title;
        public string Title
        {
            get =&gt; this._title;
            set =&gt; this.SetProperty(ref this._title, value);
        }

        private string _message;
        public string Message
        {
            get =&gt; this._message;
            set =&gt; this.SetProperty(ref this._message, value);
        }

        public ICommand OKCommand { get; }

        public event Action&lt;IDialogResult&gt; RequestClose;

        public MessageDialogViewModel()
        {
            this.OKCommand = new DelegateCommand(() =&gt; this.OnRequestClose(new DialogResult(ButtonResult.OK)));
        }

        public void OnDialogOpened(IDialogParameters parameters)
        {
            this.Title = parameters.GetValue&lt;string&gt;(nameof(this.Title)) ?? string.Empty;
            this.Message = parameters.GetValue&lt;string&gt;(nameof(this.Message)) ?? string.Empty;
        }

        public bool CanCloseDialog()
        {
            return true;
        }

        public void OnDialogClosed()
        {
        }

        protected void OnRequestClose(IDialogResult dialogResult)
        {
            this.RequestClose?.Invoke(dialogResult);
        }
    }
}

