More than 1 year has passed since last update.オレオレ解釈の覚え書き　その７引き続き相互作用処理についての内容で、Prism 7.2 から採用された DialogService を使ったダイアログ表示の実装方法をまとめます。なお、本稿の例では Prism のほか Unity DI コンテナも利用しています。（DI コンテナについての説明はここでは割愛します。）※相互作用処理とは何かについては前回の記事にまとめました。はじめに、表示するダイアログの View と ViewModel を用意しましょう。View は UserControl として生成し、対応する ViewModel は IDialogAware インターフェースを実装しておきます。上記で定義したダイアログの View と ViewModel の型をアプリケーションのエントリーポイントで DI コンテナに登録します。これにより、後述する IDialogService インターフェースを経由して登録されたダイアログを利用できます。ダイアログを表示するクラスでは、IDialogService.ShowDialog メソッドを使用し、指定されたクラス名のダイアログを表示することができます。（例では示されていませんが、戻り値を受け取ることも可能です。）IDialogService という明らかにダイアログ表示を意識したインターフェースが ViewModel に登場するのは少々気持ち悪いですが、実体は外部から注入されており、依存関係の排除とテスタビリティの高さを兼ね備えています。また InteractionRequest とは違い View にトリガーを定義する必要がないため、ViewModel 内で処理が完結しています。DialogService を使った相互作用処理についてまとめました。比較的新しい機能で情報は少ないですが、ダイアログを表示する手段がまた一つ増えました。一方で InteractionRequest は汎用性が高く、ViewModel を起点に何かを発信する用途であれば、ダイアログの表示以外にも様々な用途が考えられます。これらもまた適材適所で使い分けていくことになりそうです。
Prism 7.2 で Obsolete が付与された InteractionRequest は次期バージョンで削除されることになりました。現在使用中の Prism をアップデートする場合はご注意ください。次回は View からの処理依頼を受け取る委譲コマンドについてまとめます。


