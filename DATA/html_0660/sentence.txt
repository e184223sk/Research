C#の慣習で、取得失敗といえば「null」だろうという感覚でソースコードを組んでいた私。。。( ´ •̥  ̫ •̥ ` )実はデータベースに関してはハマったことがあります。それはC#のデータベースのNULLの扱いは、データベース(SQL)の世界ではNULLは不定値であり、C言語やJavaでいう「完全なゼロ」を意味するnullとは別物である現実を知らずに、DBのNULLを「&lt;変数&gt; == null」で判定してしまったということです。DBの世界ではNULLは無効な不定値を意味するので、今になって、さすがに混同なんてできないものだって反省しました…今回は、MySQLをC#に導入したとき
のプログラムを組んでみたのですが、実際のデータは以下のようになっています。実際には、memoの一部にはNULLが含まれているため、以下のコードでは、実行すると空白で表示されてしまったんです。そこで、取得したmemoはrow[2]に該当するので「row[2] == null」「row[2] != null」で、NULLかどうかの判定をしたのですが…うまく比較されていませんでした( ´ •̥  ̫ •̥ ` )最近はDBのNULLについて理解を深めていったけど、データベースの世界では、NULLは不定値を意味するのであって、C言語やJavaのように、完全無効なゼロを意味するものではないということで、C言語でDBのNULLについていうと、初期化されていない変数みたいなもので、不安定な値を含んでいるものに近いらしい。そうなれば、DBのNULLを「==」「!=」演算子で比較しようとしても、当然うまくいかないのかもね。。。っということで、正しい比較としては、DBNull.Valueというものが用意されているので、その値に等しければ、取得したデータはNULLだということが判別できるこれでNULLの場合の比較ができた(♥´꒳`*)　1. [C#]DataRowの値がNullかチェックする方法
　2. DBNull.Value フィールド - Microsoft .NET 公式


