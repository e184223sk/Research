More than 1 year has passed since last update.この記事はAzureのFace APIを使って顔の類似度を判定する①の続きです。前回はFace APIのFace Detectを使用して、まずはFaceIDなどの必要な情報を取得してきました。
今回はそれを使用して、Face FindSimilarによる類似度判定や、OpenCVSharpでの顔検出箇所の描画を行っていきます。ちなみに前回Face Detectから取得した顔情報は、以下のようなList&lt;FaceInfo&gt;型に整形してMainメソッドで受け取りました。
FaceInfoは検出時のFaceIDと検出箇所の座標、それが比較元と比較先画像のどちらから検出したものなのかという情報を持つ独自クラス型です。今のままでは1枚の画像から複数人の顔が検出された際に誰が誰だかわからないので、最低限検出した箇所と、その際に割り当てられたFaceIDを描画したいと思います。
画像への描画には、画像処理・画像解析のライブラリであるOpenCVSharp（OpenCVのラッパー）を使用します。NuGetからインストールします。
VisualStudioのメニューから「プロジェクト」→「NuGetパッケージの管理」を選択してください。
管理画面が表示されたら、「参照」の検索窓から「opencvsharp」と検索し、「OpenCvSharp3-AnyCPU」をインストールしましょう。現時点での最新版は「4.0.0.20181129」でした。

インストールが成功すると、ソリューションエクスプローラー上で参照に色々追加されているのが確認できると思います。

ついでにusingにもOpenCvSharpを追加しておきましょう。それでは、実際にOpenCVSharpを使用して描画する為のメソッドを追加します。
以下の2つのメソッドをFaceFindSimilarクラス内に追加してください。dispImageByOpenCVメソッドではLinqで比較元画像の顔情報と比較先画像の顔情報を分けてあげて、ShowImageメソッドでそれぞれの画像に対してCv2.RectangleやCv2.PutTextで顔周りの四角い枠とFaceIDを描画しています。ではdispImageByOpenCVをMainメソッドから呼び出してみましょう。
dispImageByOpenCVメソッドはMainメソッドから引数として以下を受け取ります。// 追加箇所 From(~To)が呼び出し箇所です。
特に戻り値もないので、それぞれのファイルパスと顔情報のリストをそのまま渡しただけですね。
描画した画像ウィンドウを閉じるCv2.DestroyAllWindows();も忘れずに記述しましょう。ここまででF5実行すると、以下のように顔周りに赤い四角い枠とFaceIDが描画されると思います。


以上で画像の描画処理は終了となります。やっとという感じですが、Face FindSimilarを使用して類似度の判定を行いましょう。
まずは以下をコピペして、using4つとメソッド1つとクラス2つを追加してください。
書いといてなんですが、詰め込みすぎですね。すみません。
追加してください。（曲げない）usingFindSimilarRequestメソッドFaceConfidenceクラス、MatchFaceSimilarクラス流れとしてはMainメソッドからFindSimilarRequestメソッドを呼び出し、その中でFace FindSimilarへ投げる際のリクエストヘッダ、リクエストボディを整形して、各類似度を取得しています。Face FindSimilarに投げる際のリクエストボディはJSONにして渡さないといけないので、MatchFaceSimilar独自クラスのインスタンスを作成後、Json.NETのJsonConvert.SerializeObject()を使用してシリアライズしています。ちなみに公式ドキュメントによると、以下のような形式のJSONにする必要があります。（一部加工しています）MatchFaceSimilarクラス内のJsonPropertyには上記のキー項目名を設定しています。また、FaceConfidenceクラスはFace FindSimilarからの結果JSONを受け取るための独自クラスです。FindSimilarRequestメソッド内で、Face FindSimilar実行後にcontentStringに入った結果JSONをJsonConvert.DeserializeObject()でデシリアライズし、FaceConfidenceクラスのインスタンスを作成しています。最後に、MainメソッドでdispImageByOpenCV(URL_BASE, URL_TARGET, faceInfoList);としていた部分を以下のコードで上書きして、実行してみましょう。ここでは以下の画像を使用して試してみます。比較元：ちょいワルになりきれない男たちのフリー画像（写真）
比較先：社員の不正を暴く監査役のフリー画像（写真）

比較元画像から2人分の顔が検出され、比較先画像で検出された2人分の顔とそれぞれ比較、類似度が判定されていますね。以上で終了になります。.NET Framework（C#, VB）を用いてFace FindSimilarの類似判定をしている記事が意外に見つけられなかったので、自分でやってみました。SDKでNuGetに「Microsoft.Azure.CognitiveServices.Vision.Face」とかいうすごく便利そうなものがあると知ったのは作った後のこと。泣きそう…次はちゃんとこの辺活用したコード書きます！


