
using System;
using System.Collections.Generic;
using System.Text;

namespace System.Linq
{
    public static partial class Enumerable
    {
        public static TSource FirstOrDefault&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, TSource defaultValue)
        {
            if (source == null) throw new ArgumentNullException(nameof(source));
            //Error.ArgumentNull("source");
            IList&lt;TSource&gt; list = source as IList&lt;TSource&gt;;
            if (list != null)
            {
                if (list.Count &gt; 0) return list[0];
            }
            else
            {
                using (IEnumerator&lt;TSource&gt; e = source.GetEnumerator())
                {
                    if (e.MoveNext()) return e.Current;
                }
            }
            return defaultValue;
        }

        public static TSource FirstOrDefault&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, Func&lt;TSource, bool&gt; predicate, TSource defaultValue)
        {
            if (source == null) throw new ArgumentNullException(nameof(source));
            if (predicate == null) throw new ArgumentNullException(nameof(predicate));
            //if (source == null) throw Error.ArgumentNull("source");
            //if (predicate == null) throw Error.ArgumentNull("predicate");
            foreach (TSource element in source)
            {
                if (predicate(element)) return element;
            }
            return defaultValue;
        }

        public static TSource LastOrDefault&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, TSource defaultValue)
        {
            if (source == null) throw new ArgumentNullException(nameof(source));
            //if (source == null) throw Error.ArgumentNull("source");
            IList&lt;TSource&gt; list = source as IList&lt;TSource&gt;;
            if (list != null)
            {
                int count = list.Count;
                if (count &gt; 0) return list[count - 1];
            }
            else
            {
                using (IEnumerator&lt;TSource&gt; e = source.GetEnumerator())
                {
                    if (e.MoveNext())
                    {
                        TSource result;
                        do
                        {
                            result = e.Current;
                        } while (e.MoveNext());
                        return result;
                    }
                }
            }
            return defaultValue;
        }

        public static TSource LastOrDefault&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, Func&lt;TSource, bool&gt; predicate, TSource defaultValue)
        {
            if (source == null) throw new ArgumentNullException(nameof(source));
            if (predicate == null) throw new ArgumentNullException(nameof(predicate));
            //if (source == null) throw Error.ArgumentNull("source");
            //if (predicate == null) throw Error.ArgumentNull("predicate");
            TSource result = defaultValue;
            foreach (TSource element in source)
            {
                if (predicate(element))
                {
                    result = element;
                }
            }
            return result;
        }


        public static TSource SingleOrDefault&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, TSource defaultValue)
        {
            if (source == null) throw new ArgumentNullException(nameof(source));
            //if (source == null) throw Error.ArgumentNull("source");
            IList&lt;TSource&gt; list = source as IList&lt;TSource&gt;;
            if (list != null)
            {
                switch (list.Count)
                {
                    case 0: return defaultValue;
                    case 1: return list[0];
                }
            }
            else
            {
                using (IEnumerator&lt;TSource&gt; e = source.GetEnumerator())
                {
                    if (!e.MoveNext()) return defaultValue;
                    TSource result = e.Current;
                    if (!e.MoveNext()) return result;
                }
            }
            throw new InvalidOperationException("MoreThanOneElement");
            // throw Error.MoreThanOneElement();
        }

        public static TSource SingleOrDefault&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, Func&lt;TSource, bool&gt; predicate, TSource defaultValue)
        {
            if (source == null) throw new ArgumentNullException(nameof(source));
            if (predicate == null) throw new ArgumentNullException(nameof(predicate));
            //if (source == null) throw Error.ArgumentNull("source");
            //if (predicate == null) throw Error.ArgumentNull("predicate");
            TSource result = defaultValue;
            long count = 0;
            foreach (TSource element in source)
            {
                if (predicate(element))
                {
                    result = element;
                    checked { count++; }
                }
            }
            switch (count)
            {
                case 0: return defaultValue;
                case 1: return result;
            }
            throw new InvalidOperationException("MoreThanOneMatch");
            // throw Error.MoreThanOneMatch();
        }

        public static TSource ElementAtOrDefault&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, int index, TSource defaultValue)
        {
            if (source == null) throw new ArgumentNullException(nameof(source));
            //if (source == null) throw Error.ArgumentNull("source");
            if (index &gt;= 0)
            {
                IList&lt;TSource&gt; list = source as IList&lt;TSource&gt;;
                if (list != null)
                {
                    if (index &lt; list.Count) return list[index];
                }
                else
                {
                    using (IEnumerator&lt;TSource&gt; e = source.GetEnumerator())
                    {
                        while (true)
                        {
                            if (!e.MoveNext()) break;
                            if (index == 0) return e.Current;
                            index--;
                        }
                    }
                }
            }
            return defaultValue;
        }
    }
}

