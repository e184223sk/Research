
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

namespace Namespace
{

    public abstract class BaseClass
    {
        //共通プロパティの中身を格納するDictionary
        public static Dictionary&lt;Type, string&gt; dic = new Dictionary&lt;Type, string&gt;();

        //staticコンストラクタ
        static BaseClass()
        {
            //サブクラスをまとめて初期化
            var subClasses = Assembly.GetAssembly(typeof(BaseClass)).GetTypes().Where(t =&gt; t.IsSubclassOf(typeof(BaseClass)));

            foreach (var t in subClasses)
            {
                //リフレクションを利用した何らかの処理の代わり
                var value = t.Name + "ですよ";

                //格納
                dic.Add(t, value);
            }

        }

        public static string GetName&lt;T&gt;() where T : BaseClass
        {
            if (typeof(T) == typeof(BaseClass)) { throw new ArgumentException("BaseClassは入れないで"); }
            return dic[typeof(T)];
        }
    }

    public class ClassA : BaseClass
    {
        //派生クラスは綺麗にできた(｀・ω・´)
    }

    public class ClassB : ClassA
    {
        //派生クラスは綺麗にできた(｀・ω・´)
    }

    static class Program
    {
        /// &lt;summary&gt;
        /// アプリケーションのメイン エントリ ポイントです。
        /// &lt;/summary&gt;
        [STAThread]
        static void Main()
        {
            System.Diagnostics.Debug.WriteLine(BaseClass.GetName&lt;ClassA&gt;());//ClassAですよ
            System.Diagnostics.Debug.WriteLine(BaseClass.GetName&lt;ClassB&gt;());//ClassBですよ
            System.Diagnostics.Debug.WriteLine(BaseClass.GetName&lt;BaseClass&gt;());//ArgumentException(´・ω・`)
        }
    }
}


