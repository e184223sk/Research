    public abstract class BaseClass
    {
        //派生クラスのプロパティの中身を格納するDictionary
        protected static Dictionary&lt;Type, string&gt; dic = new Dictionary&lt;Type, string&gt;();

        //staticコンストラクタ
        static BaseClass()
        {
            //サブクラスをまとめて初期化
            var subClasses = AppDomain.CurrentDomain.GetAssemblies().SelectMany(s =&gt; s.GetTypes()).Where(t =&gt; t.IsSubclassOf(typeof(BaseClass)));

            foreach(var t in subClasses)
            {
                //リフレクションを利用した共通の初期化処理
                dic.Add(t, t.Name);
            }

        }

        //本当はここに書きたい
        //public static string Name { get { return dic["ここの引数が見つからない"]; } }

    }

    public class ClassA : BaseClass
    {
        //ここに書きたくない
        public static string Name { get { return dic[System.Reflection.MethodInfo.GetCurrentMethod().DeclaringType]; } }
    }

    public class ClassB : ClassA
    {
        //多重継承するとnewが必要になる
        public new static string Name { get { return dic[System.Reflection.MethodInfo.GetCurrentMethod().DeclaringType]; } }
    }

