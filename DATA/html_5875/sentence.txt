More than 3 years have passed since last update.　「ビットマップ形式」……いわゆるラスターグラフィックスは、最も典型的な画像の表現方法でしょう。
　それをプログラム上で表現するため、C#では System.Drawing.Bitmap など様々な型が用意されています。　……そう、 様々な型 です。暗黙の型変換でよしなにしてくれない場合、メソッドを用いた 変換が必要 なのです！
　というわけで、変換方法についてまとめてみました。元ネタは次のQiita記事です。　　WPFの画像相互コンバーター。System.Drawing.BitmapからSystem.Windows.Controls.Imageへの変換。
　　WPFの画像相互コンバーター。BitmapImageからBitmapSourceへの変換。※以下の記事では、メソッドの戻り値と同じ型を使用する場合のみ var キーワードを使用しています。
　なぜならそうしないと、型の変化が分かりにくいからです。　まず、様々な型について、その継承関係を振り返ってみましょう。
　ただし以下の表では、継承元の名前を「 S.D.Image 」などと略しています。※1……例えばクリップボードからビットマップ形式の画像データを取り出した際、
　WinFormsでは System.Drawing.Bitmap で返るが、
　WPFでは System.Windows.Interop.InteropBitmap で返る。
　これにどういう意味があるのかよく分かりませんので誰か教えてください＞＜
※2……SourceプロパティにSystem.Windows.Media.ImageSourceを指定する　このことから、例えば BitmapImage を System.Windows.Controls.Image にするにはで十分ですし、 BitmapImage を BitmapSource にするにはでOKです。なお、継承元が同じな BitmapImage や InteropBitmap は直接キャストすることができず、必ず BitmapSource など上位の型に変換してからキャストすることが必要となります。　……上記考察から、 System.Drawing.Bitmap と System.Windows.Media.Imaging.BitmapSource との間の変換が重要 だと分かります。　一番無難なのは、 System.IO.MemoryStream を経由することでしょう。　また、 BitmapImage は System.IO.Stream をプロパティから受け取れますので、そちらから攻める手もあるでしょう。　なお、Unmanagedなメソッドを使っていい場合は、次のようなコードになります。
　別の方の記事になりますが、 MemoryStreamよりずっと高速 だそうです。　　.NETで画像処理を試してみる OpenCVSharp編 第5回 - A certain engineer "COMPLEX"　色々手段がありますが、Bitmap→BitmapSourceよりこっちの方が面倒くさいように見えます。


