        static int ARR_SIZE = 200;
        int[] buf;
        async void mergesort(int num)
        {
            sort_initialize(); //ソート前処理
            buf = new int[ARR_SIZE]; //バッファ
            Rectangle current; //System.Windows.Shapes
            int rght, rend;
            int i, j, m;

            for (int k = 1; k &lt; num; k *= 2)
            {
                for (int left = 0; left + k &lt; num; left += k * 2)
                {
                    rght = left + k;
                    rend = rght + k;
                    if (rend &gt; num)
                    {
                        rend = num;
                    }

                    m = left;
                    i = left;
                    j = rght;

                    while (i &lt; rght &amp;&amp; j &lt; rend)
                    {
                        add_array_access(); //配列へのアクセス回数をカウントするメソッド
                        add_array_access();
                        add_comparison(); //こっちは比較回数をカウントするメソッド
                        if (array[i] &lt;= array[j])
                        {
                            current = FindNameRect_nolonger(i); //i番目のRectangleへの参照を返すメソッド
                            mark_red(current); //取得したRectangleを赤色に染める
                            add_array_access();
                            buf[m] = array[i]; i++;
                            await Task.Delay(10); //10ms待機する
                        }
                        else
                        {
                            current = FindNameRect_nolonger(j);
                            mark_red(current);
                            add_array_access();
                            buf[m] = array[j]; j++;
                            await Task.Delay(10);
                        }
                        m++;
                    }
                    while (i &lt; rght)
                    {
                        current = FindNameRect_nolonger(i);
                        mark_red(current);
                        add_array_access();
                        buf[m] = array[i];
                        await Task.Delay(10);
                        i++; m++;
                    }
                    while (j &lt; rend)
                    {
                        current = FindNameRect_nolonger(j);
                        mark_red(current);
                        add_array_access();
                        buf[m] = array[j];
                        await Task.Delay(10);
                        j++; m++;
                    }
                    for (m = left; m &lt; rend; m++)
                    {
                        current = FindNameRect_nolonger(m);
                        mark_blue(current);
                        add_array_access();
                        array[m] = buf[m];
                        current.Height = buf[m];
                        current.Margin = new Thickness(0, 447 - buf[m], 0, 0);
                        await Task.Delay(10);
                    }
                }
            }
            success(); //成功のメソッド
        }

