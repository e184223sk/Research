
        /// &lt;summary&gt;四則計算(TypeSafeEnum)&lt;/summary&gt;
        public class CalcTypeAsTypeSafeEnum
        {
            public static readonly CalcTypeAsTypeSafeEnum Add =
                new CalcTypeAsTypeSafeEnum(0,"足し算", "+", (v1, v2) =&gt; v1 + v2);
            public static readonly CalcTypeAsTypeSafeEnum Subtract =
                new CalcTypeAsTypeSafeEnum(1,"引き算", "-", (v1, v2) =&gt; v1 - v2);
            public static readonly CalcTypeAsTypeSafeEnum Multiple =
                new CalcTypeAsTypeSafeEnum(2,"掛け算", "*", (v1, v2) =&gt; v1 * v2);
            public static readonly CalcTypeAsTypeSafeEnum Divide =
                new CalcTypeAsTypeSafeEnum(3,"割り算", "/", (v1, v2) =&gt; v1 / v2);

            private CalcTypeAsTypeSafeEnum(int key, string name, string symbol, Func&lt;decimal, decimal, decimal&gt; calcFunc)
            {
                _calcFunc = calcFunc ?? throw new ArgumentNullException(nameof(calcFunc));
                Key = key;
                Name = name;
                Symbol = symbol;
                KeyValueDictionary.Add(key, this);
            }

            private static readonly Dictionary&lt;int, CalcTypeAsTypeSafeEnum&gt; KeyValueDictionary =
                new Dictionary&lt;int, CalcTypeAsTypeSafeEnum&gt;();

            /// &lt;summary&gt;計算関数&lt;/summary&gt;
            private readonly Func&lt;decimal, decimal, decimal&gt; _calcFunc;

            /// &lt;summary&gt;キー&lt;/summary&gt;
            public int Key { get; }

            /// &lt;summary&gt;名称&lt;/summary&gt;
            public string Name { get; }

            /// &lt;summary&gt;記号&lt;/summary&gt;
            public string Symbol { get; }

            /// &lt;summary&gt;全値を取得&lt;/summary&gt;
            public static IReadOnlyCollection&lt;CalcTypeAsTypeSafeEnum&gt; Values =&gt; KeyValueDictionary.Values;

            /// &lt;summary&gt;キーからオブジェクトを取得&lt;/summary&gt;
            /// &lt;param name="key"&gt;The key.&lt;/param&gt;
            /// &lt;param name="defaultValue"&gt;取得できなかった時のデフォルト値&lt;/param&gt;
            /// &lt;returns&gt;オブジェクト&lt;/returns&gt;
            /// &lt;exception cref="System.ArgumentNullException"&gt;defaultValue&lt;/exception&gt;
            public static CalcTypeAsTypeSafeEnum FromKey(int key, CalcTypeAsTypeSafeEnum defaultValue = null)
                          =&gt; KeyValueDictionary.TryGetValue(key, out var ret) ? ret : defaultValue;


            /// &lt;summary&gt;計算を実施&lt;/summary&gt;
            /// &lt;param name="v1"&gt;値1&lt;/param&gt;
            /// &lt;param name="v2"&gt;値2&lt;/param&gt;
            /// &lt;returns&gt;計算結果&lt;/returns&gt;
            public decimal Calc(decimal v1, decimal v2) =&gt; _calcFunc(v1, v2);

            public override string ToString() { return $"{Name}[{Symbol}]"; }
        }

