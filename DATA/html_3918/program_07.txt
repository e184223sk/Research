

        /// &lt;summary&gt;四則計算(TypeSafeEnum)&lt;/summary&gt;
        public class CalcTypeUsesTypeSafeEnumBase : TypeSafeEnumBase&lt;CalcTypeUsesTypeSafeEnumBase, int&gt;
        {
            public static readonly CalcTypeUsesTypeSafeEnumBase Add =
                new CalcTypeUsesTypeSafeEnumBase(0,"足し算", "+", (v1, v2) =&gt; v1 + v2);
            public static readonly CalcTypeUsesTypeSafeEnumBase Subtract =
                new CalcTypeUsesTypeSafeEnumBase(1,"引き算", "-", (v1, v2) =&gt; v1 - v2);
            public static readonly CalcTypeUsesTypeSafeEnumBase Multiple =
                new CalcTypeUsesTypeSafeEnumBase(2,"掛け算", "*", (v1, v2) =&gt; v1 * v2);
            public static readonly CalcTypeUsesTypeSafeEnumBase Divide =
                new CalcTypeUsesTypeSafeEnumBase(3,"割り算", "/", (v1, v2) =&gt; v1 / v2);

            private CalcTypeUsesTypeSafeEnumBase(int key, string name, string symbol, Func&lt;decimal, decimal, decimal&gt; calcFunc) 
                : base(key, name)
            {
                _calcFunc = calcFunc ?? throw new ArgumentNullException(nameof(calcFunc));
                Symbol = symbol;
            }
            /// &lt;summary&gt;計算関数&lt;/summary&gt;
            private readonly Func&lt;decimal, decimal, decimal&gt; _calcFunc;

            /// &lt;summary&gt;記号&lt;/summary&gt;
            public string Symbol { get; }

            /// &lt;summary&gt;計算を実施&lt;/summary&gt;
            /// &lt;param name="v1"&gt;値1&lt;/param&gt;
            /// &lt;param name="v2"&gt;値2&lt;/param&gt;
            /// &lt;returns&gt;計算結果&lt;/returns&gt;
            public decimal Calc(decimal v1, decimal v2) =&gt; _calcFunc(v1, v2);
        }

