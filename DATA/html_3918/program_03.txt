

        /// &lt;summary&gt;四則計算(TypeSafeEnum)&lt;/summary&gt;
        public class CalcTypeAsSimpleTypeSafeEnum
        {
            public static readonly CalcTypeAsSimpleTypeSafeEnum Add =
                new CalcTypeAsSimpleTypeSafeEnum("足し算", "+", (v1, v2) =&gt; v1 + v2);
            public static readonly CalcTypeAsSimpleTypeSafeEnum Subtract =
                new CalcTypeAsSimpleTypeSafeEnum("引き算", "-", (v1, v2) =&gt; v1 - v2);
            public static readonly CalcTypeAsSimpleTypeSafeEnum Multiple =
                new CalcTypeAsSimpleTypeSafeEnum("掛け算", "*", (v1, v2) =&gt; v1 * v2);
            public static readonly CalcTypeAsSimpleTypeSafeEnum Divide =
                new CalcTypeAsSimpleTypeSafeEnum("割り算", "/", (v1, v2) =&gt; v1 / v2);

            private CalcTypeAsSimpleTypeSafeEnum(string name, string symbol, Func&lt;decimal, decimal, decimal&gt; calcFunc)
            {
                _calcFunc = calcFunc ?? throw new ArgumentNullException(nameof(calcFunc));
                Name = name;
                Symbol = symbol;
            }

            /// &lt;summary&gt;計算関数&lt;/summary&gt;
            private readonly Func&lt;decimal, decimal, decimal&gt; _calcFunc;

            /// &lt;summary&gt;名称&lt;/summary&gt;
            public string Name { get; }

            /// &lt;summary&gt;記号&lt;/summary&gt;
            public string Symbol { get; }

            /// &lt;summary&gt;計算を実施&lt;/summary&gt;
            /// &lt;param name="v1"&gt;値1&lt;/param&gt;
            /// &lt;param name="v2"&gt;値2&lt;/param&gt;
            /// &lt;returns&gt;計算結果&lt;/returns&gt;
            public decimal Calc(decimal v1, decimal v2) =&gt; _calcFunc(v1, v2);

            public override string ToString() { return $"{Name}[{Symbol}]"; }
        }

