More than 1 year has passed since last update.こんな四則演算のenumがあったとするで、計算メソッドはこんな感じ使用方法(テストコード)はこんな感じ。(※要Chaining Assertion:Nugetから取得)・・・switch-caseは美しくない。例えばGUIアプリだと計算そのもののほかにも"+", "-", "*", "/"といった記号を表示しないといけないかもしれない。その時にまたswitch-caseで分岐するのか？とかいろいろ不安。TypeSafeEnumとは何か？それはジョシュア・ブロックが「Effective Java」で～とかなんとか能書きはおいといて、コードやコード。Talk is cheapや。
先ほどの四則演算enumだったら下記のように実装する。ポイントこれにより先ほどのCalcメソッドはこのように簡略化される。かくしてswitch-caseの駆逐に成功！さて、switch-caseの駆逐に成功したあとは使い勝手の向上について考える。実際のenumの使い方のシナリオでは例えばとか、とかいうことがある。そのようなシナリオに対応するために以下のようにステップ１のコードに手を加える。ポイントステップ２の一般的な機能は毎回実装するのは面倒。ということで共通の基底クラスを作っておく。
いろいろ実装方法はあるが、自分は以下のような感じのものを使っている。(※これを職場が変わるたびに作り直しているのが面倒だったのでWeb上に残そうと思ったのがこのエントリのモチベーション)ポイントで、先ほどのCalcTypeで実装するとこんな感じこれでステップ２よりはだいぶスッキリ。もう少し実践的にわかりやすい例を示すために（嘘）、自分の好きなプログレバンドを実装してみよう。
(Hadi Hariri先生もKotlinの説明の時にプログレバンドPink Floyedを使ってたしぃ)
 https://hhariri.wordpress.com/2013/11/18/refactoring-to-functional-reducing-and-flattening-lists/
↓引用上記クラスのテストコードは以下のような感じ(※要Chaining Assertion:Nugetから取得)それでは良いプログラミングライフをﾉｼ


