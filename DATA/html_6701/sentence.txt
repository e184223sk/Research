ここで言うクールダウンとは、よくアクションゲームにあるスキル再発動可能になるまでの時間のことを指します。実装にはUniRxを使用します。攻撃ボタンを押したとき、矢が発射される機能を簡単に実装しました。
arrowの移動制御は今回考えないものとします（プレイヤーの向いている方向に真っ直ぐ飛んでいくものとイメージして頂ければOKです）。ReactiveProperty&lt;int&gt;型のcooldownを作成して、0を初期値として代入します。
スキルを使用すると、cooldownに300の数値が設定されます。いわゆるクールダウンに入ったというやつですね(60fps想定なので300フレームは5秒の設定)。そして、UpdateAsObservable()によって毎フレームcooldownを減算していき、クールダウンが消費されていきます。Where()でcooldownの値が0より大きい時のみという条件をお忘れなく。1.矢を打つスキル実装で実装したスキル使用のifにcooldown==0という条件を追加します。これならクールダウンが解消されていなければ、スキル使用はできませんね。以下の仕様で実装します。cooldownの値を監視し、値に変化があった場合に通知され、Subscribe内の処理を行います。2.クールダウン実装で実装した通り、cooldownの値は毎フレーム1づつ減っていきますが、クールダウン解消まで残り1秒になった時と、解消された時だけアニメーションを行いたいのでSubscribe内にifを2つ設置し、残りクールダウンが60フレーム(1秒)の時と、0フレームの時で処理を行えるようにします。これなら、好きなクールダウンのタイミングで処理を行うことができますね。ロジックはあまり変わりませんね。
ReactivePropertyとコルーチン、どちらの実装方法が合っているかは未調査です。
こちらは少々実装が荒いかもしれないです。以上がReactivePropertyを使用したクールダウンの実装方法です。
この実装方法ならちょっと修正を加えて、残りクールダウンの半分解消する(あと3秒のクールダウンを1.5秒にする)ということも可能です。クールダウンゲージといったパッと見で分かりやすいUIにも組み込みやすいと思います。また、今回紹介したロジックで複数のスキルを管理したい場合はReactiveCollectionを使用すればOKです。
(コルーチン実装の方で複数スキル管理する場合は上記の実装方法では厳しく、スキル使用のifにcooldownを直接使わず、flagを使用するといった工夫が必要になります)この実装方法がアンチパターンではないこと祈ります...


