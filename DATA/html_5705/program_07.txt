
using System;
using System.ComponentModel;

namespace FormsMvvm
{
    public class Command : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public PropertySetter PropertySetter { get; private set; }

        public Command(Action execute)
        {
            PropertySetter = new PropertySetter(this, OnPropertyChanged);
            this.execute = execute;
        }

        public Command(Action execute, bool canExecute)
            :this(execute)
        {
            CanExecute = canExecute;
        }

        public Command(Action execute, IObservable&lt;bool&gt; canExecute)
            :this(execute)
        {
            canExecute.Subscribe(a =&gt; CanExecute = a);
        }

        private Action execute;
        public void Execute()
        {
            if (!CanExecute) return;
            execute?.Invoke();
        }

        private bool canExecute;
        public bool CanExecute
        {
            get =&gt; canExecute;
            set =&gt; PropertySetter.Set(ref canExecute, value);
        }
    }

    public static class CommandExtension
    {
        public static Command ToCommand(this IObservable&lt;bool&gt; source, Action execute = null)
        {
            return new Command(execute, source);
        }
    }
}

