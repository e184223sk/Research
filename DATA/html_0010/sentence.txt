TOPPERS/箱庭 単体ロボットシミュレータに仮想的な Bluetooth デバイスを追加することにしました．そのための実装方法として，より汎用的な技術である gRPC を利用することにしましたので，サーバー側の gRPC を利用したプログラムの作成方法について解説します．なお，gRPC を利用しようと思った動機は，以下の２点です．サーバー側のプログラムは，Bluetooth 用のシリアルI/Oライブラリで，EV3RTの Bluetooth APIとの連携を可能にします．ただし，本記事では，EV3RT側の解説は含まれておりません．
※別途，gRPC クライアント側の解説記事を書く予定ですので，その際に併せて説明します～．以下の記事がとても参考になります．深く学びたい方は，本家サイトを参照ください．まず，論より証拠，今回作成した gRPC の定義は以下になります．service キーワードから gRPC の定義が始まります．今回のケースでは，RPCのサービス名がSerialServiceです．そして，このサービスには，以下の２つのAPI(関数)があります(rpcキーワードで始まる部分です)．それぞれの処理について簡単に説明します．本APIは，引数に SerialPutData というデータ型をとり，結果を SerialputResultというデータ型で返します．クライアントがサーバーに Bluetooth 用のシリアルデータを送信する際に利用します．
※クライアントは送信したいデータを  SerialPutData に詰めます．本APIは，引数に SerialGetData というデータ型をとり，結果を SerialGetResultというデータ型で返します．クライアントがサーバーから Bluetooth 用のシリアルデータを受信する際に利用します．
※クライアントは受信するデータを  SerialGetResult で受け取ります．ここから，各データ型の定義方法について解説します．
まず，gRPC で利用するデータ型は，プロトコルバッファーで定義します．今回作成したデータ型の定義は以下の通りです．message で始まるキーワード部分がプロトコルバッファー定義部分です．
message の中のメンバは，データ型毎にそれぞれ自由に定義できます．たったこれだけの定義をするだけで，クライアント側とサーバー側の RPC 実装コードが様々な言語で生成されちゃうわけですから，実装方法の自由度が大きく広がりますし，実装コストも激減ですよね！！サーバー側の Bluetooth I/O 設計内容(UML)をお示しします．なお，本設計では，UMLツールとして，astah* professionalを利用しています．直感的な操作ができるところがとても良いです(ハマります)．設計検討中は常にモヤモヤしているので，ストレスなく思いを描けるツールの存在はとても大事です．さらに，設計中は様々な視点での検討が必要となるので，UML図だけでなく，DFDやロバストネス図なども使える点がさらに良いです．さて，ここから実際にプログラミングの話になります．
今回のBluetoothサーバー実装言語は，C#にしました．理由は，以下の記事にあるロガー機能がC#で実装されており，将来的に，このロガーを実機とシミュレータとで切り替えできるようにしたいという野望があるためです．C#での gRPC の開発環境ですが，こちらの記事が大変参考になります．各クラスの実装は，以下で公開しております．program.cs がユーザプログラムになります．本プログラムは，シリアルデータをサーバー側からクライアントに送信して，そのデータをクライアントからそのまま送り返してもらって，送信データと受信データが一致しているかどうかをチェックしています(10回繰り返します)．このプログラムの実行するとこんな感じで動きます．
クライアント側は，EV3RTのBluetooth APIを使ってデータの送受信をするようにしています(別途こちらは解説します)．


