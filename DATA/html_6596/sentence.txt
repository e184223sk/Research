More than 3 years have passed since last update.こんにちは。Xamarin + Visual Studio + C# で賢いお絵描きアプリを作ろうとして苦戦している shiatsumat です。前々回の記事と同じ挨拶で始めましたが、あの記事で作ったカスタムダイアログが問題なのです。あれのせいで起動が遅い。実は Android の Inflate は結構遅くて、二重に Inflate をしているあのダイアログはもろにその影響を受けているというわけです。では AXML を諦めてプログラムで記述しようかとも考えましたが、程なくしてこれは人間のする作業ではないと思ってやめました。疲れたのでアプリを10か国語に対応させるなどしていたのですが、よく考えると起動時にダイアログを完成させる必要はなく、ダイアログを実際に開くまでにバックグラウンドで Inflate させれば良いと今日気づきました。同期処理は大変そうだなとも思いましたが、C# には async と await という便利な同期機能があります（使ったことはありませんでしたが）。きっと簡単に出来るのでしょう。ということでやってみました。見よう見まねで非同期処理を書いてみたらビルドが通りました。デバッグしてみると起動が実に早い。ダイアログを開くために安心してボタンをタップしました。すると、出たのがこのエラーです。こういうよく分からない例外が出るから非同期処理は嫌ですね。また諦めかけたのですが、なんとか粘って解決できました。解決法は次の通りです。つまり、ダイアログの Create は非同期におこなってはならないのです。ダイアログの Create だけはボタンを押す直前に行うことにしましたが、Create は一瞬で終わるので、依然として動作は軽いです。大成功です。これで終わっても良いのですが、C# による非同期は意外にわかりにくいので、コードの例を書いておきます。まず、view を初期化する関数を作りましょう。返り値を void ではなく View にするのがポイントです。
そしてクラスのメンバ変数あたりで Task&lt;View&gt; 型のデータと AlertDialog 型のデータを保持しましょう。さて、ここからです。起動時（Activity の OnCreate など）にと書きます（InitializeView の部分はラムダ式にしても OK です）。ここから別スレッドでの実行がスタートします。
viewTask は別スレッドで行われている InitializeView の実行の進み具合を UI スレッドに伝える役割をしていると思ってください。ボタンを押す段階になったら viewTask のタスクが終わるのを待つ必要があります。と書くと、viewTask の実行が終わるのを待ち、View 型の実行結果を得ることができます。ただし、await を使えるのは async 修飾子のついた関数だけです。また async な関数を実行できるのも async な関数内だけです。async というと何やら怪しい響きですが、騙されたと思ってラムダ式に async を付けたら動きます。次のような処理を UI スレッド（Activity の OnCreate あたり）で行いましょう。async な関数でもイベントに登録できるんですね。ここで一番外側の関数を async にする必要はありません。つまり最終的に async な振る舞いをイベントが吸収してくれるという仕組みになっています。すごい。改めて見てみると簡単な話ですが意外にネットにまとまった情報がないので記事を書いてみました。参考になればうれしいです。今制作中の tegaki hack の方もよろしくお願いします。以上、読んでくださりありがとうございました。


