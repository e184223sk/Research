More than 1 year has passed since last update.私は、今までテスト駆動開発(TDD)をしらずにソフトウェア開発をしていました。
そして下記のような苦労がありました。TDDを導入することで、下記のメリットを享受できます。本記事は、私がTDDを実践して、これらのメリットを実感できた記録です。またテスト対象の課題としてFizz Buzzを選びました。
本記事で紹介する完全なコードは、 GitHub を参照してください。本記事で解説するコードは、下記の環境で開発しました。まずは、テストを書いてテストが失敗することを確認してから実装を書いていきます。
Fizz Buzzのような簡単なプログラムでもストイックに一つ一つテストケースを追加していきました。黄金の回転にしたがいテストがパスしてからリファクタリングをしようとしました。まず下記のコードは、テストをパスしています。　
※ リファクタリングに関係のない部分は省略しています。while より for のほうがわかりやすいと思い下記のように書き換えました。簡単な書き換えだと思ったので振る舞いは変わらないと思いましたが、
テストを実行すると、テストが失敗したので変更したコードにバグがあることに即座に気づけました。再度、テストを実行してバグが修正されたことを確認できました。ローカルでテストを実行した結果は、オールグリーンでしたが、GitHubにプッシュしたところCIでのビルドが失敗してしまいました。原因を調べたところ、メソッド名で、ひらがなや漢字を使っているにも関わらず、UTF-8ではなく Shift-JISで保存されていることが原因でした。
このようにローカルの環境だけでは、わからない問題も、CIで検知できました。テストコードから、Fizz Buzzの仕様を満たしていることを確認できたので、実行可能なコードを追加して完成です。もし、テストファーストをせず最初から実行可能にしていたら副作用によりテストできないコードになっていたことでしょう。私は、自分が思っているほど完璧ではなくミスをしてしまうということを改めて実感しました。
Fizz Buzzという単純な課題においても、TDDとCIの有用性を示せたと思います。


