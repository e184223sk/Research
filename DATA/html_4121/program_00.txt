
using System;
using System.Linq;
using SerializableCollections;
using UnityEngine;
#if UNITY_EDITOR
using UnityEditor;

#endif

[Serializable]
public class StringSpriteDictionary : SerializableDictionary&lt;string, Sprite&gt;
{
}

[CustomPropertyDrawer(typeof(StringSpriteDictionary))]
public class ExtendedSerializableDictionaryPropertyDrawer : SerializableDictionaryPropertyDrawer
{
}

public class SpriteAtlasAsset : ScriptableObject
{
#if UNITY_EDITOR
    [MenuItem("Tools/CreateSpriteAtlasAsset")]
    static void CreateSpriteAtlasAssetInstance()
    {
        var spriteAtlas = CreateInstance&lt;SpriteAtlasAsset&gt;();
        spriteAtlas.atlasCache = new StringSpriteDictionary();
        foreach (var obj in Selection.objects)
        {
            var assetPath = AssetDatabase.GetAssetPath(obj);![SpriteAtlasInspector.PNG](https://qiita-image-store.s3.amazonaws.com/0/16088/daacc87f-3ef1-fb1c-7495-804062243688.png)

            var sprites = AssetDatabase.LoadAllAssetsAtPath(assetPath).OfType&lt;Sprite&gt;().ToArray();
            foreach (var sprite in sprites)
            {
                spriteAtlas.atlasCache.Add(sprite.name, sprite);
            }
        }

        AssetDatabase.CreateAsset(spriteAtlas, "Assets/SpriteAtlas.asset");
        AssetDatabase.Refresh();
    }
#endif

    [SerializeField] StringSpriteDictionary atlasCache = new StringSpriteDictionary();


    public Sprite GetSprite(string spriteName)
    {
        return atlasCache[spriteName];
    }
}

