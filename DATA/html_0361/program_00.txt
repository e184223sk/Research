class Program
{
    static void Main() { }
    delegate T Version2&lt;T&gt;(T arg); // C# 2 Generics
    void Version3() { Version2&lt;int&gt; f = n =&gt; n; } // C# 3 Lambda
    interface IVersion4&lt;out T&gt; { } // C# 4 covariance
    async void Version5() { } // C# 5 async/await
    string Version6() { return nameof(Version6); } // C# 6 nameof
    bool Version7() { return int.TryParse("3", out _); } // C# 7 discard
    bool Version7_1() { return default; } // C# 7.1 default
    int Version7_2() { return 0x_1; } // C# 7.2 leading digit separator
    void Version7_3&lt;T&gt;() where T : unmanaged { } // C# 7.3 unmanaged generics
    int Version8() { return true switch { true =&gt; 1, false =&gt; 0 }; } // C# 8 switch expression
    object Version9() { return new(); } // C# 9 target-typed new 
}


