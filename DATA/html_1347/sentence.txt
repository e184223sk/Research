私です。お母様とこれを観ている方々、お元気ですか。
ふと「WebView2を試したいなぁ」と思い立って検索してみると、XAMLデザインによる方法はたらふく出てくるのですが、ソースレベルになると極端に情報が薄くなってきます。
偶に見つけてもWinFormsによる方法だったりで残念です。なおソースのライセンスはパブリックドメインとしますから、コピペして自由に使って下さい（名前空間をそのまま使うと私は両手を挙げて喜びを表します、参照エラーには気をつけて）。WebView2をxamlに記載しても、有効なプロパティはせいぜいSourceぐらいで、少なくとも本稿でやりたいことの大半はソースを書くことに成ります。
個人的に*.xaml.csファイルに色々詰めるのが好きでは無い事と、まあまあのソース量になるので麺類にはしたくありません。そこでWebView2をコントロールする主要機能を以下の専用クラスにまとめます。またウインドウタイトル制御はMainWindow.xaml.cs、WebView2の制御はWebView2Controllerと、お仕事の内容を分けておきます。とりあえず必要最低限だとこのぐらい。コメント付けると長くなるので諸々の説明は後記にて。
プログラムの流れを観てみたいのでMainWindowウインドウを実装していく。タイトル通り、xamlは最低限の実装に留めるため、Window以外の要素を挿入しない。DockPanelの子要素にWebView2を追加する事で、ウインドウサイズを自動で合わせてくるので余計なイベントに突っ込まなくて済む。これでデバッグを走らせると各イベントが発生してデバッグメッセージが流れる。初期化成功、CoreWebView2InitializationCompleted
↓
Navigateこの順番で流れている。
そしてブラウザ画面、Googleが表示されるウインドウが立ち上がってくる。CoreWebView2は名前の通り、WebView2のコアに相当するAPI。
しかしそのままで使う事は出ない。備考によるとEdgeブラウザーの起動は重く、時間がかかるらしい。
なのでWebView2インスタンス生成直後のWebView2.CoreWebView2はnullを返すから、そのままでは使えないとの事。WebView2.CoreWebView2を介す処理は、初期化完了まで待つ。そうすることでnullに成らない。待ってあげないと「Microsoft.Web.WebView2.Wpf.WebView2.CoreWebView2.get が null を返しました」と怒られるからだ。初期化完了を待つには、ふたつの方法がある。それぞれの使い方は次項にて。一つの方法としてCoreWebView2InitializationCompletedイベントを使う。
名前の通り、CoreWebView2が初期化完了後に諸々を行うイベント。試しに専用クラスのWebView2Controllerに変更を加えて、どうるなかを確認する。まずは初期化完了を待たずにWebView2.CoreWebView2.Settings.AreDevToolsEnabledを指定する。
falseを渡すことで開発者ツールを無効化するが、もちろん例外が発生して動くことは無い。次にイベントCoreWebView2InitializationCompletedを使う。イベントとして登録したメソッドにさっきの追記コードを移植する。今度は右クリックから開発者ツールがメニューが消えて成功。まず先に専用クラスWebView2ControllerのNavigateメソッドの事について。WebView2ControllerのNavigateメソッドはWebView2.CoreWebView2.Navigateのラッパーで、ブラウザにURLを渡してそのアドレスに遷移してもらうものです。
もう先ほどのでお気づきかと思いますが、これもCoreWebView2を介すので初期化完了を待たなければ成りません。そこでもう一つの方法としてWebView2.EnsureCoreWebView2Asyncを使っています。CoreWebView2の初期化が完了すると次のコードを実行します。
非同期なのでasync/awaitが使われています。WebView2ControllerのNavigateはいつどんなときに呼び出されても安全に動作するよう、このような方法が採られてます。応用自体は探せばまあまああるので適当。
専用クラス、WebView2Controllerを改造して使うので、かいつまむと分からなくなります。xamlのプロパティでは変更できない部分。留意点として、コンテキストメニューの無効化をするとキーによるページの「戻る」「進む」も無効化されます。JavaScriptによるwindow.openや、HTMLの属性target="_blank"、ユーザー操作による新しいウインドウを開かせないようにする。これでどんな手法を採っても新しいウインドウは開かないように成る（Handledは「キャンセル」や「停止」という意味では無い）。
というかソースの注釈やリファレンスになんか書いてあったね。If set to true and no Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs.NewWindow is set for window.open(), the opened WindowProxy is for a dummy window object and no window loads. The default value is false.ちなみにこちらの記事では、ダミーの為にWebView2を生成して、それをe.NewWindowに代入してstopで停止させる手法です。
しかしダミーインスタンスは残り続ける為、リソースの消費も大きく無駄です。新しいウインドウは抑止したいが、ページは遷移させたいのであればe.NewWindowに既存のCoreWebView2を代入する処理に置き換えば良い。本来WebView2のAllowDropはデフォルトでfalseなのですが、明確的に指定してもファイルドロップされると反応してローカルファイルや他のURLに遷移してしまいます。Dropイベントも無反応で、キャンセルできず。代替案として、「#新しいウインドウを抑止する」を参考にしてください。
動作的に新しいウィンドウを生成しようとしてくるので、その辺りで対応できます。CoreWebView2の制約もあるので、少し回りくどいがCoreWebView2.DocumentTitleChangedのラッパーを作る。WebView2Controller側：簡易的なイベントDocumentTitleChangedを作る。これをMainWindow側で登録・処理する。
面倒なので、独自の引数にせず、ドキュメントタイトルのstringをダイレクトに渡す（名前で分かるよね）。MainWindow側：ページのタイトルが書き換わる度にタイトルも変わっているはず。オーバーフローを避ける為に文字数制限付けた方が良いので、各自工夫して欲しい。一行で書く為に、無名関数をラムダ式で書いてるが、色々問題あるので、よいこのみんなは、名前のある関数で書くと良いです。要はキャッシュなどの保存先。一応公式ページのコンセプトに「ユーザーデータフォルダ」の事について書かれてるが、無理矢理翻訳のせいか私の解読力が無いのかよく分からん。WebView2リファレンスの方が詳しいかもしれない。
詳しいリファレンスによるとユーザーデータフォルダの指定方法は二つ。
個人的にコードがまとまる方を選びたいので本項ではCoreWebView2CreationPropertiesクラスを使う事とする。他はWebView2リファレンスを参照して欲しい。CoreWebView2CreationPropertiesインスタンスを生成し、それのUserDataFolderプロパティにユーザーデータフォルダのパスを指定する。
あとはWebView2.CreationPropertiesにCoreWebView2CreationPropertiesをセットする。例の場合だと、\Users\&lt;ユーザー名&gt;\AppData\Local\Tempの中にwv2フォルダが作成され、CoreWebView2の初期化後、その中に色々ぶち込まれる。注意点としてマウスカーソルで選択したテキストを抽出する。
ドキュメントに介入するAPIはほとんど無く、基本JavaScriptを駆使することに成る。CoreWebView2.AddScriptToExecuteOnDocumentCreatedAsyncを使ってテキストを抽出するJavaScriptを登録する。一度登録しておけばページ遷移しても消えることは無い。返り値のIDは例え使わなくても保存をする。CoreWebView2.WebMessageReceivedイベントを使ってパッシブに受け取る。受け取ったメッセージが勝手にJSON化されるのでデシリアライズなりしておけば良い。試しに何かの文字列を選択するとデバッグメッセージに「{"Type":"SelectedText","Text":"【選択した文字列】"}」と表示される。JavaScriptの部分が圧縮されて見にくいので以下に書き出す(コードが少しだけ違いますができることは同じです)。このJavaScriptではユーザー操作によるマウスの左ボタンを上げたときイベントが発生します。
もし、テキストが選択されてたなら選択範囲の文字列をwindow.chrome.webview.postMessage()で送信しています。selectionchangeイベントを使っても良いが、選択される度にメッセージを送信しようとするのでmouseupイベントが使われている。あと開発者ツールのコンソールログにも選択された文字が表示されます。その他は面倒なので省くから気になった方は参考見て。QiitaでWebView2に関する記事は少なく、なんか回りくどい感じがあったので自分で調べることにしました。というより公式に載ってない情報がちらほらあるような…。（2021年8月8日追記）今までおまけ程度だった「適当な応用集」を気が向いたら追記していくスタイルでしたが区切りを付けたいのでいったん終了とします。読んで頂きありがとうございました。リファレンス自体に「実行順位」とは書かれてない（利便上そうのように記載しているだけ）。リターン章にて、その旨が記載されているのでそちら参照して下さい。また留意点として欲しい。 ↩


