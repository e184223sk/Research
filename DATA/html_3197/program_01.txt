
using Prism.Mvvm;
using Reactive.Bindings;

namespace prism_test.ViewModels
{
    public class MainWindowViewModel : BindableBase
    {
        private string _title = "Prism Application";
        public string Title
        {
            get { return _title; }
            set { SetProperty(ref _title, value); }
        }

        /// &lt;summary&gt;
        /// 進捗
        /// &lt;/summary&gt;
        public ReactiveProperty&lt;int&gt; prog { get; set; } = new ReactiveProperty&lt;int&gt;();

        /// &lt;summary&gt;
        /// コマンド
        /// &lt;/summary&gt;
        public ReactiveCommand DoHeavyProc { get; }

        /// &lt;summary&gt;
        /// View処理へのデリゲート
        /// &lt;/summary&gt;
        public System.Action UpdateView;

        /// &lt;summary&gt;
        /// コンストラクタ
        /// &lt;/summary&gt;
        public MainWindowViewModel()
        {
            prog.Value = 0;
            this.DoHeavyProc = new ReactiveCommand().WithSubscribe(this.buttonpush);
        }

        /// &lt;summary&gt;
        /// ボタン押下
        /// &lt;/summary&gt;
        public void buttonpush()
        {
            prog.Value = 0;
            for(var i = 0; i &lt; 100; i++)
            {
                prog.Value++;

                // Viewを更新
                UpdateView();

                System.Threading.Thread.Sleep(20);
            }
        }
    }
}


