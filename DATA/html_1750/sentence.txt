More than 1 year has passed since last update.Prism7.2 から IDialogService が実装されてダイアログ表示がいい感じになった
しかし、通知用や確認用などの汎用的なダイアログをプロジェクトごとにいちいち作るのも面倒くさい
なので IDialogService で呼び出せる一般的に使いそうなダイアログを作ってライブラリ化したPrism.CommonDialogPack

IDialogService 自体の使い方は公式ドキュメントを読むのが早い。
ここでは Prism.CommonDialogPack の使い方だけを記述する。まずは App でモジュールの登録と独自に作った IDialogService の登録を行う。Prism が提供してくれている DialogService は Window の Style を DialogWindow を介してセットしているが、Window に単に代入するような実装になっているのでライブラリにした時に使う側から Style を指定することができない。
Prism.CommonDialogPack では Dialog の呼び出し側から Style を指定できるようにするため、StyleableDialogService という独自の IDialogService 実装を作っている。
違いはConfigureDialogWindowPropertiesメソッドだけで、ViewModel が IStyleableDialogAware だった場合は Style をバインディングするようにしている。
(ConfigureDialogWindowPropertiesメソッドに virtual がついていないのでもとの DialogServiceを模倣している)IStyleableDialogAware は IDialogAware に WindowStyle や Height, Width などを追加したインターフェイスで、ダイアログとして表示する View の ViewModel に実装することでライブラリの呼び出し側からの Style 指定などを可能にしている。RegisterRequiredTypes では標準の IDialogService の実態を DialogService ではなく StyleableDialogServiceにするようにコンテナに登録している。呼び出しは IDialogService を介して行う。こんな感じで通常の DialogService と変わらない。
呼び出せるダイアログの名前は DialogNamesに、
指定できるパラメーターの名前はDialogParameterNamesに、
受け取れるパラメーターの名前はDialogResultParameterNamesに定義してある。
パラメーターの受け取りは FileSelectDialog、FolderSelectDialog、FileSaveDialog でのみ可能で、コールバックで受け取れる IDialogResult の Parameters プロパティから取得する。各ダイアログで指定できるパラメーターは以下の通りOverwriteConfirmationMessageFunc にはファイルのフルパスが渡されるパラメーターで渡せば FileSelectDialog, FolderSelectDialog, FileSaveDialog のアイコンをカスタムできる。パラメーターで渡せば FileSelectDialog, FileSaveDialog で表示するファイルの拡張子にフィルターをかけることができる。使い方はこんな感じで、Text プロパティの文字列が ComboBox に表示され、Extensions プロパティの文字列が実際にフィルターする拡張子となる。
Extensions が空だとフィルターしない。
FileSaveDialog の場合は保存するファイルの拡張子を指定する意図で使用するため、Extensions を複数指定しても最初のものだけフィルターされる。パラメーターで渡せば ExplorerBase の各テキストをカスタムできる。ダイアログの呼び出しを簡素化した拡張メソッドを定義したクラス。これ自体は IDialogService の機能なので、やり方も同じ。
ダイアログに使いたい Window にコードビハインドでIDialogWindowを実装する
IDialogWindowはIDialogResultプロパティを持っているだけあとはRegisterDialogWindowでコンテナに登録するPrism.CommonDialogPack にはサンプルもつけているので、詳細はそっちを見ればわかるかも。


