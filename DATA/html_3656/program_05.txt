
using System.Security.Claims;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using Newtonsoft.Json;

/// &lt;summary&gt;
/// トークンバリデーター。
/// &lt;/summary&gt;
/// &lt;typeparam name="TPayload"&gt;ペイロードの型&lt;/typeparam&gt;
public class MsJwtValidator&lt;TPayload&gt; : ITokenValidator&lt;TPayload&gt;
{
    /// &lt;summary&gt;
    /// コンストラクタ
    /// &lt;/summary&gt;
    /// &lt;param name="key"&gt;RSA公開鍵&lt;/param&gt;
    internal MsJwtValidator(RsaSecurityKey key)
    {
        m_Key = key;

        m_LifetimeValidator = new LifetimeValidator((nbf, exp, token, parameter) =&gt;
        {
            return ValidateLifetime(nbf, exp, out TokenState state, out string message);
        }
        );
    }

    private readonly RsaSecurityKey m_Key;
    private readonly JwtSecurityTokenHandler m_TokenHandler = new JwtSecurityTokenHandler();
    private readonly LifetimeValidator m_LifetimeValidator;

    /// &lt;summary&gt;
    /// 妥当と見なす発行者を取得または設定します。
    /// &lt;/summary&gt;
    public string[] ValidIssuers { get; set; }

    /// &lt;summary&gt;
    /// 妥当と見なす利用者を取得または設定します。
    /// &lt;/summary&gt;
    public string[] ValidAudiences { get; set; }

    /// &lt;summary&gt;
    /// 指定されたトークンを検証します。
    /// &lt;/summary&gt;
    /// &lt;param name="token"&gt;トークン文字列&lt;/param&gt;
    /// &lt;param name="claim"&gt;トークンから取り出したクレーム情報&lt;/param&gt;
    /// &lt;param name="payload"&gt;トークンから取り出したペイロード&lt;/param&gt;
    /// &lt;param name="tokenState"&gt;トークンの状態&lt;/param&gt;
    /// &lt;param name="errorMessage"&gt;エラーメッセージ&lt;/param&gt;
    /// &lt;returns&gt;トークンが妥当であるかどうか&lt;/returns&gt;
    public bool ValidateToken(string tokenString
        , out IClaim claim
        , out TPayload payload
        , out TokenState tokenState
        , out string errorMessage
    )
    {

        TokenValidationParameters parameters = new TokenValidationParameters();
        parameters.IssuerSigningKey = m_Key;
        parameters.ValidateIssuerSigningKey = true;

        // 発行者を検証するかどうか
        if (ValidIssuers != null &amp;&amp; ValidIssuers.Length &gt; 0)
        {
            if (ValidIssuers.Length == 1) { parameters.ValidIssuer = ValidIssuers.First(); }
            else { parameters.ValidIssuers = ValidIssuers; }
            parameters.ValidateIssuer = true;
        }
        else
        {
            parameters.ValidateIssuer = false;
        }

        // 利用者を検証するかどうか
        if (ValidAudiences != null &amp;&amp; ValidAudiences.Length &gt; 0)
        {
            if (ValidAudiences.Length == 1) { parameters.ValidAudience = ValidAudiences.First(); }
            else { parameters.ValidAudiences = ValidAudiences; }
            parameters.ValidateAudience = true;
        }
        else
        {
            parameters.ValidateAudience = false;
        }

        // 有効期限を検証するかどうか
        parameters.ValidateLifetime = true;
        parameters.LifetimeValidator = m_LifetimeValidator;

        try
        {

            ClaimsPrincipal claims = m_TokenHandler.ValidateToken(tokenString, parameters, out SecurityToken token);

            // クレーム情報
            claim = new MsJwtClaim()
            {
                ID = GetClaim(claims, "jti),
                Audience = GetClaim(claims, "aud")
            };

            // ペイロード
            string payloadJson = claims.FindFirst("userpayload")?.Value;

            if (string.IsNullOrEmpty(payloadJson))
            {
                payload = default(TPayload);
            }
            else
            {
                payload = JsonConvert.DeserializeObject&lt;TPayload&gt;(payloadJson);
            }

            tokenState = TokenState.Valid;
            errorMessage = null;
            return true;

        }
        catch (SecurityTokenInvalidLifetimeException ex)
        {
            // 有効期限が不正
            claim = null;
            payload = default(TPayload);
            if (ValidateLifetime(ex.NotBefore, ex.Expires, out tokenState, out errorMessage))
            {
                // NotBefore でも Expires でもない
                tokenState = TokenState.Invalid;
                errorMessage = "The token is invalid.";
            }
            return false;
        }
        catch (SecurityTokenInvalidIssuerException)
        {
            // 発行者が不正
            claim = null;
            payload = default(TPayload);
            tokenState = TokenState.Invalid;
            errorMessage = "The issuer is invalid.";
            return false;
        }
        catch (SecurityTokenInvalidAudienceException)
        {
            // 利用者が不正
            claim = null;
            payload = default(TPayload);
            tokenState = TokenState.Invalid;
            errorMessage = "The audience is invalid.";
            return false;
        }
    }

    /// &lt;summary&gt;
    /// 指定されたクレームの値を取得します。
    /// &lt;/summary&gt;
    /// &lt;param name="claims"&gt;クレーム情報&lt;/param&gt;
    /// &lt;param name="key"&gt;キー&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    private string GetClaim(ClaimsPrincipal claims, string key)
    {
        foreach (Claim claim in claims.Claims)
        {
            if (string.Compare(claim.Type, key, true) == 0)
            {
                return claim.Value;
            }
        }
        return null;
    }

    /// &lt;summary&gt;
    /// 有効期限を検証します。
    /// &lt;/summary&gt;
    /// &lt;param name="nbf"&gt;トークンが有効になる日時&lt;/param&gt;
    /// &lt;param name="exp"&gt;トークンの有効期限&lt;/param&gt;
    /// &lt;param name="state"&gt;トークンの状態&lt;/param&gt;
    /// &lt;param name="message"&gt;エラーメッセージ&lt;/param&gt;
    /// &lt;returns&gt;妥当であるかどうか&lt;/returns&gt;
    private bool ValidateLifetime(DateTime? nbf, DateTime? exp, out TokenState state, out string message)
    {
        DateTime now = DateTime.Now.ToUniversalTime();

        if (exp.HasValue &amp;&amp; exp.Value &lt; now)
        {
            state = TokenState.Expired;
            message = "The token is expired.";
            return false;
        }

        if (nbf.HasValue &amp;&amp; nbf.Value &gt; now)
        {
            state = TokenState.NotBefore;
            message = "The token is not yet valid.";
            return false;
        }

        state = TokenState.Valid;
        message = null;
        return true;
    }
}

