More than 1 year has passed since last update.Taskってなんだか小難しい割に初心者向きの、というかTask入門的な記事が少ない気がする。というか少ないです。以前書いた、【C#】Cドライブ以下にある全てのファイルパスを非同期かつIEnumerableに取得してみたという記事ではかなり丁寧に書いたつもりだったが「コピペで動くようなものを書け」という要望があったのでこの記事ではコピペで動く、そして分からないが分かるをコンセプトに書いてみました。同期の後輩がこのような事で悩んでいる、という事を聞きました。WinFormでTimerイベントを使わずに1秒毎にファイルの中身を取得したい。
Timerイベントを使いたくない理由としては何故かウィルスソフトに過剰検知されてしまうからで、Taskを使って実現してみたい。だが、イマイチ書き方がわからない…。おｋ把握。つまり、こういう事ですね。実行画面
コメント無しでも分かる方はきちんと理解できていると思います。
解説は最後にして、一旦は根本的な所から見直していきましょう。さて、そもそも論、何故Taskが必要なんでしょうか。この記事を読んでいるという事はふんわりだとしてもなんとなく理解しているはずで、
「Taskを使えば画面が固まらなくなる」という認識で大丈夫だと私は思っています。
上記のプログラムも、画面を固めずにファイルの中身を取得したいと言い換えられますしね。色々な要因はあると思うのですが、C#初心者からすれば前提となる知識が圧倒的に足りていないという要因を個人的には推したい。
というのもTaskに関する記事はあっても、そこで記述されている事がなんなのかを説明されていない事が多いです。自分なりに考えた結果、以下の図がTaskの最低限の構成要素です。下から知識を積み上げていけば、自然とTaskもわかるはず。
下の階層から積み上げていきましょう。
List&lt;T&gt;とかでよく見るアレ。なんかわかるようでわからん。そこで例を出してみます。色んな型に対応できるような、2つの値を比較して大きい値を返すメソッドをつくってね( ˇωˇ )( ˇωˇ )「正気か？」
ジェネリクス使ってやれば、あらゆる型に対応可能。まあ要は、&lt;T&gt;に対して型はなんでも入れれますよーって認識でよい。プログラムにおいて、命名する事は悪です。
一々処理に名前つけていったら疲れちゃうので匿名でメソッドを処理できるようにしよう！そうしよう！値とかじゃなくて、メソッド自体を持たせられるようにしようぜ！というので生まれたのがDelegate。イベントに対してイベントハンドラを割り付けるということは頻繁にやると思うのですが、delegateはメソッドそのものなので、イベントに対してのイベントハンドラという役割が担えます。なので、基本的には以下のような使い方をします。あんまりdelegateって見かけないかもね。こっからがちょっとややこいです。
Taskを色々な記事で見かける中でなんかよくわかんねーけどこう書けばいいんやなー。というのがこれ。Task.Runメソッドに、なに渡してんの？
これ、定義済みデリゲートを渡しています。なんじゃそら？Delegateの宣言さえめんどくせえ、もっと簡単に書こうぜ！
で考えられたのがAction&lt;T&gt;とFunc&lt;T, TResult&gt;
こいつらを定義済みデリゲートといいます。
よく使うやつは使いやすいように定義しこうぜってことですね。とりあえず、Action&lt;T&gt;かFunc&lt;T, TResult&gt;を渡せばいいようなので愚直にAction&lt;T&gt;を渡してみる。書いてみる。こういう風にTask.Run(new Action(WriteDateTimeNow));
とかTask.Run(() =&gt; WriteDateTimeNow());
とか名前のついているメソッドも勿論渡せます。
渡せますが、あーでも、メソッドに名前つけたくないよー！！！
はい。もはやdelegate型の変数宣言さえ要らずに匿名メソッドが書けるようになりました( ˇωˇ )
んで、Action&lt;T&gt;とFunc&lt;T, TResult&gt;って単語はよく聞くけどなんか違いわからんのや…(´･ω･｀)
って方、安心してください。違いは、「戻り値が void か否か」だけです。戻り値がvoid型ならAction&lt;T&gt;で、
戻り値がTResult型ならFunc&lt;T, TResult&gt;なだけ。なるほど、よくわからん！な方の為に、この()の中には、本来パラメーターを指定します。
空の括弧は何のパラメーターも送ってないわけです。つまり、戻り値がvoid型でよい場合に使うのがAction&lt;T&gt;で、戻り値がvoid型以外の場合に使うのがFunc&lt;T&gt;です。
業務的に使う場合は、名前空間を汚さないように使ったりしますね。非同期処理ってなんなんでしょうね。逆に同期処理ってなんでしょう。
UIスレッドで処理する事を同期処理、
UIスレッド以外 (例えば、スレッドプール)で処理することを私は非同期処理、だと認識しています。
もう少し言うと、コールバック処理をさせていたら非同期処理、ということです。まず、スレッドプールへの処理のぶっこみ方法はこれ。はい、何回も出てきています。これを書けば何かしらの処理はスレッドプールにぶっこまれます( ˘ω˘)
ちょいちょい出てくるスレッドプールって何なんでしょう。スレッドプールは、既に作られたスレッドを効率よく使いまわす仕組みの事を言っています。
というのも、スレッドを立てる事は非常に時間が掛かるようなのでそこをパフォーマンスよく処理してやる為に考えられたものですね。なのでこのTask.Runはスレッドを作るんではなくて、既存のスレッドにコールバックをぶちこんでるだけ、という訳です。で、まあパフォーマンスがよくなったり画面が固まらなくなるのは嬉しいのだけど、UIを更新できるのはUIスレッドだけなんですわ。1 ～ 10000までをカウントアップしながら出力するプログラムを愚直に書いてみる。これ、期待する結果は得られないんです。
何故なら、全てを同期処理で書いてしまっている為。
全部が終わらないと描画がされない、つまり、何回やったって10000としかでない。じゃあ非同期で書けばよいのでは？
残念、怒られちゃう。
なんでか。だってUIを更新できるのはUIスレッドだけだから。
つまり、どうかけばいいのさ？
結構簡単、Invokeメソッド内でUIの更新を行ってやればよいだけ。
諸々の処理はスレッドプールなど、他のスレッドに任せてよいのだけど、UIへの更新はUIスレッドからしか出来ない事は覚えておいた方が捗ります。スレッドセーフについてはまああんまし関係ないというか、無い事もないですがどちらかというと並列処理に絡んでくるので今回はスルーします。漸く本題、Taskについてさらっといくよ、さらっと。
問1. 以下のコードを実行した場合、出力結果はどうなるでしょーか。答えは、A
C
Bです。ほげ?
問2. んじゃこれなら？答えは、A
B
Cです( ˇωˇ )問1ではAを出力した後にTaskを作る(つくるだけ)、次にCを出力してTaskが実行される。
問2ではAを出力した後にTaskを作ったうえで待つ、次にCを出力して終了。ここらへんごちゃってる人多いと思うけどまとめるよ。
①awaitキーワードを付けたらその処理が終わるまで待ってくれる。
②awaitキーワードを使用するのであれば、asyncキーワードをメソッドの戻り値の前につけてやる
③awaitキーワードで待てる処理はTask/Task&lt;T&gt;型このページを開いた時には分からなかったとしても、ここまで読み進めてきたらなんとなく読めるようになったのではないのでしょうか。
ちなみに、async/awaitキーワードが使えるのは.NET Framework4.5以上をターゲットフレームワークに指定しているからです。色々ごちゃごちゃ書いたんですが、Taskを理解する為には多くの前提知識を必要としているなとは常々感じていました。じゃあ何が分かっていればTaskの理解へと繋がるのか？ということを振り返ってみて、それを形容化してみました。ダダダダと書いたので分かりにくい点などあれば、是非ご指摘をお願いします。


