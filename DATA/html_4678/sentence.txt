More than 1 year has passed since last update.CentOS事前準備編（Linux側の準備）の続きで
こちらでは
「開発環境の準備～デプロイ、Linux上で実行するまで」
の部分の流れを超ざっくり追います。（事前準備編でサーバの用意ができている状態から、）
開発環境となるVSCodeを用意してデモプロジェクトを発行、
それをビルドしてLinuxに持っていき起動します。
それをApacheのリバースプロキシでアクセス可能にするまでの開発デプロイ編です。
（前回がインフラチームの作業だとすれば、こちらは開発者が担当する部分かな）環境はWindows(10)です。# Portable版(.zip)もあるでよ。私はこれ。これだけです。# 予め用意されているテンプレというかデモプロジェクトがありますので、
　それを取得してビルド（publish）して持っていきます。作業用フォルダを作っておき、VSCodeを立ち上げて開きます。
その状態で、ターミナルで以下のコマンドを打ち、プロジェクトを展開します
（ターミナルはメニューかCtrl+@で開きます）これでフォルダにファイルができあがります。
ライブラリがないよ、とかのポップアップが出たら「Yes」で勝手に入ります。.csprojのある場所に移動して、runすると動きますエラーなどが出なければ http://localhost:5000/ でLISTENしてるよって出るので、アクセス。
正常にデモサイトが見れたらOKです。なお、ポート番号を変更する場合や、Linux上で動作させる場合にhttpsを使用しない場合
下記ファイル、下記の箇所のapplicationUrlの部分も書き換えます。
（localhostはそのままでも変えても大丈夫。今回は下記で行きます）ポート番号を変える場合
ポート番号を変える場合は、上記のapplicationUrlだけ変えても
CentOS展開時に反映されなかったため、以下も追記します。これをpublishして持っていけば動くんですが….NET Webは上記のように、
ポート番号に対して独自のWebサーバ（Kestrel:ケストレル）が起動します。
# なので、1プロジェクトごとにポート番号が要ります。
　（ちなみにこのポート番号はApacheに経由してもらうため、ファイアウォールの設定は不要）Linux側ではこれをApacheのリバースプロキシで経由して見せるわけですが、
素直に転送するとドキュメントルート直下で動くようなイメージになります。サブドメインなどを切れる場合などは問題ありませんが、
もしそうでない場合で
例えばディレクトリごとにプロジェクトを起動したい、という場合などは
あらかじめプロジェクト内のパスも、それを想定したパスにしておく
# ドキュメントルート直下にならないので。
といった対応が必要です。そんな場合のナレッジも兼ねて、
私もそう詳しくないのですが、あらかじめあるディレクトリ以下にする方法を載せておきます。※ app.UseStaticFiles() より前に記載すると、静的ファイル参照時の起点も同じディレクトリからになります。
　 app.UseStaticFiles() より後に書けばパスの指定がかからないため、Kestrelのドキュメントルート起点になります。このように、パスとKestrel側の（プロジェクト側の）ポート番号が異なっていれば
Apacheへのアクセスは80番のみ（1つのポートのみ）でも
それぞれのパスに対応したプロジェクトにアクセスさせることができます。外部のサーバに合わせたRID（ランタイム識別子）を指定することで、その環境用にビルドできます。
RIDのカタログはこちら※ ちなみにbuildコマンドもありますが
　 ASP.NETとかだとbuildすれば他の環境でも動きましたが
　 .NET Coreでは自環境で動く最低限しかファイルが用意されないので
　 buildしたものを持って行っても動きません。\bin\Debug\netcoreapp2.1\centos.7-x64\publish にファイルができます。
できたdll達をsambaで持っていくことでサーバへの展開は完了です。
（持っていくときは単純に公開するパスに合わせて配置の想定です）Windowsでrunした時と同じように、とりあえず起動確認だけしておきます。
Linuxにログインして、先ほど展開したフォルダまで移動し、dotnetコマンドでメインのdllを実行します。runしたときと似たようなのが出て、待機状態になります。
この状態では外部からアクセスできないので、
エラーが出なければとりあえずOKです。都度手動起動して走りっぱなしにしておくわけにもいかないので、
サービスとして登録して起動します。ファイルの内容はこんな感じで、最低限必要なのはパスの部分の調整ですこうして作ったファイルをサービスとして登録します。最後に、外部からのApacheへのアクセスをKestrelに転送するため
リバースプロキシを設定します。重要なのはProxy…の部分で、他のは前回設定した内容とかです。
今回はApacheで受けたパスを5000番ポートにそのまま流す形です。これでアクセスしてみて見ることができれば、とりあえずは公開完了！になります。お疲れさまでした！！


