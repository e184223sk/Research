D言語から.NET APIを利用したい場合に、どうすればよいかを考えてみました。
何かの参考になればと思います。前回の記事で、D言語でのカレンダー表示プログラムを実装しました。
引き続き、旧暦カレンダーを実装してみたいと思います。
.NET APIには、JapaneseCalendarクラスやJapaneseLunisolarCalendarクラスが用意されており、これらを使えば、旧暦や和暦の計算を一から実装せずに済みそうです。私が調べた限り、C++/CLIラッピングを経由する方法が簡単だと思いました。
今回はこの方法を採用します。※参考までに、記事を書くために調べた情報リンクを最後に掲載します。
　C#でDLLを作成し、D言語から呼び出す方法です。D言語で実装する前に、C#で旧暦や和暦を取得する処理を実装しました。
実行時にパラメータなしだと今日の日付の旧暦や和暦、年月日パラメータを指定するとその日付の旧暦や和暦を表示します。Window10には、C#コンパイラ(csc.exe)が標準インストールされています。
どのバージョンがどのフォルダにインストールされているかは、それぞれの環境に依存します。
私の環境でのコンパイル、実行例を例示します。
旧暦には、うるう月（閏月）というものが存在します。GetLeapMonthを使って、その年のうるう月を算出し、月を補正します。
実行結果では、月を補正して正しく表示できています。※旧暦カレンダーで検証
干支（天干、地支）は、その年の干支を取得しています。月や日にも干支が存在するそうです。次に、C++/CLIで旧暦や和暦を取得する処理を実装しました。
C++/CLIに関する日本語での情報は、それほど多くない印象なので、参考になればと思います。
前準備１のC#のソースコードを移植したイメージです。
実行時にパラメータなしだと今日の日付の旧暦や和暦、年月日パラメータを指定するとその日付の旧暦や和暦を表示します。C++/CLI特有のものとして、演算子 (^)があります。ハンドル宣言子( ^ は "hat") は、オブジェクトがアクセス不可能であるとシステムが判断したときに、宣言されたオブジェクトが自動的に削除されることを意味する型指定子をに変更します。オブジェクト演算子 (^) へのハンドル (C++/CLI および C++/CX)より引用また、.NET APIのクラス生成では、gcnewを使います。マネージド型 (参照型または値型) のメモリは gcnew によって割り当てられ、ガベージ コレクションによって解放されます。ref new、gcnew (C++/CLI および C++/CX)より引用私の環境には、Visual C++ ビルドツール 2019がインストールされています。
※参考：Visual C++ ビルドツール 2019 インストール手順VS2019用 x64 Native Tools コマンドプロンプトを起動します。
共通言語ランタイム (CLR) 機能を使用するために、コンパイルオプション/clrをつけてコンパイルします。旧暦としては、令和は3月27日から始まるようです。※旧暦カレンダーで検証前準備が長くなりましたが、ここからが本題です。
.NET APIを呼び出すためのC++/CLIラッピング処理の実装例です。
旧暦、和暦の取得結果をstruct JCALにセットするシンプルな関数です。
D言語から呼び出せるように、extern "C" __declspec(dllexport)属性を付与しています。次にD言語でC++/CLIラッピングを呼び出し、旧暦、和暦を表示するプログラムの実装例です。
取得したい情報をstructで定義、メモリを確保しC++/CLIに渡しています。
pragma(lib, "JCalDll")とextern (Windows)～を書くだけで、C++/CLI側の関数を呼び出せるので、思っていたより簡単に実装できました。実行時にパラメータなしだと今日の年月で処理します。argsパラメータで年月を指定することも可能です。string line1には、全角文字が各日付ごとに1文字含まれます。このため1日の表示幅が6文字となります。
新暦の日付で2文字、半角スペース1文字、六曜表示または全角スペースで1文字、半角スペース1文字、|の1文字の順で合計6文字です。string line2はすべて半角で、1日の表示幅が7文字となります。
旧暦の年月で5文字、半角スペースまたはうるう月は*で1文字、|の1文字の順で合計7文字です。string line0は、横線-です。line0 line1 line2を7日ごとに区切って改行するためにchunks、交互に表示するためにroundRobinを使います。
chunks
roundRobinVS2019用 x64 Native Tools コマンドプロンプトを起動します。
C++/CLIコンパイル時に、オプション/clrと/LDを付けます。JCalDll.libとJCalDll.dllが生成されます。
JCalDll.libは、D言語ソースのコンパイル時に必要です。JCalDll.dllは、oldcal.exe実行時に必要です。dmdでのコンパイル時は、64bitコード生成のためにオプション-m64をつけます。
ldc2をインストールしていれば、ldc2 oldcal.dでもOKです。表示される日本語の文字コードはUTF-8なので、先にchcp 65001を実行してください。
Shift-JISで日本語出力したい場合は、以前紹介した通り、文字コード変換処理をソースコードに加える必要があります。
紹介情報1
紹介情報2私の環境のコマンドプロンプトでは、Cicaフォントを使っています。
このため、実行結果では全角スペースが四角の枠で表示されています。これで、自分の誕生月の旧暦カレンダーも見られそうです。
ただし、JapaneseLunisolarCalendarクラスのGetLeapMonthの仕様で、西暦1960年1月27（旧暦の1959年）以前のうるう月を取得しようとするとExceptionが発生するため、西暦1960年2月以降の旧暦カレンダーしか表示できません。上限は西暦2049年12月です。
JapaneseCalendarクラス
JapaneseLunisolarCalendarクラス
オブジェクト演算子 (^) へのハンドル (C++/CLI および C++/CX)
ref new、gcnew (C++/CLI および C++/CX)C#のメソッドをC++から呼ぶ方法
C#をC++/CLIでラップしてC+＋アプリから呼ぶ六曜・月齢・旧暦カレンダー
年・月・日の干支
六曜はどのように決まるのか？六曜の計算方法は？
c#で六曜の計算C++/CLIラッピング入門
C++のモジュールからC#のDLLを呼び出してみる
C++からC# DLLを直接利用する方法Calling-NET-from-D


