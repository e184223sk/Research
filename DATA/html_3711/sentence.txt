ASP.NET Core MVC の MVC アーキテクチャに Identity を組み込んで認証機能を追加します。
Visual Studio で提供される MVC + Identity のテンプレートでは MVC に Razor Pages を追加する形になっていて気持ち悪い...全部 MVC に組み込みたい！ということでこのようなことをやります。
開発環境は Visual Studio for Mac です。認証機能付きの簡単な ToDo アプリを作ってみます。
仕様は以下のようにします。web アプリケーション (MVC), .NET Core3.1, 認証なし, と選択していきます。

必要になるものをあらかじめインストールしてしまいましょう。
以下の 6 つをインストールします。.NET Core 3.1 でやってるので、各パッケージのバージョンも 3.1.x で設定しておきます。各ユーザーの認証情報はデータベースに格納されるので、まずはデータベースを使えるようにするところから。
普通にデータベース作るだけなら、DbContext を継承したクラスを作ればいいのですが、Identity で使うデータベースコンテキストは IdentityDbContext を継承します。このクラスには Users とか、認証情報を格納する DbSet がすでにプロパティに入っているので、継承さえしてしまえば OK です。ここがややこしい...ぶっちゃけおまじない状態やることは 3 つ。ConfigureServices に以下のようなコードを追加します。services.AddDefaultIdentity&lt;IdentityUser&gt; で、ユーザー情報として使うクラスを設定します。ここではデフォルトの IdentityUser を使っていますが、IdentityUser を継承したクラスでも設定できます（詳しくはこのへんを見ると良い）
Identity の設定はこれを見れば良い。app.UseAuthentication()を app.UseRouting() と app.UseAuthorization() の間に入れます。これで、詳しいことはよくわからんが、HTTP リクエストが認証ミドルウェアを通るようになるらしい。さてここからバシバシとコードを書いていくわけですが、ここまでくれば普通の MVC の考え方を使っていけばいいです。
つまり、Identity の Model, View, Controller を作っていきます。ログイン画面とアカウント登録画面を作って、それぞれにフォームを追加するだけ。
例えばログイン画面はこんな感じView からフォームで post されたものを格納できれば良いです。ここはちょっと普通の Controller と違う部分が出てきます。というのも、ここでログインしたりログアウトしたりという処理を行うからです。
まずはコンストラクタの引数で UserManager と SignInManager のインスタンスを受け取ります。これらはそれぞれ、リクエスト元のユーザー情報を取得するインスタンス、ログイン関係の処理を行うインスタンスです。これらを使って、ログイン、ログアウト、アカウント登録を行っていきましょう。これでログイン処理を行い、その結果が result に格納されます。ログインの成功・失敗によってリダイレクト先を変えたりできます。これだけ！こっちは userManager を使って行います。ユーザーインスタンスとパスワードを引数に入れて登録です。これも成功したかどうかが result に入れられます。さて、これにて認証機能は実装できたので、あとは ToDo の CR(U)D を実装していくだけですね。
ところが、仕様をもう一度確認してみると各アカウントが登録するタスクは独立しているとあります。
これは、ToDo モデルにユーザー ID を持たせることで実装できそうです。本当は UserId を外部キーにした方がいいんですけど、ここでは省略。さて、あとは Controller で ToDo モデルに UserId を渡すようにすれば OK です。Controller ではユーザーの情報を以下のようにして取得することができます。このように userManager からユーザーの情報を取得できます。UserManager インスタンスは、IdentityController でやったのと同様に、コンストラクタの引数で受け取れます。
できた〜！
ということでコードをこちらにあげています。参考にしてみてください！ぶっちゃけ Identity は高機能すぎて使いこなせてないです...ちゃんと勉強しなきゃー


