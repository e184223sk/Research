C#における(≒.NETにおける)インタフェースの命名パターンを個人的に整理するとともに、それぞれのインタフェースの役割と存在意義を考えてみます。単一のメソッドを定義するインタフェースはこのように命名されることが多いです。
『〇〇できる』の意味のインタフェースですので、メソッドもそれに応じたものを持ちます。動詞と同名のメソッドを1つだけ持つパターンです。
個人的な見解ですが、このパターンがインタフェースの基礎である、と考えるとインタフェースそのものの理解がしやすいと思います。別のオブジェクトを取得するメソッドを1つだけ持つパターンです。
取得したオブジェクトは後述のサブパターン2-2のインタフェースを持ちます。
動詞で表される操作が複雑な場合に利用されます。『〇〇する者』を意味するインタフェースです。
サブパターンによって性質が少し異なります。動詞と同名のメソッドを1つだけ持つパターンです。
サブパターン1-1に似ていますが、動詞の対象が別オブジェクトであることが大きく違います。メソッドが複数含まれているパターンです。
複数のメソッドを組み合わせて、1つの機能を実現します。
操作対象から予め操作を任されている、とも取れます。名詞に対応する標準的なクラスの操作を定義したものです。
このパターンのインタフェースは良く設計されていると強力です。ちなみに、LinkedList は ICollection&lt;T&gt; は実装するけれど、 IList&lt;T&gt;は実装していません。このあたりも掘り下げてみると面白そうですね。さて、各パターンを使った自作インタフェースの例を挙げることで、想像の幅を広げてみましょう。サブパターン1-1　はシンプルですね。この例のほかにも、動物を例にしたIFlyable(飛べる)インタフェースなんかも例えに向いています。サブパターン2-1 もシンプルです。メソッドが引数を持つのが特徴ですね。サブパターン1-2,2-2 はイメージを膨らませるために、合わせて作ってみました。
「テレビ」と「リモコン」みたいなイメージが個人的にはしっくりきます。
一つのテレビに対して複数のリモコンを作れるのは、少し感覚が違うかもしれませんね。より良い例えを思いついたら更新します(^^;パターン3 はメソッドが多いパターンで、教科書的な説明ではこのパターン3が使われることも多いです《IList&lt;int&gt; list = new List&lt;int&gt;();のようなパターン》
一方で、このパターンで説明すると、インタフェースの意義は分かりにくかったりします。もしあなたがオブジェクト指向言語の教育係になったなら、このパターンではなく、サブパターン1-1のようなインタフェースを例として挙げることをお勧めします。ちょっと否定的な書き方をしてしまいましたが、それでもDIなどで出番が多いのがこのパターンです。上手く付き合ってインタフェースのスペシャリストになりましょう。以下、良い例とは言い難いのですが、例を示しておきます。上記以外の例もあるとは思いますが、大雑把な分類としては有効でしょう。今回は省略したパターン
今後何かで記事を書くかもしれません…命名パターンごとに、少しずつ性格が違うインタフェースであることが分かります。標準のクラスライブラリを学習する場合にも、命名に着目することで理解がより容易になると思います。
また、自分でインタフェースを設計するときには、命名を考えることで設計の手助けになるはずです。


