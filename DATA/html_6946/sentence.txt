More than 3 years have passed since last update.自分が作ったクラスのインスタンスを使っているメソッドを, テスト可能にする.このコードは, 特別なデバイス(実機)上で動作させるものとする.
実機にはモーターが接続されており, Motorクラスを通じて制御をおこなう.
Motorクラスは自分で定義したものであり, SampleMethodメソッドはそのインスタンスを使って, 何か処理する.このSampleMethodメソッドのテストを作成し, CIツール(Travis CIとかAppVeyorとか)で自動テストさせたい.
でも, CIツールの環境では, モーターが接続されていないので, Speedプロパティは動作しない.
テストの時は, Motor.Speedは呼ばず, 代わりのメソッドを呼ぶようにしたい.以降で, Motorインスタンスをスタブに置き換えて, SampleMethodメソッドをテストできるようにしてみる.問題のメソッドでは, モーターをMotorインスタンスとして受け取り, Motor.Speedプロパティを呼んでいる.
Motorインスタンスとして受け取っているので, Motorクラスのプロパティが呼ばれるのは当たり前である.
これを, スタブのメソッドが呼ばれるようにするためには,
クラスではなくインタフェースに依存させる
ということをする.具体的には, Motorクラスを, IMotorインタフェースの実装クラスとする.そして, テスト対象のメソッドは次のようにする.どこが変わったか分かりにくいかもしれないが, モーターをMotorインスタンスではなく, IMotorインタフェース(を持つインスタンス)として受け取っている.
そして, IMotorインタフェースのSpeedプロパティを呼んでいる.こうすることで, IMotorインタフェースを実装しているものなら何でも受け取ることができる.
実機で動かすときはMotorインスタンスを受け取り, テストの時にはスタブインスタンスを受け取る, ということができるのである.
そしてSampleMethodメソッド内では, 実際の実装がどのようになっているかを気にすることなく, IMotor.Speedプロパティを呼び出せば, それぞれの実装に合わせた処理が実行される.まずはスタブを用意する.
もちろんIMotorインタフェースを実装させる.テストコードは次のようになる.これで, SampleMethodメソッド内では, なにもせずただ0を返すだけのMotorStub.Speedプロパティが呼ばれるだろう.
本記事の目的は達成された.ここまでで, 当初の目的は達成することができた.
ここからは, スタブクラスをちょっと便利に改造する.前節で作ったスタブのクラスは, いつも定数値0を返す.
しかし, テストによっては0を返してほしいテストとか, 1を返してほしいテストとか, いろいろある.
そのたびに新たなスタブクラスを作るのはめんどくさいので, 返す値を指定することができるようにしてみる.テストをするときは, 返す値を設定することになる.さらにテストによっては, Speedプロパティに特定の例外を発生させたいとか, 1回目に呼ばれたときは0で2回目に呼ばれたときは1を返すようにしたいとか, 複雑なことをさせたいこともある.
本記事では説明しないが, またどこかで説明するかもしれない.
ちなみに, "どんな呼ばれ方をするか"とか, "こういう値を返したときの処理"とかを確認したい場合は, "スタブ"ではなく"モック"になる.


