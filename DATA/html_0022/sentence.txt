もくじ
→https://qiita.com/tera1707/items/4fda73d86eded283ec4f以前、あるプロセスと別のプロセスを連携させるために、原始的(?)にファイルにお互いから書き込み/読み込みを行って、情報をやり取りする方法を取ったのだが、自分が書き込んだあとに相手が読み込むまでのタイムラグや、同時にファイルを読み書きしようとしたらおかしくなる(書き込み途中のものを見てしまう、下手するとファイルを開く権限がないとかで落ちる)、ファイルを消したらおかしくなる、など、問題が多発した。なにか他の方法で、プロセス間で情報をやり取りしたい。そういう「プロセス間で情報をやりとりする」ことを、IPC(Interprocess communication)というらしい。
https://docs.microsoft.com/ja-jp/windows/uwp/communication/interprocess-communicationMicrosoftのページによると、複数のIPCするための方法がある様子。たくさんある...あとMSのページをざっと見ただけでは、私にはそれぞれがどういうやり方なのか全然わからなかった...雰囲気的に、説明をざっと見た感じでは、「パイプ」より上は、デスクトップアプリではなくパッケージされたアプリ向けの話な気がする。(本当にパッと見ただけ。違ってたらすみません)全部は見切れないので、今回は身近で実績のあった「名前付きパイプ」でまずはやってみることにした。ベースは下記のMSのサンプル。
下記MSサンプルではThreadとか使ってたのでTaskに直して、余計なのを消した。
https://docs.microsoft.com/ja-jp/dotnet/standard/io/how-to-use-named-pipes-for-network-interprocess-communication※一方通行のパイプ通信などもあるようだが、今回は双方向(PipeDirection.InOut)で試した。同じのを2つ立ち上げて、1個はパイプサーバー、もう一つをクライアントにすると、お互いに名前付きパイプで通信をすることができる。※エラー処理とかちゃんとしてないので、片方だけ落としたりするともう片方が例外で落ちます。上の実験プログラムだと、サーバーはパイプを開いて受信待ちに入り、クライアントが送信をしたら、サーバーが受信後その応答を返す、という流れなので、サーバー側から送信を開始する、ということができてなかった。メイン関数の部分を下記のように変えると、お互いが好きなタイミングで送信できた。
(単にパイプを2つ作ってサーバーとクライアントをテレコにしただけ。両方が、サーバーでクライアントという感じ。これが良いのかどうかはわからない...)下記ページによると、名前付きパイプだと、同じコンピュータ上のプロセスだけではなく、ネットワーク上の別のコンピュータ上のプロセスとも通信できるらしい。
https://docs.microsoft.com/ja-jp/windows/win32/ipc/named-pipes現状未検証なので、一度やってみたい。いろんなプロセス間通信(MSdocs)
https://docs.microsoft.com/ja-jp/windows/uwp/communication/interprocess-communicationC#名前付きパイプ(MSdocs)
ここのサンプルを元にコード作成。
https://docs.microsoft.com/ja-jp/dotnet/standard/io/how-to-use-named-pipes-for-network-interprocess-communication名前付きパイプの説明(MSdocs)
https://docs.microsoft.com/ja-jp/windows/win32/ipc/named-pipesC++での名前付きパイプでの通信をこちらでされてる様子。
C++でやる際には参考にさせて頂こうと思う。
http://country-programmer.dfkp.info/2021/01/named_pipe_windows_004/
また同じ方が、別のプロセス間通信のやり方である「共有メモリ」をこちらで実践されている。
これも参考になりそう...
http://country-programmer.dfkp.info/2021/02/shared_memory_001/


