using System;
using System.IO;
using System.IO.Pipes;
using System.Security.Principal;
using System.Text;
using System.Threading.Tasks;

namespace PipeJikken
{
    class Program
    {
        private static int numThreads = 1;

        static void Main(string[] args)
        {
            Console.WriteLine("パイプ通信の実験をします。");
            Console.WriteLine("サーバーになりますか？クライアントになりますか？");
            Console.WriteLine("サーバー：s　クライアント：c　を入力してください");
            var sorc = Console.ReadLine();

            if (sorc == "s")
            {
                CreatePipeServerTask("pipe1").Wait();
            }
            else
            {
                CreateClientTask("pipe1").Wait();
            }
        }

        public static Task CreatePipeServerTask(string pipeName)
        {
            Console.WriteLine(DateTime.Now.ToString("HH:mm:ss.fff") + " " + "Please enter a message, and then press Enter.");

            return Task.Run(() =&gt;
            {
                // numThreadsで指定した数まで同じ名前のパイプを作れる
                NamedPipeServerStream pipeServer = new NamedPipeServerStream(pipeName, PipeDirection.InOut, numThreads);

                // クライアントの接続待ち
                pipeServer.WaitForConnection();

                StreamString ss = new StreamString(pipeServer);

                while (true)
                {
                    // 受信待ち
                    var read = ss.ReadString();
                    // 受信したら応答を送信
                    var write = ss.WriteString("Server read OK.");
                    Console.WriteLine("Read Data = " + read);

                    if (read == "end") break;
                }
                pipeServer.Close();
            });
        }

        public static Task CreateClientTask(string pipeName)
        {
            return Task.Run(() =&gt;
            {
                var pipeClient = new NamedPipeClientStream(".", pipeName, PipeDirection.InOut, PipeOptions.None, TokenImpersonationLevel.Impersonation);
                pipeClient.Connect();

                var ss = new StreamString(pipeClient);

                while (true)
                {
                    // 入力された文字列を送信する
                    var writeData = Console.ReadLine();
                    var write = ss.WriteString(writeData);
                    // 応答待ち
                    var read = ss.ReadString();
                    Console.WriteLine("Server Response = " + read);

                    if (writeData == "end") break;
                }
                pipeClient.Close();
            });
        }
    }
    // MSサンプルそのまま(streamに文字列を読み書きしてくれるクラス)
    public class StreamString
    {
        private Stream ioStream;
        private UnicodeEncoding streamEncoding;

        public StreamString(Stream ioStream)
        {
            this.ioStream = ioStream;
            streamEncoding = new UnicodeEncoding();
        }

        public string ReadString()
        {
            int len = 0;

            len = ioStream.ReadByte() * 256;
            len += ioStream.ReadByte();
            byte[] inBuffer = new byte[len];
            ioStream.Read(inBuffer, 0, len);

            return streamEncoding.GetString(inBuffer);
        }

        public int WriteString(string outString)
        {
            byte[] outBuffer = streamEncoding.GetBytes(outString);
            int len = outBuffer.Length;
            if (len &gt; UInt16.MaxValue)
            {
                len = (int)UInt16.MaxValue;
            }
            ioStream.WriteByte((byte)(len / 256));
            ioStream.WriteByte((byte)(len &amp; 255));
            ioStream.Write(outBuffer, 0, len);
            ioStream.Flush();

            return outBuffer.Length + 2;
        }
    }
}

