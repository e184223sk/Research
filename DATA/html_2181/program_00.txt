using System;
using System.Windows;
using System.Diagnostics;

namespace ConsoleRead
{
    public partial class MainWindow : Window
    {
        Process pr = null;

        public MainWindow()
        {
            InitializeComponent();
        }

        private void Button_Start(object sender, RoutedEventArgs e)
        {
            HeavyMethod();
        }

        /// &lt;summary&gt;
        /// pythonコードを非同期で実行
        /// &lt;summary&gt;
        public void HeavyMethod()
        {
            pr = new Process();

            // pythonファイル(sumple.py)の指定
            pr.StartInfo.FileName = "python.exe";
            pr.StartInfo.Arguments = "-u sumple.py";

            // コンソール画面を表示させない
            pr.StartInfo.CreateNoWindow = true;

            // 非同期実行に必要
            pr.StartInfo.UseShellExecute = false;
            pr.StartInfo.RedirectStandardOutput = true;

            // イベントハンドラ登録（標準出力時）
            pr.OutputDataReceived += process_DataReceived;

            // イベントハンドラ登録（プロセス終了時）
            pr.EnableRaisingEvents = true;
            pr.Exited += onExited;

            pr.Start();
            pr.BeginOutputReadLine(); //非同期で標準出力読み取り
        }

        /// &lt;summary&gt;
        /// 標準出力があった時に実行
        /// &lt;/summary&gt;
        public void process_DataReceived(object sender, DataReceivedEventArgs e)
        {
            string output = e.Data + "\r\n";
            Dispatcher.BeginInvoke(new Action(() =&gt;
            {
                tb1.Text += output;
            }));
        }

        /// &lt;summary&gt;
        /// プロセス終了時に実行
        /// &lt;/summary&gt;
        public void onExited(object sender, EventArgs e)
        {
            if (pr != null)
            {
                pr.Close();
                pr.Dispose();

                MessageBox.Show("end");
            }
        }
    }
}

