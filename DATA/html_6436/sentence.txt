More than 1 year has passed since last update.Taskの完了を待ったり結果を取得したりする方法がいろいろあるので整理。Taskの使い方とかはこっち ⇒ C# 並行・並列プログラミング パターン集普通のパターン。await するタイミングをずらすことで、パフォーマンスを改善できるかもしれない。メッセージボックスを表示している裏でHTTP通信するので、普通のパターンよりも体感待ち時間の短縮が期待できる。非同期メソッドを同期メソッドのように使用することもできる。Result の仲間に Wait() や Task.WaitAll(), Task.WaitAny() がいる。※GUIアプリやWebアプリでWaitするのは危険
詳細は Async/Await: 非同期プログラミングのベスト プラクティス の「すべて非同期にする」を参照。複数の Task をまとめて await するのに便利。複数の Task のうち、どれか1つだけ await すればよいときに便利。応用して、残りのタスクをキャンセルすることも。ContinueWith を使うと、次のタスクを実行する条件(TaskContinuationOptions や TaskScheduler)など、細かい制御が可能。なお上記の例では、画像のデコードは Worker スレッドで実行され、画像の表示は UI スレッドで実行される。(ようにするために TaskScheduler.FromCurrentSynchronizationContext() を引数に渡している)タスクが終わってるか確認したいだけなら IsCompleted を使う。IsCompleted に似て IsCompletedSuccessfully というプロパティもあるが、
IsCompletedSuccessfully はタスクが成功した場合のみ true になる。
あと IsFaulted や IsCanceled ってのもある。


