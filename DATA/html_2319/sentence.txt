More than 1 year has passed since last update.アドカレ4日目です。
UnityTestRunnerについてちょっと書いてみます。テスト、いいですよね。たくさんテストを書くと仕事が進んでいるような気がしてきます。
僕はそんなにテスト書かない人間ですけど、テストを書くのが嫌いでは無いです。
最近、UnityTestRunnerとその裏側であるNUnitに触れていたら、TestAttributeの仕組みが気になって、自作のAttributeとかを噛ませてみたくなったので、試してみました。まずはじめに [SimpleTest] public void テストメソッド() { } こんな感じでTestRunnerに認識されるAttributeを自作してみます。上記のテストケースであれば、UnityTestRunner上では次のスクリーンショットのように表示されます。
UnityTestRunnerに認識させるためにやったことはAttributeの定義(とテストメソッドへの付与)だけです。NUnit.Framework.NUnitAttributeを継承していますが、これは System.Attribute を直接継承してもUnityTestRunner上では動作に違いはありませんでしたが、その場の雰囲気でNUnitAttributeを採用しました。
他にもNUnit標準のAttributeはいくつかあるのでNUnit内のAttributeを眺めるのもいいかもしれません。
例えば、UnityTestAttributeなんかはCombiningStrategyAttributeを継承していたりします。NUnit.Framework.Interfaces.ISimpleTestBuilder は次のように定義されています。今回はTestMethodのコンストラクタ TestMethod(IMethodInfo method, Test suite) にそのまま流し込んで完了としました。
もう少しイロイロしてくれる便利クラスとして NUnit.Framework.Internal.Builders.NUnitTestCaseBuilder というものも存在していて、標準の TestAttribute などはこのビルダーを使っているようです。NUnit.Framework.Interfaces.IImplyFixture 自体は何のメソッドも持たないマーカーインターフェースですが、最低限これだけ付いていればテストとして認識させることができます。ただし前述の ISimpleTestBuilder.BuildFrom のようなTestMethodを提供するインターフェースが存在しないと、何のテストも実行されません。テストメソッドを実行する直前に任意の処理を挟み込むAttributeを実装してみます。
今回の例ではテスト実行前に EditorSceneManager.OpenScene("hoge.unity"); を叩いてみます。次のスクリーンショットは、上記のテストコードをUnityTestRunnerで実行実行した結果です。
NUnitのIMethodInfoを実装してMethodProxyクラスを定義し、BuildFromに渡ってくるIMethodInfoのプロキシとしてInvokeに割り込んでいます。
なんとなくActionを渡していますが、直接Invokeメソッド内に書いちゃっても問題ないですね。なお、今回のBuildFromメソッド実装では、色々実装が足りないのでValuesやRange属性と組み合わせることができませんが、そこはご愛嬌ということで。前述した「シーンを指定してTestを実行する属性の実装(その1)」の場合、色々な属性と組み合わせるとボロが出始めました。
そこで、もう少しボロが出にくいUnityTestRunnerライクな実装をしてみます。
使い方は一緒なので割愛します。都合よくUnityTestRunnerのテストの前後に処理を挟み込める IOuterUnityTestAction というインターフェースが用意されているので、これを自作Attributeに実装してあげるだけです。
テスト属性に密接に関わる処理は UnitySetUp や UnityTearDown よりこちらのインターフェースを使った方が簡単なケースもあるかもしれません。NUnitには TestCaseSourceAttribute というものがいて、このAttributeにイテレータを返すメンバー名を渡してあげると1つのテストから複数のテストケースを量産することができます。
TestAttribute に対するUnityTestRunnerの UnityTestAttribute のように、 TestCaseSourceAttribute に対して UnityTestCaseAttribute があるかなーっと思ったのですが、現状見つからなかったので自作してみました。
以下に実装を残します。次のスクリーンショットは、上記のテストコードをUnityTestRunnerで実行実行した結果です。
TestCaseSourceAttributeを継承して、ITestBuilderを実装し直してみました。
TestCaseSourceAttributeにはvirtualなメソッドなんて存在しないので、BuildFromメソッドをnewして隠蔽し、GetTestCasesForメソッドをリフレクションでこじ開けるという、気合いと根性に満ちた実装になっています。
TestCaseSourceAttributeを写経するのも選択肢としてはありですが、少々複雑だったので横着してみました。
ぱっと見はそこそこ素直な実装に見えるんじゃないでしょうか。結構なんでもできるので、たったこれだけのテストから
こんな感じでアスキーアートを出すことだって自由です。それではみなさん楽しいテストライフを！


