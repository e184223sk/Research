
IEnumerable&lt;int&gt; Factoring(int number)
{
    if (number == 1)
        yield break;
    // 最小の素数をリストに
    var primes = new List&lt;long&gt;() { 2 };
    var tmp = number;
    // 割れなくなったらやめる
    while (tmp != 1)
    {
        foreach (var prime in primes)
        {
            // 剰余が発生するまで割り続けて、終わったら次の素数に
            while (tmp % prime == 0)
            {
                tmp = tmp / prime;
                yield return prime;
            }
        }
        if (tmp == 1)
            // 割れなくなったらやめる
            yield break;
        var maxPrime = primes.Max();
        if (Math.Sqrt(tmp) &lt; maxPrime)
        {
            // 最大の素数が残っている数の平方より大きいなら残っている数は素数
            primes.Add(tmp);
            continue;
        }
        // 次の素数を求める
        primes.Add(Enumerable.Range(maxPrime, tmp - maxPrime)
            .First(s1 =&gt; !primes.Any(s2 =&gt; s1 % s2 == 0)));
    }
}

