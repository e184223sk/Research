Unityの用意してくれた機能です。JsonUtilityを利用してセーブとロードの機能を実装していきます。今回のセーブ、ロードはアプリを終了しても
データが保存されている、読み込める状態を指します。下記リンクのお絵描きした絵のデータをセーブ、ロードしていきます。【参考リンク】：【Unity(C#)】ハンドトラッキングで簡易版VRお絵かきアプリJSON (JavaScript Object Notation)は、軽量のデータ交換フォーマットです。人間にとって読み書きが容易で、マシンにとっても簡単にパースや生成を行なえる形式です。【参考リンク】：JSON の紹介描いた絵のデータ(TrailRendererのパラメータ)をJSON形式に変換して保存、
保存したJSON形式のデータを読み込んで、TrailRendererのパラメータに再設定する　
ということを行えばセーブ、ロードが可能になります。シリアライズとは、複数の並列データを直列化して送信することである。具体的には、メモリ上に存在する情報を、ファイルとして保存したり、ネットワークで送受信したりできるように変換することである。他方、既にファイルとして存在しているデータや、一旦シリアライズされたデータがネットワークから送られてきた際に、プログラムで扱えるようにする作業をデシリアライズと呼ぶ。【参考リンク】：辞典・百科事典の検索サービス - Weblio辞書今回の例で言うと描いた絵のデータ(TrailRendererのパラメータ)を
JSON形式に変換してファイルへの保存に利用可能に→シリアライズ
保存したJSON形式のデータを読み込んでUnity(C#)で利用可能に→デシリアライズ
となります前提として、今回作成したお絵描きアプリは
一筆ごとにTrailRendererを生成しています。実装の順序としては下記です。
①TrailRendererのパラメータを保存する構造体を作成
②複数個存在するTrailRendererそれぞれのパラメータをまとめてリスト化
③作成したリストをJson形式にシリアライズし保存
④読み込み時にデシリアライズし、リスト分のTrailRendererを再生成して設定では順を追って見ていきます
まずデータを入れる構造体を定義します。
こちらの構造体にはシリアライズを可能にするために
[Serializable]というアトリビュートが必要です。次に、リストを作成します。
わざわざクラスを用意してリストを定義しているのは、
リストを直接Json形式にシリアライズすることができないからです。
やってみると空のリストが返ってきました。なので、クラスをJson形式にシリアライズする形をとっています。こちらにも[Serializable]をつけます。つづいて、シリアライズ、デシリアライズのロジックです。
usingステートメントは外部リソースにアクセスするときに便利らしいです。外部リソースを利用したあと、勝手に利用停止してくれる、みたいな感じです。
メモリリークと呼ばれる現象を防ぐことができます。【参考リンク】：外部リソースの解放には using ステートメントを使う最後に先ほどのロジックの利用側です。見たところで伝わりませんが、ちゃんとできてました。
UnityのJsonUtilityでデータをJson化する【Unity(C#)】TrailRendererの頂点座標を取得する方法
【Unity】Utf8JsonでJsonファイルを読み込み・書き込みする


