
using System;
using System.IO;
using UnityEngine;

/// &lt;summary&gt;
/// Save、Load機能の実装
/// &lt;/summary&gt;
public static class JsonDataManager
{
    /// &lt;summary&gt;
    /// パスを取得 &amp; セーブファイル名記録
    /// &lt;/summary&gt;
    private static string getFilePath () { return Application.persistentDataPath + "/PaintData" + ".json"; } 

    /// &lt;summary&gt;
    /// 書き込み機能
    /// &lt;/summary&gt;
    /// &lt;param name="paintDataWrapper"&gt;シリアライズするデータ&lt;/param&gt;
    public static void Save(PaintDataWrapper paintDataWrapper)
    {
        //シリアライズ実行
        string jsonSerializedData = JsonUtility.ToJson(paintDataWrapper);
        Debug.Log(jsonSerializedData);

        //実際にファイル作って書き込む
        using (var sw = new StreamWriter (getFilePath(), false)) 
        {
            try
            {
                //ファイルに書き込む
                sw.Write (jsonSerializedData);
            }
            catch (Exception e) //失敗した時の処理
            {
                Debug.Log (e);
            }
        }
    }

    /// &lt;summary&gt;
    /// 読み込み機能
    /// &lt;/summary&gt;
    /// &lt;returns&gt;デシリアライズした構造体&lt;/returns&gt;
    public static PaintDataWrapper Load()
    {
        PaintDataWrapper jsonDeserializedData = new paintDataWrapper();

        try 
        {
            //ファイルを読み込む
            using (FileStream fs = new FileStream (getFilePath(), FileMode.Open))
            using (StreamReader sr = new StreamReader (fs)) 
            {
                string result = sr.ReadToEnd ();
                Debug.Log(result);

                //読み込んだJsonを構造体にぶちこむ
                jsonDeserializedData = JsonUtility.FromJson&lt;PaintDataWrapper&gt;(result);
            }
        }
        catch (Exception e) //失敗した時の処理
        {
            Debug.Log (e);
        }

        //デシリアライズした構造体を返す
        return jsonDeserializedData;
    }
}

