2019/05/06 に ML.NET 1.0.0 がリリースされ、ML.NET では初めての正式リリースとなりました。(ML.NET 1.0.0 Release Notes)以前の投稿では、最初のプレビューリリース ML.NET 0.1 について書きましたが、ちょうど ML.NET 0.1 のリリースから約一年がたったところで、ML.NET 1.0.0 として正式リリースを迎えました。ML.NET 1.0.0 は、0.1 と比較すると大きく変更されています。0.1 のコードは、1.0.0 では動作しません。
そこで、以前紹介した ML.NET を利用したワインの品質を回帰分析で推論する機械学習モデルを作成する手順を ML.NET 1.0.0 ベースであらためて紹介したいと思います。(*) この記事の公開当時は、ML.NET 1.0 を対象としていましたが、2020 年 9 月現在では、ML.NET 1.5.2 がリリースされています。.NET Core も現在では、.NET Core 3.1 がリリースされています。その後、ここに記載した手順は .NET Core 3.1、ML.NET 1.5.2 でも動作することを確認しました。以下のリポジトリに .NET Core 3.1、ML.NET 1.5.2 ベースのサンプル コードを配置したので必要に応じて参照ください。データセットは、以前と同じく、UCI が公開している UC Irvine Machine Learning Repository の Wine Quality Data Set を利用します。ML.NET 1.0.0 は、.NET Core 2.1 以降が必要となります。.NET Framework 4.6.1 以降でも動作するとのことです。
ML.NET は、.NET Core ベースでなので、クロスプラットフォームで開発、動作させることができますが、今回は、Visual Studio 2019 での手順を説明しますので、必要に応じて準備を行ってください。Visual Studio 2019 を起動し、[新しいプロジェクトの作成] - [コンソール アプリ(.NET Core)] を選択し、[次へ] を選択、[プロジェクト名] に任意のプロジェクト名(ここでは、 "WinequalityDemo002" ) を入力し [作成] を選択します。[ソリューション エクスプローラー] から、プロジェクトを選択し、右クリックメニューから、[NuGet パッケージの管理] を選択します。[参照] タブの [検索]　テキスト ボックスに "Microsoft.ML" と入力し、[Microsoft.ML] を選択し、[インストール] を選択し、以降画面の指示に従い "Microsoft.ML" をインストールします。[ソリューション エクスプローラー] から、プロジェクトを選択し、右クリックメニューから、[追加] - [新しいフォルダー] を選択しフォルダーを作成し、任意の名前 (ここでは、"Data") を付けます。Wine Quality Data Set - Data Folder から、winequality-red.csv をダウンロードし、作成した "Data" フォルダーに格納します。[ソリューション エクスプローラー] から、"winequality-red.csv" を選択し、[プロパティ] - [出力ディレクトリにコピー] から、"常にコピーする" を選択します。今回利用するデータは、赤ワインのアルコール度数、pH、塩化ナトリウム濃度等の 10 種類の属性と品質が数値で定義されたものです。各属性値と品質の対で機械学習を行い、未知の各属性値が与えられた場合に、品質を算出できるような機械学習モデルを生成します。まず、データセットのカラムの定義を行います。ワインの品質を表現するクラスを定義します。[ソリューション エクスプローラー] から、プロジェクトを選択し、右クリックメニューから、[追加] - [クラス] - [名前] に "WineQualityData" と入力し、[追加] を選択します。以下のコードを記述します。"WineQualityData" というクラスは、読み込むデータのカラムを定義をしています。各フィールドの属性でデータファイルに対応するインデックスを定義しています。ML.NET 0.1 では、カラムのインデックスを文字列で指定していたものが、数値で指定するように変更されています。"WineQualityPrediction" というクラスでは、推論時に出力するデータセットを定義しています。以降から、"Program.cs" にコードを追加していきます。
はじめに、以下のコードで各ライブラリを using しておきます。以降のコードを Main 関数に記述していきます。まずは、データのロードです。コンテキストを生成し、学習データと、テストデータをロードします。
今回は、DataOperationsCatalog.TrainTestSplit を使って、学習データとテストデータを分割していますが、もちろん、ファイルレベルであらかじめ分割しておき、それぞれを TextLoaderSaverCatalog.LoadFromTextFile でロードしても構いません。ML.NET 0.1 時点では、データ加工がサポートされていませんでしたが、.NET 1.0.0 では、ある程度のデータ加工ができるようになりました。以降で、学習パイプラインを定義していきます。
まずは、学習データの定義から。学習に用いるデータの列を一つにまとめて "Features" という列で、再定義しています。ここで、NormalizationCatalog.NormalizeMeanVariance 等を使って、データの正規化を行うこともできます。次に、学習アルゴリズムを定義します。ここでは、学習アルゴリズムには、線形回帰(SDCA) を用い、"Quality" を目的変数、"Features" 列を説明変数として定義しています。
EstimatorChain.Fit でパイプラインにもとづき学習を実行します。学習が完了後、学習モデルが返却されます。最後に、生成した学習モデルの評価を行います。ここまでのコードをそのまま実行させるとわかりますが、あまり良いモデルを作成することができません。
実際には、データを加工したり、アルゴリズムを変更したり、アルゴリズムのパラメーターを調整して、これらの手順を繰り返し、より良いモデルを作成していきます。調整を繰り返し、良いモデルができたらモデルをファイルに保存します。他のアプリケーション等で、学習モデルをロードし、推論を行う場合は、以下の様にします。モデルをロードして利用する場合、目的変数、説明変数である WineQualityData, WineQualityPrediction が必要となるので、これらのクラスを学習用のプログラム、参照するプログラムで横断して利用できるように、別のプロジェクトや DLL として参照できるようにしておくことが良いかもしれません。今回の手順においては、以下のサイトを参考に記載しました。


