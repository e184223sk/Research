
/// &lt;summary&gt;
/// 全てのリクエストを送信して完了を通知します。
/// &lt;/summary&gt;
/// &lt;typeparam name="TRequest"&gt;リクエストの型&lt;/typeparam&gt;
/// &lt;param name="call"&gt;非同期呼び出しオブジェクト&lt;/param&gt;
/// &lt;param name="requests"&gt;リクエスト&lt;/param&gt;
/// &lt;returns&gt;&lt;/returns&gt;
public Task SendRequestsAndCompleteAsync&lt;TRequest&gt;(IAsyncRequestStreamingCall&lt;TRequest&gt; call, IEnumerable&lt;TRequest&gt; requests)
{
    try
    {
        foreach(TRequest request in requests)
        {
            await call.RequestStream.WriteAsync(request).ConfigureAwait(false);
        }
        await call.RequestStream.CompleteAsync().ConfigureAwait(false);
    }
    catch (Exception ex)
    {
        await HandleExceptionAsync(call, ex).ConfigureAwait(false);
        throw;
    }
}

/// &lt;summary&gt;
/// 指定された例外に対する処理を行います。
/// &lt;/summary&gt;
/// &lt;param name="call"&gt;非同期呼び出しオブジェクト&lt;/param&gt;
/// &lt;param name="ex"&gt;例外&lt;/param&gt;
/// &lt;returns&gt;&lt;/returns&gt;
private async Task HandleExceptionAsync(IAsyncCall call, Exception ex)
{
    // 割愛
}

// 呼び出し
AsyncClientStreamingCall&lt;string, string&gt; call1;
AsyncDuplexStreamingCall&lt;string, string&gt; call2;
IEnumerable&lt;string&gt; requests;

await SendRequestsAndCompleteAsync(call1.AsRequestStreamingCall(), requests).ConfigureAwait(false);
await SendRequestsAndCompleteAsync(call2.AsRequestStreamingCall(), requests).ConfigureAwait(false);

// IAsyncRequestStreamingCall&lt;TRequest&gt; の拡張メソッドとして定義すれば次のように呼び出せます
await call1.AsRequestStreamingCall().SendRequestsAndCompleteAsync(requests).ConfigureAwait(false);
await call2.AsRequestStreamingCall().SendRequestsAndCompleteAsync(requests).ConfigureAwait(false);


