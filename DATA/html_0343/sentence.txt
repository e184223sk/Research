本家動画はこちら
EP01～05はこちら
番外×2 + EP10～はこちら(動画じゃauthor.FirstName, author.LastNameを渡さずに、直接一回変数に入れてるけどなんか意味あるんかな？)(ローカルで動かしてたら「innerTest」ってタイポしてて動かんかった・・・VisualStudioならTypeScript簡単に使えるし(必要なものはNugetで勝手にとってきてくれる)トランスパイルの時にエラー出してくれるTypeScript使おう。型もあるしほぼ書き方変わらんし)(ElementReference firstnameText;だとエラーになるけどInputText firstnameText;だとエラーにならんな。この辺は型チェックしてるってことか)(動画ではJavaScriptだからもちろん「: HTMLElement」は無いよ)(一々JS使わんといかんの面倒だな。WebForm時代みたいにSetFocus関数呼ぶだけ、とかにならんかなぁ・・・。以下みたいな感じ)(ID指定すればInputTextのままでもいけるな)(動画では(ry)(実アプリじゃあんまり使わないパターンかなぁ。選択とかEnumとか固定配列とかDBからとるパターンしか使わなそう)(なんかわからんけど↓のコードだと実行エラーになる・・・)
→「ServerValidations.razor」のChildContentをClildContentって打ってたのが原因だった。このプロパティ名って固定なのな。(動画では styleとか指定してるけど省略)(そういやこれ、タグに全部プロパティを一個一個書くより@ref使ったほうがいいな)
(IsVisibleとかの[Parameter]は消さないと「パラメータ指定してねーぞ」って警告が出た)今回はRazorコンポーネントのライフサイクルについて話すよ。
(この章、自動翻訳が微妙過ぎて何言ってんのかわからん・・・、他のWebサイトも含めてまとめていこ)
BlazorのLifecycleとShouldRenderの挙動について
AspNetCore.Docs.ja-jp - lifecycle.md/GitHub初期化イベントだけど次の順で発生するよOnInitialized OnInitializedAsync：アプリの設定とかタイトルとか設定するといいね。OnInitializedAsyncは非同期だからDB読んだりしてもいいね。SetParametersAsync(動画では言ってないけど↑にあったので追加)Razorコンポーネントにパラメーターがセットされる前に呼ばれるよ。渡されたパラメーターのチェックができるね。セットされたプロパティの値はparameters.GetValueOrDefault&lt;プロパティの型&gt;("プロパティ名")で取れるよ。await base.SetParametersAsync(parameters);を呼ばないようにすれば値は反映されないよ。他と違って非同期しかないっぽいよ。OnParametersSet OnParametersSetAsync：Razorコンポーネントにパラメーターがセットされたあとに呼ばれるよ。渡されたパラメーターを元に何か処理するならここだね。OnAfterRender OnAfterRenderAsync：画面がレンダリングされた後に呼ばれるよ。DOMも作られてるからJavaScript呼ぶならここだね。初期化の流れで何かするならここが最後のチャンスだね。例えばDBから値を取れなかった時のリトライ処理とか。言わずもがなだけど、Asyncってついてる奴は非同期メソッドだね。あと一回表示したあとは画面更新前にShouldRenderっていうイベントが起きて、ここでfalseを返すと画面更新をやめるよ。デフォルトではないけどIDisposableを継承してDisposeを実装すればページ遷移時の後処理を実装できるよ。
　(RazorコンポーネントにIDisposable継承させるってどうやるんやろ？)
　→Component lifecycles - Blazor Universityにあった。Authors - OnInitialized
Authors - OnInitializedAsync
Authors - OnParametersSet
Authors - OnParametersSetAsync
ServerValidations - SetParametersAsync / IsVisible=False / parameters.GetValueOrDefault("IsVisible")=False
ServerValidations - OnInitialized
ServerValidations - OnInitializedAsync
ServerValidations - OnParametersSet / IsVisible=False
ServerValidations - OnParametersSetAsync / IsVisible=False
Authors - OnAfterRender - firstRender = True
Authors - OnAfterRenderAsync - firstRender = True
ServerValidations - OnAfterRender - firstRender = True
ServerValidations - OnAfterRenderAsync - firstRender = TrueAuthors - ShouldRender
ServerValidations - SetParametersAsync / IsVisible=False / parameters.GetValueOrDefault("IsVisible")=True
ServerValidations - OnParametersSet / IsVisible=True
ServerValidations - OnParametersSetAsync / IsVisible=True
ServerValidations - ShouldRender
Authors - OnAfterRender - firstRender = False
Authors - OnAfterRenderAsync - firstRender = False
ServerValidations - OnAfterRender - firstRender = False
ServerValidations - OnAfterRenderAsync - firstRender = False(Disposeの話、ないと思ったら最後にあった)エクスプローラーで「SelectCity.razor」と「ServerValidations.razor」を切り取って「CuriousDriveRazorLibrary」のプロジェクトフォルダに張り付けるよ。そしたらソリューションエクスプローラーを見てみると追加されてるのがわかるね。
(昔のVisualStudioと違ってプロジェクトにファイルの追加とかせんでええんや)ファイルを変更したらもちろんリビルドが必要だよ。呼び出す側だけど、一々全部のページに@using書いていくは面倒だよね。そこで「_Imports.razor」に@using CuriousDriveRazorLibraryを追加するよ。こうすることで全てのページで@usingを書いたのと同じになるよ。ソースで&lt;ServerValidations&gt;とかにカーソルを合わせてみるとCuriousDriveRazorLibrary.ServerValidationsとなってライブラリから呼ばれているようになっているのがわかるね。動かしてみるとちゃんと移す前と同じように動いてるのがわかるね。OSSのコンポーネントとかもあるよ。MatBlazorについて紹介しよう。これはマテリアルデザインUIのコンポーネントでOSSだよ。ググってプロジェクトのページを見てみるとたくさんのコンポーネントがあるのがわかるね。追加して使ってみよう。プロジェクトを右クリックして「Nugetパッケージの管理」を選択してMatBlazorを検索して「インストール」をクリックするだけだよ。実は既にこのプロジェクトにはMtBlazorは組み込んでいて、Publishersのテーブルで使ってるよ、コードを見てみよう。この例ではMatTableっていうコンポーネントを使ってるね。HTMLのテーブルタグと似たような感じで書けるようになってるよ。有償コンポーネントならTelerikとかがあるよ。Bootstrapとかも使えてグラフなんかのコンポーネントもあるよ。ちなみに＄1,300ほどかかるよ。かっこいいし選択肢としては十分ありだね。


