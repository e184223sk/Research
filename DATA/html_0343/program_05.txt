
@implements IDisposable

@if (IsVisible){
    @if (Result){
        &lt;div id="divValidationMessage" class="col-10 alert alert-danger row"&gt;
            &lt;div class="col-11" style="text-align:left"&gt;
                @ChildContent  保存完了
            &lt;/div&gt;
            &lt;div class="col-1" style="text-align:right"&gt;
                &lt;a style="text-underline-position:below; cursor:pointer" @onclick="CloseValidation"&gt;x&lt;/a&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    }else{
        &lt;div id="divValidationMessage" class="col-10 alert alert-danger row"&gt;
            &lt;div class="col-11" style="text-align:left"&gt;
                サーバーエラーです。管理者に問い合わせてください。
            &lt;/div&gt;
            &lt;div class="col-1" style="text-align:right"&gt;
                &lt;a style="text-underline-position:below; cursor:pointer" @onclick="CloseValidation"&gt;x&lt;/a&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    }
}

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    public bool Result { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    protected override void OnInitialized(){
        Console.WriteLine("ServerValidations - OnInitialized");
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync(){
        Console.WriteLine("ServerValidations - OnInitializedAsync");
        await base.OnInitializedAsync();
    }

    public override async Task SetParametersAsync(ParameterView parameters){
        Console.WriteLine("ServerValidations - SetParametersAsync / IsVisible=" + IsVisible.ToString() + " / parameters.GetValueOrDefault&lt;bool&gt;(\"IsVisible\")=" + parameters.GetValueOrDefault&lt;bool&gt;("IsVisible").ToString());
        await base.SetParametersAsync(parameters);
    }

    protected override void OnParametersSet(){
        Console.WriteLine("ServerValidations - OnParametersSet / IsVisible=" + IsVisible.ToString());
        base.OnParametersSet();
    }

    protected override async Task OnParametersSetAsync(){
        Console.WriteLine("ServerValidations - OnParametersSetAsync / IsVisible=" + IsVisible.ToString());
        await base.OnParametersSetAsync();
    }

    protected override bool ShouldRender(){
        base.ShouldRender();
        Console.WriteLine("ServerValidations - ShouldRender");
        return true;
    }

    protected override void OnAfterRender(bool firstRender){
        Console.WriteLine("ServerValidations - OnAfterRender - firstRender = " + firstRender);
        base.OnAfterRender(firstRender);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender){
        Console.WriteLine("ServerValidations - OnAfterRenderAsync - firstRender = " + firstRender);
        await base.OnAfterRenderAsync(firstRender);
    }

    void IDisposable.Dispose(){
        Console.WriteLine("ServerValidations - Dispose");
    }

    public void CloseValidation(){
        IsVisible = false;
    }
}


