More than 1 year has passed since last update.Blazorのプロジェクトの作り方やPWA(プログレッシブWebアプリケーション)化について、今年の秋辺りにいろいろやっていたのでまとめます。この記事はC#+WPFチューニング戦記 の最近の一部記事から多少情報を刷新したものです。ブラウザのプラグイン等を一切使わないSPA(シングルページアプリケーション)のメリットをそのままに、JavaScriptを1行も書かずにC#+HTMLでブラウザアプリケーションが作れるというのは、非常に良いと思いました。
PWA化するとC#のアプリケーションでありながら、C#のための.NET Framework/.NET Coreやアプリケーション自体のインストールすら不要です(PWA化するときは1行だけJavaScriptを書きますが、コピペです)。BlazorとはMicrosoftのASP.NET Coreの一コンポーネントとして近年開発されているものです。
C#をブラウザ側で動かすことができるというものです。オフィシャルのブログと開発場所です。Blazor 0.7.0 experimental release now available | ASP.NET Blog
https://github.com/aspnet/Blazor要するに画面要素(HTML/CSS)以外、上から下までC#で書いてWebアプリケーションを作ることができるのです。VisualStudio2017の新規プロジェクトで ASP.NET Core Webアプリケーションを選択します。
Blazorのテンプレートを選択します。
F5で実行して動くことを確認します。
1.テンプレートで生成したプロジェクト *.Server に NuGet から WebEssentials.AspNetCore.PWA を追加します。

2.Server側プロジェクトのStartup.csのConfigureServicesを以下のように書き換えます。3.Client側のプロジェクトの wwwroot に PWA に必要な manifest.json を追加します。icons に記述したファイルが必ず実在するようにしてください。これを忘れてPWA化できずにハマる人がたまにいるそうです。4.index.html を書き換えます。
serviceWorkerとmanifest.jsonの追加です。(残念ながらここで1行だけJavaScriptを記述します)5.httpsである必要があるので、Server側のプロジェクトでIIS Expressに以下の設定をします。

これを忘れてPWA化できずにハマる人がたまにいるそうです。6.IIS Expressでデバッグ実行します。7.Chromeで表示して以下のメニューがあることを確認します。
PWA化するとDesktopにアイコンが表示されます。実行すると以下のような画面になります。
以下のものを駆使して、汎用性に優れるコントロールを作成することができます。これらの情報に関する実践記事や動作するライブラリは、順次私のブログ上で展開していく予定です(ソースはGitHubに出します)。
C#+WPFチューニング戦記 を時々覗いてみてください。Blazorを取り巻く状況はまだ発展途上と言えます。現在 Blazor 0.8.0 は Preview の状態です。Blazor のうち Razor と呼ばれるHTML内にC#を混在させる部分が、最近 ASP.NET Core 3.0 にマージされました。
クライアントサイドの部分だけが現在 Blazor として開発継続しています。C#で書いたコードがここまでしっかりクライアントサイドでHTMLと緊密に動くのは非常に気持ちが良いです。
来年、かなり手堅い形で正規リリースが期待できると考えています。
みなさんも一度触れてみてください。


