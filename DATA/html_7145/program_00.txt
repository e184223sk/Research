// DiagnosticAnalyzerクラスを継承する
[DiagnosticAnalyzer(LanguageNames.CSharp)]
public class SampleAnalyzer : DiagnosticAnalyzer
{
    /* 下準備にあたる部分 */
    // 分析で問題があると判断された箇所に表示するメッセージを定義する。
    public const string DiagnosticId = "任意のIDを割振る。";
    private static readonly LocalizableString Title = "タイトルを入れる"
    private static readonly LocalizableString MessageFormat = "表示するメッセージのフォーマットを定義する。'{0}'で引数も受け取れる。"
    private static readonly LocalizableString Description = "説明"
    private const string Category = "分析内容のカテゴリ";
​
    // 上で定義した諸々をベースに DiagnosticDescriptor を作成する。
  　　　　// ソースコードに問題が見つかった場合に表示するメッセージ形式を定義している。
    private static DiagnosticDescriptor Rule = new DiagnosticDescriptor(　
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　DiagnosticId,
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　Title,
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　MessageFormat, 
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　Category,
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　DiagnosticSeverity.Warning,
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　isEnabledByDefault: true,
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　description: Description);
​
    public override ImmutableArray&lt;DiagnosticDescriptor&gt; SupportedDiagnostics 
　　　　　　　　　　　　　　　　=&gt; ImmutableArray.Create(Rule);
​
    public override void Initialize(AnalysisContext context)
    {
　　　　　　　　　　　　　　　　/* 「1. 分析の対象とする構文を登録する。」 に該当する部分 */
        // SymbolKindの部分がポイント。ここで分析対象を指定している。NamedTypeは、クラス名やメソッド名などの名前。
        // 第一引数に分析の処理を指定する。
        context.RegisterSymbolAction(AnalyzeSymbol, SymbolKind.NamedType);

        // Tips: 分析対象はSyntaxKindでも指定可能。
        // その場合、RegisterSyntaxNodeActionメソッドを呼び出す。
　　　　　　　　　　　　　　　　// context.RegisterSyntaxNodeAction(AnalyzeBlock, SyntaxKind.XXX);
    }
​
    /* 「2.その構文に対して分析処理をする。」 に該当する部分 */
    // context.RegisterSymbolAction　の第一引数で指定されているメソッド
    private static void AnalyzeSymbol(SymbolAnalysisContext context)
    {        
        // contextからソースコードの情報を取り出して、任意の分析処理を実行する。
        var namedTypeSymbol = (INamedTypeSymbol)context.Symbol;
        if (namedTypeSymbol.Name.ToCharArray().Any(char.IsLower))
        {
            /* 「3. 必要に応じて分析処理の結果を表示する。」 に該当する部分 */
            var diagnostic = Diagnostic.Create(Rule, namedTypeSymbol.Locations[0], namedTypeSymbol.Name);
            context.ReportDiagnostic(diagnostic);
        }
    }
}

