More than 5 years have passed since last update.VisualStudio2015でSDKが必要なのでインストールしておく。SDKをインストールするといくつかのプロジェクトテンプレートが追加される。今回はライブコード分析を追加するので、追加されたプロジェクトテンプレートのうち、 Analyzer with Code Fix (Nuget + VSIX) を利用してプロジェクトを作成する。
それぞれのプロジェクトテンプレートについては、SDKの詳細ページに記載されているのでそちらを参照していただきたい。実装を進める前に、ライブコード分析機能を実装するための大まかな処理の流れを把握しておく。
大体以下のような感じ。DiagnosticAnalyzerクラスを継承し、クラスのメソッドを活用して一連の処理を実装する。
以下にシンプルな例を示す。1,2,3の処理にあたる部分をコメントで追記しておいた。AnalyzeSymbol内の実装を工夫すれば、様々なライブコード分析が追加可能となる。上記サンプル内で、Registerのprefixを持つメソッドを2つ紹介しているが、SymbolとSyntaxNodeのどちらを登録したかで、分析処理を担当するメソッドの SymbolAnalysisContext context で取得できる内容が変化する。分析したい内容に応じて、SymbolとSyntaxNodeを使い分けることになる。ちなみに、取得できる内容の確認は、デバッグ実行(方法は後述)、もしくは、テストで地道にに調べるという泥臭い方法で行っておりました・・・効率良い方法があればぜひぜひ教えていただきたいです。把握しておくと、より理解しやすくなる要素を、メモがてら記載しておく。
以下の内容がふんわりわかっていれば、なんとなく実装を始められるかと思う。デバッグ実行をすると、新たに別のVisualStudioが立ち上がるので、そのVisualStudio上でコードを記述することでライブコード分析が動作していることを確認できる。即座に自分の書いた分析コードが動作しているのを見てニヤニヤできる。


