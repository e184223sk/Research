More than 3 years have passed since last update.前: その4
次: その6テクスチャを貼ってモデルに色をつける。
深度バッファを使う
今回のソース: GitHub詳しいことはこちらテクスチャとは、テクスチャ (texture) は、物の表面の質感・手触りなどを指す概念である。 本来は織物の質感を意味する。 髪型においては髪の表面の見た目の光沢や毛先の揃い方ばかりでなく、手で直接触った際の感触も含む総合的な概念。 コンピュータグラフィックスにおいて、3次元オブジェクト表面に貼り付けられる模様。
Wikipediaより簡単に言えば、モデルに貼り付ける画像ですね。
PMDファイルでは、色など見た目を定義する「マテリアル」内に、テクスチャとして使用される画像のファイル名が格納されています。
ファイル名は、PmdMaterial.TextureFileNameに格納されています。
以下のコードで、PMDファイルで使用されるテクスチャを読み込み、シェーダで利用するために、ShaderResourceViewに格納します。
parentDirは、PMDファイルがあるディレクトリの絶対パスです。次に、描画する頂点に読み込んだテクスチャのどの部分を対応させるかを指定する、UV値を頂点バッファに送ります。
頂点に対応するUV値は、PmdVertex.Uvに格納されています。
InitializeVertexLayoutの頂点の定義の後ろに以下のコードを追加します。さらに、頂点と一緒にUV値も一緒にシェーダに送るように変更します。
シェーダに送るデータを定義する構造体VertexBufferを追加。
ついでに、素直にデータを格納させたいため、頂点バッファとは別にインデックスバッファを生成し、頂点インデックスのデータを格納します。
InitializeVertexBuffer関数も変更します。生成したバッファをセットします。ここまで来れば、シェーダに画像を渡して描画するだけでいいのですが、シェーダに複数の画像を切り替えさせて描画させることはできません。
PMDファイルのマテリアルデータに、それぞれのマテリアルを適用する頂点インデックスの数が格納されています。マテリアル1: 青色 120個
マテリアル2: 赤色 210個といった具合です。
上記の場合、頂点インデックス120個分(0～119)を青色で描画し、さらに頂点インデックス210個分(120～329)を赤色で描画します。以下はDrawModel()関数とシェーダです。DrawModel()内では、描画を始める頂点インデックスの番号を格納するstartIdxを用意します。この変数は、描画をするごとに、描画が終わった頂点インデックスの番号を格納します。描画はマテリアルごとに行い、テクスチャが存在するなら、テクスチャを描画することをシェーダに伝える変数tex(bool)をtrueにし、画像を送ります。存在しない場合は、texをfalseにし、画像は送りません。
シェーダに送るものを設定し終えたら、Applyをし、DrawIndexedを使用してマテリアル単位で描画します。effect.fxでは、送られてきた画像とUV, 画像の有無などの情報を元に、描画方法を定義しています。詳しいことはこちらこれでモデルに色がつくはずですが、現状では後に描画されたものが手前に表示されるため、モデルによっては悲惨な結果になってしまいます。
深度バッファを使いましょう。やっと「らしく」表示できました。
次回は、視点操作とライトを扱う予定です。


