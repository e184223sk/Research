More than 3 years have passed since last update.WPF画面にて DataDrid を使っているとき、DataGridTextColumn の Visibilityプロパティが ItemsSource 外の ViewModel のメンバを参照したい場面が出てきました。
普通に、RelativeSource で記述しても、エラーとなり参照できません。あれこれ調べていたら、WPFの偉い人のブログの記事を参考に解決できましたので紹介します。.NET Framework 4.6.1こんな ViewModel を Window の DataContext に設定し、DataGrid は ProductList の一覧を表示。
そのとき、IsShowPrice が true のときだけ、Product 内にある Price 列を表示する・・・というケースです。普通に考えると、てな感じで動きそうですが、IsShowPrice の参照でエラーになっちゃいます。
RelativeSource での参照もうまく行きません。ItemsControl などで使う DataTemplate と異なり、DataGrid.Columns の子要素は、親（DataGrid）の仮想・論理ツリーに属していないから・・・というのが理由のようですが、なんのこっちゃ解りません。これを解決するには、Freezableクラスを継承した、データProxyオブジェクトを用意することで、参照可能になります。まずはそのProxyクラスを作成します。XAMLでは、DataGrid の Resource に、Window の DataContext への参照を定義します。BindingProxy 定義のところで、Data="{Binding}" として、親（Window）のDataContextを対象にしています。
DataGridTextColumn の Visibilityでは、Source={StaticResource proxy} と記述することで、proxy.IsShowPrice メンバにアクセスできます。この BindingProxy は、DataGrid.Columns だけでなく、ItemsControl などのコレクション要素でも使えます。
親要素を参照する RelativeSource の記述方法って、どうにもわかりづらいし、型をして上の階層を検索して・・・っていう動きがいまいち気に入らないです。
AncestorLevelを記述したら、入れ子構造に依存しまくりになるし。そんな複雑な参照も、この BindingProxy なら、比較的シンプルに書けて見通しも良くなります。
ただし、双方向のバインディングは動かないので、グリグリ動くものには使えないですが。


