More than 1 year has passed since last update.C#開発における、ショートコーディングに役立つテクニックを紹介します。現在業務で使用している、以下の開発環境を想定しています。Studentクラス、Teacherクラス、テスト用メソッドのクラスを用意しました。
XMLコメントはコードが長くなるので省略。1行のメソッドやgetterのみのプロパティを記述する時に、ラムダ式のような=&gt;を使用できます。{ }で行数が多くなっていますが、ラムダ式記法では以下のようにスッキリ書けます。
プロパティは意識することなく、setterを公開しない実装にできる点もポイント。null条件演算子?とnull合体演算子??を使用することで、nullチェックの記述を簡略化できます。参照型の引数のメンバにアクセスする時、NullReferenceExceptionを避けるためnullチェックを行うことがあります。
null条件演算子?を使用すれば、nullチェックが不要になります。引数がnullの時に、既定値が必要となる場合があります。
null条件演算子?だけでは既定値0を指定できませんが、null合体演算子??を組み合わせれば指定できます。LINQには、ショートコーディングを実現できる様々なメソッドが用意されています。
ただしLINQの遅延評価により、完全に同じ動作にならないことには注意が必要です。Enumerable Class
LINQ と遅延評価連続する数字のコレクションを作成します。for文を用いた一般的なコードですが、ローカル変数の宣言やネストがやや冗長です。
Rangeを使用することで以下のように記述できます。コレクションが空の場合にデフォルト値を返します。Average、Sum、Maxなどの集計演算子は、コレクションが空の場合にエラーとなるため事前チェックが必要です。
DefaultIfEmptyで既定値を設定すればこのチェックが不要になります。コレクション同士を統合します。一時リストの作成とループをSelectManyで回避します。型によるフィルタリングを行います。コレクションの中から特定の型を選択したい場合はOfTypeが便利です。
OfType使用後はキャストも不要。上記修正をすべて行うことにより、コードの行数をかなり削減することができました。C#の様々な機能を使って、簡潔で読みやすいコードを目指しましょう。
他にも便利な機能がありましたら教えてください。
ご意見、ご指摘もよろしくお願いします。Name、Numberはコンストラクタで設定後、バッキングフィールドを変更していません。
=&gt;の説明のため本文はそのままにしますが、変更のない場合は自動プロパティで十分です。


