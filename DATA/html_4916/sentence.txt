More than 3 years have passed since last update.C#でASN.1のObject Identifierのエンコードを行うの続編です。
前回は、ASN.1のObject Identifierのエンコード、TLVのLengthのエンコードについて実装しました。
今回は、SNMPのGetNextRequestメッセージのエンコードに必要な整数、OCTET STRING、NULL、SEQUENCEについてのエンコードを実装します。
最後に、SNMPのGetSnmpRequestメッセージを作成するクラスを作成します。ASN.1のNull ValueはTAG番号が「0x05」でLengthは常に「0」です。
よって、常に「05 00」です。よって、NullValueのエンコードを行うクラスの実装は下記のようになります。Octet StringはASN.1のTAG番号は「0x04」です。
Lengthは、Valueの長さになります。
また、OCTET STRINGは今回はSNMPv1のCommunity名の設定に使用しますので、
ASCII文字列をValueとして保持することのみ想定していますが、OCTET STRINGは文字列以外に、
バイナリストリームを設定する場合にも使用されます。
バイナリストリームをエンコードする場合はコンストラクタでバイナリストリームやバイト配列を
受け取るように変更すれば良いでしょう。今回の最難関は整数のエンコードです。
整数は負数を2の補数で表します。またBigEndianです。
注意が必要なのは、C#でInt32やInt64などをByte配列にBitConverter.GetBytesで変換すると
余分な「00」のバイトや「FF」のバイトが付加されてしまうことです。
ASN.1のBERでは最小バイトすうとなるように、先頭から連続する9桁の0や連続する9桁の1を設定することが
認めれていません。例えば、
「12345」-&gt;「39 30 00 00」
「-12345」-&gt;「C7 CF FF FF」
となります。
リトルエンディアンなので、リバースしてそれぞれ、
「00 00 30 39」「FF FF CF C7」です。
正数の場合は先頭の「00」が連続する箇所を取り除くだけでも良さそうですが、負数の場合に先頭の「FF」を
単純に取り除くと値が変わってしまいます。そこで、C#の、System.Numeric.BigIntegerを今回は使用することとしました。
BigIntegerは非常に大きな整数を扱うクラスですが、BigInteget.ToByteArray()で最小のバイト数のバイト配列への変換が可能でした。
これがなかったら自力で大きな正数、負数を最小のバイト数のバイト配列に変換するアルゴリズムを考える必要があり、悩んでしましたが、BigIntegerのおかげで、自分で考える機会がを奪われました。なお、BigIntegerを使用するにはプロジェクトの参照設定で「System.Numerics」ライブラリの参照が
必要です。
System.Numericsへの参照を追加した上で、Classファイルの冒頭に
「using System.Numerics;」の追加が必要です。シーケンスは内部に複数の単純型のTLVの値を保持する復号型です。
TAG番号は「0x30」です。Lengthは保持する複数のTLVの実際のバイト数です。SNMPのデータ部には、「GetNextRequest」「GetRequest」「GetRespons」などの種類がありますが、
それぞれTAG番号が異なるだけで、全てSEQUENCEとエンコード方法は同じです。いよいよこれまでに作成したクラスを組み合わせてSNMPのメッセージ全体をエンコードするクラスを作成します。
SNMPのGetNextRequestメッセージをエンコードするクラスを作成しました。
SNMPのメッセージ構造に従ってメッセージの階層を作成しています。
なお、RFCなどの仕様書を見ながらではなく、CentOSのsnmpgetnextコマンドで送信時にパケットをキャプチャし、
取得したパケットを見ながら実装して行きます。今回はレスポンスの取得をしていないため、実際に送信できているかどうかは、パケットキャプチャソフト(Wireshark）などを使って確認ができます。OIDとIPアドレスを入力するテキストボックスとボタンだけのフォームを作成します。
txtOriginal.Text　に「1.3.6.1.2.1.1.5」
txtIp.Textに「1.2.3.4」
などを入力します。
なお、自アドレスを指定してもWiresharkではパケットの取得ができません。
UDPですので接続相手がいなくてもパケットはとりあえずは送信されます。
SnmpGetNextMessageのコンストラクタで渡しているのはコミュニティ名のデフォルト値の「public」です。sendDataをBitConverter.ToString().Replace("-"," ")でも16進文字列に変換すると、下記の通りとなります。
RequestId部分はランダムな整数値を設定しているため実行環境によって異なる値が入っていますが、それ以外は同じ値が出力されるかと思います。先頭から目でデコードしていくと、
「30 28」は、SEQUENCEで、40byte(0x28)のデータ。
「02 01 00」は整数で値は「0」
「04 06 70 75 62 6C 69 63」は6byteのOCTET STRINGでASCII変換すると「public」の文字列。
「A1 1B」はSNMPのgetNextRequestでデータ帳は27byte。
「02 04 65 C4 BD A4」は整数で値は「‭1707392420‬」（RequestID)
「02 01 00」は整数で0(ErrorStatus)
続く「02 01 00」も整数で0(Error Index)
「30 0D」はSEQUENCEでデータ部が13byte。
「30 0B」はSEQUENCEでデータ部が11byte。(SEQUENCEが入れ子になっています）
「06 07 2B 06 01 02 01 01 05」はObject Identifierで「1.3.6.1.2.1.1.5」
最後の「05 00」はNullValue。
となっていることが分かります。
上記のデータをUDP送信し、Wiresharkでそのパケットを取得してSNMPのプロトコルとして正しく解析されていれば、
OKかと思います。エンコードの実装により送信メッセージの作成までは出来るようになりました。
次回は、受信メッセージのデコードの実装を行います。「C#でSNMPメッセージのデコーディングの実装のためのSNMP受信メッセージの見える化を行う」


