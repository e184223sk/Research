More than 1 year has passed since last update.Azure App Service が gRPC をデプロイ出来ない問題があるので悶々としてたのですが gRPC-Web プロトコルになりますが Azure App Service にデプロイできるみたいです！！ASP.NET Blog で gRPC-Web for .NET now available という記事でアナウンスされていました。ということでやってみましょう。参考ドキュメントはこちら: ブラウザー アプリでの gRPC の使用ASP.NET Core Web アプリケーションで空のプロジェクトから始めてみましょう。
まず、2 つのパッケージを追加します。どちらも執筆時点の最新の 2.30.0 を入れました。
とりあえずシンプルなハローワールド用の SayHello.proto をプロジェクトに追加します。プロジェクトファイルを開いて、Protobuf タグで上記ファイルを追加しておきます。適当にサービスも実装しておきましょう。では Startup.cs でサービスの登録をします。
その際に Configure で UseGrpcWeb を呼ぶのと MapGrpcService で EnableGrpcWeb を呼びます。サービスが沢山あって、全部で gRPC-Web を使いたい場合は UseGrpcWeb メソッドでデフォルトでオンにすることも出来ます。ブラウザーから呼ぶのが主目的なんでしょうが、私は gRPC を Azure WebApps にデプロイして .NET のクライアントから呼びたいのでコンソールアプリで作ります。コンソールアプリを作って以下のパッケージを追加します。そしてコンソールアプリのプロジェクトで接続済みサービスの追加で、サーバー側のプロジェクトに追加した SayHello.proto を追加します。クライアント側はシンプルに呼び出すだけにしました。サーバー側のプロジェクトを起動してコンソールアプリを起動すると以下のような結果になります。ここまでは OKAzure で適当に WebApps を作ってデプロイします。
私の場合は kaotagrpcweb という名前で WebApps を作ったので以下のようにクライアント側のコードを書き替えました。今度はサーバーは Azure にいるのでローカルのサーバーは立ち上げずにコンソールアプリだけを動かします。あっさり動き過ぎて怖いですが動きましたね！！最初にリンクをはったドキュメントにも書いてありますが以下の制限があります。引用します。従来の HTTP/2 による gRPC では、すべての方向でストリーミングがサポートされます。 gRPC-Web では、ストリーミングのサポートが制限されています。gRPC-Web を使用するときは、単項メソッドとサーバー ストリーミング メソッドのみを使用することをお勧めします。フル機能が使えるわけではないので、そこは注意が必要ですが簡単にタイプセーフな RPC サービスを作れるというメリットは享受できそうです。ブラウザーから呼び出す場合は追加の構成が必要になります。といっても REST API を作ってる人たちにはおなじみの CORS の設定です。
試しにローカルで ASP.NET Core の Blazor WebAssembly を使って先ほどの Azure にデプロイしたサービスを呼び出してみようと思います。適当に ASP.NET Core プロジェクトでホストされる Blazor WebAssembly プロジェクトを作って参照の追加と proto ファイルをプロジェクトに追加して Index.razor を以下のようにしました。このままローカル実行して Invoke ボタンを押しても以下のように真っ赤なエラーになります。わかりやすい CORS のエラーですね。CORS の設定が必要なことも最初に紹介したドキュメントページに書いてあります。サービス側のプロジェクトで C# で CORS の設定をしてもいいですが Azure WebApps だとポータルからも出来るでのポータルからやってみましょう。CORS の設定ページから以下のように入れるだけです。保存して再度ローカルから呼び出してみると…動きました。やったね！gRPC のフル機能が使えるわけではないですが gRPC-Web を使えば ASP.NET Core の gRPC のサービスを Azure の AppService にもデプロイして呼び出すことが出来ました。
これは個人的にはかなり嬉しいです。


