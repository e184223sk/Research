WPF アプリケーションにおける動的な多言語対応について、サードパーティーの WPFLocalizeExtension を用いた実装をまとめます。結論だけご覧になりたい方はこちら多言語化はすでに多くのブログ等で紹介されており、アプリの実行中に動的に切り替える方法もぐらばく様がまとめておられます。
ざっくりとですが、Properties.Resources をラップする変更通知を有したシングルトンを仲介させることで実現されています。WPF アプリの国際化 (多言語対応) と、実行中の動的な言語切り替え　私も以前は上記のシングルトンを挟んだ方法で多言語化を行っていましたが、新たに WPFLocalizeExtension を導入することで、実装の自由度が落ちるものの、仲介クラスが不要になり、Xaml をより短く記述できるようになりました。NuGet: WPFLocalizeExtension
Prism を使用したComposite Application の多言語対応このままでも良いのですが、添付プロパティの DefaultAssembly と DefaultDictionary は、言語リソースを使用するすべての View で指定が必要になり、やや冗長な印象です。実は、上記の Default 設定を C# 側から指定するためのメソッドが用意されています。
これを応用して、Prism を導入しかつ AutoWireViewModel の有効化が前提になりますが、一か所の記述ですべての View に反映させることができます。
NuGet: Prism.UnityView のインスタンスを受け取り ViewModel のインスタンスを生成する処理をフックできる SetDefaultViewModelFactory() を利用すれば、View の表示前に横断的に割り込みができるため、このタイミングで設定を済ませてしまいましょう。これによって、View の DefaultAssembly と DefaultDictionary の記述は不要になります。
（Prism はみなさん使ってるのであってもいいですよね、、）言語を切り替える際は以下のように指定します。　
以上


