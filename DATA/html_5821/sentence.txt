More than 3 years have passed since last update.この記事はIS17er Advent Calendar 2017用に作成されたものです。
多分このAdvent CalenderでUnityの話してるの私だけだと思います。UnityのEditor拡張、便利ですね。
私はノンリニアというゲーム創作サークルでいくつかのプロジェクトに携わっていますが、
やはり複数人開発をする上で、プログラマ以外の方にもUnityを操作してもらうことがあります。
特にデータ入力。変数名が羅列されているだけの無改造Inspectorビューにそのまま入力するのは、なかなか大変です。そこでEditor拡張で使いやすいUIに改造するわけですが、ここで疑問。
"using UnityEditor" すれば、EditorGUIのどこでも改造できてしまうのでしょうか？
Inspectorビューはかなり自由度が高いですが……実は、場所によってはかなり制約が厳しかったりします。この記事では、ユーザに全く素顔を見せてくれない区画の一つ、Projectビューを攻略していきます。
具体的には、指定したアセットパスのフォルダをProjectビュー上で選択・表示するメソッドを作っていきます。プロジェクトが大きくなっていくと、当然ながらProjectビューに表示されるフォルダ、ファイルはどんどん増えていきます。
当然、目当てのファイルを見つけるのにかかる時間も増えていきます。
検索やブックマーク機能があるので、普通はこれで対応していくわけですが……
いろいろな事情から、Scriptから特定のフォルダをProjectビュー上で開きたい！　という状況になったわけです。何かしらEditor拡張APIがあるだろう、と思ってリファレンスを読む私。
ええ、ないんですねこれが。
そもそもProjectビューの取得すら不可能。これは困った。ProjectWindowUtilなる公開APIが存在しますが、公式リファレンスが空白だったり（そもそも最新リファレンスには項目がない）、メモリリーク報告が上がっていたりと使い物になりません。フォルダ選択機能なかったし。
作りかけで放置されたクラスなんでしょうかね。しかしこれで諦めていたらこの記事は存在しません。Inspector上で登録されているファイルをクリックすると、Projectビュー上で該当ファイルのディレクトリが表示され、該当ファイルが黄色くハイライトされます。
（このハイライト操作のことを、UnityではPingと呼びます）これを利用して、表示したいフォルダに予めダミーファイルを入れておくことで、「フォルダを開く」ことができそうです。
PingのためのAPIは用意されているので、危ないことをせずに済みます。簡単ですね。
しかし、ダミーファイルをわざわざ作って置いておくのは面倒ですし、スマートじゃない。
Pingを使っているせいでどうでもいいファイルが無駄にハイライトされるのも美しくないですね。ただ純粋に、「フォルダを選択する」ことはできないのでしょうか。本題です。Projectビューの左カラム上でフォルダをクリックすれば、フォルダの中身が右カラムに表示されます。
ここで呼ばれているメソッドは、公開されているAPIにはないだけで、必ず内部に存在しているはずですね。
これを無理やり呼び出しにいきます。以降、using System.Reflection;が必要になります。
この時点で危なさ爆発です。
また、内部APIはUnityのバージョンアップによって予告なく仕様が変更される可能性があります。
本記事のコードを使うことで発生したいかなる不利益に関しても責任は負いかねます。
Unity2017.2で動作確認済みですが、ご利用は自己責任でどうぞ。適当なアセンブリブラウザでUnityEditor.dllを見ましょう。なお非公式ですが、以下のページでも全部見ることができます。
https://github.com/MattRix/UnityDecompiled/tree/master/UnityEditor
この記事では、必要に応じてこの中の各ページにリンクを張ったり引用したりします。
引用の際は行数を付記しておくので参考にどうぞ。2018/8/8追記：
公式に怒られたっぽいですね。
公式が公開してくれたこっちを見ましょう。
https://github.com/Unity-Technologies/UnityCsReference
なお同じコードが載っているかどうかは未確認です。ウィンドウの取得にはGetWindowメソッドが用意されていますが、引数としてウィンドウの型が必要です。Projectビューのクラス定義を見てみましょう。
クラス名はProjectBrowserですが、internalで宣言されているため、通常の方法ではアクセス不可能です。
Reflectionで無理やり引っ張り出しましょう。はい、これだけ。
Focus()等の基本的なEditorWindow関連APIであれば、もう使えます。というか、ここまではggれば出てくるんですよね。問題はここからです。それっぽいワードでProjectBrowserクラス内を検索すれば、メソッド本体は見つかります。対象フォルダのパスではなく、IDを引数に取っているようです。配列なのは複数選択のためでしょう。
Unityでメタ情報のIDと言えばGUIDですが、これはintに収まるわけがないので違いますね。
まあ、Asset関連情報ならAssetDatabaseでしょう――と思ってAssetDatabaseの公式リファレンスを見ても、int型のIDを取得するようなメソッドは見つかりません。一体IDとは何なのか？　この謎を解き明かすべく、我々はアマゾンの奥地へと向かった。
ProjectBrowserクラス内をうろついていると、IDを取得してそうな場所を発見。やっぱりAssetDatabaseじゃないか。
このGetFolderInstanceIDs()にパスの配列を渡せばよさそうですが、せっかくなのでAssetDatabaseの中身も見に行きましょう。こわちか。深入りするのはやめておきます。
今後Asset単体のIDを取得する必要が出てきたときはこれを使えばよさそうですね。分かりそうで分からない第二引数。直近の選択と枠を明らかにする、とはどういうことでしょうか。これをtrueにした場合の処理を追っていくと、インターフェースを経由して数々のソースファイルを巡り、最終的に以下のメソッドにたどり着きます。
UnityEditor.IMGUI.Controls.TreeViewDataSource.SetExpanded()
恐らくフォルダツリーの表示開閉に関わる処理だと思うのですが、
実験してみたところ、trueでもfalseでも見た目上特に何も変わらないという結果が得られました。
この記事ではとりあえずfalseにしておきます。何かしらの意味はあるはずなので、興味を持たれた方はぜひ解明してご教示ください。私はProjectBrowserクラスを読んでいて初めて知りました。
Projectビューの右上のメニューで"One Column Layout"を選択すると切り替えることができますが、正直使いにくいと思います。ProjectBrowserクラスを読んでみると、SetFolderSelection()は必ず２カラム表示の場合にのみ呼ばれるような処理の流れになっています。
１カラム表示の場合は呼ばないか、２カラム表示に切り替えてから呼ぶようにするべきでしょう。
今回は、２カラム表示に切り替える方針で実装します。表示切り替えのためのメソッドはこれのようです。
引数は列挙体なので、こちらも型を取得する必要がありますね。これ、boolでいいんじゃないですかね。将来的に別の表示モードが増えたりするんでしょうか。ともかく、これで準備は整いました。ここまでに挙げてきたメソッドや型をReflectionで引っ張り出し、Projectビューの取得と合わせて処理を記述します。
列挙体の型フルネームの形式に注意しましょう。クラス内部で宣言されている型は、接続部が"+"になります。また、Reflectionで取得したメソッドをInvokeする際、引数の渡し方に気をつける必要があります。返り値はobjectです。というわけで、最終的に出来上がったものが以下のメソッドになります。必要に応じて例外処理等を加えてください。
なおReflection関連は非常に重い処理なので、パフォーマンスが要求される場面ではご注意を。以上、なせば大抵なんとかなります。Reflectionは何でもできる反面、扱いを間違えると非常に危険です。
さらっと「これを使いましょう」などと挙げているメソッド類がほぼ全てprivateだったことにお気づきでしょうか。
用法・用量を守って正しくSystem.Reflection。


