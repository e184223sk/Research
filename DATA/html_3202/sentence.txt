ObjectPoolingは大量のオブジェクトを扱う際、メモリ割り当てをしないように一度生成したオブジェクトを常に使い回すための仕組みです。しかしObjectPoolは結構再開発されまくってて、目的・用途が様々になってきています。
なので、ここで一旦要件をまとめておきたいと思います。・プールされるオブジェクトはGameObjectのComponentである。
・GameObjectには必ず同じComponentがアタッチされている。
・プールされるオブジェクトは個体識別しない。
・プールされるオブジェクトに生成時、破棄時のコールバックが欲しい
・プールはシングルトン
・例外なくちゃんとエラーを吐いてくれるコードはGithubにあげています。プールするための配列はQueue&lt;T&gt;を使用しました。CreatePool(int)で許容量を設定しつつプールを生成します。
ここで許容量を設定するのは、許容量を超えた際にメモリの再割り当てが発生するのを防ぐためです。
また、普通のQueueとは少し違いプールの許容量を超えたら、再割り当てするかしないかをisFixedで設定することができます。（普通は自動で再割り当てされてしまう）Release()でプールからオブジェクトを取り出すことができます。
基本的に余計なことはしないスタンスなので、コールバックを呼び出しオブジェクトを取り出すだけの実装になっています。
ここで例外をキャッチしているのは、Pool.Dequeue()でプールが空の状態の時に例外を発生させるからです。ドキュメントによると、TryDequeue(out T)が使えるらしいのですが、恐らくバージョン的に存在しなかったため例外処理をしています。Catch(T)でコールバックを呼び出し、プールにオブジェクトを返却します。
IsFixedを指定した場合、CanDequeue()で弾かれて追加されるのを防ぎます。プールされるComponentにはIPoolable&lt;T&gt;の実装を強制します。
IPoolable&lt;T&gt;の実装はこのようになっています。EntityはIPoolableを実装するクラスのインスタンスを返させます。
OnReleased(), OnCatched()はそれぞれ生成時、破棄時に呼び出されます。
（キャッチアンドリリースってわかりやすい）ObjectPool&lt;継承するクラス, プールするクラス&gt;を継承して、利用することができます。
CreatePool(capacity, isFixed)でプールを作成し、DestroyPool()でプールを丸ごと破棄できます。取得と返却は先ほど言った通り、Release(), Catch(T)でできます。サンプルもリポジトリ内にあるので、活用してみてください。・そんなに多機能でもなく、Queue&lt;T&gt;を使ってるのでパフォーマンス的には問題ないはず、、？
・返却はCatch(IPoolable&lt;T&gt;)でinterfaceを渡している。暗黙的なキャストが発生しているので、ここがネック。
・Queue&lt;T&gt;を自作クラスでもっと軽量にすれば軽くできるかなと思った。


