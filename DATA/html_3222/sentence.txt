PCのマイクから音声を取得し、WAVE形式のファイルとして保存する。Windows 10
visual studio 2019
C#
Win32API(WinMM)
WPF（32bit）※WinMMが32bit対応のためソースコード
録音時間（秒数）をしてして、ボタン押下で録音開始。
録音完了後、ファイルダイアログを表示し録音データをWAVE形式のファイルとして保存する。
入力のデバイスをオープンする。
戻り値が「MMSYSERR_NOERROR(0)」の場合、正常終了。waveInOpen関数の引数「fdwOpen」に設定する値。通常の関数コールバックで受ける場合は、下記のように「dwCallback」をデリゲートにしてもいい。関数コールバックの引数の説明コールバックメッセージ録音時のデータ形式を設定する。入力デバイスをクローズする。戻り値が「MMSYSERR_NOERROR(0)」の場合、正常終了。録音データを格納する「WaveHdr構造体」を入力デバイスで使用できるよう準備する。戻り値が「MMSYSERR_NOERROR(0)」の場合、正常終了。waveInPrepareHeader関数で準備した「WaveHdr構造体」を開放する。録音中、C#では「WaveHdr構造体」がガーベージコレクタによって自動で開放されないようする必要がある。戻り値が「MMSYSERR_NOERROR(0)」の場合、正常終了。録音データを書き込むバッファ「WaveHdr構造体」を入力デバイスに追加する。戻り値が「MMSYSERR_NOERROR(0)」の場合、正常終了。入力デバイスからの録音をスタートする。
戻り値が「MMSYSERR_NOERROR(0)」の場合、正常終了。「_WaveProc 」「_WaveFormat」「_Hwi」はガーベージコレクタによって破棄されないようにする。ここではクラス変数を想定。録音は非同期で動作する。非同期でメッセージ受信録音データにWAVEヘッダを添付して、外部でも再生できるようにする。WAVEヘッダサイズは44バイト
最高4GBまでのファイルを扱うことができる。https://qiita.com/kob58im/items/aa6c7a4dc80946dbe3a7
https://github.com/ttsuki/ttsuki/blob/master/WinMM/WaveIO.cs
http://wisdom.sakura.ne.jp/system/winapi/media/mm7.html
http://eternalwindows.jp/winmm/wave/wave04.html
https://www.katto.comm.waseda.ac.jp/~katto/Class/01/GazoTokuron/code/audiocapture.html
https://kana-soft.com/tech/sample_0010_2.htm#WAVEFORMATEXhttps://docs.microsoft.com/en-us/previous-versions/dd743849(v=vs.85)
https://docs.microsoft.com/ja-jp/windows/win32/api/mmeapi/ns-mmeapi-wavehdr
https://docs.microsoft.com/ja-jp/windows/win32/api/mmeapi/ns-mmeapi-waveformatexhttps://tomosoft.jp/design/?p=9107
https://www.youfit.co.jp/archives/1418


