
// 1次元配列
var arr1 = new[] { "C", "D", "E", "F", "G", "A", "B"};
var s1 = arr1[0];                   // "C"：先頭から0番目の値を取得
var s2 = (string)arr1.GetValue(1);  // "D"：先頭から1番目の値を取得
var s3 = arr1[^1];                  // "B"：末尾から1個目の値を取得(C# 8.0-)
var s4 = arr1[^2];                  // "A"：末尾から2個目の値を取得(C# 8.0-)

// 多次元配列
var arr2 = new[,] { { "香", "桂", "銀", "金", "玉", "金", "銀", "桂" , "香" },
                    { "　", "飛", "　", "　", "　", "　", "　", "角" , "　" },
                    { "歩", "歩", "歩", "歩", "歩", "歩", "歩", "歩" , "歩" },
                    { "　", "　", "　", "　", "　", "　", "　", "　" , "　" },
                    { "　", "　", "　", "　", "　", "　", "　", "　" , "　" },
                    { "　", "　", "　", "　", "　", "　", "　", "　" , "　" },
                    { "歩", "歩", "歩", "歩", "歩", "歩", "歩", "歩" , "歩" },
                    { "　", "角", "　", "　", "　", "　", "　", "飛" , "　" },
                    { "香", "桂", "銀", "金", "王", "金", "銀", "桂" , "香" } };
var rook1 = arr2[1, 1];                   // "飛"
var rook2 = (string)arr2.GetValue(1, 1);  // "飛"

// ジャグ配列
var arr3 = new[] { new[] { "香", "桂", "銀", "金", "玉", "金", "銀", "桂" , "香" },
                   new[] { "　", "飛", "　", "　", "　", "　", "　", "角" , "　" },
                   new[] { "歩", "歩", "歩", "歩", "歩", "歩", "歩", "歩" , "歩" },
                   new[] { "　", "　", "　", "　", "　", "　", "　", "　" , "　" },
                   new[] { "　", "　", "　", "　", "　", "　", "　", "　" , "　" },
                   new[] { "　", "　", "　", "　", "　", "　", "　", "　" , "　" },
                   new[] { "歩", "歩", "歩", "歩", "歩", "歩", "歩", "歩" , "歩" },
                   new[] { "　", "角", "　", "　", "　", "　", "　", "飛" , "　" },
                   new[] { "香", "桂", "銀", "金", "王", "金", "銀", "桂" , "香" } };
var bishop1 = arr3[1][7];                                          // "角"
var bishop2 = (string)((string[])arr3.GetValue(1)).GetValue(7);    // "角"

