More than 3 years have passed since last update.というより、パスワードハッシュを簡易に使えるテンプレという側面が強いかも。
サポート対象を絞ればより良い解がありますが、今回は間口を広げたプラクティスです。※ パスワードハッシュや Salt ってなんぞやって方は、下記の記事で解りやすく解説されています。是非ご参照ください。
- パスワードはハッシュ化するだけで十分? | NTTデータ
- ユーザーのパスワードを安全に保管する方法について - 11月 - 2013 - ソフォス プレス リリース、セキュリティニュース、ソフォスに関するニュース記事 - Sophos Press Office | Sophos News and Press Releases読み易いようコードを要点のみに絞っているので、そのうちブラッシュアップして GitHub に上げる。
2018/06/29 追記: GitHub に上げました。"表 3: SP800-57 と SP800-131A での代表的な暗号アルゴリズムの取り扱いについて" IPA テクニカルウォッチ 『暗号をめぐる最近の話題』に関するレポート ↩"表 3 ： 目標とするセキュリティ強度を提供するために利用できるハッシュ関数 " NIST SP 800-57 Part 1 Rev. 4 鍵管理における 推奨事項 - IPA ↩.NET Framework 4.7.2+ / .NET Core 2.0+ をターゲットとすれば、HashAlgorithmName を引数に取る Rfc2898DeriveBytes コンストラクタを使用できる。 ↩Rfc2898DeriveBytes の代わりに Microsoft.AspNetCore.Cryptography.KeyDerivation.KeyDerivation.Pbkdf2() の使用も考えられる。 ↩Microsoft.AspNetCore.Identity.PasswordHasher もパラメーター込みの固有形式 HASHED PASSWORD FORMATS で出力する。 ↩OWASP の推奨値は 32 or 64 bytes。 ↩Microsoft.AspNetCore.Identity.PasswordHasher の既定値も 10,000 回、Microsoft Threat Modeling Tool ではなんと 150,000 回以上を推奨！ ↩https://tools.ietf.org/html/rfc2898#section-2 ↩「鍵導出関数からの出力を選択する際，根拠となる一方向関数の出力と長さが同じであるべきである(SHOULD)．」NIST SP800-63B ↩


