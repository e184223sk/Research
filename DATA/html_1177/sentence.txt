C++のconstexprに憧れて何か代用出来ないだろうかと考えていた時に
VContainerがILPostProcessorで最適化してたのを思い出して同じ手法を試してみようと思いました。リポジトリC#でconstexprの発想は@pCYSl5EDgo様の記事(
https://qiita.com/pCYSl5EDgo/items/5846ce9255bf81b37807 )でなるほどと思っていました、感謝します。目標として以下のコードが変換されれば良いでしょうILの変換をしないといけないのでCSharpの目標からILの目標に考え直してみますAssemblyDefinitionを取得するにはILPostProcessorの引数になっているICompiledAssemblyから変換しないといけません
単純には行かないようでECS,MLAPI,VContainerを見てみましたがどれもほぼECSのコピペだったのでそういうものだと思って使います
なので変換手順については解説 出来ませんしませんHashを参照しているAssemblyDefinitionの関数全てを取得してILの解析→上記のILコードがあり次第変換していきます。単純に特定の関数を使っているところを全検索して置き換えれるかどうか調べています。
置き換えれる物に関しては上記のようにIL命令2つを取り除いて新しい命令1つを挿入しています。
また別の箇所でJump命令等で参照されているので解決をしています。(前後は置き換え不要かも
Hashなのでこの段階で衝突チェックをしておくと実務では優しいと思います。本当に高速に動くか検証してみましょう
しっかりと動いててよかったです。ILも一応確認してみます(少し長いです)しっかり置き換わってますね。気軽にコンパイル時に処理を仕込めると様々な黒魔術ができそうですね。
ILPostProcessorの解説記事や最小構成のサンプルがなかったので書いてみました。
ILだけ触りたいのに他の部分調べるの面倒な人は参考にしてみてください ちなみにですが目的は高速化だけではなくHashにする前の文字列リテラルをソースコードに残らないというのも業務では嬉しいことではないでしょうか？　
UnityだとIL2CPPしてないものは簡単に見られてしまいますし、IL2CPPしても文字列リテラルは消えないので頑張れば見えてしまします。


