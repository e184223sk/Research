
using Mono.Cecil;
using Mono.Cecil.Cil;

static class Helper
{
    public static ILProcessor LdStr(this ILProcessor processor, string value)
    {
        processor.Append(Instruction.Create(OpCodes.Ldstr, value));
        return processor;
    }

    public static ILProcessor Call(this ILProcessor processor, MethodReference methodReference)
    {
        processor.Append(Instruction.Create(OpCodes.Call, methodReference));
        return processor;
    }

    public static ILProcessor Ret(this ILProcessor processor)
    {
        processor.Append(Instruction.Create(OpCodes.Ret));
        return processor;
    }

    public static ILProcessor LdArg(this ILProcessor processor, int index)
    {
        switch (index)
        {
            case 0:
                processor.Append(Instruction.Create(OpCodes.Ldarg_0));
                break;
            case 1:
                processor.Append(Instruction.Create(OpCodes.Ldarg_1));
                break;
            case 2:
                processor.Append(Instruction.Create(OpCodes.Ldarg_2));
                break;
            case 3:
                processor.Append(Instruction.Create(OpCodes.Ldarg_3));
                break;
            default:
                ParameterDefinition parameterDefinition = processor.Body.Method.Parameters[index];
                processor.Append(Instruction.Create(index &lt;= 255 ? OpCodes.Ldarg_S : OpCodes.Ldarg, parameterDefinition));
                break;
        }
        return processor;
    }
}

