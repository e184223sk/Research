
private static Instruction[] LoadConstantInt64(long value)
{
    Instruction[] answer;
    switch (value)
    {
        case -1:
            answer = new[]
            {
                Instruction.Create(OpCodes.Ldc_I4_M1),
                Instruction.Create(OpCodes.Conv_I8)
            };
            break;
        case 0:
            answer = new[]
            {
                Instruction.Create(OpCodes.Ldc_I4_0),
                Instruction.Create(OpCodes.Conv_I8)
            };
            break;
        case 1:
            answer = new[]
            {
                Instruction.Create(OpCodes.Ldc_I4_1),
                Instruction.Create(OpCodes.Conv_I8),
            };
            break;
        case 2:
            answer = new[]
            {
                Instruction.Create(OpCodes.Ldc_I4_2),
                Instruction.Create(OpCodes.Conv_I8),
            };
            break;
        case 3:
            answer = new[]
            {
                Instruction.Create(OpCodes.Ldc_I4_3),
                Instruction.Create(OpCodes.Conv_I8),
            };
            break;
        case 4:
            answer = new[]
            {
                Instruction.Create(OpCodes.Ldc_I4_4),
                Instruction.Create(OpCodes.Conv_I8),
            };
            break;
        case 5:
            answer = new[]
            {
                Instruction.Create(OpCodes.Ldc_I4_5),
                Instruction.Create(OpCodes.Conv_I8),
            };
            break;
        case 6:
            answer = new[]
            {
                Instruction.Create(OpCodes.Ldc_I4_6),
                Instruction.Create(OpCodes.Conv_I8),
            };
            break;
        case 7:
            answer = new[]
            {
                Instruction.Create(OpCodes.Ldc_I4_7),
                Instruction.Create(OpCodes.Conv_I8),
            };
            break;
        case 8:
            answer = new[]
            {
                Instruction.Create(OpCodes.Ldc_I4_8),
                Instruction.Create(OpCodes.Conv_I8),
            };
            break;
        default:
            if (value &lt;= sbyte.MaxValue &amp;&amp; value &gt;= sbyte.MinValue)
            {
                answer = new[]
                {
                    Instruction.Create(OpCodes.Ldc_I4_S, (sbyte)value),
                    Instruction.Create(OpCodes.Conv_I8),
                };
            }
            else if (value &lt;= int.MaxValue &amp;&amp; value &gt;= int.MinValue)
            {
                answer = new[]
                {
                    Instruction.Create(OpCodes.Ldc_I4, (int)value),
                    Instruction.Create(OpCodes.Conv_I8),
                };
            }
            else
            {
                answer = new[]
                {
                    Instruction.Create(OpCodes.Ldc_I8, value),
                };
            }
            break;
    }
    return answer;
}

