
using System.Linq;
using System.Text;
using Mono.Cecil;
using Mono.Cecil.Cil;
using Mono.Collections.Generic;

namespace SerializerGenerator
{
    static class Program
    {
        static void Main()
        {
            (ModuleDefinition systemModuleDefinition, ModuleDefinition baseModuleDefinition, TypeDefinition serializeAttributeTypeDefinition, ModuleDefinition mainModuleDefinition) = InitializeModules();
            CreateSerializers(mainModuleDefinition, serializeAttributeTypeDefinition, systemModuleDefinition, baseModuleDefinition);
            mainModuleDefinition.Write("../../../../SerializeTarget/bin/SerializeTarget.dll");
        }
        private static (ModuleDefinition systemModuleDefinition, ModuleDefinition baseModuleDefinition, TypeDefinition serializeAttributeTypeDefinition, ModuleDefinition mainModuleDefinition) InitializeModules()
        {
            ModuleDefinition systemModuleDefinition = GetSystemModule();
            ModuleDefinition baseModuleDefinition = GetModule("../../../../SerializeTarget/bin/Release/netstandard2.0/SerializeBase.dll");
            TypeDefinition serializeAttributeTypeDefinition = baseModuleDefinition.GetType("SerializeBase", "SerializeAttribute");
            ModuleDefinition mainModuleDefinition = GetModule("../../../../SerializeTarget/bin/Release/netstandard2.0/SerializeTarget.dll");
            return (systemModuleDefinition, baseModuleDefinition, serializeAttributeTypeDefinition, mainModuleDefinition);
        }

        private static void CreateSerializers(ModuleDefinition mainModuleDefinition, TypeDefinition serializeAttributeTypeDefinition, ModuleDefinition systemModuleDefinition, ModuleDefinition baseModuleDefinition)
        {
            TypeDefinition iSerializerDefinition = baseModuleDefinition.GetType("SerializeBase", "ISerializer`1");
            TypeReference iSerializerImportReference = mainModuleDefinition.ImportReference(iSerializerDefinition);
            TypeDefinition resolverTypeDefinition = baseModuleDefinition.GetType("SerializeBase", "ISerializerResolver");
            TypeReference resolverImportReference = mainModuleDefinition.ImportReference(resolverTypeDefinition);
            MethodReference objectCtorImportReference = mainModuleDefinition.ImportReference(systemModuleDefinition.GetType("System", "Object").Methods.First(x =&gt; x.Name == ".ctor"));
            MethodDefinition getMethodDefinition = resolverTypeDefinition.Methods.First(x =&gt; x.Name == "Get");

            int count = mainModuleDefinition.Types.Count;
            for (var i = 0; i &lt; count; i++)
            {
                TypeDefinition typeDefinition = mainModuleDefinition.Types[i];
                if (!typeDefinition.HasCustomAttributes) continue;
                if (!typeDefinition.HasFields) continue;
                if (typeDefinition.Fields.All(x =&gt; !x.IsPublic)) continue;
                if (typeDefinition.CustomAttributes.All(x =&gt; x.AttributeType.FullName != serializeAttributeTypeDefinition.FullName)) continue;
                mainModuleDefinition.Types.Add(CreateSerializer(typeDefinition, mainModuleDefinition, iSerializerDefinition, iSerializerImportReference, resolverImportReference, objectCtorImportReference, getMethodDefinition));
            }
        }

        private static TypeDefinition CreateSerializer(TypeDefinition typeDefinition, ModuleDefinition mainModuleDefinition, TypeDefinition iSerializerDefinition, TypeReference iSerializerImportReference, TypeReference resolverImportReference, MethodReference objectCtorImportReference, MethodDefinition getMethodDefinition)
        {
            TypeDefinition serializer = new TypeDefinition(
                typeDefinition.Namespace,
                typeDefinition.Name + "Serializer",
                TypeAttributes.Public | TypeAttributes.BeforeFieldInit | TypeAttributes.Sealed,
                mainModuleDefinition.TypeSystem.Object);

            FieldDefinition resolverFieldDefinition = DefineResolverFieldDefinition(resolverImportReference, serializer);
            DefineConstructor(mainModuleDefinition, serializer, resolverImportReference, resolverFieldDefinition, objectCtorImportReference);
            ImplementISerializer(typeDefinition, mainModuleDefinition, iSerializerDefinition, iSerializerImportReference, serializer, resolverFieldDefinition, getMethodDefinition);
            return serializer;
        }

        private static void ImplementISerializer(TypeDefinition typeDefinition, ModuleDefinition mainModuleDefinition, TypeDefinition iSerializerDefinition, TypeReference iSerializerImportReference, TypeDefinition serializer, FieldDefinition resolverFieldDefinition, MethodDefinition getMethodDefinition)
        {
            serializer.Interfaces.Add(new InterfaceImplementation(new GenericInstanceType(iSerializerImportReference)
            {
                GenericArguments = { typeDefinition }
            }));
            DefineTryWrite(typeDefinition, mainModuleDefinition, iSerializerDefinition, resolverFieldDefinition, serializer, getMethodDefinition);
        }

        private static void DefineTryWrite(TypeDefinition typeDefinition, ModuleDefinition mainModuleDefinition, TypeDefinition iSerializerDefinition, FieldDefinition resolverFieldDefinition, TypeDefinition serializer, MethodDefinition getMethodDefinition)
        {
            MethodDefinition tryWriteMethod = new MethodDefinition("TryWrite", MethodAttributes.HideBySig | MethodAttributes.Public | MethodAttributes.Final | MethodAttributes.NewSlot | MethodAttributes.Virtual, mainModuleDefinition.TypeSystem.Int64);
            ParameterDefinition valueParam = new ParameterDefinition("value", ParameterAttributes.None, typeDefinition);
            ParameterDefinition destinationParam = new ParameterDefinition("destination", ParameterAttributes.None, new PointerType(mainModuleDefinition.TypeSystem.Byte));
            ParameterDefinition capacityParam = new ParameterDefinition("capacity", ParameterAttributes.None, mainModuleDefinition.TypeSystem.Int64);
            tryWriteMethod.Parameters.Add(valueParam);
            tryWriteMethod.Parameters.Add(destinationParam);
            tryWriteMethod.Parameters.Add(capacityParam);

            FieldDefinition[] fieldArray = typeDefinition.Fields.Where(x =&gt; x.IsPublic).ToArray();

            ILProcessor processor = tryWriteMethod.Body.GetILProcessor();
            switch (fieldArray.Length)
            {
                case 0:
                    FillZeroField(processor);
                    break;
                case 1:
                    FillOneField(mainModuleDefinition, processor, iSerializerDefinition, fieldArray, Encoding.UTF8, resolverFieldDefinition, getMethodDefinition);
                    break;
                default:
                    FillFields(mainModuleDefinition, processor, iSerializerDefinition, fieldArray, Encoding.UTF8, resolverFieldDefinition, getMethodDefinition);
                    break;
            }
            serializer.Methods.Add(tryWriteMethod);
        }

        private static void FillFields(ModuleDefinition mainModuleDefinition, ILProcessor processor, TypeDefinition iSerializerDefinition, FieldDefinition[] fieldArray, Encoding utf8, FieldDefinition resolverFieldDefinition, MethodDefinition getMethodDefinition)
        {
            Collection&lt;VariableDefinition&gt; variableDefinitions = processor.Body.Variables;
            variableDefinitions.Add(new VariableDefinition(mainModuleDefinition.TypeSystem.Int64));
            variableDefinitions.Add(new VariableDefinition(new PointerType(mainModuleDefinition.TypeSystem.Byte)));
            variableDefinitions.Add(new VariableDefinition(mainModuleDefinition.TypeSystem.Int64));

            // ,:0
            long initialNeedLength = fieldArray.Aggregate(0, (accumulation, definition) =&gt; accumulation + utf8.GetByteCount(definition.Name)) + 1L + fieldArray.Length * 3L;

            Instruction il0000 = Instruction.Create(OpCodes.Ldloc_0);

            processor.Append(Instruction.Create(OpCodes.Ldc_I8, initialNeedLength));
            processor.Append(Instruction.Create(OpCodes.Dup));
            processor.Append(Instruction.Create(OpCodes.Neg));
            processor.Append(Instruction.Create(OpCodes.Stloc_0));
            processor.Append(Instruction.Create(OpCodes.Ldarg_3));
            processor.Append(Instruction.Create(OpCodes.Dup));
            processor.Append(Instruction.Create(OpCodes.Stloc_2));
            processor.Append(Instruction.Create(OpCodes.Bgt, il0000));

            processor.Append(Instruction.Create(OpCodes.Ldarg_2));
            WriteChar(processor, '{');

            WriteField(mainModuleDefinition, processor, iSerializerDefinition, utf8, resolverFieldDefinition, getMethodDefinition, fieldArray[0], il0000, ref initialNeedLength);

            for (var i = 1; i &lt; fieldArray.Length; i++)
            {
                processor.Append(Instruction.Create(OpCodes.Ldloc_1));
                processor.Append(Instruction.Create(OpCodes.Ldloc_0));
                processor.Append(Instruction.Create(OpCodes.Conv_I));
                processor.Append(Instruction.Create(OpCodes.Add));
                WriteChar(processor, ',');
                WriteField(mainModuleDefinition, processor, iSerializerDefinition, utf8, resolverFieldDefinition, getMethodDefinition, fieldArray[i], il0000, ref initialNeedLength);
            }

            processor.Append(Instruction.Create(OpCodes.Ldloc_1));
            processor.Append(Instruction.Create(OpCodes.Ldloc_0));
            processor.Append(Instruction.Create(OpCodes.Conv_I));
            processor.Append(Instruction.Create(OpCodes.Add));
            processor.Append(Instruction.Create(OpCodes.Ldc_I4_S, (sbyte)'}'));
            processor.Append(Instruction.Create(OpCodes.Stind_I1));

            processor.Append(Instruction.Create(OpCodes.Ldloc_2));
            processor.Append(Instruction.Create(OpCodes.Ldarg_3));
            processor.Append(Instruction.Create(OpCodes.Sub));
            processor.Append(Instruction.Create(OpCodes.Ret));

            processor.Append(il0000);
            processor.Append(Instruction.Create(OpCodes.Ldloc_2));
            processor.Append(Instruction.Create(OpCodes.Sub));
            processor.Append(Instruction.Create(OpCodes.Ldarg_3));
            processor.Append(Instruction.Create(OpCodes.Add));
            processor.Append(Instruction.Create(OpCodes.Ret));
        }

        private static void WriteField(ModuleDefinition mainModuleDefinition, ILProcessor processor, TypeDefinition iSerializerDefinition, Encoding utf8, FieldDefinition resolverFieldDefinition, MethodDefinition getMethodDefinition, FieldDefinition fieldDefinition, Instruction jumpDestinationWhenFail, ref long initialNeedLength)
        {
            byte[] nameBytes = utf8.GetBytes(fieldDefinition.Name);

            WriteName(processor, nameBytes);
            WriteChar(processor, ':');
            processor.Append(Instruction.Create(OpCodes.Stloc_1));

            processor.Append(Instruction.Create(OpCodes.Ldarg_3));
            processor.AppendRange(LoadConstantInt64(2L + nameBytes.LongLength));
            processor.Append(Instruction.Create(OpCodes.Sub));
            processor.Append(Instruction.Create(OpCodes.Starg_S, processor.Body.Method.Parameters[2]));

            processor.Append(Instruction.Create(OpCodes.Ldarg_0));
            processor.Append(Instruction.Create(OpCodes.Ldfld, resolverFieldDefinition));
            MethodReference getImportReference = mainModuleDefinition.ImportReference(new GenericInstanceMethod(getMethodDefinition)
            {
                GenericArguments = { fieldDefinition.FieldType }
            });
            processor.Append(Instruction.Create(OpCodes.Callvirt, getImportReference));

            processor.Append(Instruction.Create(OpCodes.Ldarg_1));
            processor.Append(Instruction.Create(OpCodes.Ldfld, fieldDefinition));
            processor.Append(Instruction.Create(OpCodes.Ldloc_1));
            processor.Append(Instruction.Create(OpCodes.Ldarg_3));
            MethodReference tryWriteImportReference = mainModuleDefinition.ImportReference(MakeHostInstanceGeneric(iSerializerDefinition.Methods[0], fieldDefinition.FieldType));
            processor.Append(Instruction.Create(OpCodes.Callvirt, tryWriteImportReference));

            processor.Append(Instruction.Create(OpCodes.Dup));
            processor.Append(Instruction.Create(OpCodes.Stloc_0));
            processor.Append(Instruction.Create(OpCodes.Ldc_I4_0));
            processor.Append(Instruction.Create(OpCodes.Conv_I8));
            processor.Append(Instruction.Create(OpCodes.Blt, jumpDestinationWhenFail));

            processor.Append(Instruction.Create(OpCodes.Ldarg_3));
            processor.Append(Instruction.Create(OpCodes.Ldloc_0));
            processor.Append(Instruction.Create(OpCodes.Sub));
            processor.Append(Instruction.Create(OpCodes.Dup));
            processor.Append(Instruction.Create(OpCodes.Starg_S, processor.Body.Method.Parameters[2]));
            initialNeedLength -= 3L + nameBytes.LongLength;
            processor.AppendRange(LoadConstantInt64(initialNeedLength));
            processor.Append(Instruction.Create(OpCodes.Blt, jumpDestinationWhenFail));
        }

        private static Instruction[] LoadConstantInt64(long value)
        {
            Instruction[] answer;
            switch (value)
            {
                case -1:
                    answer = new[]
                    {
                        Instruction.Create(OpCodes.Ldc_I4_M1),
                        Instruction.Create(OpCodes.Conv_I8)
                    };
                    break;
                case 0:
                    answer = new[]
                    {
                        Instruction.Create(OpCodes.Ldc_I4_0),
                        Instruction.Create(OpCodes.Conv_I8)
                    };
                    break;
                case 1:
                    answer = new[]
                    {
                        Instruction.Create(OpCodes.Ldc_I4_1),
                        Instruction.Create(OpCodes.Conv_I8),
                    };
                    break;
                case 2:
                    answer = new[]
                    {
                        Instruction.Create(OpCodes.Ldc_I4_2),
                        Instruction.Create(OpCodes.Conv_I8),
                    };
                    break;
                case 3:
                    answer = new[]
                    {
                        Instruction.Create(OpCodes.Ldc_I4_3),
                        Instruction.Create(OpCodes.Conv_I8),
                    };
                    break;
                case 4:
                    answer = new[]
                    {
                        Instruction.Create(OpCodes.Ldc_I4_4),
                        Instruction.Create(OpCodes.Conv_I8),
                    };
                    break;
                case 5:
                    answer = new[]
                    {
                        Instruction.Create(OpCodes.Ldc_I4_5),
                        Instruction.Create(OpCodes.Conv_I8),
                    };
                    break;
                case 6:
                    answer = new[]
                    {
                        Instruction.Create(OpCodes.Ldc_I4_6),
                        Instruction.Create(OpCodes.Conv_I8),
                    };
                    break;
                case 7:
                    answer = new[]
                    {
                        Instruction.Create(OpCodes.Ldc_I4_7),
                        Instruction.Create(OpCodes.Conv_I8),
                    };
                    break;
                case 8:
                    answer = new[]
                    {
                        Instruction.Create(OpCodes.Ldc_I4_8),
                        Instruction.Create(OpCodes.Conv_I8),
                    };
                    break;
                default:
                    if (value &lt;= sbyte.MaxValue &amp;&amp; value &gt;= sbyte.MinValue)
                    {
                        answer = new[]
                        {
                            Instruction.Create(OpCodes.Ldc_I4_S, (sbyte)value),
                            Instruction.Create(OpCodes.Conv_I8),
                        };
                    }
                    else if (value &lt;= int.MaxValue &amp;&amp; value &gt;= int.MinValue)
                    {
                        answer = new[]
                        {
                            Instruction.Create(OpCodes.Ldc_I4, (int)value),
                            Instruction.Create(OpCodes.Conv_I8),
                        };
                    }
                    else
                    {
                        answer = new[]
                        {
                            Instruction.Create(OpCodes.Ldc_I8, value),
                        };
                    }
                    break;
            }
            return answer;
        }

        private static void AppendRange(this ILProcessor processor, Instruction[] instructions)
        {
            for (var i = 0; i &lt; instructions.Length; i++)
            {
                processor.Append(instructions[i]);
            }
        }

        private static void FillOneField(ModuleDefinition mainModuleDefinition, ILProcessor processor, TypeDefinition iSerializerDefinition, FieldDefinition[] fieldArray, Encoding utf8, FieldDefinition resolverFieldDefinition, MethodDefinition getMethodDefinition)
        {
            Collection&lt;VariableDefinition&gt; variableDefinitions = processor.Body.Variables;
            variableDefinitions.Add(new VariableDefinition(mainModuleDefinition.TypeSystem.Int64));
            variableDefinitions.Add(new VariableDefinition(new PointerType(mainModuleDefinition.TypeSystem.Byte)));

            long initialNeedLength = utf8.GetByteCount(fieldArray[0].Name) + 4L;

            Instruction[] firstFailInstructions = LoadConstantInt64(-initialNeedLength);
            Instruction[] secondFailInstructions = LoadConstantInt64(-initialNeedLength + 1L);

            processor.Append(Instruction.Create(OpCodes.Ldarg_3));
            processor.Append(Instruction.Create(OpCodes.Ldc_I8, initialNeedLength));
            processor.Append(Instruction.Create(OpCodes.Blt_S, firstFailInstructions[0]));

            processor.Append(Instruction.Create(OpCodes.Ldarg_2));
            WriteChar(processor, '{');
            WriteField(mainModuleDefinition, processor, iSerializerDefinition, utf8, resolverFieldDefinition, getMethodDefinition, fieldArray[0], secondFailInstructions[0], ref initialNeedLength);

            processor.Append(Instruction.Create(OpCodes.Ldloc_1));
            processor.Append(Instruction.Create(OpCodes.Ldloc_0));
            processor.Append(Instruction.Create(OpCodes.Conv_I));
            processor.Append(Instruction.Create(OpCodes.Add));
            processor.Append(Instruction.Create(OpCodes.Ldc_I4_S, (sbyte)'}'));
            processor.Append(Instruction.Create(OpCodes.Stind_I1));
            processor.Append(Instruction.Create(OpCodes.Ldloc_0));
            processor.Append(Instruction.Create(OpCodes.Ldc_I8, initialNeedLength - 1L));
            processor.Append(Instruction.Create(OpCodes.Add));
            processor.Append(Instruction.Create(OpCodes.Ret));

            processor.AppendRange(secondFailInstructions);
            processor.Append(Instruction.Create(OpCodes.Ldloc_0));
            processor.Append(Instruction.Create(OpCodes.Add));
            processor.Append(Instruction.Create(OpCodes.Ret));

            processor.AppendRange(firstFailInstructions);
            processor.Append(Instruction.Create(OpCodes.Ret));
        }

        private static void WriteChar(ILProcessor processor, char character)
        {
            processor.Append(Instruction.Create(OpCodes.Dup));
            processor.Append(Instruction.Create(OpCodes.Ldc_I4_S, (sbyte)character));
            processor.Append(Instruction.Create(OpCodes.Stind_I1));
            processor.Append(Instruction.Create(OpCodes.Ldc_I4_1));
            processor.Append(Instruction.Create(OpCodes.Add));
        }

        private static void WriteName(ILProcessor processor, byte[] nameBytes)
        {
            for (var index = 0; index &lt; nameBytes.Length; index++)
            {
                WriteByte(processor, nameBytes[index]);
            }
        }

        private static void WriteByte(ILProcessor processor, byte character)
        {
            processor.Append(Instruction.Create(OpCodes.Dup));
            processor.Append(Instruction.Create(OpCodes.Ldc_I4_S, (sbyte)character));
            processor.Append(Instruction.Create(OpCodes.Stind_I1));
            processor.Append(Instruction.Create(OpCodes.Ldc_I4_1));
            processor.Append(Instruction.Create(OpCodes.Add));
        }

        private static void FillZeroField(ILProcessor processor)
        {
            Instruction il0000 = Instruction.Create(OpCodes.Ldc_I8, -2L);
            processor.Append(Instruction.Create(OpCodes.Ldarg_3));
            processor.Append(Instruction.Create(OpCodes.Ldc_I4_2));
            processor.Append(Instruction.Create(OpCodes.Blt_S, il0000));
            processor.Append(Instruction.Create(OpCodes.Ldarg_2));
            processor.Append(Instruction.Create(OpCodes.Dup));
            processor.Append(Instruction.Create(OpCodes.Ldc_I4_S, (sbyte)0x7B));
            processor.Append(Instruction.Create(OpCodes.Stind_I1));
            processor.Append(Instruction.Create(OpCodes.Ldc_I4_1));
            processor.Append(Instruction.Create(OpCodes.Add));
            processor.Append(Instruction.Create(OpCodes.Ldc_I4_S, (sbyte)0x7D));
            processor.Append(Instruction.Create(OpCodes.Stind_I1));
            processor.Append(Instruction.Create(OpCodes.Ldc_I8, 2L));
            processor.Append(Instruction.Create(OpCodes.Ret));
            processor.Append(il0000);
            processor.Append(Instruction.Create(OpCodes.Ret));
        }

        private static FieldDefinition DefineResolverFieldDefinition(TypeReference resolverTypeReference, TypeDefinition serializer)
        {
            FieldDefinition resolverFieldDefinition = new FieldDefinition("resolver", FieldAttributes.Private | FieldAttributes.InitOnly, resolverTypeReference);
            serializer.Fields.Add(resolverFieldDefinition);
            return resolverFieldDefinition;
        }

        private static void DefineConstructor(ModuleDefinition mainModuleDefinition, TypeDefinition serializer, TypeReference resolverTypeReference, FieldDefinition resolverFieldDefinition, MethodReference objectCtorImportReference)
        {
            MethodDefinition constructorMethodDefinition = new MethodDefinition(".ctor", MethodAttributes.Public | MethodAttributes.HideBySig | MethodAttributes.RTSpecialName | MethodAttributes.SpecialName, mainModuleDefinition.TypeSystem.Void);
            ParameterDefinition resolverParam = new ParameterDefinition("resolver", ParameterAttributes.None, resolverTypeReference);
            constructorMethodDefinition.Parameters.Add(resolverParam);
            ILProcessor processor = constructorMethodDefinition.Body.GetILProcessor();
            processor.Append(Instruction.Create(OpCodes.Ldarg_0));
            processor.Append(Instruction.Create(OpCodes.Call, objectCtorImportReference));
            processor.Append(Instruction.Create(OpCodes.Ldarg_0));
            processor.Append(Instruction.Create(OpCodes.Ldarg_1));
            processor.Append(Instruction.Create(OpCodes.Stfld, resolverFieldDefinition));
            processor.Append(Instruction.Create(OpCodes.Ret));
            serializer.Methods.Add(constructorMethodDefinition);
        }

        public static MethodReference MakeHostInstanceGeneric(MethodReference @this, params TypeReference[] genericArguments)
        {
            GenericInstanceType genericDeclaringType = new GenericInstanceType(@this.DeclaringType);
            foreach (TypeReference genericArgument in genericArguments)
            {
                genericDeclaringType.GenericArguments.Add(genericArgument);
            }

            MethodReference reference = new MethodReference(@this.Name, @this.ReturnType, genericDeclaringType)
            {
                HasThis = @this.HasThis,
                ExplicitThis = @this.ExplicitThis,
                CallingConvention = @this.CallingConvention
            };

            foreach (ParameterDefinition parameter in @this.Parameters)
            {
                reference.Parameters.Add(new ParameterDefinition(parameter.ParameterType));
            }

            foreach (GenericParameter genericParam in @this.GenericParameters)
            {
                reference.GenericParameters.Add(new GenericParameter(genericParam.Name, reference));
            }

            return reference;
        }

        private static ModuleDefinition GetSystemModule() =&gt; GetModule("C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\netstandard.library\\2.0.3\\build\\netstandard2.0\\ref\\netstandard.dll");
        private static ModuleDefinition GetModule(string path) =&gt; AssemblyDefinition.ReadAssembly(path).MainModule;
    }
}

