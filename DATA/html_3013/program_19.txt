
private static TypeDefinition CreateSerializer(TypeDefinition typeDefinition, ModuleDefinition mainModuleDefinition, TypeDefinition iSerializerDefinition, TypeReference iSerializerImportReference, TypeReference resolverImportReference, MethodReference objectCtorImportReference, MethodDefinition getMethodDefinition)
{
    TypeDefinition serializer = new TypeDefinition(
        typeDefinition.Namespace,
        typeDefinition.Name + "Serializer",
        TypeAttributes.Public | TypeAttributes.BeforeFieldInit | TypeAttributes.Sealed,
        mainModuleDefinition.TypeSystem.Object);

    FieldDefinition resolverFieldDefinition = DefineResolverFieldDefinition(resolverImportReference, serializer);
    DefineConstructor(mainModuleDefinition, serializer, resolverImportReference, resolverFieldDefinition, objectCtorImportReference);
    ImplementISerializer(typeDefinition, mainModuleDefinition, iSerializerDefinition, iSerializerImportReference, serializer, resolverFieldDefinition, getMethodDefinition);
    return serializer;
}

