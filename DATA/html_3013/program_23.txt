
private static void DefineTryWrite(TypeDefinition typeDefinition, ModuleDefinition mainModuleDefinition, TypeDefinition iSerializerDefinition, FieldDefinition resolverFieldDefinition, TypeDefinition serializer, MethodDefinition getMethodDefinition)
{
    MethodDefinition tryWriteMethod = new MethodDefinition("TryWrite", MethodAttributes.HideBySig | MethodAttributes.Public | MethodAttributes.Final | MethodAttributes.NewSlot | MethodAttributes.Virtual, mainModuleDefinition.TypeSystem.Int64);
    ParameterDefinition valueParam = new ParameterDefinition("value", ParameterAttributes.None, typeDefinition);
    ParameterDefinition destinationParam = new ParameterDefinition("destination", ParameterAttributes.None, new PointerType(mainModuleDefinition.TypeSystem.Byte));
    ParameterDefinition capacityParam = new ParameterDefinition("capacity", ParameterAttributes.None, mainModuleDefinition.TypeSystem.Int64);
    tryWriteMethod.Parameters.Add(valueParam);
    tryWriteMethod.Parameters.Add(destinationParam);
    tryWriteMethod.Parameters.Add(capacityParam);

    FieldDefinition[] fieldArray = typeDefinition.Fields.Where(x =&gt; x.IsPublic).ToArray();

    ILProcessor processor = tryWriteMethod.Body.GetILProcessor();
    switch (fieldArray.Length)
    {
        case 0:
            FillZeroField(processor);
            break;
        case 1:
            FillOneField(mainModuleDefinition, processor, iSerializerDefinition, fieldArray, Encoding.UTF8, resolverFieldDefinition, getMethodDefinition);
            break;
        default:
            FillFields(mainModuleDefinition, processor, iSerializerDefinition, fieldArray, Encoding.UTF8, resolverFieldDefinition, getMethodDefinition);
            break;
    }
    serializer.Methods.Add(tryWriteMethod);
}

