More than 1 year has passed since last update.SOLID原則の一つ、リスコフの置換原則について説明します。名前からなんだか難しそうだけど、実例を踏まえて見てみるとそんなことはないです。リスコフの置換原則は要するにたったこれだけです。
実例を踏まえて解説してみます。サンプルではISampleInterfaceというインターフェイスを引数としています。
実装者はISampleInterfaceのメンバではなく、それを実装したConcreteSample1クラスが持つHogehogeを使いたかったので、一度ConcreteSample1に変換をしてから、Hogehogeを使いましたとさ。Funcを使う人の視点に立ってみるとわかります。このFuncはConcreteSample1インスタンスありきのメソッドのため、使用者はConcleteSample1の存在を知りつつFuncを使わないといけません。
コメントででも書かれてないと別のインスタンスを入れると別の挙動をすることが使用者にはわからないです。
※コメントに書くのもやめましょう。静的にコンパイラによって判断してもらえることが最強のエラー対策です。開発者全員がFuncのことに想いを馳せつつ開発するのはよくないです。また、長期的に考えて、ConcreteSample2というクラスが作られたとします、その時
Funcに機能が不足していると、今現在の実装から違反例その２のようなことをしがちです。sample1がConcreteSample1に対して決め打ちしているのなら引数はConcreteSample1にすべきです。
使用者もConcreteSample1を渡すことがわかっていれば最初から渡します。このような実装に至るのは私が考えるに２パターンぐらいあって２つ目のパターンですが例としてデスクトップ上にあるオブジェクトを想像してみてください。
要件としてはダブルクリックした場合オブジェクトに応じて以下のことをしますこういう要件が与えられた際に、以下のことをすることを思いついてませんか？現実のプロジェクトは後から要件を追加されることもあります。ということでフォルダに対して仕様を追加してみます。さて、また新しく要件が追加されました。新しく追加されたショートカットというオブジェクトは、何か別のオブジェクトに紐づいていて
ダブルクリックの動作はそのオブジェクトの挙動と同じ挙動を取ります。こうなってくるとDoubleClickというメソッドはとてつもなく長い処理になります（いわゆる神メソッドというやつです）。
しかし、その中で行っているのはおおかた条件分岐であり、ほぼほぼ関係のない処理の割合が増えることになってます。
テストすることを考えてみましょう。
DoubleClickというメソッドをテストする際に一体テスターはどれだけの準備が必要になるだろうかと。。。今回の場合は引数を変更する場合は使えません。そういう時はそもそもそFunc内部での条件分岐はそこでする必要があったのか？を考えてみると解決するかもしれないです。
実際の挙動が確定するのはもっと前の段階で、それはインスタンスが生成されるときなのです。ファクトリを定義する実装は例その１と同じようにスリムになります実際に使ってみるこうすることでDoubleClickの例で言うと、一つ一つのテストが１クラスにまとまってやりやすくなったと思います。と、ここまで熱弁したものの必ず改善しなければいけないというわけではないです。
これを改善するために例えば修正が多岐にわたるようであるとかならば、課題にして後回しにするという判断も時には有効です。
ですが、この実装を続けるとプログラムはガタガタになっていきます。
モチベーションも下がる一方で、開発生産性も非常に悪くなっていきます（先の例で言うとショートカットが仕様として追加された時点で、変更をしなければいけない箇所を特定するのに時間がかかります）。そうならないために、開発者は日々いいコードと悪いコードを探求する心が大事ですよね。


