Button, Toggle, Slider, Dropdown, Window, …。
徹夜して UI パーツの Prefab を沢山用意したぞ！100個以上はあるかも！これでゲームが作れる！そうだ！Project タブからドラッグするのも大変だから、Hierarchy で右クリックした時に出るこのメニューに追加して出しやすくしよう！
はあはあ…いつの間にか夜になっちゃった…
このコード今後のメンテもめんどくさいな…
そうだ！ゲーム作るのやめよう。
ところで記事の続きをお読みください。指定したディレクトリ配下を対象にした Prefab 一覧を階層構造で表示し、選択した Prefab を配置する Editor 拡張を作成してみました。
以下の gif が実際の動作例です。
画面左側の Project タブの構造が、画面中央に出てくるメニューに反映されています。Prefab を作ったら任意のディレクトリ配下に入れるだけなので楽です。

プロジェクト内に様々なファイルが多くある場合、Project タブ内で毎回絞り込んでドラッグするのは地味に手間ですから、少し便利になりました。
因みに先ほどの茶番では UI を例に話していましたが特に UI に限らず使えます。先ほどの見ていただいた Editor 拡張のメニューですが、インスペクタでよく見る Add Component を押した時に出る以下のようなメニューに見た目が近かったと思います。

実際の Add Component ボタン押下時のメニュー処理は UnityEditor.AddComponent.AddComponentWindow クラスで実装されていますが、こちらは internal になっておりなおかつ拡張性はありません。UnityEditor.Experimental.GraphView.SearchWindow を利用することで似たような見た目のウィンドウを作成できます。namespace からもわかる通り、本来は ShaderGraph, VFXGraph などで利用されている GraphView の機能の一部で、 2019.4.14f1 時点では Experimental となっております。利用するまでの手順としては ISearchWindowProvider を実装したクラス作成して SearchWindow.Open に渡すだけとなっており、結構簡単です。以下のようなファイルパスのリストをソースとした場合に最終的には以下のような構造を求められるので、少しだけ変換する手間が必要です。パスのリストについて Split('/') して階層を確認しつつ前後の要素と比較して level も含めて適切に GroupEntry を挿入する必要がありますね。
該当箇所の実装はこのような感じになりました


IEnumerable&lt;SearchTreeEntry&gt; DataToEntries(IEnumerable&lt;Data&gt; dataList)
{
    yield return new SearchTreeGroupEntry(new GUIContent("Select Prefab"));
    var data2 = default(Data); // 1 = current, 2 = prev
    foreach (var data1 in dataList)
    {
        // DirectoryNames は、アセットパスを Path.GetDirectoryName したのち Split('/') した配列です
        var directoryNames1 = data1?.DirectoryNames;
        var directoryNames2 = data2?.DirectoryNames;
        var level = 1;
        var max = Max
        (
            directoryNames1?.Length ?? 0,
            directoryNames2?.Length ?? 0
        );
        for (var i = 0; i &lt; max; i++)
        {
            var name1 = directoryNames1?.ElementAtOrDefault(i);
            var name2 = directoryNames2?.ElementAtOrDefault(i);
            if (string.IsNullOrEmpty(name1))
            {
                break;
            }
            if (string.IsNullOrEmpty(name2))
            {
                yield return new SearchTreeGroupEntry(new GUIContent(name1)) {level = level};
            }
            else if (name1 != name2)
            {
                yield return new SearchTreeGroupEntry(new GUIContent(name1)) {level = level};
                i = max;
            }
            level++;
        }
        yield return new SearchTreeEntry(new GUIContent(data1.FileName, Constants.IconPrefab)) {level = level, userData = data1.AssetPath};
        data2 = data1;
    }
}


使い方としては以下のような形で登録します。この記事は KLab 2020 Advent Calendar の 12/3 の記事でした。


