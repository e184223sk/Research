
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using YamlDotNet.Serialization;

namespace precure_initial
{
    class Program
    {
        /// &lt;summary&gt;
        /// rubicure/config のパス
        /// &lt;/summary&gt;
        static readonly string rubicureConfigPath = "../../rubicure/config/";

        class Series
        {
            // 省略
        }

        class Precure
        {
            // 省略
        }

        static void Main(string[] args)
        {
            Dictionary&lt;string, Series&gt; seriesList = LoadSeries();
            Dictionary&lt;string, Precure&gt; precureList = LoadPrecures();
            foreach (var series in seriesList)
            {
                OutputPrecureList(series.Value.Name, series.Value.PrecureKeys, precureList);
            }
        }

        static Dictionary&lt;string, Series&gt; LoadSeries()
        {
            // 省略
        }

        static Dictionary&lt;string, Precure&gt; LoadPrecures()
        {
            // 省略
        }

        /// &lt;summary&gt;
        /// プリキュアリストを出力する.
        /// &lt;/summary&gt;
        /// &lt;param name="seriesName"&gt;シリーズ名&lt;/param&gt;
        /// &lt;param name="precures"&gt;シリーズプリキュアキーリスト&lt;/param&gt;
        /// &lt;param name="precureList"&gt;プリキュアリスト&lt;/param&gt;
        static void OutputPrecureList(string seriesName, List&lt;string&gt; precures, Dictionary&lt;string, Precure&gt; precureList)
        {
            Console.WriteLine(seriesName);
            Console.WriteLine("プリキュア名,英語,頭文字");
            // イニシャルリスト
            List&lt;string&gt; precureInitials = new List&lt;string&gt;();
            // イニシャル重複チェック
            bool initialsConflict = false;
            foreach (var precureKey in precures)
            {
                if (!precureList.TryGetValue(precureKey, out Precure precure))
                {
                    // 万が一取得できなかった場合はスキップする
                    continue;
                }
                if (precureInitials.Contains(precure.Initial))
                {
                    initialsConflict = true;
                }
                precureInitials.Add(precure.Initial);
                Console.WriteLine($"{precure.PrecureName},{precure.GirlName},{precure.Initial}");
            }
            Console.WriteLine($"人数：{precureInitials.Count}");
            Console.WriteLine($"かぶり：{(initialsConflict ? "あり" : "なし")}");
            Console.WriteLine();
        }

        private static string ToPascal(string text)
        {
            // 省略
        }
    }
}


