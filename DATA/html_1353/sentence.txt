Q.プリキュアを頭文字だけで区別することはできるか
A.作品による本記事の内容は、2021年9月5日（「トロピカル～ジュ！プリキュア」本編第27話まで放送済み）時点での状況を元に記載しています。
以下、特記のない限り「現在」はこの日時点をさします。現在放送中「トロピカル～ジュ！プリキュア」（←ABCサイトへリンク）のプリキュアは次の5人です。
※第27話時点それぞれ英語で書く1と、となり、「S」「C」「P」「F」「L」で一意に識別することができます。この2つ前の作品「スター☆トゥインクルプリキュア」（←東映アニメーションサイトへリンク）ではどうでしょうか？2Sで3人かぶりがあります。というように、作品によってプリキュアを頭文字だけで区別することはできるか否かが変わります。果たして、第1作「ふたりはプリキュア」（←東映アニメーションサイトへリンク）から、第18作「トロピカル～ジュ！プリキュア」まで、どうなっているのでしょうか？
というのをいちいち調べているのもあれなので、プログラムを作って確認してみることとします。なお、頭文字を設定する際には、「キュア」は省くものとします（そうしないと「Cure」の「C」が多数を占めてしまうため）。原則的に、テレビシリーズで登場したプリキュアに限定します。
なので、映画のみに登場している「キュアエコー」は対象外となります。プログラムはここに置いておきます。
Hokkaidosm/precure_initialhttps://github.com/sue445/rubicure/tree/master/config/series.yml からシリーズデータを取得します。
シリーズデータには、「シリーズ名」と「登場するプリキュアのキー」を含みます。長いので折りたたむルン


Program.cs
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using YamlDotNet.Serialization;

namespace precure_initial
{
    class Program
    {
        /// &lt;summary&gt;
        /// rubicure/config のパス
        /// &lt;/summary&gt;
        static readonly string rubicureConfigPath = "../../rubicure/config/";

        /// &lt;summary&gt;
        /// シリーズデータ.
        /// &lt;/summary&gt;
        class Series
        {
            /// &lt;summary&gt;
            /// シリーズ名.
            /// &lt;/summary&gt;
            public string Name { get; set; }

            /// &lt;summary&gt;
            /// シリーズに出演するプリキュアのキー.
            /// &lt;/summary&gt;
            public List&lt;string&gt; PrecureKeys { get; set; }
        }

        static void Main(string[] args)
        {
            Dictionary&lt;string, Series&gt; seriesList = LoadSeries();
            foreach (var series in seriesList)
            {
                Console.WriteLine($"シリーズキー：{series.Key}");
                Console.WriteLine($"シリーズ名：{series.Value.Name}");
                Console.WriteLine($"プリキュアキー：[{string.Join(", ", series.Value.PrecureKeys)}]");
                Console.WriteLine();
            }
        }

        /// &lt;summary&gt;
        /// rubicure/config/series.yml からシリーズキーとシリーズデータを取得する.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;シリーズキーをキーとする&lt;code&gt;Dictionary&lt;/code&gt;.&lt;/returns&gt;
        static Dictionary&lt;string, Series&gt; LoadSeries()
        {
            var filePath = rubicureConfigPath + "series.yml";
            var input = new StreamReader(filePath, Encoding.UTF8);
            var deserializer = new Deserializer();

            Dictionary&lt;string, Dictionary&lt;string, object&gt;&gt; series_tmp = deserializer.Deserialize&lt;Dictionary&lt;string, Dictionary&lt;string, object&gt;&gt;&gt;(input);
            var series_directory = new Dictionary&lt;string, Series&gt;();
            foreach (var series in series_tmp)
            {
                if (series.Value.Count == 1)
                {
                    // エイリアスは飛ばす
                    continue;
                }
                series.Value.TryGetValue("title", out object seriesName);
                series.Value.TryGetValue("girls", out object precureList);
                List&lt;string&gt; precures = new List&lt;string&gt;();
                foreach (var precure in (List&lt;object&gt;)precureList)
                {
                    precures.Add((string)precure);
                }
                series_directory.Add(series.Key, new Series {
                    Name = (string)seriesName,
                    PrecureKeys = precures
                });
            }
            return series_directory;
        }
    }
}




このときの出力はこんな感じになります3。長いので折りたたむルン

シリーズキー：unmarked
シリーズ名：ふたりはプリキュア
プリキュアキー：[cure_black, cure_white]

シリーズキー：max_heart
シリーズ名：ふたりはプリキュア Max Heart
プリキュアキー：[cure_black, cure_white, shiny_luminous]

シリーズキー：splash_star
シリーズ名：ふたりはプリキュア Splash☆Star
プリキュアキー：[cure_bloom, cure_egret]

シリーズキー：yes
シリーズ名：Yes！ プリキュア5
プリキュアキー：[cure_dream, cure_rouge, cure_lemonade, cure_mint, cure_aqua]

シリーズキー：yes_gogo
シリーズ名：Yes！ プリキュア5 Go Go！
プリキュアキー：[cure_dream, cure_rouge, cure_lemonade, cure_mint, cure_aqua, milky_rose]

シリーズキー：fresh
シリーズ名：フレッシュプリキュア！
プリキュアキー：[cure_peach, cure_berry, cure_pine, cure_passion]

シリーズキー：heart_catch
シリーズ名：ハートキャッチプリキュア！
プリキュアキー：[cure_blossom, cure_marine, cure_sunshine, cure_moonlight]

シリーズキー：suite
シリーズ名：スイートプリキュア♪
プリキュアキー：[cure_melody, cure_rhythm, cure_beat, cure_muse]

シリーズキー：smile
シリーズ名：スマイルプリキュア！
プリキュアキー：[cure_happy, cure_sunny, cure_peace, cure_march, cure_beauty]

シリーズキー：dokidoki
シリーズ名：ドキドキ！プリキュア
プリキュアキー：[cure_heart, cure_diamond, cure_rosetta, cure_sword, cure_ace]

シリーズキー：happiness_charge
シリーズ名：ハピネスチャージプリキュア！
プリキュアキー：[cure_lovely, cure_princess, cure_honey, cure_fortune]

シリーズキー：go_princess
シリーズ名：Go!プリンセスプリキュア
プリキュアキー：[cure_flora, cure_mermaid, cure_twinkle, cure_scarlet]

シリーズキー：maho_girls
シリーズ名：魔法つかいプリキュア！
プリキュアキー：[cure_miracle, cure_magical, cure_felice]

シリーズキー：a_la_mode
シリーズ名：キラキラ☆プリキュアアラモード
プリキュアキー：[cure_whip, cure_custard, cure_gelato, cure_macaron, cure_chocolat, cure_parfait]

シリーズキー：hugtto
シリーズ名：ＨＵＧっと！プリキュア
プリキュアキー：[cure_yell, cure_ange, cure_etoile, cure_macherie, cure_amour]

シリーズキー：star_twinkle
シリーズ名：スター☆トゥインクルプリキュア
プリキュアキー：[cure_star, cure_milky, cure_soleil, cure_selene, cure_cosmo]

シリーズキー：healingood
シリーズ名：ヒーリングっど?プリキュア
プリキュアキー：[cure_grace, cure_fontaine, cure_sparkle, cure_earth]

シリーズキー：tropical_rouge
シリーズ名：トロピカル～ジュ！プリキュア
プリキュアキー：[cure_summer, cure_coral, cure_papaya, cure_flamingo, cure_lamer]


各シリーズのプリキュアのデータは、 https://github.com/sue445/rubicure/tree/master/config/girls/ 以下にYAML形式で入っています。
それぞれのファイルには、それぞれのシリーズで初めて登場したプリキュアのデータのみが含まれています。例）キュアブラックとキュアホワイトは「ふたりはプリキュア」と「ふたりはプリキュア Max Heart」の両方に登場していますが、最初に登場した「ふたりはプリキュア」のファイル 001_unmarked.yml にのみデータが含まれています。ということで、いったん全てのプリキュアのデータを取り込みます。長いので折りたたむニャン


Program.cs
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using YamlDotNet.Serialization;

namespace precure_initial
{
    class Program
    {
        /// &lt;summary&gt;
        /// rubicure/config のパス
        /// &lt;/summary&gt;
        static readonly string rubicureConfigPath = "../../rubicure/config/";

        class Series
        {
            // 省略
        }

        /// &lt;summary&gt;
        /// プリキュアデータ.
        /// &lt;/summary&gt;
        class Precure
        {
            /// &lt;summary&gt;
            /// プリキュア英語名.
            /// &lt;/summary&gt;
            public string GirlName { get; set; }

            /// &lt;summary&gt;
            /// プリキュア日本語名.
            /// &lt;/summary&gt;
            public string PrecureName { get; set; }

            /// &lt;summary&gt;
            /// イニシャル.
            /// &lt;/summary&gt;
            public string Initial { get; set; }
        }

        static void Main(string[] args)
        {
            Dictionary&lt;string, Series&gt; seriesList = LoadSeries();
            Dictionary&lt;string, Precure&gt; precureList = LoadPrecures();
            foreach (var precure in precureList)
            {
                Console.WriteLine($"プリキュアキー：{precure.Key}");
                Console.WriteLine($"プリキュア名：{precure.Value.PrecureName} / {precure.Value.GirlName}");
                Console.WriteLine($"頭文字：{precure.Value.Initial}");
                Console.WriteLine();
            }
        }

        static Dictionary&lt;string, Series&gt; LoadSeries()
        {
            // 省略
        }

        /// &lt;summary&gt;
        /// 全てのプリキュアのデータを読み込む.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;プリキュアキーをキーとする&lt;code&gt;Dictionary&lt;/code&gt;.&lt;/returns&gt;
        static Dictionary&lt;string, Precure&gt; LoadPrecures()
        {
            Dictionary&lt;string, Precure&gt; precures = new Dictionary&lt;string, Precure&gt;();
            var rootPath = rubicureConfigPath + "girls/";
            string[] files = Directory.GetFiles(rootPath, "*.yml", SearchOption.TopDirectoryOnly);
            foreach (string file in files)
            {
                var input = new StreamReader(file, Encoding.UTF8);
                var deserializer = new Deserializer();
                Dictionary&lt;string, Dictionary&lt;string, object&gt;&gt; girls_tmp = deserializer.Deserialize&lt;Dictionary&lt;string, Dictionary&lt;string, object&gt;&gt;&gt;(input);
                foreach (var girl in girls_tmp)
                {
                    if (girl.Value.Count == 1)
                    {
                        // エイリアスは飛ばす
                        continue;
                    }
                    string girlName = girl.Key, precureName = null;
                    if (girl.Value.TryGetValue("precure_name", out object precureNameObj))
                    {
                        precureName = (string)precureNameObj;
                    }
                    girlName = ToPascal(girlName);
                    string initial = girlName.Replace("Cure ", "").Substring(0, 1);
                    precures.Add(girl.Key, new Precure {
                        GirlName = girlName,
                        PrecureName = precureName,
                        Initial = initial
                    });
                }
            }
            return precures;
        }

        /// &lt;summary&gt;
        /// cure_black =&gt; Cure Blackのような変換
        /// ref. https://increment-i.hateblo.jp/entry/csharp/regularexpression/pascal
        /// &lt;/summary&gt;
        /// &lt;param name="text"&gt;変換元&lt;/param&gt;
        /// &lt;returns&gt;変換結果&lt;/returns&gt;
        private static string ToPascal(string text)
        {
            return Regex.Replace(
                text.Replace("_", " "),
                @"\b[a-z]",
                match =&gt; match.Value.ToUpper());
        }
    }
}




※上記 ToPascal は 正規表現を利用して Pascal 形式に変換する - C# - インクリメンタルなカイハツにっき 記載のコードを一部変更したものです。このときの出力はこんな感じになります4。長いので折りたたむニャン

プリキュアキー：cure_black
プリキュア名：キュアブラック / Cure Black
頭文字：B

プリキュアキー：cure_white
プリキュア名：キュアホワイト / Cure White
頭文字：W

プリキュアキー：shiny_luminous
プリキュア名：シャイニールミナス / Shiny Luminous
頭文字：S

プリキュアキー：cure_bloom
プリキュア名：キュアブルーム / Cure Bloom
頭文字：B

プリキュアキー：cure_egret
プリキュア名：キュアイーグレット / Cure Egret
頭文字：E

プリキュアキー：cure_bright
プリキュア名：キュアブライト / Cure Bright
頭文字：B

プリキュアキー：cure_windy
プリキュア名：キュアウィンディ / Cure Windy
頭文字：W

プリキュアキー：cure_dream
プリキュア名：キュアドリーム / Cure Dream
頭文字：D

プリキュアキー：cure_rouge
プリキュア名：キュアルージュ / Cure Rouge
頭文字：R

プリキュアキー：cure_lemonade
プリキュア名：キュアレモネード / Cure Lemonade
頭文字：L

プリキュアキー：cure_mint
プリキュア名：キュアミント / Cure Mint
頭文字：M

プリキュアキー：cure_aqua
プリキュア名：キュアアクア / Cure Aqua
頭文字：A

プリキュアキー：milky_rose
プリキュア名：ミルキィローズ / Milky Rose
頭文字：M

プリキュアキー：cure_peach
プリキュア名：キュアピーチ / Cure Peach
頭文字：P

プリキュアキー：cure_berry
プリキュア名：キュアベリー / Cure Berry
頭文字：B

プリキュアキー：cure_pine
プリキュア名：キュアパイン / Cure Pine
頭文字：P

プリキュアキー：cure_passion
プリキュア名：キュアパッション / Cure Passion
頭文字：P

プリキュアキー：cure_blossom
プリキュア名：キュアブロッサム / Cure Blossom
頭文字：B

プリキュアキー：cure_marine
プリキュア名：キュアマリン / Cure Marine
頭文字：M

プリキュアキー：cure_sunshine
プリキュア名：キュアサンシャイン / Cure Sunshine
頭文字：S

プリキュアキー：cure_moonlight
プリキュア名：キュアムーンライト / Cure Moonlight
頭文字：M

プリキュアキー：cure_melody
プリキュア名：キュアメロディ / Cure Melody
頭文字：M

プリキュアキー：cure_rhythm
プリキュア名：キュアリズム / Cure Rhythm
頭文字：R

プリキュアキー：cure_beat
プリキュア名：キュアビート / Cure Beat
頭文字：B

プリキュアキー：cure_muse
プリキュア名：キュアミューズ / Cure Muse
頭文字：M

プリキュアキー：cure_happy
プリキュア名：キュアハッピー / Cure Happy
頭文字：H

プリキュアキー：cure_sunny
プリキュア名：キュアサニー / Cure Sunny
頭文字：S

プリキュアキー：cure_peace
プリキュア名：キュアピース / Cure Peace
頭文字：P

プリキュアキー：cure_march
プリキュア名：キュアマーチ / Cure March
頭文字：M

プリキュアキー：cure_beauty
プリキュア名：キュアビューティ / Cure Beauty
頭文字：B

プリキュアキー：cure_heart
プリキュア名：キュアハート / Cure Heart
頭文字：H

プリキュアキー：cure_diamond
プリキュア名：キュアダイヤモンド / Cure Diamond
頭文字：D

プリキュアキー：cure_rosetta
プリキュア名：キュアロゼッタ / Cure Rosetta
頭文字：R

プリキュアキー：cure_sword
プリキュア名：キュアソード / Cure Sword
頭文字：S

プリキュアキー：cure_ace
プリキュア名：キュアエース / Cure Ace
頭文字：A

プリキュアキー：cure_lovely
プリキュア名：キュアラブリー / Cure Lovely
頭文字：L

プリキュアキー：cure_princess
プリキュア名：キュアプリンセス / Cure Princess
頭文字：P

プリキュアキー：cure_honey
プリキュア名：キュアハニー / Cure Honey
頭文字：H

プリキュアキー：cure_fortune
プリキュア名：キュアフォーチュン / Cure Fortune
頭文字：F

プリキュアキー：cure_flora
プリキュア名：キュアフローラ / Cure Flora
頭文字：F

プリキュアキー：cure_mermaid
プリキュア名：キュアマーメイド / Cure Mermaid
頭文字：M

プリキュアキー：cure_twinkle
プリキュア名：キュアトゥインクル / Cure Twinkle
頭文字：T

プリキュアキー：cure_scarlet
プリキュア名：キュアスカーレット / Cure Scarlet
頭文字：S

プリキュアキー：cure_miracle
プリキュア名：キュアミラクル / Cure Miracle
頭文字：M

プリキュアキー：cure_magical
プリキュア名：キュアマジカル / Cure Magical
頭文字：M

プリキュアキー：cure_felice
プリキュア名：キュアフェリーチェ / Cure Felice
頭文字：F

プリキュアキー：cure_whip
プリキュア名：キュアホイップ / Cure Whip
頭文字：W

プリキュアキー：cure_custard
プリキュア名：キュアカスタード / Cure Custard
頭文字：C

プリキュアキー：cure_gelato
プリキュア名：キュアジェラート / Cure Gelato
頭文字：G

プリキュアキー：cure_macaron
プリキュア名：キュアマカロン / Cure Macaron
頭文字：M

プリキュアキー：cure_chocolat
プリキュア名：キュアショコラ / Cure Chocolat
頭文字：C

プリキュアキー：cure_parfait
プリキュア名：キュアパルフェ / Cure Parfait
頭文字：P

プリキュアキー：cure_yell
プリキュア名：キュアエール / Cure Yell
頭文字：Y

プリキュアキー：cure_ange
プリキュア名：キュアアンジュ / Cure Ange
頭文字：A

プリキュアキー：cure_etoile
プリキュア名：キュアエトワール / Cure Etoile
頭文字：E

プリキュアキー：cure_macherie
プリキュア名：キュアマシェリ / Cure Macherie
頭文字：M

プリキュアキー：cure_amour
プリキュア名：キュアアムール / Cure Amour
頭文字：A

プリキュアキー：cure_star
プリキュア名：キュアスター / Cure Star
頭文字：S

プリキュアキー：cure_milky
プリキュア名：キュアミルキー / Cure Milky
頭文字：M

プリキュアキー：cure_soleil
プリキュア名：キュアソレイユ / Cure Soleil
頭文字：S

プリキュアキー：cure_selene
プリキュア名：キュアセレーネ / Cure Selene
頭文字：S

プリキュアキー：cure_cosmo
プリキュア名：キュアコスモ / Cure Cosmo
頭文字：C

プリキュアキー：cure_grace
プリキュア名：キュアグレース / Cure Grace
頭文字：G

プリキュアキー：cure_fontaine
プリキュア名：キュアフォンテーヌ / Cure Fontaine
頭文字：F

プリキュアキー：cure_sparkle
プリキュア名：キュアスパークル / Cure Sparkle
頭文字：S

プリキュアキー：cure_earth
プリキュア名：キュアアース / Cure Earth
頭文字：E

プリキュアキー：cure_summer
プリキュア名：キュアサマー / Cure Summer
頭文字：S

プリキュアキー：cure_coral
プリキュア名：キュアコーラル / Cure Coral
頭文字：C

プリキュアキー：cure_papaya
プリキュア名：キュアパパイア / Cure Papaya
頭文字：P

プリキュアキー：cure_flamingo
プリキュア名：キュアフラミンゴ / Cure Flamingo
頭文字：F

プリキュアキー：cure_lamer
プリキュア名：キュアラメール / Cure Lamer
頭文字：L

プリキュアキー：cure_echo
プリキュア名：キュアエコー / Cure Echo
頭文字：E


ここまででできあがったものは次の通りです：これらを使って、いよいよプリキュアリストを作成していきます。
こんな出力が得られればと思います：長いので折りたたむラビ


Program.cs
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using YamlDotNet.Serialization;

namespace precure_initial
{
    class Program
    {
        /// &lt;summary&gt;
        /// rubicure/config のパス
        /// &lt;/summary&gt;
        static readonly string rubicureConfigPath = "../../rubicure/config/";

        class Series
        {
            // 省略
        }

        class Precure
        {
            // 省略
        }

        static void Main(string[] args)
        {
            Dictionary&lt;string, Series&gt; seriesList = LoadSeries();
            Dictionary&lt;string, Precure&gt; precureList = LoadPrecures();
            foreach (var series in seriesList)
            {
                OutputPrecureList(series.Value.Name, series.Value.PrecureKeys, precureList);
            }
        }

        static Dictionary&lt;string, Series&gt; LoadSeries()
        {
            // 省略
        }

        static Dictionary&lt;string, Precure&gt; LoadPrecures()
        {
            // 省略
        }

        /// &lt;summary&gt;
        /// プリキュアリストを出力する.
        /// &lt;/summary&gt;
        /// &lt;param name="seriesName"&gt;シリーズ名&lt;/param&gt;
        /// &lt;param name="precures"&gt;シリーズプリキュアキーリスト&lt;/param&gt;
        /// &lt;param name="precureList"&gt;プリキュアリスト&lt;/param&gt;
        static void OutputPrecureList(string seriesName, List&lt;string&gt; precures, Dictionary&lt;string, Precure&gt; precureList)
        {
            Console.WriteLine(seriesName);
            Console.WriteLine("プリキュア名,英語,頭文字");
            // イニシャルリスト
            List&lt;string&gt; precureInitials = new List&lt;string&gt;();
            // イニシャル重複チェック
            bool initialsConflict = false;
            foreach (var precureKey in precures)
            {
                if (!precureList.TryGetValue(precureKey, out Precure precure))
                {
                    // 万が一取得できなかった場合はスキップする
                    continue;
                }
                if (precureInitials.Contains(precure.Initial))
                {
                    initialsConflict = true;
                }
                precureInitials.Add(precure.Initial);
                Console.WriteLine($"{precure.PrecureName},{precure.GirlName},{precure.Initial}");
            }
            Console.WriteLine($"人数：{precureInitials.Count}");
            Console.WriteLine($"かぶり：{(initialsConflict ? "あり" : "なし")}");
            Console.WriteLine();
        }

        private static string ToPascal(string text)
        {
            // 省略
        }
    }
}




結果は省略します。上記で出力したデータを整形したのが下記の結果となります。人数：2
かぶり：なし人数：3
かぶり：なし人数：2
かぶり：なし人数：5
かぶり：なし人数：6
かぶり：あり人数：4
かぶり：あり人数：4
かぶり：あり人数：4
かぶり：あり人数：5
かぶり：なし人数：5
かぶり：なし人数：4
かぶり：なし人数：4
かぶり：なし人数：3
かぶり：あり人数：6
かぶり：あり人数：5
かぶり：あり人数：5
かぶり：あり人数：4
かぶり：なし人数：5
かぶり：なしまずはシリーズ別の状況を表にまとめてみます。かぶりありシリーズ数：8
かぶりなしシリーズ数：10このことから、一概に「プリキュアを頭文字だけで区別することはできる」とも「プリキュアを頭文字だけで区別することはできない」ともいえない状況です。「人数が多いとかぶりは多くなるのか？少なくなるのか？」というのを調べてみます。N=17なので一概には言いにくいのですが、6人の場合は必ずかぶる一方で2人だとかぶらないようです。プリキュア69人のイニシャルで最も多く使われているイニシャルはどれでしょうか？
※複数シリーズに登場しているプリキュアは重複カウントしていません。またここには「キュアエコー」を含みません。直近の5作品「キラキラ☆プリキュアアラモード」「ＨＵＧっと！プリキュア」「スター☆トゥインクルプリキュア」「ヒーリングっど♥プリキュア」「トロピカル～ジュ！プリキュア」に絞ると、こんな感じになります。
※使用実績のないイニシャルは下表では省略しています。この5作品で初めて使われたのは、「C」「G」「Y」でした。ここまで「プリキュアのイニシャル」を使っていろいろとデータ処理を行ってきました。
果たして70人目のプリキュアは、どんなイニシャルを持つのでしょうか…？英語表記については、英語版Wikipediaとrubicureのデータを参照しています。 ↩英語表記については、英語版Wikipediaとrubicureのデータを参照しています。 ↩文字コードの関係からか、「ヒーリングっど♥プリキュア」の「♥」が「?」で出力されています。以下同様。 ↩出力に「キュアエコー」が出てきてしまっていますが、これは movie.yml も読み込んでいるためです。プリキュアリストを作成する際に、どのテレビシリーズにも紐付いていないため最終的な出力には登場しません。 ↩


