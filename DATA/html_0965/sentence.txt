C# / .NET Coreを使ったマイクロサービス開発を支援するツール Project Tye がリリースされました。ASP.NETの開発チームが公開した下記のブログ記事を実際に試してみた内容を記載します。
https://devblogs.microsoft.com/aspnet/introducing-project-tye/?WT.mc_id=DT-MVP-5002209Project Tyeは、マイクロサービスと分散アプリケーションの開発、テスト、デプロイを容易にするツールです。ただし現在は実験的な(experimental)開発者ツールとして提供されているため、今後機能の追加、変更、廃止が行われる可能性はあります。そのため、この投稿は2020年8月1日時点の情報となっています。ソースコードはこちらのGitHubリポジトリで公開されています。
https://github.com/dotnet/tye1: マイクロサービスの開発を容易にする2: .NETアプリケーションのKubernetesへのデプロイメントの自動化Project Tyeを使うことで専用のダッシュボードが利用可能となり、マイクロサービス構成の各アプリケーションを閲覧することもできます。
前提としてProject Tyeには .NET Core 3.1 が必要なので、予めインストールしておきましょう。
https://dotnet.microsoft.com/downloadProject Tyeは .NET Coreのグローバルツールとして利用することができます。下記のコマンドでインストールします。正しくインストールできたことを確認するには、下記のコマンドを実行します。まずフロントエンドのアプリケーションとして、ASP.NET Core Razor Pagesのプロジェクトを作成します。作ったばかりのプロジェクトに対してTyeを実行してみます。tye runコマンドでは、指定したアプリケーションの実行が行われます。
その際、Tyeのダッシュボードも同時に実行されるため、http://127.0.0.1:8000にアクセスするとフロントエンドのアプリケーションがサービスとして登録されていることがわかります。
表のBindings列に表示されているのがフロントエンドアプリケーションにアクセスするためのURLです。アクセスすると実際にページを閲覧することができます。
また、表のLogs&gt;Viewにアクセスすることでアプリケーションのログを閲覧することもできます。ここで表示されるログは標準出力に流れるログです。
次にバックエンドサービスとしてASP.NET Core WebAPIのアプリケーションとソリューションファイルを作成します。作成したソリューションファイルに対してTyeを実行してみます。
ソリューションファイルに含まれるフロントエンドとバックエンドのアプリケーションが起動します。ダッシュボードにも2つのサービスが登録されていることが確認できます。
フロントエンドからバックエンドのWebAPIを呼び出し、APIが返すデータを画面に表示するようにします。
実際のC#コードは省略するため本家の記事を参照してください。Tyeを通じてフロントエンドからバックエンドサービスを呼び出す上で、通常のASP.NET Coreの実装と異なる部分があリます。まず、下記のコマンドでフロントエンドアプリケーションに拡張機能をインストールします。
https://www.nuget.org/packages/Microsoft.Tye.Extensions.Configuration/次に、フロントエンドアプリケーションのStartup.csファイルのConfigureServicesメソッドにて、バックエンドサービスに通信するためのHTTPクライアントを登録します。GetServiceUriメソッドが拡張機能によって利用可能となり、指定した名前のサービスのURIを取得することができます。
https://github.com/dotnet/tye/blob/083a97f353069ef8a091651d4c9ca445c994b2e5/src/Microsoft.Tye.Extensions.Configuration/TyeConfigurationExtensions.cs#L11一通りの実装を終えたら再びTyeを実行し、フロントエンドアプリケーションにアクセスするとバックエンドAPIが返すデータを表示することを確認できます。
tye.yamlというYAMLファイルで構成を管理することができ、依存関係のカスタマイズも行うことができます。まずは既存のソリューションファイルからtye.yamlを作成します。tye.yamlをみると、フロントエンドとバックエンドがサービスとして登録されていることが確認できます。tye.yamlのスキーマ構成についてはこちらに説明が載っています。
https://github.com/dotnet/tye/blob/master/docs/reference/schema.mdバックエンドAPIにRedisによるキャッシュを追加します。こちらも具体的なC#のコードについては本家の記事を参照してください。ここで大事なのはバックエンドアプリケーションにおいて、Redisの接続文字列の扱い方です。
バックエンドアプリケーションのStartup.csファイルのConfigureServicesメソッドでは、このようにRedisの設定を行っています。"redis"という名前の接続情報を環境変数から取得して使用しています。(Configuration.GetConnectionStringメソッド)
ただしまだ"redis"という名前の環境変数はありませんので、tye.yamlを編集してRedisを構成します。RedisおよびRedis CLIをサービスとして追加しました。（3番目と4番目）
開発環境にインストールされたものを利用するのではなく、image部分にてDockerコンテナーとしてRedisとRedis CLIを用意する内容になっています。
またconnectionString: "${host}:${port}"にてRedisの接続情報を定義しています。Tyeを実行するとtye.yamlに定義された構成に沿ってアプリケーションを実行します。
そのためDockerを予め起動しておく必要があります。Tyeのダッシュボードを確認するとフロントエンド、バックエンドのサービスに加え、RedisとRedis CLIも登録されていることがわかります。本家の記事に沿って、簡単なマイクロサービスアプリケーションを実装してみました。Project Tyeはまだ実験中のツールですが、ダッシュボードが使え、YAMLファイルでアプリケーションの依存関係を管理することができるため便利そうですね。次回はこのアプリケーションをKubernetesにデプロイしてみようと思います。


