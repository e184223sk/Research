
static List&lt;T&gt; GenerateList&lt;T&gt;(int capacity, Func&lt;int, T&gt; generator)
{
    var ary = new T[capacity];

    // チャンク分けしてあげる
    Parallel.ForEach(Partitioner.Create(0, capacity), partition =&gt;
    {
        var (start, end) = partition;
        for (int i = start; i &lt; end; i++)
            ary[i] = generator(i);
    });

    var ls = new List&lt;T&gt;();
    var type = ls.GetType();
    var size = type.GetField("_size", BindingFlags.Public | BindingFlags.Instance | BindingFlags.NonPublic);
    var items = type.GetField("_items", BindingFlags.Public | BindingFlags.Instance | BindingFlags.NonPublic);
    items.SetValue(ls, ary);
    size.SetValue(ls, capacity);
    return ls;
}

