
public class BenchMark
{
    private const int _capacity = 10_000_000;
    private const int _value = 10_000_000;

    [Benchmark]
    public List&lt;int&gt; A() =&gt; new List&lt;int&gt;(new int[_capacity]);

    [Benchmark]
    public List&lt;int&gt; B() =&gt; new int[_capacity].ToList();

    [Benchmark]
    public List&lt;int&gt; C() =&gt; new List&lt;int&gt;(Enumerable.Repeat(_value, _capacity));

    [Benchmark]
    public List&lt;int&gt; D() =&gt; Enumerable.Repeat(_value, _capacity).ToList();

    [Benchmark]
    public List&lt;int&gt; E()
    {
        var a = new List&lt;int&gt;(_capacity);
        a.AddRange(Enumerable.Repeat(_value, _capacity));
        return a;
    }

    [Benchmark]
    public List&lt;int&gt; F()
    {
        var a = new List&lt;int&gt;(_capacity);
        for (int i = 0; i &lt; _capacity; i++) a.Add(_value);
        return a;
    }

    [Benchmark]
    public List&lt;int&gt; AsList001() =&gt; new int[_capacity].AsList();

    [Benchmark]
    public List&lt;int&gt; AsList002() =&gt; new int[_capacity].AsList(500);

    [Benchmark]
    public List&lt;int&gt; AsList003() =&gt; new int[_capacity].AsList(idx =&gt; idx);

    [Benchmark]
    public List&lt;int&gt; AsListParallel001() =&gt; new int[_capacity].AsListParallel(500);

    [Benchmark]
    public List&lt;int&gt; AsListParallel002() =&gt; new int[_capacity].AsListParallel(idx =&gt; idx);
}

