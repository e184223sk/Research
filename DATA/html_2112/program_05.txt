
using System;
using ProjectName.Scripts.Application.DTO;
using ProjectName.Scripts.Application.ValueObject;
using ProjectName.Scripts.Domain.UseCase;
using UniRx.Async;
using UnityEngine;
using UnityEngine.Networking;

namespace ProjectName.Scripts.Data.Gateway
{
    public interface IRepository
    {
        bool Contains(string id);
        CharacterData Find(string id);
    }

    public class Gateway : IData
    {
        private readonly IRepository _repository = default;

        public Gateway(IRepository repository)
        {
            _repository = repository;
        }

        public async UniTask&lt;CharacterData&gt; FindCharacter(string characterId)
        {
            var form = new WWWForm();
            form.AddField("character_id", characterId);

            var uri = "";
            using (var r = UnityWebRequest.Post(uri, form))
            {
                var result = await r.SendWebRequest();
                var dto = JsonUtility.FromJson&lt;CharacterDTO&gt;(result.downloadHandler.text);
                return new CharacterData(dto);
            }
        }

        public CharacterData Find(string id)
        {
            if (!_repository.Contains(id))
            {
                throw new NullReferenceException($"Not Found ID : {id}");
            }

            return _repository.Find(id);
        }
    }
}

