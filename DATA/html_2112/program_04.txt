
using System;
using ProjectName.Scripts.Presentation.Presenter;
using UniRx;
using UnityEngine;
using UnityEngine.UI;

namespace ProjectName.Scripts.Presentation.View
{
    // View間の参照はViewのinterfaceに任せる
    public interface IDamageable
    {
        void TakeDamage(int damage);
    }

    public class View : MonoBehaviour, IOutputPort, IInputPort, IDamageable
    {
        [SerializeField] private Text _defenseText = default;
        [SerializeField] private Button _button = default;

        private readonly Subject&lt;int&gt; _damageSubject = new Subject&lt;int&gt;();

        public IObservable&lt;int&gt; TakeDamageAsObservable()
        {
            return _damageSubject.Publish().RefCount();
        }

        // Button などの入力もIObservableで返すように統一
        public IObservable&lt;Unit&gt; ButtonClickAsObservable()
        {
            return _button.OnClickAsObservable();
        }

        public void ChangeDefense(int value)
        {
            _defenseText.text = value.ToString();
        }

        public void TakeDamage(int damage)
        {
            _damageSubject.OnNext(damage);
        }

        private void OnDestroy()
        {
            _damageSubject.OnCompleted();
            _damageSubject.Dispose();
        }
    }
}

