More than 1 year has passed since last update.この記事はUnity #2 Advent Calendar 2019の6日目の記事です。
Unity2018辺りからExperimentalで入ったGraphViewについて解説し、完全理解を目指します。現在、新卒入社したスマホゲーム会社で社会人4年目をやっています。
普段Unityを用いてゲーム開発をしつつ、全社で使用できるツールの作成なども行っています。現在Unityでは新しいエディタ用UI、UIElements(RMGUI)への移行が行われています。
UIElements自体は2019のバージョンからExperimentalが外れ、正式リリースされました。
GraphViewはUIElementsの一部として、ノードエディタを作成できる機能なのですが、現状ShaderGraph、VFXGraphなどのUnity公式のツールで使用されてはいますが、実験的機能という扱いで、まだ使うのは早い。という風な扱いです。ただ、エディタ拡張好きとしては、抑えずにいられない機能なので、いったん2019年末の段階でのGraphViewを完全理解し、正式リリース時にすぐに使えるようになっておこうという試みです。よって、正式リリース時にはAPI等の仕様が大きく変わっている可能性があります。
読み物程度に考えてもらえたらと思います。GraphViewは大きく4つの要素から成っています。このほかにもBlackboardなどオプション的な要素はありますが、
今回は最小限のGraphView実装を行っていくので、一旦省きます。上の要素の細かい説明は以下で実際に実装していく中でその都度行っていきます。Unity2020.1.0a13まずは、エディタ拡張おなじみのEditorWindowを作ります。これでメニューのWindowから"Open SampleGraphView"を選択するとウインドウが表示されます。次に、早速GraphViewを作成していきます。
これは上で示したNodeやEdgeの親となるものです。一旦最小限で、何も表示されないGraphViewを作成します。また、ここでEditorWindowにGraphViewを追加します。まだ何も表示されませんが、一旦これでOKです。GraphViewは一般的にノードエディタなどと呼ばれる物ですが、
Nodeは名前の通り、ノードエディタの一番重要と思われる部分になります。
一旦基底のNodeを作成し、実際に使う際にはそれを継承した色々な処理を持ったノードを作成していくことになるかと思います。また、最小限に何も実装のないNodeを作成します。これをGraphViewに追加します。一旦コンストラクタでやってしまいます。で、エディタのウインドウの方を確認してみます。すると、何も表示されていません…
こういう時に便利なのがUIElements Debuggerです。
どうやらNode自体は作成されているのですが、GraphViewのHeightが0になっているようです。
きちんと表示されるようにHeightを設定してあげます。これで、EditorWindowの高さに合わせて、GraphViewが伸び縮みして全体に表示されるようになり、隠れていたNodeも表示されるようになりました。Nodeは他のNodeとつなげて使います。
その際OutputPortからInputPortへEdgeをつなげます。
まずはNodeにInputPortとOutputPortをつけます。ついでに簡単に見た目を整えます。とりあえずPortとEdgeは基底の物を使いますが、なんか急にノードっぽくなりました。こうなるとノードが動かないのがなんか違和感を感じる気がするので、いったんここで動かせるようにしておきます。GraphViewでManipulatorというものを付けてあげると動くようになります。
Manipulatorにはいくつかあるのですが、今回はとりあえずドラッグして動かすためのものに限ります。UnityEngine.UIElementsをusingしてあげてSelectionDraggerをAddManipulatorするとドラッグで移動できるようになりました。現状GraphViewのコンストラクタで1個作るようになっているので、
これを右クリックのメニューから追加できるようにします。これでSampleNodeが複数作れるようになりました。
こうなるとNodeを繋げたくなりますが、どうやらうまく繋がりません。NodeはどのNode、どのPortにでも繋がるわけではありません。
OutputPortから正しいInputPortにつなげてあげる必要があります。
そこでGetCompatiblePortsをoverrideして、正しいPortを返してあげます。今回はとりあえず全てのPortに繋がるようにしてみましたが、
本当はstartAnchorに入っているPortから正しく判断してあげる必要があります。Edgeの色と背景の色が似ていてすごく見にくいですが、これでNode同士が繋がるようになりました。ここで、GraphViewのUI自体はまあまあ抑えられたかと思います。
これで終わりにしようかとも思いましたが、実際にツールを作るとなるとまだ要素がたりてないと感じたので、
ツール作成の章に移ります。ツールと言っても、実用的なツールを作成するとなると流石に長くなりすぎると思うので、最小限の要件を定義します。これに加えて機能ノードを作成しますが、今回はログ出力のノードのみ
ログ出力ノードには文字列の入力のみ
とします。ノードエディタを使うとなると、流石にこれくらいは欲しいと思うので実装していきます。
実はGraphViewでSetupZoomを呼び出すのみで、ズームインズームアウトを行うことができます。こちらもシンプル、GraphViewにGridBackgroundというVisualElementを追加するととりあえず黒っぽい背景になるので、これでいきます。補足をすると、VisualElementというのはUIElementsの基本的な要素で、これを組み合わせることでUIが作られます。
少しUIElementsを触っていると、Add(VisualElement element)の方を使えばいいのではないかと思うのですが、
そうするとGraphView内の要素よりも手前にGridBackgroundが表示されてしまうので、Insertを使って奥に差し込みます。とりあえずノードを作っていきます。
今回作成するノードは一旦、今までのSampleNodeを抽象クラスとし、今回使用するノードはそれを継承するものとします。ではまずはログ出力ノードを作成します。一旦、ProcessNodeをかませて、LogNodeを作成します。次に文字列出力ノードを作成します。これは同じ値をいろんなところに使いたいことが想定できるので、
CapacityをMultiにしておきます。最後にルートノードを作成します。
ルートノードは消えないようにしておきたいので、capabilitiesからDeletableを引いておきます。ここで、GraphViewを生成した際にRootNodeを1つ配置しておくようにします。次にこれらの作成したノードをエディタ上から作成できるようにします。SearchWindowを用いると、ノードを選択できるようなUIを簡単に作成できます。
ISearchWindowProviderを実装したクラスがScriptableObjectが必要です。CreateSearchTreeではSampleNodeクラスを継承したクラスをSearchTreeEntryに入れて返し、
OnSelectEntryで選択された項目に対応する処理を行います。
今回はここでNodeを作成しています。また、右クリックでNodeを作成していたところを、SearchWindowを呼び出すように変更します。これで任意のノードを選択して作成することができるようになりました。UI実装編でとりあえず全部のノードが繋がるので、そこを直していきます。とりあえずとしました。実際にはもう少し考えることはあると思いますが、一旦これでいきます。これで見た目上必要な部分の実装は完了したかと思います。実際に処理を行うとなると、ルートノードにつながっているノードを順に取得し、処理を行う必要があります。
Nodeにつながっている別のNodeを取得する機能は無いようなので、Port生成時にキャッシュしておく必要がありそうです。
また、Node側で処理を記述していきたいので、ProcessNodeに処理用のメソッドを持たせてあげます。これで、Rootから順にノードを取得していき、処理を行っていきます。適当にこのメソッドを叩く口を作ってあげて
ついに処理の実行までできました。今回は基本的なUIの実装と、それを用いた簡単なツール作成を行いました。
個人的にAPIはだいぶ整っている感じがしたので、正式リリース時も、それほど変わっていないんじゃないかと思います。実際にツールを作成するとなると、グラフの状態をファイルに書き出したり読み込んだり、
そのほかにも色々な要素が必要になるかとは思いますが、とっかかりとしてはこの程度かなと思います。大したものではないですが、今回のプロジェクトもGitHubにあげてましたので、そちらも参照してください。
GitHub - ShunMc/SampleGraphViewGitHub - Unity-Technologies/ShaderGraph: Unity ShaderGraph project
GitHub - monry/UniFlow: Connect presentation events
GitHub - rygo6/GTLogicGraph: A generic graph made off the UIElement GraphView built into Unity.
Unity-Technologies / AssetBundleGraphTool / dev-2.0 — Bitbucket


