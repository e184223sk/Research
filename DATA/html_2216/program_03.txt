

public class ButtonBase : UIBehavior
{
    /// &lt;summary&gt;
    /// 非同期クリック前のアクション
    /// &lt;/summary&gt;
    public static Action onBeforeClick;

    /// &lt;summary&gt;
    /// 非同期クリック後のアクション
    /// &lt;/summary&gt;
    public static Action onAfterClick;

    /// &lt;summary&gt;
    /// クリック時の非同期コールバック
    /// &lt;/summary&gt;
    public Func&lt;Task&gt; onClickAsync;

    private void Awake()
    {
        // 注意：　UIGestureは、EventSystemの各種イベントハンドラを実装したクラス
        var gesture = GetComponent&lt;UIGesture&gt;();
        if(gesture == null) gesture = gameObject.AddComponent&lt;UIGesture&gt;();
        gesture.onClickedCallback += OnClickedHandler;
    }

    private void OnClickedHandler()
    {
        _Execute().Forget();

        async Task _Execute()
        {
            try
            {
                // ここで入力ブロッキングOn
                onBeforeClick?.Invoke();

                // クリックされた時の処理を実行
                await onClickAsync?.Invoke();
            }
            finally
            {
                // ここで入力ブロッキングOff
                onAfterClick?.Invoke();
            }
        }
    }
}

