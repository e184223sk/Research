
class Account
{
    public enum AccountRole { Role1, Role2, Role3 }

    public class AccountAddress
    {
        [JsonProperty("address1")]
        public string Address1 { get; set; }
        [JsonProperty("address2")]
        public string Address2 { get; set; }
    }

    [JsonProperty("user_id")]
    public int ID { get; set; }
    [JsonProperty("name")]
    public string Name { get; set; }
    [JsonProperty("active")]
    public bool IsActive { get; set; }
    [JsonProperty("created_date")]
    [JsonConverter(typeof(DateTimeFormatConverter), "yyyy/MM/dd HH:mm:ss")]
    public DateTimeOffset CreatedDate { get; set; }
    [JsonProperty("role")]
    [JsonConverter(typeof(StringEnumConverter))]
    public AccountRole Role { get; set; }
    [JsonProperty("telephones")]
    public IList&lt;string&gt; Telephones { get; set; } = new List&lt;string&gt;();
    [JsonProperty("address")]
    public AccountAddress Address { get; set; } = new AccountAddress();

    [JsonIgnore]
    public string Note { get; set; }
}

class Program
{
    static void Main(string[] args)
    {
        var account = new Account()
        {
            ID = 1,
            Name = @"hoge@example.com",
            IsActive = true,
            CreatedDate = DateTimeOffset.Now,
            Role = Account.AccountRole.Role1,
            Address = new Account.AccountAddress()
            {
                Address1 = "address1",
                Address2 = "address2",
            },
            Telephones = new List&lt;string&gt;()
            {
                "010-1111-2222",
                "020-2222-3333",
            },
            Note = "ほげほげ",
        };

        // シリアライズ
        using (StreamWriter writer = File.CreateText(@"account.json"))
        {
            var serializer = new JsonSerializer();
            serializer.Serialize(writer, account);
        }

        // デシリアライズ
        using (StreamReader reader = File.OpenText(@"account.json"))
        {
            var serializer = new JsonSerializer();
            var obj = (Account) serializer.Deserialize(reader, typeof(Account));
            Console.WriteLine($"ID: {obj.ID}");
            Console.WriteLine($"Name: {obj.Name}");
            Console.WriteLine($"IsActive: {obj.IsActive}");
            Console.WriteLine($"CreatedDate: {obj.CreatedDate}");
            Console.WriteLine($"Role: {obj.Role}");
            Console.WriteLine($"Note: {obj.Note}");
            Console.WriteLine($"Telephones: {string.Join(", ", obj.Telephones)}");
            Console.WriteLine($"Addresses: {obj.Address.Address1}, {obj.Address.Address2}");
        }

        Console.ReadLine();
    }
}

