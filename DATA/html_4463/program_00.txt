using System.Diagnostics;

private async void button1_Click(object sender, EventArgs e)
{
    try
    {
        await RunAsync().ConfigureAwait(false);
    }
    catch (Exception ex)
    {
        System.Diagnostics.Debug.WriteLine("----- StackTrace -----");
        System.Diagnostics.Debug.WriteLine(ex.StackTrace);

        System.Diagnostics.Debug.WriteLine("----- Demystify -----");
        System.Diagnostics.Debug.WriteLine(ex.Demystify());
    }
}

private Task RunAsync()
{
    // ローカル関数を介して処理を実行する
    Task RunTasks&lt;T1, T2, T3&gt;(T1 arg1, T2 arg2, T3 arg3)
    {
        // 例外をキャッチしてスローしなおす
        try
        {
            return Task.WhenAll(Execute001Async(arg1), Execute002Async(arg2, arg3));
        }
        catch (Exception ex)
        {
            throw new Exception("処理中に例外が発生しました。", ex);
        }
    }
    return RunTasks("abc", 1, DateTime.Now);
}

private Task Execute001Async&lt;T&gt;(T arg)
{
    return Task.CompletedTask;
}

private Task Execute002Async&lt;T1, T2&gt;(T1 arg1, T2 arg2)
{
    int[] values = new[] { 1, 2, 3, 0 };

    // ここでゼロ除算例外がスローされる
    foreach (var result in values.Select(x =&gt; 10 / x))
    {
    }

    return Task.CompletedTask;
}

