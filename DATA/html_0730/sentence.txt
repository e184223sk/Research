【参考リンク】：【Unity(C#)】テクスチャを画像データに変換して端末に保存、読み込み
↑前回の応用です。やりたい事としては下記の画像のように
ファイルの保存上限を設けて、
上限を超えた場合は最も古いファイルから削除するという実装です。
早速ですがデモです。
保存するファイルは画像ファイルとしました。
PC内の保存領域を確認したところ、
しっかりと最後の3枚が保存されていました。下記今回の処理の全文です。今回は古いフォルダの概念を保存した日時(秒単位)にしています。
そのため、ディレクトリ内のファイルの中から
最も古い保存日時のファイルを取得する必要がありました。そのために一度全ファイルを取得して
それぞれの保存先のパスを保存順にソートしています。ロード時も同様に全ファイルのパスを取得し
File.ReadAllBytesの引数に渡しています。下記リンクを参考にLINQを使って簡単に書くことができました。【参考リンク】：タイムスタンプ(作成日、変更日、最後に開いた日)を基準にファイルを古い順や新しい順にソート【C#】【LINQ】DateTime.Nowを使えば現在の日付と秒単位までの時刻を取得することができます。今回の実装においては、
この日付と秒単位までの時刻をファイル名とすることで
ユニークなパスを生成しています。ただ、そのままファイル名として与えた際に少し厄介なことがありました。Image/2020/09/21 17:12:43.pngのようにディレクトリの区切りとして解釈される
/(スラッシュ)が含まれてしまいます。このまま保存処理を行おうとすると
そんなディレクトリは存在しませんと怒られます。ですので、下記のように引数に"yyyyMMddHHmmss"を渡しています。こうすることでImage/20200921171710.pngとなり
秒数まで全て数字で取得することが可能となります。【参考リンク】：日付や時刻を文字列に変換するには？2020/09/21 追記GetFiles(directoryName, "*", SearchOption.AllDirectories)
の箇所を"*"→"*.png"等にした方が
想定外のファイルを除外することができるとコメント頂いたので
メモしときます　(ありがとうございます！)モバイル端末で一気に5,60枚読み込んでも処理落ちは見られませんでした。
枚数が何百、何千となるといろいろと工夫が必要そうです。


