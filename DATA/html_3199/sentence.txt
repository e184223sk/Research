More than 1 year has passed since last update.このようなサンプル良く見かけますね。何気なく使っていました。
実はこれで失敗したんです。
私は最近までTask.Runで包み込んでやると上記サンプルのようにHeavyMethodもTaskになるものだと勘違いしていました。
後から調べたらHeavyMethodの中身が問題で、awaitを使う場合async voidはUIのイベント処理以外は使うなと色々な所に書かれていますね。例えばコマンド(Start）を送った後2秒待っでコマンド(End）を送る処理で、Start~Endが終わってから次の処理を実行することが条件になる場合、async voidを使うと期待通り動かないことがあります。
ご存知の方にはそれほど大げさなことでは無いかも知れませんが...書き留めます。上記のサンプル物まねでやった結果です。ラムダ式の中はTaskですがDelayMethodByAsyncVoid(i)の中はTaskでは無いのでawait Task.DelayのところでTask完了となっているみたいです。
DelayMethodByAsyncVoidは非同期で動きます。
そもそもMethod 1つを呼ぶのにTask.Runを使うのが良いのかという疑問もあります。ラムダ式の中にDelayMethodByAsync(i)の処理を書くとすべての処理がTaskとなりうまくいきます。何でもかんでもTask.Runでやっていたのですが複数個所から呼ばれる場合async Taskで定義するのがすっきりします。


