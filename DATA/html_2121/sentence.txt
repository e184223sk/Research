More than 1 year has passed since last update.CanvasのRenderModeはScreen Space - Overlay前提です。

以下の画像を参考にUIを作成して、Canvasの子要素としてヒエラルキーに追加しておきます。
まずCamera.WorldToScreenPoint()でターゲットのワールド座標をスクリーン座標に変換して、UIをターゲット上に表示させます。上のコードの段階では、意図しない場所にもUIが表示されることがあります。これは、カメラ後方にあるターゲットのUIも表示されていることが原因です。

この画面をEditorのシーンビューで見てみたのが下の図です。カメラ後方の左下側にあるターゲットのワールド座標が、右上側（画面中心に対する点対称の位置）のスクリーン座標に変換されていることがわかります。

Camera.WorldToScreenPoint()のz値にはカメラからターゲットへの距離が入っています。この値の正負を確認することで、ターゲットがカメラ後方にあるかどうかを判定できます。ここでは一旦、カメラ後方のターゲットのUIを画面外に移動するようにしておきましょう。UIのスクリーン座標を計算する処理は、ターゲットやカメラの位置・向きを計算する処理よりも後に行わないと、ターゲットとUIの表示が（1フレーム分）ずれてしまいます。もしずれている場合は、Edit &gt; Project Settings &gt; Script Execution Orderからスクリプトの実行順を制御する必要があります。
画面内のUIの位置が正しく表示できるようになりました。次に、画面外のUIの位置を画面端に調整するための処理を追加していきます。カメラ後方にあるターゲットは、画面中心に対する点対称の位置のスクリーン座標になっていました。この値をもう一度点対称の位置に移動させれば、元のターゲットの方向がわかるようになります。スクリーン座標を画面サイズの半分で割ると、以下の図のようなビューポート座標の値になります。

この値のx座標かy座標かどちらかの絶対値が1になるように計算すると、画面端のスクリーン座標を求めることができます。画面外のターゲットのUIを画面端に表示できたので、ここから細かく調整してクオリティを上げていきます。カメラと水平な位置にあるターゲットのUIは、中央左端か中央右端の位置に偏ります。このターゲットがカメラ後方になった時には、スクリーン座標に補正をかけることでUIの動きをなめらかにすることができます。
またこの補正は、カメラ後方のターゲットのスクリーン座標が画面中心になった場合に、画面端の位置の計算で（ゼロ除算）エラーが発生する問題を回避する効果もあります。画面端の表示位置をUIのサイズの半分だけ画面中心側に寄せて、画面端のUIが見切れないようにします。UIに矢印を追加します。矢印の角度はMathf.Atan2()にスクリーン座標を渡すだけで求めることができます。
最後にCanvasのスケールを調整しても表示が崩れないようにします。
Canvasのスケール値は、CanvasのTransform.localScaleから取得できるので、この値を使って適切な座標系に変換して計算するようにします。



