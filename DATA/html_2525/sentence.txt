More than 1 year has passed since last update.前回ASP.NET Core 3.0 Razor Pages 事始め(3)の続きです。今回は、前々回スキャフォールディング機能によって作成されたRazorページについて、見ていこうと思います。Movies/Index.cshtml.cs と　Movies/Index.cshtmlを見ていきす。まずは、C#のコードからPageModelクラスを継承したIndexModelというクラスが定義されています。このクラスをページモデルと言うようです。誤解を恐れずに言えば、一つのページ(ここでは、Index.cshtml)に特化したControllerクラスといったらよいでしょうか？　
さらに、ViewModelクラスの特徴も持ち合わせているようなクラスです。コンストラクタでは、DIを使用して、RazorPagesMovie.Models.RazorPagesMovieContext のインスタンスが引数に渡されます。
これを、_context フィールドに格納しています。これで、ページモデルでデータベースにアクセスすることが可能になります。OnGetAsyncメソッドが、ブラウザからのリクエストに対応するメソッドです。MVCでいうActionメソッドのようなものですね。これをページハンドラと呼ぶようです。OnGetAsyncという名前から、Http Get要求に対応するメソッドだとわかります。非同期メソッドにしない場合は、単に OnGetという名前にします。が、あえて、同期にする必要はないですね。このハンドラーが呼び出されると、EF Core使って、データベースから Movieのリストを取得して、Moviesプロパティに格納しています。戻り値は、Task （OnGetの場合はvoid)ですが、Task&lt;IActionResult&gt;やIActionResult を返すこともできます。例えば、別のページに遷移させたい場合はなどと書けます。RedirectToAction ではなく、RedirectToPage です。次は、このページモデルに対応する ページ(cshtml)ファイルを確認します。@で始める部分が、Razor構文です。先頭の@pageは、Razorページであることを示しています。は、ページで利用するモデルの型を指定します。ここでは、IndexModelクラスを指定しています。あと特徴的なのは、以下のようにDisplayNameForを使っている行ですね。@Html.で利用できるメソッドをHTMLヘルパーと呼んでいます。DisplayNameForはその一つです。ASP.NET MVCと同じですね。このラムダ式に渡ってくるのが、2行目の@modelで指定した IndexModelクラスのインスタンスです。
DisplayNameFor では、通常のC#と違って、値がnullであっても、Moviesの要素が空であっても例外は発生しません。@foreach文の中では、という行があります。ラムダ式の引き数modeiItemは、IndexModelオブジェクトなので、ここでは利用できません。そのため、@foreachで列挙した item変数を使って、それぞれの Movieオブジェクトにアクセスしています。かなり違和感がある書き方ですが、まあそういうものだと思うしかないですね。のViewDataは、ページモデル(具体的には、基底クラスであるPageModelクラスに定義されているディクショナリプロパティです。
この ViewData["Title"]の値は、Pages/Shared/_Layout.cshtml で利用されます。次に、Pages/Shared/_Layout.cshtml ファイルも覗いてみます。先頭部分だけ抜きだしてみました。この&lt;title&gt;要素で、先ほどのViewData["Title"]の値を参照しています。&lt;title&gt;要素をすこし変更してみます。他にも、RazorPagesMovieと記述している個所があるので、RpMovieに変更します。_Layout.cshtmlには、以下のような&lt;a&gt;タグがあります。この &lt;a&gt;タグは ASP.NET Coreで利用できるタグヘルパーです。実際のHTMLの&lt;a&gt;要素に似ていますが、次のような属性値が書いてあります。この２つの属性の値から、href属性が作成されます。ここでは、以下のようにリンク先を変更します。これで、ページ上部の RpMovieリンクをクリックすると、/Movies/indexページに遷移するようになります。ここで実行してみます。以下が、ブラウザの開発者ツールで確認したHTMLの該当箇所です。クリックすると、/Movies/Index.cshtml のページに遷移します。_Layout.cshtmlには、以下の行が存在します。この行が、当該ページ(Index.chtml)に置き換わります。
つまり、全てのページで共通する部分を _Layout.cshtmlに書いておき、ページごとに異なる部分を それぞれのページの cshtmlに記述することで、レイアウトを統一できるというわけです。ちなみに、この _Layout.cshtmlは置き換えが可能です。 Pages/_ViewStart.cshtml ファイルに、デフォルトのレイアウトページ名が設定されています。ここを変更すれば、別のレイアウトページが利用されるようになります。（まあ、ここを変更することはないと思いますが...）次回は、残りのページ（主にCreate.cshtml/ Create.cshtml.cs) について見ていきます。


