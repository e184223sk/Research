 public class MainPageViewModel : INotifyPropertyChanged
    {
        enum Operator
        {
            Add = 0,
            Sub = 1,
            Mul = 2,
            Div = 3
        }

        static readonly string[] operators = new[] { "+", "-", "ร", "รท" };

        public DelegateCommand CalculateCommand { get; private set; }

        public event PropertyChangedEventHandler PropertyChanged;

        readonly Calculater calculater = new Calculater();

        public double LeftNumber { get; set; }


        double rightNumber;
        public double RightNumber
        {
            get =&gt; rightNumber;
            set
            {
                rightNumber = value;
                UpdateIsValid();
            }
        }

        double answer;      
        public double Answer
        {
            get =&gt; answer;
            set
            {
                answer = value;
                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(Answer)));
            }
        }

        public string[] Operators { get; private set; }

        int selectedIndex;
        public int SelectedIndex
        {
            get =&gt; selectedIndex;
            set
            {
                selectedIndex = value;
                UpdateIsValid();
            }
        }

        public bool IsValid { get; private set; } = true;

        public MainPageViewModel()
        {
            Operators = operators;
            CalculateCommand = new DelegateCommand(Calculate, () =&gt; IsValid);   
        }

        void Calculate() =&gt; Answer = calculater.Calculate(LeftNumber, RightNumber, Operators[SelectedIndex]);

        void UpdateIsValid()
        {
            IsValid = !(selectedIndex == (int)Operator.Div &amp;&amp; rightNumber == 0.0);
            CalculateCommand.RaiseCanExecuteChanged();
        }
    }

