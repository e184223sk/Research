More than 3 years have passed since last update.元記事DBとかにためてたデータをクエリしてcsvとしてダウンロードできるようなweb apiを作りたかった。現在(2017/07/19)の最新版は.NET Core 2.0 Preview 2なのでここからダウンロードする。インストーラを起動してぽちぽちすればインストール完了。インストール完了したらPowerShellでdotnet --versionしましょう。ちゃんと2.0のPreview 2が入ってるのが確認できます。dotnet coreでは作成するアプリケーションの種類ごとにテンプレートが用意されているので確認してみましょう。今回はwebapiを使ってみます。webapiのプロジェクトを生成するにはdotnet new webapiを実行すればいいのですが、compoer create-projectやrails newと違ってプロジェクトのフォルダは生成されないのであらかじめプロジェクトのフォルダに移動したうえで実行しましょう。これでプロジェクトが生成されました。生成されたものを確認しておきましょう。dotnet coreのアプリケーションを実行するにはdotnet runコマンドを使います。どうやらローカルの5000番ポートで何やら動き始めたようです。linuxとかならcurl使うんですがwindowsに入れてないのでInvoke-WebRequestを使って動作確認してみましょう。ルートにアクセスすると404が返ってきます。何をしてるのか把握するためにコードを読んでみましょう。Controllersってフォルダがあるのでその中を見てみるとValuesController.csというファイルがあります。[Route("api/[controller]")]って書いてあるので/api/valuesにアクセスしたら何か起こりそうな気がします。contentとして["value1", "value2"]が返ってきているのでどうやらGet()が実行されたようです。Controllerのメソッドごとに返値の型がバラバラなのでこれをCSVっぽい型にすればいいんだろうか。Controllerのメソッドの返値はIActionResultのオブジェクトで、ドキュメントを読んだところ、任意の型を返しておけばActionResultでラップしてくれるらしい。配列とかを返せばそのままjsonでレスポンスしてくれる。ではCSVはどうするか。ContentResultってのがあるのでそれを使ってValuesControllerのGetを書き換えてみる。ヘルパー関数としてContentが用意されていて、第一引数にコンテンツの文字列、第二引数にContent-Typeを入れてやればいいらしい。アクセスしてみる。無事text/csvで取得できました。api/valuesのままでは使いづらいのでControllerを追加して別のpathでリクエストを受けるようにしてみましょう。今回は/apiでリクエストを受けるようなControllerを追加したいと思います。Controller/RootController.csを作成してそれっぽく実装してみます。これで行けるか。成功です。条件をを受けとってそれによって加工したデータを返したいので、クエリストリングを扱う方法を調べます。ControllerクラスのRequestにQueryプロパティが存在しているのでそれが使えそう。keyにhogeがあればそれを、なければhogeを使って出力するようにしてみた。実行。うまくいきました！


