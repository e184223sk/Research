
float[] LUDecomposition(float[,] aMatrix, float[] b)
{
    // 行列数（Vector3データの解析なので3x3行列）
    int N = aMatrix.GetLength(0);

    // L行列(零行列に初期化)
    float[,] lMatrix = new float[N, N];
    for (int i = 0; i &lt; N; i++)
    {
        for (int j = 0; j &lt; N; j++)
        {
            lMatrix[i, j] = 0;
        }
    }

    // U行列(対角要素を1に初期化)
    float[,] uMatrix = new float[N, N];
    for (int i = 0; i &lt; N; i++)
    {
        for (int j = 0; j &lt; N; j++)
        {
            uMatrix[i, j] = i == j ? 1f : 0;
        }
    }

    // 計算用のバッファ
    float[,] buffer = new float[N, N];
    for (int i = 0; i &lt; N; i++)
    {
        for (int j = 0; j &lt; N; j++)
        {
            buffer[i, j] = 0;
        }
    }

    // LU分解開始
    for (int i = 0; i &lt; N; i++)
    {
        int n = N - i - 1;

        float l0 = lMatrix[i, i] = aMatrix[0, 0];

        // l1成分をコピー
        float[] l1 = new float[n];
        for (int j = 0; j &lt; n; j++)
        {
            lMatrix[j + i + 1, i] = l1[j] =  aMatrix[j + 1, 0];
        }

        // u1^T成分をコピー
        float[] u1 = new float[n];
        for (int j = 0; j &lt; n; j++)
        {
            uMatrix[i, j + i + 1] = u1[j] = aMatrix[0, j + 1] / l0;
        }

        // luを求める
        for (int j = 0; j &lt; n; j++)
        {
            for (int k = 0; k &lt; n; k++)
            {
                buffer[j, k] = l1[j] * u1[k];
            }
        }

        // A1を求める
        float[,] A1 = new float[n, n];
        for (int j = 0; j &lt; n; j++)
        {
            for (int k = 0; k &lt; n; k++)
            {
                A1[j, k] = aMatrix[j + 1, k + 1] - buffer[j, k];
            }
        }

        // A1を新しいaMatrixとして利用する
        aMatrix = A1;
    }

    // 求めたLU行列を使って連立方程式を解く
    float[] y = new float[N];
    for (int i = 0; i &lt; N; i++)
    {
        float sum = 0;
        for (int k = 0; k &lt;= i - 1; k++)
        {
            sum += lMatrix[i, k] * y[k];
        }
        y[i] = (b[i] - sum) / lMatrix[i, i];
    }

    float[] x = new float[N];
    for (int i = N - 1; i &gt;= 0; i--)
    {
        float sum = 0;
        for (int j = i + 1; j &lt;= N - 1; j++)
        {
            sum += uMatrix[i, j] * x[j];
        }
        x[i] = y[i] - sum;
    }

    return x;
}

