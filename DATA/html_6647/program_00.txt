float[] SumSamplingData(Vector3[] data)
{
    // xの合計値
    float x = 0;

    // x^2の合計値
    float x2 = 0;

    // x * yの合計値
    float xy = 0;

    // x * zの合計値
    float xz = 0;

    // yの合計値
    float y = 0;

    // y^2の合計値
    float y2 = 0;

    // y * zの合計値
    float yz = 0;

    // zの合計値
    float z = 0;

    // 計測したデータから、各種必要なsumを得る
    for (int i = 0; i &lt; data.Length; i++)
    {
        Vector3 v = data[i];

        // 最小二乗平面との誤差は高さの差を計算するので、（今回の式の都合上）Yの値をZに入れて計算する
        float vx = v.x;
        float vy = v.z;
        float vz = v.y;

        x += vx;
        x2 += (vx * vx);
        xy += (vx * vy);
        xz += (vx * vz);

        y += vy;
        y2 += (vy * vy);
        yz += (vy * vz);

        z += vz;
    }

    // matA[0, 0]要素は要素数と同じ（\sum{1}のため）
    float l = 1 * data.Length;

    // 求めた和を行列の要素として2次元配列を生成
    float[,] matA = new float[,]
    {
        {l,  x,  y},
        {x, x2, xy},
        {y, xy, y2},
    };

    float[] b = new float[]
    {
        z, xz, yz
    };

    // 求めた値を使ってLU分解→結果を求める
    return LUDecomposition(matA, b);
}

