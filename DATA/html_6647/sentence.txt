More than 3 years have passed since last update.前回書いたLU分解の記事を用いて、今回は「最小二乗平面」を求めるプログラムについて書きたいと思います。
前回の記事で書いた通り、現在作っているVRコンテンツで利用するためのものです。
今回はこちらの記事（最小二乗平面の求め方 - エスオーエル）を参考にしました。以前、最小二乗法を使ってトレンドラインを計算するという記事を書きましたが、こちらは２次元データでの求め方でした。
それに対して、最小二乗「平面」ということからも分かるように、３次元の点群データを元に、その点郡すべてからの距離が最小の二乗となるような「平面」を求めるものです。理論について詳しくはないですが、どうやらこうしたデータ郡の中で平面を求めるには最小二乗法が最適であることが分かっているようです。最小二乗平面は3次元のデータを利用することを書きましたが、そもそも最小二乗法とはどんな方法なのでしょうか。
Wikipediaから引用させてもらうと以下のように書かれています。最小二乗法(さいしょうにじょうほう、さいしょうじじょうほう；最小自乗法とも書く、英: least squares method)は、測定で得られた数値の組を、適当なモデルから想定される1次関数、対数曲線など特定の関数を用いて近似するときに、想定する関数が測定値に対してよい近似となるように、残差の二乗和を最小とするような係数を決定する方法、あるいはそのような方法によって近似を行うことである。大事な点は以下です。残差の二乗和を最小とするような係数を決定する方法今回の記事で言えば、求めた平面（3次元データの点群から求めた理想的な平面）から、実際の観測データまでの高さ（残差）の二乗の和（$\sum{}$）を最小とする係数を求める方法、ということです。
要は、全部の点群のおよそ中心を通る「いい感じの平面」を求めるってことですね。ちなみにこれを求める理由は、前述のように「理想的な」平面が求まれば、以後の点の予測や、あるいは観測済みデータを理想的な平面に投影した位置の点を求めることができるようになるためです。導出は以下のようになります。点$P(x_0, y_0, z_0)$を通り、法線ベクトルを$\vec{n} = (a, b, c)$とする平面の方程式は、平面上の任意の点$x$を用いて以下のように内積を用いて計算できます。$x - x_0$などは、平面上の「ベクトル」を求めたものです。
そして内積は、直行するベクトル同士を掛けると$0$になる性質を利用しての計算ですね。
つまり平面上のベクトルと法線の内積は$0$になる、ということです。そして一般形にすると以下のように表されます。このとき、平面の法線ベクトルは$\vec{n} = (a, b, c)$となります。参考: 平面の方程式さて、最小二乗平面を求める場合、平面からの距離を測定したいわけなので、$z$を高さ、$x, y$を縦横に取って、以下のように表します。最小二乗平面は、最小二乗法から求めた$a, b, c$を上記の方程式に当てはめて求められる平面となります。
つまり、どの点からも最小距離の二乗となる平面、ということです。（これが「理想的な」平面です）今回計算したいと思っているのは、VRゲームで利用するとある値です。
その値とは、ユーザの手の位置を観測（サンプリング）し、その点群の中から今回の最小二乗平面を求めたいと思っています。
つまり、$x, y, z$の値を毎フレーム取得し、そのデータを元にするわけです。なので、測定データをそれぞれ$x_i, y_i, z_i$とします。求め方としては、求めたい$a, b, c$を未知数として、今回求めたい平面と各データとの高さの差を$E_i$と置きます。
つまり式にすると以下のようになります。仮に、点が平面上にある場合は$z_i$と方程式の値が同じで結果は（差）は$0$となります。
なので$0$以外が差になる、というわけですね。そしてこの$E_i$の二乗の値の和を$F$と置きます。
式にすると以下のようになります。冒頭でも書いたように、この和（$F$）が最小になる$a, b, c$を求めるのが今回の目的です。求め方は、参考にした記事から引用させてもらうとFはa,b,cについて2次の式なので、最小値を求めることは、
a,b,cについて偏微分して0となる極値を求めることになります。とのこと。
なのでそれぞれの係数に対して偏微分してみましょう。試しに$b$からやってみます。
$E_i^2$は以下になります。これを展開すると、これを$b$について偏微分すると、となり、これを整理すると以下を得ます。きれいに元の式の平方が出てきましたね。すごい。
そしてこれの和を求めているので、最終的には以下になります。同様にして、これらをすべての係数に対して行うと、最終的に以下を得ます。3つの未知数に対して3つの式が作れたので、あとはこれを連立方程式として解くことで$a, b, c$それぞれの値を求めることができます。連立方程式を解くには行列にして計算するとやりやすいです。
そしてその行列にした計算をさらに解きやすくするのが、前回書いた記事（[数学] LU分解法をプログラムで書いてみた）で紹介している「LU分解法」です。
（他にもいくつか方法があるようです）上記の連立方程式を、前回の記事と同じ記号を用いて行列に分解して表してみましょう。すると、以下のように表すことができます。さらにこれを、LU分解を用いて変形すると、となります。
そして、行列Aを分解した行列Lと行列Uを使って、以下の2次方程式に変形します。ここまでくれば、あとは前回実装したLU分解を用いて計算を行うことができそうです。
ということで、実際にプログラムに落とし込んだのが以下になります。上記の部分で、計算に必要な各データの「和」を求めました。
これをLU分解を用いて連立方程式を解きます。
LU分解に関しては前回の記事でも書いていますが、前回の例はJavaScriptだったのでC#で再掲しておきます。これで、観測したデータ郡から理想的な平面を求めることができます。
あとは求まった平面の式を用いて、利用したデータを取得し利用するだけです。実際に今回実装した内容では以下のように使っています。これを使う前の計算方法と後でだいぶ違いが出たのでしっかり「理想的な」値が取れているようです。


