
class Expr {}
class CInt : Expr {
    public int Value { get; }
    public CInt(int value) =&gt; Value = value;
    public void Deconstruct(out int value) =&gt; value = Value;
    public override string ToString() =&gt; $"CInt({Value})";
}
class Add : Expr {
    public Expr Left { get; }
    public Expr Right{ get; }
    public Add(Expr l, Expr r) =&gt; (Left,Right) = (l, r);
    public void Deconstruct(out Expr l, out Expr r) =&gt; (l, r) = (Left, Right);
    public override string ToString() =&gt; $"Add({Left}, {Right})";
}
class Sub : Expr {
    public Expr Left { get; }
    public Expr Right{ get; }
    public Sub(Expr l, Expr r) =&gt; (Left,Right) = (l, r);
    public void Deconstruct(out Expr l, out Expr r) =&gt; (l, r) = (Left, Right);
    public override string ToString() =&gt; $"Sub({Left}, {Right})";
}
class Mul : Expr {
    public Expr Left { get; }
    public Expr Right{ get; }
    public Mul(Expr l, Expr r) =&gt; (Left,Right) = (l, r);
    public void Deconstruct(out Expr l, out Expr r) =&gt; (l, r) = (Left, Right);
    public override string ToString() =&gt; $"Mul({Left}, {Right})";
}
class Div : Expr {
    public Expr Left { get; }
    public Expr Right{ get; }
    public Div(Expr l, Expr r) =&gt; (Left,Right) = (l, r);
    public void Deconstruct(out Expr l, out Expr r) =&gt; (l, r) = (Left, Right);
    public override string ToString() =&gt; $"Div({Left}, {Right})";
}

