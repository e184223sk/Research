More than 3 years have passed since last update.駆逐するは大分盛りました。
BindingやCommandという仕組みがあるのはわかっているが、
マウス操作とかキー操作に対する処理をViewModelで行う方法がわからず、コードビハインドでViewクラスにイベント定義している様なコードを無くそうという程度の内容です。多くの実装方法で実現できるので、代表的なものや自身がよく使用しているものを記載しています。
誤りや、その他の手法があればコメント頂けると幸いです。各イベントで呼び出す処理をCommandで定義します。MainWindowViewModel.csMainWindow.xamlViewにはButtonとTextBlockを配置しました。
このSampleCommandを各操作から呼び出してみます。Commandにクリックのアクションが割り当たっているようなコントロールはCommandを使うのが良いと思います。
ボタンの場合は普通にCommandが使用できます、CommandParameterで引数も渡せます。　TextBlockのようにComamndが使えない場合、ButtonをTextBlockのような外観にしてCommandを使う方法です。
ControlTemplateで柔軟に見た目がカスタマイズできるので、コントロールは見た目ではなく、振る舞いや動作によって決定した方が良いと思います。　MouseAction列挙体に定義されている動作なら、この方法で下記のような実装ができます。
個人的には後述するKeyBindingも使用できるので使いやすいです。MouseAction列挙体　　プロジェクトにSystem.Windows.Interactivity.dllを参照追加して、Windowタグに「xmlns:i～」の行を追加します。
下記のコード例ではMouseMoveを指定していますが、MouseEnterなどを指定することで対応するイベントがトリガーになります。MouseMoveではマウス座標が知りたい事があると思うので、
Commandが呼び出すメソッドにマウスのコントロールに対する座標取得例を記載します。MainWindowViewModel.csKeyBindingにKey+Modifiers、またはGestureを指定すると特定のキー操作からCommandが呼び出せます。
コードではWindowに定義しました。Key + ModifierGesture　　　操作別で纏めたかったので手段が重複しています。　　　本記事内のシンプルな操作程度なら、簡単にViewから追い出すことができますが、
コードビハインドで書かないと難しい場合や、開発効率や可読性からコードビハインドで書いた方がいいんじゃないかなと思う場面はあります。
特別なことがない限り、MVVMで開発する事や、コードビハインドを無くす事が真の目的ではないはずなので、状況に合わせて選択してください！


