More than 1 year has passed since last update.3行で
・C#
・データの中身を見たい
・超入門者（とりあえずコピペで動かしたい）
含まれる内容 
WriteLine→ToString→PropertyGrid→LINQPad連携→VisualStudioのような統合環境
の順にステップアップしていきます。C#(.NET)でプログラムやデータ処理を行う際に、各種データをダンプする事は良くあると思います。
この記事では、PropertyGridを中心に少しの手間でデータ出力をよりリッチにする方法を書いていきますので、手を動かすコストと天秤をかけながら使えるものを使用していただければと思います。
最初の方は超入門者(Hello Worldレベル)を対象としていますのでかなり基本的な記載があります。入れ子になったクラス構造。ダンプするフィールドはすべてpublicなプロパティで表現される。
今回は例として以下のデータ構造をベースとして追加したりカスタマイズします。また、LINQPad組み込みのDump()を使用すると下記のように可視化されます。
一番基本的なやつ。System.Console.WriteやWriteLine(改行付き)を使用する。Hello Worldでも使用するのでお馴染み。下記の例では問題ないですが、data.Id + "text"のようにString以外を先に置くとエラーになります。これは次節のToStringを理解する必要があります。Visual Studioの出力パネルに出す場合はSystem.Diagnostics.Debug.Write* を使用する。実行結果 (Visual studio 2017) 
C#はデフォルトですべてのオブジェクト(変数)でToString()が使用できます。どんな変数でも.ToString()とつければstringの文字列になって返ってきます。このToString()は特別で、文字列の変換が要求された場合に暗黙的に呼ばれます。下記はVisual Studioのインスペクタの例です。

この例だと、dataツリーを展開しないと中身が見えないので不便です。以下のように
SampleDataのToStringを編集(オーバーライド)する事によって表示を改善します。実行結果は下記です。余白節約のために1枚の画像にまとめています。

特に配列の場合、下記の様に見通しが良くなります。
表示のチューニングは下記属性を使用します。他にもありますが大体下記を覚えておけば問題ありません。実行結果
下記のように、自作クラスSampleDataの子要素Childを入れてみます。以下のように、ChildはToStringに基づいてダンプできていますが、ツリーの展開ができません。

この時、クラス定義の前に [TypeConverter( typeof(ExpandableObjectConverter) )] を追加します。覚えられないので、スニペットか、VisualStudioのクラステンプレートを改造して上記を入れておくとよいでしょう。
実行結果は下記で、Childがツリーで展開可能になります。
ExpandableObjectConverterを使用していてもDynamic型のプロパティの場合はツリー展開されません。
dynamic型プロパティの前にExpandableObjectConverterを別途付けておく必要があります。
これは調べてもなかなか出てこないケースです。実行結果
PropertyGridでListを展開するやりたいことは以下

仕様書等が日本語のフィールド名でプログラムは英語名で...という時があるかどうか分かりませんが、簡単に実現できます。
プロパティの表示名はDisplayNameAttributeを使用するのですが、これを継承して2つ目の言語を追加します。あとはクラス側にDisplayMultiNameAttributeを設定し、コントロール側からDisplayMultiNameAttribute.UseSecondName を切り替えればOKです。PropertyGrid内部のツールバーにボタンを追加する場合はちょっと大変ですが以下です。一部アイテムは既に別記事で書いているので記事へのリンクにします。別記事へのリンク
PropertyGridにコピペ機能を追加する(1/2)
PropertyGridにコピペ機能を追加する(2/2)]
まず、以下のクラスを追加してください。CanConvertFromで対応可能かどうか判断して、ConvertToは実際に文字列に変換するときに呼ばれます。このクラスを基本形として改造すると大体のケースで対応できるかと思います。使用方法は以下のような感じで、0x0000形式に変えたいプロパティの前に"[TypeConverter(typeof(UInt0xHexConverter))]"を挿入してください。実行結果は下記で、ushortの値が0xの形で表示できています。
以下は更新中 ...PropertyGrid 応用編DockPanelSuite + PropertyGrid (+LINQPad)  RazorEngineを使用したテンプレート出力 
テンプレート出力方法は一つでも知っておくと便利。Excelに自由に出力する(仮) 
やっぱりExcelで出力できると実践に活かせます。


