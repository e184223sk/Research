
abstract class Maybe&lt;T&gt;
{
    public static Maybe&lt;T&gt; Nothing =&gt; Nothing&lt;T&gt;.Instance;
    public static Maybe&lt;T&gt; Just(T value) =&gt; new Just&lt;T&gt;(value);
}
sealed class Nothing&lt;T&gt; : Maybe&lt;T&gt;
{
    private static Nothing&lt;T&gt; instance = new Nothing&lt;T&gt;();
    public static Nothing&lt;T&gt; Instance =&gt; instance;
    private Nothing() { }
    public override string ToString() =&gt; "Nothing";
}
sealed class Just&lt;T&gt; : Maybe&lt;T&gt;
{
    public T Value { get; }
    public Just(T value) =&gt; Value = value;
    public void Deconstruct(out T value) =&gt; value = Value;
    public override string ToString() =&gt; $"Just({Value})";
}

