More than 1 year has passed since last update.この記事はC# Advent Calendar 2019の12月５日の記事として書かれました。この記事はkekyoさんのスライド「C#でわかる こわくないMonad」をモチベーションに書かれています。
kekyoさんのスライドでは、HaskellのMaybeモナド(Optionモナド)に相当するクラスを、まるでHaskellのdo記法のようにC#のクエリ記法で扱う方法が丁寧に紹介されています。本記事ではその他のモナドも同様の手法を用いて実装していきます。LINQでおなじみのクエリ記法(from ... in ... select ...)ですが、これを用いてHaskellのモナド＆Do記法に近い書き方がC#でもできることを紹介します。HaskellでおなじみのモナドのうちMaybeモナド(Optionモナド) &amp; do記法をC#で再現する方法については、既にkekyoさんのスライド「C#でわかる こわくないMonad」で大変詳しく紹介されています。
本記事ではHaskellの入門者である『すごいHaskellたのしく学ぼう!』に掲載されているモナドのうち幾つかについて簡単に紹介しつつ、適切な実装を与えることでHaskellのdo記法に似たことがC#のクエリ構文でもできることを例示します。そして、その実装がC#で記述量的にそこまで重くないことを確認します。kekyoさんのスライドでも触れられている通り、C#でわざわざこの書き方をする意義は多くの場合あまりなさそうです。しかし、この手法が効果的に使われているSpracheというプロダクトがあります。最後にそのプロダクトがどのようにクエリ構文を活用しているか簡単に紹介します。HaskellやHaskellのモナドの知識は特に仮定しません。Haskellのコードが出てきたときは解説を入れます。漠然とコードを眺めて「Haskellのdo記法と似た書き方がとC#でもできるのだなあ」と納得していだければ筆者の目的は達成します。文脈を伴う計算を簡単な構文で貼り合わせて大きな単位にしていける機能...などと言葉を尽くしたいところですが、おそらく自然言語で言葉を尽くすより以下の実例を見たほうが直感が得られやすいと思います。
この辺りの話については、『すごいHaskellたのしく学ぼう!』という本にわかりやすい例と詳しい説明があるので、興味のある方はそちらの本でHaskellに触れてみてもいいかもしれません。以下ではHaskellのモナド &amp; Do記法の例とそれに対応するC#のコードを幾つか見ていきます。
まず、それぞれのモナドに対して使われ方を確認します。
C#のクエリ記法で同様の書き方をするために必要となる実装は、最後にまとめて確認します。Listモナドにおける文脈は「複数の可能性」です。Listモナドは、可能なケースの組み合わせ全てに対して答えを返すときに有用です。以下のHaskellでの例を見てみましょう。sgnは-1と1の可能性があり、aは1と2と3の可能性があり、bは4と5の可能性があります。
これに対して、sgn * (10 * a + b)という計算をしようとしています。実行すると以下の出力を得ます。可能な組み合わせ全てを網羅した結果がリストとして得られます。我々が見慣れているC# での IEnumerableに対するクエリ構文は、HaskellのListモナドに対するdo記法に対応していると考えることができます。実行すると、同じく全ての可能性を網羅した以下の出力を得ます。Haskellのdo記法を用いた書き方と近い書き方ができています。Maybeモナドにおける文脈は「失敗する可能性」「値が無い可能性」です。
Maybeモナドは失敗する可能性のある計算を張り合わせるときに用いられます。
こちらもHaskellでの例を通じて説明します。Maybe Int型はC#のint?に似た型です。
何らかの値が入っているかもしれませんし(Just n)、値が入っていないかもしれません(Nothing)。以下のコードのsumThreeは、Maybe Int型の３つ組を受け取ってそれらの和を返そうとする関数です。
mainではtestCasesの中の各test caseに対して、そのsumThreeを求めて出力しています。結果はとなります。ma, mb, mcが全てJust nだったときのみ計算は成功し、目的の値を返します。
どれか一つでもNothingだった場合、計算は失敗し、Nothingを返します。C#ではうまくMaybeクラスを定義してやれば以下のように書くことができます。Haskellでの例と同様に、以下の出力を得ます。Writerモナドにおける文脈は「ロギング」です。なんらかのログをとりながら計算を進めていくことができます。これを実行すると、との出力を得ます。出力の仔細については今回見る必要はありません。
a =3; b = a + 4: c = a + bの計算結果である10と、そこに至るまでのログである"a is 3. b is a + 4. c is a + b. "の両方の情報が保持されていることが確認できます。こちらもうまくStringWriterクラスを定義してやれば以下のように書くことができます。こちらはStringに限ったWriterの実装にしています。（+ をどう持つかなどを決めるのが面倒だったため）出力は以下の通りです。Readerモナドにおける文脈は、全ての関数に共通して渡される引数です。言葉による説明では少しわかりづらいと思うので、Haskellでの例を見てみましょう。main関数を見てみると、 readerという関数に15が渡されています。readerの中では、引数を２倍する処理、引数を文字列化して文字列の長さを得る処理、100を足す処理の３つの処理全てに15が渡されます。
その結果、twiceには30が、lenには2が、plusHundredには115が入ります。出力は以下の通りです。Readerクラスを定義して、以下のように書けます。出力は以下の通りです。Stateモナドにおける文脈は状態です。
裏で状態を持ち回して使います。C#では、例えばcurrentStateのような変数を用意してその変数の値を書き換えていけば、状態を読み、変更して、下の行に伝播させることは容易です。
しかし、Haskellでは全ての変数はImmutableなので、変数を書き換える方法では状態を持ち回せません。そこで、状態を簡単に持ち回すためにStateモナドが用いられます。stackに、 3, 1, 4, 1, 5, 9を順番に積んでいき、3回popして、得られた値を足し合わせています。
最後に積まれた3つの値は1, 5, 9なので、和として15が出力され、 stackには最終的に一番上から順に4, 1, 3が積まれています。
以下は実行結果です。Stateクラスを定義して、以下のようにすることができます。
例示の都合上、Stackクラスも定義しています。現行のC#ではこの場面でdiscard_が使えないため、使わない値に一々_1, _2などと名前をつけています。実行結果は以下の通りです。このセクションの目的は「クエリ構文をHaskellのdo記法みたいに使うためには、それほど大変な実装をする必要はなさそうだ」という雰囲気を掴んでもらうことにあります。したがって本セクションを細かく読んでいただく必要はありません。「このくらいの行数で済むのかー」くらいの読み方をしていただければ幸いです。クエリ構文を上で紹介したように使うには、from の右側に来る値がSelectメソッドとSelectManyメソッドを持っている必要があります。
この値の型をMとしたときに拡張メソッド方式でSelectとSelectManyを書くと、各メソッドのシグネチャと返り値の型はとなります。これはHaskellの型の書き方ではに相当します。見ての通りselectManyが少し複雑です。
haskellのモナドを定義するにはreturnとbindを定義すればよいのですが、これらはC#のシグネチャ＋返り値の型ではであり。Haskellの型ではとなるような関数です。Select &amp; SelectManyの組み合わせと比べると単純なのが見て取れると思います。
実は、クエリ構文をdo記法のように機能をさせるためのSelectとSelectManyは、ReturnとBindの組み合わせによって実装できます。よって、簡単な方の組み合わせとしてReturnとBindを使って説明していきます。今回自前で実装していないので説明は省略します。Maybe&lt;T&gt;クラスとそのサブクラスを以下のように定義します。サブクラス関係によって、値がない状態Nothing&lt;T&gt;と値がある状態Just&lt;T&gt;を表現できていることがわかります。
これに対して以下のようにReturnとBindを定めます。Returnは受け取った値を特に何も処理せずにJustでくるんで返します。
Bindは受け取った値がNothing型かJust型かで場合分けし、Nothing型の場合はNothingを、Just型の場合は中の値を取り出し、その値に関数を適用して、再びJust型でくるんで返します。ValueとLogを持つStringWriterクラスを定義します。これに対して以下のようにReturnとBindを定義します。やはりReturnはくるむだけです。特に説明することはありません。これに対して以下のようにReturnとBindを定義します。Returnは値を受け取って、「引数を受け取るがその値を無視して常に決まった値を返す関数」を持ったReaderクラスの値を作ります。に対して、で済みます。
いずれもかなり単純に実装できていることがお分かりいただけたかと思います。私が以前書いた記事の「C#のパーサコンビネータライブラリSpracheでML風言語のインタプリタを実装する」で紹介していたSpracheというパーサコンビネータはクエリ記法で書けるように設計されています。
たとえば if e1 then e2 else e3という式をパースするパーサーはのように書くことができます。
Parser型は文字列をパースしてT型の値を生成するパーサーの型です。例中だとprimaryParserというパーサーから、あたかもパース結果の値を取り出してp1, p2, p3に束縛しているかのように処理を書くことができます。今回書いたコードのリンクはこちらです。
読んでいただきありがとうございました。皆様に幸せな年末がありますように！


