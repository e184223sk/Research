&gt;)
            .MakeGenericType(argTypes)
            .GetConstructor(argTypes)
            .Invoke(new object[] { Arg0, Arg1, Arg2, Arg3 }) as ScriptArguments;

        _scriptElementChanged = true;
    }

    protected override async void Invoke(object parameter)
    {
        if (_scriptElementChanged)
        {
            // スクリプトをコンパイルしてデリゲートを作成する。
            _runner = CSharpScript
                .Create(Script, ScriptOptions, _args?.GetType())
                .CreateDelegate(); ;
            _scriptElementChanged = false;
        }

        // デリゲートを実行
        await _runner?.Invoke(_args);
    }
}

public abstract class ScriptArguments
{
    public abstract void SetArg(int index, object value);
}

public class ScriptArguments&lt;T0, T1, T2, T3&gt; : ScriptArguments
{
    public ScriptArguments(T0 arg0, T1 arg1, T2 arg2, T3 arg3)
    {
        Arg0 = arg0;
        Arg1 = arg1;
        Arg2 = arg2;
        Arg3 = arg3;
    }

    // 4個も引数があれば足りるでしょ。

    public T0 Arg0 { get; set; }
    public T1 Arg1 { get; set; }
    public T2 Arg2 { get; set; }
    public T3 Arg3 { get; set; }

    public override void SetArg(int index, object value)
    {
        switch (index)
        {
            case 0:
                Arg0 = (T0)value;
                break;
            case 1:
                Arg1 = (T1)value;
                break;
            case 2:
                Arg2 = (T2)value;
                break;
            case 3:
                Arg3 = (T3)value;
                break;
            default:
                throw new ArgumentOutOfRangeException("index");
        }
    }
}

