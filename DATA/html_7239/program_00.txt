public class ScriptAction : TriggerAction&lt;DependencyObject&gt;
{
    private bool _scriptElementChanged;

    private ScriptRunner&lt;object&gt; _runner;

    private ScriptArguments _args;

    #region Script
    public string Script
    {
        get { return (string)GetValue(ScriptProperty); }
        set { SetValue(ScriptProperty, value); }
    }

    public static readonly DependencyProperty ScriptProperty =
        DependencyProperty.Register(
            "Script",
            typeof(string),
            typeof(ScriptAction),
            new FrameworkPropertyMetadata(
                "",
                (d, e) =&gt; ((ScriptAction)d).OnScriptChanged((string)e.OldValue, (string)e.NewValue)));

    protected virtual void OnScriptChanged(string oldValue, string newValue)
    {
        _scriptElementChanged = true;
    }
    #endregion

    #region ScriptOptions
    public ScriptOptions ScriptOptions
    {
        get { return (ScriptOptions)GetValue(ScriptOptionsProperty); }
        set { SetValue(ScriptOptionsProperty, value); }
    }

    public static readonly DependencyProperty ScriptOptionsProperty =
        DependencyProperty.Register(
            "ScriptOptions",
            typeof(ScriptOptions),
            typeof(ScriptAction),
            new FrameworkPropertyMetadata(
                null,
                (d, e) =&gt; ((ScriptAction)d).OnScriptOptionsChanged((ScriptOptions)e.OldValue, (ScriptOptions)e.NewValue)));

    protected virtual void OnScriptOptionsChanged(ScriptOptions oldValue, ScriptOptions newValue)
    {
        _scriptElementChanged = true;
    }
    #endregion

    #region Arg0
    public object Arg0
    {
        get { return GetValue(Arg0Property); }
        set { SetValue(Arg0Property, value); }
    }

    public static readonly DependencyProperty Arg0Property =
        DependencyProperty.Register(
            "Arg0",
            typeof(object),
            typeof(ScriptAction),
            new FrameworkPropertyMetadata(
                null,
                (d, e) =&gt; ((ScriptAction)d).OnArg0Changed(e.OldValue, e.NewValue)));

    protected virtual void OnArg0Changed(object oldValue, object newValue)
    {
        if (oldValue?.GetType() != newValue?.GetType())
        {
            UpdateArguments();
        }
        else
        {
            _args?.SetArg(0, newValue);
        }
    }
    #endregion

    #region Arg1
    public object Arg1
    {
        get { return GetValue(Arg1Property); }
        set { SetValue(Arg1Property, value); }
    }

    public static readonly DependencyProperty Arg1Property =
        DependencyProperty.Register(
            "Arg1",
            typeof(object),
            typeof(ScriptAction),
            new FrameworkPropertyMetadata(
                null,
                (d, e) =&gt; ((ScriptAction)d).OnArg1Changed(e.OldValue, e.NewValue)));

    protected virtual void OnArg1Changed(object oldValue, object newValue)
    {
        if (oldValue?.GetType() != newValue?.GetType())
        {
            UpdateArguments();
        }
        else
        {
            _args?.SetArg(1, newValue);
        }
    }
    #endregion

    #region Arg2
    public object Arg2
    {
        get { return GetValue(Arg2Property); }
        set { SetValue(Arg2Property, value); }
    }

    public static readonly DependencyProperty Arg2Property =
        DependencyProperty.Register(
            "Arg2",
            typeof(object),
            typeof(ScriptAction),
            new FrameworkPropertyMetadata(
                null,
                (d, e) =&gt; ((ScriptAction)d).OnArg2Changed(e.OldValue, e.NewValue)));

    protected virtual void OnArg2Changed(object oldValue, object newValue)
    {
        if (oldValue?.GetType() != newValue?.GetType())
        {
            UpdateArguments();
        }
        else
        {
            _args?.SetArg(2, newValue);
        }
    }
    #endregion

    #region Arg3
    public object Arg3
    {
        get { return GetValue(Arg3Property); }
        set { SetValue(Arg3Property, value); }
    }

    public static readonly DependencyProperty Arg3Property =
        DependencyProperty.Register(
            "Arg3",
            typeof(object),
            typeof(ScriptAction),
            new FrameworkPropertyMetadata(
                null,
                (d, e) =&gt; ((ScriptAction)d).OnArg3Changed(e.OldValue, e.NewValue)));

    protected virtual void OnArg3Changed(object oldValue, object newValue)
    {
        if (oldValue?.GetType() != newValue?.GetType())
        {
            UpdateArguments();
        }
        else
        {
            _args?.SetArg(3, newValue);
        }
    }
    #endregion

    private void UpdateArguments()
    {
        // 各引数の型から動的に ScriptArguments&lt;&gt; オブジェクトを作り出す。
        var argTypes = new Type[]
        {
            Arg0?.GetType() ?? typeof(object),
            Arg1?.GetType() ?? typeof(object),
            Arg2?.GetType() ?? typeof(object),
            Arg3?.GetType() ?? typeof(object),
        };
        _args = typeof(ScriptArguments&lt;
