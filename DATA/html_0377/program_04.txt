
using System;

namespace CSharp1
{
    class Program
    {
        static void Main(string[] args)
        {
            MessageCollector messageCollector = new MessageCollector();
            // 確かシグネチャーが同じでもデリゲートとメソッドで自動的に変換してくれなかったと思う…
            // ラムダ式もないので、必ず別メソッドで定義しないといけない。
            messageCollector.Greet += new GreetEventHandler(MessageCollector_Greet);

            messageCollector.AddMessage("Hello");
            messageCollector.AddMessage("world");
            messageCollector.AddMessage("こんにちは"); // こんにちは って言ったね！　と表示される
        }


        static void MessageCollector_Greet(object sender, GreetEventArgs args)
        {
            // string.Format が正義
            Console.WriteLine(string.Format("{0} って言ったね！", args.Message));
        }
    }

    class GreetEventArgs : EventArgs
    {
        // プロパティの定義がつらい
        private string _message;
        public string Message
        {
            get { return _message; }
        }

        public GreetEventArgs(string message)
        {
            _message = message;
        }
    }

    // ジェネリクスが無かったので汎用的なイベントハンドラーの EventHandler&lt;T&gt; なんてない。
    // もちろん Action&lt;T&gt; や Func&lt;T, R&gt; のようなデリゲートも定義されてないので必要があれば全部自分で定義しないといけない
    delegate void GreetEventHandler(object sender, GreetEventArgs args);

    class MessageCollector
    {
        public event GreetEventHandler Greet;

        public void AddMessage(string message)
        {
            switch (message)
            {
                case "おはようございます":
                case "こんにちは":
                case "こんばんは":
                    // ?. 演算子はないので null チェックして呼ばないといけない。
                    if (Greet != null)
                    {
                        Greet(this, new GreetEventArgs(message));
                    }
                    break;
                default:
                    // noop
                    break;
            }
        }
    }
}

