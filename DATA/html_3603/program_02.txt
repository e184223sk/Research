
    class XmlPropertyDescriptor : SimplePropertyDescriptor
    {
        protected readonly XObject obj;

        public XmlPropertyDescriptor(Type componentType, XObject obj, params Attribute[] attributes) : base(componentType, obj.GetName(), obj.GetType(), attributes)
        {
            this.obj = obj;
            this.Converter = this.HasElements ? this.CreateConverter(componentType) : new StringConverter();
        }

        private bool HasElements =&gt; this.obj.HasElements();

        public override TypeConverter Converter { get; }

        protected virtual TypeConverter CreateConverter(Type componentType) =&gt; new XmlConverter(componentType);

        public override object GetValue(object component)
        {
            return this.HasElements ? this.obj : (object)this.obj.GetValue();
        }

        public override void SetValue(object component, object value)
        {
            if (!this.HasElements) this.obj.SetValue((string)value);
        }
    }

