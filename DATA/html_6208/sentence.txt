More than 3 years have passed since last update.MCP試験 70-483 Programming in C# の学習材料。目次はこちらCPUを有効活用してレスポンスタイムやスループットを改善するための仕組み。生のスレッドを作る。生のスレッドの生成と破棄はコストが大きい。スレッドプールは予め用意されたスレッドを利用・再利用する仕組み。終了を待ちたいときはシグナル(Auto/ManualResetEvent)を使う。検証コード検証結果スレッドを何回も使用する場合は、スレッドプールを使う方が何倍も速い。お手軽並列処理。Parallel.Invoke(), Parallel.For(), Parallel.ForEach() が使える。お手軽並列LINQ。ParallelとPLINQをTPLUIスレッドをブロックするボタンクリックイベントハンドラUIスレッドをブロックしないボタンクリックイベントハンドラポイント：
- メソッドに async キーワードを付ける (付けないと await キーワードが使えない)
- 非同期IOメソッドに await キーワードを付ける (付けると、Task&lt;string&gt; ⇒ string )Task.Run() を使ってお手軽 Task 開始Task.ContinueWith() を使って複数の Task を継続して実行させる。スレッドセーフでないオブジェクトに対し、複数のスレッドから同時に書き込もうとすると、内部のデータがおかしな状態になってしまうことがある。これをレース(競合)とか言ったりする。List&lt;T&gt; はスレッドセーフなデータ構造ではない。ConcurrentBag&lt;T&gt; はスレッドセーフなデータ構造。ConcurrentBag&lt;T&gt;のほか、BlockingCollection&lt;T&gt;, ConcurrentDictionary&lt;TKey, TValue&gt;, ConcurrentQueue&lt;T&gt;, ConcurrentStack&lt;T&gt; などもある。要素数10000程度の文字列配列の各文字列のSHA-1ハッシュ値を計算したい。CPUを有効活用しようとするとき、どのAPIを使うのが良いか。Paralell または PLINQ で実行される同時並列数を制限したい。どうすればよいか。async キーワードを付けたメソッドの戻り値は、Task, Task&lt;T&gt;, void のいずれかである。ただし void は基本的に避けるべきとされている。なぜ避けるべきか？また void を使うのはどんなときか？スレッドを何度も使う場合、Thread よりも ThreadPool を使う方がパフォーマンスが良い。そして Thread よりも Task のほうが多機能。では Thread を使うはどんなとき？下記のキーワードを整理しろ。


