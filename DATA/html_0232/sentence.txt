チェコに本社を置くJetBrainが開発したUnityむけの有料のエディターです。
Unity特有の機能のコード補完や、デバッガーはもちろんのこと、Unityと深く結びついているようで、エディタ側でUnityを操作できたりもします。WinでもMacでも動きます。料金は、使い続けると徐々に安くなる面白い料金体系です。
私は使ったことがありませんが、
JetBrain製ではVisualStudioのプラグインのReSharperやKotorinという言語も有名みたいです。私は、いわゆる独学のプログラマーであり、学校でプログラミングを勉強したことがありません。
最初は趣味で、今は仕事でプログラミングを書き続け、少しずつマシなコードが書けるようになった気がしています。Riderを使い始めたのは今年、開発者の友人に勧められたのがきっかけです。
その結果、その便利さもさることながら、Riderの ちょっとおせっかいな添削機能に大変驚きました。
まるでマンツーマンの先生が横にいるようです。チームの一員としてプログラマ同士のコードレビューが開発フローに含まれていれば、多少不愉快だとしても、新しい気付きや成長もあるでしょう。しかし独学プログラマは成長させる工夫を自分で用意しなくてはなりません。Riderの添削機能は、その大きな助けになると思います。有料なので最初は躊躇しましたが授業料だと思えば安いものです。以下に添削機能の例をあげました。知らないうちに言語の機能が増えている場合があります。
いつものように書いてみたら、波線が引かれていました。＜スクリーンショット＞
意味が分からないので、注意書きを検索窓にコピペしてみます。すると…

こちらのマイクロソフトの記事がヒットしました。
式形式のメンバー (C# プログラミング ガイド)どうやらこれはC#6とC#7で導入された新機能であり、getterのみの場合（setterがないとき）は簡潔に書けるようです。
ふむふむ。勉強になります。＜旧コード＞＜新コード＞上記は説明のためのシンプルな例ですが、
実際のゲームでは、もうちょっと凝った感じで使っています。RiderはUnityだけでなく、webのフロントエンド用の言語もカバーしているようです。
せっかくなのでJavaScriptを書くときに使ってみました。＜スクリーンショット＞

var は普通、書いちゃいますよね。調べてみるとES6からの新機能らしく、少し前に入ったようです。
こちらの記事を読んで勉強します。
ES6の新機能: 「let」「const」宣言を調べてみたどうやらvarの機能を制限したもののようで、うっかり上書きするのを防げるようです。
ありがとうございます、Rider先生。今後、積極的に使います。スペルを覚えるのがどうしても苦手で…　今まで多くのタイポをコードに混入させてきました。
Word等の文章ソフトではタイポチェッカーのおかげで間違えに気が付きやすいのですが、ソースコードの変数は（たとえスペルが間違っていようとも）書かれたものが正しく、エディタによる指摘は難しいだろうと諦めていました。…ですがRiderは、このように変数や関数のタイポを指摘してくれます。

socre でなく score ですね。（なぜかよく間違えます）また、このように複数の単語が合体した関数も、間違っている単語のみ指摘してくれます。

タイポは、後から見て恥ずかしいばかりでなく検索で引っかからなかったり、誤って別の変数にアクセスをしていたりなど不具合の原因になります。Riderがタイポを教えてくれるおかげでこの類のバグは起きなくなりました。Unity特有の問題もアドバイスしてくれます。
リアルタイムにコードレビューを受けているような感覚です。例えば、うっかり毎フレーム実行されるUpdateの中に、GetComponet を書いてしまいました。
すると…
ざっくり意訳すると「そこでやると重いですよ」ということなのでしょうか。
こんなことも教えてくれるのですね。ありがたい。いままで添削機能について書いてきましたが、便利な機能もたくさんあります。
せっかくの機会なので、好きな機能をいくつか紹介します。Ctrl+Shift+Fで現れる検索ウィンドウが、恐ろしく強力です。
例えばIgnoreConfirmationFlgと入れるとプロジェクト内を全文検索して瞬時に表示されます。
…いや、現れるのが速すぎるので、事前にインデックスを作っているのでしょう。とにかく高速です。

また驚いたのは、この検索ウィンドウ内で編集ができることです。
新たにウィンドウを開く必要はありません。この編集の体験は革命的です。今までリネイムは、おっくうな作業でした。
例えば、単純な置換ではヒットしてほしくない部分も編集してしまったり、
変数が変わることで、インスペクタで設定したパラメータがリセットされてしまったりするからです。ところが、Riderのリネイムはどうゆうことでしょうか。
不思議な技術でうまいことやってくれます。発見したRiderのリネイムの特性です。最後の「インスペクタで設定したパラメータが外れない」について補足をしておきます。
まず、インスペクタで何か設定している変数の場合、以下のようなウィンドウが表示されます。
これはgameUiState を gameUi に変更しようとしたとき。

Add FormerlySerializedAs attribute にチェックを入れます。
するとusingとアトリビュートが追加されます。どうやらこの変更でインスペクタの設定が維持されるようです。これらの追加された記述は、一度でもUnityでコンパイルが動けば削除しても問題ありません。
気になるなら消しましょう。（私は消す派です）ファイルの一番上にデフォルトで書かれている読み込みに関する記述です。C#には様々な便利な機能がありますが、それらを使うには読み込む必要があります。
今まで、いちいち書いていたのですが、
Riderは読み込んでいない機能もコード補完でき、その機能が使われたら自動で記述してくれます。
例えばUniRxの機能、Observable とおもむろに書いてみます、すると…

読み込んでいないのに、こんなに候補が出てきました。
実際に使用すると、usingに自動で追加されます。一度慣れてしまうと、もとの暮らし(?)には戻れない便利さです。今年から使ってみたUnity用コードエディタのRiderについて、
プログラムの独学に役立つぞ、という視点でレビューをしてみました。満足をしているのですが、最後にデメリットも書いておくと、かなりメモリを消費します。
WinとMacで使用していますが、私の環境ではともに2GBくらい使っているようです。
検索の高速さやリネイムの正確さはメモリとのトレードオフなのでしょう。たぶん。導入については、すでに良い記事がありますのでご紹介だけしておきます。
Unity(C#)のEditorを次世代IDEのRiderに乗り換えてみた
2020/12/19現在、30日の試用期間があるようです。ここまで、お読み頂き、ありがとうございました。
良いお年を。


