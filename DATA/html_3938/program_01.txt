
public class SampleClass
{
    public Task&lt;int&gt; SampleMethodAsync(string filepath1)
    {
        var stateMachine = new SampleMethodAsyncStateMachine()
        {
            _arg_filepath1 = filepath1,
            _state = -1,
        };
        stateMachine.MoveNext();
        return stateMachine._tcs.Task;
    }

    private class SampleMethodAsyncStateMachine
    {
        public int _state = 0;
        public string _arg_filepath1;
        public TaskCompletionSource&lt;int&gt; _tcs = new TaskCompletionSource&lt;int&gt;();

        private TaskAwaiter&lt;string&gt; _awaiter1;
        private TaskAwaiter&lt;byte[]&gt; _awaiter2;

        public void MoveNext()
        {
            try
            {
                if (_state == 0) goto label_state0;
                if (_state == 1) goto label_state1;

                _awaiter1 = File.ReadAllTextAsync(_arg_filepath1).GetAwaiter();
                if (!_awaiter1.IsCompleted)
                {
                    _state = 0;
                    _awaiter1.OnCompleted(MoveNext);
                    return;
                }

                label_state0:
                var awaiterResult1 = _awaiter1.GetResult();
                var filepath2 = awaiterResult1;
                _awaiter2 = File.ReadAllBytesAsync(filepath2).GetAwaiter();
                if (!_awaiter2.IsCompleted)
                {
                    _state = 1;
                    _awaiter1.OnCompleted(MoveNext);
                    return;
                }

                label_state1:
                var awaiterResult2 = _awaiter2.GetResult();
                var result = awaiterResult2.Length;
                _state = -2;
                _tcs.SetResult(result);
            }
            catch (Exception e)
            {
                _state = -2;
                _tcs.SetException(e);
            }
        }
    }
}

