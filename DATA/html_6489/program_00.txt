public class Json
{
    public static string Serialize(object target)
    {
        using (var stream = new MemoryStream())
        {
            var serializer = new DataContractJsonSerializer(target.GetType());
            serializer.WriteObject(stream, target);
            return Encoding.UTF8.GetString(stream.ToArray());
        }
    }

    //2017/04/17 StringBuilderç‰ˆ
    public static string ToReadable(string json)
    {
        if (string.IsNullOrWhiteSpace(json)) return json;
        int i = 0;
        int indent = 0;
        int quoteCount = 0;
        int position = -1;
        var sb = new StringBuilder();
        int lastindex = 0;
        while (true)
        {
            if (i &gt; 0 &amp;&amp; json[i] == '"' &amp;&amp; json[i - 1] != '\\') quoteCount++;

            if (quoteCount % 2 == 0) //is not value(quoted)
            {
                if (json[i] == '{' || json[i] == '[')
                {
                    indent++;
                    position = 1;
                }
                else if (json[i] == '}' || json[i] == ']')
                {
                    indent--;
                    position = 0;
                }
                else if (json.Length &gt; i &amp;&amp; json[i] == ',' &amp;&amp; json[i + 1] == '"')
                {
                    position = 1;
                }
                if (position &gt;= 0)
                {
                    sb.AppendLine(json.Substring(lastindex, i + position - lastindex));
                    sb.Append(new string(' ', indent * 4));
                    lastindex = i + position;
                    position = -1;
                }
            }

            i++;
            if (json.Length &lt;= i)
            {
                sb.Append(json.Substring(lastindex));
                break;
            }

        }
        return sb.ToString();
    }

    public static string ToReadableOld(string json)
    {
        if (string.IsNullOrWhiteSpace(json)) return json;
        int i = 0;
        int indent = 0;
        int quoteCount = 0;
        int position = -1;
        string indentStr = "\n";
        while (true)
        {
            if (i &gt; 0 &amp;&amp; json[i] == '"' &amp;&amp; json[i - 1] != '\\') quoteCount++;

            if (quoteCount % 2 == 0) //is not value(quoted)
            {
                if (json[i] == '{' || json[i] == '[')
                {
                    indent++;
                    position = 1;
                }
                else if (json[i] == '}' || json[i] == ']')
                {
                    indent--;
                    position = 0;
                }
                else if (json.Length &gt; i &amp;&amp; json[i] == ',' &amp;&amp; json[i + 1] == '"')
                {
                    position = 1;
                }
                if (position &gt;= 0)
                {
                    indentStr = "\n" + new string(' ', indent * 4);
                    json = json.Substring(0, i + position) + indentStr + json.Substring(i + position);
                    i += indentStr.Length - position;
                    position = -1;
                }
            }

            i++;
            if (json.Length &lt;= i) break;
        }
        return json;
    }

    public static T Deserialize&lt;T&gt;(string json)
    {
        using (var stream = new MemoryStream(Encoding.UTF8.GetBytes(json)))
        {
            var serializer = new DataContractJsonSerializer(typeof(T));
            return (T)serializer.ReadObject(stream);
        }
    }

    public static object Deserialize(Type type, string json)
    {
        using (var stream = new MemoryStream(Encoding.UTF8.GetBytes(json)))
        {
            var serializer = new DataContractJsonSerializer(type);
            return serializer.ReadObject(stream);
        }
    }
}

