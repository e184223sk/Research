More than 1 year has passed since last update.この記事は NSSOL Advent Calendar 2019 の4日目の記事です。https://github.com/sekikatsu36/AtCoder
↑こちらをforkこの記事では「C#使いの競技プログラミング未経験者が、C#で初AtCoderに挑むハードルを下げる」ことを目的に、ベースとなるVSプロジェクトの共有＆紹介を行います。コンテストを続けるための便利TIPSは他にも山ほどあるので、気になればぜひ調べててみてください。（末尾に参考URLを記載）AtCoderはいわゆる競技プログラミングコンテストのサービスです。
今更ですが、私も最近AtCoderを始めまして。（まだ茶色レベルの新米です）
初回にC# + Visual Studioで参戦した際、「事前にVSプロジェクトとか準備した方がいいんだろうなぁ」と思ってはいたのですが、それを怠ってぶっつけ本番で突撃して見事なまでに惨敗。何度か再戦し、最近それっぽいプロジェクトが出来上がったので、この場を借りて共有します。
「競プロをC#で！」みたいな記事は世に溢れてますが、VSプロジェクトは転がっていないようだったので、この期に配布。
私のような悔しい思いをする方が一人でも減ればと。C#が好きだからその一言に尽きるんじゃないでしょうか。一応上げると、以下のようなメリットがあります。ただ、ぶっちゃけ、AtCoderでワザワザC#を選ぶ必要はないです。
C#には以下のようなデメリットがあるので、PythonやC++が得意ならそっちの方が良いと思います。以下にあります。
適宜forkしてください。A～Fまで、すべての問題が一プロジェクトに収まってるので、masterからブランチを切れば即コンテストを始められます。
ライブラリを作りたいときは、それ用のクラスを適当に追加すれば良いので、管理は楽だと思います。コンテスト中にエントリクラスやライブラリに変更を加えた際は、そのファイルだけmasterにmergeすれば次のコンテストですぐ使えます。問題を切り替えるときはProgram.cs内で呼び出すクラスを書き換える必要があります。
そこはイケてないのですが、良い方法が思いつかず。
まぁ何かしらの方法で切り替える必要はあると思うので、今はこれで妥協してます。
妙案あったらシェアいただけると嬉しいです。まぁ言うまでもなく。
これくらいパパっと実装できるとは思いますが、事前に用意してあるとストレスが全然違います。
初心者が一番最初に欲しくなる機能だと思います。すべての問題をそのまま一プロジェクトにまとめると、エントリポイントの問題が出てきます。
そのまま各問のクラスにMainメソッドを追加すると「エントリポイントが複数定義されてるぞ」とVisual Studioの怒りを買ってしまいます。
かといって、Main以外の名前にしてしまうと、コードをコピペして提出した時にAtCoderから「エントリポイントが見つからない」と心無いことを言われてしまいます。
プロジェクトを分けるのもコードを共通化しにくい。そんな時はプロジェクトのプロパティから[アプリケーション]&gt;[スタートアップオブジェクト]を設定しましょう。
複数のクラスでMainメソッドが定義されていても、これを指定すれば普通に実行できます。AtCoderは、テストケースを標準入力から受け取る仕様です。
競プロ勢からすれば標準入出力なんて手慣れたものでしょうが、初心者は一瞬手が止まると思います。（標準入力とか普段使わないし）
出鼻を挫かれるのも何なので、最初から載せておきます。実際の問題に合わせて、追加・削除します。ちなみに、intを使ってメモリをケチる必要はないです。
これまで10回弱参加しましたが、メモリが問題になったことはほぼなかったので。
予期せぬ桁溢れの方がずっと怖いので、脳みそを止めてlongを使います。（メモリは溢れてから考えるスタイル）なお、「入力を高速化」みたいなTIPSも世には転がってますが、最初はそこまで神経質になる必要はないかな、と。AtCoderは、結果を標準出力から返す仕様です。
入力同様、出力処理も記載しておきます。C#のConsole.WriteLineは遅いので、Mainの開始時にAutoFlushをfalseにセットして、最後にFlush処理を行います。こうすれば少しだけ高速化できます。（と偉い人が言っていた。自分で速度計測したわけではないです orz）
結果の出力をFlushの前に書くことだけ意識的に。初心者がやらかすミスの一つがオーバーフロー（桁溢れ）だと思います。
私も何度も痛い目を見ました。前項の通りintを使わないことである程度回避できますが、それでも食らうときは食らうので、ローカル環境ではオーバーフローが発生したら例外が出るようにしましょう。
プロジェクトのプロパティで、[ビルド]&gt;[詳細設計]&gt;[演算のオーバーフロー及びアンダーフローのチェック]をONにします。ライブラリを持っておくと、解くスピードがぐっと上がる可能性があります。
が、個人的に、という理由から、特にはじめは意識しなくてもいいと思います。とはいえ、C#でAtCoderをやっていれば、今に以下のようなライブラリが欲しくなってくると思うので、「欲しいな」と思ったタイミングでライブラリ化しましょう。使うときはLibを直接呼び出すのではなく、各問のクラスにコピペするよう注意。他にも、以下のようなことをやっておくと、便利かもしれません


