More than 3 years have passed since last update.MCP試験 70-483 Programming in C# の学習材料。目次はこちらFile クラスを使うDirectory クラスを使う列挙メソッド
- Directory.GetFiles()
- Directory.EnumerateFiles()
- Directory.GetDirectories()
- Directory.EnumerateDirectories() searchPattern(第二引数)に指定できる特殊文字File クラスと Directory クラスはファイルやフォルダを文字列で扱える静的クラス。
FileInfo クラスや DirectoryInfo クラスを使うとファイルやフォルダをオブジェクトとして扱うこともできる。File クラスを使うと簡単にできる。他、下記のメソッドもある。Stream で読み書き大きいファイルを扱うときは string や byte[] だとメモリを食うので FileStream を使うとよい。ファイルのアクセス共有や様々なオプションを指定したい場合も FileStream を使う。Stream の主なオペレーションは下記3つ。Stream の種類によっては使用できないオペレーションもある。例えば ReadOnly で開いた FileStream には Write できない。実行可否はCan～プロパティで確認できる。使い終わったら Close() または Dispose() も忘れないように。StreamReader, StreamWriterStreamReader/Writerを使うとストリームを文字列で扱える。文字コード文字列の読み込み・書き込みには文字コード(Encoding)を指定できる。TCPクライアント。ネットワークライブラリを作るでもない限り TCP を生で使うことはほとんどないと思うので紹介だけ。HTTPクライアント。HTTPを細かく弄る必要があるときは使うかも。WebRequest には HTTP を扱う HttpWebRequest だけでなく、FtpWebRequest や FileWebRequest なんかがあるけど、たぶん HTTP しか使わないでしょう。HTTPクライアントその２。コンテンツのダウンロード・アップロードしたい時は WebClient が楽。FTP も扱える。WebClient の主要なメソッドダウンロードアップロードアップロードのみ、NameValueCollection オブジェクトを指定できる UploadValues() メソッドが用意されている点に注意。これはフォームデータを送信(POST)したいときに使う。大きなコンテンツをダウンロードしたりアップロードしたりするときは、string や byte[] ではなく Stream で扱える OpenRead() や OpenWrite() を使うとよい。.NET 4.5 で追加された WebAPI に特化したクライアント。同時複数接続もサポートされている。(WebClient では同時接続できない)上記サンプルの GetStringAsync() の他、HTTP のメソッド GET, POST, PUT, DELETE に対応したメソッドがそれぞれ提供されている。HttpClient は非同期 Task メソッドしか提供していないのが特徴。非同期IOについては次のセクションで説明。IO 処理はデータサイズ、Diskアクセス速度、ネットワーク品質などに影響され、長い待ち時間が発生する場合がある。この間、スレッドは何もしない時間を過ごしてしまい、無駄。IO待ちの間はスレッドには別の処理をさせておくほうが効率がよい。これを実現するのが非同期処理。.NET4.0以降、ほとんどの IO 関連メソッドには非同期バージョンのメソッドも提供されるようになっている。非同期メソッドは Task クラスで実現されている。使い方：同期コードと非同期コードの比較同期バージョン：ダウンロード処理中、スレッドが占有される。非同期バージョン：ダウンロード処理中、スレッドが占有されない。非同期メソッドはこんな使い方もできる。ファイル システムとレジストリ (C# プログラミング ガイド)非同期プログラミング


