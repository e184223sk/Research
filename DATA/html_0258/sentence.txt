※本記事は下記のエントリから始まる連載記事となります。
.NET5.0/C#9.0でオートシェイプ風図形描画ライブラリを作ろう！(Chapter0)具体的な実装に入る前に、まずは図形を描画する部分のクラス構成をざっくりと考えてみます。ひとまずはこの構成にしたがって実装を進めてみたいと思います。それでは四角形（矩形）を描画する処理を例に具体的な実装について見てみましょう。IShapeインターフェースを継承したRectangleShapeクラスを作成します。
Draw()メソッドの実装はひとまず空のままにしておきます。図形描画のためのパラメータとして以下が必要になります。これらを構造体として定義します。また、位置（Point）とサイズ（Size）を組み合わせて四角形を表す構造体（Rectangle）も定義しておきます。
これらは構造体のデザインのガイドラインにしたがってIEquatableを実装した書き換え不可な構造体として定義します。今回は「C#9.0 SourceGeneratorでReadonly構造体を生成するGeneratorを作ってみました。」で紹介したReadonlyStructGeneratorを使って実現します。
下記のように構造体を定義し、必要なプロパティをinitアクセサー付きで追加します。
IEquatable&lt;T&gt;とその他諸々の実装はGeneratorによって自動生成されます。これで四角形の描画に必要なパラメータは揃いました。次に、実際に輪郭や塗りつぶしを描画する処理を定義するIGraphicsインターフェースに四角形を描画するためのメソッドを追加します。
輪郭はDrawRectangle()メソッド、塗りつぶしはFillRectangle()メソッドを使って描画します。
パラメータには位置とサイズを表すRectangleと、輪郭の色とサイズを指定するStroke または　塗りつぶしの色を指定するFillを受け取ります。IGraphicsにメソッドを追加したので、RectangleShapeのDraw()メソッドが記述できるようになりました。
輪郭を描かない（線なし）、塗りつぶさない（塗りつぶしなし）の場合に対応するためにStrokeとFillをNULL許容としておきます。
（参照型も既定でNULL非許容となっているので、クラス名の後に？を付けてNULL許容を明示する必要があります。）ここまででCoreShape側での実装は完了です。
続いてCoreShape（RectangleShape）を利用する側の実装に移ります。CoreShape.Extensions.SkiaSharpのプロジェクトへ移動し、IGraphicsインターフェースを継承したSkiaGraphicsクラスを作成します。SkiaSharpではSKCanvasクラスが図形描画を行うメソッドを持っています。
コンストラクタでSKCanvasのオブジェクトを受け取って利用するようにします。後は DrawRectangle() 、FillRectangle() でSkCanvasのDrawRect() を実行するだけです。SkiaGraphicsの実装はこれで良いのですが、1つだけ（ちょっとした）問題があります。
SkiaSharpの描画メソッドを利用する場合、座標や色などの指定にSkRectやSkColorといったSkiaSharp独自のオブジェクトを利用する必要があります。CoreShape でも独自にRectangleやColor構造体を定義しています。また、描画パラメータStrokeやFillに相当する値をSkiaSharpではSkPaintで指定する必要があります。したがって、CoreShapeから渡ってきたこれらの値を一旦SkiaSharp用の値に変換してあげる処理が必要になります。これらの処理を色々なところで毎回行うのは非常に面倒なので、拡張メソッドとしてまとめて定義してしまいましょう。CoreShape.Extensions.SkiaSharpのプロジェクトに以下のクラスを追加します。（型変換用）(SkPaintにStroke,Fillの値を設定）これらを使って先ほどのDrawRectangle()、FillRectangle()を書き換えると...(2020/12/28追記)　SKPaintはIDisposableを実装しているので using を付けた変数宣言を利用するように修正しました。ちなみに、using 変数宣言はC#8.0以降で利用できるようになった機能です。なんということでしょう！こんなにすっきりと記述できました！
長い道のりでしたが、画面に四角形を描画するまであと一息です！SampleWPFのプロジェクトへ移動します。
MainWindowのコードビハインド　MainWindow.xaml.cs　に追加した sKElement_PaintSurface イベントハンドラに以下のコードを記述します。ここまで来れば後は実行するのみです！はい、ようやくWindowに四角形を描くことに成功しました！これで図形を描画する仕組みが整いましたので、後はこの仕組みに乗っかって他の図形を描画するクラスを追加していけば良いですね。試しに楕円を描画する処理を追加してみましょう。（2020/12/28 ソースコード追記)次回の予定はです。


