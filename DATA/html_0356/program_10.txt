

@using System.Reflection
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.WebAssembly.Services
@inject LazyAssemblyLoader LazyAssemblyLoader

&lt;Router AppAssembly="@typeof(Program).Assembly" AdditionalAssemblies="@lazyLoadedAssemblies" OnNavigateAsync="@OnNavigateAsync"&gt;
    &lt;Navigating&gt;
        &lt;div&gt;
            &lt;p&gt;Loading modules...&lt;/p&gt;
        &lt;/div&gt;
    &lt;/Navigating&gt;
    &lt;Found Context="routeData"&gt;
        &lt;RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" /&gt;
    &lt;/Found&gt;
    &lt;NotFound&gt;
        &lt;LayoutView Layout="@typeof(MainLayout)"&gt;
            &lt;p&gt;Sorry, there's nothing at this address.&lt;/p&gt;
        &lt;/LayoutView&gt;
    &lt;/NotFound&gt;
&lt;/Router&gt;

@code {

    const string ModuleName = "LazyLoadModule.dll";
    List&lt;Assembly&gt; lazyLoadedAssemblies = new List&lt;Assembly&gt;();

    async Task OnNavigateAsync(NavigationContext args)
    {
        if (args.Path == "lazy" &amp;&amp; !lazyLoadedAssemblies.Any(x =&gt; x.GetName().Name + ".dll" == ModuleName))
        {
            var assemblies = await LazyAssemblyLoader.LoadAssembliesAsync(new string[] { ModuleName });

            lazyLoadedAssemblies.AddRange(assemblies);
        }
    }
}


