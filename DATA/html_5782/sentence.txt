More than 3 years have passed since last update.こちらは Sansan Advent Calendar 2017 の7日目の記事です。とある業務上の処理で非同期処理を複数並列で走らせたいと思って Parallel.ForEach 使おうとしたらみたいな事で悩んでたら弊社のエースエンジニアである @chocolamint 先生から.NETのDataflowの存在を教えてもらったので、ちょっと調べてみました。System.Threading.Tasks.Dataflow は .NET の TPL(Task Parallel Libilary)の機能の一部で、そのうち Actor をベースにした非同期データフローを提供してくれるライブラリです。
ちなみに通常の .NET とリリースサイクルが異なり、規定の.NETには含まれておりません。
Nugetからの追加が別途必要になります。ちなみに似たような名前の Microsoft.Tpl.Dataflow は旧Versionです。
https://github.com/dotnet/core/blob/ab5314af29352e61aa31ad38fd5058f4738ab5d4/release-notes/Archived%20Change%20Lists/Microsoft.Tpl.Dataflow.mdThis package has been renamed to System.Threading.Tasks.Dataflow.DataflowはDataflowブロックというデータをバッファして処理するデータ構造によって成り立っています。大別して以下の3種類のDataflowブロックが存在します。ソースがデータの読み取り、ターゲットがデータの受け取り側です。Dataflow を作るにはそれぞれのブロックをつなげる事でできます。
MSDNではつなげかたとして以下の2タイプを上げてました。pipeline,network ではデータが利用可能になるとソースがターゲットにデータを渡していきます。
それを実現するには具体的には ISourceBlock&lt;TOutput&gt;.LinkTo で Source を Target につなげます。
この時 Source, Target はお互いに 0..n で接続を持てます。 
また一度つながった Source と Target は接続を解く事もできます。では当初の目的通り ParallelForEach ではできなかった async の並列化をやってみたいと思います。
S3からテキストのファイルを複数取りに行って出力するような処理です。なので上記のように Dataflow を繋げたりとかは特に不要です。(説明しておいてなんだけど)
今回は TagetSource である ActionBlock しか使いません。今回はシンプルな並列処理でしたが、 pipeline で粒度の細かい処理を並列化してスループットを上げたり network を組んで複雑なデータ処理フローを作成したりが楽にできそうですね。


