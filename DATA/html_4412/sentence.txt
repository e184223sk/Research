More than 1 year has passed since last update.（2018年11月8日追記：C#ソースコードにコメントを修正、追加しました。また、本来LuckyColorIntentHandlerメソッドでセッションを終了させる必要があったのに、続くようになっていました。同メソッドにおいて、Repromptを削除し、ShouldEndSession=trueを追加しました。）これまでにVisual StudioとC#を用いたAlexaスキルの開発について書いてきました。
C#で記述する場合のAlexaスキルの基本的な構成がわかり、簡単なスキルであれば作ることができるようになったかと思います。
ここでいう簡単なスキルとは、ユーザーの発話に対して応答するスキルのことです。
例えば、ユーザー「1たす1は？」
Alexa「2です」
ユーザー「じゃあ、2たす2は？」
Alexa「4です」というような1往復ずつの単発の発話とその応答のスキルですね。しかし、これでは複数往復のやりとりから最終的な応答をするようなスキルを作ることはできません。
例えば、ユーザー「コーヒーください」
Alexa「いくつにしますか」
ユーザー「2つ」
Alexa「コーヒーを2つですね。少々お待ち下さい」というような、注文を取るスキルであれば、複数回のやり取りの経過をすべて覚えている必要があります。この例の場合は「コーヒー」と「2」ですね。ここで出てくるのがセッションというものです。
スキルが起動してから終了するまでが1つのセッションとなるわけですが、同一セッション内であれば任意のデータを記憶しておく仕組みが用意されています。（注：セッションが終わるとこの情報は消えてしまいます。）これを使えばユーザーとの一連のやり取りに基づいて、よりバリエーション豊かな応答を行うことができるようになります。
一歩進んだ感じですね。このセッションについては公式のチュートリアル第3回が詳しく、このチュートリアルをとおしてその基本的な事柄を理解することができるかと思います。その上で、ここではもちろんC#でこの公式チュートリアル第3回を実装することで、C#での同一セッション内でのデータの保持のやり方を説明したいと思います。今回説明する同一セッション内でのデータの保持ですが、どこにどうやって保持するかというと、変数でも、Alexaサービスでも、Alexa端末でもなく、Alexaサービスとエンドポイントの間でやり取りされるリクエストとレスポンスのJSONデータの中に持たせる、という仕組みになっています。JSONの中のsessionAttributesがそれにあたります。例えば公式チュートリアル第3回に従って作成したスキルの応答は以下のようになります。
（チュートリアルをやっておくとわかりやすいです）
これはユーザーが「ふたご座の運勢を占って」と発話したことに対する応答です。注目してもらいたいのはこのJSONの中のsessionAttributesという項目です。
ここに任意のデータを入れて、セッションの間中保持することができます。
サーバーレスなLambda側ではDynamoDBのような外部記憶を使わない限り、変数などにデータを保持しておくことはできません。では、次に同一セッション内でユーザーが「ラッキーカラーを占って」と発話すると、Lambda側に送られるJSONはどうなっているかというと、以下抜粋ですが、こんな感じでやはりセッション情報が入っていることが確認できます。attributesという項目ですね。このように、セッションアトリビュートとして任意の値を登録し、登録したデータはその後のリクエストとレスポンスのJSONの中に入れてやり取りすることになります。以下の準備を行ってください。ソースコードはチュートリアルのページに載っているので、それを見ながらC#へ翻訳した結果がこれです。これでテストすると、セッションアトリビュートに保持されたデータを使ってLuckyColorIntentHandlerにおける応答が組み立てられていることがわかります。リクエスト側
レスポンス側
レスポンスに仕込んだセッションアトリビュートのデータは、もしそのレスポンスに対してユーザからリクエストが返ってきた場合にはその中に自動的に入れられます。しかし、リクエストからレスポンスには当然自動的には入りませんので、何往復かするやり取りの場合は毎回、リクエスト内のセッションアトリビュートをレスポンスのセッションアトリビュートへ渡す必要があります。今回の同一セッション内でデータを保持する方法によって、より複雑で柔軟なスキルの開発が可能になります。
作ることのできるスキルの幅も大きく広がるものと思います。今回で公式チュートリアル第3回までやったことになるので、今度は第4回のDynamoDBを使った永続的なデータの保持について書きたいと思います。
セッションをまたいでデータを保持することができるようになります。さて、DynamoDBを触るAPIってありますよね？きっと。


