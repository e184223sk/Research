
    public static class ReadOnlyRefUnsafe
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ReadOnlySpan&lt;T&gt; CreateReadOnlySpan&lt;T&gt;(in T reference, int length)
            where T : unmanaged
        {
#if BEFORE_NET_STANDARD21
            unsafe
            {
                return new ReadOnlySpan&lt;T&gt;(Unsafe.AsPointer(ref Unsafe.AsRef(in reference)), length);
            }
#else
            return MemoryMarshal.CreateReadOnlySpan(ref Unsafe.AsRef(in reference), length);
#endif
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ref readonly T Add&lt;T&gt;(in T source, int elementOffset)
            =&gt; ref Unsafe.Add(ref Unsafe.AsRef(in source), elementOffset);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ref readonly T Add&lt;T&gt;(in T source, IntPtr elementOffset)
            =&gt; ref Unsafe.Add(ref Unsafe.AsRef(in source), elementOffset);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ref readonly T AddByteOffset&lt;T&gt;(in T source, IntPtr byteOffset)
            =&gt; ref Unsafe.AddByteOffset(ref Unsafe.AsRef(in source), byteOffset);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool AreSame&lt;T&gt;(in T left, in T right)
            =&gt; Unsafe.AreSame(ref Unsafe.AsRef(in left), ref Unsafe.AsRef(in right));

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ref readonly TTo As&lt;TFrom, TTo&gt;(in TFrom source)
            =&gt; ref Unsafe.As&lt;TFrom, TTo&gt;(ref Unsafe.AsRef(in source));

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static IntPtr ByteOffset&lt;T&gt;(in T origin, in T target)
            =&gt; Unsafe.ByteOffset(ref Unsafe.AsRef(in origin), ref Unsafe.AsRef(in target));

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsAddressGreaterThan&lt;T&gt;(in T left, in T right)
            =&gt; Unsafe.IsAddressGreaterThan(ref Unsafe.AsRef(in left), ref Unsafe.AsRef(in right));

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsAddressLessThan&lt;T&gt;(in T left, in T right)
            =&gt; Unsafe.IsAddressLessThan(ref Unsafe.AsRef(in left), ref Unsafe.AsRef(in right));

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static T Read&lt;T&gt;(in byte source)
            =&gt; As&lt;byte, T&gt;(in source);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ref readonly T Subtract&lt;T&gt;(in T source, int elementOffset)
            =&gt; ref Unsafe.Subtract(ref Unsafe.AsRef(in source), elementOffset);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ref readonly T Subtract&lt;T&gt;(in T source, IntPtr elementOffset)
            =&gt; ref Unsafe.Subtract(ref Unsafe.AsRef(in source), elementOffset);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static ref readonly T SubtractByteOffset&lt;T&gt;(in T source, IntPtr byteOffset)
            =&gt; ref Unsafe.SubtractByteOffset(ref Unsafe.AsRef(in source), byteOffset);
    }

