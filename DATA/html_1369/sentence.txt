More than 1 year has passed since last update.yield return null は、1フレーム分処理を中断して、次のフレームで続きの行を処理します。だから、結果は下の通りで、
1. Sample1 Start.
2. Sample2 Start.
3. Sample1 End.
4. Sample2 End.
の順で実行される。
yield break は、コルーチンを途中で終了します。
再開はできないです。コルーチンを途中で終了したので、Sample1 End. と Sample2 End. は出力されません。
yield return new WaitForSeconds(seconds) は、指定した秒数の間、コルーチンの実行を待ちます。Sample2 End. が、他より1秒経過してから出力されるようになります。
yield return new WaitUntil(Func&lt;bool&gt; predicate) は、predicate で指定した関数が true を返したときに再開します。flg が true になるまで、 Sample1 End. が出力されないため、下記のような結果になります。
yield return new WaitWhile(Func&lt;bool&gt; predicate) は、predicate で指定した関数が false を返したときに再開します。
WaitUntil(Func&lt;bool&gt; predicate) の逆バージョン。
使い方は上と一緒なので省略。yield return StartCoroutine() は、指定したコルーチンを実行し、完了するまで処理を中断します。結果は下のような感じです。
名前の通り、コルーチンの全てを止めます。
Behavior 上で実行されている全てを止めます。コルーチンを途中で終了したので、Sample1 End. と Sample2 End. は出力されません。
Unity 初心者なので、間違いがあったら教えてくれるとありがたいです。
今まで雰囲気で非同期処理を書いていたので、しっかり勉強するために記事を書くことにしました。
いまのところ、async/await編、UniRx編を書く予定です。
挫折したらごめんなさい。コルーチン - Unity マニュアル
【C#/Unity】コルーチン(Coroutine)とは何なのか
Unityのコルーチン機能を使う


