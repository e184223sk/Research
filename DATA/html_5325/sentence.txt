More than 3 years have passed since last update.Qiitaのトレンドをチェックする時によく以下ページを参照させていただいています。
【毎日自動更新】Qiitaのデイリーストックランキング！ウィークリーもあるよよりチェックしやすくしたいと思い、Slackに毎日自動投稿するようにしてみました。以下を参考にしました。
https://docs.aws.amazon.com/ja_jp/toolkit-for-visual-studio/latest/user-guide/getting-set-up.html[AWS Lambda Project(.NET Core)]を選択します。
ブループリントは[Empty Function]を選択します。※記事として見やすくするため1メソッドにまとめています。
（実際はもう少し細かくメソッド分け、クラス分けをしています。）以下のような文字列を生成します。
体裁は個人の好みです。
（空行を挟んでいるのは、スマホで見た時にタップしやすくするため。）※参考）https://api.slack.com/docs/message-formattingUTF8でエンコードした以下のようなJSON文字列をPOSTします。
POST先のURLは、先程取得したWebhookURLです。※参考）https://api.slack.com/docs/messagesあとはエントリポイントからそれぞれ順番に実行します。こちらのページがとても参考になりました。
AWS Lambda で C# が使えるようになったので早速試してみたバージョンは違いますが、基本的な流れは同じでした。デプロイしたLambda関数を確認すると、以下のようにトリガーが未設定です。ここにAWS CloudWatch Eventsで定期実行するトリガーを設定します。各リンクをクリックして該当ページへ遷移することを確認します。Qiitaのランキング等のデータはAPIで提供されていないようだったので、Webスクレイピングという手法を使いました。
面白いですね、スクレイピング。「最後の手段」って感じなので、仕事ではできるだけ使いたくはないですが。
今回のbotは家族用に作った1日1アクセスの処理なので問題ないと考えましたが、スクレイピングって対象媒体（今回ならQiita）の規約や著作権法等に違反していないかどうか、少しドキドキします。AWSで定期実行バッチを作りましたが、EC2でサーバ立てるより安くて良い感じでした。
ただ、Lambda関数のタイムアウトは最大でも5分らしいので、重いバッチ処理を実装するには向いてないですし、そもそもLambdaってこういったバッチ処理を載せる入れ物ではない気がします。AWSもっと勉強しなきゃな、と思いました。


