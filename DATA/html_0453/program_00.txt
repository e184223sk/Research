[Fact]
public async Task SurrogatePairName()
{
    MockRandom.Setup(x =&gt; x.Next(2)).Returns(0).Verifiable();
    await Target.RequestIntroductionAsync();
    await Target.SubmitContractAsync(new ContractPaper("𠮷田"));
    Assert.Collection(Target.Messages,
        act =&gt; Assert.Equal("フン。", act.Value),
        act =&gt; Assert.Equal("𠮷田というのかい。", act.Value),
        act =&gt; Assert.Equal("贅沢な名だねぇ。", act.Value),
        act =&gt; Assert.Equal("今からお前の名前は𠮷だ。", act.Value),
        act =&gt; Assert.Equal("いいかい、𠮷だよ。", act.Value),
        act =&gt; Assert.Equal("分かったら返事をするんだ、𠮷!!", act.Value));
    MockRandom.VerifyAll();
}

[Fact]
public async Task KillYubabaUsingNull()
{
    MockRandom.Setup(x =&gt; x.Next(2)).Returns(0).Verifiable();
    await Target.RequestIntroductionAsync();
    await Assert.ThrowsAsync&lt;ArgumentNullException&gt;(
        async () =&gt; await Target.SubmitContractAsync(new ContractPaper(null)));
}

[Fact]
public async Task KillYubabaUsingEmpty()
{
    MockRandom.Setup(x =&gt; x.Next(2)).Returns(0).Verifiable();
    await Target.RequestIntroductionAsync();
    await Assert.ThrowsAsync&lt;ArgumentOutOfRangeException&gt;(
        async () =&gt; await Target.SubmitContractAsync(new ContractPaper("")));
}

