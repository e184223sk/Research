    public static class DynamicDictionaryExtension
    {
        public static dynamic ToDynamic&lt;TValue&gt;(this IDictionary&lt;string, TValue&gt; dict)
        {
            return new DynamicDictionary&lt;TValue&gt;(dict);
        }
    }

    public class DynamicDictionary&lt;Tvalue&gt; : DynamicObject
    {
        private IDictionary&lt;string, Tvalue&gt; _dict;
        public DynamicDictionary(IDictionary&lt;string,Tvalue&gt; baseDict)
        {
            _dict = baseDict;
        }

        public override bool TryGetMember(GetMemberBinder binder, out object result)
        {
            var name = binder.Name.ToLower();
            if (_dict.TryGetValue(name, out var value))
            {
                result = value;
                return true;
            }
            result = null;
            return true;
        }

        public override bool TrySetMember(SetMemberBinder binder, object value)
        {
            var name = binder.Name.ToLower();
            if (_dict.ContainsKey(name))
            {
                _dict[name] = (Tvalue) value;
                return true;
            }
            _dict.Add(name,(Tvalue)value);
            return true;
        }

        public override IEnumerable&lt;string&gt; GetDynamicMemberNames()
        {
            return _dict.Keys;
        }
    }

