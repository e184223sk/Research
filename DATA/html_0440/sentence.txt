忙しい人向け ⇒ ３章 まとめXmlSerializerクラスを使うと、みたいな自作クラスのインスタンスの値を下記のようにXMLに保存したり、復元（XMLファイルの値に基づいて自作クラスのメンバに値を代入済みのインスタンスを生成）したりできます。丸投げ・・・publicなフィールドと、get/setともpublicなプロパティが保存対象のようです。XmlSerializer.Serialize Method (System.Xml.Serialization) | Microsoft Docs よりThe Serialize method converts the public fields and read/write properties of an object into XML. It does not convert methods, indexers, private fields, or read-only properties. To serialize all an object's fields and properties, both public and private, use the BinaryFormatter.In the xmlWriter parameter, specify an object that derives from the abstract XmlWriter class. The XmlTextWriter derives from the XmlWriter.Note
The XmlSerializer cannot serialize the following: arrays of ArrayList and arrays of List.Google翻訳結果：Serializeメソッドは、オブジェクトのパブリックフィールドと読み取り/書き込みプロパティをXMLに変換します。メソッド、インデクサー、プライベートフィールド、または読み取り専用プロパティは変換されません。パブリックとプライベートの両方のすべてのオブジェクトのフィールドとプロパティをシリアル化するには、BinaryFormatterを使用します。xmlWriterパラメーターで、抽象XmlWriterクラスから派生するオブジェクトを指定します。 XmlTextWriterはXmlWriterから派生しています。注意
XmlSerializerは、ArrayListの配列とList の配列をシリアル化できません。XMLファイルはただのテキストファイルであり、直接ユーザーが編集できてしまうので、設定ファイルを切り出すことで、セキュリティ上のリスクや、実行時エラーなどのリスクを生むかもしれません。1
また、C#など.Net系の言語をビルドしたexeファイルは逆アセンブルが容易に可能なため、ハッシュ値などのチェック値を入れるなどの対策だけだと、完全にはガードできないものと思います。番外：自作ツールを作っている最中に、設定ファイルを切り出したくなることがよくあります。
デフォルトの設定値を埋め込んだXMLファイルを作りたいけど、それ用のソースコードを用意するのが面倒。
なので、どういう自作クラスを書くとどういうXMLが生成されるのかをテンプレとして整理してみます。
色々試した結果をおいておきます。生成されたXMLファイルには型情報は含まれないようです。
（復元するときにチェックされるものと思われますが、調べてないので不明です。）string型のフィールドであるSampleFieldStringにnullを代入しておいてXMLを生成したところ、
生成されたXMLからSampleFieldStringがいなくなりました。&lt;と&gt;と&amp;は、それぞれ&amp;lt;, &amp;gt;, &amp;amp;というHTMLっぽい感じにエスケープされています。
改行コード\r,\nとタブ\tはそのまま出力されるようです。&lt;メンバ名&gt;&lt;子クラスのメンバ名&gt;値&lt;/子クラスのメンバ名&gt;・・・&lt;/メンバ名&gt; となるようです。
(子クラスのクラス名SampleChildClassは出力されませんでした。)2.3章と同様ですね。下記エラーがでました。（※見やすさのためエラーメッセージに適宜改行を加えています。）対応されている方がいらっしゃるので参考のためリンクを貼っておきます。2章の通り、実験した限りでは下記のようになりました。コードに直接埋め込んでいても似たようなものかもしれませんが。。 ↩


