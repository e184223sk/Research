More than 1 year has passed since last update.C#8.0で追加される予定の 非同期ストリーム でどんなことができるのか、どんな書き方をするのかを知っておこう、というのがこの記事の趣旨です。気になる点があれば、遠慮なくコメントしてください。非同期ストリーム は「複数の値を順に扱いたい」かつ「非同期な処理をシンプルに書きたい」というのを実現させるための機能だといえそうです。
「複数の値を順に扱う」というのは、イテレータの機能で、従来よりyieldやforeachなどで知られている機能のことです。
「非同期な処理をシンプルに書きたい」というのは、C#5.0の頃に追加された非同期機能で、async,awaitおよびTaskなどとして知られている機能のことです。
つまり、既存の2つの機能をうまく融合させた機能が「非同期ストリーム」なのです。これまでは1つのメソッドで、async/awaitキーワードと、yieldキーワードの共存ができませんでした。asyncメソッド、かつ、IAsyncEnumerable&lt;T&gt;またはIAsyncEnumerator&lt;T&gt;型をreturnするメソッドを書いた場合、メソッドの内部でyieldキーワードを利用できるようになりました。 つまり async/awaitキーワードと、yieldキーワードが共存できます。気づき：MoveNextAsync() では ValueTask が使用されている。IAsyncEnumerable&lt;T&gt;がreturnされても、これを使う側がないと片手落ちです。IEnumerable&lt;T&gt;を使うためにforeachを使っていたのと同様、IAsyncEnumerable&lt;T&gt;でも、await foreachが使えるようになりました。
これも違和感なく使える構文になっていると思います。これは動きが予想しやすいと思います。
5,10,15,...の数字が初めは勢いよく、徐々にスローダウンしながら表示されます。Taskを使い慣れている人ならば、間違えないと思いますが、開始からおよそ1秒後に1が、そのおよそ2秒後に2が、そのおよそ2秒後に3,4,5が表示されます。
ListにAddした時点でTaskが動き始めていることが重要ですね。今回はTask.Delay()のような無駄な処理を呼び出していますが、これがダウンロード処理と考えれば使い道は多そうな気がします。非同期処理とは言っていますが、結果は最初に指定した順に取り出されるので、処理も追いかけやすいはずです。※C#8.0は現在Preview版です。Preview版で動作確認の上、当記事を書いていますが、記事の内容と異なる構文になる可能性もありますのでご了承ください。


