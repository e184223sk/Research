More than 1 year has passed since last update.Alexaスキルの実際の処理を行うエンドポイントの作成には、一般的にはNode.jsかPythonが使われます。
これらの言語はAmazonよりSDKが提供されており、それを使うことで効率的に開発を行うことができますし、情報も多いのでAlexaスキルを作りたい場合はぜひNode.jsかPythonを選んでください。
情報量で言ったらNode.jsのほうが多いのでNode.jsがおすすめです。しかし、ここではC#で関数を作成してデプロイする方法を紹介します。
なぜ、わざわざC#なのか、というと、Visual Studioのインテリセンスなどの便利機能の恩恵を目一杯受けられるからです。素晴らしいですね！！でもまあそのかわりネットでの情報量がものすごく少なくなってしまうのですが。手順はざっくり以下のとおりです。以下の画像はAWS Toolkitをインストールしたあとのものですが、Visual StudioからはLambdaだけではなく様々なサービスにアクセスできるので、ここで作成するユーザーにはかなり大きな許可を与えることになります。これで大きな権限持ったユーザーが作成されました。
このときに発行されるアクセスキーやシークレットアクセスキーを大事に保管しておきましょう。ユーザーにポリシーを直接アタッチするのではなく、グループは作ってそこにポリシーをアタッチしておき、ユーザーをそのグループに所属させれば同じことになります。Visual StudioからAWSサービスにアクセスするための拡張機能がAmazonから提供されています。
それがAWS Toolkit for Visual Studioです。まず、Visual Studioを起動します。
次に、ツールから拡張機能と更新プログラムを選択します。
ウィンドウの左側のカラムからオンラインをクリックし、検索窓にawsと入力すると、目的のAWS Toolkit for Visual Studioが見つかります。
ダウンロードボタンを押すと、ダウンロードが行われ、ダウンロード完了後にVisual Studioを閉じると拡張機能がインストールされます。インストール後の初回起動時には以下の設定タブが表示されます。
このAccess KeyとSecret Keyにそれぞれ、先程作成したIAMユーザーのアクセスキーとシークレットアクセスキーを入力すると、「Save and Close」ボタンが有効になるのでクリックすると設定完了です。
Profile Nameはそのままでも良いですし、好きな名前をつけても良いです。これはIAMユーザー名とは関係ないので、好きにして大丈夫です。
Account Numberは空欄のままでOKです。メニューの表示からAWS Explorerを表示することができます。
AWS Explorerは冒頭でも示したとおりです。
Alexa.NETというのはC#でAlexaスキルのリクエストとレスポンスを扱いやすくしてくれる便利なライブラリで、NuGetで配布されています。
これはAmazonではなく有志の方が作成してくれているものです。ありがたや。これはNuGetパッケージとしてされており、プロジェクトにライブラリとして追加して使用するものなので、まずはVisual Studioのプロジェクトを作成する必要があります。ファイル→新規作成→プロジェクトを選択します。
プロジェクトの種類としてAWS Lambda Project(.NET Core)を選択して、名前を決めたら「OK」ボタンを押します。
次にテンプレートを選択します。
Alexaスキルのテンプレートはないので、ここではEmpty Functionを選択し、「Finish」ボタンを押します。
これでプロジェクトが作成されます。
作成直後のLambda関数本体であるFunction.csは以下のとおりです。プロジェクトが作成できたら、次はAlexa.NETをプロジェクトにインストールします。
ツール→NuGetパッケージマネージャー→ソリューションのNuGetパッケージの管理を選択します。NuGetタブの「参照」で検索窓に「alexa.net」と入力すると「Alexa.NET」が見つかります。
右カラムのインストール先プロジェクトにチェックをつけて、「インストール」ボタンを押してインストールします。
いよいよC#でコーディングしていきます。
Function.csにはLambda関数の雛形が作られています。
この中のFunctionクラスのFunctionHandlerメソッドがAlexaからのリクエストを受け取り、レスポンスを返す役割を担います。
しかし、この時点ではstring型を入力として受け取り、string型を返すものになっています。まずはこの引数と返り値をAlexaスキル用に変更します。
具体的には、SkillRequest型を受け取り、SkillResponse型を返すようにします。Alexa.NETの便利なところは、Alexaから受け取ったJSON形式のリクエストが自動的に.NETのクラスにデシリアライズされ、それを返すときにJSON形式にシリアライズされる点です。
これによって入出力におけるデータ形式を考える必要がなく、Requestオブジェクトから必要なデータを取得し、最終的に必要なResponseオブジェクトを構築してreturnするだけですみ、コーディングがとてもシンプルになります。このままだとデプロイしたとしてもAlexaスキルとしての動作を確認できないので、最低限の応答を返すようにします。スキルが呼び出し名によって起動されたとき、リクエストのタイプはLaunchRequestになります。それ以外の場合はIntentRequestになります。今回はLaunchRequestかどうかでAlexaに喋らせる内容を変えるシンプルな構成にしました。ソリューションエクスプローラからプロジェクト名(ここでは「MyFirstCSharpSkill_Lambda」)の上で右クリックして、コンテキストメニューから「Publish AWS Lambda...」を選択します。以下のウィンドウが表示されるので、Function Nameにお好みの名前を入力して、お好みのリージョンを選択して「Next」ボタンを押してください。次に表示されるウィンドウでは、Role Nameの欄にプルダウンからNew role based on AWS managed policy: AWSLambdaBasicExecutionRoleを選択します。
ここでは今回デプロイするLambda関数に許可する権限を指定しています。
今回はAWSの他のサービスを呼び出すことはないので、「AWSLambdaBasicExecutionRole」を指定していますが、もしDynamoDBなどを使用する場合はDynamoDBの権限を与える必要があります。「Upload」ボタンを押すとデプロイが始まり、進捗を表示するウィンドウが表示されます。
デプロイが完了すると進捗ウィンドウが自動的に閉じて、Visual Studioに以下のタブが表示されます。
ここで、Example Requestsの欄のプルダウンからAlexa Start Sessionを選択し、「Invoke」ボタンを押してください。
右側のResponse欄に「スキルを起動しました」を含むJSON形式のデータが表示されれば、デプロイしたAlexaスキルが正しく動作しています。
AWSコンソールのLambda関数のリストも確認してみましょう。
デプロイした関数が表示されています。
あとはAlexa開発者コンソール側での対話モデルの作成です。「スキルの作成」ボタンを押します。
スキル名を入力し、カスタムスキルを作成します。呼び出し名を決めます。
少なくとも1つ以上のインテントを作らなければならないので、何かインテントを作成します。
少なくとも1つ以上の発話も登録しなければならないので、何かサンプル発話を登録します。次にモデルをビルドします。
エンドポイントの設定を行います。
このエンドポイントというのが、先程C#で作成したLambda関数になります。
デフォルトの地域の欄にそのLambda関数のARN（AWSにおける一意の識別子）を指定することで、この対話モデルとLambda関数が結び付けられます。
この対話モデルにも当然ARNがありまして、まずは対話モデルのARNをLambda関数側に登録する必要があります。
ちょっとややこしいですが、このエンドポイントのページ内の「クリップボードにコピー」をクリックしてこの対話モデルのARNをコピーします。
そして、一旦このまま開いたままにして、AWSのコンソールへ移ります。
AWS Lambdaの先程作成した関数を開き、この関数のトリガーとして「Alexa Skills Kit」を選択します。
次に、その下に「トリガーの設定」と表示されるので、「スキルID検証」を「有効」にして、スキルIDの欄に対話モデルのARNを貼り付けて、「追加」ボタンを押します。
ページ右上の「保存」ボタンを押して変更を保存します。
これでLambda関数側に対話モデルのARNを設定できました。
そして、今度は対話モデルにこのLambda関数のARNを設定するので、この「保存」ボタンの上のARNを選択してコピーしておきます。
塗りつぶしていますが、「arn:」で始まる部分です。
では、開きっぱなしにしておいた対話モデル側のエンドポイントのページで、デフォルトの地域の欄にLambda関数のARNを貼り付け、「エンドポイントを保存」ボタンを押してください。
これで対話モデルとLambda関数を結びつけることができました。対話モデルの方で、「テスト」タブを開いてスキルのテストを有効にして、入力欄に「サンプル呼び出し」と入力してスキルを呼び出してみましょう。
すると、以下のようにAlexaが応答します。
C#で作成したLambda関数が正しく動いているようですね。ちなみに、LaunchRequestに対するレスポンスではセッションを終了するように指定しているので、ここでスキルは終了します。じゃあ形式上仕方なく作ったインテントはどうやって呼び出すのかというと、スキルの呼び出しとインテントの指定を一度にやるとOKです。
「サンプル呼び出し」が呼び出し名で、「サンプルを呼び出して」がSampleIntentを呼び出す発話になります。
そうすると、リクエストのタイプがLaunchRequestではなくIntentRequestになり、もう一方のレスポンスが帰ってきます。Lambda関数に送られるリクエストの内容を見てみると、typeがIntentRequestでIntentのnameがSampleIntentになっていることがわかります。これでC#でAlexaスキルを実装するはじめの一歩を踏み出せるのではないかと思います。
慣れ親しんだC#で、Visual Studioのインテリセンスの恩恵を受けて開発するのもいいのではないでしょうか。今回はLaunchRequestかそれ以外かで応答を変えていましたが、次回は複数のインテントに対して、異なる応答を返すようにしてみます。次回はこちら。


