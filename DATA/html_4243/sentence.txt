More than 1 year has passed since last update.Windows, つよいGPUがない, インターネットに画像をアップできない, アドミン権限がないなどの環境でも動作する、転移学習を利用した画像認識アプリを .NET Framework (Windows Forms) で作成しました。アプリケーションをダウンロードし、分類したい名前を付けたフォルダに数枚ずつ画像を用意するだけで短時間で簡単に学習ができます。Pythonなどをインストールする必要もありません。色々なものを分類して最近の画像認識の精度を体感してみてください。アプリケーションは、Microsoft がオープンソースで開発を進めているML.NET (ML.NET単体では Linux, Macなどでも動きます) を利用しています。実装されている TensorFlow API を利用して、学習済みの Inception モデルを読み込み、画像特徴を抽出し、Stochastic Dual Coordinate Ascent(SDCA) を利用した多クラス分類器用いて転移学習をします。ML.NET は Microsoft がオープンソースで進めている .NET 開発者向け機械学習フレームワークです(GitHub)。クロスプラットフォームで開発されており、Windows, Linux,  macOS で動作します。Windows Hello, Bing Ads PowerPoint デザインアイディアなどでも使われています。
類似のものとして、Windows Machine Learning がありますが、こちらは Windows 10 以降の OS に特化したものとなります。API等に互換性はありません。ML.NET はクロスプラットフォームを実現するため .NET Core で作成されています。.NET Core で作成した DLL は、.NET Framework で作成しているアプリケーションからは直接参照することはできませんが、.NET Standard ライブラリを作成し、その中で .NET Core を利用するコードを記述すれば、.NET Framework から参照できるようになります。今回は ML.NET 0.7.0 (.NET Core 2.0) を利用しているため、.NET Standard 2.0 / .NET Framework 4.6.1 以降が必要です。また、依存しているネイティブライブラリが x64 を対象としているため 64bit環境でのみ動作します。
なお、 2018年12月時点の最新版である ML.NET 0.8.0 は、.NET Core 2.1 ベースとなっており、.NET Framework から利用するためには、.NET Standard 2.1 が必要となりますが 未リリースです。2019年5月時点の ML.NET 1.0 では .NET Core 2.1 ベースになっていますが、この記事の範囲内では .NET Core 2.0 でコンパイルしても動作するため、.NET Standard 2.0 でビルドしています。ビルドには .NET Framework 4.6.1 以降が必要です。また、依存しているネイティブライブラリが x64 を対象としているため 64bit環境でのみ動作します。下記のようなメッセージが出てデバッグ実行に失敗する場合は、10秒くらい待ってもう一度実行してください。The OutputPath property is not set for project 'CoreReferenceForm.csproj'.  Please check to make sure that you have specified a valid combination of Configuration and Platform for this project.  Configuration='Debug'  Platform='x64'.  This error may also appear if some other project is trying to follow a project-to-project reference to this project, this project has been unloaded or is not included in the solution, and the referencing project does not build using the same or an equivalent Configuration or Platform.  CoreReferenceForm           Windows プラットフォーム限定となりますが、ML.NET の .NET Framework 版も提供されています。.NET Framework プロジェクトから、上記と同様に利用することが可能です。ML.NETのサンプルにある Image Classification をベースにしています。以下は説明のため部分的に抜粋しています。詳しくは ソースコードを参照してください。ML.NET では下記のようにパイプラインを構成していきます。上記のコードではといったような各処理をつないでいます。パイプラインの構成は、画像に限らず、自然言語処理や数値(CSVファイル)データの学習でも同様です。詳しくは、ML.NETのチュートリアルやサンプルコードを参照してください。パイプラインができたら、そこに学習データを渡して学習を行います。つづいて、できたモデルを評価します。モデルの保存も簡単です。推論はモデルを読み込んで、画像ファイルを渡すだけです。作成したモデルにはラベル(クラス名)も含まれています。


