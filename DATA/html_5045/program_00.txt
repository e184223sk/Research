
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Web;
using System.Web.Mvc;
using System.IO;


namespace MVCAsyncSample.Controllers
{
    public class HomeController : Controller
    {

        private string localFolderPath = @"C:\test.txt"; //←実行すると非同期で更新されるファイル


        public ActionResult Index()
        {
            using (StreamWriter sw = new StreamWriter(localFolderPath))
            {
                sw.Write("まだ処理は完了していません\r\n");
                sw.Close();
            }

            return View();
        }


        private delegate void HomeControllerDelegate(string buf); // ←非同期実行するための受け皿(delegate)


        public ActionResult PartAction()
        {
            // 非同期で実行
            HomeControllerDelegate dlgt = new HomeControllerDelegate(AsyncSample);
            dlgt.BeginInvoke("arg", null, dlgt);

            return ResultView(); 
        }

        private void AsyncSample(string argText) // 引数は最低一つ必要なだけなので値はなんでもよい
        {

            // 実際にはここに時間のかかる処理が入る。今回はwaitで代用
            Thread.Sleep(3000);

            // ローカルファイルに書き込む
            using (StreamWriter sw = new StreamWriter(localFolderPath))
            {
                sw.Write("処理が完了しました");
                sw.Close();
            }

        }


        public ActionResult ResultView()
        {

            // ローカルファイルを見に行く
            using (StreamReader sr = new StreamReader(localFolderPath))
            {
                TempData["message"] = sr.ReadLine();
                sr.Close();
            }

            return PartialView("ResultView");
        }




        // ↓は今回使ってないけどこいうやり方もあるので勉強して別途記事を書きたい ----
        [HttpGet]
        public async Task&lt;ActionResult&gt; ExecProcess()
        {
            var heavyTask1 = Task.Run(async () =&gt;
            {
                await Task.Delay(10000);

                return 10;
            });
            var heavyTask2 = Task.Run(async () =&gt;
            {
                await Task.Delay(5000);

                return 20;
            });

            await Task.WhenAll(heavyTask1, heavyTask2);

            ViewBag.val1 = heavyTask1.Result;
            ViewBag.val2 = heavyTask2.Result;

            //return View(heavyTask1.Result + heavyTask2.Result);
            return View();
        }

        //------------------------------------------------------------------------------

    }
}


