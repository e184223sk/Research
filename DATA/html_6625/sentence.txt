More than 3 years have passed since last update.ここ最近で、Visual Studioを使用せずにWPF(XAML)アプリケーションの作り方を勉強していた。
大よそ何となくやりたいことは出来るようになったのでこの際まとめておく。
日本語記事も少ないことだし。
ちなみに、csc.exeやvbc.exeでのコンパイル方法(オプション)も何となく把握できている方が理解は進むと思う。MSBuild コンパイラオプション一覧
MSBuild Project Properties一覧
MSBuild .TargetsファイルXAML + WPFアプリケーションをコマンドラインでビルドする方法
テキストエディタでWPF + XAMLなアプリケーションを開発する
メインウィンドウから子ウィンドウを開く
WPF(VB.net &amp; xaml)をMSBuildでコンパイルここからダウンロードしてインストールできる。
VisualStudioでも可。
インストールした後のパスは大体、にある。
ここからPathに突っ込むなりbat作るなりして自由に使う。
ちなみにWindows7に標準でインストールされているMSBuildは.Net Framework3.5相当になるので結構古く、注意。基本的にはプロジェクトファイルに移動してmsbuildコマンドを実行すればよい。同じフォルダにprojectファイルが複数存在する場合は、msbuildのコマンドライン引数にそのままファイル名を渡せばいいが、滅多にそれを行うことはないだろう。
他の詳細については下記を参照のこと。
MSBuild コンパイラオプション一覧MSBuildのプロジェクトファイルの雛型は以下となる。
拡張子はC#、VB共用のprojかC#用のcsproj、VB用のvbprojとなる。じっくり見てみると複雑そうに見えて構造は結構単純。
上の方はいまいち理解が足りないけど、おまじないとしておいておくのが吉。多分変えることもそう多くはない。
文法こそ異なるがやったことあるのならNW.jsやElectronのpackage.jsonと似た感じで構築できる。このPropertyGroupに含まれるものはアプリケーションの名前などプロフィールや、csc.exe、vbc.exeでのコンパイラオプションとほぼ同一のものとなる。
どのようなものや機能があるのかは、
MSBuild Project Properties一覧
を見て確認すること。
以下では実際に作ったアプリケーションの例として載せる。ここには、プログラムの部品として必要なソースやライブラリを追加する。
これのItem名としては、などがある。などというのは、僕もこれ以外に何が存在するのかも把握できていないため。恐らく、csc.exeやvbc.exeでアイテムとして追加できるものであれば、対応するオプションが存在するはず。これを上から説明していく。ここにはエントリポイントとしてxamlを呼び出すxamlファイルを定義する。このxamlファイルは少々特殊で、本当にエントリポイントを指定するためだけのファイルになりそれ以外には何も記述をしない。ちなみに、ここを見る限りだと、あるプログラムに変換されるようで、自動的に標準のxamlファイルにエントリポイントを渡すところまでを行うようだ。ちなみにApplicationDefinitionはあるプログラムに変換されるといったように、そこを自力で書ければApplicationDefinitionプロパティがプロジェクトファイル内に存在しなくてもWPFプログラムを作ることは可能。これは後述する。ページファイル、つまりxamlファイルはここにIncludeする。
必要な分だけIncludeする。起動時に立ち上がるページ(エントリポイント)はApplicationDefinitionで指定したxaml内に記述する。コンパイルファイル、つまりc#やVBソースファイルはここに該当する。
ワイルドカードを指定することも可能。必要なライブラリの参照をここに定義する。
ちなみにWPFでプログラミングを行う場合は下記の参照が必ず必要となるので必ず追加すること。名前空間の追加。
その名の通り、C#のusingやVBのImportsに相当する物。
ここに追加すれば、グローバルで拡張されることになるので、追加する物はある程度吟味した方がいいのかもしれない。
ちなみにVBの"Microsoft.VisualBasic"名前空間も標準で追加されないので必要であれば追加しておく。最後に、.targetsと呼ばれるファイルを指定する。
正直、ここは僕も理解できていないけれど、公式を読む感じでは、使用する言語に合わせて、のどちらかにしておけば間違いはなさそうだ。これらを踏まえて一つのサンプルソースを載せておく。フォルダ構成としては下記のようになる。ApplicationDefinitionを指定しなかった場合はプログラムのエントリポイントが通常通りMain関数となる。そこから内部的にApplicationDefinitionが行っていることをダイレクトにやってあげれば良い。※
やることとしては特に難しくないのでこれでも良いのかもしれない。
ちなみにXAMLのWindow.x:Classに指定したクラス名はそのページファイルの実体にもなる。すなわち、そのクラス名でnewすれば、そのページ/XAMLもnewできるということ。最低限やるべきことはそれぞれこれ位。
(STAThreadについてはこちらでを参照。)
ちなみにVBの方は[Window].InitializeComponentが無くても読みこむことには問題が無いみたい。Mainでページファイルを扱うことができるということはXAMLのWindow内に定義していたプロパティもMainの中で定義できるということです。次のサンプルではこれも踏まえて載せておく。フォルダ構成としては下記のようになる。ファイル構成としてはapp.xamlが抜けただけである。


