public partial class TitleBarContent : UserControl
{
    private Window _Owner;

    public bool DoubleClickEnable
    {
        get =&gt; (bool)GetValue(DoubleClickEnableProperty);
        set =&gt; SetValue(DoubleClickEnableProperty, value);
    }

    public TitleBarContent()
    {
        InitializeComponent();
    }

    private void TitleBarContent_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
    {
        if (e.ButtonState == MouseButtonState.Pressed)
        {
            _Owner?.DragMove();
        }
    }

    private void TitleBarContent_Loaded(object sender, RoutedEventArgs e)
    {
        _Owner = Window.GetWindow(this);
        if (Content is Control control)
        {
            control.MouseDoubleClick += Content_MouseDoubleClick;
        }
    }

    private void Content_MouseDoubleClick(object sender, MouseButtonEventArgs e)
    {
        if (DoubleClickEnable &amp;&amp; GetIsHitDoubleClick((UIElement)e.OriginalSource))
        {
            _Owner.WindowState = _Owner.WindowState == WindowState.Maximized ? WindowState.Normal : WindowState.Maximized;
        }
    }

    public static void SetIsHitDoubleClick(UIElement element, bool value) =&gt; element.SetValue(IsHitDoubleClickProperty, value);
    public static bool GetIsHitDoubleClick(UIElement element) =&gt; (bool)element.GetValue(IsHitDoubleClickProperty);

    public static readonly DependencyProperty IsHitDoubleClickProperty = DependencyProperty.RegisterAttached("IsHitDoubleClick", typeof(bool), typeof(TitleBarContent), new PropertyMetadata(false));
    public static readonly DependencyProperty DoubleClickEnableProperty = DependencyProperty.Register(nameof(DoubleClickEnable), typeof(bool), typeof(TitleBarContent), new PropertyMetadata(true));
}

