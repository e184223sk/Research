More than 3 years have passed since last update.Grpc.Toolsは proto ファイル（ProtocolBuffersのIDL定義ファイル）から各プログラム言語のソースコードを生成するためのツールです。このGrpc.Toolsで生成される C# のソースコードの内容を確認します。 proto ファイルを使わずに直接コーディングするときの参考にしてください。次の型を定義しました。protoc を実行するバッチファイルを作成しました。ディレクトリ・ファイル構成は次の通りです。message は public sealed partial クラスとして定義されます。enum は 列挙体として定義されます。クラスには OnConstructionという partial メソッドが定義されており、コンストラクタの中で呼び出されています。インスタンス生成時に行いたい追加の処理がある場合、partial ファイルでこのメソッドの本体を実装します。WriteToとMergeFromというシリアライズ用メソッドが定義されています。Cloneメソッドが定義されています。「深いコピー」です。Equalsメソッドがオーバーライドされています。同じ参照である場合は true を返します。異なる参照であっても、全てのプロパティの値が等しければ true を返します。これは.NET の標準的な参照型の挙動と異なります。== 演算子はオーバーロードされていませんので、参照が異なれば false を返します。RPCメソッド呼び出しに関わる狭いスコープ内での利用に留まらずアプリケーション内で広く利用するケースでは、誤用しないように注意する必要があると思います。RPCメソッドの引数と戻り値として使用されている各エンティティクラスに対するMarshaller&lt;T&gt;型のフィールドが定義されます。Marshaller&lt;T&gt;は T に対するシリアライズメソッドとデシリアライズメソッドを持つ型です。別のシリアライザを使用するときにはこのMarshaller&lt;T&gt;を置き換えるのですが、残念ながら private static readonly フィールドです。Method&lt;TRequest, TResponse&gt;型のフィールドが定義されます。これも private static readonly フィールドです。Method&lt;TRequest, TResponse&gt;は次の値を持ち、RPCメソッドを呼び出すときのメソッド識別情報として使用されます。proto ファイルを使わずに直接RPCメソッドを実装する場合、このMethod&lt;TRequest, TResponse&gt;をクライアントサイドとサーバーサイドで共有するように設計することになります。サービスの基底クラスは、RPCメソッドのスケルトンのみが定義された抽象クラスです。サービスアプリケーションではこのクラスを継承したサービス具象クラスを実装することになります。クライアントクラスは、RPCメソッドの呼び出しが実装されたクラスです。sealed クラスではないため継承することはできますが、挙動をカスタマイズする場合はこのクラスを継承するのではなく、メソッド呼び出しの主処理を行うCallInvokerを継承したほうがよいと思います。なお、RPCメソッドの前後にログ出力を行いたいような目的であればわざわざCallInvokerを継承する必要はなく、Interceptorを使ったほうが簡単かつ柔軟です。
参考【mxProject】gRPC (C#) に追加されたインターセプターの使用方法【Qiita】Proto3 Language Guide（和訳）


