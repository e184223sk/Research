
public class PriorityQueue&lt;T&gt; : IEnumerable&lt;T&gt;
{
    private readonly List&lt;T&gt; _data = new List&lt;T&gt;();
    private readonly IComparer&lt;T&gt; _comparer;
    private readonly bool _isDescending;

    public PriorityQueue(IComparer&lt;T&gt; comparer, bool isDescending = true)
    {
        _comparer = comparer;
        _isDescending = isDescending;
    }

    public PriorityQueue(Comparison&lt;T&gt; comparison, bool isDescending = true)
        : this(Comparer&lt;T&gt;.Create(comparison), isDescending)
    {
    }

    public PriorityQueue(bool isDescending = true)
        : this(Comparer&lt;T&gt;.Default, isDescending)
    {
    }

    public void Enqueue(T item)
    {
        _data.Add(item);
        var childIndex = _data.Count - 1;
        while (childIndex &gt; 0)
        {
            var parentIndex = (childIndex - 1) / 2;
            if (Compare(_data[childIndex], _data[parentIndex]) &gt;= 0)
                break;
            Swap(childIndex, parentIndex);
            childIndex = parentIndex;
        }
    }

    public T Dequeue()
    {
        var lastIndex = _data.Count - 1;
        var firstItem = _data[0];
        _data[0] = _data[lastIndex];
        _data.RemoveAt(lastIndex--);
        var parentIndex = 0;
        while (true)
        {
            var childIndex = parentIndex * 2 + 1;
            if (childIndex &gt; lastIndex)
                break;
            var rightChild = childIndex + 1;
            if (rightChild &lt;= lastIndex &amp;&amp; Compare(_data[rightChild], _data[childIndex]) &lt; 0)
                childIndex = rightChild;
            if (Compare(_data[parentIndex], _data[childIndex]) &lt;= 0)
                break;
            Swap(parentIndex, childIndex);
            parentIndex = childIndex;
        }
        return firstItem;
    }

    public T Peek()
    {
        return _data[0];
    }

    private void Swap(int a, int b)
    {
        var tmp = _data[a];
        _data[a] = _data[b];
        _data[b] = tmp;
    }

    private int Compare(T a, T b)
    {
        return _isDescending ? _comparer.Compare(b, a) : _comparer.Compare(a, b);
    }

    public int Count =&gt; _data.Count;

    public IEnumerator&lt;T&gt; GetEnumerator()
    {
        return _data.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator() =&gt; GetEnumerator();
}

