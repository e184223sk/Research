
public class PriorityQueue&lt;TKey, TValue&gt; : IEnumerable&lt;TValue&gt;
{
    private readonly List&lt;KeyValuePair&lt;TKey, TValue&gt;&gt; _data = new List&lt;KeyValuePair&lt;TKey, TValue&gt;&gt;();
    private readonly bool _isDescending;
    private readonly Func&lt;TValue, TKey&gt; _keySelector;
    private readonly IComparer&lt;TKey&gt; _keyComparer;

    public PriorityQueue(Func&lt;TValue, TKey&gt; keySelector, bool isDescending = true)
        : this(keySelector, Comparer&lt;TKey&gt;.Default, isDescending)
    {
    }

    public PriorityQueue(Func&lt;TValue, TKey&gt; keySelector, IComparer&lt;TKey&gt; keyComparer, bool isDescending = true)
    {
        _keySelector = keySelector;
        _keyComparer = keyComparer;
        _isDescending = isDescending;
    }

    public void Enqueue(TValue item)
    {
        _data.Add(new KeyValuePair&lt;TKey, TValue&gt;(_keySelector(item), item));
        var childIndex = _data.Count - 1;
        while (childIndex &gt; 0)
        {
            var parentIndex = (childIndex - 1) / 2;
            if (Compare(_data[childIndex].Key, _data[parentIndex].Key) &gt;= 0)
                break;
            Swap(childIndex, parentIndex);
            childIndex = parentIndex;
        }
    }

    public TValue Dequeue()
    {
        var lastIndex = _data.Count - 1;
        var firstItem = _data[0];
        _data[0] = _data[lastIndex];
        _data.RemoveAt(lastIndex--);
        var parentIndex = 0;
        while (true)
        {
            var childIndex = parentIndex * 2 + 1;
            if (childIndex &gt; lastIndex)
                break;
            var rightChild = childIndex + 1;
            if (rightChild &lt;= lastIndex &amp;&amp; Compare(_data[rightChild].Key, _data[childIndex].Key) &lt; 0)
                childIndex = rightChild;
            if (Compare(_data[parentIndex].Key, _data[childIndex].Key) &lt;= 0)
                break;
            Swap(parentIndex, childIndex);
            parentIndex = childIndex;
        }
        return firstItem.Value;
    }

    public TValue Peek()
    {
        return _data[0].Value;
    }

    private void Swap(int a, int b)
    {
        var tmp = _data[a];
        _data[a] = _data[b];
        _data[b] = tmp;
    }

    private int Compare(TKey a, TKey b)
    {
        return _isDescending ? _keyComparer.Compare(b, a) : _keyComparer.Compare(a, b);
    }

    public int Count =&gt; _data.Count;

    public IEnumerator&lt;TValue&gt; GetEnumerator()
    {
        return _data.Select(r =&gt; r.Value).GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator() =&gt; GetEnumerator();
}

