
using System.Collections.Generic;
using ExitGames.Client.Photon;
using Photon.Pun;
using Photon.Realtime;
using UnityEngine;

/// &lt;summary&gt;
/// プレーヤー生成時に行う初期設定処理
/// &lt;/summary&gt;
public class PlayerInitializeSetting : MonoBehaviourPunCallbacks
{
    [SerializeField] private MeshRenderer _avatarObjectMeshRenderer;
    [SerializeField] private Material[] _playerMaterials;
    [SerializeField] private Transfrom[] _playerInitTransform;

    private void Start()
    {
        //プレーヤーのカスタムプロパティ更新
        SetMyCustomProperties();
    }

    /// &lt;summary&gt;
    /// カスタムプロパティ更新時のコールバック
    /// &lt;/summary&gt;
    /// &lt;param name="target"&gt;更新されたカスタムプロパティを持つプレーヤー&lt;/param&gt;
    /// &lt;param name="changedProps"&gt;更新されたカスタムプロパティ&lt;/param&gt;
    public override void OnPlayerPropertiesUpdate(Player target, Hashtable changedProps)
    {
        //自分のクライアントの同期オブジェクトの設定
        if (photonView.IsMine)
        {
            this.gameObject.transform.rotation = _playerInitTransform[PhotonNetwork.LocalPlayer.GetPlayerNum()].rotation;
            this.gameObject.transform.position = _playerInitTransform[PhotonNetwork.LocalPlayer.GetPlayerNum()].position;
            _avatarObjectMeshRenderer.sharedMaterial = _playerMaterials[PhotonNetwork.LocalPlayer.GetPlayerNum()];
        }
        //他のクライアントの同期オブジェクトの設定
        else
        {
            this.gameObject.transform.rotation = _playerInitTransform[photonView.Owner.GetPlayerNum()].rotation;
            this.gameObject.transform.position = _playerInitTransform[photonView.Owner.GetPlayerNum()].position;
            _avatarObjectMeshRenderer.sharedMaterial = _playerMaterials[photonView.Owner.GetPlayerNum()];
        }
    }
    }
}

