More than 1 year has passed since last update.まず前提として、ネットワーク経由で同期し、
ルームに好きなタイミングで出入りできるアプリケーションの
作成を行っていました。その中で、プレーヤーごとの生成位置及び色をどうきめるか
という問題に直面しました。位置も色も被ることなくプレイヤーに反映したい！　
というのが今回の記事の本筋です。最初に思いついたのは
ルームの人数に応じたプレイヤーの生成位置、色の振り分けです。ルーム入室時の人数が
0人なら1番目の位置、色
1人なら2番目の位置、色
2人なら3番目の位置、色
3人なら4番目の位置、色 といった具合です。ただし、このやり方だと再入室時に位置被り、色被りが発生してしまいます。そこで別のやり方を考えました。入室時にプレイヤーごとに番号を割り当てるという方法を思いつきました。
まずはルーム内で使われていない番号をチェックします。使われていない番号が
1なら番号1をプレイヤーに割り当て
2なら番号2をプレイヤーに割り当て
3なら番号3をプレイヤーに割り当て
4なら番号4をプレイヤーに割り当て といった具合です。あとは各々のクライアントが各自のローカルで生成された
同期オブジェクトの所有権を持つプレイヤーを取得し、
番号をチェックして処理を行います。番号ごとに各々のクライアントが自分のローカル環境で処理を行うので、
位置情報や色を送る必要がなくなります。つまり、この方法を使えば通信に必要な情報は
プレイヤーごとに割り振られた番号のみで済みます。入室時にプレイヤーごとに番号を割り当てるという実装を行う上で便利そうな
カスタムプロパティというPUN2の機能に関する記事を発見しました。【参考リンク】：PUN2で始めるオンラインゲーム開発入門【その５】今回はカスタムプロパティを利用して、
ルームの入退室に対応したプレイヤー生成位置、色の振り分けを
実装していきます。カスタムプロパティはプレイヤー単位で設定できて、
必要な時に通信して呼び出す形で利用できるので
今回の目的との親和性は高いと思います。カスタムプロパティを使う上で拡張メソッドは必須かなと個人的には思ってます。理由としては、カスタムプロパティの定義には文字列のキーが必要だからです。とある文字列Xに対して、値を紐づけていくようなイメージです。コードに落とし込むとこんな感じになります。任意の文字列キーのカスタムプロパティを取得、更新する拡張メソッドを用意することで、
利用側は文字列キーの誤りを気にする必要性がなくなります。拡張メソッドで利用側はかなり楽になったので、
プレイヤーごとの番号割り当ての実装に移ります。順番としては見出し通り下記です。
①使用済みの番号を特定
②未使用の番号でプレイヤーの番号を更新コードは以下です。コメントの通りの処理を行っています。未使用の番号でプレイヤーの番号を更新　することができたので、
割り当てられた番号を利用した処理を追加していきます。OnPlayerPropertiesUpdateという
通信完了後、カスタムプロパティが更新し終えたことを
通知するコールバック　内でフラグを立てています。このフラグを利用し、Start関数内でasync/awaitして完了待ちを実装しています。実際に今回メモした実装方法でプレイヤーの生成位置、色の設定を
入退室に対応させたアプリのデモムービーです。【参考リンク】：Sign Language in VRオンライン上でVR空間内での手話トレーニングを実施し、
動画やビデオ通話以上のトレーニング効果を期待したVRアプリです。カスタムプロパティで初期設定を行う方法を使用しましたが、
完全に同じタイミングでカスタムプロパティを
更新した場合のエラーハンドリングなどが未実装です。私が把握している問題は現状これだけですが、
まだまだ対策しないといけないことが多そうです。引き続き深みにはまっていこうと思います。。。PUN2で始めるオンラインゲーム開発入門【その４】


