More than 3 years have passed since last update.C# でマルチスレッドの実装を行ってみて、ハマったことや最初に知っておきたかったことのメモ。Task.Run で同時に動くスレッドの数に限りがあり、限界に達するとタスクが空くのを待つことになる。限界数は下記で確認可能:上限数は下記で引き揚げ可能:できれば Task.Run は async / await とともに使うべき。
そのほうが CPU を効率よく使うように書きやすい。Task.Run で無限ループするなら、終了フラグ見て終了する仕組み必須。
これがないと、単体テストの際にもスレッドが終わらずに困るし、システム終了時にも常に強制終了させることになる。Thread.Sleep(500) のかわりに await Task.Delay(500) をつかうべき。Task.Run の前後にログ出力があったほうがいい。
万一、本番で待たされる事態が発生したときにログから追いかけられる。Task.Run で無限ループしていると、テストTask終了時ににそのTask（スレッド）が終わらないため（終わらないけどテストは終了するため）、複数テストを走らせた場合のみ、すぐにスレッドプールの上限に達してしまい、著しくテスト速度が劣化するという現象が発生する。
無限ループ部分はモックしてテストでは動かないようにするか、終了フラグなどで無限ループが終了する仕組みが必要。static フィールドなど、テスト間で共有する領域に書き込んでいるなら、テストが並列実行されないようにロックを使った配慮が必要。例:static フィールドはテストが終了後も書き換え後の値が残っていることに注意。
必ずテスト実行時に値が初期化されるようでなければならない。メソッドの宣言で virtual にしてないと override できないため、そのメソッドをモックにできない。
そうなると、そのメソッドの中身を含めてテストを書かなければならず、本来テストしたいところと、そうじゃないところが混ざり込み、テストの記述が複雑になってしまう。
依存関係がテストに現れてしまう。依存を切るために public や protected なメソッドは基本 virtual にしておいたほうがいい。


