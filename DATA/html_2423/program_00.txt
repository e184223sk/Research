using System;

public class Program
{
  public static void Main()
  {
    // typeof(int?)はNullable&lt;int&gt;を返す
    Console.WriteLine($"typeof(int?) = {typeof(int?)}");

    int? nullableThree = 3;
    int? nullValue = null;
    int notNullTen = 10;

    // Nullable&lt;T&gt;.GetType()は未定義のため、object.GetType()が呼ばれる。(ボックス化)
    // その際HasValue == trueの場合はT型に、falseの場合はnullにボックス化される。(Nullable&lt;int&gt;にはボックス化されない)

    // int型にボックス化されるため、intを返す
    Console.WriteLine($"nullableThree type is {nullableThree.GetType()}");

    try
    {
      // nullにボックス化されるため、NullReferenceExceptionの例外発生
      Console.WriteLine(nullValue.GetType());
    }
    catch (NullReferenceException)
    {
      Console.WriteLine("nullValue causes NullReferenceException");
    }

    // is演算子も同様。n is intとn is int?は同じ結果を返す(Nullable&lt;int&gt;に変えても同様)
    Console.WriteLine($"nullableThree is int = {nullableThree is int}");
    Console.WriteLine($"nullableThree is int? = {nullableThree is int?}");
    Console.WriteLine($"nullValue is int = {nullValue is int}");
    Console.WriteLine($"nullValue is int? = {nullValue is int?}");
    // int型の変数に対するn is int?に至っては「常にtrueを返すけどいい？」という注釈が出る
    Console.WriteLine($"notNullTen is int? = {notNullTen is int?}");

    // Nullable&lt;int&gt;とintの区別にはNullable.GetUnderlyingType(System名前空間)を使用する
    Console.WriteLine($"IsNullableType(notNullTen) = {IsNullableType(notNullTen)}");
    Console.WriteLine($"IsNullableType(nullableThree) = {IsNullableType(nullableThree)}");

    // リフレクションでプロパティやフィールドの型を取得した場合はNullable&lt;T&gt;になる
    Console.WriteLine(typeof(Foo).GetProperty(nameof(Foo.Value)).PropertyType);
  }

  public class Foo
  {
    public int? Value { get; set; }
  }

  public static bool IsNullableType&lt;T&gt;(T o) =&gt; Nullable.GetUnderlyingType(typeof(T)) != null;

}

