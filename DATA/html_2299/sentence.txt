More than 1 year has passed since last update.祝！ Chromium 版 Microsoft Edge 正式リリース（ベータ版向けから書き換えました）単体テストの自動化はかなり浸透しましたが、UIテストの自動化は、特にクライアント Windows アプリケーションにおいて、まだあまり活用されていないようです。
プログラム変更のたび、リリースのたびに繰り返されるリグレッションテストで工数削減の威力を発揮しますので、今まで触れる機会のなかった方も、楽しみながら導入を検討してみてはいかがでしょうか。WinAppDriver（Windows Application Driver）は、Microsoft で開発されている Windows アプリケーション（UWP／Windows フォーム／WPF／Win32）のUIテスト自動化のためのサービスです。
ここでは C# から、一般的には Selenium で扱うブラウザを操作することで、WinAppDriver の限界に挑戦し、できること／できないことを明らかにしようと思います。この記事で扱っているのは、WinAppDriver の本来的な守備範囲からは少し外れる Web アプリケーションです。
Windows アプリケーションの操作はこれほどたいへんではありませんので、初めて興味を持った方は「こんなにたいへんなら」と逃げ出さないでください。
特にUI要素の特定など、ここでできないからといって C# や VB.NET で開発した Windows アプリケーションで同様のことが実現できないわけではありません。※.NET 以外に Java や Python でも同様のことが実現できると思います。C#Windows 10（言語設定：日本語）動作確認バージョン：v79.0.309.65 (公式ビルド)
※当初ベータ版でしたが、正式リリースに伴い、コードを書き替えました。年明け（2020年）1月15日に、Chromium エンジンを搭載した新しい Microsoft Edge1 の安定版がリリースされます（→ました）。Edge にはもともと標準で読み上げ機能がありましたが、新しい Edge では選択部分のみを読み上げることができるようになりました。
Microsoft Azure のAIプラットフォーム Cognitive Services が提供するクラウドベースの「深層ニューラルネットワークによって強化された音声」も新たに追加されたということです（Microsoft Edge Blog）。では、コードを見ていきましょう。最初に主たるテストメソッドです。
詳細はここから呼ばれるメソッドごとに解説していきますので、目次だと思ってください。流れはシナリオのとおりです。driver の Dispose で Edge ウィンドウが閉じられます。
using で囲っていないのは、エラーが発生したとき開いたままにして原因を追うためです。WinAppDriver はローカル実行です。
AddAdditionalCapability の "app" には、Chromium 版 Edge のインストールディレクトリ内にある msedge.exe を指定します。指定したアドレスのページに遷移します。
Selenium のように Url プロパティ設定一発とはいきません。
アドレス欄を取得して SendKeys で入力していくわけですが、アドレス + Enter を渡すだけでは入力候補が適用されてしまうことがあります。
これを防ぐために、[Delete] キーで入力候補を消してから Enter しています。何かを契機にアドレス欄の入力が全角になってしまうことがありました。
そうなると実行前にIMEモードを半角にしておいても、アドレス入力時に全角に切り替わってしまいます。
発生時、ほかの Edge ウィンドウを開いており、ほかの Edge ウィンドウを閉じて再試行すると解消しました。
たまたまかもしれませんが、ほかの Edge ウィンドウは閉じておくことにします。単なる FindElement / FindElements メソッドでは、存在するはずなのに見つからないことがあります。
SeleniumExtras.WaitHelpers.ExpectedConditions の ElementToBeClickable でも見つからないことがありました。
そこでこのようなタイムアウト付きの待機メソッドを実装して呼び出したところ、見つからない問題が発生しなくなりました。
ここは汎用的に使えると思います。各年の初めに年月を読み上げますが、ヘッダの年月はテキスト選択できません。
テキスト選択できないと「選択部分を音声で読み上げる」機能を実行できません。
コンテキストメニューに出てくるのは「音声で読み上げる」で、クリックするとその位置から読み上げが始まります。対象要素が終わると次の要素を読み上げていきますので、時間を指定して [Escape] キーで強制的に打ち切ります。
年月の場合、その次の要素の「日」（「にち」と読まれる）まで入ってしまうことがありますが、制限事項としてご容赦ください。該当日のイベント（予定／リマインダー）ボタン要素をすべて取得します。
祝日カレンダーを入れている場合、その予定も含まれます。イベントボタン群が見つかったら、先頭イベントボタンの直前のタブ移動要素にフォーカスを移しておきます。
これは少し説明が必要です。任意の部分だけ読み上げるには、テキストとして選択できなくてはいけません。
カレンダー上のタイトルはテキストとして選択できず、標準のコンテキストメニューも表示されませんので、イベントダイアログを開く必要があります。登録されたイベント群のダイアログを表示するには、上から順にクリックしていけばいいわけですが、そう簡単にはいきません。
隠れている要素も取得はできるのですが、隠れたままではクリックできない。
ならばと MoveToElement しても隠れたまま。
Google カレンダーの「日」ビューページでは、カレンダーの div 要素にスクロールがついています。
そして、WinAppDriver 経由でこれをうまく操れそうにない。
マウスホイールはサポートされていないし、ドキュメント全体のスクロールではないので PageUp / PageDown も効きません。なんとか方法はないかと手動で画面をいじっていると、[Tab] キーでイベントボタンを順に巡れることがわかりました。
しかしどうやって先頭のボタンに移動するか。
先頭のボタンから [Shift] + [Tab] で一つ戻ると左上の日を表す「24」にフォーカスが当たります。
HTMLを調べると div 要素でした。
ということは Group 要素として取れるはずです。
WinAppDriverUiRecorder で調べると、XPath が "/Group[@Name=\"12月 24日 (火曜日)\"]" のようになっていました。
曜日を取り除いて前方一致にすることでどの年にも対応できます。いよいよ本丸です。
少し長いですが、一つ一つ解説していきます。[Tab] キーでイベントを巡るのは上で解説したとおりです。
このメソッドはイベントごとに呼ばれますので、まず対象イベントボタンにフォーカスを移動して可視状態にします。フォーカスが移ってアクティブな可視状態になったら、[Enter] キーでイベントダイアログを開きます。
Click メソッドでは開かないことがあり、WebDriverWait で ElementToBeClickable 待機しても再発しましたので、クリック方式は見送りました。イベントダイアログを開いたらタイトル要素を見つけます。イベントボタンの Text プロパティには、"18:00～24:00、残業&amp;amp;奇跡、仕事の予定、承諾済み、場所: 会社、2019年 12月 24日" のような読点区切りの文字列が収められています。
2番目の要素がタイトルです。
例の &amp;amp; のようにHTMLエンコードされた状態で取得されますので、デコードします。
さらにリマインダーは "リマインダー: テストリマインダー" のような書式ですので、キャプション部分を取り除きます。
これでタイトルテキストになります。
これを By.XPath($"//*/Group/Text[@Name=\"{title}\"]") のように渡し、ダイアログ要素からの相対でタイトル要素が取得できます。タイトルを選択して読み上げます。まず、これが一筋縄ではいきませんでした。タイトルは1文字、1単語から2行の折り返しまであります。
3行以上の場合も2行で打ち切られ、省略記号（三点リーダー）付きで表示されます。最初に思いついたのはトリプルクリックです。
手動操作で試したところ、折り返される場合もうまく全選択できました。
さらにいいことには、隠れていてマウスドラッグでは選択できなかった3行目以降までが選択され、読み上げの対象となりました。
ただし、その状態でコンテキストメニューを開いて「選択部分を音声で読み上げる」を実行すると通知設定まで読まれてしまいます。
改行まで選択されているためでしょう。
[Ctrl] + [Shift] + [←] キーで改行を取り除くと、タイトルのみが読み上げられるようになりました。このままめでたしとは行きません。
トリプルクリック…できません。
IsActionExecutor が true の Driver であれば PointerInputDevice.CreatePointerDown, CreatePointerDown の組み合わせで実現できそうですが、WindowsDriver&lt;WindowsElement&gt; + WinAppDriver ではサポートされておらず、Click や DoubleClick の組合せでも実現できませんでした。
残念ですが、諦めましょう。素直にタイトルテキストをドラッグ&amp;ドロップで選択することにします。
起点はタイトル要素の左上端です。
Actions.MoveToElement は要素のみの指定だとその要素の中央に移動しますが、オフセットを指定する場合は左上端が起点となります。
ドラッグ&amp;ドロップは ClickAndHold → MoveByOffset → Release です。
Release した後には MoveByOffset で選択領域内に移動しておくとより丁寧ですが、なくても動作しますので省きました。タイトルが3行あると日時まで選択されてしまいますが、制限事項とさせていただきます。テキストを選択したら、コンテキストメニューから読み上げを実行します。
読み上げ指示は年月と同じですが、今度は選択部分のみの読み上げですので、終了待機の方法が変わります。
選択部分のみ読み上げる場合、終わると読み上げツールバーは自動的に閉じられますので、これを検出することで読み終えたと判断できそうです。初めに SeleniumExtras.WaitHelpers.ExpectedConditions.InvisibilityOfElementLocated を試してみましたが、要素自体が消えるとエラーになってしまうようで、ここには使えませんでした。
それでは WebDriverWait で FindElements が要素を返さなくなるまで待機することにしましょう。ここもすんなりとは通してくれません。
「旅行」の読み上げが止まらず、日時、時刻と突き進んでしまいます。
よく見ると、コンテキストメニューが「選択部分を音声で読み上げる」でなく「ここから音声で読み上げる」になっています。
確かな基準は不明ですが、2文字以内の単語や「マススパー」「クリスマスイブ」のような日本語として一つになった単語、「12345678」のような数字のみで発生します。
これは手動操作でも同じでした。
であれば仕方ありません。
WebDriverWait に設定したタイムアウトを経過すると WebDriverTimeoutException が発生しますので、捕捉して強制的に打ち切ることにしましょう。
そのうちきちんと「選択部分を音声で読み上げる」になるよう、 Edge で修正されるかもしれませんが、それまでは制限事項です。読み上げ後、そのままだとダイアログに対してショートカットが効きません。
タイトル要素をクリックしてフォーカスを戻してから、[Escape] キーでイベントダイアログを閉じます。
タイトル要素は上ですでに取得していますが、読み上げ後には再取得が必要です。ベータ版ではすんなり行かないことが多く、試行錯誤の連続でしたが、正式リリース版ではそうした問題がかなり解消されていました。今回のような特別な要件がない限り、Web アプリケーションは Selenium で扱った方がいいですが、を示すことができていれば、ひとまず挑戦してよかったと思います。音声に関しては、新しく追加された「Haruka Online」は「Haruka」よりは確かに機械っぽさが薄れた気はするものの、英語のたとえば「Jessa Online」の流暢さと比べるとぎこちなさは否めません。
まだまだ改良の余地がありそうです。
選択した部分だけ読み上げられるようになったのはいいですね。
ちなみにこの記事も公開前、おかしなところがないかチェックするため、Haruka Online さんに読み上げてもらいました3。
もう少し自然になればプレゼンとかでも使えそうです。やりがいはありました。
まだいろいろ遊べそうではあります。（またいつか、苦労を忘れた頃に）Qiita に書くようになって初めての Advent Calendar に参加してみました。
クリスマスにちなんだ記事にしましたが、もっと C# っぽいことを書くべきだったかもしれません…ご寛容を。これまでの EdgeHTML 版 Edge は UWP アプリケーションでしたが、Chromium 版 Edge は Win32 アプリケーションとして開発されています。 ↩Chrome 同様、情報バーに「自動テスト ソフトウェアによって制御されています」と表示されますので、Chromium の仕様と考えられます。 ↩コード部分を日本語で読み上げると凄いことになってちょっと面白いですね。英語に切り替えるとそれっぽく聞こえますが、飛ばしましょう。次の章の先頭文字を選択すると、そこから続行してくれます。 ↩


