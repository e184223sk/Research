
    /// &lt;summary&gt;
    /// 初期化
    /// &lt;/summary&gt;
    void Initialize()
    {
        // パーティクル数上限の計算、ComputeShaderのスレッド数の倍数にしている
        particleNum = (particleMax / THREAD_NUM_X) * THREAD_NUM_X;

        // 一度に生成するパーティクル数の計算
        emitNum = (emitMax / THREAD_NUM_X) * THREAD_NUM_X;
        Debug.Log("particleNum " + particleNum + " emitNum " + emitNum + " THREAD_NUM_X " + THREAD_NUM_X);

        // ComputeBufferの初期化、配列数はパーティクル数分
        particleBuffer = new ComputeBuffer(particleNum, Marshal.SizeOf(typeof(ParticleData)), ComputeBufferType.Default);

        // AppendStructuredBuffer と ConsumeStreucturedBuffer共用のComputeBufferの初期化
        particlePoolBuffer = new ComputeBuffer(particleNum, Marshal.SizeOf(typeof(int)), ComputeBufferType.Append);
        particlePoolBuffer.SetCounterValue(0);

        // パーティクル数の数を取得するためのComputeBufferの初期化
        particleCountBuffer = new ComputeBuffer(4, Marshal.SizeOf(typeof(int)), ComputeBufferType.IndirectArguments);
        particleCounts = new int[]{ 0, 1, 0, 0 };
        particleCountBuffer.SetData(particleCounts);

        // ComputeShaderのカーネル(関数)番号を取得
        initKernel = cs.FindKernel("Init");
        emitKernel = cs.FindKernel("Emit");
        updateKernel = cs.FindKernel("Update");

        Debug.Log("initKernel " + initKernel + " emitKernel " + emitKernel + " updateKernel " + updateKernel);

        InitParticle();
    }

    void Start () {
        Initialize();
    }

