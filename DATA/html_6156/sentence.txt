More than 3 years have passed since last update.こんな投稿をしてしまって、各方面の方々、申し訳ございません。最近、スクレイピング等で文字列を操作する機会が多く、LINQに触り始めました。LINQ覚えたての人の備忘録なので温かい目でご覧ください。問題と実行結果を見ながら解いていくと筆者が喜びます。GitHubに今回の問題を上げましたのでよろしければやってみてください。もっと良い回答があれば初心者の筆者にわかるように教えて頂きたいです。統合言語クエリ (LINQ, Language INtegrated Query, リンクと発音する)とは、.NET Framework 3.5において、様々な種類のデータ集合に対して標準化された方法でデータを問い合わせる(クエリ)ことを可能にするために、言語に統合された機能のことである。開発ツールはVisual Studio 2008から対応している。らしいですよ。.NET Framework 3.5がリリースされたのは、2007年11月19日なのでほぼ10年経ってますね。知ったのも触ったのも最近なんで、もっと簡単に説明するとSQLクエリっぽくデータを捌けるって感じです。良くわからないと思うので、問題ベースにコードを見てみましょう。問題1は文字列と文字列を連結させます。3人のdatasに「ちゃん」をつけてあげて出力してください。問題1、問題2は、foreachでもLINQでも可とします。foreachでもできますが、LINQの.Selectを使うともっと上手くできるはずです。foreach版では、結果のListを用意するので行数が増えてることがわかると思います。LINQ版では、.Selectが使えるので、文字列を連結した列挙を取得することができます。さっきのに問題2を追加しました。問題2は、文字列の末尾が"お"のデータだけを抽出します。5人のデータから末尾が"お"の人を出力してください。問題1、問題2は、foreachでもLINQでも可とします。LINQ版では、.Whereを使えば上手に行くはずです。LINQ版の方がコードが短く、可読性も上がったことがわかると思います。.Whereが使えるので、要素の中から指定した条件に合致するものを直感的に取り出せました。さっきのに問題3を追加しました。問題3は、LIKE検索を実装するためのコードです。5人のdatasから検索をかけて絞り込みます。この辺りからforeach版では苦しいので回答は、LINQのみの記載となってます。アルゴリズムを考えるのが難しい問題ですね。データの検索が簡単で見やすくできるのは捗りますね。さっきのに問題4を追加しました。問題4は、列挙を「分割」する方法ですね。今回は、cuteを2個づつにしたいです。私は最初、遅延評価に悩まされました。とはいえ、遅延評価は「利用されるタイミングまで実行されない」のでメモリの節約になって良いですね。処理としては、.Takeと.Skipを使いました。.Takeは、要素を指定した数だけ読みます。.Skipは、要素を指定した数だけ読み飛ばします。組み合わせることでインデックスを使わずにインデックスっぽく捌くことができました。インデックスを使ってないので、IndexOutOfRangeException等の例外が出る可能性がありません。これもデータを捌く上で大きなメリットだと思います。問題4で作成したDivideをExtensionsクラスに切り出して、IEnumerableの拡張メソッドにしよう！ジェネリック（&lt;T&gt;）型に対応させ、string以外の型でも処理できるようにしよう！返却する最後の列挙数が指定したvalue数に満たない場合、切り捨てを行う処理を追加する。（例えば、問題4の例でいうと{"さえ"}の個数は指定したvalue（２個）に満たないので、切り捨てることとする。）3づつ分割した結果拡張クラスを作ることで車輪の再開発も減ると思います。業務でも使う機会が多いと思いますので、ぜひ使えるようになりましょう。LINQ素敵！とっつきやすい内容なのでGitHubからもってきて、ぜひ、やってみてください！


