

    /// &lt;summary&gt;
    /// メインエントリ
    /// &lt;/summary&gt;
    /// &lt;param name="args"&gt;&lt;/param&gt;
    static void Main(string[] args)
    {
        // ----------------- 問題1--------------------
        //Question1();
        // ----------------- 問題2--------------------
        //Question2();
        // ----------------- 問題3--------------------
        //引数は４パターン試してね！ 
        //完全一致パターン
        //var ret3a = Question3("りん");
        //表示
        //foreach (var a in ret3a)
        //  Console.Write(a);
        //前方一致パターン
        //var ret3b = Question3("み%");
        //表示
        //foreach (var b in ret3b)
        //  Console.Write(b);
        //後方一致パターン
        //var ret3c = Question3("%お");
        //表示
        //foreach (var c in ret3c)
        //  Console.Write(c);
        //部分一致パターン
        //var ret3d = Question3("%づき%");
        //表示
        //foreach (var d in ret3d)
        //  Console.Write(d);
        //Console.WriteLine();
        // ----------------- 問題4--------------------
        // 列挙を作るよ
        IEnumerable&lt;string&gt; cute = new[] { "まゆ", "ちえり", "ゆかり", "きょうこ", "さえ" };
        // 分割した列挙を入れるよ
        var ret4a = Divide(cute, 2);
        // 表示
        foreach (var r in ret4a)
            Console.WriteLine(string.Join(",", r));

    }

    /// &lt;summary&gt;
    /// 問題4 難易度 : REGULAR
    /// -----------------------------------
    /// [説明] : 列挙を「分割」してみよう。
    /// [入力] : datas = {"まゆ","ちえり","ゆかり","きょうこ","さえ"},
    ///          value = 2 （区切る単位の数）
    /// [出力] :   {"まゆ,"ちえり"},
    ///            {"ゆかり","きょうこ"},
    ///            {"さえ"}
    /// &lt;/summary&gt;
    /// &lt;param name="value"&gt;&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;

    private static IEnumerable&lt;IEnumerable&lt;string&gt;&gt; Divide(IEnumerable&lt;string&gt; datas, int value)
    {   
        // datesがある間ループ
        while (datas.Any())
        {
            // valueの分だけデータを貰って
            yield return datas.Take(value);
            // valueの分だけスキップ
            datas = datas.Skip(value);
        }
    }


