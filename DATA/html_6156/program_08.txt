

    /// &lt;summary&gt;
    /// メインエントリ
    /// &lt;/summary&gt;
    /// &lt;param name="args"&gt;&lt;/param&gt;
    static void Main(string[] args)
    {
        // ----------------- 問題1--------------------
        //Question1();
        // ----------------- 問題2--------------------
        //Question2();
        // ----------------- 問題3--------------------
        //引数は４パターン試してね！ 
        //完全一致パターン
        //var ret3a = Question3("りん");
        //表示
        //foreach (var a in ret3a)
        //  Console.Write(a);
        //前方一致パターン
        //var ret3b = Question3("み%");
        //表示
        //foreach (var b in ret3b)
        //  Console.Write(b);
        //後方一致パターン
        //var ret3c = Question3("%お");
        //表示
        //foreach (var c in ret3c)
        //  Console.Write(c);
        //部分一致パターン
        //var ret3d = Question3("%づき%");
        //表示
        //foreach (var d in ret3d)
        //  Console.Write(d);
        //Console.WriteLine();
        // ----------------- 問題4--------------------
        // 列挙を作るよ
        //IEnumerable&lt;string&gt; cute = new[] { "まゆ", "ちえり", "ゆかり", "きょうこ", "さえ" };
        // 分割した列挙を入れるよ
        //var ret4a = Divide(cute, 2);
        // 表示
        //foreach (var r in ret4a)
        //  Console.WriteLine(string.Join(",", r));
        // ----------------- 問題5--------------------
        // LiPPS ?　をてきとーな数に分けてくれー！
        var LiPPS = new[] { "しき", "しゅうこ", "かなで", "高田純次", "みか" };
        // 表示
        foreach (var r in LiPPS)
            Console.WriteLine(string.Join(",", r));

    }
    public static class Extension
    {
        //作ったDivideを
        //①Extensionsクラスに切り出して、IEnumerableの拡張メソッドにする
        //②ジェネリック（&lt;T&gt;）型に対応させ、string以外の型でも処理できるようにする
        // 返却する最後の列挙数が指定したvalue数に満たない場合、
        // 切り捨てを行う処理を追加する。
        // （例えば、前回の例でいうと{"さえ"}の個数は指定したvalue（２個）に満たないので、
        //  切り捨てることとする）

        /// &lt;summary&gt;        
        /// 問題5 難易度 : REGULER+
        /// 対象のシーケンスを分割、余りは切り捨て
        /// &lt;/summary&gt;
        /// &lt;typeparam name="T"&gt;&lt;/typeparam&gt;
        /// &lt;param name="datas"&gt;&lt;/param&gt;
        /// &lt;param name="value"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static IEnumerable&lt;IEnumerable&lt;T&gt;&gt; Divide&lt;T&gt;(this IEnumerable&lt;T&gt; datas, int value)
        {
            // ここに処理を書いて
            return null;
        }
    }


