
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Discord;
using Discord.Commands;
using Discord.WebSocket;

namespace discordbot1
{
    class Logger
    {
        private static ulong channelid = ulong.Parse(Config.Master.Log);

        public static async Task CommandMessage(SocketUserMessage message, DiscordSocketClient client, string title, string detail,string[] field,string[]value,bool Inline = false)
        {
            var embed = new EmbedBuilder();
            if (title != null) { embed.WithTitle(title); }
            if (detail != null) { embed.WithDescription(detail); }
            for (int i = 0; i &lt; field.Length; i++)
            {
                string fld = null;
                string val = null;
                try
                {
                    fld = field[i];
                    val = value[i];
                }
                finally
                {
                    if (!String.IsNullOrEmpty(fld)&amp;&amp; !String.IsNullOrEmpty(val)) 
                    {
                        embed.AddField(fld, val, Inline); 
                    }
                }

            }

                embed.WithColor(Color.Green);
            embed.WithFooter(message.Author.Username);
            embed.WithTimestamp(DateTime.Now);

            var chatchannnel = client.GetChannel(channelid) as SocketTextChannel;
            await chatchannnel.SendMessageAsync(embed: embed.Build());
            Console.WriteLine("Message:" + detail);
            await message.Channel.SendMessageAsync(embed: embed.Build());
        }


        public static async Task infomation(SocketUserMessage message, DiscordSocketClient client, string title, string detail)
        {
            var embed = new EmbedBuilder();
            if (title != null) { embed.WithTitle(title); }
            if (detail != null) { embed.WithDescription(detail); }
            embed.WithColor(Color.Blue);
            embed.WithFooter(message.Author.Username);
            embed.WithTimestamp(DateTime.Now);

            try
            {          
                var chatchannnel = client.GetChannel(channelid) as SocketTextChannel;
                await chatchannnel.SendMessageAsync(embed: embed.Build());
            }
            finally
            {
                Console.WriteLine("Info:" + detail);
                await message.Channel.SendMessageAsync(embed: embed.Build());
            }
        }
        public static async Task warning(SocketUserMessage message, DiscordSocketClient client, string title, string detail)
        {
            var embed = new EmbedBuilder();
            if (title != null) { embed.WithTitle(title); }
            if (detail != null) { embed.WithDescription(detail); }
            embed.WithColor(Color.Gold);
            embed.WithFooter(message.Author.Username);
            embed.WithTimestamp(DateTime.Now);

            try
            {
                var chatchannnel = client.GetChannel(channelid) as SocketTextChannel;
                await chatchannnel.SendMessageAsync(embed: embed.Build());
            }
            finally
            {
                Console.WriteLine("Warning:" + detail);
                await message.Channel.SendMessageAsync(embed: embed.Build());
            }
        }
        public static async Task error(SocketUserMessage message, DiscordSocketClient client, string title, string detail, string modulename)
        {
            var embed = new EmbedBuilder();
            embed.WithTitle(title);
            embed.WithDescription(detail);
            embed.WithColor(Color.Red);
            embed.WithFooter(modulename);
            embed.WithTimestamp(DateTime.Now);

            try
            {
                var chatchannnel = client.GetChannel(channelid) as SocketTextChannel;
                await chatchannnel.SendMessageAsync(embed: embed.Build());
            }
            finally
            {
                Console.WriteLine("Error:" + detail);
                embed.WithDescription("詳細はログチャンネルをご確認ください。");
                embed.WithFooter(message.Author.Username);
                await message.Channel.SendMessageAsync(embed: embed.Build());
            }
        }
    }
}



