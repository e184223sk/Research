
using System;
using System.Collections.Generic;
using System.Text;

namespace discordbot1
{
    class Common
    {
        /// &lt;summary&gt;
        /// 文字列の指定した位置から指定した長さを取得する
        /// &lt;/summary&gt;
        /// &lt;param name="str"&gt;文字列&lt;/param&gt;
        /// &lt;param name="start"&gt;開始位置&lt;/param&gt;
        /// &lt;param name="len"&gt;長さ&lt;/param&gt;
        /// &lt;returns&gt;取得した文字列&lt;/returns&gt;
        public static string _Mid_(string str, int start, int len)
        {
            if (start &lt;= 0)
            {
                throw new ArgumentException("引数'start'は1以上でなければなりません。");
            }
            if (len &lt; 0)
            {
                throw new ArgumentException("引数'len'は0以上でなければなりません。");
            }
            if (str == null || str.Length &lt; start)
            {
                return "";
            }
            if (str.Length &lt; (start + len))
            {
                return str.Substring(start - 1);
            }
            return str.Substring(start - 1, len);
        }

        /// &lt;summary&gt;
        /// 文字列の指定した位置から末尾までを取得する
        /// &lt;/summary&gt;
        /// &lt;param name="str"&gt;文字列&lt;/param&gt;
        /// &lt;param name="start"&gt;開始位置&lt;/param&gt;
        /// &lt;returns&gt;取得した文字列&lt;/returns&gt;
        public static string _Mid_(string str, int start)
        {
            return _Mid_(str, start, str.Length);
        }

        /// &lt;summary&gt;
        /// 文字列の先頭から指定した長さの文字列を取得する
        /// &lt;/summary&gt;
        /// &lt;param name="str"&gt;文字列&lt;/param&gt;
        /// &lt;param name="len"&gt;長さ&lt;/param&gt;
        /// &lt;returns&gt;取得した文字列&lt;/returns&gt;
        public static string _Left_(string str, int len)
        {
            if (len &lt; 0)
            {
                throw new ArgumentException("引数'len'は0以上でなければなりません。");
            }
            if (str == null)
            {
                return "";
            }
            if (str.Length &lt;= len)
            {
                return str;
            }
            return str.Substring(0, len);
        }

        /// &lt;summary&gt;
        /// 文字列の末尾から指定した長さの文字列を取得する
        /// &lt;/summary&gt;
        /// &lt;param name="str"&gt;文字列&lt;/param&gt;
        /// &lt;param name="len"&gt;長さ&lt;/param&gt;
        /// &lt;returns&gt;取得した文字列&lt;/returns&gt;
        public static string _Right_(string str, int len)
        {
            if (len &lt; 0)
            {
                throw new ArgumentException("引数'len'は0以上でなければなりません。");
            }
            if (str == null)
            {
                return "";
            }
            if (str.Length &lt;= len)
            {
                return str;
            }
            return str.Substring(str.Length - len, len);
        }
        /// &lt;summary&gt;
        /// 引数の分解
        /// &lt;/summary&gt;
        /// &lt;param name="input"&gt;入力値&lt;/param&gt;
        /// &lt;returns&gt;分解された出力値&lt;/returns&gt;
        public static string[] _argument_(string input,int Keta = 0)
        {
            string[] output = input.Split(" ");
            if (Keta == 0)
            {
                return output;
            }
            else
            {
                string[] output2 = new string[Keta];
                for (int i = 0; i &lt; output2.Length; i++)
                {
                    try
                    {
                        output2[i] = output[i];
                    }
                    catch
                    {
                        output2[i] = "";
                    }
                }
                return output2;
            }

        }
    }
}

