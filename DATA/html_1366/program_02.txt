
using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;

namespace discordbot1
{
    class Config
    {
        #region INIファイルアクセス用API関数定義
        [DllImport("KERNEL32.DLL")]
        private static extern uint GetPrivateProfileString(string lpAppName, string lpKeyName, string lpDefault, StringBuilder lpReturnedString, uint nSize, string lpFileName);

        [DllImport("KERNEL32.DLL")]
        private static extern uint WritePrivateProfileString(string lpAppName, string lpKeyName, string lpString, string lpFileName);


        #endregion
        /// &lt;summary&gt;
        /// iniファイル名
        /// &lt;/summary&gt;
        private const string CONFIG_FILE_NAME = "kanri.ini";
        /// &lt;summary&gt;
        /// iniファイルパス
        /// &lt;/summary&gt;
        private static string IniFilePath = System.IO.Path.Combine(AppDomain.CurrentDomain.BaseDirectory, CONFIG_FILE_NAME);

        /// &lt;summary&gt;
        /// iniファイル文字列取得
        /// &lt;/summary&gt;
        /// &lt;param name="section"&gt;セクション&lt;/param&gt;
        /// &lt;param name="key"&gt;キー&lt;/param&gt;
        /// &lt;param name="defaultValue"&gt;デフォルト値&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        private static string GetConfigString(string section, string key, string defaultValue)
        {
            StringBuilder sb = new StringBuilder(1024);
            GetPrivateProfileString(section, key, defaultValue, sb, (uint)sb.Capacity, IniFilePath);
            return sb.ToString();
        }
        /// &lt;summary&gt;
        /// iniファイル文字列設定
        /// &lt;/summary&gt;
        /// &lt;param name="section"&gt;セクション&lt;/param&gt;
        /// &lt;param name="key"&gt;キー&lt;/param&gt;
        /// &lt;param name="Value"&gt;設定値&lt;/param&gt;
        private static void SetConfigString(string section, string key, string Value)
        {
            WritePrivateProfileString(section, key, Value, IniFilePath);
        }
        /// &lt;summary&gt;
        /// botセクション
        /// &lt;/summary&gt;
        public class bot
        {
            /// &lt;summary&gt;
            /// セクションキー
            /// &lt;/summary&gt;
            private const string SECTION = "bot";
            public static string BotToken
            {
                get { 
                    string ret = GetConfigString(SECTION, "Token", null);
                    if (string.IsNullOrEmpty(ret))
                    {
                        throw new Exception("BOTトークンの取得に失敗しました。");
                    }
                    return ret;
                }
            }
            /// &lt;summary&gt;
            /// 接頭文字
            /// &lt;/summary&gt;
            public static string StrBotUse
            {
                get { return GetConfigString(SECTION, "BotUse", "/"); }
            }

        }
        /// &lt;summary&gt;
        /// idセクション
        /// &lt;/summary&gt;
        public class ID
        {
            /// &lt;summary&gt;
            /// セクションキー
            /// &lt;/summary&gt;
            private const string SECTION = "Id";
            public static string License
            {
                get
                {
                    string ret = GetConfigString(SECTION, "ServerID", null);
                    if (string.IsNullOrEmpty(ret))
                    {
                        throw new Exception("認証サーバーIDの取得に失敗しました。");
                    }
                    return ret;
                }
            }
        }
        /// &lt;summary&gt;
        /// マスタセクション
        /// &lt;/summary&gt;
        public class Master
        {
            /// &lt;summary&gt;
            /// セクションキー
            /// &lt;/summary&gt;
            private const string SECTION = "Master";
            public static string Owner
            {
                get
                {
                    string ret = GetConfigString(SECTION, "Owner", null);
                    if (string.IsNullOrEmpty(ret))
                    {
                        throw new Exception("所有者の取得に失敗しました。");
                    }
                    return ret;
                }
            }
            public static string Log
            {
                get
                {
                    string ret = GetConfigString(SECTION, "Log", null);
                    if (string.IsNullOrEmpty(ret))
                    {
                        throw new Exception("Logチャンネルの取得に失敗しました。");
                    }
                    return ret;
                }
            }

        }


    }
}


