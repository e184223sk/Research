More than 3 years have passed since last update.ミニゲームを作ってUnityを学ぶ！[タンクウォーズ編]今回は戦車について、以下のように弾の発射とそれを制御・管理する機能を実装します。インポートした戦車のアセットにはすでに撃ち出す弾やエフェクトのプレハブが用意されていますが、そのまま再利用するとどうにも見えにくい＆迫力にかけるため、今回はイメージに合うよう弾は自作、爆発のエフェクトを他からお借りし、発射時のエフェクトのみをアセット内から利用します。弾が戦車に当たった際に発生させる爆発エフェクトは通常の小さいバージョンと、戦車が完全に破壊されたとき用の大きいバージョンの2つを用意しておきます。KTK_kumamotoさんの爆発エフェクト弾のオブジェクトとエフェクトを用意したところで、次は弾にアタッチするためのスクリプトを作成します。Awake()で弾自身のTransformとRigidbodyを取得。
他に必要な機能は後ほど追加していきます。次は弾を生成・管理する側のスクリプトを作成して、戦車に弾を発射する機能を実装します。まずはインスペクタから設定できるフィールドを4つ作成します。次に入力の監視と実際に弾を発射する部分のコードです。TankModelのUpdate()から呼び出されるInputCheck()によって左クリックの入力を監視し、Fire()では所持弾数が残っている場合に発射エフェクトと弾の生成を行っています。所持弾数mBulletCountはボンバーマンでいう一度に置ける爆弾の数のようなイメージで、今回のプロジェクトでは1つの戦車が発射できる弾の数を画面内3つまでに制限しています。Fire()で呼ばれるCreateMuzzleFire()は弾の発射エフェクトを生成するメソッドです。
インスタンス化された発射エフェクトは発射地点「Fire_Point」の子となり、自身にアタッチされているDelete_Timer_CSクラスによって2秒後に自動的に破棄されます。プレハブからオブジェクトをインスタンス化するInstantiate()や、逆に存在するオブジェクトを破棄するDestroy()は使用頻度が高く、それに加えてUnityの中でも重い処理として知られています。今回のプロジェクトでは1つの戦車から発射できる弾数の制限をしているためそれほどではありませんが、一般的なシューティングゲームやアクションゲームなどでは生成・破棄の頻度がより高く、このコストが軽視できない問題となってきます。その問題を解消する仕組みがオブジェクトプーリングです。せっかくなので弾オブジェクトについてはこの仕組みを利用することにして、BulletModelとFireControllerに対応するコードを書いていきます。新しくインスタンス化された弾はSpawn()によって自身の正面方向へ向かって飛んでいきます。
そして画面外に出るなど不要になった場合はSleep()によって休眠状態となり、再利用される際にはRespawn()によって生まれ変わります。Fire()で呼ばれるCreateBullet()は弾を生成して発射するメソッドですが、弾オブジェクトをインスタンス化する前に休眠状態の弾オブジェクトが存在するかどうかを判定し、もしあるならばそれをRespawn()で再利用しています。説明を後回しにしましたが、FireControllerの弾を生成するCreateBullet()にはデリゲートに関する記述があります。この記述から呼び出されるBulletModelのコードを追加します。デリゲートは「関数を入れられる変数」といった説明がされますが、上記のコードでいえばBulletModel.OnSleepというデリゲートの中にFireController.OnSleepBulletを代入しているような形になります。次に、BulletModelのSleep()でこのデリゲートが呼ばれるようコードを修正します。このときの処理の流れは以下のようになります。FireControllerのOnSleepBullet()をまだ実装していませんが、これについてはここまでコード内容が飛び飛びでわかりづらかったことを踏まえて、現在のFireControllerクラスとBulletModelクラスについて整理したコードと共に掲示します。FireControllerクラスの最下部にBulletModelクラスのデリゲートを受け取るためのOnSleepBullet()を追加しています。弾を発射する際に所持弾数を減らす一方で、発射された弾が不要になったタイミングでBulletModel.Sleep()が実行され、弾が休眠状態になったことを通知されたFireControllerが所持弾数を回復させることでシーン内に自弾が3発までという制限を実現しています。弾が休眠状態になる条件の1つ、画面外に出た場合の処理を作成します。弾が画面外に出たかどうかの判定はチュートリアルのシューティングゲームで行っている処理と同じモノになります。画面外に出た場合に呼び出されるSleep()ではを行った後、FireControllerにその旨を通知します。最後にプロジェクトを実行して、左クリックで砲台の向いている方向に弾が発射されることと、弾が最大で3発までしか画面に存在できないことを確認します。次のページに進む
イントロダクションに戻る



