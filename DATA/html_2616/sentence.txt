More than 1 year has passed since last update.着想を得たきっかけはこの論文です！単純な記憶力のテストではVR空間内の方が2Dでのテストに比べて8.8%高い結果であったとのことです👏https://t.co/yTiIj49E0Sもっと遡るとこちらの記事でNバック課題について知りました。→初心者プログラマーがコードをモリモリ読めるようになる方法タイトルはパクりではなくリスペクトの証です。何個か前の記憶を引っ張り出す訓練をすることで、
ワーキングメモリーが鍛えられて、コードとの追いかけっこが上手になるらしいです。★準備
Oculus Quest にGithubからダウンロードしてきたapkを突っ込んで起動して終わりです。
→Github最初に光ったパネルを記憶して、思い出しながら選択するだけです。
２バックくらいから始めるとルールがわかり易いかと思います。
ここから本題です。強いみなさんはどのように実装するのでしょうか。
まずは脳トレとして遊んでみて、自分だったらどう実装するだろう、、、
という視点でもう一度遊ぶと二度おいしいです。まずはスライダーで選んだレベルを取得します。
下記コードのGetLevel()で取得した回数分だけ最初にパネルが光ります。　次のコードでは以下を行っています。
①全てのパネルを取得し、リスト化。
②作成したリストからランダムに1つを選択。
③選択されたオブジェクト側にアタッチされたクラスから、光る・音が鳴る、などのメソッドを呼び出す。
④選択されたオブジェクトをリスト化する。上記をGetLevel()で取得した回数分だけ繰り返します。また、次のパネル側で呼び出す予定のToNextSelect()もここに書いておきます。ゲーム開始までの処理が完了しました。ここからは実際にパネルを選択した後の判定に移ります。
判定はパネル側で個々に行います。行っていることは非常にシンプルで、
①先程のリストを、用意したインデックスで指定して呼び出し、自分と照合する。
②合致していたら正解音と次のパネルが選ばれる処理を実行し、用意したインデックスをインクリメント。間違っていたらインクリメントはせずに、間違いSEを再生するだけです。
また、インクリメントしたインデックスの数からゲームクリア時の判定も行っています。作っておいてこんなこと言うのもなんですが、
プログラムを読めるようになりたいならプログラムを読めばいいと思います。
ありがとうございました。


