using NativeStringCollections

public class TextData : ITextFileParser
{
    NativeList&lt;DataElement&gt; Data;

    public void Init()
    {
        /* クラス初期化。 new() 後に一度だけ呼ばれる */
        /* ここだけはメインスレッドで実行されるのでマネージ型を使ってもいい */
    }

    public void Clear()
    {
        /* パース準備。 ParseLines(lines) が始まる前に一度呼ばれる */
    }

    public bool ParseLines(NativeStringList lines)
    {
        for(int i=0; i&lt;lines.Length; i++)
        {
            var line = lines[i];
            /* line を解析する。 次の行も読みたいなら true を返す */
        }
    }

    public void PostProc()
    {
        /* 後処理。 ParseLines(lines) が終わったら一度呼ばれる */
    }

    public void UnLoad()
    {
        /* 一時的にデータを破棄したいときにここに処理を書く */
    }
}

public class Hoge : MonoBehaviour
{
    AsyncTextFileReader&lt;TextData&gt; reader;

    void Start() { reader = new AsyncTextFileReader&lt;TextData&gt;(Allocator.Persistent); }

    void OnClickLoadFile()
    {
        // どこかでファイル読み込みの指示を出す (必要なら Encoding も指定する)
        reader.Encoding = Encoding.UTF8;
        reader.LoadFile(path);
    }

    void Update()
    {
        // 進捗を表示できる (Read, Length ともに BlockSize単位のint)
        var info = reader.GetState
        float progress = (float)info.Read / info.Length;

        // 終わってたら Complete()
        if(reader.JobState == ReadJobState.WaitForCallingComplete)
        {
            reader.Complete();

            // 読み込みにかかった時間も出せる  [ms]
            double delay = reader.GetState.Delay;
            Debug.Log($" file loading completed. time = {delay.ToString("F2")} [ms].");

            // データを取り出して何かする
            var data = reader.Data;
        }
    }

    void OnDestroy()
    {
        // データのDispose() は外で行う。 reader だけ先に Dispose() してもよい
        var data = reader.Data;  
        reader.Dispose();

        data.Dispose();
    }
}

