
unsafe public interface IJaggedArraySliceBase&lt;T&gt; where T: unmanaged, IEquatable&lt;T&gt;
{
    int Length { get; }
    T this[int index] { get; }
    bool Equals(NativeJaggedArraySlice&lt;T&gt; slice);
    bool Equals(ReadOnlyNativeJaggedArraySlice&lt;T&gt; slice);
    bool Equals(T* ptr, int Length);
    void* GetUnsafePtr();
}
public interface ISlice&lt;T&gt;
{
    T Slice(int begin = -1, int end = -1);
}

[StructLayout(LayoutKind.Sequential)]
public readonly unsafe struct NativeJaggedArraySlice&lt;T&gt; :
    IJaggedArraySliceBase&lt;T&gt;,
    IEnumerable&lt;T&gt;,
    IEquatable&lt;IEnumerable&lt;T&gt;&gt;, IEquatable&lt;T&gt;,
    ISlice&lt;NativeJaggedArraySlice&lt;T&gt;&gt;
    where T: unmanaged, IEquatable&lt;T&gt;
{
    [NativeDisableUnsafePtrRestriction]
    internal readonly T* _ptr;
    internal readonly int _len;

    public int Length { get { return _len; } }

#if ENABLE_UNITY_COLLECTIONS_CHECKS
    [NativeDisableUnsafePtrRestriction]
    internal readonly long* _gen_ptr;
    internal readonly long _gen_entity;
#endif

#if ENABLE_UNITY_COLLECTIONS_CHECKS
    public NativeJaggedArraySlice(T* ptr, int Length, long* gen_ptr, long gen_entity)
    {
        _ptr = ptr;
        _len = Length;
        _gen_ptr = gen_ptr;
        _gen_entity = gen_entity;
    }
#else
    public NativeJaggedArraySlice(T* ptr, int Length)
    {
        _ptr = ptr;
        _len = Length;
    }
#endif

    public T this[int index]
    {
        get
        {
            this.CheckReallocate();
            return *(_ptr + index);
        }
        set
        {
            this.CheckReallocate();
            this.CheckElemIndex(index);
            *(_ptr + index) = value;
        }
    }
    public NativeJaggedArraySlice&lt;T&gt; Slice(int begin = -1, int end = -1)
    {
        if (begin &lt; 0) begin = 0;
        if (end &lt; 0) end = _len;
        this.CheckSliceRange(begin, end);
        int new_len = end - begin;
#if ENABLE_UNITY_COLLECTIONS_CHECKS
        this.CheckReallocate();
        return new NativeJaggedArraySlice&lt;T&gt;(_ptr + begin, new_len, _gen_ptr, _gen_entity);
#else
        return new NativeJaggedArraySlice&lt;T&gt;(_ptr + begin, new_len);
#endif
    }
    [Conditional("ENABLE_UNITY_COLLECTIONS_CHECKS")]
    private void CheckReallocate()
    {
#if ENABLE_UNITY_COLLECTIONS_CHECKS
        if(_gen_ptr == null &amp;&amp; _gen_entity == -1) return;  // ignore case for NativeJaggedArraySliceGeneratorExt
        if( *(_gen_ptr) != _gen_entity)
        {
            throw new InvalidOperationException("this slice is invalid reference.");
        }
#endif
    }

    public void* GetUnsafePtr() { return _ptr; }
}

