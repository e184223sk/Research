
public unsafe readonly struct StringEntity :
    IParseExt,
    IJaggedArraySliceBase&lt;char&gt;,
    ISlice&lt;StringEntity&gt;,
    IEquatable&lt;string&gt;, IEquatable&lt;char[]&gt;, IEquatable&lt;IEnumerable&lt;char&gt;&gt;, IEquatable&lt;char&gt;,
    IEnumerable&lt;char&gt;
{
    /* 中略 */

    /* string のようなものへの特殊化 */
    public bool Equals(char* ptr, int Length)
    {
        this.CheckReallocate();
        if (_len != Length) return false;

        // pointing same target
        if (_ptr == ptr) return true;

        for (int i = 0; i &lt; _len; i++)
        {
            if (_ptr[i] != ptr[i]) return false;
        }

        return true;
    }
    public bool Equals(StringEntity entity)
    {
        this.CheckReallocate();
        return entity.Equals(_ptr, _len);
    }
    public bool Equals(ReadOnlyStringEntity entity)
    {
        this.CheckReallocate();
        return entity.Equals(_ptr, _len);
    }
    public bool Equals(NativeJaggedArraySlice&lt;char&gt; slice)
    {
        this.CheckReallocate();
        return slice.Equals(_ptr, _len);
    }
    public bool Equals(ReadOnlyNativeJaggedArraySlice&lt;char&gt; slice)
    {
        this.CheckReallocate();
        return slice.Equals(_ptr, _len);
    }
    public bool Equals(string str)
    {
        if (this.Length != str.Length) return false;
        return this.SequenceEqual&lt;char&gt;(str);
    }
    public bool Equals(char[] c_arr)
    {
        if (this.Length != c_arr.Length) return false;
        return this.SequenceEqual&lt;char&gt;(c_arr);
    }
    public bool Equals(char c)
    {
        return (this.Length == 1 &amp;&amp; this[0] == c);
    }
    public bool Equals(IEnumerable&lt;char&gt; in_itr)
    {
        this.CheckReallocate();
        return this.SequenceEqual&lt;char&gt;(in_itr);
    }
    public static bool operator ==(StringEntity lhs, StringEntity rhs) { return lhs.Equals(rhs); }
    public static bool operator !=(StringEntity lhs, StringEntity rhs) { return !lhs.Equals(rhs); }
    public static bool operator ==(StringEntity lhs, ReadOnlyStringEntity rhs) { return lhs.Equals(rhs); }
    public static bool operator !=(StringEntity lhs, ReadOnlyStringEntity rhs) { return !lhs.Equals(rhs); }
    public static bool operator ==(StringEntity lhs, IEnumerable&lt;char&gt; rhs) { return lhs.Equals(rhs); }
    public static bool operator !=(StringEntity lhs, IEnumerable&lt;char&gt; rhs) { return !lhs.Equals(rhs); }
    public override bool Equals(object obj)
    {
        return obj is StringEntity &amp;&amp; ((IJaggedArraySliceBase&lt;char&gt;)obj).Equals(_ptr, _len);
    }

    public ReadOnlyStringEntity GetReadOnly()
    {
        return new ReadOnlyStringEntity(this);
    }
    public void* GetUnsafePtr() { return _ptr; }
}

