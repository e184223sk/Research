
public class MyViewModelNobackingField : MyViewModel
{
    //プロパティ名をKeyとしたバッキングフィールド代わりのDictionary
    private Dictionary&lt;string, object&gt; currentPropertyValues = new Dictionary&lt;string, object&gt;();

    /// &lt;summary&gt;
    /// 現在のプロパティ値を取得
    /// &lt;/summary&gt;
    protected TResult GetPropertyValue&lt;TResult&gt;([CallerMemberName]string propertyName = null)
        //プロパティの型の既定値を初期値とする
        =&gt; GetPropertyValue(default(TResult), propertyName);

    /// &lt;summary&gt;
    /// 現在のプロパティ値を取得
    /// &lt;/summary&gt;
    /// &lt;param name="initialValue"&gt;初期値&lt;/param&gt;
    protected TResult GetPropertyValue&lt;TResult&gt;(TResult initialValue,
      [CallerMemberName]string propertyName = null)
    {
        //キーに値が無かったら初期値を現在値に入力
        if (!currentPropertyValues.ContainsKey(propertyName))
            currentPropertyValues[propertyName] = initialValue;

        //Dictionaryから現在値を取得してプロパティの型に変換する
        return (TResult)currentPropertyValues[propertyName];
    }

    /// &lt;summary&gt;
    /// 前と値が違うなら変更してイベントを発行する
    /// &lt;/summary&gt;
    /// &lt;param name="value"&gt;新しい値&lt;/param&gt;
    /// &lt;returns&gt;値の変更有無&lt;/returns&gt;
    protected bool RaisePropertyChangedIfSet&lt;TResult&gt;(TResult value,
      [CallerMemberName]string propertyName = null)
    {
        //値が同じだったら何もしない
        if (EqualityComparer&lt;TResult&gt;.Default.Equals(GetPropertyValue&lt;TResult&gt;(propertyName), value))
            return false;

        //プロパティの現在値に入力
        currentPropertyValues[propertyName] = value;
        //イベント発行
        RaisePropertyChanged(propertyName);
        return true;
    }
}

