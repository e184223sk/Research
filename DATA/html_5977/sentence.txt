unityでC#を使っている大学生です。スクリプトを書いていて躓いたことを備忘録として残します。
同じ疑問をお持ちになった方是非お役立てください。今回は、乱数についてです。
Randomクラス使用時の落とし穴
差異はどこにあるか同時に
System名前空間のRandomクラスを用いた疑似乱数生成の記述方法
UnityEngine名前空間のRandomクラスを用いた疑似乱数生成の記述方法
についても触れていきます。まず無知な私は、UnityEngine名前空間を使っていたので、愚直にRandomクラスを使おうとしてエラーを吐きました。RandomクラスがSystem名前空間とUnityEngine名前空間の両方に存在するので、どちらのクラスを使用しているのか分からないのが問題なようです。クラスを使う際に名前空間を指定すると簡単に解決できます。大きな差はインスタンスを生成するか否かのようです。
System名前空間ではインスタンスを生成する為、いくつも乱数が必要な場合に有用性を発揮します。
対してUnityEngine名前空間ではそのようなステップを踏まないので、乱数の取得が簡単です。またSystem名前空間の方は乱数の返り値が整数ですが、UnityEngine名前空間のほうでは浮動小数点数です。パフォーマンスでも差があるようで、UnityEngine.Randomのメソッドのほうが高速だそうです。
乱数を複数個扱わないのであればこちらを使うに越したことはなさそうですね。（参考）
Unity公式ドキュメントVersus System.RandomThis class has the same name as the .NET Framework class System.Random and serves a similar purpose, but differs in some key ways:Static vs instancedUnityEngine.Random is a static class, and so its state is globally shared. Getting random numbers is easy, because there is no need to new an instance and manage its storage. However, static state is problematic when working with threads or jobs (the generator will error if used outside the main thread), or if multiple independent random number generators are required. In those cases, managing instances of System.Random would be a better option.PerformanceMethods in UnityEngine.Random have been measured to be between 20% and 40% faster than their equivalents in System.Random.（和訳）System.Randomとの違いこのクラスは、.NET Framework のクラス System.Random と同じ名前で、同じような目的を持っていますが、いくつかの重要な点で異なります。静的 vs インスタンスUnityEngine.Randomは静的なクラスであり、その状態はグローバルに共有されます。インスタンスを生成したり、ストレージを管理したりする必要がないので、乱数の取得が容易です。しかし、スレッドやジョブを使用する場合や、複数の独立した乱数生成器が必要な場合には、静的な状態は問題となります。このような場合には、System.Randomのインスタンスを管理する方が良いでしょう。パフォーマンスUnityEngine.Randomのメソッドは、System.Randomのメソッドに比べて20%から40%高速であることが測定されています。Random.Next メソッド
Next(Int32) ：指定した最大値より小さい 0 以上のランダムな整数を返します。
Next(Int32, Int32) ：指定した範囲内のランダムな整数を返します。
Next() ：0 以上のランダムな整数を返します。またMicrosoft公式ドキュメントにプロセス開始時に一度だけジェネレーターにシードが与えられ，その後は完全にスクリプトの制御下に置かれることになります。との記載があるのでシード値を乱数（可変のもの）にすれば毎度違う乱数を返すようにもできます。Random.Range
public static float Range(float minInclusive, float maxInclusive); Returns a random float within minInclusive..maxInclusive.
（訳：minInclusive..maxInclusive内のランダムな浮動小数点数を返します。）はじめは同じに見えましたがよくよく調べるとしっかりと違いがありました。
目的に合わせて使い分けていきたいです。
そしてどれも指定した最大値"未満"の乱数を返すという点に注意が必要だと思いました。参考記事
[https://docs.microsoft.com/ja-jp/dotnet/api/system.random.next?view=net-5.0]
[https://docs.unity3d.com/ScriptReference/Random.html]


