
Font font = new Font("", 20, FontStyle.Bold, GraphicsUnit.Pixel);

DateTimeOffset start = new DateTimeOffset(new DateTime(2020, 1, 1), new TimeSpan());
DateTimeOffset end = new DateTimeOffset(new DateTime(2021, 1, 1), new TimeSpan());

Chart chart = new Chart();
chart.Size = new Size(1920, 1080);

ChartArea area = new ChartArea();
chart.ChartAreas.Add(area);

Legend legend = new Legend();
chart.Legends.Add(legend);
legend.Docking = Docking.Top;

Series marker = new Series();
chart.Series.Add(marker);
marker.IsVisibleInLegend = false;
marker.ChartType = SeriesChartType.Point;
marker.MarkerSize = 20;
marker.MarkerStyle = MarkerStyle.Circle;
marker.Font = font;
marker.LabelBackColor = Color.LightGray;

Series ra = new Series("R.A. [hour]");
chart.Series.Add(ra);
ra.ChartType = SeriesChartType.Line;
ra.BorderWidth = 3;

Series dec = new Series("Dec. [deg]");
chart.Series.Add(dec);
dec.ChartType = SeriesChartType.Line;
dec.BorderWidth = 3;

Series au = new Series("Dist. [AU]");
chart.Series.Add(au);
au.YAxisType = AxisType.Secondary;
au.ChartType = SeriesChartType.Line;
au.BorderWidth = 3;

area.AxisX.Minimum = start.UtcDateTime.ToOADate();
area.AxisX.Maximum = end.UtcDateTime.ToOADate();
area.AxisX.Title = "UTC";
area.AxisX.TitleFont = font;
area.AxisX.LabelStyle.Format = "yyyy/MM";
area.AxisX.IntervalType = DateTimeIntervalType.Months;
area.AxisX.Interval = 1;
area.AxisX.MinorGrid.Enabled = true;
area.AxisX.MinorGrid.IntervalType = DateTimeIntervalType.Weeks;
area.AxisX.MinorGrid.Interval = 1;
area.AxisX.MinorGrid.LineColor = Color.LightGray;

area.AxisY.Title = "[hour], [deg]";
area.AxisY.TitleFont = font;
area.AxisY.Minimum = -25;
area.AxisY.Maximum = +25;
area.AxisY.Interval = 5;
area.AxisY.MinorGrid.Enabled = true;
area.AxisY.MinorGrid.Interval = 1;
area.AxisY.MinorGrid.LineColor = Color.LightGray;

area.AxisY2.Title = "[AU]";
area.AxisY2.TitleFont = font;
area.AxisY2.Minimum = 0.98;
area.AxisY2.Maximum = 1.03;
area.AxisY2.Interval = 0.005;

for (DateTimeOffset date = start; date &lt; end; date += new TimeSpan(1, 0, 0))
{
    double oad = date.UtcDateTime.ToOADate();

    ra.Points.AddXY(oad, CelestialPositionCalculation.Calc(date, CelestialPositionCalculation.Type.SunRa) % 24);
    dec.Points.AddXY(oad, CelestialPositionCalculation.Calc(date, CelestialPositionCalculation.Type.SunDec));
    au.Points.AddXY(oad, CelestialPositionCalculation.Calc(date, CelestialPositionCalculation.Type.SunAu));
}

{
    DateTimeOffset date;

    date = new DateTimeOffset(new DateTime(2020, 3, 20, 12, 50, 0));
    marker.Points.Add(new DataPoint(date.UtcDateTime.ToOADate(),
        CelestialPositionCalculation.Calc(date, CelestialPositionCalculation.Type.SunDec))
    { Label = "春分の日", });

    date = new DateTimeOffset(new DateTime(2020, 6, 21, 6, 44, 0));
    marker.Points.Add(new DataPoint(date.UtcDateTime.ToOADate(),
        CelestialPositionCalculation.Calc(date, CelestialPositionCalculation.Type.SunDec))
    { Label = "夏至", });

    date = new DateTimeOffset(new DateTime(2020, 9, 22, 22, 31, 0));
    marker.Points.Add(new DataPoint(date.UtcDateTime.ToOADate(),
        CelestialPositionCalculation.Calc(date, CelestialPositionCalculation.Type.SunDec))
    { Label = "秋分の日", });

    date = new DateTimeOffset(new DateTime(2020, 12, 21, 19, 2, 0));
    marker.Points.Add(new DataPoint(date.UtcDateTime.ToOADate(),
        CelestialPositionCalculation.Calc(date, CelestialPositionCalculation.Type.SunDec))
    { Label = "冬至", });
}

Bitmap bmp = new Bitmap(chart.Width, chart.Height);
chart.DrawToBitmap(bmp, new Rectangle() { Size = bmp.Size });
bmp.Save("log.png");

