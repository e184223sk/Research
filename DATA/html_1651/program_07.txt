
@page "/fetchdata"
@using BlazorSignIn.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject HttpClient Http
@inject IAccessTokenProvider AuthenticationService
@inject NavigationManager Navigation

@attribute [Authorize]
&lt;h1&gt;Weather forecast&lt;/h1&gt;

&lt;p&gt;This component demonstrates fetching data from the server.&lt;/p&gt;

@if (forecasts == null)
{
    &lt;p&gt;&lt;em&gt;Loading...&lt;/em&gt;&lt;/p&gt;
}
else
{
    &lt;table class="table"&gt;
        &lt;thead&gt;
            &lt;tr&gt;
                &lt;th&gt;Date&lt;/th&gt;
                &lt;th&gt;Temp. (C)&lt;/th&gt;
                &lt;th&gt;Temp. (F)&lt;/th&gt;
                &lt;th&gt;Summary&lt;/th&gt;
            &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            @foreach (var forecast in forecasts)
            {
                &lt;tr&gt;
                    &lt;td&gt;@forecast.Date.ToShortDateString()&lt;/td&gt;
                    &lt;td&gt;@forecast.TemperatureC&lt;/td&gt;
                    &lt;td&gt;@forecast.TemperatureF&lt;/td&gt;
                    &lt;td&gt;@forecast.Summary&lt;/td&gt;
                &lt;/tr&gt;
            }
        &lt;/tbody&gt;
    &lt;/table&gt;
}

@code {
    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        var tokenResult = await AuthenticationService.RequestAccessToken();
        if (tokenResult.TryGetToken(out var token))
        {
            Http.DefaultRequestHeaders.Add("Authorization", $"Bearer {token.Value}");
            forecasts = await Http.GetJsonAsync&lt;WeatherForecast[]&gt;("WeatherForecast");
        }
        else
        {
            Navigation.NavigateTo(tokenResult.RedirectUrl);
        }
    }
}

