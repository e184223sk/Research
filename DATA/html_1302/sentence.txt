More than 1 year has passed since last update.C# 8と.NET Core 3.1でPEファイルの文字列リソースをすべて取得するサンプルコードです。同様のコードはQiitaや海外サイトでも公開されていますが、自身の学習のために作成しています。LoadLibraryEx関数の戻り値はHMODULE型のハンドルであり、使用後はFreeLibrary関数で解放する必要があります。C#ではusing構文とSafeHandleの派生クラスにより確実な解放を保証できるため、ここではSafeHandleを継承したクラスを作成しています。このハンドルを解放しなかった場合、プロセスの終了までライブラリがメモリ存在したままとなります。なお、同じHMODULE型を返す関数でもGetModuleHandle関数の戻り値は基本的に解放してはいけません。LoadLobraryEx関数の呼び出し時にはいくつかのフラグを指定することができます。今回は既定の場所からPEファイルを読み込み、そのリソースのみが必要なので以下のフラグを指定しています。LoadResource関数とLockResource関数は後方互換性のために別々に存在します。Windows 10ではどちらも同じ値を返します。戻り値はプロセスの終了時に自動的に解放されます（Microsoft Docs）。System.Runtime.InteropServices名前空間のMarshalクラスを使用してポインタから整数や文字列を読み込むことができます。16ビット整数はMarshal.ReadInt16、UTF-16文字列の読み込みはMarshal.PtrToStringUniです。RT_STRING型リソースは各IDに長さ（UInt16、2バイト）とその長さのUTF-16文字列（Char型）のペアが1～32個含まれます。各IDに含まれる文字列の個数は記録されていませんが、SizeofResource関数で取得したバイト数まで上記ペアを読み込むことですべての文字列を取得できます。


