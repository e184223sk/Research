
using System.Threading.Tasks;
using Grpc.Core;
using Grpc.Core.Interceptors;

public class CipherInterceptor : Interceptor
{
    public override async Task&lt;TResponse&gt; UnaryServerHandler&lt;TRequest, TResponse&gt;(
        TRequest request,
        ServerCallContext context,
        UnaryServerMethod&lt;TRequest, TResponse&gt; continuation
    ) =&gt; Encrypt(await base.UnaryServerHandler(Decrypt(request), context, continuation));

    public override AsyncUnaryCall&lt;TResponse&gt; AsyncUnaryCall&lt;TRequest, TResponse&gt;(
        TRequest request,
        ClientInterceptorContext&lt;TRequest, TResponse&gt; context,
        AsyncUnaryCallContinuation&lt;TRequest, TResponse&gt; continuation
    ) {
        var call = base.AsyncUnaryCall(Encrypt(request), context, continuation);
        return new AsyncUnaryCall&lt;TResponse&gt;(
            call.ResponseAsync.ContinueWith(x =&gt; Decrypt(x.Result)),
            call.ResponseHeadersAsync,
            call.GetStatus,
            call.GetTrailers,
            call.Dispose
        );
    }

    private T Encrypt&lt;T&gt;(T data)
    {
        /* 略 */
    }

    private T Decrypt&lt;T&gt;(T data)
    {
        /* 略 */
    }
}

