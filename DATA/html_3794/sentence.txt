More than 1 year has passed since last update.MagicOnion についてはこちらをご覧ください。
今回は MagicOnion で独自暗号化処理を追加してみようと思います。独自暗号を挟む用途としては、ソーシャルゲームなどにおいてユーザー本人によるチート行為への対策などを想定しています。MagicOnion において、暗号化のような MessagePack の byte 列に変換した後にすべき処理は gRPC の Interceptor という仕組みを使うことで実現できます。
Interceptor を使うとそれぞれの RPC の直前・直後に処理を挟むことができるようになります。
これは gRPC の機能なので、以下の内容は MagicOnion のみに限らず、素の gRPC でも使える内容になります。自作の Interceptor は Grpc.Core.Interceptors.Interceptor クラスを継承します。
サーバ側・クライアント側それぞれについて、RPC 種類ごとにメソッドが用意されているので、必要なものだけを override して実装することになります。以下では Unary の書き方のみ記載します。以下のようにリクエスト、レスポンスそれぞれに処理を挟むことができます。クライアント側は戻り値が Task ではないので、レスポンスに処理を挟むのが若干面倒になっています。
一旦 AsyncUnaryCall を受け取ってから、新しい AsyncUnaryCall に諸々をコピーして返す必要があります。gRPC サーバの起動時、 Services に Interceptor を挟んだ ServerServiceDefinition を渡すことで機能するようになります。MagicOnionClient.Create の際に Channel そのままではなく Interceptor を挟んだ CallInvoker を渡すことで機能するようになります。ようやく本題の暗号化ですが、上記のとおりに実装するだけのでそのままコードを載せます。
※暗号アルゴリズムについてはどうでもいいので省略します。このクラスをサーバ・クライアントで共有することで、同じ暗号アルゴリズムを使っていることが簡単に保証できていい感じです。MagicOnion でも gRPC の Interceptor を使うことができます。今回はそれを用いて独自の暗号化処理を挟みました。


