using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Collections.Generic;
using System.Collections;
using System.Linq;

namespace UnitTestProject1
{
    [TestClass]
    public class UnitTest1
    {
        [TestMethod]
        public void TestMethod1()
        {
            var splitted = EnumerateNumber().Take(77).Divide(10);

            foreach (IEnumerable&lt;int&gt; chunk in splitted)
            {
                Console.WriteLine(string.Join(", ", chunk));
            }

            /* Output

            0, 1, 2, 3, 4, 5, 6, 7, 8, 9
            10, 11, 12, 13, 14, 15, 16, 17, 18, 19
            20, 21, 22, 23, 24, 25, 26, 27, 28, 29
            30, 31, 32, 33, 34, 35, 36, 37, 38, 39
            40, 41, 42, 43, 44, 45, 46, 47, 48, 49
            50, 51, 52, 53, 54, 55, 56, 57, 58, 59
            60, 61, 62, 63, 64, 65, 66, 67, 68, 69
            70, 71, 72, 73, 74, 75, 76

            */
        }

        private static IEnumerable&lt;int&gt; EnumerateNumber()
        {
            int n = 0;
            while (true)
            {
                yield return n++;
            }
        }
    }

    public static class hoge
    {
        private class Limited&lt;T&gt; : IEnumerable&lt;T&gt;
        {
            int last = 0;
            IEnumerator&lt;T&gt; e;

            public Limited(IEnumerator&lt;T&gt; e, int limit)
            {
                this.e = e;
                this.last = limit;
            }

            public IEnumerator&lt;T&gt; GetEnumerator()
            {
                do
                {
                    yield return e.Current;
                    last -= 1;
                }
                while (0 &lt; last &amp;&amp; e.MoveNext());
            }

            IEnumerator IEnumerable.GetEnumerator()
            {
                throw new NotImplementedException();
            }
        }

        public static IEnumerable&lt;IEnumerable&lt;T&gt;&gt; Divide&lt;T&gt;(this IEnumerable&lt;T&gt; a, int _size)
        {
            var e = a.GetEnumerator();

            while (e.MoveNext()) yield return new Limited&lt;T&gt;(e, _size);
        }
    }
}

