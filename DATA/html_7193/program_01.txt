
using System;
using System.Collections.Generic;
using System.Linq;

namespace ZunDokoKiyoshi
{
    static class Enumerable
    {
        private static readonly string EmptyExceptionMessage = "要素が1つ以上含まれている必要があります。";

        /// &lt;summary&gt;
        /// シーケンスからランダムに要素を選択して返すことを繰り返します。
        /// &lt;/summary&gt;
        /// &lt;typeparam name="TSource"&gt;&lt;paramref name="source"/&gt;の要素の型。&lt;/typeparam&gt;
        /// &lt;param name="source"&gt;要素を返すシーケンス。&lt;/param&gt;
        /// &lt;returns&gt;&lt;paramref name="source"/&gt;からランダムに選択された要素を含む&lt;see cref="IEnumerable{T}"/&gt;。&lt;/returns&gt;
        public static IEnumerable&lt;TSource&gt; RepeatRandomChoice&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source)
        {
            if (source == null)
            {
                throw new ArgumentNullException(nameof(source));
            }
            if (!source.Any())
            {
                throw new ArgumentException(EmptyExceptionMessage, nameof(source));
            }

            // 要素取得時ではなく関数呼び出し時に上記の引数チェックが行われるように、
            // yield を用いた処理は別関数にする。
            return RepeatRandomChoiceInternal(source);
        }

        private static IEnumerable&lt;TSource&gt; RepeatRandomChoiceInternal&lt;TSource&gt;(IEnumerable&lt;TSource&gt; source)
        {
            var items = source as IReadOnlyList&lt;TSource&gt; ?? source.ToArray();
            var random = new Random();

            while (true)
            {
                var index = random.Next(items.Count);
                yield return items[index];
            }
        }

        /// &lt;summary&gt;
        /// 指定されたパターンどおりに要素が現れるまで、シーケンスから要素を返します。
        /// &lt;/summary&gt;
        /// &lt;typeparam name="TSource"&gt;&lt;paramref name="source"/&gt;の要素の型。&lt;/typeparam&gt;
        /// &lt;param name="source"&gt;要素を返すシーケンス。&lt;/param&gt;
        /// &lt;param name="pattern"&gt;パターン。&lt;/param&gt;
        /// &lt;returns&gt;指定されたパターンが現れるまでに出現する入力シーケンスの要素を含む&lt;see cref="IEnumerable{T}"/&gt;。&lt;/returns&gt;
        public static IEnumerable&lt;TSource&gt; TakeUntilMatchingPattern&lt;TSource&gt;(
            this IEnumerable&lt;TSource&gt; source, IEnumerable&lt;TSource&gt; pattern)
        {
            if (source == null)
            {
                throw new ArgumentNullException(nameof(source));
            }
            if (pattern == null)
            {
                throw new ArgumentNullException(nameof(pattern));
            }
            if (!pattern.Any())
            {
                throw new ArgumentException(EmptyExceptionMessage, nameof(source));
            }

            // 要素取得時ではなく関数呼び出し時に上記の引数チェックが行われるように、
            // yield を用いた処理は別関数にする。
            return TakeUntilMatchingPatternInternal(source, pattern);
        }

        private static IEnumerable&lt;TSource&gt; TakeUntilMatchingPatternInternal&lt;TSource&gt;(
            IEnumerable&lt;TSource&gt; source, IEnumerable&lt;TSource&gt; pattern)
        {
            var patternLength = pattern.Count();
            var queue = new Queue&lt;TSource&gt;(patternLength);

            foreach (var item in source)
            {
                yield return item;

                if (queue.Count &gt;= patternLength)
                {
                    queue.Dequeue();
                }
                queue.Enqueue(item);

                if (queue.SequenceEqual(pattern))
                {
                    yield break;
                }
            }
        }
    }
}

