

/// &lt;summary&gt;
/// byte[]からbase32に変換する
/// &lt;/summary&gt;
/// &lt;param name="bytes"&gt;&lt;/param&gt;
/// &lt;param name="withPadding"&gt;padding が必要かどうか&lt;/param&gt;
/// &lt;returns&gt;&lt;/returns&gt;
public static string ToBase32String(byte[] bytes, bool withPadding = true)
{
    System.Text.StringBuilder builder = new System.Text.StringBuilder();
    // Base32 は1文字5bitなので 5byte ずつとりだして8文字ずつに変換する
    for ( int i = 0, count = bytes.Length; i &lt; count; i += DIGIT)
    {
        // 40bitに統合
        ulong merge = 0;
        int parseByteCount = 0;
        for (int j = 0; j &lt; DIGIT; j++)
        {
            // 範囲外参照チェック
            if( j+i &gt;= count )
            {
                break;
            }
            // 4-j ビットシフトが必要
            merge |= ( (ulong)bytes[i+j] &lt;&lt; (BYTE_LENGTH * (DIGIT-j-1)) );
            parseByteCount++;
        }
        // 5bit 毎に分割
        byte b;
        for (int j = 0; j &lt; BYTE_LENGTH; j++)
        {
            b = (byte)((merge &gt;&gt; DIGIT * (BYTE_LENGTH-j-1) ) &amp; 0x1F);
            // 取り出して来た有効byteのところまで変換をかける
            if( j &lt; parseByteCount * BYTE_LENGTH / DIGIT +1 )
            {
                builder.Append( encode_table[b]);
            }
        }
    }
    if( withPadding )
    {
        // 4文字ずつ分割して不足分は = で埋める
        int lastWordLen = builder.Length % PADDING_UNIT;
        for (int i = 0; i &lt; PADDING_UNIT - lastWordLen; i++)
        {
            builder.Append(PADDING);
        }
    }

    return builder.ToString();
}

