using System;
using System.Collections.Generic;
using System.Linq;

namespace permutations
{
    class Program
    {
        static List&lt;List&lt;T&gt;&gt; Permutations&lt;T&gt;(List&lt;T&gt; src, int n)
        {
            // nは1以上かつsrcの長さよりも短い必要がある。
            int len = src.Count;
            if (!(0 &lt; n &amp;&amp; n &lt;= len))
            {
                throw new ArgumentOutOfRangeException();
            }

            var permutations = new List&lt;List&lt;T&gt;&gt;();
            var queue = new Queue&lt;List&lt;int&gt;&gt;(Enumerable.Range(0, len).Select(i =&gt; new List&lt;int&gt;() { i }));
            while (queue.Any())
            {
                var indexes = queue.Dequeue();

                if (indexes.Count == n)
                {
                    permutations.Add(indexes.Select(index =&gt; src[index]).ToList());
                    continue;
                }

                for (int index = 0; index &lt; len; index++)
                {
                    if (indexes.Contains(index))
                    {
                        continue;
                    }

                    var newIndexes = new List&lt;int&gt;(indexes);
                    newIndexes.Add(index);
                    queue.Enqueue(newIndexes);
                }
            }

            return permutations;
        }
    }
}

