
[SerializeField, ValueDropdown("ReferenceDropDownEditorOnly"), OnValueChanged("ReferenceValueChangedEditorOnly"), LabelText("References")] string referenceGuidEditorOnly;

IEnumerable ReferenceDropDownEditorOnly()
{
    return GetAllAssetEntrys(targetAssetGroupGuidsEditorOnly)
            .Select(x =&gt; new ValueDropdownItem(x.AssetPath, x.guid));
}

void ReferenceValueChangedEditorOnly(string guid)
{
    var entrys = GetAllAssetEntrys(targetAssetGroupGuidsEditorOnly);
    var item = entrys.FirstOrDefault(x =&gt; x.guid == guid);

    if (item != default)
    {
        references = new AssetReferenceGameObject(item.guid);
        UpdatePreviewAssetEditorOnly();
    }
}

/// &lt;summary&gt;
/// 全エントリーを取得
/// &lt;/summary&gt;
/// &lt;returns&gt;The asset entrys editor only.&lt;/returns&gt;
/// &lt;param name="groupFilterGuids"&gt;Group filter.&lt;/param&gt;
public static List&lt;AddressableAssetEntry&gt; GetAllAssetEntrys(string[] groupFilterGuids = null)
{
    var setting = AddressableAssetSettingsDefaultObject.GetSettings(false);
    var entrys = new List&lt;AddressableAssetEntry&gt;();

    if (setting != default)
    {
        foreach (var group in setting.groups)
        {
            if (groupFilterGuids != null
                &amp;&amp; groupFilterGuids.Length &gt; 0
                &amp;&amp; !groupFilterGuids.Any(guid =&gt; guid == group.Guid))
            {
                continue;
            }

            var _entrys = new List&lt;AddressableAssetEntry&gt;();
            group.GatherAllAssets(_entrys, false, true, false);
            entrys.AddRange(_entrys);
        }
    }

    return entrys;
}

