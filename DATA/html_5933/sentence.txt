More than 3 years have passed since last update.複数のスレッドから、単一のTextWriterオブジェクトを使用してファイル出力しようとすると、通常例外が発生する。これを実行すると発生する例外(VS2017)
この例外メッセージにあるとおり、.NETにはという、TextWriter/TextReaderを受け取って、排他制御をおこなうラッパにくるんで返してくれる静的メソッドが用意されている。
通常のファイル入出力を複数のスレッドからおこなう場合、こうした機能を利用する。では、Consoleクラスを使ったはどうだろうか。
標準入力や標準出力などに用意されているオブジェクトについて、プログラマが個別に排他制御をおこなう必要があるだろうか。通常の場合、Console.Inは標準入力を、Console.Outは標準出力を、Console.Errorは標準エラー出力を表す。
ConsoleクラスにはSetIn(TextReader), SetOut(TextWriter), SetError(TextWriter)という静的メソッドが用意されており、InやOut,Errorプロパティの中身を入れ替えることができる。MSDNによれば、By default, the value of the In property is a System.IO.TextReader object that represents the keyboard, and the values of the Out and Error properties are System.IO.TextWriter objects that represent a console window. However, you can set these properties to streams that do not represent the console window or keyboard; for example, you can set these properties to streams that represent files. To redirect the standard input, standard output, or standard error stream, call the Console.SetIn, Console.SetOut, or Console.SetError method, respectively. I/O operations that use these streams are synchronized, which means that multiple threads can read from, or write to, the streams. This means that methods that are ordinarily asynchronous, such as TextReader.ReadLineAsync, execute synchronously if the object represents a console stream.と、In, Out, Errorといったプロパティ経由の入出力が同期されることが書かれている。ソースをあたると、これらのプロパティに最初にアクセスしたときに、標準入力や標準出力をTextReader.Synchronized(TextReader)静的メソッドやTextWriter.Synchronized(TextWriter)静的メソッドに渡し、排他制御用のラッパにくるんだものを返すようになっている。
また、Console.SetIn(TextReader), Console.SetOut(TextWriter), Console.SetError(TextWriter)の内部でもやはり、渡されたTextReaderオブジェクトあるいはTextWriterオブジェクトを排他制御用のラッパにくるんでから格納するようになっている。よって、Console.In, Console.Out, Console.Error経由の入出力にわざわざ排他制御を付け足す必要はない。なお、のように、わざわざ排他制御でラッピングされたTextWriterを渡してあげても、二重にラッパが適用されることはない。TextReader.Synchronized(TextReader)静的メソッドやTextWriter.Synchronized(TextWriter)静的メソッドは排他制御用のラッパとしてSyncTextWriter/SyncTextReaderクラスを使用するが、このクラスのオブジェクトを渡されたときに限り、渡されたオブジェクトをそのまま返すようになっている。はConsole.In.Read(), Console.In.ReadLine()のショートカットに過ぎない。同様に、はConsole.Out.Write(...), Console.Out.WriteLine(...)のショートカットに過ぎない。そのため、Console.Read()やConsole.Write(...)での入出力にも、わざわざ排他制御を付け足す必要はない。Consoleクラスを使った入出力には、プログラマが自分でスレッド間の排他制御をおこなう必要はない。.NETの機能にまかせよう。http://referencesource.microsoft.com/
https://msdn.microsoft.com/ja-jp/library/system.console(v=vs.110).aspx
https://stackoverflow.com/questions/4812508/is-console-writeline-thread-safe


