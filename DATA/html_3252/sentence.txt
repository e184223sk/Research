More than 1 year has passed since last update.こんにちはゆずです。@Yuzu_Unityこの記事はUnityのコルーチンを扱える人が
UniTask(UniRx.async)を扱えるようになればいいと思って書いています。
非同期処理以外については触れていません。
UniRxは全く関係ないです。
この記事ではUniRxについては記述しません。複数フレーム待つ動作を頻繁に使いたい人？
セーブデータなどのIO関係を触る人
コルーチンに戻り値が欲しいと思っている人
C#7.0で色々使えるようになりたい人C#7.0環境   IDEであればVisualStudio2017 Rider等Unity2018.3以上GitHubでUniTask(UniRx.async)
https://github.com/Cysharp/UniTask
もしくは　AssetStoreでUniRxダウンロード(現在はGitHub版推奨　UniRxとUniTaskは分離されるみたいです。)
https://assetstore.unity.com/packages/tools/integration/unirx-reactive-extensions-for-unity-17276
※UniRxとは別物ですが同じパッケージに入っている.NET 4.xモードにする（Player Settings→Other Settings）
C#7.0でasync/await Taskを扱えるようになったが,
Unityが公式でサポートしておらずこのままではコルーチンの代わりとして扱えないので
それを解消するライブラリです。
つまり逆に入れないと思ったように動かないと思ったほうがいい⁉
（Taskがメインスレッドで動いていないので、メインスレッドで動くTexture2D.EncodeToPNGなどは動作しませんでした。）書き方の3つ
IEnumerator と　async void　が大体同じです。ほとんど変わらないですね
IEnumeratorがasync
yield returnが await
という感じですねこれではメリットがあまりわからないので複数フレーム待機、戻り値ありにしてみましょう複数フレームはコルーチンだと1フレームのループ処理になり
無駄な処理が挟まれて結構重かったりしますね。UniTaskの最大のデメリットですコルーチンではStopCoroutine()もしくは
コンポーネントをOFFで止まることができました。UniTaskはコンポーネントをOFFにしても止まりません！！
なのでゲームオブジェクトを消しても動きつづけます。キャンセル処理に関してはここを参照してください
https://qiita.com/toRisouP/items/4445b6b9bf00e49eb147#%E3%82%AD%E3%83%A3%E3%83%B3%E3%82%BB%E3%83%AB%E5%87%A6%E7%90%86キャンセル処理するならコルーチン現役ですね…停止が面倒なので
普通のゲーム制作のみであればコルーチンのほうがいいが
複数フレーム待つ動作を頻繁に使うのであればUniTaskセーブデータ、AssetBundleのダウンロード書き込み等
IO関係はUniTaskを使うほうがC#に用意されている非同期系が使えるので良い要は併用しようという感じですかね！また、ここには書いていませんがマルチスレッドプログラムもかけるのでそこに関してはゲームでも実用できるかと思います。
C#jobsystemの制約は少しめんどくさいですしね


