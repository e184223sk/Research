
public static bool TryAddNew&lt;TKey, TValue&gt;(this IDictionary&lt;TKey, TValue&gt; dict, TKey key) where TValue : new()
    =&gt; dict.TryAdd(key, _ =&gt; new TValue());

public static bool TryAddDefault&lt;TKey, TValue&gt;(this IDictionary&lt;TKey, TValue&gt; dict, TKey key)
    =&gt; dict.TryAdd(key, default(TValue));

public static bool TryAdd&lt;TKey, TValue&gt;(this IDictionary&lt;TKey, TValue&gt; dict, TKey key, TValue addValue)
{
    bool canAdd = !dict.ContainsKey(key);

    if (canAdd)
        dict.Add(key, addValue);

    return canAdd;
}

public static bool TryAdd&lt;TKey, TValue&gt;(this IDictionary&lt;TKey, TValue&gt; dict, TKey key, Func&lt;TKey, TValue&gt; addValueFactory)
{
    bool canAdd = !dict.ContainsKey(key);

    if (canAdd)
        dict.Add(key, addValueFactory(key));

    return canAdd;
}

