
public static IEnumerable&lt;KeyValuePair&lt;TKey, TValue&gt;&gt; DistinctByKey&lt;TKey, TValue&gt;(
    this IEnumerable&lt;KeyValuePair&lt;TKey, TValue&gt;&gt; source)
    =&gt; source.Distinct(OnlyKeyComparer&lt;TKey, TValue&gt;.Instance);

public class OnlyKeyComparer&lt;Tkey, TValue&gt; : IEqualityComparer&lt;KeyValuePair&lt;Tkey, TValue&gt;&gt;
{
    public static OnlyKeyComparer&lt;Tkey, TValue&gt; Instance { get; } = new OnlyKeyComparer&lt;Tkey, TValue&gt;();

    public bool Equals(KeyValuePair&lt;Tkey, TValue&gt; x, KeyValuePair&lt;Tkey, TValue&gt; y)
        =&gt; EqualityComparer&lt;Tkey&gt;.Default.Equals(x.Key, y.Key);

    public int GetHashCode(KeyValuePair&lt;Tkey, TValue&gt; obj) =&gt; obj.Key.GetHashCode();
}

