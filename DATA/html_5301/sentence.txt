C#のDictionaryは便利なクラスですが、メソッド関係はけっこう貧弱です。
様々なLINQ拡張メソッドが含まれているInteractive Extensions(Ix.NET)にもDictionary関係はありません。
Dictionaryに値が含まれているかどうかの条件分岐が絡むことが多いため、
ちょっとした操作で3行ぐらい消費してしまいます。そこで定型的な処理をまとめた、C#のDictionaryをもっと使いやすくする拡張メソッドを紹介します。各拡張メソッドの説明の前に、デモで使用するコードについて説明します。
ソース配列の生成メソッドと式木を使ってDictionaryを見やすくコンソール出力するメソッドです。
（参考）式木を使った簡単なPrintデバッグ出力こんな感じで動きます。これを書いたことのある人は多いのではないでしょうか。
指定したKeyがDictionaryにあれば、そのValueを返し、ないならValue型のDefault値を返します。指定したKeyがDictionaryにあれば、何もせず、ないなら指定したValueと共に追加します。
追加を実行したかを返します。ちょっと名前の違う2つのメソッドの違いTryAddの2つのオーバーロードの使い分けAddやインデックスでの入力との違いは指定したKeyがDictionaryにある時の挙動です。
Addで例外発生するのがいやな時に使うことが多いと思います。命名がイマイチ気に入ってない。。。
指定したKeyがDictionaryにあれば、そのValueを返し、ないなら値を追加した上で返します。
キャッシュとしてDictionaryを使うときなどに有用です。
TryAddと値の取得を組み合わせたものです。1つのKeyValuePairを追加します。
あるDictionaryの要素をLINQなどで加工した後に、KeyValuePairのまま、別のDictionaryに追加したい時などに使用します。指定したKeyがDictionaryにあれば、指定したデリゲートでValueを更新します、ないなら指定したValueと共にKeyを追加します。
ConcurrentDictionaryの同名のメソッドをまねたものです。複数のKeyValuePairを追加します。
DicitionaryをLINQで加工した後などをまるごと追加したい場合に使用します。DictionaryのRemoveメソッドはKeyを指定して要素を削除します。
このメソッドはValueを指定して一致する要素をすべて削除します。ConcurrentDictionaryにある同名のメソッドをまねたものです。
指定したKeyを削除しようと試みます。削除に成功した場合はout 引数に削除前の値が入ります。Valueはそのままで、Keyだけ差し替えます。keyとValueを指定してKeyValuePairを生成する方法と
TupleとValueTupleから変換するメソッドです。
直接 new KeyValuePair&lt;...&gt;(...とするよりも型名を書く量が減ります。こんどは逆方向のKeyValuePairからTupleとValueTupleに変換します。Dictionaryを複製（ディープコピー）したい時やLINQで加工した後に再度Dictionaryにしたい時に使います。Keyはそのままで、ValueのみSelectで加工したい時に使用します。
通常のSelectと同じでIndex付きのオーバーロードもあります。
最後に前述のToDictionary()メソッドを使うことで直接Dictionaryに戻せます。SelectValueのKey版です。KeyとValueを入れ替えたDictionaryを返します。
デモにもあるように、Valueが重複していると例外が発生します。LINQで加工した後に、Keyが重複した時などはそのままDictionaryにするとKeyの重複で例外が発生してしまうので、
このDistinctByKeyで重複を除きます。
Keyが重複していたら、先の先にあるValueが使用されます。内部でKeyの一致を判定するIEqualityComparer継承クラスを定義して使用しています。2つのDictionaryを合流させた1つのDictionaryを返します。オーバーロード2つのうち、引数が少ない方はKeyが重複していたら、先のDictionaryのValueが使用されます。
もう1つは重複した場合の挙動を細かく制御するためのデリゲートを受け取ります。LINQの中でも強力そうだけど、シグネチャがいかつくて、とっつきづらいJoinのKeySelctorをDictionaryのKeyに固定したものです。
Mergeは基本的に重複がない2つの同型のDictionary(KeyValuePairコレクション)を1つに加工するものです。
JoinByKeyは2つのDictionaryからKeyが共通な要素を抜き出し、1つに加工するものです。
Mergeと違い2つの入力と出力のValueの型は同じである必要がありません。多くのメソッドで汎用性を持たせるためにIDictionary&lt;TKey, TValue&gt;を使用していますが、パフォーマンス面ではDictionary&lt;TKey, TValue&gt;を使用したほうが良いです。参考：http://www.nimaara.com/2016/03/06/beware-of-the-idictionary-tkey-tvalue/こんなに長くなる予定じゃなかった。
こんなのもあるかも、これがあるならあれも、とかやってたらこんな量に。VisualStudio2017
.NET Framework 4.7
C#7


