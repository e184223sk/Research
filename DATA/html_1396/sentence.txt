More than 1 year has passed since last update.この記事では、Microsoft 社が公開している Build an app using SQL Server の内容に従い、SQL Server を使用した C# アプリを作成します。第30回 SQL Server 2019 勉強会@JSSUG (2020/5/16) のセッション資料です。ウェブ上では、ホスト OS に SQL Server 2017 Developer 以上をインストール とあります。
こちら のサイトより、SQL Server 2019 Developer インストーラーをダウンロードし、インストールを行ってください。筆者は、WSL2 (Ubuntu 18.04 LTS) 上にインストールした Docker 上に、SQL Server 2019 on Linux をインストールして利用しました。docker-compose.yaml については、以下の GitHub リポジトリを参照してください。構築後、ifconfig コマンドを実行し、eth0 の IP アドレスを確認してください。こちら のサイトより、Visual Studio 2019 Community インストーラーをダウンロードし、インストールを行ってください。ここでは、以下、2 つのシンプルな C# アプリを作成します。C# コンソールアプリを新規作成します。

Visual Studio で新しい C# Console Application プロジェクトを作成しました。
作成したプロジェクト内にある Program.cs というファイルを開き、Program.cs の内容を書き換えます。
ユーザー名とパスワードは自分のものに置き換えることを忘れないでください。
書き換えた後、ファイルを保存します。その後、F5 キーを押してプロジェクトをビルドして実行します。これで、SQL Server に接続を行うコンソールアプリができました。ただし、このアプリでは単にデータベースへの接続だけを行っているだけで、クエリは実行していません。
次に、Program.cs 内にコードを追加して、データベースやテーブルの作成、INSERT/UPDATE/DELETE/SELECT などのクエリを実行するように変更します。
ユーザー名とパスワードは自分のものに置き換えることを忘れないでください。
書き換えた後、ファイルを保存します。その後、F5 キーを押してプロジェクトをビルドして実行します。これで、Windows上の.NET Frameworkを使って、初めて C# + SQL Server アプリを作成できました。次は、ORM を使って C# アプリを作成します。C# コンソールアプリを新規作成します。プロジェクトを作成したら、Entity Framework の依存関係をプロジェクトに追加します。パッケージマネージャコンソールを閉じます。これで、必要なEntity Frameworkの依存関係がプロジェクトに追加されました。このサンプルでは、2つのテーブルを作成します。1つ目は「ユーザー」に関するデータを保持し、もう1つは「タスク」に関するデータを保持するものです。User.cs を作成します。User クラスを定義します。このクラスは、User テーブルに紐づくモデルのクラスです。
書き換えた後、ファイルを保存して閉じます。
この時点では、Task クラスがないためコンパイルエラーとなりますが、問題ありません。Task.cs を作成します。Task クラスを定義します。このクラスは、Task テーブルに紐づくモデルのクラスです。
書き換えた後、ファイルを保存して閉じます。EFSampleContext.cs を作成します。EFSampleContext クラスを定義します。このクラスは、Entity Framework を使用して .NET オブジェクトを使用してデータのクエリ、挿入、更新、および削除を行うためのクラスです。User クラスと Task クラスを使用しています。
書き換えた後、ファイルを保存して閉じます。最後に Program.cs を更新します。これまで作成したクラスを使用するための設定を行います。
ユーザー名とパスワードを自分のものに更新することを忘れないでください。
保存してファイルを閉じます。その後、F5 キーを押してプロジェクトをビルドして実行します。これで、2つ目の C# アプリの作成が終わりました。最後に、SQL Server の Columnstore 機能を使って C# アプリを高速化する方法について学びます。これまでで基本的なことは理解できたと思います。最後は、SQL Server を使用してアプリをより良くする方法を見てみます。このモジュールでは、カラムストアインデックスの簡単な例と、カラムストアインデックスがどのようにデータ処理速度を向上させるかを確認します。カラムストアインデックスは、従来の列ストアインデックスに比べて、分析ワークロードでは最大 100 倍のパフォーマンス向上、データ圧縮では最大 10 倍のパフォーマンス向上を実現できます。注意！ Service Pack 1 for SQL Server 2016 の導入により、アプリケーション開発に関連するデータベース エンジンの機能が、SQL Server のすべてのエディション（Express から Enterprise まで）で利用できるようになりました。これには、アプリケーションのスループット、レイテンシ、セキュリティーを大幅に向上させる技術革新が含まれています。例としては、このチュートリアルで使用されているインメモリカラムストア、インメモリ OLTP、データ圧縮、テーブルパーティショニング、PolyBase との Hadoop 統合、常時暗号化、行レベルのセキュリティ、データのマスキングなどがあります。お楽しみください。カラムストアインデックスの機能を確認するために、500 万行のサンプルデータベースとサンプルテーブルを作成し、カラムストアインデックスを追加する前と後の簡単なクエリを実行する C# アプリケーションを作成します。C# コンソールアプリを新規作成します。Visual Studio で新しい C# Console Application プロジェクトを作成しました。Program.cs の内容を書き換えます。
ユーザー名とパスワードは自分のものに置き換えることを忘れないでください。
保存してファイルを閉じます。その後、F5 キーを押してプロジェクトをビルドして実行します。Linux、Windows または Docker、Azure SQL Database および Azure SQL Data Warehouse で実行されている SQL Server に対して、VS Code 用の SQL Server 拡張機能を使用して接続を行うことができます。豊富な T-SQL 言語サービス (IntelliSense やキーワード補完など) を利用でき、クエリを入力しながらクエリ実行結果を見ることができます。以上で、「Windows上でSQL Serverを使用してC#アプリを作成する」は終了です。Build an app using SQL Server には、他言語での SQL Server アプリを作成するチュートリアルがあります。ぜひ、他の言語でも試してみてください。


