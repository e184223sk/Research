
using System;
using System.Linq;
using System.Data.SqlClient;
using System.Collections.Generic;

namespace SqlServerEFSample
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("** Entity Framework と SQL Server を使用した C# CRUD のサンプル **\n");
            try
            {
                // 接続文字列を構築
                SqlConnectionStringBuilder builder = new SqlConnectionStringBuilder();
                builder.DataSource = "localhost";     // 接続先の SQL Server インスタンス
                builder.UserID = "sa";                // 接続ユーザー名
                builder.Password = "your_password";   // 接続パスワード
                builder.InitialCatalog = "EFSampleDB";// 接続するデータベース(ここは変えないでください)
                // builder.ConnectTimeout = 60000;    // 接続タイムアウトの秒数(ms) デフォルトは 15 秒

                using (EFSampleContext context = new EFSampleContext(builder.ConnectionString))
                {
                    Console.WriteLine("C# のクラスからデータベーススキーマを作成しました。");

                    // Create デモ: ユーザーインスタンスを作成し、データベースに保存
                    User newUser = new User { FirstName = "Anna", LastName = "Shrestinian" };
                    context.Users.Add(newUser);
                    context.SaveChanges();
                    Console.WriteLine("\n作成されたユーザー: " + newUser.ToString());

                    // Create デモ: タスクインスタンスを作成し、データベースに保存
                    Task newTask = new Task() { Title = "Ship Helsinki", IsComplete = false, DueDate = DateTime.Parse("04-01-2017") };
                    context.Tasks.Add(newTask);
                    context.SaveChanges();
                    Console.WriteLine("\n作成されたタスク: " + newTask.ToString());

                    // Association デモ: ユーザーにタスクを割り当てる
                    newTask.AssignedTo = newUser;
                    context.SaveChanges();
                    Console.WriteLine("\n割り当てられたタスク: '" + newTask.Title + "' 割り当てられたユーザー: '" + newUser.GetFullName() + "'");

                    // Read デモ: ユーザー 'Anna' に割り当てられた未完了のタスクを見つける
                    Console.WriteLine("\n'Anna' に割り当てられた未完了のタスク:");
                    var query = from t in context.Tasks
                                where t.IsComplete == false &amp;&amp;
                                t.AssignedTo.FirstName.Equals("Anna")
                                select t;
                    foreach (var t in query)
                    {
                        Console.WriteLine(t.ToString());
                    }

                    // Update デモ: タスクの '期限' を変更
                    Task taskToUpdate = context.Tasks.First(); // 最初のタスクを取得
                    Console.WriteLine("\nタスクをアップデート中: " + taskToUpdate.ToString());
                    taskToUpdate.DueDate = DateTime.Parse("06-30-2016");
                    context.SaveChanges();
                    Console.WriteLine("変更された期限: " + taskToUpdate.ToString());

                    // Delete デモ: 2016年が期限になっているすべてのタスクを削除
                    Console.WriteLine("\n期限が2016年になっているすべてのタスクを削除します。");
                    DateTime dueDate2016 = DateTime.Parse("12-31-2016");
                    query = from t in context.Tasks
                            where t.DueDate &lt; dueDate2016
                            select t;
                    foreach (Task t in query)
                    {
                        Console.WriteLine("タスクを削除中: " + t.ToString());
                        context.Tasks.Remove(t);
                    }
                    context.SaveChanges();

                    // 'Delete' 操作の後にタスクを表示 - 0個のタスクがあるはず
                    Console.WriteLine("\n削除後のタスク:");
                    List &lt;Task&gt; tasksAfterDelete = (from t in context.Tasks select t).ToList &lt;Task&gt; ();
                    if (tasksAfterDelete.Count == 0)
                    {
                        Console.WriteLine("[なし]");
                    }
                    else
                    {
                        foreach (Task t in query)
                        {
                            Console.WriteLine(t.ToString());
                        }
                    }
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.ToString());
            }

            Console.WriteLine("全て完了しました。任意のキーを押して終了します...");
            Console.ReadKey(true);
        }
    }
}

