More than 3 years have passed since last update.JavaやC++などのオブジェクト指向言語の経験者が、C#を使い始めて「Java/C++のアレはどうやって書くんだっけ？」と思いそうなことを整理してます。
C#4.0までの内容がメインです。末尾の文献もぜひ参考にしてください。論理演算子（|はOR、&amp;はAND）、条件演算子（||はOR、&amp;&amp;はAND）はいずれも論理式を評価して、trueまたはfalseの結果を返す。
違いは、論理演算子の場合は左式・右式の両方を評価するが、条件演算子の場合は左式の評価によって結果が確定すると右式を評価しない点にある。したがって、a || bでaがtrueとなったり、a &amp;&amp; bでaがfalseになった場合は、bは評価されない。null許容型にでは関係演算子・論理演算子の振る舞いに注意する必要がある。uncheckedでスローさせないこともできる。ブラケットで初期値を代入できる。ブラケット内は末尾がカンマでもOK。１つしか宣言できず、実引数リストの末尾に記述する必要がある。デストラクタはガベージコレクション時（参照が無くなった時ではない）に呼び出される。アンマネージコードで確保した領域の開放などで使う。TestClass(string n)、TestClass(string n, int a)の順で実行される。特にJava経験者の方は違和感を覚えるかと思いますが、子クラスで同じシグネチャのメソッドを用意しても、メソッドはオーバライドされません。そのため、c1.Greeting()では親クラスのメソッドが呼び出されます。
オーバライドするためには、親クラス側でオーバライドするメソッドにvirtualキーワードを付加する必要があります。子クラス側では、overrideキーワードを付与した（ただし無くてもコンパイルエラーにはならない）、同じシグネチャのメソッドを用意します。
子クラスでのvirtualメソッドのオーバライドは不要です。オーバライドしていない場合は、親クラスのメソッドが呼び出されます。コンストラクタ内であればreadonlyフィールドも初期化可能。フィールドの名前・型・順番が一致していれば同じクラスとなる。NameとAgeはバッキングフィールド（自動実装されるプライベート変数）に値が格納される。構造体は値型のデータ構造で、継承はできないが、インターフェイスは実装できる。途中で値を変更することもできる。+=でつなげることで、AddOne()、AddTwo()の順で実行される。-=で削除することもできる。elementAまたはelementBのプロパティが変更された時に、sumの値も再計算されるようにしている。親クラス制約・参照型制約(class)・値型制約(struct)のいずれか1つ、インタフェース制約、コンストラクタ制約(new())の順番で宣言する必要がある。型パラメータの制約も可能です。こちらも型パラメータ制約が可能。Linqを使うにはSystem.Linqを含める必要があるが、うっかり記述を忘れて、インテリセンスが効かずに「ん？」となることがよくある。global::とすることで、グローバル名前空間から指定できる。
（なお、namespaceで括られない場合はglobal名前空間に定義されたことになるので注意。）作成したクラスは、デフォルトでプロジェクト名.フォルダ階層としてnamespaceが設定される。
しかし、別のフォルダに移したとしてもnamespaceまでは自動で変更されないので、開発者がnamespaceの記述を変える必要がある。独習C# 第3版（ハーバート・シルト 翔泳社）
Effective C# 4.0（ビル・ワグナー 翔泳社）
[完全版] 究極のC#プログラミング ~新スタイルによる実践的コーディング（川俣晶 技術評論社）
プログラミングC# 第7版(Ian Griffiths オライリージャパン)


