More than 1 year has passed since last update.Unityにおける非同期自体は需要が高いこともあり、いい記事もたくさんあります。
しかし、コルーチンより Task (async・await)を使うメリットが書いてある記事や lock（非同期時における変数へのアクセス制御）についても書いてある記事が少ないのでそこらへんについて書いていきます。
 なお、実装に関してはほぼ書きません。リンク先を参考にしてください。（というかみんな良記事を書くから私が書く理由を見出せなかった。）
非同期について深くやった理由は↓のやつを作ったからです。
FaceRigなんてもう古い！Vをやるならこれを使え!そもそもなんで非同期が必要か。非同期というのはかなり難しいとこです。（なのでみんな悩まされるのですが。）その理由は、デメリットをはるかに超えるメリットがあるからです。
主なメリットは二点。このうち、上のものは Unity がコルーチンという形で簡単に扱えるようになっています。Task (async・await)は両方できます。先に非同期について非常に良い記事のリンクを置いておきます。実装するときはこちらを参考にしてください。なお、私とは一切関係ありません。正直、コルーチンより Task (async・await)のほうがはるかに難しいです。それでも Task (async・await)を使う理由は、パフォーマンスのためです。Task (async・await)はマシンのスペックをフルに使えるのです。
CPUって、〇コア・〇スレッドとありますよね。コルーチンは1コア・1スレッドしか使えず、 Task (async・await)は（調整すれば）すべて使えます。
なぜそうなるのかをちょっとイラスト化してみました。
舞台はUnity社。現実の Unity Technologies Corporation は全く関係ありません。名前の都合です。どうやらお仕事のようです。
なお、業務は実際は関数となります。作業が終わるとこうなります。
しかし...実際に働いている人は一人しかいないので問題も起こります。Unity社ではまだ人は余っているのに。
こうなると次のシーンは予想できますよね。
これは、私たちにおけるフレーム落ちや、重いといった結果になります。つまり、私たちはきちんと時間と計算量を考慮に入れてコルーチンを作る必要があります。こんどはちょっと違います。

こんな風に雇っていたバイト君を使い倒します。なので責任者も安心です。
このように大きなメリットのある Task (asinc・await)ですが、気をつけなければいけないところもあります。Unity社の資産は大事です。なくしたり、壊されたりするのは困ります。なので、Unity社ではバイト君たちにはいじらせるということは許可されてません。もしバイト君たちがいじろうとしたらxxx can only be called from the main thread.というエラーが吐かれます。
ではどうするか。答えは簡単で、責任者に任せます。このように、エラーで怒られるところをメインスレッドで実行させるようにします。以下の例を考えましょう。なお、変数aは数字です。バイトA君はバイトB君はとします。A君とB君が同時に操作させます。結果は元と変わらないはずです。しかし、もしこれが以下の順番で起きたとします。そうすると、B君の変更のみ適応された、つまり、元の数から1引いた数が結果となり、バグとなります。こういうことが起こるのは稀と思う人もいるかもしれませんが、マルチスレッドをやると無視できないぐらいには起こります。
これを防ぐにはlock構文を使います。lock構文の基本は以下のコードです。lock構文では、someobjectにあたる部分にobjectを与えることにより、中の処理は同じsomeobjectのlock構文では必ず1か所のみでしか実行されません。他のところでこのlockに行きつくと、そのコードは待機します。前のlockがブロックを出たら、lockに入ります。実際に例を見ましょう。このようにすることで矛盾なくできるようになります。このコードは一見lock要らなさそうに見えますが、必要です。（といってもこのコードもうまく動くとは思わないけど。）詳しくlockやそれに似たものを知りたい場合は以下の記事が参考になると思います。（例えば今回の例だとさらに早くなります。）非同期は難しいけど使いこなすと非常に強力です。みなさんがんばってください。


