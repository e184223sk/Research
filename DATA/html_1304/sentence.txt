More than 1 year has passed since last update.以下の手順で作られるコードを以下に置いておきます。お忙しい方はこちらからどうぞ 
https://github.com/ishiyama0530/worksample-dotnetcore-swagger-axios最終的にはこんな感じになります。vueでもreactでもangularでも何でもいいですが、とりあえずテンプレートが用意されているreactで進めます。SampleController.csを作成します。サービスを追加します。ミドルウェアは定義する順番によって動作が変わります。
今回はとりあえずConfigureメソッドの一番上に追加します。XMLコメントを有効にするためにプロジェクトファイルに以下を追加します。
bin以下にコメントのxmlファイルを出力するようになります。https://localhost:5001/swagger/v1/swagger.json
上記URLにアクセスするとOpenAPIのインターフェース定義を確認できます。プロジェクト直下にwwwroot/swagger/uiディレクトリ作成し、GitHub SwaggerUIのdistフォルダの中身をまるっとコピーします。wwwroot/swagger/ui/index.htmlの42行目あたりの読み込む定義ファイルのURLを、自分の定義に修正します。https://localhost:5001/swagger/ui/index.html
上記URLにアクセスするとSwaggerUIを確認できます。プロジェクト直下に.configフォルダを作り、その下にdotnet-tools.jsonを作成します。今回はビルド後に指定したパスに定義ファイルを自動で出力するようにします。
ビルド後イベントにHookするためにプロジェクトファイルに以下を追加します。.NET Core 2.1 Runtime が入っていない環境だとビルドが通らないようです。
私は以下からダウンロードしました。Download .NET Core 2.1
https://dotnet.microsoft.com/download/dotnet-core/2.1プロジェクト直下に以下のファイルが出力されていれば成功です。Axios本体とインターフェース定義ファイルからAxiosのコードを生成してくれるopenapi-generator-cliをインストールします。生成前にディレクトリを削除したいのでrimrafもインストールします./ClientApp/package.jsonに以下を追加します。上記のスクリプトを実行するとプロジェクト直下にあるopenapi.jsonをもとに./ClientApp/src/openapisdkにAxiosのコードが生成されます。方法はいろいろあると思いますが、クロスプラットフォームに対応したいのでnpm-scriptsに書いていきます。プロジェクト直下にpackage.jsonを作ります。npm-scriptsからdotnetコマンドを実行したいのでshelljsをインストールします。プロジェクト直下にscriptsフォルダを作りその下にdotnetbuild.jsを作りました。最後にnpm-scriptsに以下を記述します。これでプロジェクトのビルドからAxiosのコード生成が1コマンドで行われるようになりました。コードの補完も効くのでまあまあ快適です。

以上です。Swagger UIのテーマはこちらからどうぞ
Swagger UI Themes
https://ostranme.github.io/swagger-ui-themes/


