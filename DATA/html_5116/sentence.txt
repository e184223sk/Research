More than 3 years have passed since last update.消耗していたのは、私のことです。。
Win32API の GetLastError 関数に関連するエラーメッセージを全部見てみたくて、0 から 0xFFFFFFFF まで for 文でループさせてみたり、winerror.h から #define ラベル部分を抜いてC言語ソースにして抜いてみたりしましたが、前者はとても時間がかかりますし、後者はヘッダに定義のないメッセージが取得対象から外れてしまいます。
幸運にもリソースのメッセージテーブルからまるごと文字列データを抜き出す方法を知ることが出来ましたので、あえてC#にてここにまとめてみます。VisualBasicのエラーメッセージもこれで一覧にすることが出来ますよ。2018/5/22：ストリングテーブル (RT_STRING) に関する姉妹編も投稿してみました。リソースデータをロックして得られるメモリ領域に、上記のような構造でメッセージテーブルのデータが格納されています。
先頭に MESSAGE_RESOURCE_DATA の構造があり、先頭 4バイト (NumberOfBlocks) には後続する MESSAGE_RESOURCE_BLOCK 構造の個数が入っていて、直後から MESSAGE_RESOURCE_BLOCK 構造が連続して格納されています。それぞれの MESSAGE_RESOURCE_BLOCK には、連続するメッセージIDをもつ MESSAGE_RESOURCE_ENTRY の情報が格納されており、先頭のメッセージID (LowId) と最後のメッセージID (HighId)、メッセージの実体である MESSAGE_RESOURCE_ENTRY 構造の、ロックして得られたメモリ領域の先頭からのバイトオフセット (OffsetToEntries) が、おのおの 4バイトで入っています。MESSAGE_RESOURCE_ENTRY には、Length や Flags を含む、自身のMESSAGE_RESOURCE_ENTRY 構造全体のバイトサイズが Length に、Flagsにはメッセージテキストデータのエンコード (0:ANSI 1:Unicode) が格納されており、さらにメッセージテキストデータが Length - 4 バイト分入っています。そして、その次 (=+1) のメッセージIDをもつMESSAGE_RESOURCE_ENTRY構造が直後につづきます。ロックしたリソースは FreeLibrary 関数を呼び出してモジュールをアンロードすることでリリースされます。先達に感謝します！
内容や誤字のご指摘、お待ちしております。


