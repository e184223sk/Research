More than 3 years have passed since last update.改訂メモ：実際はクラスファイル分け出来ないので、この static class を問題解答クラスの inner class としてコピペして使用してます。
inner class に持って行っても PaizaUtility.XxxXxx() って呼び出し形式は変わらないので、ローカルのIDEである程度コーディングしてからそれを張り付けて回答してます。つかいかた。こんな感じで、ITestIOインタフェースを実装したモノをPaizaUtility.IOに設定することで、任意のReadLine/WriteLineにアダプタする事が出来る。
デフォルト実装（PaizaUtility.IOのフィールド初期化）ではConsoleへのプロキシが実装されているので、何もしなければ標準入出力で動作する。このサンプル実装では、IO.ReadLine呼び出し時に固定のテストデータを順番に返してくれる。
ローカルのIDE環境でのみこの差し替えを実装しておき、paiza回答コードには含めないようにすれば良い。これで、イチイチコンソールからの手入力でテストデータを流す事なく、テストコード的に組み込む事が出来るようになります。(*'▽')やったね！登録二日目にランクＡの問題を解きに行ったんですが、意外と複雑な入力パラメータ渡して来やがってversion1ベースの実装では対応できなかったので、独自実装したのを抽象化して汎用機能として昇格させてやりました。
後はもう「ヘッダレコードがＮ行になる」とか「入力パラメータがブロックに分かれてて複数ブロック連続してやって来る」みたいな事さえなければ更なる機能拡張はしなくて良いでしょう、、、。(*'▽')きっと、たぶん。上記追加機能を利用したサンプル実装。
※サンプル実装とかは解り易さ重視で実装しているので、実行コストを多少犠牲にして見た目重視でコーディングしてますのよ。(*'▽')こういうコードが書けるからC#のラムダ式はやめられないぜ！！Doクラスは特に深い意味は無いんだけど、version2で追加したIOのデフォルト実装差し替えを回答コードに紛れ込ませないように、回答コードだけを独立して実装する場所が欲しかったので作りました。
回答時は、DoクラスとPaizaUtilityクラスを両方 inner class としてコピペして、Do.Answer();呼び出しだけ組み込めば良いと言う手順になります。ちなみに上記サンプルコードを実行すると、以下のような出力が得られます。arg-a: アフリカオオコノハズク
arg-a: ワシミミズク
arg-b: そうです
arg-b: 我々は
arg-b: 賢いので。かなり頻繁に出て来るっぽい定型コードなので固めといたよ。(*'▽')g実装コード見れば大体用途は解ると思うので、解説は特にしないよ。(*'▽')もし必要なら編集リクエストでも送ってね！！VS-Git のクローンURL：
https://ellnore-git.visualstudio.com/_git/PaizaFrameworkGitHubのリポジトリURL：
https://github.com/sugaryo/CS-PaizaFrameworkpaiza の利用規約（本稿記載の2017/17/25時点のもの）に関して。利用規約「第３章　paiza」の「第１２条（禁止行為）」より引用抜粋。（３）ブログ・SNS等の各種媒体（インターネット媒体に限られず、不特定多数が閲覧可能なものを全て含む。）上において、当社がpaizaで出題した問題の内容、当該問題に対する解答、解答へのヒント等の示唆およびカンニング等の不正を助長する内容等を掲載する行為。本禁止事項に関して、ぼくとしては下記に示す通り、このQiita記事投稿（と、ユーティリティのソース公開）に関しては問題ないと判断していますが、もし万一問題があれば記事とgitリポジトリのソース一式まとめて削除します。正直、本来であれば素直にコマンドライン引数からargsで出題パラメータ渡してくれよって思うけど、ブラウザ経由で色んな言語のコードを受け取ってテストコードに食わせる必要があるコードコンテスト系のサービスなので標準入出力を介してやり取りしている訳で。
単にこの制約というか、弊害というか、その辺の不便な所だけクリアにしたいと言うだけのものなので、これはまぁセーフかな、と判断しました。


