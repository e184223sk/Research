Visual Studio 2019にはコードクリーンアップという機能が付いています。これはあらかじめ設定しておいたルールに従って、ソースコードをまとめて綺麗にしてくれるというものです。
（従来からあった「フォーマット」機能とは異なり、変数宣言にvarを使うか使わないか、自分自身のメソッド呼び出しにthisを付ける/付けないなど、コードの内容部分まで含めて綺麗にしてくれます）これはとても便利な機能なのですが、惜しいことにどのルールが具体的にどんな処理をしてくれるのかが分かりにくいという欠点があります。
ルールの設定画面では処理の実例が表示されず、各ルールについての説明なども特にないためです。そこでこの記事では、各ルールがどのような処理を行ってくれるのかを、C#のコードサンプルと合わせて紹介します。
また、実際に行われるクリーンアップ処理の内容は、Visual Studioのコードスタイル設定や .editorconfig の設定によって変わります。そのため、「Visual Studioや .editorconfig のどの設定がクリーンアップ処理に影響するか」も併せて記載します。自分自身が持つプロパティ、メソッド呼び出しの前に this. を付けるかどうかを統一します。Visual Studio 2019で対応する設定:
オプション &gt; テキスト エディター &gt; C# &gt; コードスタイル &gt; 全般 &gt; 'this' の優先 &gt; ○○ アクセスを 'this' で修飾してくださいeditorconfigで対応する設定:
dotnet_style_qualification_for_***参考ページ:
"This." 修飾子 と "Me." 修飾子 (EditorConfig での .NET の言語規則 - Visual Studio)usingを適切な順番に並べ替えます。なお、Visual Studio 2019の標準では上記のようにアルファベット順に並べ替えますが、設定を変更することでSystemを先頭に並び替えたり、グループごと（名前空間の第1階層ごと）に空行を空けて並べたりすることも可能になります。Visual Studio 2019で対応する設定:
オプション &gt; テキスト エディター &gt; C# &gt; 詳細 &gt; ディレクティブを使用するeditorconfigで対応する設定:
dotnet_separate_import_directive_groups, dotnet_sort_system_directives_first参考ページ:
using ディレクティブの整理 (EditorConfig での .NET の書式規則 - Visual Studio)ファイル内で使用していないusing句を削除します。Visual Studio 2019で対応する設定:
なしeditorconfigで対応する設定:
なしローカル変数の宣言時に var を使うかどうかを統一します。Visual Studio 2019で対応する設定:
オプション &gt; テキスト エディター &gt; C# &gt; コードスタイル &gt; 全般 &gt; 'var' を優先editorconfigで対応する設定:
csharp_style_var_***参考ページ:
暗黙的な型と明示的な型 (EditorConfig での .NET の言語規則 - Visual Studio)使われていないローカル変数を削除します。Visual Studio 2019で対応する設定:
なしeditorconfigで対応する設定:
なし参考ページ:
コンパイラの警告 (レベル 3) CS0219不要と考えられる型キャストを削除します。Visual Studio 2019で対応する設定:
なしeditorconfigで対応する設定:
なし参考ページ:
不要なキャストを削除する (共通のクイックアクション - Visual Studio)関数呼び出し時にout引数を指定していて、かつout引数で使う変数をそれよりも前に宣言している場合、C# 7.0から導入された書き方（out変数）に変更します。Visual Studio 2019で対応する設定:
オプション &gt; テキスト エディター &gt; C# &gt; コードスタイル &gt; 変数の優先順位 &gt; インライン変数宣言を優先するeditorconfigで対応する設定:
csharp_style_inlined_variable_declaration参考ページ:
インライン変数宣言 (EditorConfig での .NET の言語規則 - Visual Studio)アクセシビリティ (public, protected, privateなど) の記載がされていないプロパティやメソッドについて、アクセシビリティを記載します。Visual Studio 2019で対応する設定:
なしeditorconfigで対応する設定:
なしアクセシビリティ (public, protected, privateなど) の記載順を、標準の並び順に従って並び替えます。
また、static修飾子やvirtual修飾子などよりも前に（先頭に）来るようにします。Visual Studio 2019で対応する設定:
なしeditorconfigで対応する設定:
なし初期化以外の箇所で代入を行っていないprivateフィールド（メンバ変数）があれば、それをreadonlyにします。※readonlyになるのはフィールドだけで、プロパティは読み取り専用にならないことに注意してください。Visual Studio 2019で対応する設定:
オプション &gt; テキスト エディター &gt; C# &gt; コードスタイル &gt; 修飾子設定 &gt; readonly フィールドを優先するeditorconfigで対応する設定:
dotnet_style_readonly_field参考ページ:
dotnet_style_readonly_field (EditorConfig での .NET の言語規則 - Visual Studio)標準の組み込み型名について、言語キーワード（int, long, stringなど）で記述するか、フレームワークの型名 (Int32, Int64, System.Stringなど) で記述するかを統一します。Visual Studio 2019で対応する設定:
オプション &gt; テキスト エディター &gt; C# &gt; コードスタイル &gt; 定義済みの型の設定editorconfigで対応する設定:
dotnet_style_predefined_type_for_***参考ページ:
型参照のためのフレームワーク型名の代わりの言語キーワード (EditorConfig での .NET の言語規則 - Visual Studio)if文やusing文などの本体を1行だけで書けるような場合に、波かっこをつけて複数行で記述するか、1行で記述するかを統一します。（2020/7/3追記）Visual Studio 2019 16.7.0 Preview 2時点では、波かっこの追加は行いますが、削除は行ってくれないようです。（バグ？）なお、この設定には「はい」「いいえ」の他に「複数行の場合」という設定があり、これを選択すると「本体が1行に収まるときは1行で書く、複数行にわたるときは波かっこをつける」という動作となります。Visual Studio 2019で対応する設定:
オプション &gt; テキスト エディター &gt; C# &gt; コードスタイル &gt; コード ブロックの優先順位 &gt; 波かっこを優先しますeditorconfigで対応する設定:
csharp_prefer_braces参考ページ:
コード ブロックの基本設定 (EditorConfig での .NET の言語規則 - Visual Studio)オブジェクトやコレクションを初期化する時の書き方を統一します。Visual Studio 2019で対応する設定:
オプション &gt; テキスト エディター &gt; C# &gt; コードスタイル &gt; 全般 &gt; 式の優先順位
オブジェクト初期化子を優先する
コレクション初期化子を優先するeditorconfigで対応する設定:
dotnet_style_collection_initializer, dotnet_style_object_initializer参考ページ:
式レベルの基本設定 (EditorConfig での .NET の言語規則 - Visual Studio)メソッド本体やプロパティなどの本体が1行に収まる場合に、従来の形式で記述するか、式形式で記述するかを統一します。設定によってはコンストラクタ、ローカル関数などプロパティ以外の対象にも適用可能です。
ただし、項目によっては対応するC#のバージョンが異なることに注意してください。
（全項目を使用可能になるのはC# 7.0以降（Visual Studio 2017以降））Visual Studio 2019で対応する設定:
オプション &gt; テキスト エディター &gt; C# &gt; コードスタイル &gt; 全般 &gt; 式の優先順位 &gt; ○○に式本体を使用するeditorconfigで対応する設定:
csharp_style_expression_bodied_***参考ページ:
式形式のメンバー (EditorConfig での .NET の言語規則 - Visual Studio)下記の処理は、どのようなルールを選択したかにかかわらず、クリーンアップ時は常に実行されます。コードクリーンアップのための設定内容は、Visual Studioの「設定から .editorconfig を生成」機能を使うことで、ほかの人と共有することができます。
（メニューの オプション &gt; テキスト エディター &gt; C# &gt; コード スタイル から実行可能です）ただし、残念ながら「どのクリーンアップルールを選択したか」の情報は共有できないため、これだけは別途共有する必要があります。
（例：「不要な using の削除」をオンにしているかオフにしているかの情報は .editorconfig には含まれないため、各開発者がコードクリーンアップの設定ダイアログからオン/オフを切り替えなくてはなりません）Microsoftの公式ドキュメントでも紹介されている拡張機能「Code Cleanup On Save」を使うと、ファイルを保存するたびに自動でクリーンアップが実行されるようにできます。


