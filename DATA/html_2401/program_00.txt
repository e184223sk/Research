using System;

namespace p483
{
    class Program
    {
        class ReverseClass
        {
            public string ReverseStr(string str)
            {   // 文字列を反転するメソッド
                string result = "";
                foreach (char ch in str)
                    result = ch + result;
                return result;
            }
        }

        // ReverseClassクラスから継承するNonReverseClassクラス
        class NonReverseClass : ReverseClass
        {
            // ここでは、ジェネリックの基本クラス制約の機能を確認するために、
            // ReverseMethodsクラスのReverseStrメソッドを隠ぺいする
            new public string ReverseStr(string str)
            {
                return str;     // メソッド名はReverseであるが基本クラス制約の機能を
                                // 確認するためこのクラスでは反転させず、パラメータをそのまま戻す
            }
        }


        // ReverseClassで基本クラス制約をかける
        class Test&lt;T&gt; where T : ReverseClass
        {
            T obj;
            public Test(T o)
            {
                obj = o;
            }
            public void ShowReverse(string str)
            {
                String revStr = obj.ReverseStr(str);
                Console.WriteLine(revStr);
                Console.WriteLine();
            }
        }

        static void Main()
        {
            ReverseClass objA = new ReverseClass();
            NonReverseClass objB = new NonReverseClass();

            Console.WriteLine("基本クラスによるジェネリック");
            Test&lt;ReverseClass&gt; t1 = new Test&lt;ReverseClass&gt;(objA);
            t1.ShowReverse("This is a test.");

            Console.WriteLine("継承クラスによる隠ぺいをした場合のジェネリック");
            Test&lt;NonReverseClass&gt; t2 = new Test&lt;NonReverseClass&gt;(objB);
            t2.ShowReverse("More testing.");
            t2.ShowReverse("基本クラス制約をかけると、継承クラスの隠ぺいは無効になることがわかる。");
            Console.WriteLine("継承クラスでメソッドを隠ぺいして、文字列を反転しないようにしたが、");
            Console.WriteLine("その効果は表れず、継承クラスの隠ぺいは呼び出されなかった。");
            Console.WriteLine();
        }
    }
}

