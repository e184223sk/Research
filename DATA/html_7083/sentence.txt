More than 5 years have passed since last update.今回は、選択肢による質問(複数)を行う定型でプロセスを FormFlow クラスを利用して作成します。これを利用することで、例えばファーストフードや宅配ピザの注文のように、いくつかの定型質問を元に注文を受け付けるようなフローが Bot Framework だけで作成できます。
ということで、タイトル通り「〇ブウェイがBOTで注文を受付したら」という趣旨で単純なサンドイッチ注文 BOT を作成していきます。Bot Framework を使うための開発環境 を参考に開発環境を作成し、Visual Studio テンプレートから Bot アプリケーションの作成 と同じプロセスで新規アプリケーションを作成します。今回は SandwichBot という名称で作成しています。
テンプレートから作成される MessageController.cs (Controllerフォルダ下にあります) を編集していきます。
今回は、メッセージの送受信を行う Microsoft.Bot.Builder.Dialogs に加えて Bot.Builder.FormFlow への参照を追加します。また、System.Collections.Generic も合わせて追加しておきます。
テンプレートにデフォルトで作成されている MessageController クラス内に、まずは質問項目とその回答リストを enum (列挙型) で定義します。今回はサンドイッチを作成するのに必要な ①SandwichOptions(サンドイッチの種類)、②LengthOptions(サイズ)、③BreadOptions(パンの種類)、④ToppingsOptions(トッピング)、⑤VegetableLessOption(減らす野菜)、⑥VegetableMoreOptions(増やす野菜)、⑦SauseOptions(ソース) を作成しました。"Form Definition" (フォーム定義の)インターフェース を SandwichOrder という名称で作成し、上で作成した質問項目を追加します。回答リストから1つだけ選択させたい場合はそのまま、複数選択可能な場合は System.Collections.Generic.List&lt;&gt;を使用します。
続けて SandwichOrder クラスに Microsoft.Bot.Builder.FormFlow.IForm を追加、FormBuilder でこれらの項目を呼び出して質問を行うフォームを構成します。FormBuilder.Message で初期メッセージを設定しています。Microsoft.Bot.Builder.Dialogs.IDialog で "Chainable"(鎖のようにつながった) インターフェースを作成します。あとは、何かメッセージを受信したら、この MakeRootDialog を呼び出すように設定すれば完成です。ひとまずテンプレートの Post の部分を以下のように修整すればOKです。メッセージの送受信については コミュニケーションの基本クラス - Dialog(1) をご確認ください。ここまでの内容で動作を確認します。Botアプリケーションのローカル実行とエミュレーターによるアクセス と同様に Visual Studio から F5 でビルド＆デバック実行を開始し、Bot Framework Channel Emulator からメッセージを送信します。
作成した7つの質問項目とリストが表示され、各項目を入力していくと、最後に確認メッセージが表示されるのを確認してください。



