
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

[RequireComponent(typeof(MeshFilter), typeof(MeshRenderer))]
public class DynamicMesh : MonoBehaviour
{ 
    MeshFilter meshFilter;
    MeshRenderer meshRenderer;

    [SerializeField] [Range(1, 96)] int wSegments = 16, hSegment = 8;
    [SerializeField] [Range(3.0f, 100.0f)] float radius = 5.0f, height = 1.0f;
    const float PI2 = Mathf.PI * 2f;

    private void Awake()
    {
        meshFilter = GetComponent&lt;MeshFilter&gt;();
        meshRenderer = GetComponent&lt;MeshRenderer&gt;();

    }

    void Start()
    {
        this.meshFilter.mesh = CreateMesh();
    }

    Mesh CreateMesh()
    {
        var mesh = new Mesh();
        var vertices = new List&lt;Vector3&gt;();
        var uvs = new List&lt;Vector2&gt;();

        for (int i = 0; i &lt; hSegment; i++)
        {
            for (int j = 0; j &lt; wSegments; j++)
            {
                var _theta = (PI2 / wSegments) * (float)j;
                var x = radius * Mathf.Cos(_theta);
                var y = height * i;
                var z = radius * Mathf.Sin(_theta);
                vertices.Add(new Vector3(x, y, z));
                uvs.Add(new Vector3(x / wSegments, y / height, z / wSegments));
            }
        }

        var triangles = new List&lt;int&gt;();
        for (int y = 0; y &lt; hSegment - 1; y++)
        {
            for (int x = 0; x &lt; wSegments; x++)
            {
                int index = y * wSegments + x;
                var a = index;
                var b = index + 1;
                var c = index + wSegments;
                var d = index + wSegments + 1;

                if (x != wSegments - 1)
                {
                    triangles.Add(a);
                    triangles.Add(d);
                    triangles.Add(c);
                    triangles.Add(a);
                    triangles.Add(b);
                    triangles.Add(d);
                }
                else if (x == wSegments - 1)
                {
                    b = y * wSegments;
                    d = b + wSegments;

                    triangles.Add(a);
                    triangles.Add(d);
                    triangles.Add(c);
                    triangles.Add(a);
                    triangles.Add(b);
                    triangles.Add(d);
                }
            }
        }
        mesh.SetVertices(vertices);
        mesh.subMeshCount = 2;
        int triangleCount = 50;
        mesh.SetTriangles(triangles.GetRange(0, triangles.Count-triangleCount*3), 0);
        mesh.SetTriangles(triangles.GetRange(triangles.Count - triangleCount * 3, triangleCount * 3), 1);
        mesh.RecalculateBounds();
        mesh.RecalculateNormals();

        return mesh;
    }
}


