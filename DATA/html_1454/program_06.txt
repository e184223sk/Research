
using System;
using System.Collections;
using System.Collections.Generic;

namespace ClosureSample.Sample3_Yield_2
{
    class Program
    {
        static void Main(string[] args)
        {
            foreach (var i in A.F())
            {
                Console.WriteLine(i);
            }
        }
    }

    static class A
    {
        public static IEnumerable&lt;int&gt; F()
        {
            return new D(-2); // 最初は無効な-2がstateに設定される
        }

        // yield用の内部クラスが生成されている
        class D : IEnumerable&lt;int&gt;, IEnumerator&lt;int&gt;, IDisposable
        {
            private int state;
            private int current;
            private int initialThreadId;
            private int i;

            public D(int st)
            {
                state = st;
                initialThreadId = Environment.CurrentManagedThreadId;
            }

            public void Dispose()
            {
            }

            public int Current =&gt; current;

            object IEnumerator.Current =&gt; current;

            public bool MoveNext()
            {
                switch (state)
                {
                    case 0: // 1回目
                        state = -1;
                        i = 1;
                        break;
                    case 1: // 2回目以降
                        state = -1;
                        i++;
                        break;
                    default:
                        return false;
                }

                // for文の中身
                if (i &lt;= 10)
                {
                    current = i;
                    state = 1;
                    return true;
                }
                else
                {
                    return false;
                }
            }

            public void Reset()
            {
                throw new NotSupportedException();
            }

            public IEnumerator&lt;int&gt; GetEnumerator()
            {
                if (state == -2 &amp;&amp; initialThreadId == Environment.CurrentManagedThreadId)
                {
                    state = 0;
                    return this;
                }
                else
                {
                    return new D(0);
                }
            }

            IEnumerator IEnumerable.GetEnumerator()
            {
                return GetEnumerator();
            }
        }
    }
}

