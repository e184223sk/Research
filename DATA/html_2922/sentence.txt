More than 1 year has passed since last update.自作スクリプトにインスペクタでコンポーネントをぽちぽち割り当てていくのが面倒くさい…。
そんなときに使えるのがMonoBehaviourにあるReset()というメッセージ。
意外と融通が利いて便利なのですが、あまり使われていない？気がしますので、使い方の例を含めて紹介させて頂きます。https://docs.unity3d.com/ja/current/ScriptReference/MonoBehaviour.Reset.html
要するにエディタでコンポーネント初期化のときに呼ばれるメソッドです。
具体的にはインスペクタで「Add Component」したときだったり、
右クリック or 歯車アイコンをクリックして出てくるメニューから「Reset」を選択したときに呼ばれます。

主にSerializeFieldの値を初期化するのに使います。
といっても宣言で値を代入しておけばAdd Component／Resetしたときに勝手にその値にしてくれるので、
それで事足りるならReset()を用意する必要はありません。宣言で代入できない値をデフォルトにしたい（そしてそれを任意でインスペクタから変更できるようにもしたい）、そんなときがReset()の出番です。これをAdd Conponentしてやると、こんな感じで勝手に設定済みの状態にしてくれます。
もちろん、この後各フィールドを変更するのも自由ですし、また上記の状態にResetすることもできます。さらには、他のコンポーネントの設定値を変更することもできます。ただこれは相手側のコンポーネントからすれば、非実行時なのに外部から突然設定を書き換えられてしまうということですから、意図しない挙動に繋がる可能性もあります。
使いどころは要検討と言えるでしょう。そもそも、エディタモードで実行できることなら大体できるみたいです。と、便利なReset()ですが一つ注意点があります。
それは呼び出されるのはエディタモードのときのみということ。
つまり、ランタイムでスクリプトからAddComponent()した場合は呼び出されません。この場合、SerializeField各値は宣言での代入値（上のResetTest.csの例で言うとnull(None)とか0fとか）になります。なお参考までに、やろうと思えばReset()を直接呼び出すことはできます。
（publicにすればクラス外からでも呼び出し可能）ただ、これはReset()をどこでも自由に呼び出せるということになりますから、
もし別の誰かが内部値のクリアメソッドか何かと勘違いして呼び出したりして、それ以降インスペクタでやった設定がリセットされた状態で動作していることに気づかなかったりすると、バグに繋がりそうな気がしないでもないです。
私見ではインスペクタ設定の補助程度の範囲で使った方が無難かなと思います。


