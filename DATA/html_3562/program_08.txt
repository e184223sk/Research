
[Test]
public void MallocFreeSpeedTest()
{
    const int COUNT = 160000;
    const int SIZE = 1 &lt;&lt; 14;
    var ptrs = (void**)UnsafeUtility.Malloc(sizeof(void*) * COUNT, 4, Allocator.Temp);
    watch.Reset();
    watch.Start();
    for (int i = 0; i &lt; COUNT; i++)
        ptrs[i] = UnsafeUtility.Malloc(SIZE, 4, Allocator.Temp);
    watch.Stop();
    UnityEngine.Debug.Log(nameof(Allocator.Temp) + " : " + watch.ElapsedMilliseconds);
    watch.Reset();
    watch.Start();
    for (int i = 0; i &lt; COUNT; i++)
        UnsafeUtility.Free(ptrs[i], Allocator.Temp);
    watch.Stop();
    UnityEngine.Debug.Log(nameof(Allocator.Temp) + " : " + watch.ElapsedMilliseconds);
    watch.Reset();
    watch.Start();
    for (int i = 0; i &lt; COUNT; i++)
        ptrs[i] = UnsafeUtility.Malloc(SIZE, 4, Allocator.TempJob);
    watch.Stop();
    UnityEngine.Debug.Log(nameof(Allocator.TempJob) + " : " + watch.ElapsedMilliseconds);
    watch.Reset();
    watch.Start();
    for (int i = 0; i &lt; COUNT; i++)
        UnsafeUtility.Free(ptrs[i], Allocator.TempJob);
    watch.Stop();
    UnityEngine.Debug.Log(nameof(Allocator.TempJob) + " : " + watch.ElapsedMilliseconds);
    watch.Reset();
    watch.Start();
    for (int i = 0; i &lt; COUNT; i++)
        ptrs[i] = UnsafeUtility.Malloc(SIZE, 4, Allocator.Persistent);
    watch.Stop();
    UnityEngine.Debug.Log(nameof(Allocator.Persistent) + " : " + watch.ElapsedMilliseconds);
    watch.Reset();
    watch.Start();
    for (int i = 0; i &lt; COUNT; i++)
        UnsafeUtility.Free(ptrs[i], Allocator.Persistent);
    watch.Stop();
    UnityEngine.Debug.Log(nameof(Allocator.Persistent) + " : " + watch.ElapsedMilliseconds);
    UnsafeUtility.Free(ptrs, Allocator.Temp);
    var ptrs2 = (IntPtr*)UnsafeUtility.Malloc(sizeof(IntPtr) * COUNT, 4, Allocator.Temp);
    watch.Reset();
    watch.Start();
    for (int i = 0; i &lt; COUNT; i++)
        ptrs2[i] = System.Runtime.InteropServices.Marshal.AllocCoTaskMem(SIZE);
    watch.Stop();
    UnityEngine.Debug.Log(nameof(System.Runtime.InteropServices.Marshal.AllocCoTaskMem) + " : " + watch.ElapsedMilliseconds);
    watch.Reset();
    watch.Start();
    for (int i = 0; i &lt; COUNT; i++)
        System.Runtime.InteropServices.Marshal.FreeCoTaskMem(ptrs2[i]);
    watch.Stop();
    UnityEngine.Debug.Log(nameof(System.Runtime.InteropServices.Marshal.FreeCoTaskMem) + " : " + watch.ElapsedMilliseconds);
    watch.Reset();
    watch.Start();
    for (int i = 0; i &lt; COUNT; i++)
        ptrs2[i] = System.Runtime.InteropServices.Marshal.AllocHGlobal(SIZE);
    watch.Stop();
    UnityEngine.Debug.Log(nameof(System.Runtime.InteropServices.Marshal.AllocHGlobal) + " : " + watch.ElapsedMilliseconds);
    watch.Reset();
    watch.Start();
    for (int i = 0; i &lt; COUNT; i++)
        System.Runtime.InteropServices.Marshal.FreeHGlobal(ptrs2[i]);
    watch.Stop();
    UnityEngine.Debug.Log(nameof(System.Runtime.InteropServices.Marshal.FreeHGlobal) + " : " + watch.ElapsedMilliseconds);
    UnsafeUtility.Free(ptrs2, Allocator.Temp);
}

