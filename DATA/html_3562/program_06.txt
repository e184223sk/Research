
[Test]
public void EnumToIntSpeedTest()
{
    const int COUNT = 100000;
    var enums = stackalloc AttributeTargets[] { AttributeTargets.All, AttributeTargets.Assembly, AttributeTargets.Class, AttributeTargets.Constructor, AttributeTargets.Delegate, AttributeTargets.Enum, AttributeTargets.Event, AttributeTargets.Field, AttributeTargets.GenericParameter, AttributeTargets.Interface, AttributeTargets.Method, AttributeTargets.Module, AttributeTargets.Parameter, AttributeTargets.Property, AttributeTargets.ReturnValue, AttributeTargets.Struct, };
    var array = stackalloc int[16];
    watch.Start();
    for (int i = 0; i &lt; COUNT; i++)
        for (int j = 0; j &lt; 16; j++)
            array[j] = (int)enums[j];
    watch.Stop();
    UnityEngine.Debug.Log(watch.ElapsedMilliseconds);
    watch.Reset();
    watch.Start();
    for (int i = 0; i &lt; COUNT; i++)
        for (int j = 0; j &lt; 16; j++)
            array[j] = Conv0(enums[j]);
    watch.Stop();
    UnityEngine.Debug.Log(watch.ElapsedMilliseconds);
    watch.Reset();
    watch.Start();
    for (int i = 0; i &lt; COUNT; i++)
        for (int j = 0; j &lt; 16; j++)
            array[j] = Conv1(enums[j]);
    watch.Stop();
    UnityEngine.Debug.Log(watch.ElapsedMilliseconds);
    watch.Reset();
    watch.Start();
    for (int i = 0; i &lt; COUNT; i++)
        for (int j = 0; j &lt; 16; j++)
            array[j] = Conv2(enums[j]);
    watch.Stop();
    UnityEngine.Debug.Log(watch.ElapsedMilliseconds);
    watch.Reset();
    watch.Start();
    for (int i = 0; i &lt; COUNT; i++)
        for (int j = 0; j &lt; 16; j++)
            array[j] = UnsafeUtility.EnumToInt(enums[j]);
    watch.Stop();
    UnityEngine.Debug.Log(watch.ElapsedMilliseconds);
}

private static int Conv0&lt;T&gt;(T val) where T : Enum =&gt; (int)(object)val;
private static int Conv1&lt;T&gt;(T val) where T : Enum =&gt; Convert.ToInt32(val);
private static int Conv2&lt;T&gt;(T val) where T : struct, IConvertible =&gt; val.ToInt32(null);

