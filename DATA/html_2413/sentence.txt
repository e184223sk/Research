More than 1 year has passed since last update.OpenCvSharpを用いての特徴点抽出の情報が少なく，実装まで苦労したのでメモついでに共有．pythonができないとは言ってない今回は色々と使い勝手が良く，お気に入りのwindowsフォームアプリケーションで作成しますwindows10
Visual Studio 2019過去記事と同じ手順箇所は基本端折るので，不明なところがあればそっちに飛んで頂くか，コメントしてください1.NugetからOpenCvSharp4とOpenCvSharp4.Windowsをインストール2.まずは定義
※画像の保存先パスはC:\cs_source\img\今回はAKAZEという特徴量の計算アルゴリズムを使用
OpenCvSharp4ではこのようにMatは全て初期化しないと怒られるのでめんどうですね
ちなみに今回使用するジャイアントマンタくんの画像１と画像２（https://www.pakutaso.com/）

3.特徴点を出力するここで実行すると下２つのウィンドウが表示される

1.今回はBruteForceという総当たりマッチングを行う2.マッチングした特徴量同士を線でつなぐ実行すると下のウィンドウが新たに表示される

なにもいじってないのに精度いいですね
流石OpenCV...まずmatchesの中身をコンソールで確認してみると

要素の説明はDMatchの公式リファレンスを参照してください
意外と距離あった・・・精度関係で調べたらわかりますが，沢山の工夫された方法があります
ここでは，一番初歩的（主観）な方法であるDistanceに対して閾値を設定する方法で精度を上げていきたいと思います百聞は一見に如かず，まずはコードを見てください（注：作者未だリーダブルコード未読）今回はビビッときた閾値750で実行
pythonじゃないのでDMatch[] good_matches;のようにただ定義するだけだと，未割当だかなんだかですぐ怒ってきます
まぁC#の利点っちゃあ利点とも言えますね
pythonゆとり仕様なんで（エアプ）output3（チューン前）とoutput4（チューン後）の比較

ちょっと良くなったかも？最後にコンソールから確認しましょう

いい感じに除外できてます今回は１番単純（超主観）な方法でチューンしていきましたが，ほかの方々の方法ではもっと精度が出ていますので，これは書き方の参考にでもするくらいの感じで見て頂ければ幸いですこれをきっかけにOpenCvSharpというニッチな世界に人が増えたらうれしいですね
参考資料は少ないし，配列付近のコマンドの自由性の低さとか苦労する点が多いです
本当にみんなpythonに行っちゃいそう自分は使えないとかじゃないんで，環境がないだけなんで．ほんとに「OpenCV3でAKAZE特徴量を検出する」
https://dronebiz.net/tech/opencv3/akaze
「特徴点のマッチング」
http://labs.eecs.tottori-u.ac.jp/sd/Member/oyamada/OpenCV/html/py_tutorials/py_feature2d/py_matcher/py_matcher.html


