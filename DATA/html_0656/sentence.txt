NUnitのClassic Modelのアサーションメソッドがどんなものがあるのか一通り触ってみることにした。NUnitのアサーションクラスには、テスト対象機能を評価する様々なメソッドが用意されており、
これらを使用してテスト評価対象の機能が想定した結果となるかどうかを評価する。
Assert#Thatメソッド以外のテスト評価メソッドを
Classic Modelと言う。.NET：3.1.401
C#：8.0
NUnit：3.12.0※1)数値型はint、uint、long、ulong、decimal、double、floatを指す各アサーションメソッドには、上記表の引数に加えて、テスト結果NG時のエラーメッセージを指定することができる。AreEqualメソッドは、指定されたオブジェクトのEqualsメソッドによる検査を行う。
例として、下記テストはOKとなる。変数expectedとactualの参照先は異なるが、
string.Equalsメソッドによる判定で2つとも同値と判定されるため、テスト結果もOKとなる。
変数の参照先をテストしたい場合は、Assert.AreSameを使う。また、配列やコレクションの検査も可能。
要素を格納しているクラスの型が異なっていても、保持している要素の値と位置が一致していれば同一と見なされる。
下記の一番↓のように同じ要素を持つ配列とListの比較結果はテストOKとなる。要素が一致していても、格納位置が異なる場合はテストNGとなる。IsInstanceOfメソッドは、引数のobjectが第1引数もしくはジェネリクスに指定した型かそのサブクラスの型であることを検査する。
IsAssignableFromは、引数のobjectに第1引数もしくはジェネリクスに指定した型かそのサブクラスの型の変数を割り当て可能かを検査する。
（後者のメソッドはあまり使わなそうだ・・・）Throwsメソッドは検査対象がスローする例外の正しさを検査する。
第1引数、もしくはジェネリクスにスローされるであろう例外を指定する。
第2引数（ジェネリクスで例外指定の場合は第1引数）に例外をスローするテストデリゲートを実装した関数を渡す。
下記のようにラムダ式で書くのが楽。また、第1引数に制約を指定することで、テストOKとなる条件を詳細に指定することができる。上記のようにスローされる例外オブジェクトのどこかしらにエラーコードがあって
その内容を検査したいときなどはこちらを使えば良さそう。CatchメソッドはThrowsメソッドに似ているが、
こちらは指定した例外の派生例外も検査OKとなる。また、Catchメソッドには引数にもジェネリクスにもスローされる例外を指定しないテストデリゲート関数のみ指定するメソッドがある。
これを使用した場合、関数内でなんらかの例外がスローされれば、テスト結果はOKとなる。
つまり、例外をスローするかしないかを検査する。Pass、Fail、Ignore、Inconclusiveの4つのメソッドは実行結果を検査するメソッドではなく、
テスト結果を決定するメソッドである。
検査ロジックは自分達が実装したい場合などに使う。これらのテスト実行結果は下記のようになる。

御覧の通りテスト結果をコントロールできる。
テストメソッドにロジックを書くのはあまりよくないとは思うが、
場合によっては使える場面があるかもしれない。Inconclusiveメソッドはテスト結果としてどうなったのかが出力されない。
恐らく該当テストメソッドのテストが正しく機能するか分からないときなどのマーキングに使う？なお、いずれのメソッドも呼ばれたタイミングでそのテストメソッドは終了する。
これらのメソッド以降にコードを書いても実行されることは無い。また、他のアサーションメソッドと同様、
引数にメッセージを指定することができる。dotnet test --logger "console;verbosity=detailed"コマンドを実行すると以下のように結果にメッセージを出力できる。
（テスト成功時のメッセージの出力方法は分からず・・・）
Assertクラスのメソッドは大体こんな感じ。
Assertクラスの他にも以下のアサーションクラスがある。Assertクラスのメソッドまとめるだけでも結構疲れたのでここら辺はまた今度NUnit公式 Classic Modelメソッド一覧


