//  ----------------------------------------------------------------------------------
//  Copyright Microsoft Corporation
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//  http://www.apache.org/licenses/LICENSE-2.0
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//  ----------------------------------------------------------------------------------

namespace DurableTask.AzureStorage.Tracking
{
    using DurableTask.Core;
    using Microsoft.WindowsAzure.Storage.Table;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Xml.Linq;

    /// &lt;summary&gt;
    /// OrchestrationInstanceStatusQueryBuilder is a builder to create a StorageTable Query
    /// &lt;/summary&gt;
    internal class OrchestrationInstanceStatusQueryCondition
    {
        public IEnumerable&lt;OrchestrationStatus&gt; RuntimeStatus { get; set; }

        public DateTime CreatedTimeFrom { get; set; }

        public DateTime CreatedTimeTo { get; set; }

        public TableQuery&lt;T&gt; ToTableQuery&lt;T&gt;()
            where T : TableEntity, new()
        {
            var query = new TableQuery&lt;T&gt;();
            if (!((RuntimeStatus == null || (!RuntimeStatus.Any())) &amp;&amp; CreatedTimeFrom == default(DateTime) &amp;&amp; CreatedTimeTo == default(DateTime)))
            {
                query.Where(
                    GetConditions()
                    );
            }
            return query;
        }

        private string GetConditions()
        {
            var conditions = new List&lt;string&gt;();

            if (default(DateTime) != this.CreatedTimeFrom)
            {
                conditions.Add(TableQuery.GenerateFilterConditionForDate("CreatedTime", QueryComparisons.GreaterThanOrEqual, new DateTimeOffset(this.CreatedTimeFrom)));
            }

            if (default(DateTime) != this.CreatedTimeTo)
            {
                conditions.Add(TableQuery.GenerateFilterConditionForDate("CreatedTime", QueryComparisons.LessThanOrEqual, new DateTimeOffset(this.CreatedTimeTo)));
            }

            if (this.RuntimeStatus != null &amp;&amp; this.RuntimeStatus.Any())
            {
                var runtimeCondition = this.RuntimeStatus.Select(x =&gt; TableQuery.GenerateFilterCondition("RuntimeStatus", QueryComparisons.Equal, x.ToString()))
                                    .Aggregate((a, b) =&gt; TableQuery.CombineFilters(a, TableOperators.Or, b));
                if (runtimeCondition.Count() != 0)
                {
                    conditions.Add(runtimeCondition);
                }
            }

            if (conditions.Count == 1)
            {
                return conditions[0];
            }
            else
            {
                return conditions.Aggregate((a, b) =&gt; TableQuery.CombineFilters(a, TableOperators.And, b));
            }

        }

        /// &lt;summary&gt;
        /// Parse is a factory method of the OrchestrationInstanceStatusConditionQuery
        /// &lt;/summary&gt;
        /// &lt;param name="createdTimeFrom"&gt;CreatedTimeFrom&lt;/param&gt;
        /// &lt;param name="createdTimeTo"&gt;CreatedTimeTo&lt;/param&gt;
        /// &lt;param name="runtimeStatus"&gt;RuntimeStatus&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static OrchestrationInstanceStatusQueryCondition Parse(DateTime createdTimeFrom, DateTime? createdTimeTo, IEnumerable&lt;OrchestrationStatus&gt; runtimeStatus)
        {
            var condition = new OrchestrationInstanceStatusQueryCondition();
            condition.CreatedTimeFrom = createdTimeFrom;
            condition.CreatedTimeTo = (createdTimeTo != null) ? (DateTime)createdTimeTo : default(DateTime);
            condition.RuntimeStatus = runtimeStatus;
            return condition;
        }
    }
}


