
// 列挙型定義
private enum ZeroUndefined
{
    One = 1,
    Two
}

// フィールド
private ZeroUndefined zeroUndefinedUnassigned;

// 検証
public void EnumUndefinedMember()
{
    // 0 はメンバとして定義されていません。
    Assert.IsFalse(Enum.IsDefined(typeof(ZeroUndefined), 0));

    // ★既定値はメンバの定義がなくても 0 です。 default(T) もフィールドも同様です。
    Assert.AreEqual((ZeroUndefined)0, default(ZeroUndefined));
    Assert.AreEqual((ZeroUndefined)0, this.zeroUndefinedUnassigned);

    // ★リテラルや定数の 0 は特別に列挙型への暗黙変換が許可されているため、キャストなしで代入できます。
    ZeroUndefined undefinedZero = 0;

    /* int 型変数の代入はコンパイルエラーになります。
    int zero = 0;
    ZeroUndefined undefinedZero = zero;
    */

    // 0 はどのメンバとも一致しません。
    foreach (ZeroUndefined each in Enum.GetValues(typeof(ZeroUndefined)))
    {
        Assert.IsTrue(undefinedZero != each);
    }

    // int にキャストすると 0 になります。
    Assert.IsTrue((int)undefinedZero == 0);

    // 0 をキャストしたものと一致します。
    Assert.IsTrue(undefinedZero == (ZeroUndefined)0);

    // ★リテラルや定数の 0 は特別に列挙型への暗黙変換が許可されているため、キャストなしで等価比較できます。
    Assert.IsTrue(undefinedZero == 0);
    Assert.IsTrue(0 == undefinedZero);

    // ★int 型との Equals 比較は false になります。
    Assert.IsFalse(undefinedZero.Equals(0));
    Assert.IsFalse(0.Equals(undefinedZero));

    // 最大定義値を超える場合も数値は保持されます。
    ZeroUndefined maxValue = (ZeroUndefined)int.MaxValue;
    Assert.IsTrue(maxValue == (ZeroUndefined)int.MaxValue);
    Assert.IsTrue((int)maxValue == int.MaxValue);
}

