
#define POSITION_CONSTRAINT
#undef PARENT_CONSTRAINT

using UnityEngine;
using UnityEngine.Animations; // これがないと Constraintは使えない

public class ConstraintTest : MonoBehaviour {

    private ConstraintSource myConstraintSource;        // ConstarintSource
#if POSITION_CONSTRAINT
    private PositionConstraint myPositionConstraint;    // Position Type
#endif
#if PARENT_CONSTRAINT
    private ParentConstraint myParentConstraint;        // Parent Type
#endif

    [SerializeField]
    private RectTransform SouceRectTransform;// ConstraintSourceの設定にはTransformももちろんOK

    /// &lt;summary&gt;
    /// ConstraintComponentの親オブジェクトを動的に追加する関数
    /// &lt;/summary&gt;
    /// &lt;param name="parent"&gt;Contraintの親オブジェクト&lt;/param&gt;
    private void SetObject2ConstraintSource ( RectTransform parent ) {
        // Constraintの参照元を設定(この処理が一つでも欠けると追尾せず即死するので注意)
        this.myConstraintSource.sourceTransform = parent;
        this.myConstraintSource.weight = 1.0f; // 影響度を完全支配にする(Addの場合は0になるので)
#if POSITION_CONSTRAINT
        this.myPositionConstraint.AddSource(this.myConstraintSource);   // Constraintの参照元を追加
        this.myPositionConstraint.translationOffset = Vector3.zero;     // オフセットを0に
        this.myPositionConstraint.enabled = true;                       // 有効にする(使わないときはfalse)
#endif
#if PARENT_CONSTRAINT
        this.myParentConstraint.AddSource(this.myConstraintSource);     // Constraintの参照元を追加
        this.myParentConstraint.SetTranslationOffset(0, Vector3.zero);  // オフセットを0に
        this.myParentConstraint.enabled = true;                         // 有効にする(使わないときはfalse)
#endif
    }

    /// &lt;summary&gt;
    /// Constraintの設定を解除する
    /// &lt;/summary&gt;
    private void DeleteSource ( ) {
#if POSITION_CONSTRAINT
        this.myPositionConstraint.RemoveSource(0);  // Sourceから削除
        this.myPositionConstraint.enabled = false;  // 無効にする 
#endif

#if PARENT_CONSTRAINT
        this.myParentConstraint.RemoveSource(0);  // Sourceから削除
        this.myParentConstraint.enabled = false;  // 無効にする 
#endif
    }

    private void Start ( ) {
#if POSITION_CONSTRAINT
        this.myPositionConstraint = GetComponent&lt;PositionConstraint&gt;( );
#endif
#if PARENT_CONSTRAINT
        this.myParentConstraint = GetComponent&lt;ParentConstraint&gt;();
#endif
    }

    private void Update ( ) {
        // Constarintの有効無効を設定する
        if (Input.GetKeyDown("r")) {
#if POSITION_CONSTRAINT
            if (this.myPositionConstraint.sourceCount &gt; 0) {
                DeleteSource( );
            }
#endif
#if PARENT_CONSTRAINT
            if (this.myParentConstraint.sourceCount &gt; 0) {
                DeleteSource( );
            }
#endif
            else {
                SetObject2ConstraintSource(this.SouceRectTransform);
            }
        }
    }
}


