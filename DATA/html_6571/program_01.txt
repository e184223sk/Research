
using System;
using System.Text;

 class Program
{
    // 共通鍵で署名されたトークンを検証する
    // トークンの内容は
    // aud: 空
    // iss: "GHKEN"
    // exp: 期限切れ
    static void Main(string[] args)
    {
        // 鍵
        var keyString = "hogehogehogehoge"; ;
        var key = new Microsoft.IdentityModel.Tokens.SymmetricSecurityKey(Encoding.UTF8.GetBytes(keyString));
        // トークン操作用のクラス
        var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
        // トークンの文字列表現
        var tokenString = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE0ODc4MjUxMjMsImV4cCI6MTQ4NzgyODcyMywiaWF0IjoxNDg3ODI1MTIzLCJpc3MiOiJHSEtFTiJ9.AJFdztPP3GOBBjtiJeHc6wvy5Z3idQW2yGw9yCd6_wc";
        // トークン検証用のパラメータを用意
        // Audience, Issuer, Lifetimeに関してはデフォルトで検証が有効になっている
        // audが空でexpが期限切れなのでValidateAudienceとValidateLifetimeはfalseにしておく
        var validationParams = new Microsoft.IdentityModel.Tokens.TokenValidationParameters
        {
            ValidateAudience = false,
            ValidIssuer = "GHKEN",
            ValidateLifetime = false,
            IssuerSigningKey = key,
        };
        try
        {
            Microsoft.IdentityModel.Tokens.SecurityToken token;
            // 第三引数にSecurityToken型の変数を参照で渡しておくと、検証済みのトークンが出力される
            handler.ValidateToken(tokenString, validationParams, out token);
            Console.WriteLine(token.Issuer);
        }
        catch (Exception e)
        {
            // ValidateTokenで検証に失敗した場合はここにやってくる
            Console.WriteLine("トークンが無効です: " + e.Message);
        }
        Console.Read();
    }
}

