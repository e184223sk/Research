
using System;

class Program
{
    static void Main(string[] args)
    {
        // 公開鍵を用意
        var keyString = "&lt;RSAKeyValue&gt;&lt;Modulus&gt;yT12/iqZLNcrnTTFGy3NMuCjo6wJNLuG5j5L2yM6iX7CT5sWVq2BuXtdbq6PFuOIkzwJ+5Sng+qthAX5qHnuxRMI+QITe1qP+k0pOtK/EVtuedz6zdu2+Sp24CvGIMt1y8yMeOBXrRZTZzxpH9VsSq9kA/ylHKuWRfWLHysIqsdO0Tgf9eLwNAhRr6vpkvsAwvJnreIdWr/7aTrt9vq3EIJI3NYHV7/zqbZ7mKS1GbvJkAMbrQkYJ45hhEBUdYE45V8Dhkb9NTlExIcrar3vqsXSOVjQvuiGN4HsYmqPGUw26P9F7DrPyM4eQksb+PRMdkPW4dTjIRj9X3OIBHXrBw==&lt;/Modulus&gt;&lt;Exponent&gt;AQAB&lt;/Exponent&gt;&lt;/RSAKeyValue&gt;"; ;
        // RSAを使うのでRsaSecurityKeyを使う
        var rsa = new System.Security.Cryptography.RSACryptoServiceProvider();
        Microsoft.IdentityModel.Tokens.RsaSecurityKey key = null;
        try
        {
            rsa.FromXmlString(keyString);
            key = new Microsoft.IdentityModel.Tokens.RsaSecurityKey(rsa);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        // トークン操作用のクラス
        var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
        // トークンの文字列表現
        var tokenString = "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE0ODgyNjgyNDgsImV4cCI6MTQ4ODI3MTg0OCwiaWF0IjoxNDg4MjY4MjQ4LCJpc3MiOiJHSEtFTiJ9.qgyYG-q8-aDdjabt-Wp3dn3wNVIu8WGP2n8Mnv_AxrFY98Abmb96M_SP3dnZI3mDKk5NC3QYKf42cbvu20DbAAdiawAVclLMXYBgKZJqHc-5Wkq7PsGA9ECoVE2KLzKGisqHFrZUm-kv51gdCegPsANm0ukdp5CWAy26Em1og02WG9--q0peGOWgYjtE5V2sM8b861QtAsWUtUSKs6kf_r9c5bcvN2xFS4_iw5luVY0u4dSjdeaaeIOjMqLCpZaelleTAubyEdoJ89J9vz6gj6ghzYe9dvND_mlUYpfiperSceSR8eKLPtwsno0zn7DaYYqcMI5uERqUtj2YKWcIgg";
        // トークン検証用のパラメータを用意
        // Audience, Issuer, Lifetimeに関してはデフォルトで検証が有効になっている
        // 今回発行したトークンの内容
        // Audience: 空なので検証スキップ
        // Issuer: "GHKEN"
        // Lifetime: 期限切れなので検証スキップ
        var validationParams = new Microsoft.IdentityModel.Tokens.TokenValidationParameters
        {
            ValidateAudience = false,
            ValidIssuer = "GHKEN",
            ValidateLifetime = false,
            IssuerSigningKey = key,
        };
        try
        {
            Microsoft.IdentityModel.Tokens.SecurityToken token;
            // 第三引数にSecurityToken型の変数を参照で渡しておくと、検証済みのトークンが出力される
            handler.ValidateToken(tokenString, validationParams, out token);
            Console.WriteLine(token.Issuer);
        }
        catch (Exception e)
        {
            // ValidateTokenで検証に失敗した場合はここにやってくる
            Console.WriteLine("トークンが無効です: " + e.Message);
        }
        Console.Read();
    }
}

