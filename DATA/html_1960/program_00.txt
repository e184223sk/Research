    class CommonClass
    {
        /// &lt;summary&gt;
        /// 正規表現フォーマット
        /// &lt;/summary&gt;
        public enum RegexFormat
        {
            LimitLess = 0,
            Num,
            AlphaUp,
            AlphaLow,
            NumAlphaLowUp
        }

        /// &lt;summary&gt;
        /// 正規表現フォーマット文字列取得処理
        /// &lt;/summary&gt;
        /// &lt;param name="regexFormat"&gt;正規表現フォーマット&lt;/param&gt;
        /// &lt;param name="notTarget"&gt;true:指定した対象以外を正規表現で取得する&lt;/param&gt;
        /// &lt;returns&gt;正規表現フォーマット文字列&lt;/returns&gt;
        private static string GetRegexFormat(RegexFormat regexFormat, bool notTarget)
        {
            string format = string.Empty;
            string notFormatWord = string.Empty;

            if (notTarget)
            {
                notFormatWord = "^";
            }

            switch (regexFormat)
            {
                case RegexFormat.Num:
                    format = "[" + notFormatWord + "0-9]";
                    break;
                case RegexFormat.AlphaUp:
                    format = "[" + notFormatWord + "A-Z]";
                    break;
                case RegexFormat.AlphaLow:
                    format = "[" + notFormatWord + "a-z]";
                    break;
                case RegexFormat.NumAlphaLowUp:
                    format = "[" + notFormatWord + "0-9a-zA-Z]";
                    break;
            }

            return format;
        }

        /// &lt;summary&gt;
        /// コード用テキストボックス
        /// &lt;/summary&gt;
        public class CodeTextBox : TextBox
        {
            /// &lt;summary&gt;
            /// フォーマット（正規表現の選択）
            /// &lt;/summary&gt;
            [AmbientValue(RegexFormat.LimitLess)]
            [Localizable(true)]
            public RegexFormat Format { get; set; }

            /// &lt;summary&gt;
            /// （保持用）テキスト開始位置
            /// &lt;/summary&gt;
            private int selectionStart = 0;

            //[AmbientValue(ImeMode.Disable)]
            //// プロパティウィンドウ非表示
            //[Browsable(false)]
            //// インテリセンス非表示
            //[EditorBrowsable(EditorBrowsableState.Never)]
            //public new ImeMode ImeMode { get { return base.ImeMode; } set { base.ImeMode = ImeMode.Disable; } }

            protected override void OnKeyPress(KeyPressEventArgs e)
            {
                // テキスト開始位置をこの時点で取得
                selectionStart = base.SelectionStart;
                base.OnKeyPress(e);
            }

            protected override void OnTextChanged(EventArgs e)
            {
                if (!Format.Equals(RegexFormat.LimitLess))
                {
                    Regex reg = new Regex(GetRegexFormat(Format, true));
                    string result = reg.Replace(this.Text, string.Empty);

                    if (!result.Equals(this.Text))
                    {
                        base.Text = result;
                        base.SelectionStart = selectionStart;
                    }
                }
                base.OnTextChanged(e);
            }
        }
    }

