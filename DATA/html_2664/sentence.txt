More than 1 year has passed since last update.私はとある会社でAzure のサービスの中の 1 つである、 Azure Active Directory に関するサポート エンジニアの仕事をしております。
Azure Active Directory はクラウド サービスの認証基盤をつかさどっているので、当然、クラウド上のアプリケーションもしくはオンプレミス環境上にあるアプリケーションをインターネット上に公開し、Azure AD を使って認可、認証させたいというご要望をいただきます。認証認可のプロトコルの動きや仕様を押さえておけば、お客様のご要望に応えられることも可能です。
しかしながら、アプリケーション側の動きも押さえられればより良い回答を返答できるようになることは言うまでもありません。
(もちろんアプリケーションに精通しているエンジニアがおり、チームでサポートしているので必ずしも 1 人ですべてを解決する必要はありません)とはいえ、インフラ エンジニアとアプリケーション エンジニアの境目が無くなってきつつある現代において、インフラ エンジニアもプログラミングができるようになるに越したことはありません。そこで私は、先日投稿した下記記事にもありますように、プログラミングに精通した、あるエンジニアの方にメンターになっていただき、C# を中心に月に 1 回ほどのペースでプログラミングの成果物を出すことにしました。-参考情報
エンジニアとして成長するために皆さんにもやって欲しいこと。
URL:https://qiita.com/Shinya-Yamaguchi/items/73d0e0c8cd6d8b21070fこのシリーズは、とあるインフラ エンジニアが C# を使ってプログラミングができるようになるまでの軌跡を綴ります。筆者のプログラミングに関するスキルは以下のとおりです。・Linux の bash によるシェルスクリプトの経験はあり
・プログラミングに関する知識はほぼ皆無
・プログラミングに関する書籍は何冊か買って手を動かしたことはあるが、いずれも途中で挫折いままで挫折していた原因は、具体的な目標を立てていなかったからだと思います。
従って上述のとおり、月単位で目標を決めて、期限を設けてアウトプットすることにしました。まず第一歩として、Microsoft が公開している Microsoft Docs (URL:https://docs.microsoft.com/ja-jp/?WT.mc_id=docs-twitter-machiy) の中で、 C# を使った基本的なコンソール アプリの作成に挑戦してみました。-参考情報
チュートリアル: Visual Studio でシンプルな C# コンソール アプリを作成する
URL:https://docs.microsoft.com/ja-jp/visualstudio/get-started/csharp/tutorial-console?view=vs-2019チュートリアルを見ていただければ分かりますが、C# のコード サンプルが記載されているので、そのままサンプル コードを貼り付けてしまえば、本チュートリアルの目的である電卓アプリは完成してしまいます。
ただそれでは当然ながら何の学びもないので、実際には、すべて手入力しています。
また、前提として、既に Visual Studio 2019 の無料版 (URL:https://visualstudio.microsoft.com/ja/downloads/?rr=https%3A%2F%2Fdocs.microsoft.com%2Fja-jp%2Fvisualstudio%2Fget-started%2Fcsharp%2Ftutorial-console%3Fview%3Dvs-2019) をダウンロードしています。「スタート」→「Visual Studio 2019」の順にクリックし、右下の「新しいプロジェクトの作成」をクリックします。
コンソール アプリ(.NET Core) を選択された状態で「次へ」をクリックします。
プロジェクト名に「Calculator」を入力し「作成」をクリックします。
作成されたプロジェクトのデフォルトの状態が下記となります。
Console.WriteLine("Hello World!"); の意味は、画面上に、「Hello World!」と 1 行表示することを意味します。上記 Hello World! の代わりに、下記のとおり整数の計算をするコードを記入してみます。修正後に「F5」ボタンもしくは画面上部の「Calculator」をクリックすることで、コンソール ウィンドウが開きます。
下記のとおり、計算された結果がコンソールに表示されます。
上記は、変数 a に 42 を代入し、変数 b に 119 を代入し、 a と b を足した結果を c としてコンソールに表示するという処理になります。
次はより複雑な電卓の計算が出来るように、コードを修正します。
チュートリアルにあるコードをそのまま貼り付けては意味がないので、手入力して、１つ１つ意味を確認しながらコードを書いてみます。上記コードを書いたあとに、F5 キーもしくは「Calculator」ボタンをクリックすると、下記のようにコンソール画面が表示されます。
Num1 に任意の値と入れて「Enter」ボタンを押下、Num2 に任意の値を入れて「Enter」ボタンを押下、どの四則演算をするかを選択し「Enter」を押下すると、計算結果が出力されます。
ただこの電卓だと、下記のとおり、小数点以下の計算ができないため、小数点を求めるような計算を要求すると「0」になってしまいます。
小数を表示できるようにするためには、int 変数を float 変数に変更する必要があります。
すべての文字を書き換えるのは大変なので、「Ctrl ＋ F」キーを入力して、検索と置換ボックスを開き、変更前の文字を「int」変更後の文字を「float」として、「すべて置換」のボタンをクリックします。
すべて置換するかどうかの確認画面が表示されるので、「はい」をクリックし、置換を行います。
置換を行ったあとに再度コンソールを起動して同じ計算をすると、下記画面ショットのとおり、小数点を含めた計算結果が出力されました。
しかし、現在のコードでは下記画面ショットのように、小数点を含んだ数字で計算をしようとするとエラーになります。
変数の float をdoubleに変更し、メソッドをConvert.ToINT32 から Convert.ToDoubleに変更します。Convert.ToInt32 Method について
URL:https://docs.microsoft.com/ja-jp/dotnet/api/system.convert.toint32?view=netframework-4.8Convert.ToDouble Method について
URL:https://docs.microsoft.com/ja-jp/dotnet/api/system.convert.todouble?view=netframework-4.8メソッドは一言でいうと、一連の処理をひとまとめにしたものです。
Console.WriteLine というメソッドを今回頻繁に使っていると思いますが、このメソッドは「コンソールに表示するプログラム」をひとまとめにしています。例えば、ある料理を作るときに、１つ1つの工程を箇条書きで書くことで表現することもできます。
しかし、例えば、「下ごしらえ」「調理」「盛り付け」などように各工程後に区切ってレシピを用意したほうが調理しやすいかと思います。
メソッドというのは、この各工程ごとの処理をひとまとめにしたプログラムを読みやすくするとともに、プログラム自体を簡略化する時に使います。さて、同じように「Ctrl ＋ F」キーを入力して、検索と置換ボックスを開き変更を行います。
変更を行い、小数点を含んだ計算を行っても、下記のとおり、正しく計算結果が出力されるようになりました。
現在のプログラムで 0 で割ると下記のとおりコンソールが以下のとおりフリーズしてしまいます。
以下のとおりコードを修正してみます。変更前)変更後)修正後にコンソール アプリを起動し、「0」で割ろうとすると、「0」以外の値を入力するまで、要求が繰り返されるようになり、コンソールがフリーズしなくなります。電卓アプリなので、基本的に数字以外は入力しないのですが、数字以外を入力したときにエラーが出てしまいコンソールがフリーズしてしまうのはよくありません。具体的には下記画面ショットのように、数字以外のフォーマットを入力するとコンソールがフリーズし、エラーが出力されます。
この問題を解決するためには、対象のコードをリファクタリングする必要があります。
リファクタリングとは、プログラム自体の動きを変更することなく、ソースコードを変更することを意味します。-参考情報
コードのリファクタリング
URL:https://docs.microsoft.com/ja-jp/visualstudio/ide/refactoring-in-visual-studio?view=vs-2019現在 class Program としてクラスを program という名前で処理を行っていますが、そのクラスをCalculatorとProgramに分割します。
Calculator クラスでは計算作業を処理させ、 Program クラスではユーザー インターフェースとエラーの作業を処理します。その前に、そもそも、クラスが理解できていなかったので調べてみました。クラスは、関連のある変数とメソッドをまとめたものです。
この説明は、「確かな力が身につくC#「超」入門 」に記載されている内容が分かりやすかったので引用します。確かな力が身につくC#「超」入門 
URL:https://www.sbcr.jp/product/4797390261/絵にすると分かりやすいと思うので絵を描きました。
まず、「プレイヤー」と「敵」というクラスを定義します。
次に、プレイヤーと敵で使用する、名前や HP などを「変数」として定義します。
さらに、プレイヤーと敵がどのように動作するかについて、物理攻撃や逃走などの「メソッド」として定義します。上記のように 1 つのプログラムを書くために必要な変数やメソッドをまとめたものをクラスという単位で管理します。
また、このような考え方をオブジェクト指向と呼ぶようです。では、具体的に、Calculator クラスと Program クラスを修正してみます。Calculator クラスを以下のように新規に追加します。続いて、その下に新規に Program クラスを追加します。上記のように修正し、電卓アプリにて、「英文字」を入力したり、「0」で割ってもコンソールがフリーズすることなく、計算を継続できることが確認できるようになります。
最後に、完成したコードは以下のようになります。C# を学ぶ第一歩として、Visual Studio を使い、電卓アプリをチュートリアルに従い作成してみました。
このチュートリアルでは、クラス、メソッド、変数などのオブジェクト指向について学べたとともに、Microsoft が用意しているメソッドの使い方を学びました。プログラミングの考え方、書き方を理解できるようになれば、ぼんやりと見えていたプログラムをかみ砕いて見ることができるようになります。(なると信じています。)このシリーズを継続していき、C# を身に着けていきたいとおもいます。
少しでもこの記事が参考になれば幸いです。


