
/// &lt;summary&gt;
///     シーケンスを指定した要素数ごとに分割したブロックシーケンスに変換します。
/// &lt;/summary&gt;
/// &lt;typeparam name="T"&gt;要素の型&lt;/typeparam&gt;
/// &lt;param name="source"&gt;シーケンス&lt;/param&gt;
/// &lt;param name="numInBlock"&gt;1ブロック当たりの要素数&lt;/param&gt;
/// &lt;returns&gt;&lt;paramref name="numInBlock"/&gt;ごとに分割したブロックシーケンス&lt;/returns&gt;
public static IEnumerable&lt;T[]&gt; ToBlockSequence&lt;T&gt;( this IEnumerable&lt;T&gt; source, int numInBlock ) {

    // ブロックとなる配列です。
    var block = new T[numInBlock];

    // 各要素にインデックスを付加して、numInBlockで割った余り（ = ブロック内のインデックス ）と要素の値とのペアを作成し、それらを列挙します。
    foreach( var s in source.Select( ( v, i ) =&gt; new KeyValuePair&lt;int, T&gt;( i % numInBlock, v ) ) ) {
        // 要素のキーをブロックのインデックスとして指定し、要素の値を代入します。
        block[s.Key] = s.Value;

        // 現在の要素のキーとブロックの配列の末尾のインデックスが等しいかどうかを判別します。
        if( s.Key == numInBlock - 1 ) {
            // ブロックを返します。
            yield return block;
            // 新しいブロックを作成します。
            block = new T[numInBlock];
        }
    }
}

