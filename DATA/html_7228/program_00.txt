/// &lt;summary&gt;
///     シーケンスを指定した要素数ごとに分割したブロックシーケンスに変換します。
/// &lt;/summary&gt;
/// &lt;typeparam name="T"&gt;要素の型&lt;/typeparam&gt;
/// &lt;param name="source"&gt;シーケンス&lt;/param&gt;
/// &lt;param name="numInBlock"&gt;1ブロック当たりの要素数&lt;/param&gt;
/// &lt;returns&gt;&lt;paramref name="numInBlock"/&gt;ごとに分割したブロックシーケンス&lt;/returns&gt;
public static IEnumerable&lt;T[]&gt; ToBlockSequence&lt;T&gt;( this IEnumerable&lt;T&gt; source, int numInBlock ) {

    // シーケンスを配列に変換します。
    var source2 = source.ToArray();
    // ブロックとなる配列です。
    var block = new T[numInBlock];

    for( int i = 0; i &lt; source2.Length; i++ ) {
        // シーケンスのi番目の要素を、ブロックの( i mod numInBlock )番目に代入します。
        block[i % numInBlock] = source2[i];

        // iをnumInBlockで割った余りが、ブロックの末尾のインデックスと等しい or 
        // iがシーケンスの末尾のインデックスと等しいかどうか判別します。
        if( i % numInBlock == numInBlock - 1 || i == source2.Length - 1 ) {
            // ブロックを返します。
            yield return block;
            // 新しいブロックを作成します。（注：配列は参照型です）
            block = new T[numInBlock];
        }
    }
}

