using Reactive.Bindings;
using Reactive.Bindings.Extensions;
using System;
using System.Reactive.Disposables;
using System.Reactive.Linq;

namespace TestApp.ViewModels
{
    public class MainWindowViewModel : IDisposable
    {
        private CompositeDisposable _disposable;

        public ReactiveProperty&lt;string&gt; Name { get; }
        public ReactiveCommand GuestCommand { get; }
        public ReactiveCommand SubmitCommand { get; }

        public MainWindowViewModel()
        {
            this._disposable = new CompositeDisposable();

            this.Name = new ReactiveProperty&lt;string&gt;()
                .AddTo(this._disposable);

            this.GuestCommand = new ReactiveCommand()
                .WithSubscribe(() =&gt; this.Name.Value = "Guest")
                .AddTo(this._disposable);

            this.SubmitCommand = this.Name
                .IsEmpty()
                .Inverse()
                .ToReactiveCommand()
                .WithSubscribe(() =&gt; this.ShowMessage(this.Name.Value))
                .AddTo(this._disposable);
        }

        public void Dispose()
        {
            this._disposable.Dispose();
        }

        private void ShowMessage(string text)
        {
            // メッセージを表示する
        }
    }
}

