
       static void Main(string[] args)
        {
            // CryptoConfig cryptoConfig = new CryptoConfig();
            // var aes = (AesCryptoServiceProvider)CryptoConfig.CreateFromName("AES");
            var generatedKey = GenerateKey();
            Console.WriteLine($"Key Length: {generatedKey.Length}");
            string original = "Here is some data encrypt!";
            using (AesManaged myAes = new AesManaged())
            {
                //         public sealed override void GenerateKey()
                //{
                //    byte[] key = new byte[KeySize / BitsPerByte];
                //    RandomNumberGenerator.Fill(key);
                //    Key = key;
                //}
                myAes.GenerateKey();
                Console.WriteLine($"KeySize: {myAes.KeySize}");

                myAes.Key = GetKeyBytes(generatedKey);
                Console.WriteLine($"KEY (original) {generatedKey}");
                Console.WriteLine($"KEY: {Convert.ToBase64String(myAes.Key)}");
                Console.WriteLine($"IV: {Convert.ToBase64String(myAes.IV)}");
                byte[] encrypted = EncryptStringToBytes_Aes(original, myAes.Key, myAes.IV);
                string roundtrip = DecryptStringFromBytes_Aes(encrypted, myAes.Key, myAes.IV);
                Console.WriteLine($"Original: {original}");
                Console.WriteLine($"Encrypted: {Encoding.ASCII.GetString(encrypted)}");
                Console.Write($"Encrypted (bytes) :");
                foreach (var i in encrypted)
                {
                    Console.Write($"{ConvertToHex(i)}:");
                }
                Console.WriteLine();
                Console.WriteLine($"Encrypted (base64): {Convert.ToBase64String(encrypted)}");
                Console.WriteLine($"Round Trip: {roundtrip}");
            }
        }

        // Make the key as 256-bit with the HEX string format
        private static string GenerateKey()
        {
            var buffer = new byte[32]; 
            using (var rng = new RNGCryptoServiceProvider())
            {
                rng.GetBytes(buffer);
                return BitConverter.ToString(buffer).Replace("-", string.Empty);
            }
        }

        public static byte[] GetKeyBytes(string hexOrBase64)
        {
            // only support 32 bytes (256 bits) key length
            if (hexOrBase64.Length == 64)
            {
                return Enumerable.Range(0, hexOrBase64.Length)
                    .Where(x =&gt; x % 2 == 0)
                    .Select(x =&gt; Convert.ToByte(hexOrBase64.Substring(x, 2), 16))
                    .ToArray();
            }

            return Convert.FromBase64String(hexOrBase64);
        }

        static byte[] EncryptStringToBytes_Aes(string plainText, byte[] Key, byte[] IV)
        {
            byte[] encrypted;
            using (AesManaged aesAlg = new AesManaged())
            {
                aesAlg.Key = Key;
                aesAlg.IV = IV;

                ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);
                using (MemoryStream msEncrypt = new MemoryStream())
                {
                    using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                    {
                        using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                        {
                            swEncrypt.Write(plainText);
                        }

                        encrypted = msEncrypt.ToArray();
                    }
                }
            }

            return encrypted;
        }

        static string DecryptStringFromBytes_Aes(byte[] cipherText, byte[] Key, byte[] IV)
        {
            string plaintext = null;
            using (AesManaged aesAlg = new AesManaged())
            {
                aesAlg.Key = Key;
                aesAlg.IV = IV;
                ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);
                using (MemoryStream msDecrypt = new MemoryStream(cipherText))
                {
                    using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                    {
                        using (StreamReader srDecrypt = new StreamReader(csDecrypt))
                        {
                            plaintext = srDecrypt.ReadToEnd();
                        }
                    }
                }
            }

            return plaintext;
        }
    }

