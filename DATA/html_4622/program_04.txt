

/// &lt;summary&gt;
/// Load済みAssetBundle に関する情報まとめクラス
/// &lt;/summary&gt;
public class AssetData : IDisposable
{
    //--------------------------------------------
    // メンバ変数
    //--------------------------------------------
    #region ===== MEMBER_VARIABLES =====

    // AssetBundle名
    string m_bundleName = "";
    public string BundleName{get{return m_bundleName;}}

    // ロード対象のAssetBundle
    private AssetBundle m_targetBundle = null;
    public AssetBundle TargetBundle{get{return m_targetBundle;}}

    // 参照カウンタ
    private int m_refCount = 0;
    public  int RefCount{get{return m_refCount;}}

    // このBundle のhash 値
    private Hash128 m_assetHash;
    public  Hash128 AssetHash{get{return m_assetHash;}}

    #endregion //) ===== MEMBER_VARIABLES =====



    //--------------------------------------------
    // 初期化
    //--------------------------------------------
    #region ===== INIT =====

    public AssetData()
    {
        m_bundleName = "";
        m_refCount = 0;
        m_targetBundle = null;
    }

    public AssetData( AssetBundle _loadedBundle, Hash128 _hash ) : this()
    {
        m_targetBundle = _loadedBundle;
        m_bundleName = _loadedBundle.name;
        m_assetHash = _hash;
    }

    #endregion //) ===== INIT =====

    //--------------------------------------------
    // Dispose
    //--------------------------------------------
    #region ===== DISPOSE =====

    public void Dispose( )
    {
        // 念のためチェック
        if( TargetBundle != null )
        {
            TargetBundle.Unload( false );
        }
    }

    #endregion //) ===== DISPOSE =====


    //--------------------------------------------
    // 参照カウンタ
    //--------------------------------------------
    #region ===== REFERENCE_COUNT =====

    public void SetReference( )
    {
        ++m_refCount;
    }

    public void SetRelease()
    {
        --m_refCount;
        if( RefCount &lt; 1 )
        {
            //Unload
            TargetBundle.Unload( false );
            m_targetBundle = null;
        }
    }

    #endregion //) ===== REFERENCE_COUNT =====


    //--------------------------------------------
    // Asset
    //--------------------------------------------
    #region ===== ASSETS =====

    /// &lt;summary&gt;
    /// このAssetBundle に対象のAssetが存在するか
    /// &lt;/summary&gt;
    /// &lt;param name="_assetName"&gt;&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public bool IsContainsAsset( string _assetName )
    {
        if( TargetBundle == null )
        {
            return false;
        }
        string[] names = TargetBundle.GetAllAssetNames();
        foreach( string name in names )
        {
            if( name == _assetName )
            {
                return true;
            }
        }
        return false;
    }

    #endregion //) ===== ASSETS =====
}


