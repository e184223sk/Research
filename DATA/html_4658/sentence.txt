More than 3 years have passed since last update.Google APIには各種言語用クライアントライブラリが用意されていて、もちろんC#用のクライアントライブラリも存在します。ただ、情報が少なく、詰まるところもあったので、使い方をまとめておきます。環境は.NET Core 2.1およびVisual Studio Codeです。作成するアプリの形式は、コンソールアプリです。リポジトリを見ると、メンテンナンスモードと書かれているので不安になってしまいますが、FAQのページを見ると、「メンテナンスモード=成熟し、完成しているので機能追加はしない」とのことです。バグは修正されますし、新しいAPIが追加されれば対応すると明言されているので大丈夫そうです。まずはプロジェクトを作成し、依存関係を追加します。ここでは例として、Calendar APIのクライアントライブラリを追加します。以下のページで、サポートされているAPI一覧があります。バージョンナンバーをクリックすると、詳細が見られます。なお、クライアントライブラリ共通のAPIはGoogle.Apisパッケージ、認証のAPIはGoogle.Apis.Authパッケージに独立しており、依存関係としてインストールされます。複数APIのクライアントライブラリを追加する場合は、これらを明示的に追加しておいたほうが、バージョン管理が楽かもしれません。ダウンロードした鍵ファイルを、プロジェクトのルートに置きます。間違って公開しないよう、注意しましょう。本番では、環境変数で渡すなど、セキュアな方法を使ってください。C#のクライアントライブラリでは、ICredentialを実装したクラスが、取得した認可情報を保持することになっています。このICredentialのインスタンスを使って各APIにアクセスすることになります。service_account_key.jsonが、サービスアカウントの鍵ファイルです。scopeは、認可を得たい権限です。APIごとに設定されています。Calendar APIの場合は、calendar、calendar.readonlyの二つのscopeがあります。C#のクライアントライブラリでは、各API用クライアントライブラリに定数として登録されています。client_secret.jsonが、OAuth2認証の鍵ファイルです。実行すると、おなじみのGoogleのOAuth認可ページがブラウザで開きます。ユーザーアクションを待つ必要があるので、Taskが返ります。UserCredentialは、もちろんICredentialを実装したクラスです。あとは、取得したICredentialのインスタンスを使って、各APIにアクセスするだけです。
以下は、Calendar APIにアクセスするサンプルです。リポジトリはこちらです。


