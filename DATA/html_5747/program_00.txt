public class AssetBundleManagerSingleton : SingletonMonoBehaviour&lt;AssetBundleManagerSingleton&gt;
{
    IEnumerator Start()
    {
        yield return StartCoroutine(Init());
    }

    IEnumerator Init()
    {
        var request = AssetBundles.AssetBundleManager.Initialize();
        if (request != null)
            yield return StartCoroutine(request);
    }

    /// &lt;summary&gt;
    /// 非同期でAssetBundleからAssetを読み込む
    /// &lt;/summary&gt;
    public void LoadASync&lt;T&gt;(string assetBundleName, string assetName, Action&lt;T&gt; callback)
        where T : UnityEngine.Object
    {
        StartCoroutine(LoadASyncAssetBundle&lt;T&gt;(assetBundleName, assetName, callback));
    }

    IEnumerator LoadASyncAssetBundle&lt;T&gt;(string assetBundleName, string assetName, Action&lt;T&gt; callback)
        where T : UnityEngine.Object
    {

        var request = AssetBundles.AssetBundleManager.LoadAssetAsync(assetBundleName, assetName, typeof(T));

        if (request == null)
            yield break;
        yield return StartCoroutine(request);

        T asset = request.GetAsset&lt;T&gt;();

        callback(asset);
    }

}

