この記事は、KLab Engineer Advent Calendar 2018 19日目の記事です。一言で表すなら、「どの音符をどのタイミングで鳴らすか」等の演奏に関する全ての情報が入っているファイルです。
これだけ聞くと音ゲーの譜面みたいですね！その通りです！この記事ではMIDIファイルから音ゲーに使えそうな譜面データに変換するプログラムを書きつつ解説します。
レーンに沿って流れてくるタイプの音ゲーの譜面を作るのにとても有効な手法です。MIDI解析の前準備としてノーツイベントとBPMイベントの構造体を定義します。
実際の譜面データになるものです。データ構造ですが、大きく分けて
・ヘッダチャンク
・トラックチャンク
の2部で構成されています。こちらを構造体にしますここからは、実際の解析コードを交えて解説していきます。MIDIファイルはバイナリデータのため、バイナリで読み込んでいきます。まずはヘッダチャンクの解析から。MIDIファイルはビッグエンディアン方式でデータが格納されているため、CPUに応じてバイトオーダー変換を行う必要があります
C#では BitConverter.IsLittleEndian を用いてエンディアンの判定を行います。次はトラックチャンクの解析です補足
チャンクIDやデータ部をエンディアン変換しないのは1バイトずつで表現されているため。MIDI解析のメインです。ここからノーツや速度変化のイベントを抽出します。データ部の構成は
前回のイベントからの経過時間(ms) デルタタイム 
次に イベントデータ
この２つが繰り返し格納されています。こちらもコードを交えながら解説していきたいと思います。デルタタイムは 可変長数値表現 を用いてデータ格納されています。ここはコードを見たほうが分かりやすいかもしれません。構造は単純なのですが、イベントの種類が無駄に多い。何のイベントかを表す ステータスバイト 
次に イベントに沿ったデータ
の２点構成。まずはステータスバイトからここで急にでてきた ランニングステータス ですが、
名前の割に難しいことはなく、「前回のイベントと同じだから使いまわしてね！」という意味です。
変数を外に出したのはこの使いまわしの為です。そして、ステータスバイトの値から何のイベントかを特定しデータを解析します。
ステータスバイトのイベント採番や、データの情報はこちらのサイトで詳細に解説されているのでガッツリ参考にさせていただきました。
2020/4/9追記 サイトが見れなくなっているっぽいので代替リンクを追加しました。これでノーツイベントとBPM変更イベントを格納し、音ゲーの基本的な譜面データが揃いました。
あともう一歩です。MIDIファイルのイベントデルタタイムは全て最初に設定されたテンポから計算されているため、
各イベント時間をその時に設定されている状態のテンポで計算しなおす必要があります。以上でMIDIファイルから譜面データ( noteList , tempoList )を作るコードは終了となります。本当は譜面データを元にUnity上で動かすまで書きたかったのですが、あまりに長くなってしまう（あと間に合わなかった…）ので今回はここで閉めさせていただきます…ゴメンナサイめちゃ長くなってしまいましたが、最後までお読みいただきありがとうございました。
この記事が音ゲーを作ってみたいと思う人への手助けになれば私は幸せです。スタンダードMIDIファイル
The MIDI File Format
MIDIファイル解析ソースコードの紹介
C言語でMIDI(SMF)データを読んでみる！
JavaScriptで可変長数値表現を使う


