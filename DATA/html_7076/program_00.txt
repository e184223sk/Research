using System;

namespace JankenTest
{
    public interface IHand
    {
        bool IsStrongerThan (IHand other);
        bool IsStrongerThanRock ();
        bool IsStrongerThanScissors ();
        bool IsStrongerThanPaper ();
    }

    public class Rock : IHand
    {
        public bool IsStrongerThan (IHand other)
        {
            return !other.IsStrongerThanRock ();
        }

        public bool IsStrongerThanRock ()
        {
            return true;
        }

        public bool IsStrongerThanScissors ()
        {
            return true;
        }

        public bool IsStrongerThanPaper ()
        {
            return false;
        }
    }

    public class Scissors : IHand
    {
        public bool IsStrongerThan (IHand other)
        {
            return !other.IsStrongerThanScissors ();
        }

        public bool IsStrongerThanRock ()
        {
            return false;
        }

        public bool IsStrongerThanScissors ()
        {
            return true;
        }

        public bool IsStrongerThanPaper ()
        {
            return true;
        }
    }

    public class Paper : IHand
    {
        public bool IsStrongerThan (IHand other)
        {
            return !other.IsStrongerThanPaper ();
        }

        public bool IsStrongerThanRock ()
        {
            return true;
        }

        public bool IsStrongerThanScissors ()
        {
            return false;
        }

        public bool IsStrongerThanPaper ()
        {
            return true;
        }
    }

    public class HandFactory
    {
        public static IHand Create (string handString)
        {
            if (handString == "R") {
                return new Rock ();
            }
            if (handString == "S") {
                return new Scissors ();
            }
            if (handString == "P") {
                return new Paper ();
            }
            throw new ArgumentException ($"{handString} is invalid hand.");
        }
    }

    public class JankenGame
    {
        public int Execute (IHand hand1, IHand hand2)
        {
            bool hand1IsStrongerThanHand2 = hand1.IsStrongerThan (hand2);
            bool hand2IsStrongerThanHand1 = hand2.IsStrongerThan (hand1);

            return (!hand1IsStrongerThanHand2 &amp;&amp; !hand2IsStrongerThanHand1) ? 0 :
                (hand1IsStrongerThanHand2) ? 1 : -1;
        }
    }
}

