
using NUnit.Framework;
using System;

namespace JankenTest
{
    public class Test
    {
        [TestCase ("R", "R")]
        [TestCase ("S", "S")]
        [TestCase ("P", "P")]
        public void ExecuteReturnZeroWhenHand1AndHand2AreSame (string hand1, string hand2)
        {
            var game = new JankenGame ();
            var h1 = HandFactory.Create (hand1);
            var h2 = HandFactory.Create (hand2);

            var actual = game.Execute (h1, h2);

            Assert.AreEqual (0, actual);
        }

        [TestCase ("R", "S")]
        [TestCase ("S", "P")]
        [TestCase ("P", "R")]
        public void ExecuteReturnOneWhenHand1IsStrongerThanHand2 (string hand1, string hand2)
        {
            var game = new JankenGame ();
            var h1 = HandFactory.Create (hand1);
            var h2 = HandFactory.Create (hand2);

            var actual = game.Execute (h1, h2);

            Assert.AreEqual (1, actual);
        }

        [TestCase ("S", "R")]
        [TestCase ("P", "S")]
        [TestCase ("R", "P")]
        public void ExecuteReturnMinusOneWhenHand2IsStrongerThanHand1 (string hand1, string hand2)
        {
            var game = new JankenGame ();
            var h1 = HandFactory.Create (hand1);
            var h2 = HandFactory.Create (hand2);

            var actual = game.Execute (h1, h2);

            Assert.AreEqual (-1, actual);
        }

        [TestCase ("r")]
        [TestCase ("s")]
        [TestCase ("p")]
        public void HandFactoryThrowExceptionWhenInvalidHandIsSpecified (string hand)
        {
            Assert.That (
                delegate { return HandFactory.Create (hand); },
                Throws.Exception.TypeOf&lt;ArgumentException&gt; ().And.Message.EqualTo ($"{hand} is invalid hand.")
            );
        }
    }
}

