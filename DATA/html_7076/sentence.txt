More than 5 years have passed since last update.こんな記事を読みました。オブジェクト指向ジャンケン: または石やハサミや紙を手クラスから派生させる是非について上記の記事を読んで気になった点があったので、本記事を書くことにしました（元記事を書かれた方、勝手にすみません）。元記事のタイトルには「石やハサミや紙を手クラスから派生させる是非について」とありますが、元記事ではその是非について述べられていません。私は継承を 基底クラスの機能を受け継ぐためではなく、概念的に同じものを抽象概念としてまとめるための機能 と捉えています。この考え方に立つと、「グー」「チョキ」「パー」は「手」という抽象概念にまとめることができるため継承を使って良さそうですが、元記事のような継承は すべきではない と思います。元記事の「グー」「チョキ」「パー」はラベル程度の意味しかなく、正しく抽象化できているとは言えないためです。あくまで一例ですが、じゃんけんプログラムをオブジェクト指向らしく書くとすると、下記のようになるのかなと思います。コードのアイデアは オブジェクトデザイン から得ています。テストコードも書いています（NUnitを使用）。例えば誰かに「じゃんけんとは何か？」と質問すると、多くの人は Wikipedia にあるような回答をすると思います。つまり多くの人は「じゃんけん」に「特殊な手」が存在するとは思っておらず、 「特殊な手を追加したじゃんけん」は「じゃんけん」とは別の新しい遊び なのです。従って、元記事にはこのコードにはプレーヤーの増減、ならびに必要に応じて特殊な手の形に対応する余地がある。とありますが、 個人的には 新しい遊びに対応できるよう設計することはやりすぎで、新しい遊びなので一からプログラムを書けば良いのでは と思っています。元記事のコードを見るとジャンケンのルール（ Rule クラス ）には、「手の強弱を判断する」という本来のルールに加え、「手を生成する」や「対戦方式（総当たり戦かトーナメント戦か勝ち抜き戦かなど）を決める」など、「ルール」という単語から想像できない意味も含まれています。このように単語に独自に意味をもたせてしまうと、メンバー間でのコミュニケーションにも支障が生じ、コードも理解・変更し難いものとなります。元記事の最後の主張（下記文章）からは、 コードブロックが短く可能な限り値を不変に保ったコード（つまり、理解しやすいコード） が目指すべきコードであるように読み取れます。それでも避けがたい仕様変更の惨禍に立ち向かうために私たちにすべきことはオブジェクト指向がしっくりくるとか来ないとかの次元の話ではなく、もっと単純かつ誰もが知っている普遍的なものであるように思う。すなわちコードブロックを短く保つこと、そして可能な限り値を不変に保つことだ。理解しやすさを求めるのであれば、オブジェクト指向に拘る必要はなく、下記のようなコードで良いのではないでしょうか。テストコードも書いています（NUnitを使用）。元記事で述べられている通り、拡張性の高い（変更コストの低い）コードを書くことは重要なことで、そのためのテクニックとしてオブジェクト指向があります。しかしオブジェクト指向は変更コストを下げるためのテクニックの一つにすぎません。他にも const教に入信する や DRYを意識したコードを書く など様々な方法があります。従ってタイトルにも書いた通り、オブジェクト指向は変更コストを下げるための一つのテクニック程度の認識で、ケースバイケースで適切な手法を採用できれば良いのではないでしょうか。オブジェクトデザインエリック・エヴァンスのドメイン駆動設計


