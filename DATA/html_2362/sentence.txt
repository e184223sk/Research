More than 1 year has passed since last update.当記事では、C#アプリケーションとデータをやり取りするAPIを作成して実際に動かしてみます。
C#アプリケーションから、ライブラリを使用して直接データベースに接続することも可能ですが、
C#等の高級言語は「リバースエンジニアリングしやすい」といった特徴や、そもそも外部からの接続を許してしまうデータベースはセキュアではないので、基本的にはAPIを通す必要があります。Visual Studio 2019 Professional
Windows 10 1903
.NET Framework: 4.7.2
XAMPP: 7.3.7
PHP: 7.3.7
Apache: 2.4.39
MariaDB: 10.3.16テーブルを新規作成します。
今回は例として以下の構造で作成しました。
今回作成するのは以下3つのファイルです。PHPのフルソースコードは以下の通りです。
今回はあくまで一例として行いますので、複数のデータが見つかった場合や例外エラーの処理は一切していません。.NET Frameworkを使用します。
Jsonを扱うので、Newtonsoft Jsonを予めNuGetでインストールして下さい。
using(WebClient wc = new WebClient()) { }としているのは、必ずリソースが破棄されるからです。
NameValueCollectionに値を格納し、それを渡す感じです。
Encoding.Default.GetString(wc.UploadValues(URL, Values));でPOSTし、返ってきた値を関数の返り値としています。
一応、WebExceptionはキャッチします。フォームがロードされたタイミングでハンドラーのURLをセットし、
NameValueCollectionに各値を格納してHandler.DoPost()するだけです。
Stringとして帰ってくるので、JObject.Parse()でパースする必要があります。InsertData
GetData
無事データのやり取りを行うことができました。
このとき、データベースの中身は以下のようになっています。正しい値を取得できていますね。今回は、C#アプリケーションとデータベースでのやり取りにAPIを使用してみました。
APIを使用しても、肝心の通信の中身が暗号化されていなければセキュアであるとは言えないですし、中間者攻撃も容易にできてしまいます。
実際に実装して運用する際は十分な注意を払う必要がありますね。通信内容の暗号化に関しては、セッションを利用して共通鍵方式で暗号化するのも手段の一つだと思います。


