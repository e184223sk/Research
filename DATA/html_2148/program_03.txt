
using MetaProgramming;

namespace Target
{
    [ConstExpr]
    public static class Test
    {
        [ConstExpr] public static int Field;

        [ConstExpr, ConstantInitializer(nameof(Field))]
        public static int Initializer()
        {
            return 14;
        }

        public static int Accessor() =&gt; Field;

        [ConstExpr]
        public static sbyte D()
        {
            return new Q&lt;sbyte&gt;(114).value;
            //return FFF&lt;int&gt;.PPT(14);
        }

        [ConstExpr]
        public static int D2()
        {
            return Q&lt;long&gt;.P(32);
            //return FFF&lt;int&gt;.PPT(14);
        }

        [ConstExpr]
        public static int Z() =&gt; D() &lt;&lt; 4;

        [ConstExpr]
        public static int Z2() =&gt; D2() - 4;

        [ConstExpr]
        public static int Z3&lt;T&gt;() where T : unmanaged =&gt; Y(1);

        [ConstExpr]
        public static int Z4() =&gt; Z3&lt;char&gt;();

        [ConstExpr]
        public static int Y(int a)
        {
            var arr = Array(24);
            var arr2 = Array(12);
            var arr3 = Array(4);
            var arr4 = Array(1);
            var arr5 = Array(9);
            if (a == 1 &amp;&amp; arr != null) return arr.Length;
            return Array(0).Length - 1;
        }

        [ConstExpr]
        public static double[] Array(int a)
        {
            var answer = new double[a];
            for (int i = 0; i &lt; answer.Length; i++)
            {
                answer[i] = i + 0.5;
            }
            return answer;
        }
    }

    [ConstExpr]
    interface T {}

    [ConstExpr]
    public struct Q&lt;J&gt; where J : unmanaged
    {
        public J value;
        [ConstExpr]
        public Q(J value)
        {
            this.value = value;
        }

        [ConstExpr]
        public static T P&lt;T&gt;(T v) where T : unmanaged =&gt; new Q&lt;T&gt;(v).value;
    }

    /*[ConstExpr]
    public static class FFF&lt;T&gt; where T : unmanaged
    {
        [ConstExpr]
        public static T PPT(T d)
        {
            return new Q&lt;T&gt;(d).value;
        }
    }*/
}

