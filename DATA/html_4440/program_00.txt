///&lt;summary&gt;10進数から26進数を求める&lt;/summary&gt;
public static string ToBase26(this long self)
{
    if (self &lt;= 0) return "";

    long n = (self % 26 == 0) ? 26 : self % 26;
    if (self == n) return ((char)(n + 64)).ToString();
    return ((self - n) / 26).ToBase26() + ((char)(n + 64)).ToString();
}
///&lt;summary&gt;26進数から10進数を求める&lt;/summary&gt;
public static long FromBase26(this string self)
{
    if (string.IsNullOrEmpty(self)) return 0;

    long result = 0;
    char[] chars = self.ToCharArray();
    int len = self.Length - 1;
    foreach (var c in chars)
    {
        int asc = (int)c - 64;
        if (asc &lt; 1 || asc &gt; 26) return 0;
        result += asc * (long)Math.Pow((double)26, (double)len--);
    }
    return result;
}

