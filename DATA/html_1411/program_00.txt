public static class Cipher
{
    private static readonly byte[] InitialzationVector = Encoding.UTF8.GetBytes(@"xxxxxxxxxxxxxxxx");
    private static readonly byte[] SharedKey = Encoding.UTF8.GetBytes(@"xxxxxxxxxxxxxxxx");
    private static readonly int BlockSize = InitialzationVector.Length * 8;
    private static readonly int KeySize = SharedKey.Length * 8;

    public static string Encrypt(string plainText)
    {
        using var rijndael = new RijndaelManaged
        {
            BlockSize = BlockSize,
            KeySize = KeySize,
            Mode = CipherMode.CBC,
            Padding = PaddingMode.PKCS7,
            IV = InitialzationVector,
            Key = SharedKey,
        };

        using var encryptor = rijndael.CreateEncryptor();
        var bytes = Encoding.UTF8.GetBytes(plainText);
        return Convert.ToBase64String(encryptor.TransformFinalBlock(bytes, 0, bytes.Length));
    }

    public static string Decrypt(string cipherText)
    {
        using var rijndael = new RijndaelManaged
        {
            BlockSize = BlockSize,
            KeySize = KeySize,
            Mode = CipherMode.CBC,
            Padding = PaddingMode.PKCS7,
            IV = InitialzationVector,
            Key = SharedKey,
        };

        using var decryptor = rijndael.CreateDecryptor();
        var bytes = Convert.FromBase64String(cipherText);
        var plain = decryptor.TransformFinalBlock(bytes, 0, bytes.Length);
        return Encoding.UTF8.GetString(plain);
    }
}

