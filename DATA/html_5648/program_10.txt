
// Model側(各種プロパティを実装した側)
// ここでBindableBaseは、Prism.Mvvm.BindableBaseのような、
// INotifyPropertyChanged実装済みのヘルパークラスだとする
public class Model : BindableBase{
    private int x;
    public int X{
        get =&gt; x;
        set{
            if(x != value){
                x = value;
                OnPropertyChanged();
            }
        }
    }
}
// ViewModel側(ReactivePropertyで中継する側)
public class ViewModel : INotifyPropertyChanged{
    private Model model = new Model();

    public ReactiveProperty&lt;T&gt; Property1 { get; }
    public ReactiveProperty&lt;T&gt; Property2 { get; }
    public ReactiveProperty&lt;T&gt; Property3 { get; }

    public MainWindowViewModel()
    {
        // BindingのModeがTwoWayなプロパティ(つまり双方向)
        Property1 = model.ToReactivePropertyAsSynchronized(m =&gt; m.X);
        // BindingのModeがOneWayなプロパティ(つまりView→ViewModelのみ)
        Property2 = model.ObserveProperty(m =&gt; m.X).ToReactiveProperty();
        // BindingのModeがOneWayToSourceなプロパティ(つまりViewModel→Viewのみ)
        Property3 = ReactiveProperty.FromObject(model, m =&gt; m.X);
    }
}


