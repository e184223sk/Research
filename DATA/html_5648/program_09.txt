
// バリデーション用のクラス
// (以下のサンプルは、int型にパースできた時のみ「入力値が正常」だと判断する)
using System.ComponentModel.DataAnnotations;
public class IntValidationAttribute : ValidationAttribute {
    public override bool IsValid(object value)
        =&gt; int.TryParse(value.ToString(), out var _);
}
// バリデーションを設定する
[IntValidationAttribute]
public ReactiveProperty&lt;string&gt; X {get;} = new ReactiveProperty&lt;string&gt;();
[IntValidationAttribute]
public ReactiveProperty&lt;string&gt; Y {get;} = new ReactiveProperty&lt;string&gt;();
// バリデーションが通る(入力値が正常)な時のみコマンドを有効にする
ButtonCommand = X.ObserveHasErrors.Select(x =&gt; !x).ToReactiveCommand();
// バリデーションが通らない(入力値が異常)な時のみコマンドを有効にする
ButtonCommand = X.ObserveHasErrors.ToReactiveCommand();
// 2つのバリデーションが通る時のみコマンドを有効にする
ButtonCommand = new[]{
    ButtonFlg1.ObserveHasErrors,
    ButtonFlg2.ObserveHasErrors
}.CombineLatest(x =&gt; x.All(y =&gt; !y)).ToReactiveCommand();

