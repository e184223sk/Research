
/* --------------- */
/* |従来の記述方法| */
/* --------------- */
using System.ComponentModel;
class ViewModelBase : INotifyPropertyChanged
{
    public event PropertyChangedEventHandler PropertyChanged;
    protected void NotifyPropertyChanged(string parameter)
     =&gt; PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(parameter));
}
class ViewModel : ViewModelBase 
{
    private int selectedMode;
    public int SelectedMode {
        get{ return selectedMode; }
        set{
            if(value == selectedMode)
                return;
            selectedMode = value;
            DoFunc(selectedMode);
            NotifyPropertyChanged(nameof(SelectedMode));
        }
    }
}

/* --------------------------------- */
/* |ReactivePropertyにおける記述方法| */
/* --------------------------------- */
using System;
using System.ComponentModel;
using Reactive.Bindings;
class ViewModel : INotifyPropertyChanged {
    public event PropertyChangedEventHandler PropertyChanged;
    public ReactiveProperty&lt;int&gt; SelectedMode {get;} = new ReactiveProperty&lt;int&gt;();

    //　コンストラクタ内で
    SelectedMode.Subscribe(x =&gt; DoFunc(x));
}


