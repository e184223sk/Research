
using UnityEngine;
using NUnit.Framework;
// AssertはNUnitのではなくUnityのものを使う
using Assert = UnityEngine.Assertions.Assert;

/// &lt;summary&gt;
/// MathUtilsのテストクラス
/// &lt;/summary&gt;
public class MathUtilsTest
{
    [Test]
    public void IsInsideOfSectorTestRounded()
    {
        Assert.AreEqual(MathUtils.IsInsideOfCircle(new Vector2(0f, 0f), Vector2.zero, 1f), true);
        Assert.AreEqual(MathUtils.IsInsideOfCircle(new Vector2(1f, 0f), Vector2.zero, 1f), true);
        Assert.AreEqual(MathUtils.IsInsideOfCircle(new Vector2(0f, 1f), Vector2.zero, 1f), true);
        Assert.AreEqual(MathUtils.IsInsideOfCircle(new Vector2(-1f, 0f), Vector2.zero, 1f), true);
        Assert.AreEqual(MathUtils.IsInsideOfCircle(new Vector2(0f, -1f), Vector2.zero, 1f), true);
        Assert.AreEqual(MathUtils.IsInsideOfCircle(new Vector2(1.1f, 0f), Vector2.zero, 1f), false);
        Assert.AreEqual(MathUtils.IsInsideOfCircle(new Vector2(0f, 1.1f), Vector2.zero, 1f), false);
        Assert.AreEqual(MathUtils.IsInsideOfCircle(new Vector2(-1.1f, 0f), Vector2.zero, 1f), false);
        Assert.AreEqual(MathUtils.IsInsideOfCircle(new Vector2(0f, -1.1f), Vector2.zero, 1f), false);
        Assert.AreEqual(MathUtils.IsInsideOfCircle(new Vector2(0.7f, 0.7f), Vector2.zero, 1f), true);
        Assert.AreEqual(MathUtils.IsInsideOfCircle(new Vector2(-0.7f, -0.7f), Vector2.zero, 1f), true);
        Assert.AreEqual(MathUtils.IsInsideOfCircle(new Vector2(1f, 1f), Vector2.zero, 1f), false);
        Assert.AreEqual(MathUtils.IsInsideOfCircle(new Vector2(-1f, -1f), Vector2.zero, 1f), false);
        Assert.AreEqual(MathUtils.IsInsideOfCircle(new Vector2(1.7f, 1.7f), new Vector2(1f, 1f), 1f), true);
        Assert.AreEqual(MathUtils.IsInsideOfCircle(new Vector2(-1.7f, -1.7f), new Vector2(-1f, -1f), 1f), true);
        Assert.AreEqual(MathUtils.IsInsideOfCircle(new Vector2(0.7f, 0.7f), new Vector2(2f, 2f), 1f), false);
        Assert.AreEqual(MathUtils.IsInsideOfCircle(new Vector2(-0.7f, -0.7f), new Vector2(-2f, -2f), 1f), false);
    }

    [Test]
    public void IsInsideOfSectorTest90deg()
    {
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(1f, 0f), Vector2.zero, 0f, 90f, 1f), true);
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(0f, 1f), Vector2.zero, 0f, 90f, 1f), true);
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(-1f, 0f), Vector2.zero, 0f, 90f, 1f), false);
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(0f, -1f), Vector2.zero, 0f, 90f, 1f), false);
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(0.5f, 0.5f), Vector2.zero, 0f, 90f, 1f), true);
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(0.5f, -0.5f), Vector2.zero, 0f, 90f, 1f), false);
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(-0.5f, 0.5f), Vector2.zero, 0f, 90f, 1f), false);
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(-0.5f, -0.5f), Vector2.zero, 0f, 90f, 1f), false);
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(1f, 0f), Vector2.zero, 260f, 350f, 1f), false);
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(0f, 1f), Vector2.zero, 260f, 350f, 1f), false);
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(-1f, 0f), Vector2.zero, 260f, 350f, 1f), false);
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(0f, -1f), Vector2.zero, 260f, 350f, 1f), true);
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(0.5f, 0.5f), Vector2.zero, 260f, 350f, 1f), false);
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(0.5f, -0.5f), Vector2.zero, 260f, 350f, 1f), true);
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(-0.5f, 0.5f), Vector2.zero, 260f, 350f, 1f), false);
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(-0.5f, -0.5f), Vector2.zero, 260f, 350f, 1f), false);
    }

    [Test]
    public void IsInsideOfSectorTest270deg()
    {
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(1f, 0f), Vector2.zero, 89f, 359f, 1f), false);
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(0f, 1f), Vector2.zero, 89f, 359f, 1f), true);
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(-1f, 0f), Vector2.zero, 89f, 359f, 1f), true);
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(0f, -1f), Vector2.zero, 89f, 359f, 1f), true);
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(0.5f, 0.5f), Vector2.zero, 90f, 360f, 1f), false);
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(0.5f, -0.5f), Vector2.zero, 90f, 360f, 1f), true);
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(-0.5f, 0.5f), Vector2.zero, 90f, 360f, 1f), true);
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(-0.5f, -0.5f), Vector2.zero, 90f, 360f, 1f), true);
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(1f, 0f), Vector2.zero, -10f, 260f, 1f), true);
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(0f, 1f), Vector2.zero, -10f, 260f, 1f), true);
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(-1f, 0f), Vector2.zero, -10f, 260f, 1f), true);
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(0f, -1f), Vector2.zero, -10f, 260f, 1f), false);
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(0.5f, 0.5f), Vector2.zero, -10f, 260f, 1f), true);
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(0.5f, -0.5f), Vector2.zero, -10f, 260f, 1f), false);
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(-0.5f, 0.5f), Vector2.zero, -10f, 260f, 1f), true);
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(-0.5f, -0.5f), Vector2.zero, -10f, 260f, 1f), true);
    }

    [Test]
    public void IsInsideOfSectorTest30deg()
    {
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(1f, 0f), Vector2.zero, 0f, 30f, 1f), true);
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(0f, 1f), Vector2.zero, 0f, 30f, 1f), false);
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(0.5f, 0.5f), Vector2.zero, 0f, 30f, 1f), false);
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(0.9f, 0.2f), Vector2.zero, 0f, 30f, 1f), true);
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(0f, -1f), Vector2.zero, 260f, 290f, 1f), true);
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(1f, 0f), Vector2.zero, 260f, 290f, 1f), false);
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(0.5f, -0.5f), Vector2.zero, 260f, 290f, 1f), false);
        Assert.AreEqual(MathUtils.IsInsideOfSector(new Vector2(0.2f, -0.9f), Vector2.zero, 260f, 290f, 1f), true);
    }
}

