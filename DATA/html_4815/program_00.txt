using UnityEngine;

/// &lt;summary&gt;
/// 計算に関するUtilityクラス
/// &lt;/summary&gt;
public class MathUtils
{
    /// &lt;summary&gt;
    /// 点と円の内外判定を行う
    /// &lt;/summary&gt;
    /// &lt;param name="target"&gt;判定する座標&lt;/param&gt;
    /// &lt;param name="radius"&gt;円の半径&lt;/param&gt;
    /// &lt;returns&gt;点が円の内部にあれば真を返す&lt;/returns&gt;
    public static bool IsInsideOfCircle(Vector2 target, float radius)
    {
        if (Mathf.Pow(target.x, 2) + Mathf.Pow(target.y, 2) &lt;= Mathf.Pow(radius, 2))
        {
            return true;
        }
        return false;
    }

    /// &lt;summary&gt;
    /// 点と円の内外判定を行う
    /// &lt;/summary&gt;
    /// &lt;param name="target"&gt;判定する座標&lt;/param&gt;
    /// &lt;param name="center"&gt;円の中心座標&lt;/param&gt;
    /// &lt;param name="radius"&gt;円の半径&lt;/param&gt;
    /// &lt;returns&gt;点が円の内部にあれば真を返す&lt;/returns&gt;
    public static bool IsInsideOfCircle(Vector2 target, Vector2 center, float radius)
    {
        var diff = target - center;
        return IsInsideOfCircle(diff, radius);
    }

    /// &lt;summary&gt;
    /// 点と扇形の内外判定を行う
    /// &lt;/summary&gt;
    /// &lt;param name="target"&gt;判定する座標&lt;/param&gt;
    /// &lt;param name="center"&gt;扇形の中心座標&lt;/param&gt;
    /// &lt;param name="startDeg"&gt;扇形の開始角(度数法)&lt;/param&gt;
    /// &lt;param name="endDeg"&gt;扇形の終了角(度数法)&lt;/param&gt;
    /// &lt;param name="radius"&gt;扇形の半径&lt;/param&gt;
    /// &lt;returns&gt;点が扇形の内部にあれば真を返す&lt;/returns&gt;
    public static bool IsInsideOfSector(Vector2 target, Vector2 center, float startDeg, float endDeg, float radius)
    {
        var diff = target - center;
        var startRad = startDeg * Mathf.Deg2Rad;
        var endRad = endDeg * Mathf.Deg2Rad;
        var startVec = new Vector2(Mathf.Cos(startRad), Mathf.Sin(startRad));
        var endVec = new Vector2(Mathf.Cos(endRad), Mathf.Sin(endRad));

        // 円の内外判定
        if (!IsInsideOfCircle(diff, radius))
        {
            return false;
        }

        // 扇型の角度が180度未満の場合
        if (GetCross2d(startVec, endVec) &gt; 0)
        {
            // diff が startVec より左側 *かつ* diff が endVec より右側の時
            if (GetCross2d(startVec, diff) &gt;= 0 &amp;&amp; GetCross2d(endVec, diff) &lt;= 0)
            {
                return true;
            }
            return false;
        }
        // 扇型の角度が180度以上の場合
        else
        {
            // diff が startVec より左側 *または* diff が endVec より右側の時
            if (GetCross2d(startVec, diff) &gt;= 0 || GetCross2d(endVec, diff) &lt;= 0)
            {
                return true;
            }
            return false;
        }
    }

    static float GetCross2d(Vector2 a, Vector2 b)
    {
        return GetCross2d(a.x, a.y, b.x, b.y);
    }

    static float GetCross2d(float ax, float ay, float bx, float by)
    {
        return ax * by - bx * ay;
    }
}

