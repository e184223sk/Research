2018/05/07 に ML.NET 0.1 がプレビュー リリースされてから、すでに 2 年半が経ち、多くの機能強化がされ、現在(2020 年 10 月時点)では、ML.NET 1.5.2 が最新のバージョンとなります。2019 年 9 月にリリースされた、ML.NET 1.4.0 では、画像分類が正式にサポートされました。
これで、独自の画像を使った、独自の画像分類モデルを開発できるようになりました。以下から学習済モデルを選択し、転移学習で画像データの学習を行うことができます。ML.NET の画像分類の仕組みとしては、下位では Tensorflow が使われていて、Tensorflow API の .NET Standard ライブラリである TensorFlow.NET をラップした形で、画像分類系の API が実装されています。今回は、ML.NET を利用して、犬と猫の品種の画像データを学習して、犬猫品種画像分類 AI を作成する手順を紹介したいと思います。Visual Studio 2019 を起動し、[新しいプロジェクトの作成] - [コンソール アプリ(.NET Core)] を選択し、[次へ] を選択、[プロジェクト名] に任意のプロジェクト名(ここでは、 "PetClassification001" ) を入力し [作成] を選択します。[ソリューション エクスプローラー] から、プロジェクトを選択し、右クリックメニューから、[NuGet パッケージの管理] を選択します。[参照] タブの [検索]　テキスト ボックスに "Microsoft.ML" と入力し、[Microsoft.ML] を選択し、[インストール] を選択し、以降画面の指示に従い "Microsoft.ML" をインストールします。
続いて、同様の手順で、"Microsoft.ML.Vision"、"Microsoft.ML.ImageAnalytics"、"SciSharp.TensorFlow.Redist" を検索し、インストールします。
画像分類を行うためには、この "Microsoft.ML.Vision" ライブラリが必要です。
"Microsoft.ML.ImageAnalytics" は、画像の加工等に利用します。
"SciSharp.TensorFlow.Redist" は、TensorFlow.NET のライブラリです。


データセットは、オックスフォード大学の Visual Geometry Group が公開している The Oxford-IIIT Pet Dataset を使用します。
以下のサイトから、[Downloads] - [1.Dataset] を選択して、images.tar.gz をダウンロードして、任意のフォルダーに展開しておいてください。7,390 個の画像データ (*.jpg) が展開されます。画像ファイル名にラベルが含まれています。ファイル名が、"品種_number.jpg" という書式になっています。これらのファイルをプロジェクトに追加していきます。[ソリューション エクスプローラー] から、プロジェクトを選択し、右クリックメニューから、[追加] - [新しいフォルダー] を選択し、フォルダー名を "DataSet" とします。さらに、作成したフォルダーを選択し、右クリックメニューから、[追加] - [新しいフォルダー] を選択し、フォルダー名を "PetImages" とします。
次に、"PetImages" を選択し、[エクスプローラーでフォルダーを開く] を選択し、対象フォルダーをエクスプローラーで開きます。同フォルダーへ、展開した 7,390 個の画像ファイル (*.jpg) を移動または、コピーします。
次に、画像ファイルのパスのリストをテキストファイルに書き出します。コマンド プロンプトで、"PetImages" フォルダーへ移動し、以下のコマンドを実行します。パス一覧の出力先ファイル名は、"_petImageFileList.txt" としています。
_petImageFileList.txt には、各画像のフルパスが一覧されます。[ソリューション エクスプローラー] から、"_petImageFileList.txt" を選択し、[プロパティ] - [出力ディレクトリにコピー] から、"常にコピーする" を選択します。
これで、ビルドしたモジュールのカレントに、画像ファイルのパスが一覧されたテキストファイル "_petImageFileList.txt" がコピーされるようになります。学習データのカラムの定義を行います。[ソリューション エクスプローラー] から、プロジェクトを選択し、右クリックメニューから、[追加] - [クラス] - [名前] に "PetData" と入力し、[追加] を選択します。PetData.cs に、以下のコードを記述します。
PetData クラスは、ラベルと画像データの読み込みに、PetDataPrediction は、推論結果の格納に使用します。以降から、"Program.cs" にコードを追加していきます。
はじめに、以下のコードで各ライブラリを using しておきます。以降のコードを Main メソッドに順に記述していきます。まずは、品種文字列とファイルのパスを格納した PetData の一覧を作成します。次に、データセットを加工していきます。
Label 列を作成し、品種文字列を数値に変換しています。
また、RawImageBytes 列を作成し、パスから画像をロードしています。次に、加工したデータを学習データ、検証データ、評価データに分割します。
ここでは、学習データ: 80%、検証データ: 18%、評価データ: 2% に分割しています。どのように学習を行うかの定義を行います。ここでは、転移学習を行う学習モデルとして、Residual Network V2 50 層 を指定しています。ImageClassificationTrainer.Architecture　列挙型でその他の学習モデルを指定できます。
また、ここで、エポック、バッチサイズ等のハイパーパラメータも指定できます。最後に、作成した学習モデルを評価データで性能を評価します。
評価指標および推論結果を HTML で書き出しています。書き出した HTML(&lt;プロジェクト フォルダー&gt;\bin\Debug\netcoreapp3.1 以下に出力) を見ていきます。
今回の学習モデルの各指標は、以下の様になりました。
評価データの範囲では、かなり性能の高い学習モデルが出来ているようです。

かなり高い確率で、アビシニアン(Abyssinian)という品種を特定出来ています。

アビシニアン(Abyssinian)とベンガル(Bengal)を正しく分類できています。

ブリティッシュショートヘア(British_Shorthair)をロシアンブルー(Russian_Blue)と間違えています。

逆に、ロシアンブルー(Russian_Blue)をブリティッシュショートヘア(British_Shorthair)と間違えているパターンもあります。
ML.NET で画像分類がサポートされました。.NET プログラミングの知識で、カスタムの画像分類を実現するカスタムの機械学習モデルを開発できるようになりました。さらに、転移学習により画像分類の学習モデル開発できるため、学習データも少量で済み、学習に要する時間も少なくて済みます。
これまで、.NET でアプリケーションを開発してきたエンジニアにとっては、既存のアプリケーションに独自の機械学習モデルを組み込み、機械学習ならではの機能を拡張することができるようになったと考えます。


