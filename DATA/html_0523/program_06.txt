

// テストデータで推論を実行
IDataView testDataPredictionsDataView = trainedModel.Transform(testDataView);
// テストデータでの推論結果をもとに評価指標を計算
var metrics = mlContext.MulticlassClassification.Evaluate(testDataPredictionsDataView);

// ラベルと品種文字列のキーバリューを取得
VBuffer&lt;ReadOnlyMemory&lt;char&gt;&gt; keyValues = default;
trainDataView.Schema["Label"].GetKeyValues(ref keyValues);


string testFilePath = $@".\test{DateTimeOffset.Now:yyyyMMddHHmmss}.html";

// HTML で評価結果を書き出し
using (var writer = new StreamWriter(testFilePath))
{
    writer.WriteLine($"&lt;html&gt;&lt;head&gt;&lt;title&gt;{Path.GetFileName(_modelFilePath)}&lt;/title&gt;");
    writer.WriteLine("&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" integrity=\"sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin=\"anonymous\"&gt;");
    writer.WriteLine("&lt;/head&gt;&lt;body&gt;");

    writer.WriteLine($"&lt;h1&gt;Metrics for {Path.GetFileName(_modelFilePath)}&lt;/h1&gt;");
    // メトリックの書き出し
    writer.WriteLine("&lt;div&gt;&lt;table class=\"table table-striped\"&gt;");
    writer.WriteLine($"&lt;tr&gt;&lt;td&gt;MicroAccuracy&lt;/td&gt;&lt;td&gt;{metrics.MicroAccuracy:0.000}&lt;/td&gt;&lt;/tr&gt;&lt;/tr&gt;");
    writer.WriteLine($"&lt;tr&gt;&lt;td&gt;MacroAccuracy&lt;/td&gt;&lt;td&gt;{metrics.MacroAccuracy:0.000}&lt;/td&gt;&lt;/tr&gt;&lt;/tr&gt;");
    writer.WriteLine($"&lt;tr&gt;&lt;td&gt;Precision&lt;/td&gt;&lt;td&gt;{metrics.ConfusionMatrix.PerClassPrecision.Average():0.000}&lt;/td&gt;&lt;/tr&gt;&lt;/tr&gt;");
    writer.WriteLine($"&lt;tr&gt;&lt;td&gt;Recall&lt;/td&gt;&lt;td&gt;{metrics.ConfusionMatrix.PerClassRecall.Average():0.000}&lt;/td&gt;&lt;/tr&gt;&lt;/tr&gt;");
    writer.WriteLine($"&lt;tr&gt;&lt;td&gt;LogLoss&lt;/td&gt;&lt;td&gt;{metrics.LogLoss:0.000}&lt;/td&gt;&lt;/tr&gt;&lt;/tr&gt;");
    writer.WriteLine($"&lt;tr&gt;&lt;td&gt;LogLossReduction&lt;/td&gt;&lt;td&gt;{metrics.LogLossReduction:0.000}&lt;/td&gt;&lt;/tr&gt;&lt;/tr&gt;");

    // クラス毎の適合率
    writer.WriteLine("&lt;tr&gt;&lt;td&gt;PerClassPrecision&lt;/td&gt;&lt;td&gt;");
    metrics.ConfusionMatrix.PerClassPrecision
    .Select((p, i) =&gt; (Precision: p, Index: i))
    .ToList()
    .ForEach(p =&gt;
        writer.WriteLine($"{keyValues.GetItemOrDefault(p.Index)}: {p.Precision:0.000}&lt;br /&gt;"));
    writer.WriteLine("&lt;/td&gt;&lt;/tr&gt;");

    // クラス毎の再現率
    writer.WriteLine("&lt;tr&gt;&lt;td&gt;PerClassRecall&lt;/td&gt;&lt;td&gt;");
    metrics.ConfusionMatrix.PerClassRecall
    .Select((p, i) =&gt; (Recall: p, Index: i))
    .ToList()
    .ForEach(p =&gt;
        writer.WriteLine($"{keyValues.GetItemOrDefault(p.Index)}: {p.Recall:0.000}&lt;br /&gt;"));
    writer.WriteLine("&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;");

    // 評価データ毎の分類結果
    writer.WriteLine($"&lt;h1&gt;Predictions&lt;/h1&gt;");
    writer.WriteLine($"&lt;div&gt;&lt;table class=\"table table-bordered\"&gt;");

    foreach (var prediction in predictions)
    {
        writer.WriteLine($"&lt;tr&gt;&lt;td&gt;");
        // 画像ファイル名
        writer.WriteLine($"{Path.GetFileName(prediction.ImageFilePath)}&lt;br /&gt;");
        // 正解ラベル
        writer.WriteLine($"Actual Value: {prediction.Breed}&lt;br /&gt;");
        // 推論結果
        writer.WriteLine($"Predicted Value: {prediction.PredictedBreed}&lt;br /&gt;");
        // 画像
        writer.WriteLine($"&lt;img class=\"img-fluid\" src=\"{prediction.ImageFilePath}\" /&gt;&lt;/td&gt;");                    
        // クラス毎の推論結果
        writer.WriteLine($"&lt;td&gt;");
        prediction.Score.Select((s, i) =&gt; (Index: i, Label: keyValues.GetItemOrDefault(i), Score: s))
        .OrderByDescending(c =&gt; c.Score)
        .Take(10) // 上位 10 件
        .ToList()
        .ForEach(c =&gt;
        {
            writer.WriteLine($"{c.Label}: {c.Score:P}&lt;br /&gt;");
        });

        writer.WriteLine("&lt;/td&gt;&lt;/tr&gt;");
    }

    writer.WriteLine("&lt;/table&gt;&lt;/div&gt;");
    writer.WriteLine("&lt;/body&gt;&lt;/html&gt;");
}


