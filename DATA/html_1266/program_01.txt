
  /// &lt;summary&gt;
  /// ConfigEntryクラス。設定の1レコード
  /// &lt;/summary&gt;
  public class ConfigEntry
  {
    /// &lt;summary&gt;
    /// 設定レコードののキー
    /// &lt;/summary&gt;
    public string Key { get; set; }
    /// &lt;summary&gt;
    /// 設定レコードの値
    /// &lt;/summary&gt;
    public string Value { get; set; }
    /// &lt;summary&gt;
    /// 子アイテム
    /// &lt;/summary&gt;
    public List&lt;ConfigEntry&gt; Children { get; set; }
    /// &lt;summary&gt;
    /// キーを指定して子アイテムからConfigEntryを取得します。
    /// &lt;/summary&gt;
    /// &lt;param name="key"&gt;&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public ConfigEntry Get(string key)
    {
      var entry = Children?.FirstOrDefault(rec =&gt; rec.Key == key);
      if (entry == null)
      {
        if (Children == null)
          Children = new List&lt;ConfigEntry&gt;();
        entry = new ConfigEntry() { Key = key };
        Children.Add(entry);
      }
      return entry;
    }
    /// &lt;summary&gt;
    /// 子アイテムにConfigEntryを追加します。
    /// &lt;/summary&gt;
    /// &lt;param name="key"&gt;キー&lt;/param&gt;
    /// &lt;param name="o"&gt;設定値&lt;/param&gt;
    public void Add(string key, string o)
    {
      ConfigEntry entry = Children?.FirstOrDefault(rec =&gt; rec.Key == key);
      if (entry != null)
        entry.Value = o;
      else
      {
        if (Children == null)
          Children = new List&lt;ConfigEntry&gt;();
        entry = new ConfigEntry() { Key = key, Value = o };
        Children.Add(entry);
      }
    }
    /// &lt;summary&gt;
    /// 子アイテムからConfigEntryを取得します。存在しなければ新しいConfigEntryが作成されます。
    /// &lt;/summary&gt;
    /// &lt;param name="key"&gt;キー&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public ConfigEntry this[string key]
    {
      set =&gt; Add(key, null);
      get =&gt; Get(key);
    }
    /// &lt;summary&gt;
    /// 子アイテムからConfigEntryを取得します。存在しなければ新しいConfigEntryが作成されます。
    /// &lt;/summary&gt;
    /// &lt;param name="keys"&gt;キー、カンマで区切って階層指定します&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public ConfigEntry this[params string[] keys]
    {
      set
      {
        ConfigEntry entry = this;
        for (int i = 0; i &lt; keys.Length; i++)
        {
          entry = entry[keys[i]];
        }
      }
      get
      {
        ConfigEntry entry = this;
        for (int i = 0; i &lt; keys.Length; i++)
        {
          entry = entry[keys[i]];
        }
        return entry;
      }
    }

    /// &lt;summary&gt;
    /// 指定したキーが子アイテムに存在するか調べます。再帰的調査はされません。
    /// &lt;/summary&gt;
    /// &lt;param name="key"&gt;キー&lt;/param&gt;
    /// &lt;returns&gt;キーが存在すればTrue&lt;/returns&gt;
    public bool Exists(string key) =&gt; Children?.Any(c =&gt; c.Key == key) ?? false;
    /// &lt;summary&gt;
    /// 指定したキーが子アイテムに存在するか調べます。階層をまたいだ指定をします。
    /// &lt;/summary&gt;
    /// &lt;param name="keys"&gt;キー、カンマで区切って階層指定します。&lt;/param&gt;
    /// &lt;returns&gt;キーが存在すればTrue&lt;/returns&gt;
    public bool Exists(params string[] keys)
    {
      ConfigEntry entry = this;
      for (int i = 0; i &lt; keys.Length; i++)
      {
        if (entry.Exists(keys[i]) == false)
          return false;
        entry = entry[keys[i]];
      }
      return true;
    }
  }

