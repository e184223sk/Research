More than 1 year has passed since last update.四次元図形、いいですよね。
何だそれは、という人は「超立方体」「超球」なんかでググると未知の世界が拓けると思います。
私が初めて四次元に触れたのはこの動画シリーズでした。四次元図形を使った面白い表現をUnityでできないかな、投影とか切断とかどうやってるんだろう、と思って諸々調べて実装したので、まとめておこうと思います。
扱う図形は四次元の超立方体（正八胞体）のみ。理論の方は深入りせず、実装メインで。↓こんなのを作りました。
四次元遊びまとめ黒球：超立方体の頂点（透視投影）水色線：超立方体の辺（透視投影）水膜：超立方体の面（透視投影）赤線：超立方体の切断面（u=0）QL, QRは６軸の回転速度 pic.twitter.com/Jej4D3J28J※シェーダはNextGen Spritesを使用。無料Asset。Unityで普段使っている座標系は三次元です。しかしこれから扱う図形は四次元なので、四次元座標を表す型を自分で用意する必要があります。
Vector4を使う手もありますが、どうやら四次元座標の回転処理のときにクォータニオン（四元数）を使うと都合がいいっぽい。
しかしUnityのQuaternionは勝手に余計な処理を挟んでくるみたいなので、ここではオレオレQuaternionを作ることにします。いつもの$x,y,z$軸に第四次元の$u$軸を加えた四次元座標$(u,x,y,z)$を、クォータニオン $q=u+xi+yj+zk$という形で表すことにしましょう。なお、回転以外の文脈では単なる四次元ベクトルとしても扱います。UnityでQuaternionを作る場合、クォータニオンを完全に理解した変態プロ以外は四引数コンストラクタは使わないでしょう。
割とよく使うであろうQuaternion.Euler(x, y, z)に相当するコンストラクタも作っておきます。クォータニオン同士やクォータニオンとスカラーの間の演算を定義します。
加減算やスカラー倍なんかはやるだけなので省略して、ちょっとややこしいクォータニオン間の積だけ。
適当に調べれば出てきますが、↓こんな感じ。我々は四次元人ではないので、四次元の物体をそのまま知覚することはできません。どうにかして三次元に落とし込む必要がありますが、その手段の一つとして投影があります。三次元の物体に光を当てると二次元の影が得られるように、四次元の物体に光を当てると三次元の影を得ることができます。ここでは見栄えや$u$軸方向の情報保持も考えて透視投影をすることにしましょう。簡単のため、光源は$u$軸上の点$\ {\bf f}=(f,0,0,0)$、投影先のスクリーン（我々が知覚できる空間）は$\ u=0$で固定します。
ある四次元空間上の点 ${\bf v}=(v_u,v_x,v_y,v_z)\ $の投影先の点を ${\bf v'}=(v'_u,v'_x,v'_y,v'_z)$とすると、ある実数$t$があってですが、$v'_u=0$ なので、が得られ、${\bf v'}$ が求まります。三次元→二次元の場合とやってることは変わりません。
MyQuaternion構造体のインスタンスメソッドにしておきましょう。三次元空間において、原点を中心とした立方体は、$(\pm1,\pm1,\pm1)$に8頂点を置いて最近傍頂点間を結べば作成できます。
四次元空間において、原点を中心とした超立方体は、$(\pm1,\pm1,\pm1,\pm1)$に16頂点を置いて最近傍頂点間を結べば作成できます。距離は普通にユークリッドノルムです。簡単ですね。$(\pm1,\pm1,\pm1,\pm1)$をそれぞれ透視投影 $(f=2)$ した位置にSphereを置き、頂点の接続をLineRendererで示したのが以下の図です。Wikipediaの図とも一致しますね。三次元空間における（原点を中心とする）回転は、$xy\ $平面、$yz\ $平面、$zx\ $平面に沿った回転に分解することができます。
四次元空間においてはここに$ux\ $平面、$uy\ $平面、$uz\ $平面が加わるので、６種類の回転を組み合わせて一つの回転を表現することになります。詳しいことはWikipediaあたりに譲るとして、結論だけ。簡単ですね。MyQuaternion構造体のインスタンスメソッドにしておきます。ではどう６軸の回転角を指定するかですが、ここで先程定義しておいたオイラー角からの変換が使えます。これを使って先程の超立方体を回転させてみたのがこちら。
基本的な回転 pic.twitter.com/FnXlrEVVuKこんな感じで基本的な回転は比較的わかりやすいですが、複数の軸を組み合わせると冒頭に示したようなわけのわからないものになります。四次元のオブジェクトを三次元に落とし込む別の方法として、超平面による切断があります。
三次元のオブジェクトを平面で切断すると二次元の断面図が得られるのと同じように、四次元のオブジェクトを超平面で切断すると三次元の断面図が得られるわけです。三次元の物体をある平面で切断する場合、物体の各面と切断面との交線で囲まれた領域（二次元）が断面となります。
四次元の物体をある超平面で切断する場合、物体の各胞と切断面との交面で囲まれた領域（三次元）が断面（断胞？）となります。
このとき、交面は物体の各面と切断面の交線で囲まれた領域（二次元）なので、結局やることは三次元のときと同じで、「（超）平面と物体の各面との交線を求める」です。ここでは三角メッシュを総なめしていく手法で実装します（もっといい実装あったら教えてください）。ここで、太字で示している変数はベクトルですが、三次元でも四次元でも全く同じアルゴリズムを適用できます。
結果として現れる線分の集合は、三次元であれば二次元領域を、四次元であれば三次元領域を囲っているはずです。切断面を$u=0\ $で固定した場合、頂点のグループ判定は$u$成分の正負で決まります。内分点の方はですが、${\bf p_{01}},{\bf p_{02}}$の$u$成分は0なので、投影のときと同じように$t_1, t_2$を求めることができます。というわけで実装したのがこちら。計算された交線を全てLineRendererで出力しているだけですが、常に破綻のない三次元領域を示しているのが分かると思います。回転する超立方体の切断 pic.twitter.com/cUAFl66YFkナイーブ実装ですが一応コードも。で、これが何に使えるのかという話ですが。
今サークルで作っているゲームのグラフィックに取り入れてみようかなと考えてたり。


