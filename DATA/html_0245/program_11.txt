

public class Observable : IObservable&lt;int&gt;
{
    //購読されたIObserver&lt;int&gt;のリスト
    private List&lt;IObserver&lt;int&gt;&gt; m_observers = new List&lt;IObserver&lt;int&gt;&gt;();

    public IDisposable Subscribe(IObserver&lt;int&gt; observer)
    {
        if(!m_observers.Contains(observer))
            m_observers.Add(observer);
        //購読解除用のクラスをIDisposableとして返す
        return new Unsubscriber(m_observers, observer);
    }

    //購読解除用内部クラス
    private class Unsubscriber : IDisposable
    {
        //発行先リスト
        private List&lt;IObserver&lt;int&gt;&gt; m_observers;
        //DisposeされたときにRemoveするIObserver&lt;int&gt;
        private IObserver&lt;int&gt; m_observer;

        public Unsubscriber(List&lt;IObserver&lt;int&gt;&gt; observers, IObserver&lt;int&gt; observer)
        {
            m_observers = observers;
            m_observer = observer;
        }

        public void Dispose()
        {
            //Disposeされたら発行先リストから対象の発行先を削除する
            m_observers.Remove(m_observer);
        }
    }
}

