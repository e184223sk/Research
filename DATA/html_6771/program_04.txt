
using Discord;
using Discord.Audio;
using System;
using System.Threading.Tasks;
using NAudio.Wave;

namespace SinobigamiBot
{
    class VoiceSample
    {
        private DiscordClient Client { get; set; }
        public IAudioClient VoiceClient { get; set; }

        public VoiceSample(DiscordClient client)
        {
            Client = client;
        }

        /// &lt;summary&gt;
        /// これを呼び出して使う
        /// &lt;/summary&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public async Task SendAudio(Channel vChannel, string filepath)
        {
            await JoinChannel(vChannel);
            SendAudio(filepath);
        }

        private async Task JoinChannel(Channel vChannel)
        {
            VoiceClient = await Client.GetService&lt;AudioService&gt;().Join(vChannel);

        }

        private void SendAudio(string filepath)
        {
            if (!System.IO.File.Exists(filepath))
                throw new Exception("not found!!!!" + filepath);

            var channelCount = Client.GetService&lt;AudioService&gt;().Config.Channels; // Get the number of AudioChannels our AudioService has been configured to use.
            var OutFormat = new WaveFormat(48000, 16, channelCount); // Create a new Output Format, using the spec that Discord will accept, and with the number of channels that our client supports.
            using (var MP3Reader = new Mp3FileReader(filepath)) // Create a new Disposable MP3FileReader, to read audio from the filePath parameter
            using (var resampler = new MediaFoundationResampler(MP3Reader, OutFormat)) // Create a Disposable Resampler, which will convert the read MP3 data to PCM, using our Output Format
            {
                resampler.ResamplerQuality = 60; // Set the quality of the resampler to 60, the highest quality
                int blockSize = OutFormat.AverageBytesPerSecond / 50; // Establish the size of our AudioBuffer
                byte[] buffer = new byte[blockSize];
                int byteCount;

                while ((byteCount = resampler.Read(buffer, 0, blockSize)) &gt; 0) // Read audio into our buffer, and keep a loop open while data is present
                {
                    if (byteCount &lt; blockSize)
                    {
                        // Incomplete Frame
                        for (int i = byteCount; i &lt; blockSize; i++)
                            buffer[i] = 0;
                    }
                    VoiceClient.Send(buffer, 0, blockSize); // Send the buffer to Discord
                }
            }

        }
    }
}

