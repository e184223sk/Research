More than 1 year has passed since last update.WindowsフォームでDataGridView等を用いたデータベースアプリを構築する場合、
データの入れ物として型付きDataSetを使うのが定石かと思います。
しかしながら、型付きDataSetはデザイナの出来の悪さなどから、かなり嫌われているようです。
今回、型付きDataSetの代わりに通常のオブジェクト(POCO)をデータの入れ物として使ってみます。
サードパーティのライブラリとして、BindingListViewとDapperを使います。完成品はこちらに置いてあります
https://github.com/mono1729/BindingWithPoco今回のアプリは以下の流れで制作します。Productsテーブルのデータの入れ物になるクラスを用意します。
データが更新された際、画面に通知しなければいけないので、INotifyPropertyChangedの実装が必要です。
フィールドが多いと大変なので、T4テキストテンプレートやFodyを使うといいかもしれません。一度ビルドを行い、先ほど作成したクラスをVisual Studioのデータソースに登録すると、フォームデザイナにドラッグするだけで一覧と詳細を作成できます。
一緒にBindingSourceとBindingNavigatorコンポーネントが配置されますが、BindingNavigatorは今回使わないので消しましょう。フォームのコードビハインドで、バインドするためのコレクションを準備します。
ここではデータ保持用のBindingList&lt;Product&gt;とバインド用のBindingListView&lt;Product&gt;、２つのメンバを準備します。Micro-ORMのDapperを使ってProductsテーブルのデータを読み込み、BindingList&lt;Product&gt;に結果を入れます。
これを元データとして、BindingListView&lt;Product&gt;のオブジェクトを作ります(DataViewと同じ役割です)。
そしてBindingListView&lt;Product&gt;をBindingSource.DataSourceにセットします。
DataGridView.DataSourceにはBindingSourceをセットして、間接的にBindingListView&lt;Product&gt;を参照させます。テキストボックスを配置して、TextChangedイベントにフィルタ機能を実装します。
BindingListViewはDataTableと同じフィルタ式が使えません。
代わりに匿名メソッドでフィルタ条件を設定します。INotifyPropertyChangedとBindingListを用いているので、画面表示後にデータをいじっても変更が画面に反映されるはずです。
"Add row"ボタンと、"Modify first row"ボタンを配置して、検証用コードを実装します。ソート・フィルタも動きますし、データの変更も画面に即反映できているようです。
今回はINotifyPropertyChanged, BindingList, BindingListViewを用いることで、型付きDataSetと同じような双方向データバインドを実現したWindowsフォームアプリを構築することができました。色々工夫が必要でしたが、DataSet/DataTable以下の機能は実現できていません。これらの機能を実装するのは大変そうなので、素直に型付きDataSetを使った方がやはり幸せかもしれません…。
Entity Frameworkを使えば実現できそうな気はしますが。


