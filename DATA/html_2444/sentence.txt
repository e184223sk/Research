More than 1 year has passed since last update.ASP.NET Core 3.0 Razor Pages 事始め(7)の続きです。今回は公式チュートリアルのASP.NET Core Razor ページへの検索の追加に沿って進めていこうと思います。Indexページで検索機能を追加します。まずは、IndexModelに、検索用のプロパティを追加します。追加したのは、以下の３つのプロパティです。ユーザーが検索テキスト ボックスに入力した値がここに入ります。 
[BindProperty] 属性で修飾されています。これで、HTMLの同じ名前のフォーム要素（あるいはクエリ文字列）がこのプロパティにバインドされます。 SupportsGet = true は、GET 要求でのバインドで必要です。ジャンル一覧を表しています。 選択一覧に表示される項目として利用されます。SelectListクラスは Microsoft.AspNetCore.Mvc.Rendering 名前空間に定義されています。ユーザーが選択したジャンルが入ります。SearchStringプロパティと同様に、[BindProperty] 属性で修飾されています。次に、IndexModel の OnGetAsync メソッドを変更します。変更後のOnGetAsyncメソッドを示します。このOnGetAsyncメソッドが正しく動作するかを確認してみます。
F5キーでデバッグを開始します。ブラウザが起動したら、Moviesページに移動します。そして、?searchString=Ghost のクエリ文字列を URLに追加して実行してみます。たしかに、Ghostで絞り込めました。次に、デバッグを終了し、index.chtmlを開きます。
先頭の行を以下のように書き換えます。これで、クエリ文字列の代わりに、URLのルートデータとして題名を指定できるようになります。これをルート制約と言うようです。これも試してみます。先ほどと同じ結果になりました。しかし、URLをユーザに入力してもらうわけにはいきません。
そのため、index.cshtmlに検索のためのUIを追加します。先ほどのルート制約を削除します。それから、index.cshtmlを開き、以下のように &lt;form&gt;要素を &lt;table&gt;要素の直前に追加します。&lt;form&gt;のデフォルトの methodの値は、"get"なので、検索ボタンを押せば、OnGetAsyncメソッドが呼びだされます。チュートリアルのページでは、"Title"と文字列リテラルを使っていましたが、ここでは、@Html.DisplayNameForを使うようにしてみました。HTML的には、&lt;label&gt;を使ったほうが良いのかもしれませんね。でもその場合は、SearchStringプロパティに、[Display(Name ="タイトル")]という属性を付加する必要がありますね。では、テストしてみます。
うまく動いているようです。検索フィールドを空にして、[検索]ボタンを押せば、すべてのタイトルが表示されます。次にジャンルで検索する機能を追加します。index.cshtml.csの OnGetAsync メソッドを次のように更新します。
なお、チュートリアルページのコードが僕の好みじゃないので書き換えています。このほうが分かりやすいと個人的には思います。次に、Index.cshtmlの&lt;form&gt;要素を以下のように変更します。へー、こんな風に、&lt;select&gt;要素内の&lt;option&gt;の一部を htmlに書くこともできるんですね。
この場合は、asp-itemsでバインドされた&lt;option&gt;は、の下に展開されるようです。以下展開された　select要素です。ちなみに、Allを選んだときは、Allではなく、空文字列がサーバーに送られるように、value="" としています。ビルドが通ったら、ジャンルまたはムービーのタイトル、あるいはその両方で検索して、正しく動作するかをテストします。正しく動作しているようです。


