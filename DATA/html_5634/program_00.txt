class BinPackingSolver : IBinPacking {
    public int BinSize { get; set; }

    private BinPackingMixedSolver _solver;

    public BinPackingSolver(int size) {
        this.BinSize = size;
        _solver = new BinPackingMixedSolver(size);
    }

    // ビンに詰められている全ての要素を順に取り出す
    public IEnumerable&lt;int&gt; GetSequence(ICollection&lt;ICollection&lt;int&gt;&gt; list) {
        foreach (var bin in list)
            foreach (var n in bin)
                yield return n;
    }

    public ICollection&lt;ICollection&lt;int&gt;&gt; Solve(int[] items) {
        List&lt;ICollection&lt;int&gt;&gt; result = new List&lt;ICollection&lt;int&gt;&gt;();
        // 一旦答えを求める
        var binsList = _solver.Solve(items);

        while (true) {
            // 空きの小さい順に並べ替え、
            // 空きが最も小さいビンを最終解答領域(result)へ入れる（確定）
            var bin = binsList.OrderByDescending(b =&gt; b.Sum())
                              .First();
            result.Add(bin);

            // listから確定したビンを取り除く
            binsList.Remove(bin);

            // 残ったビンは無いので、処理終了
            if (binsList.Count == 0)
                break;

            // 残ったビンに入っている項目で、再度解を求める
            binsList = _solver.Solve(GetSequence(binsList).ToArray());
        }
        return result;
    }
}

