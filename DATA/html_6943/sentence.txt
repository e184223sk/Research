More than 3 years have passed since last update.Unityは「ゲームを簡単に作れるようにする」ソフトですが、他のプログラミング経験がないままで利用するとScriptが分からなくてつまずいてしまいます。ここでは、Unityで利用するC#に絞って、Scriptの仕組みを解説します。
Scriptのエディタで出てくる簡単な解説は以下で記していますので、一度読んでからこちらを参考にして下さい。[超初心者向け]やっと納得、Unityを初めて触ると出てくるC#の何だあれの答えここでは少しずつ、Scriptを解説していきます。同じ型のものを複数で定義して、連続して同じ処理を施したり、値などを加えて順位を出すなど、配列を用いるとまとめて処理が可能になり、Scriptを簡単にできます。リファレンスの中で、複数の連続したデータを扱う場面があります。GameObject.GetComponents
public Component[] GetComponents(Type type);
public T[] GetComponents();引用元：https://docs.unity3d.com/ja/current/ScriptReference/GameObject.GetComponents.htmlこのGetCompornentsは、コンポーネントの型を指定して（上記のT）、それに該当する自身のGameObjectにアタッチされたコンポーネントを取得するものです。
コードのサンプルでは、以下のように書いてあります。この処理を実行すると、HingeJoint型のアタッチされたコンポーネントが、配列hingeJointsに格納されます。配列は、型と[]で定義します。型[]　オブジェクト名;配列に含まれるオブジェクトを要素と呼び、その数を要素数として定義します。上記の場合は要素数が無いので、それを後から配列が代入されることで数が決まります。要素数の変更は、決定後にできません。これで定義される配列は、以下になります。参照は以下の形で指標をしていします。要素数だけ定義すると要素数だけ確定しますが要素は未定義になります。定義時に要素数だけ決めておきます、あとから要素の値は変えられます。これで定義される配列は以下になります。不定の要素の値は、内容が保証されません。int型の場合、指定値は0になります。配列の型に依存し設定される値はかわります。
規定のデフォルト値は、こちらを参照してください。https://msdn.microsoft.com/ja-jp/library/83fhsxwc.aspx
参照型（classなど）の配列の場合は、未定義部分にはnullが入ります。これで定義される配列は以下になります。不定の要素の値は、内容が保証されません。値型と参照型の違いは、こちらを参照して下さい。
値型と参照型(MSDN)
https://msdn.microsoft.com/ja-jp/library/cc406735.aspx後から配列をnew演算子で作成し、代入することが可能です。配列は連続したデータ型なので、まとめた処理をする場合に便利です。以下は、リファレンスにあるMeshコードの抜粋です。引用元：Mesh
https://docs.unity3d.com/ja/current/ScriptReference/Mesh.htmlこのScriptはUpdate関数で配列verticesに入っているポリゴンの頂点を1秒間で1°、三角関数のsinで動かす物です。Meshコンポーネントを有するGameObjectならなんでも有効ですので試してみて下さい。
頂点を動かしている演算は、以下の部分です。normalsに入っているのが法線ベクトルで、長さが1になる単位ベクトルになっています。それを三角関数sinをかけているので、±1の距離で頂点が動きます。
頂点数がもし5つであれば、以下のコードでも代用できます。これで用意すると頂点数が変わった場合に対応が出来ません。それを可変長に捉えて処理するために、vertices.Lengthを用いています。vertices.Lengthは配列の要素数を取得するものです。変数iは0から要素数-1まで処理を実行します。配列の指標は0から要素数-1になるので、それに合せています。この処理をforで書き換えると、以下のようになります。一方、冒頭で紹介したGameObject.GetComponentsのリファレンスでは以下のサンプルコードが示されています。引用元：GameObject.GetComponents
https://docs.unity3d.com/ja/current/ScriptReference/GameObject.GetComponents.htmlこのforeachは配列型等の特定の型に用いられる制御文で、この例では取得したHingeJoint型のコンポーネント（GameObjectを他のGameObjectに連結するコンポーネント）のそれぞれのuseSpringにfalseを代入する(バネのように伸び縮みする動作を無効化する)処理をしています。
これを前述のようにfor文で置き換えると、以下の用になります。配列の要素それぞれのみの参照で閉じた形で処理を行う場合、foreachの方が簡潔になります。詳しくは以下を参照して下さい。
配列での foreach の使用 (C# プログラミング ガイド)
https://msdn.microsoft.com/ja-jp/library/2h3zzhdw.aspxこの記事は以下でシリーズしていますので、適宜、参照してください。
UnityでのC#の基礎


