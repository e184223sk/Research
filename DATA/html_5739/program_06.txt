
/// &lt;summary&gt;
/// 片方向連結リスト
/// &lt;/summary&gt;
class Array : IEnumerable
{
    //先頭のセルを格納するフィールド。
    private Cell Head;

    //空のセル(フィールドがnullなセル。要素の格納はできない)を作成する
    public Array() { Head = new Cell(null); }

    public IEnumerator GetEnumerator() { return new ArrayEnumerator(this); }//

    //反復子のクラス
    class ArrayEnumerator : IEnumerator
    {
        Cell CurrentCell;
        Array Array;

        public ArrayEnumerator(Array array)
        {
            this.Array = array;
            //初めにどのセルを指し示すのかを決める。          
            CurrentCell = null;
        }
        //現在指し示されているセルの要素を返す
        public Object Current { get { return CurrentCell.Item; } }

        //返り値のbool値は、ちゃんと動かせたかどうかという情報。
        //true(矢印を動かせた)、false(もうこれ以上矢印を動かせない)
        public bool MoveNext()
        {
            //現在指し示しているセルの次のセル(Next)があるかどうかを調べる。、
            if (CurrentCell == null)
                //矢印の位置を初期位置(Head)に戻す。
                CurrentCell = Array.Head;
            else
                //矢印を動かす。
            CurrentCell = CurrentCell.Next;

            //条件文が同じなので統合したくなるが、それはできない。
            if (CurrentCell == null)
                return false;
            return true;

        }
        //先頭位置を元に戻す
        public void Reset() { CurrentCell = null; }
    }

    //セル。要素と次のセルを格納するフィールドを持つ。
    public class Cell
    {
        public Object Item { set; get; }
        public Cell Next { set; get; }

        //新たにセルが作られたとき、各フィールドに値を代入する。
        public Cell(Object item)
        {
            Item = item;
        }
    }

    /// &lt;summary&gt;
    /// セルを新規に追加するメソッド。
    /// &lt;/summary&gt;
    public void Add(Object item)
    {
        //現在のヘッドを一時的に保存
        var temphead = Head;
        //先頭のセルを、追加したセルに切り替える。
        Head = new Cell(item);
        //先頭のセルのもつ、次のセルを格納するフィールドに追加するセルを代入。
        Head.Next = temphead;
    }
}

