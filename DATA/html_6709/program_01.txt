
using System;
using System.Diagnostics;
using System.Runtime.Serialization;
using System.Text;
using System.Xml;

namespace ConsoleApplication1
{
    public class Fuga
    {
        public string ClassText;
    }

    [DataContract]
    public class Hoge
    {
        [DataMember]
        public string Text;

        public string IgnoreText;

        [DataMember]
        public Fuga fuga { get; set; } = new Fuga();
    }

    public class XMLSerializer&lt;Type&gt;
    {
        private string fileName;

        public XMLSerializer(string fileName)
        {
            this.fileName = fileName;
        }

        public void Write(Type obj)
        {
            var serializer = new DataContractSerializer(typeof(Type));
            var settings = new XmlWriterSettings();
            settings.Encoding = new UTF8Encoding(false);

            using (var xw = XmlWriter.Create(fileName, settings))
            {
                serializer.WriteObject(xw, obj);
            }
        }

        public Type Read()
        {
            var serializer = new DataContractSerializer(typeof(Type));

            using (var xr = XmlReader.Create(fileName))
            {
                return (Type)serializer.ReadObject(xr);
            }
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            string fileName = @"test.xml";

            var obj = new Hoge();
            obj.Text = "hogetext";
            obj.IgnoreText = "ignoretext";
            obj.fuga.ClassText = "fugatext";

            var serializer = new XMLSerializer&lt;Hoge&gt;(fileName);

            serializer.Write(obj);

            Hoge readobj = serializer.Read();

            Debug.WriteLine($"{nameof(readobj.Text)} : {readobj.Text}");
            Debug.WriteLine($"{nameof(readobj.IgnoreText)} : {readobj.IgnoreText}");
            Debug.WriteLine($"{nameof(readobj.fuga.ClassText)} : {readobj.fuga.ClassText}");
        }
    }

