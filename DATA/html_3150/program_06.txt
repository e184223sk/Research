
// 送信側のアンカー
[SerializeField] private GameObject SenderAnchor;
// 送信側の子
[SerializeField] private GameObject SenderChild;
// 受信側のアンカー
[SerializeField] private GameObject ReceiverAnchor;
// 受信側の子
[SerializeField] private GameObject ReceiverChild;


void Start()
{
    var objects = new[] {SenderAnchor, SenderChild, ReceiverAnchor, ReceiverChild};
    foreach (var o in objects)
    {
        // てきとうにカラーリング
        o.GetComponent&lt;Renderer&gt;().material.color = UnityEngine.Random.ColorHSV();
    }

    StartCoroutine(Test());
}


private IEnumerator Test()
{
    var wait = new WaitForSeconds(2);
    while (true)
    {
        // アンカーをランダムな位置に配置
        SenderAnchor.transform.SetPositionAndRotation(UnityEngine.Random.onUnitSphere, UnityEngine.Random.rotation);
        ReceiverAnchor.transform.SetPositionAndRotation(UnityEngine.Random.onUnitSphere + new Vector3(7, 0, 0), UnityEngine.Random.rotation);

        // 送信側の子オブジェクトをランダムな位置に配置
        SenderChild.transform.position = UnityEngine.Random.onUnitSphere * 2;
        SenderChild.transform.rotation = UnityEngine.Random.rotation;

        // 送信側のワールド座標からアンカーからの相対座標に変換
        var ts = SenderChild.transform;
        var (sendP, sendQ) = WorldToRelative(SenderAnchor.transform, ts.position, ts.rotation);

        // アンカーからの相対座標を受信側のアンカーに依るワールド座標に変換
        var (receiveP, receiveQ) = RelativeToWorld(ReceiverAnchor.transform, sendP, sendQ);
        ReceiverChild.transform.SetPositionAndRotation(receiveP, receiveQ);

        yield return wait;

        // アンカー同士の位置を揃えることで子オブジェクトの位置が揃っていることを確認する
        SenderAnchor.transform.SetPositionAndRotation(Vector3.zero, Quaternion.identity);
        ReceiverAnchor.transform.SetPositionAndRotation(Vector3.zero, Quaternion.identity);

        yield return wait;
    }
}

