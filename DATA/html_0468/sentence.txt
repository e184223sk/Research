Qiitaの皆さん、お久しぶりです。
前回からかなり時間が空きすぎましたが、あれから念願の新しいパソコンを購入しました。
そしてPythonにも飽きてきたので、C#に手を出してみることにしました。理解するメモとして書き残しておきます。
ガバな点はご容赦ください。私は以前、Pythonでjsonを使用して設定ファイルやデータをイチイチに定義しなければならないものをjsonに格納して便利に使っていたので、ぜひC#でも使いたいと思い模索しました。
薄々気づいてはいましたが、Pythonはなんて素晴らしいライブラリを取り揃えているのかと思い知らされることになりました。Pythonでのjsonの読み込みはjsonライブラリを使用しますがこのように関数を一つ定義してしまえば、辞書型で帰ってくるのでこうすると簡単にstrやintで帰ってきますので、あとは煮るなり焼くなりすれば簡単に使うことができますが
(ｶﾞﾊﾞｺｰﾄﾞﾃﾞｺﾞﾒﾝﾈ)C#の場合こんな感じで記載しないとうまく読み込まないのですが、一番個人的に面倒なのが
「jsonのクラスを作らないといけない」
のと
「メソッド（Pythonでいう関数（若干違うけど））作った時わかりにくい！
ことが引っかかりました。Pythonは先程の関数で帰ってくる返り値は辞書型に対してC#は特定の返り値を指定しなければなりません。
このため、Pythonでは辞書型で帰ってくるのでとresultに指定定するだけでkeyである「hoge」のvalue「hoge1」を取り出すことができますが
対してC#は、例えば「hoge.json」のkeyである「hoge」のvalueが「hoge1」であったとき、クラス「hogejson」のhogeにstring型（str）でセットされます。
逆にこれをint型や別の型でセットしようとしてもできません。なぜなら、クラスhogeの返り値はstringと決めているからです。
そのためPythonでよくお世話になった辞書型に返り値には指定されていないため、仮に返り値を"勝手"に辞書型に指定しても他の「hogehoge」や「hogehogehoge」のkeyはおろかvalueの情報すらありません（自己解釈）探してみたところ、C#には「Dictionaryクラス」というものが存在するようで、それでPythonの辞書型と同じように使えるみたいです。なら話は早いです、hoge.jsonのkeyとvalueを辞書型に詰め込めるよう試行錯誤を繰り返してできたのがこちらです。...自分でも感じた、強引すぎると...個人的にはPythonのように使えるのが一番ありがたいですが、あまりに強引すぎて怒られるような気がします。ちなみに結果はこんなふうに表示されます。この方法より「こうしたほうがいいよ～・ガバすぎこれを使え」等あれば、ご遠慮無くぜひコメントまで！
結構真剣に困っていたので、また時間があれば改良してみます。追記
これなんなんですかね？よく出てきて動かなくなります。
こうなるともう保存して起動し直すしかないのでめっちゃ不便です。久々に書き切りました。
おやすみなさい。https://usefuledge.com/csharp-json.html
https://json2csharp.com/ （先程のjsonデータクラスをjsonデータをもとに作ってくれるサイト、めっちゃ便利）
Thank you!!!!!


