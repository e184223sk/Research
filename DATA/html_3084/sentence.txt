More than 1 year has passed since last update.Null条件演算子とは、第一項がヌルポインタ (null pointer)でない場合に第二項の結果を返し、そうでない場合にnullを返す演算子である。nullでないことのチェックを回避し、メソッドチェーンやプロパティチェーンを行うために用いられる
https://ja.wikipedia.org/wiki/Null条件演算子例えばC#の場合は以下のように?.演算子を使用する単なるメソッドチェーンで行う場合は、過程のメソッドでもしnullが返った場合エラーになってしまうのでnullチェックが必要になる。
その場合メソッドチェーンが使用できず、一時変数やif文が大量に入るということだ。
関数にして早期リターンするのが難しい場合はネストが深くなることもあるだろう。そんな便利なNull条件演算子であるが残念ながらC++にはない。
なので、先ほどあげたように随時nullチェックをするしかないちょっとめんどくさい。本題。細かい型チェックなどは省いているが、ラムダで遅延評価にしつつ、先にnullチェックだけするようなシンプルなものを作った一応これで生ポインタ、スマートポインタは対応できた。
std::optionalは未対応だが、必要な場合は返り値の型をチェックしてnulloptを返せばいい使いたい時はusing safe_navigation::operator|をすることで使用できるようになる。これでネストが深くなったりチェック用のローカル変数ができることもなくチェックができる
が、う～ん冗長な気もするえ～い、マクロにしちゃえ～～C++11以前はジェネリックラムダが使用できないので、型を明示できるようにもした多少はましになったかもしれない。


