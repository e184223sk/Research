More than 1 year has passed since last update.この記事は前回の勉強の続きです。
【前回】：【Unity(C#)】API通信勉強メモ①前回できなかったPostの処理を学びます。なんもわからんなりの解釈が山盛りなのでマサカリ、オールオッケーです。Flask（フラスク）は、プログラミング言語Python用の、軽量なウェブアプリケーションフレームワークである。標準で提供する機能を最小限に保っているため、自身を「マイクロフレームワーク」と呼んでいる。Wikipediaより引用今回はFlaskというPythonのウェブアプリケーションフレームワーク1を使用して
ローカルにアプリケーションサーバーを立て、Unity側からHTTPリクエスト(POST)を送る
までやってみようと思います。おおよそ、参考リンクに沿って進めていきます。【参考リンク】：Pythonと連携する方法まずはFlaskで立てたローカルのサーバーにGETリクエストを送ってみます。Unity側の処理は下記リンクから拝借しました。
【参考リンク】：UnityでHTTPに接続する成功しました。
①Python側(VSC)でデバッグを開始
②UnityでPlay
という順番です。次はFlaskで立てたローカルのサーバーにPOSTリクエストを送ってみます。
@app.route("/", methods=['POST', 'GET'])にPOSTを追加しただけです。実際にやってみて思ったこととしては結局POSTとGETは何が違うんだよってことです。
この疑問に関しては下記リンクを見て一旦深く考えるのを止めることにしました。
【引用元】：GETとPOSTの違いについて本当はGETでやるべきこともPOSTでできてしまうのです。
やろうと思えばすべての処理をPOSTで作れてしまうのです。
この辺りは思想的な話もあるので、何とも言えない部分です。Postの処理も上手くいったので次回はUnity側から入力した情報を登録 &amp; ログインする機能を作っていきます。とりあえずわかっていることとしては、
リクエストを送る際に情報を渡す方法として、
Unity側にWWW.Formが用意されていることです。上記のようにUnity側でログイン画面に入力したIDやパスワードをサーバーに送れる。。。はずです。やりました→【Unity(C#),Python】API通信勉強メモ③簡易版ログイン機能の実装フレームワークとライブラリの違い ↩


