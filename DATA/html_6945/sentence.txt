More than 3 years have passed since last update.メソッドの内部で生成(new)したローカル変数を, スタブに入れ替える.次のようなコードがあるとする.このコードは, 特別なハードウェア(以降, 実機と呼ぶ)上で実行するとする.
実機には, ポートAとポートBにモーターが接続されており, Motorコンストラクタの引数に指定してインスタンスを作成することにより, そのポートのモーターを制御できるようになる(とする).
しかし, モーターが接続されていないテスト環境では, Motorクラスのコンストラクタやメソッドは動作させることはできない.このコードでは, SampleMethodメソッドの中で, Speedプロパティを呼んで, currentSpeedの値を取得している.
インスタンスをIMotorで持ち, IMotor.Speedを呼んでいるあたり, 前回の"自分が作ったクラスのインスタンスメソッドをスタブに置き換える"の"インタフェースに依存させる"ということを意識して作られている.
しかし前回の記事と違うのは, motorは引数で渡されるのではなく, メソッド内で作成しているところである.メソッド内でnew Motor(Port.PortA)と書いてしまっては, いくらIMotorで受けようと, 中身は結局Motorインスタンスである.
以降で, これをスタブに入れ替える方法を説明する."入れ替える方法を説明する"といっても, やるのは"静的メソッドのスタブ置き換え"で説明した"メソッドを格納できる変数"を使用するだけだ.
"メソッドを格納できる変数"に, Motorインスタンスを作成する部分をメソッド化して格納しておく.
Motorインスタンスを作成する部分は, 特定のインスタンスに関わらずインスタンスを作成できるようにするため, Motorクラスの静的メソッドとして定義することにする.まず, スタブのクラスを定義する.
もちろん, IMotorを実現させる.
スタブのインスタンスを作成するメソッドも定義しておく.次に, SampleMethodメソッドをテストするコードを示す.これで, SampleMethodメソッド内では, インスタンス生成時にMotorStub.CreateMotorBodyメソッドを使ってインスタンスを生成するようになる.さて, "静的メソッドのスタブ置き換え"の"静的な変数の注意点"でも述べたように, 静的メソッドの値を入れ替えると, インスタンスが破棄されても入れ替わったままである.
テストメソッドが終わったときに静的メソッドの値が元に戻るようにするには, 次のようにするとよいだろう.例によって, 前述までのコードは次のような改善点が考えられる.そして例によって, 説明は省略する.
余裕があれば記事書くかも.


