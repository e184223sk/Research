
int InputKey(char inputChar)
{
    char prevChar3 = _romanIndex &gt;= 3 ? _roman[_romanIndex - 3] : '\0';
    char prevChar2 = _romanIndex &gt;= 2 ? _roman[_romanIndex - 2] : '\0';
    char prevChar = _romanIndex &gt;= 1 ? _roman[_romanIndex - 1] : '\0';
    char currentChar = _roman[_romanIndex];
    char nextChar = _roman[_romanIndex + 1];
    char nextChar2 = nextChar == '@' ? '@' : _roman[_romanIndex + 2];

    if (inputChar == '\0')
    {
        return 0;
    }

    if (inputChar == currentChar)
    {
        return 1;
    }

    //「い」の柔軟な入力（Windowsのみ）
    if (_isWindows &amp;&amp; inputChar == 'y' &amp;&amp; currentChar == 'i' &amp;&amp;
        (prevChar == '\0' || prevChar == 'a' || prevChar == 'i' || prevChar == 'u' || prevChar == 'e' ||
         prevChar == 'o'))
    {
        _roman.Insert(_romanIndex, 'y');
        return 1;
    }

    if (_isWindows &amp;&amp; inputChar == 'y' &amp;&amp; currentChar == 'i' &amp;&amp; prevChar == 'n' &amp;&amp; prevChar2 == 'n' &amp;&amp;
        prevChar3 != 'n')
    {
        _roman.Insert(_romanIndex, 'y');
        return 1;
    }

    if (_isWindows &amp;&amp; inputChar == 'y' &amp;&amp; currentChar == 'i' &amp;&amp; prevChar == 'n' &amp;&amp; prevChar2 == 'x')
    {
        _roman.Insert(_romanIndex, 'y');
        return 1;
    }

    //「う」の柔軟な入力（「whu」はWindowsのみ）
    if (inputChar == 'w' &amp;&amp; currentChar == 'u' &amp;&amp; (prevChar == '\0' || prevChar == 'a' || prevChar == 'i' ||
                                                   prevChar == 'u' || prevChar == 'e' || prevChar == 'o'))
    {
        _roman.Insert(_romanIndex, 'w');
        return 1;
    }

    if (inputChar == 'w' &amp;&amp; currentChar == 'u' &amp;&amp; prevChar == 'n' &amp;&amp; prevChar2 == 'n' &amp;&amp; prevChar3 != 'n')
    {
        _roman.Insert(_romanIndex, 'w');
        return 1;
    }

    if (inputChar == 'w' &amp;&amp; currentChar == 'u' &amp;&amp; prevChar == 'n' &amp;&amp; prevChar2 == 'x')
    {
        _roman.Insert(_romanIndex, 'w');
        return 1;
    }

    if (_isWindows &amp;&amp; inputChar == 'h' &amp;&amp; prevChar2 != 't' &amp;&amp; prevChar2 != 'd' &amp;&amp; prevChar == 'w' &amp;&amp;
        currentChar == 'u')
    {
        _roman.Insert(_romanIndex, 'h');
        return 1;
    }

    //「か」「く」「こ」の柔軟な入力（Windowsのみ）
    if (_isWindows &amp;&amp; inputChar == 'c' &amp;&amp; prevChar != 'k' &amp;&amp;
        currentChar == 'k' &amp;&amp; (nextChar == 'a' || nextChar == 'u' || nextChar == 'o'))
    {
        _roman[_romanIndex] = 'c';
        return 1;
    }

    //「く」の柔軟な入力（Windowsのみ）
    if (_isWindows &amp;&amp; inputChar == 'q' &amp;&amp; prevChar != 'k' &amp;&amp; currentChar == 'k' &amp;&amp; nextChar == 'u')
    {
        _roman[_romanIndex] = 'q';
        return 1;
    }

    //「し」の柔軟な入力
    if (inputChar == 'h' &amp;&amp; prevChar == 's' &amp;&amp; currentChar == 'i')
    {
        _roman.Insert(_romanIndex, 'h');
        return 1;
    }

    //「じ」の柔軟な入力
    if (inputChar == 'j' &amp;&amp; currentChar == 'z' &amp;&amp; nextChar == 'i')
    {
        _roman[_romanIndex] = 'j';
        return 1;
    }

    //「しゃ」「しゅ」「しぇ」「しょ」の柔軟な入力
    if (inputChar == 'h' &amp;&amp; prevChar == 's' &amp;&amp; currentChar == 'y')
    {
        _roman[_romanIndex] = 'h';
        return 1;
    }

    //「じゃ」「じゅ」「じぇ」「じょ」の柔軟な入力
    if (inputChar == 'z' &amp;&amp; prevChar != 'j' &amp;&amp; currentChar == 'j' &amp;&amp;
        (nextChar == 'a' || nextChar == 'u' || nextChar == 'e' || nextChar == 'o'))
    {
        _roman[_romanIndex] = 'z';
        _roman.Insert(_romanIndex + 1, 'y');
        return 1;
    }

    if (inputChar == 'y' &amp;&amp; prevChar == 'j' &amp;&amp;
        (currentChar == 'a' || currentChar == 'u' || currentChar == 'e' || currentChar == 'o'))
    {
        _roman.Insert(_romanIndex, 'y');
        return 1;
    }

    //「し」「せ」の柔軟な入力（Windowsのみ）
    if (_isWindows &amp;&amp; inputChar == 'c' &amp;&amp; prevChar != 's' &amp;&amp; currentChar == 's' &amp;&amp;
        (nextChar == 'i' || nextChar == 'e'))
    {
        _roman[_romanIndex] = 'c';
        return 1;
    }

    //「ち」の柔軟な入力
    if (inputChar == 'c' &amp;&amp; prevChar != 't' &amp;&amp; currentChar == 't' &amp;&amp; nextChar == 'i')
    {
        _roman[_romanIndex] = 'c';
        _roman.Insert(_romanIndex + 1, 'h');
        return 1;
    }

    //「ちゃ」「ちゅ」「ちぇ」「ちょ」の柔軟な入力
    if (inputChar == 'c' &amp;&amp; prevChar != 't' &amp;&amp; currentChar == 't' &amp;&amp; nextChar == 'y')
    {
        _roman[_romanIndex] = 'c';
        return 1;
    }

    //「cya」=&gt;「cha」
    if (inputChar == 'h' &amp;&amp; prevChar == 'c' &amp;&amp; currentChar == 'y')
    {
        _roman[_romanIndex] = 'h';
        return 1;
    }

    //「つ」の柔軟な入力
    if (inputChar == 's' &amp;&amp; prevChar == 't' &amp;&amp; currentChar == 'u')
    {
        _roman.Insert(_romanIndex, 's');
        return 1;
    }

    //「つぁ」「つぃ」「つぇ」「つぉ」の柔軟な入力
    if (inputChar == 'u' &amp;&amp; prevChar == 't' &amp;&amp; currentChar == 's' &amp;&amp;
        (nextChar == 'a' || nextChar == 'i' || nextChar == 'e' || nextChar == 'o'))
    {
        _roman[_romanIndex] = 'u';
        _roman.Insert(_romanIndex + 1, 'x');
        return 1;
    }

    if (inputChar == 'u' &amp;&amp; prevChar2 == 't' &amp;&amp; prevChar == 's' &amp;&amp;
        (currentChar == 'a' || currentChar == 'i' || currentChar == 'e' || currentChar == 'o'))
    {
        _roman.Insert(_romanIndex, 'u');
        _roman.Insert(_romanIndex + 1, 'x');
        return 1;
    }

    //「てぃ」の柔軟な入力
    if (inputChar == 'e' &amp;&amp; prevChar == 't' &amp;&amp; currentChar == 'h' &amp;&amp; nextChar == 'i')
    {
        _roman[_romanIndex] = 'e';
        _roman.Insert(_romanIndex + 1, 'x');
        return 1;
    }

    //「でぃ」の柔軟な入力
    if (inputChar == 'e' &amp;&amp; prevChar == 'd' &amp;&amp; currentChar == 'h' &amp;&amp; nextChar == 'i')
    {
        _roman[_romanIndex] = 'e';
        _roman.Insert(_romanIndex + 1, 'x');
        return 1;
    }

    //「でゅ」の柔軟な入力
    if (inputChar == 'e' &amp;&amp; prevChar == 'd' &amp;&amp; currentChar == 'h' &amp;&amp; nextChar == 'u')
    {
        _roman[_romanIndex] = 'e';
        _roman.Insert(_romanIndex + 1, 'x');
        _roman.Insert(_romanIndex + 2, 'y');
        return 1;
    }

    //「とぅ」の柔軟な入力
    if (inputChar == 'o' &amp;&amp; prevChar == 't' &amp;&amp; currentChar == 'w' &amp;&amp; nextChar == 'u')
    {
        _roman[_romanIndex] = 'o';
        _roman.Insert(_romanIndex + 1, 'x');
        return 1;
    }
    //「どぅ」の柔軟な入力
    if (inputChar == 'o' &amp;&amp; prevChar == 'd' &amp;&amp; currentChar == 'w' &amp;&amp; nextChar == 'u')
    {
        _roman[_romanIndex] = 'o';
        _roman.Insert(_romanIndex + 1, 'x');
        return 1;
    }

    //「ふ」の柔軟な入力
    if (inputChar == 'f' &amp;&amp; currentChar == 'h' &amp;&amp; nextChar == 'u')
    {
        _roman[_romanIndex] = 'f';
        return 1;
    }

    //「ふぁ」「ふぃ」「ふぇ」「ふぉ」の柔軟な入力（一部Macのみ）
    if (inputChar == 'w' &amp;&amp; prevChar == 'f' &amp;&amp;
        (currentChar == 'a' || currentChar == 'i' || currentChar == 'e' || currentChar == 'o'))
    {
        _roman.Insert(_romanIndex, 'w');
        return 1;
    }

    if (inputChar == 'y' &amp;&amp; prevChar == 'f' &amp;&amp; (currentChar == 'i' || currentChar == 'e'))
    {
        _roman.Insert(_romanIndex, 'y');
        return 1;
    }

    if (inputChar == 'h' &amp;&amp; prevChar != 'f' &amp;&amp; currentChar == 'f' &amp;&amp;
        (nextChar == 'a' || nextChar == 'i' || nextChar == 'e' || nextChar == 'o'))
    {
        if (_isMac)
        {
            _roman[_romanIndex] = 'h';
            _roman.Insert(_romanIndex + 1, 'w');
        }
        else
        {
            _roman[_romanIndex] = 'h';
            _roman.Insert(_romanIndex + 1, 'u');
            _roman.Insert(_romanIndex + 2, 'x');
        }
        return 1;
    }

    if (inputChar == 'u' &amp;&amp; prevChar == 'f' &amp;&amp;
        (currentChar == 'a' || currentChar == 'i' || currentChar == 'e' || currentChar == 'o'))
    {
        _roman.Insert(_romanIndex, 'u');
        _roman.Insert(_romanIndex + 1, 'x');
        return 1;
    }

    if (_isMac &amp;&amp; inputChar == 'u' &amp;&amp; prevChar == 'h' &amp;&amp; currentChar == 'w' &amp;&amp;
        (nextChar == 'a' || nextChar == 'i' || nextChar == 'e' || nextChar == 'o'))
    {
        _roman[_romanIndex] = 'u';
        _roman.Insert(_romanIndex + 1, 'x');
        return 1;
    }

    //「ん」の柔軟な入力（「n'」には未対応）
    if (inputChar == 'n' &amp;&amp; prevChar2 != 'n' &amp;&amp; prevChar == 'n' &amp;&amp; currentChar != 'a' &amp;&amp; currentChar != 'i' &amp;&amp;
        currentChar != 'u' &amp;&amp; currentChar != 'e' &amp;&amp; currentChar != 'o' &amp;&amp; currentChar != 'y')
    {
        _roman.Insert(_romanIndex, 'n');
        return 1;
    }

    if (inputChar == 'x' &amp;&amp; prevChar != 'n' &amp;&amp; currentChar == 'n' &amp;&amp; nextChar != 'a' &amp;&amp; nextChar != 'i' &amp;&amp;
        nextChar != 'u' &amp;&amp; nextChar != 'e' &amp;&amp; nextChar != 'o' &amp;&amp; nextChar != 'y')
    {
        if (nextChar == 'n')
        {
            _roman[_romanIndex] = 'x';
        }
        else
        {
            _roman.Insert(_romanIndex, 'x');
        }
        return 1;
    }

    //「きゃ」「にゃ」などを分解する
    if (inputChar == 'i' &amp;&amp; currentChar == 'y' &amp;&amp;
        (prevChar == 'k' || prevChar == 's' || prevChar == 't' || prevChar == 'n' || prevChar == 'h' ||
         prevChar == 'm' || prevChar == 'r' || prevChar == 'g' || prevChar == 'z' || prevChar == 'd' ||
         prevChar == 'b' || prevChar == 'p') &amp;&amp;
        (nextChar == 'a' || nextChar == 'u' || nextChar == 'e' || nextChar == 'o'))
    {
        if (nextChar == 'e')
        {
            _roman[_romanIndex] = 'i';
            _roman.Insert(_romanIndex + 1, 'x');
        }
        else
        {
            _roman.Insert(_romanIndex, 'i');
            _roman.Insert(_romanIndex + 1, 'x');
        }
        return 1;
    }

    //「しゃ」「ちゃ」などを分解する
    if (inputChar == 'i' &amp;&amp;
        (currentChar == 'a' || currentChar == 'u' || currentChar == 'e' || currentChar == 'o') &amp;&amp;
        (prevChar2 == 's' || prevChar2 == 'c') &amp;&amp; prevChar == 'h')
    {
        if (nextChar == 'e')
        {
            _roman.Insert(_romanIndex, 'i');
            _roman.Insert(_romanIndex + 1, 'x');
        }
        else
        {
            _roman.Insert(_romanIndex, 'i');
            _roman.Insert(_romanIndex + 1, 'x');
            _roman.Insert(_romanIndex + 2, 'y');
        }
        return 1;
    }

    //「しゃ」を「c」で分解する（Windows限定）
    if (_isWindows &amp;&amp; inputChar == 'c' &amp;&amp; currentChar == 's' &amp;&amp; prevChar != 's' &amp;&amp; nextChar == 'y' &amp;&amp;
        (nextChar2 == 'a' || nextChar2 == 'u' || nextChar2 == 'e' || nextChar2 == 'o'))
    {
        if (nextChar2 == 'e')
        {
            _roman[_romanIndex] = 'c';
            _roman[_romanIndex + 1] = 'i';
            _roman.Insert(_romanIndex + 1, 'x');
        }
        else
        {
            _roman[_romanIndex] = 'c';
            _roman.Insert(_romanIndex + 1, 'i');
            _roman.Insert(_romanIndex + 2, 'x');
        }
        return 1;
    }

    //「っ」の柔軟な入力
    if ((inputChar == 'x' || inputChar == 'l') &amp;&amp;
        (currentChar == 'k' &amp;&amp; nextChar == 'k' || currentChar == 's' &amp;&amp; nextChar == 's' ||
         currentChar == 't' &amp;&amp; nextChar == 't' || currentChar == 'g' &amp;&amp; nextChar == 'g' ||
         currentChar == 'z' &amp;&amp; nextChar == 'z' || currentChar == 'j' &amp;&amp; nextChar == 'j' ||
         currentChar == 'd' &amp;&amp; nextChar == 'd' || currentChar == 'b' &amp;&amp; nextChar == 'b' ||
         currentChar == 'p' &amp;&amp; nextChar == 'p'))
    {
        _roman[_romanIndex] = inputChar;
        _roman.Insert(_romanIndex + 1, 't');
        _roman.Insert(_romanIndex + 2, 'u');
        return 1;
    }

    //「っか」「っく」「っこ」の柔軟な入力（Windows限定）
    if (_isWindows &amp;&amp; inputChar == 'c' &amp;&amp; currentChar == 'k' &amp;&amp; nextChar == 'k' &amp;&amp;
        (nextChar2 == 'a' || nextChar2 == 'u' || nextChar2 == 'o'))
    {
        _roman[_romanIndex] = 'c';
        _roman[_romanIndex + 1] = 'c';
        return 1;
    }

    //「っく」の柔軟な入力（Windows限定）
    if (_isWindows &amp;&amp; inputChar == 'q' &amp;&amp; currentChar == 'k' &amp;&amp; nextChar == 'k' &amp;&amp; nextChar2 == 'u')
    {
        _roman[_romanIndex] = 'q';
        _roman[_romanIndex + 1] = 'q';
        return 1;
    }

    //「っし」「っせ」の柔軟な入力（Windows限定）
    if (_isWindows &amp;&amp; inputChar == 'c' &amp;&amp; currentChar == 's' &amp;&amp; nextChar == 's' &amp;&amp;
        (nextChar2 == 'i' || nextChar2 == 'e'))
    {
        _roman[_romanIndex] = 'c';
        _roman[_romanIndex + 1] = 'c';
        return 1;
    }

    //「っちゃ」「っちゅ」「っちぇ」「っちょ」の柔軟な入力
    if (inputChar == 'c' &amp;&amp; currentChar == 't' &amp;&amp; nextChar == 't' &amp;&amp; nextChar2 == 'y')
    {
        _roman[_romanIndex] = 'c';
        _roman[_romanIndex + 1] = 'c';
        return 1;
    }

    //「っち」の柔軟な入力
    if (inputChar == 'c' &amp;&amp; currentChar == 't' &amp;&amp; nextChar == 't' &amp;&amp; nextChar2 == 'i')
    {
        _roman[_romanIndex] = 'c';
        _roman[_romanIndex + 1] = 'c';
        _roman.Insert(_romanIndex + 2, 'h');
        return 1;
    }

    //「l」と「x」の完全互換性
    if (inputChar == 'x' &amp;&amp; currentChar == 'l')
    {
        _roman[_romanIndex] = 'x';
        return 1;
    }

    if (inputChar == 'l' &amp;&amp; currentChar == 'x')
    {
        _roman[_romanIndex] = 'l';
        return 1;
    }

    return 2;
}

