前回【Unity】柔軟な入力に対応したタイピングゲームの作り方（導入編）【C#】という記事の続きです。現在のタイピングゲームの要となる「柔軟な入力（「つ」→「tsu」、「ふ」→「fu」）」に対応させます。タイピングの入力方法については、以下のURLが参考になります。Windows：https://www.cc.saga-u.ac.jp/system/CenterSystem/ime_romaji.htm
Mac：https://support.apple.com/ja-jp/guide/japanese-input-method/jpim10277/6.2.1/mac/10.15よくよく確認すると、WindowsとMacでは入力方法が異なることがわかります。（例：Windowsでは「か」を「ca」と入力できるが、Macではできない）
なので、WindowsとMacを区別する必要があります。
ちなみにこの機能は省略しても構いません。現在の日本語入力タイピングゲームにおいて、柔軟な入力に対応させるアルゴリズムはいくつか存在します。
今回は「前後比較法（私が勝手に名付けた方法です）」を使います。「前後比較法」は、今入力すべき文字とその文字の前後を比較することによって「どのひらがなを入力するのか」を判断して、入力してもOKな文字を抽出するアルゴリズムです。例えば「うちわ（utiwa）」を考えましょう。まず最初の入力文字が「u」なので、入力するひらがなは「う」であることが判明します。「う」の別入力が「wu」であるので「w」を入力しても構わないことがわかります。当然ですが、別入力を行いますとローマ字を改良する必要があります。今回の例で「w」を入力するとローマ字表記は「wutiwa」に変化します。次の入力文字も「u」ですが、前の文字が「w」なので「う」の入力途中であることが判明します。よって今回は「w」を入力することができません。そして「u」の入力後、入力文字が「t」になります。この入力文字の前が母音で、後の文字が「i」なので「ち」を入力することが判明します。同様に「ち」の別入力は「chi」なので「c」を入力してもOKとなります。もちろん「c」を入力した後は「wuchiwa」に変形する必要があります。こんな感じでほかの文字に対応させることができます。上記のアルゴリズムを用いて、InputKey() を大幅に改造します。こうすることによって、「し」を「shi」、んを「xn」などと入力することができます。


