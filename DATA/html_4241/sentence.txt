More than 1 year has passed since last update.この記事は、C# Advent Calendar 2018 の１０日目の記事です。「ASP.NET Core で何か作ったるで！」と息を巻いていましたが、土日含むここ一週間、風邪で記事が全く書けなかったので、
下書きから何とか記事として成り立っていそうなもの選んでを投稿します...天気予報 CSV データを読み込んで、それ利用するプログラムがあったとします。CSV はこんな感じ ↓
CSV データを読み込む処理はこんな感じ↓File.ReadLinesはEnumerable&lt;string&gt;（ 1 行ごとのシーケンス）を返します。
1行目はカラム名（日付,天気,最高気温,最低気温）が入っているのでスキップSkip(1)します。
Selectで1行line（24(水),曇,20,12）ごとに,で分割します。読み取った CSV データを利用するクラスはこんな感じ↓CSV データを利用するクラスには気温差の一覧を返すTemperatureDeferencesや、平均最高気温を返すAverageHighTemperatureといったメソッドが定義されています。
これらのメソッドでは配列に対してインデックスでアクセス(tokens[n])しています。
そのため何のデータが配列の何番目にあるかを把握しなければなりません。一度作ってテストしてもう二度度変わらないなら良いですが、プログラムもデータ構造も時間経過で変わっていくものです。
このプログラムには、配列の構造が変わった場合、インデックスを修正する必要がある（複数ある場合にはすべてのインデックスを直して回る必要がある）、修正が漏れるとインデックスの範囲外にアクセスして例外がスローされる、修正が漏れてもコンパイルエラーは発生せず実行時まで気づけない、といった問題があります。まず、天気予報オブジェクトを定義しましょう。これで、例えば最高気温へのアクセスはtokens[2]からForecast.HighestTemperatureに変わります。CSV データを Forecast 型のシーケンスに変換するメソッドを作ります。
日時が tokens[0] にあるといった知識の把握はこのメソッドにカプセル化します。CSVデータそのままでなく、Forcastを利用してみます。インデックスによる配列へのアクセスは消え明示的な参照へ置き換わっています。これで、データ構造が変わってもデータをオブジェクトにパースするForecststifyメソッドだけを直せば良くなりました。
またデータに対するアクセスが明瞭（ex：forecasts.date）になりました。並べてみるとずっと読みやすくなっているのが分かると思います。before

after
読んでいただきありがとうございました。


