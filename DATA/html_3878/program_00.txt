// unsafeで囲みます
unsafe
{
    for (nIndexHeight = 0; nIndexHeight &lt; nHeightSize; nIndexHeight++)
    {
        for (nIndexWidth = 0; nIndexWidth &lt; nWidthSize; nIndexWidth++)
        {
            // バイト型のポインタで、画像のPixelデータのアドレスを取得しています。
            byte* pPixel = (byte*)bitmapData.Scan0 + nIndexHeight * bitmapData.Stride + nIndexWidth * 4;

            double dCalB = 0.0;
            double dCalG = 0.0;
            double dCalR = 0.0;
            double dCalA = 0.0;
            int nIndexWidthMask;
            int nIndexHightMask;
            int nFilter = 0;

            while (nFilter &lt; m_nFilterMax)
            {
                for (nIndexHightMask = 0; nIndexHightMask &lt; nMasksize; nIndexHightMask++)
                {
                    for (nIndexWidthMask = 0; nIndexWidthMask &lt; nMasksize; nIndexWidthMask++)
                    {
                        if (nIndexWidth + nIndexWidthMask &gt; 0 &amp;&amp;
                            nIndexWidth + nIndexWidthMask &lt; nWidthSize &amp;&amp;
                            nIndexHeight + nIndexHightMask &gt; 0 &amp;&amp;
                            nIndexHeight + nIndexHightMask &lt; nHeightSize)
                        {
                            // フィルタ処理のために、バイト型のポインタで、画像のPixelデータのアドレスを取得しています。
                            byte* pPixel2 = (byte*)bitmapData.Scan0 + (nIndexHeight + nIndexHightMask) * bitmapData.Stride + (nIndexWidth + nIndexWidthMask) * 4;

                            dCalB += pPixel2[0] * m_dMask[nIndexWidthMask, nIndexHightMask];
                            dCalG += pPixel2[1] * m_dMask[nIndexWidthMask, nIndexHightMask];
                            dCalR += pPixel2[2] * m_dMask[nIndexWidthMask, nIndexHightMask];
                            dCalA += pPixel2[3] * m_dMask[nIndexWidthMask, nIndexHightMask];
                        }
                    }
                }
                nFilter++;
            }
            // ポインタなので、SetPixelのようなメソッドを呼ばなくて、そのままフィルタ処理後の値を設定できます。
            pPixel[0] = DoubleToByte(dCalB);
            pPixel[1] = DoubleToByte(dCalG);
            pPixel[2] = DoubleToByte(dCalR);
            pPixel[3] = DoubleToByte(dCalA);
        }
    }
    m_bitmapImageFilter.UnlockBits(bitmapData);
}

