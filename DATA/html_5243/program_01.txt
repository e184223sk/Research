
using System;
using System.Linq;
using System.Runtime.Serialization;
using System.IO;
using System.Diagnostics;
using System.Collections.Generic;
using Utf8Json;

namespace csharp
{
    class Program
    {
        private static readonly string _csvPath = @"C:\Users\****\Documents\work\private\real-test\test.csv";

        static void Main(string[] args)
        {
            var outPath = Path.Combine(Path.GetDirectoryName(_csvPath), "result_csharp.json");
            if (File.Exists(outPath))
            {
                File.Delete(outPath);
            }

            var stopwatch = new Stopwatch();
            stopwatch.Start();

            (string a, int z) LineSelector(string line)
            {
                    var parts = line.Split(",");
                    float x = float.Parse(parts[2]);
                    float y = float.Parse(parts[3]);
                    int z = x &gt; 0
                            ? (int)(x * y + 0.0000001)
                            : (int)(x * y - 0.0000001);
                    return (a: parts[0], z: z);
            }

            string KeySelector((string a, int z) data) =&gt; data.a;

            int ValueSelector((string a, int z) data) =&gt; data.z;

            var lines = File.ReadLines(_csvPath)
                .Skip(1)
                .AsParallel()
                .Select(LineSelector)
                .GroupSum(KeySelector, ValueSelector);

            var json = JsonSerializer.SerializeUnsafe(lines);
            using (var fileStream = File.OpenWrite(outPath))
            {
                fileStream.Write(json.Array, 0, json.Count);
            }
            Console.WriteLine($"{stopwatch.Elapsed}sec");
        }
    }

    public static class EnumerableExtensions
    {
        public static IEnumerable&lt;KeyValuePair&lt;TKey, int&gt;&gt; GroupSum&lt;TSource, TKey&gt;(
            this IEnumerable&lt;TSource&gt; source,
            Func&lt;TSource, TKey&gt; keySelector,
            Func&lt;TSource, int&gt; valueSelector)
        {
            var dic = new Dictionary&lt;TKey, int&gt;();

            foreach (var item in source)
            {
                var key = keySelector(item);
                if (dic.TryGetValue(key, out var x))
                {
                    dic[key] = x + valueSelector(item);
                }
                else
                {
                    dic[key] = valueSelector(item);
                }
            }

            return dic;
        }
    }
}

