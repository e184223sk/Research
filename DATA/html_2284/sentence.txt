More than 1 year has passed since last update.これは、C# その2 Advent Calendar 2019 の9日目の記事です。あまり記事を書かない人間なので、駄文失礼します。Unity、便利ですよね。コードを書かなくてもオブジェクトを配置して簡単に3Dゲームを作れちゃいます。ポケモン GO やデレステなど著名なスマホゲームにも使用されていて、今や C# でゲームづくりといえば Unity の名前が挙がらないことは無いでしょう。そう、3D ゲーム開発においては……。Unity で 2D に重きを置いたゲームを作るのはかなり苦行です。これは1年以上前にUnityをやめた僕の感想なので、今の Unity 事情は正直わかりませんが、当時タイルマップが実装されたときは、かなり頑張って Unity で 2D ゲーム開発していました。しかし、どうしてもピクセルパーフェクトにするのが大変だったり、昨今のあらゆる画面解像度に 2D の画面を適合させたりするのが死ぬほど辛かった…。ピクセルパーフェクトにするためにシェーダーを使う手法を取り入れたりしましたが、シンプルに画面上にドット絵を表示するためだけに、わざわざ 3D 空間の描画に最適化されたレンダラーにお手製シェーダーをぶっこんで、2D を綺麗に描画するって何か無駄でしかなくてそれもまた辛かったです。Unity は 3D ゲームを作るためのソフトウェアなので、ここでいっそ Unity ではないゲームエンジンを採用することにしました。C# で使えるゲームエンジンは意外とたくさんあります。MonoGame は、Microsoft XNAをクローンしたゲームエンジンです。とても完成度が高く、クロスプラットフォームだそうです。とはいえ、ドキュメントがあまり多くなく、また機能の多さゆえにとっつきにくい印象を受けました。Cocos2DのC#移植です。その名の通り2Dに特化しています。とはいえ、4,5年前から音沙汰がなく、死んだプロジェクトっぽいです。いろいろ探してみましたが、やはり納得のいく、自分の求めるゲームエンジンは見つかりませんでした。
もはや、ゲームエンジンを一から作ってしまったほうが早いかなって思い、作ってしまいました。
その名も、DotFeather。DotFeather は、2Dに特化、軽くて、パワフルなゲームエンジンです。
.NET Standard 2.1 に対応しており、C# 8ではヌル安全に書けるようになっています。
OpenTK と、一部の画像処理にImageSharpを使用しています。備えている機能は以下の通りです。ver2.5時点で、本格的な2Dゲームを制作するための十分な機能が揃っています。DotFeather は nuget を用いて簡単に入手できます。パッケージマネージャーで「DotFeather」と検索します。クラスを一つ作ります。実行すると、次のように表示されます。ちょっと踏み込んで、イチゴがマウスカーソルを追いかけるロジックを組んでみましょう。まず、イチゴの画像ファイルをダウンロードしてください。

このファイルを、「ichigo.png」という名前で、プロジェクトに追加します。ファイルをプロジェクトに追加する方法は別途お調べください。先程のプログラムを次のように書き換えます。OnUpdate() というメソッドが増えたのがわかるかと思います。
勘の良い方ならお察しかと思いますが、OnLoad() メソッドは、最初に一度だけ呼び出されます。このメソッドには、本来その名の通り、画像データや音楽データなど、必要なリソースを初期化するために用意されています。の画像を読み込んでスプライトを作成しています。スプライトとは、ゲーム画面を自由に動き回る画像オブジェクトのことです。
さらに、そのままだと小さいのでのサイズを2倍しています。2行目の数値を変えることで、自在に伸縮できます。生成したはそのままでは画面に表示されないので、画面に追加します。Rootオブジェクトに追加するだけで描画してくれます。DFMouse 静的クラスは、その名の通り、マウス入力に関するAPIを提供します。この行では、マウスカーソルの座標を2次元ベクター型として取得しています。ichigo.Location プロパティは、の現在の座標を2次元ベクター型で取得できます。
Vector.Angle(Vector, Vector) 静的メソッドは、2座標間の角度をラジアン単位で取得できます。あとは、先程得た角度からコサイン・サイン関数を用いて速度に変換し、を移動させます。
Time.DeltaTime 静的プロパティは、前のフレームと現在のフレームの間にかかった時間を秒単位で取得します。これを乗じることで、フレームレートが落ちても変わらない速度でを移動させられます。実行すると、が素早くカーソルを追いかける怖い画面が完成します  このようにシンプルに記述してすぐ動かせる魅力的なゲームエンジンとなっています。さらにリポジトリにはデモが用意されているので、ぜひクローン、ビルドして遊んでみてください。DotFeather は現在PCにしか対応していませんが、Xamarin.Forms を使ったスマートデバイス版である、DotFeather.Mobile の開発を現在続けています。スマートデバイス固有の新機能も予定しています。宣伝みたいな記事になってしまいましたが、これを読んでいただいた方にDotFeatherでゲームを作ってみてもらえるととても幸いです。日本人デベロッパーによるC#製ゲームエンジンという分類ではおそらく現時点で一番完成度の高いモノであると自負しています。GitHub上でのバグ報告や、質問なども気軽に受け付けていますし、公式Discordもあるのでサポートも万全です。タイルマップ用のウディタ互換オートタイルプラグインも作ったので、ぜひ。ここまで見ていただきありがとうございます。それでは。2019/12/9 追記: リポジトリのURLを貼りました。


