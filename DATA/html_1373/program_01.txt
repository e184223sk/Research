
/// &lt;summary&gt;
/// 磁力の表現　万有引力の計算式を利用
/// S,Nでそれぞれベクトルが逆になる
/// 磁力として扱うオブジェクトにアタッチ
/// &lt;/summary&gt;
public class MagnetFunction : MonoBehaviour
{
    private enum MagnetState
    {
        S,
        N
    }

    [SerializeField] private float _accelerationScale;
    [SerializeField] private MagnetState _magnetState;

    private Rigidbody _collisionObjRigidbody;
    private Vector3 _direction;

    private float _distance;
    private float _magnetPower;

    private void OnTriggerEnter(Collider other)
    {
        //Start関数内で名指しで取得する実装でも良いかも
        _collisionObjRigidbody = other.gameObject.transform.root.GetComponent&lt;Rigidbody&gt;();
    }

    private void OnTriggerStay(Collider other)
    {
        //衝突したキャラがSかNの判定を入れた方がよさそう
            switch (_magnetState)
            {
                case MagnetState.S:
                    // 星に向かう向きの取得
                    _direction = this.gameObject.transform.position - other.transform.position;
                    // 星までの距離の２乗を取得
                    _distance = _direction.magnitude;
                    _distance *= _distance;
                    // 万有引力計算
                    _magnetPower = _accelerationScale * _distance;
                    // 力を与える
                    _collisionObjRigidbody.AddForce(_magnetPower * _direction.normalized, ForceMode.Force);
                    break;

                case MagnetState.N:
                    // 星に向かう向きの取得
                    _direction =  other.transform.position - this.gameObject.transform.position;
                    // 星までの距離の２乗を取得
                    _distance = _direction.magnitude;
                    _distance *= _distance;
                    // 万有引力計算
                    _magnetPower = _accelerationScale * _distance;
                    // 力を与える
                    _collisionObjRigidbody.AddForce(_magnetPower * _direction.normalized, ForceMode.Force);
                    break;
            }
    }
}

