    /// &lt;summary&gt;
    /// 発時刻での並び替え用クラス。
    /// &lt;/summary&gt;
    public class DepatureTimeLogic
    {
        /// &lt;summary&gt;
        /// 引数の発時刻の昇順に並べ替えた結果を返す。
        /// &lt;/summary&gt;
        /// &lt;param name="times"&gt;発時刻リスト。各要素はHH:MM形式の時刻文字列で表される。&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public List&lt;string&gt; Sort(List&lt;string&gt; times)
        {
            // 発時刻クラス型に変換した後、経過時間（分）の昇順でソートして、
            // 最後に時刻文字列に戻してList化している。
            var sortedTimes = times.Select(time =&gt; new DepatureTime(time))
                .OrderBy(dTime =&gt; dTime.PassageTime)
                .Select(dTime =&gt; dTime.TimeString).ToList();

            return sortedTimes;
        }
    }

    /// &lt;summary&gt;
    /// 発時刻クラス。
    /// &lt;/summary&gt;
    public class DepatureTime
    {
        /// &lt;summary&gt;
        /// 発時刻。HH:MM形式の時刻文字列で表される。
        /// &lt;/summary&gt;
        public string TimeString { get; set; }

        /// &lt;summary&gt;
        /// 経過時間（分）。TimeStringを00:00からの経過時間（分）で表した値。
        /// &lt;/summary&gt;
        public int PassageTime { get; set; }

        /// &lt;summary&gt;
        /// コンストラクタ。
        /// &lt;/summary&gt;
        /// &lt;param name="timeString"&gt;HH:MM形式の時刻文字列。&lt;/param&gt;
        public DepatureTime(string timeString)
        {
            this.TimeString = timeString;
            var hhmm = timeString.Split(':');
            this.PassageTime = int.Parse(hhmm[0]) * 60 + int.Parse(hhmm[1]);
        }
    }

