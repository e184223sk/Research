More than 3 years have passed since last update.Autofac について調べてみた　その１ インスタンスのスコープで、不明だった点に関して師匠が答えてくれたので、私も検証してみた。Instance Per Own　未解決事項　で書いた通り、実行結果が、普通のインジェクションにしても変わらなかったので、なんでこの書き方で書くのだろうと思ったのでそれを理解したかった。ポイントはこちらだ。新しい書き方になっているが、builder.RegisterType&lt;Backend&gt;().As&lt;IBackend&gt;() ... と変わらない。直接指定しないのでこちらのほうがカッコいい。ポイントは、Command -&gt; IBackend の依存性がある場合、Command#Dispose() が呼ばれると、Backend#Dispose も勝手に呼ばれるようになるのである。コードを見てわかるとおり、Command にはDispose() のコードは書いていない。これを Owned がラップしてくれている。こちらの記事が詳しい。自分がわからなかったことも、師匠にかかれば一撃で解決してしまう。凄いものだ。ちなみに、Owned を書かないやり方でもきっと同じことができるが面倒だ。例えば、 次のようなコードを書くとこの時点でエラーになる。何故かというと、using を使うためには、Dispose() が必要だが、Command に書いていないからだ。Command に Dispose() を書いてその中で、Backend の Dispose() を呼ぶようなコードを書いてあげればそれでいいと思うが、そういうことは、この書き方だとする必要がなくなる。実行結果はこのとおりCommand のライフサイクルで、Backend が作られて、Command が消されたら、Backend も消されている。


