More than 1 year has passed since last update.元の値があるのに、表示名をロジックに組み込んだコードを見かけることがある。このコードの問題点は表示が変わった場合に、ロジックの修正をしなければいけない点である。サンプルコードで具体的に示す。サンプルコードでは区分値(IsOk)がYesの場合、○を画面表示している。設計書に○の場合に太字にするという記載がある場合、作成されるコードは以下のようなコードになる。
尚、画面から区分値および、その表示値は取得できるものとする。
java


    /** 区分値 **/
    private enum IsOk {
        YES, NO,
    }

    public void main() {

        if (getDisplay() == "○") {
            setBold();
        }
    }

    private IsOk getValue() {
        // 画面に設定されたフラグ値を取得する。ビルドのため、固定値になっている。
        return IsOk.YES;
    }

    private String getDisplay() {
        // 画面に設定されたフラグに対する表示値を取得する。ビルドのため、固定値になっている。
        return "○";
    }

    private void setBold() {
        // 文字を太字にする。コードは省略。
    }



サンプルコードの場合、表示を○から◎にすると、if文の中を修正する必要がある。画面の表示から切り離すためには、区分値を使用すればよい。
java


    /** 区分値 **/
    private enum IsOk {
        YES, NO,
    }

    public void main() {

        if (getValue() == IsOk.YES) {
            setBold();
        }
    }

    private IsOk getValue() {
        // 画面に設定されたフラグ値を取得する。ビルドのため、固定値になっている。
        return IsOk.YES;
    }

    private String getDisplay() {
        // 画面に設定されたフラグに対する表示値を取得する。ビルドのため、固定値になっている。
        return "○";
    }

    private void setBold() {
        // 文字を太字にする。コードは省略。
    }


画面表示値をそのまま使用するのではなく、もととなった値を使用する。少なくとも画面表示に依存する部分を減らすことができる。前の記事(条件分岐後の処理が冗長な場合)次の記事(例外を無視する)目次


