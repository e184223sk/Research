
 namespace Rein.Functions{
    public class Lambda: UnaryFunction{
        protected Func&lt;R, R&gt; LambdaForward, LambdaBackward;
        public Lambda(string name, Func&lt;R, R&gt; forward, Func&lt;R, R&gt; backward):base(name){
            this.LambdaForward = forward;
            this.LambdaBackward = backward;
        }

        protected override Tensor UnaryForward(Tensor tensor)
        {
            R[] data = new R[this.In.Size];

            for (int i = 0; i &lt; this.In.Size; i++){
                // zi = f(xi)の操作
                data[i] = this.LambdaForward(this.In.Data[i]);
            }

            return new Tensor(data, new List&lt;int&gt;(this.In.Shape));
        }

        protected override void UnaryBackward()
        {
            for (int i = 0; i &lt; this.In.Size; i++){
                // x.grad[i] &lt;- f'(xi)　の操作
                this.In.Grad[i] += this.Out.Grad[i] * this.LambdaBackward(this.In.Data[i]);
            }
        }
    }
}

