More than 3 years have passed since last update.素数を逆転させた数もまた素数である自然数のことを 「エマープ(Emirp)」と言います。 例えば、167 は、素数ですが、これを反転した 761 も素数であり、この２つはエマープです。 Prime(素数)という単語を 反転させると Emirp になるので、そう呼ばれているそうです。 また、1479のように、左から右へどんどん大きな数字になってゆく数を、ここでは「上昇数」と呼ぶことにします。 さて、エマープでかつ上昇数を求める方法ですが、 1 から 123456789 までのすべての数字に対して、一つずつ条件を満たすかを調べていては 効率が悪すぎます。そのため、「全ての上昇数を求め、それが、エマープかどうかを調べる」という方法で、答えを見つけることとします。上記コードの説明を簡単にします。エマープでかつ上昇数をすべて列挙するメソッドです。このメソッドは、上昇数を列挙し、その値が、エマープかどうかを調べています。上昇数を列挙するメソッドです。IEnumerable&lt;string&gt; 型を返す再帰メソッドとなっています。 メソッドの第1引数には、上昇数の途中結果が渡されます。初期値は 空文字列です。 第2引数には、上昇数で利用できる数字が小さい順に格納されている IEnumerable&lt;int&gt; 型です。 初期値は、 { 1,2,3,4,5,6,7,8,9 } です。例えば、第1引数に "24" という文字列が渡された時には、 第2引数には、{ 5,6,7,8,9 } が渡されます。再帰メソッドで、IEnumerable&lt;T&gt; を戻り値にする方法については、僕のブログの記事「再帰メソッドで、yield returnしたい」を読んでください。 素数判定は、「ミラー・ラビン素数判定法による素数判定メソッド」で示したクラスを使って素数判定をしています。この PrimeNumber.IsPrimeメソッドと下記の文字列を反転するReverseStringを使い、エマープかどうかを判定しています。 LINQの Reverse拡張メソッドを利用し反転させ、文字列に変換しています。 
これを拡張メソッドとして定義すれば、 string rs = s.ReverseString(); なんて書けますね。 これらのメソッドができあがれば、Solveメソッドを書くのは簡単ですね。 上記コードを実行した結果(エマープでかつ上昇数の一覧)です。この記事は、Gushwell's C# Programming Pageで公開したものを加筆・修正したものです。


