More than 1 year has passed since last update.LLVM/Clangに同梱されているlibclangの.NET(C#) Bindingライブラリ(ClangNet)を作成しました。
libclangはC/C++/Objective-Cソースコードの解析や自動補完機能を提供する高レベルのAPIで、オリジナルはC言語ベースのAPIが提供されています。libclangのC# Bindingはいくつかありますが、最新のVer.8.0に対応したものがなかったので作ってみました。なお、以下の環境でビルドおよび簡易的な動作確認を行っています。※ すべての機能に対するテストは出来ていませんので、不具合等ありましたらご連絡いただければと思います。ClangNet本体、動作サンプルを含むソースコードはGitHubに置いてあります。ClangNetをプロジェクトに組み込んで使いたい場合は、NuGetからパッケージをインストールしてください。libclang本体はプロジェクトに含まれていませんので、公式などから取得してください。
Windows版の組み込み方法は↓の動作サンプルの項で説明しています。ここでは、Windowsで動作させるための手順を紹介していきます。
MacやLinuxでも基本的には同じようにして動作させることができると思います。
(違うのはlibclangの準備くらいだと思います)libclang本体を入手するために、公式で配布されているインストーラを使ってLLVM/Clangをインストールします。
libclang本体もその中に含まれています。インストールが完了すると、以下のパスにlibclang本体が格納されています。
C:\Program Files\LLVM\bin\libclang.dll次に、解析対象となるC/C++のソースコードを準備します。
今回は、クラスや継承、テンプレートなどを使った↓のようなソースを準備しました。
※ 解析対象ソースの中身の説明については割愛しますソースファイルは、実行ファイルと同じディレクトリのCodeディレクトリ配下に配置します。
libclangと同様に、プロジェクトディレクトリに配置して、「出力ディレクトリにコピー」を設定しておくと良いと思います。今回は、「main.cpp」ファイルを解析して、以下の情報を出力するサンプルを作成しました。気が向いたら、他の実用例のサンプルなども書いていきたいと思います。ClangNet自体は.NET Standardで作成していますので、作成するプロジェクトは.NET Framework/.NET Coreのどちらでも利用可能です ↩これで、プロジェクトビルド時に、実行ファイルと同じディレクトリにlibclangがコピーされます ↩


