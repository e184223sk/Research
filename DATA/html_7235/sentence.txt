　強化スケジュール課題をUnityで作成するにあたって、共通している手順を準備編として載せます。Unityで実験を行う場合の流れをフローチャートにしてみるとこんな感じです(下図)。これは実験手続きであって、Unityの作成手順ではないので、そこだけ注意してください。

　「オペランダムへの反応」から「強化可能ランプ」あるいは「得点上昇」にフローしていますが、もう少し詳しく書くと、強化スケジュールに従ってオペランダムへ反応すると「強化可能ランプ」あるいは「得点上昇」にフローします。
　その0では、Unityで「弁別刺激」から「得点上昇」までの工程を解説します。また、様々な実験状況を汲みして、「得点上昇」の方法を2つ考えてみました。下記の2つの手順を軸に解説したいと思います。　Unityとはゲームエンジンの一種で、ゲームなら基本的に何でも作れますし、対応プラットフォームも様々です。 無料で誰でも扱えます。詳しくは こちら を参照してください。
　Unity上で行う作業はざっくり書くと2つです。1つはゲーム画面にどのようなオブジェクトを設置するのか、もう1つはそのオブジェクトの動きをどう制御するかです。前者はUnityのEditor上で確認しながら設置でき、後者はC#を使って制御できます。　Unityのインストール方法は 先ほどの記事 に載っていますので、そちらを参照してください。Unityのレイアウトについては、好みの問題なのでいじらなくても良いのですが、この記事では、 こちら にあるように「2 by 3」のレイアウトにしています。　この記事で使用しているUnityのバージョンは、2018.4.20f1(008688490035)です。　強化スケジュール課題の土台を作成しますが、注意点を2点ほど書いておきます。1つは、UnityのEditor上で扱うGameObjectを「オブジェクト」と表記します。もう1つは、オブジェクト名は「Object」のように、イタリック体で表記します。
　すべて完成してからゲーム内容を確認するのでも良いですが、いつどのタイミングで不具合が起きるのかわからないです。そのため、画面中央上の「Play」を押して、こまめにゲームがどう動いているのか、思った通りに動いているのかを確認した方が良いと思います(下図の「▶」)。
　フローチャートの1番上、弁別刺激を作成します。まずは、画面上に弁別刺激っぽいものを作成します。「[Hierarchy] &gt;&gt; [Create] &gt;&gt; [3D Object] &gt;&gt; [ Sphere ]」の順に選択してください。
SceneタブとGameタブに、白色の球が表示されたと思います。これを消灯用と点灯用に、2つ作成します。
次に行うことは3つです。　名前の変更方法は2通りあります。1つは「[Hierarchy] &gt;&gt; [ Sphere ] &gt;&gt; [ Sphere をゆっくり2回クリック]」です。もう1つは「[Hierarchy] &gt;&gt; [ Sphere ] &gt;&gt; [ Sphere をクリック] &gt;&gt; [Inspector]」です。名前はわかりやすいものであればなんでも良いですが、今回は 消灯用を「Sd1_off」、 点灯用を「Sd1_on」にします。
　点灯用を Sd1_on にしたら、これを非アクティブにします。「[Hierarchy] &gt;&gt; [ Sd1_on ] &gt;&gt; [ Sd1_on をクリック] &gt;&gt; [Inspector] &gt;&gt; [チェックボックスからチェックを外す]」の順に選択してください。
　Hierarchyタブに Sd1_off と Sd1_on を放置してもかまわないのですが、オブジェクトが増えてごちゃごちゃになるのも良くないので、1つにまとめます。方法は、SceneタブやGameタブに影響しないオブジェクトを作成して、その中に入れ込みます。「[Hierarchy] &gt;&gt; [Create] &gt;&gt; [Create empty]」の順に選択すると、Hierarchyタブ上には存在しますが、SceneタブやGameタブには存在しないカラのオブジェクトを作成できます。

　作成したカラのオブジェクト(名前を Sd1に変更)に Sd1_off と Sd1_on をドラッグアンドドロップで入れ込みます。すると、下図のようになり、「▼」で Sd1_off と Sd1_on を省略できるようになります。
　オブジェクトに色をつける場合、 Material を使用します。「[Project] &gt;&gt; [Create] &gt;&gt; [Material]」の順に選択してください。

　Material を Sd1_off と Sd1_on の2つ分作成し、 Material フォルダーの中へ1つにまとめます。 Folder は「[Project] &gt;&gt; [Create] &gt;&gt; [Folder]」の順に選択すると作成できます(上図参照)。まとめると、下図のようになります。ここでは、 Base(Scene名) の中に Material を入れ、さらにその中に個々の Material を入れています。

　Material を設定してオブジェクトに色をつけていきます。 Material ( Sd1_off か Sd1_on )をクリックすると、Inspectorタブに Material の詳細が表示されます。 Albedo のとなりある白色の四角をクリックすると、色の詳細が表示されるので、そこで色を選択してください。ここでは、Sd1_off を黒色(Hexadecimal: 000000)に、Sd1_on を緑色(Hexadecimal: 00FF1B)にしています。

　オブジェクトに色をつける方法は、2通りあります。1つは、 Material をSceneタブにあるオブジェクトにドラッグアンドドロップする方法です。もう1つは、 Material をHierarchyタブにあるオブジェクトにドラッグアンドドロップする方法です。
　SceneタブやGameタブを確認すると、 Sd1_off と Sd1_on が重なっているので、Sceneタブにドラッグアンドドロップする場合は、 Sd1_off と Sd1_on を少し離した方が良いと思います。オブジェクトの位置操作等については、 こちら を参照すると良いと思います。そして、もろもろ設定して色もつけると下図のようになります。左側が Sd1_on で右側が Sd1_off です。

　上図では、 Sd1_off の設定を「[Transform] &gt;&gt; [Position] &gt;&gt; [x] &gt;&gt; [1]」に、 Sd1_on の設定を「[Transform] &gt;&gt; [Position] &gt;&gt; [x] &gt;&gt; [-1]」にしています。　設置した弁別刺激を制御するには Script でコーディングする必要があります。いったん、コーディングの前に弁別刺激の点滅のイメージ図を下記に示します。注意点は2つあります。1つは、消灯から点灯までの時間(インターバル)は常に一定なことです。もう1つは、ゲーム開始時点から点灯までの時間は、消灯から点灯までの時間より短い(あるいは長い)ことです。つまり、コーディングの際に x sec と y sec という2つの処理を考える必要があります。
　弁別刺激を制御するため、 Sd1 に Script をつけていきます。「[Hierarchy] &gt;&gt; [ Sd1 をクリック] &gt;&gt; [Inspector] &gt;&gt; [Add Component] &gt;&gt; [New Script]」の順に選択してください。。名前はわかりやすいものであればなんでも良いですが、今回は 「Sd1_Script」 にします。 Script も Material と同様、フォルダーを作成して1つにまとめます。
　Script に書き込む内容ですが、先に内容を示してから解説を行います。　このScriptの流れをざっくり書くと、変数の宣言 → Start() → DiscriminativeStimuli()となります。解説もこの順序で行います。ちなみに、6行目より上のコードは何を意味しているのかについては、 こちら を参照してください。変数の宣言　「publicな」という表現を多用していますが、publicの意味については こちら を参照してください。「public ○○」と書くと、Editor上で値やオブジェクトを設定できるようになります。Start()IEnumerator DiscriminativeStimuli()
　コルーチンという関数を使って x sec と y sec の2つを制御しています。コルーチンとは何かについては、 こちら を、使い方については こちら を参照してください。「if (first == true)」は x sec を制御していて、「if (first == true)」は y sec を制御しています。順に解説していきます。　フローチャートでは「オペランダムへの反応」→「得点上昇」となっていますが、作成順序は「得点上昇」→「オペランダムへの反応」となります。　オペランダムを作成する前に、得点を表示させます。得点はオブジェクトではなくテキストなので、テキストを作成して「得点」が表示できるように編集します。「[Hierarchy] &gt;&gt; [Create] &gt;&gt; [UI] &gt;&gt; [Text]」の順に選択してください。テキストを作成したら名前を「Text」から 「Point」 にします。
　テキストを編集します。基本的には こちら を参照するとほぼほぼ解決すると思います。今回は下図のようにします。色は黒色(Hexadecimal: 000000)にしています。
　オペランダムを作成します。まずは、画面上にオペランダムっぽいものを作成します。「[Hierarchy] &gt;&gt; [Create] &gt;&gt; [3D Object] &gt;&gt; [ Cube ]」の順に選択してください。画面上にオペランダムを設置したら、弁別刺激同様、名前(Operandum1)と色( Sd1_on と同じ色)をつけます。場所は弁別刺激と異なる場所の方が良いです(例えば、X:0, Y;-.5, Z:0)。　Script に書き込む内容ですが、先に内容を示してから解説を行います。　このScriptの流れをざっくり書くと、変数の宣言 → Start() → Update()となります。解説もこの順序で行います。4行目に「using UnityEngine.UI;」が増えていることに注意してください。
　ここでは、1回オペランダムに反応すると得点が上昇するようになっています。もし個々の強化スケジュールを走らせる場合、「Operandum1_Script」に書き込むことになります。変数の宣言Start()Update()　効果音を鳴らすには、Scriptを書くだけではなく、Audio Sourse が必要になります。「[Hierarchy] &gt;&gt; [ Operandum1 をクリック] &gt;&gt; [Inspector] &gt;&gt; [Add Component] &gt;&gt; [Audio Sourse]」の順に選択してください。 Inspectorタブ 上に Audio Sourse が出現しますが、何もいじる必要はないです。後は、上記にある通り、Editor上で Operandum1 の PointSE の中に得点が上昇ときに鳴るSEを入れると効果音が鳴るようになります。
　フローチャートでは「オペランダムへの反応」→「強化可能ランプ」→「点灯」→「強化オペランダムへの反応」→「得点上昇」となっていますが、作成順序は「得点上昇」→「強化可能ランプ」→「オペランダムへの反応」→「強化オペランダムへの反応」となります。　オペランダムを作成する前に、得点を表示させます。得点はオブジェクトではなくテキストなので、テキストを作成して「得点」が表示できるように編集します。「[Hierarchy] &gt;&gt; [Create] &gt;&gt; [UI] &gt;&gt; [Text]」の順に選択してください。テキストを作成したら名前を「Text」から 「Point」 にします。
　テキストを編集します。基本的には こちら を参照するとほぼほぼ解決すると思います。今回は下図のようにします。色は黒色(Hexadecimal: 000000)にしています。
　強化可能ランプと強化オペランダムを作成します。まずは、画面上に強化可能ランプっぽいものを作成します。「[Hierarchy] &gt;&gt; [Create] &gt;&gt; [3D Object] &gt;&gt; [ Sphere ]」の順に選択してください。強化可能ランプは、弁別刺激と同様に2つ作成して( Ramp_off と Ramp_on )、カラのオブジェクト「Ramp」の中に入れ、Ramp_onを非アクティブにしてください。「Ramp」は「Reinfoeceable lamp」を略したオリジナルの略語です。位置は両方とも(X:0, Y:-2, Z:0)にしています。色は、Ramp_off を黒色( Sd1_off と同じ色)に、Ramp_on を赤色(Hexadecimal: FF0000)にしています。　画面上に強化オペランダムっぽいものを作成します。「[Hierarchy] &gt;&gt; [Create] &gt;&gt; [3D Object] &gt;&gt; [ Cube ]」の順に選択してください。強化オペランダム( Comsummatory )の位置は(X:0, Y:-3.5, Z:0)に色は赤色( Sd1_on と同じ色)にしています。「Comsummatory」は、完了反応( comsummatory response )からとっています。　Script に書き込む内容ですが、先に内容を示してから解説を行います。　このScriptの流れをざっくり書くと、変数の宣言 → Update() → ActiveReverse()となります。解説は、変数の宣言 → ActiveReverse() → Update()の順序で行います。変数の宣言ActiveReverse()Update()　オペランダムを作成します。まずは、画面上にオペランダムっぽいものを作成します。「[Hierarchy] &gt;&gt; [Create] &gt;&gt; [3D Object] &gt;&gt; [ Cube ]」の順に選択してください。画面上にオペランダムを設置したら、弁別刺激同様、名前(Operandum1)と色( Sd1_on と同じ色)をつけます。場所は弁別刺激と異なる場所の方が良いです(例えば、X:0, Y;-.5, Z:0)。　Script に書き込む内容ですが、先に内容を示してから解説を行います。　このScriptの流れをざっくり書くと、変数の宣言 → Start() → Update() → ResetTime()となります。解説は、変数の宣言 → Start() → ResetTime() → Update()の順序で行います。変数の宣言Start()ResetTime()Update()time += Time.deltaTime; ... 制限時間をカウントアップ形式で作成(制限時間の作成については こちら 、時間全般に関しては こちら )
→ UnityのUpdate()で使用する時間は、フレームレートが関係するため少々ややこしいため、データ出力や保存方法と一緒に別の記事で詳細を書こうと思います。「if (Sd1_on.activeSelf)」の処理 ...  Sd1_on がアクティブな時(弁別刺激点灯時)の処理「if (Sd1_off.activeSelf)」の処理 ...  Sd1_off がアクティブな時(弁別刺激消灯時)の処理　効果音を鳴らすには、Scriptを書くだけではなく、Audio Sourse が必要になります。「[Hierarchy] &gt;&gt; [ Operandum1 をクリック] &gt;&gt; [Inspector] &gt;&gt; [Add Component] &gt;&gt; [Audio Sourse]」の順に選択してください。 Inspectorタブ 上に Audio Sourse が出現しますが、何もいじる必要はないです。後は、上記にある通り、Editor上で Operandum1 の Operandum1SE の中に Operandum1 に反応したときに鳴るSEを入れると効果音が鳴るようになります。
　Script に書き込む内容ですが、先に内容を示してから解説を行います。ちなみに、「強化オペランダムへの反応」のScriptは、「Comsummatory」ではなく「Ramp_on」に書き込むので注意してください。　このScriptの流れをざっくり書くと、変数の宣言 → OnEnable() → Start() → Update() となります。解説もこの順序で行います。**変数の宣言OnEnable()Start()Update()　Update()中の処理で first が false になっても、Ramp_on がアクティブである限り、OnEnable()が起動します。そのため、 first が false になった瞬間 first が true になります。たとえ Ramp が消灯しても、弁別刺激点灯時にFキーが押されると Ramp が点灯して、Enterキーを押すことでまた得点が1点上昇できるようなコードになっています。
　今回は、強化可能ランプ点灯中に強化オペランダムへ反応すると、1回だけ強化子が得られる(得点が1点上昇)するようなコードにしました。しかし、何回でも強化子が得られる状態にする場合は、下記のように書いてください。　フローチャートには書いてませんが、実験場面では、時間が来たら課題が終了するようにしないといけません。というわけで、課題が終了するためのコーディングをしていきます。　「課題の終了」が実験課題中にみえる必要はないので、カラのオブジェクトを設置します。「[Hierarchy] &gt;&gt; [Create] &gt;&gt; [Create empty]」の順に選択してください。名前は「TaskFinish」にします。　Script に書き込む内容ですが、先に内容を示してから解説を行います。　このScriptの流れをざっくり書くと、変数の宣言 → Start() → TaskFinish()となります。解説もこの順序で行います。変数の宣言Start()IEnumerator TaskFinish()課題の終了(Escキー)
　キーボードの何かしらのキーを押してから終了する場合は、下記のように書いてください。課題の終了(得点数)
　特定の得点に到達したら終了する場合は、下記のように書いてください。下の Script は、「強化オペランダムへの反応」→「得点上昇」の場合となっています。　これで、強化スケジュール課題の土台が完成しました。下図のようになっているかと思います。実際の課題ではGemeタブのような並びではなく、“それっぽい”配置にしてください。

　さて、Unityで課題は作成できましたが、データをどこに出力して保存すればよいのかについてはここでは触れていません。データの出力や保存については、また別の記事で書きたいと思います。
　最後に、作成した課題をアプリケーション化(ビルド)する方法は、 こちら を参照してください。おそらく、「UnityEditor.EditorApplication.isPlaying = false;」が有効になっているとビルドできないので、「// UnityEditor.EditorApplication.isPlaying = false;」のように無効にしておいた方が良いと思います。　準備編として、強化スケジュール課題をUnityで作成する際に共通している手順をコーディングしてみましたが、いかかだったでしょうか。思いのほか長くなってしまったため、分かりづらくなってしまったかもしれません。また、コードや用語等で間違っている点があれば、ご指摘いただけると幸いです。
　次回から個々の強化スケジュールを作成していきます。基本的に、Operandum1 の内容を編集するだけなので、おそらく今回ほど長くはならないです。・今日からはじめるUnity
https://qiita.com/nmxi/items/7950fb12ef925efa276d・【Unity2D】Unityで2Dミニゲームを作るチュートリアル（第１回）
https://qiita.com/2dgames_jp/items/11bb76167fb44bb5af5f・Unity初心者が知っておくと少しだけ幸せになれる、シーンにオブジェクトを配置する時に使える18のTips+10
http://tsubakit1.hateblo.jp/entry/2015/04/21/031048・[超初心者向け]やっと納得、Unityを初めて触ると出てくるC#の何だあれの答え
https://qiita.com/JunShimura/items/3c2e23bb77cc9085bfda・privateとpublicの違いについて図付きで説明
http://gengoshori.hatenablog.com/entry/2018/01/07/122654・【Unity】関数一覧『コルーチン』
http://kimama-up.net/unity-functions-coroutine/・【Unity】はじめてのコルーチン!これさえ読めば基礎はカンペキ
https://www.sejuku.net/blog/83712・【Unity】C#の基本構文『while』
http://kimama-up.net/unity-while/・【Unity入門】1分でTextを表示しよう!スコアの表示まで簡単解説!
https://www.sejuku.net/blog/55029・【Unity入門】効果音(SE)の鳴らし方!複数管理する場合についても!
https://www.sejuku.net/blog/83535・【Unity】Invokeの使い方!実行タイミングを自在に操ろう
https://www.sejuku.net/blog/83762・【Unity 入門】Time.deltaTimeを使って制限時間を設定する｜カウントアップ・カウントダウン
https://xr-hub.com/archives/14465・【Unity】関数一覧『時間全般』
http://kimama-up.net/unity-functions-time/・UnityのOnEnable、OnDisable、OnDestroyメソッドについて
https://gametukurikata.com/basic/enabledisabledestroy・【Unity】関数一覧『アプリケーション全般』
http://kimama-up.net/unity-functions-application/


