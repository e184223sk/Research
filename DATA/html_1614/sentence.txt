More than 1 year has passed since last update.
前回：Visual StudioとC#を初めて使ってブロック崩しゲームを作ってみた②前回の続きです。
リザルト画面を作っていきます。リザルト画面のアウトライン
・リプレイボタン
・終了ボタン
・成績表示考えるところは成績くらいかな成績のディティール
・ブロック数とモードに応じてSCORE表示
・経過時間を表示
・選択モード表示こんな感じで進めていこうと思います。(補足)
ホーム画面：Form2
プレイ画面：Form1
リザルト画面：Form3Form2にプレイ画面とリザルト画面を表示したかったのですが、どうやらC#ではできないようです。。
ボタンやテキストボックスなどのコントロールを切替る方法はありました。
　ウィンドウ内遷移
　パネルとグループボックス
ブロックはプログラムで作成しているので、大人しく別ウィンドウで作成します。前回同様画面とボタンを作っていきます。
追加の配下にWindowsフォームがあったので、今回はここから作成します。
すると自動でWindowsフォームが選択され、ファイル名もデフォルトの「Form3.cs」で追加します。
ここも前回同様にボタンを追加
テキストは以下の通りにしてください。
リプレイのクリックイベントは
「replay_Click」、
終了のクリックイベントは
「backHome_Click」とします。
ボタン処理を記述したリザルト画面コードは以下です。Close()で画面は消せますが、その後すぐにプレイ画面を呼んでいる為
画面は開いたままになってしまいます。Close処理が流れた瞬間に画面が閉じるわけではないからです。
そこでHide()で非表示にします。
(Application.Exit();でアプリ自体を終了できる)プレイ画面に失敗時の処理を追加します。
まずはタイマーのインスタンス作成部分をクラス直下へ移動します。下記1行。
わかりにくかったら「Ctrl + F」でtimer等検索してください。
これでタイマーインスタンスのスコープを広げ
他のメソッドでも呼び出せるようにします。Updateメソッドに以下を追加。リザルト画面のClose処理と違うのはtimer.Stopがあることですね。
さっきのタイマーインスタンスの移動はこの為です。
タイマーを終了させないと無限にリザルト画面が呼び出されてしまいます(すぐ止まりますが)。
これでボールがパドルより下に来ると終了してリザルト画面が呼ばれるはずです。
実行してみてください。まずブロックの数を数えます。
blockNumで終了時のブロックの数をカウントします。
追加する箇所は、変数blockNumの定義とブロック作成時に値＋１、ブロック削除時に－１。
blockNumと検索してみてください。５か所見えるはずです。
blockNumMaxで最大値を求めます。2か所見えます。
変更のないメソッドは省略。　
スコア表示する為のラベルを作成します。
文字サイズはプロパティのFontをクリックすれば「・・・」が表示されるので、
そこから変更できる。
フォントサイズを両方とも20に設定しました。
モードの値を受け渡す為にホーム画面に変数modeを追加。
2行追加。変更のないメソッドは省略。　スコアを表示していきます。
Form3のウィンドウを選択してプロパティを開き、
from3_Loadメソッドを作成します。
Form3(リザルト画面)は以下になります。倍率をbairitsu = ((Form2.mode + 1) /10 * 2) + 1としていますが
ややこしかったらbairitsu = Form2.mode + 1だけでもいいです。
これだとモード：Easy(要素0)で倍率1です。
ラベルはlabel2.Textで変更でき、
受け取ったスコアを文字に変換していますscore().ToString()。実行してみてください。
きちんと表示されましたか？
スコア数が桁数によって左右にずれるのが気になったので、
常時センター表示に変更します。

桁数少ないときに左端に寄ってしまうので、AutoSizeもfalseへ変更。
EasyからExpertまで試してみたのですが、Expertのときだけボールがパネルに触れる前に終了してしまいます。
遷移時の条件はコレです。ballPos.Y &gt; paddlePos.Y
コンソールに出力します。　
もう一度Expertで同じ動作をします。
その後、アプリを終了させると出力結果が見れます。

一瞬423を超えていますね。
ボールの位置は→ballPos += ballSpeed;
Expert時のY軸移動数が16
出力を見ると408の次に16足された424が来てしまってますね。
なので、余裕を持って遷移条件をボールが画面から消えた時にします。
遷移時の条件を以下へ変更
ballPos.Y &gt; paddlePos.Y　→　ballPos.Y &gt; this.Height
プロパティのSizeを見ると画面のY軸473と余裕ありますね！(Size数はコレに合わせる必要はない)
これで不具合はなくなりました。
にしても、パドルの移動距離が少ないからExpertが難しい・・・
機能アップデートは第4回で実施します。しばしお待ちを。Stopwatchクラスを利用します。
Form1で４か所に1行ずつ追加します。Startではなく、Restartを使っているのは
リプレイしたときにStartだとリセットされないからです。
Restartだとリセット＋スタートの機能を持ちます。リザルト画面にラベルを2つ貼り付けます。
タイムと数字。
Form3で経過時間を受け取ります。
form3_Loadメソッドで以下1行を追加してください。Stopwatchの値を「Elapsed」で取得すると「00:01:03.1235785」のような表記になります。
スコアと同じように「ToString」で文字列にし、
「Substring(6,6)」で6桁目から6桁を切り取ります(要素と同じで最初を0桁目とし数えます)。以下ように表記されればOK！
もうここまで来れば説明しなくてもできそうですがｗ
選択モードのリザルト表示も解説します。
まずはラベルを用意します。
せっかくなのでタイムとモードは英文字で統一しました。
未選択時はNormal なのでテキストは「Normal 」。
Form2.csで渡す変数を定義。mode_Selectメソッドに以下を追加。Form3.csのform3_Loadメソッドで受け取り代入。実行してみてください。
未選択にNormal 、選択時に選択したモードが表示されていれば成功！プレイ画面を×ボタンで閉じても、
裏でボールは動き続けリザルトへ遷移してしまう。
Form1のプロパティのイベントでFormClosingを設定します。

これは×ボタン押下時に処理が流れます。
失敗時の処理をコピペして終わり。お疲れ様でした。今回は一時パドルの挙動がおかしくなって時間かかってしまいました。
そんなときは一度Visual Studioを再起動すると直ったり！・・・全体ソースを載せていないのでGitHubに投稿しました。
以下から確認できます。気になるCSファイル等を見てください。
https://github.com/seyryo/sayryo/tree/start/Breakout次回は
カウントダウンスタートとCLEAR時の処理を作っていく予定です。↓作成中


