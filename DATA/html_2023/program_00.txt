
public partial class MainWindow : Window
{
    public static string Message = "メッセージ";

    //今日の日付
    public static DateTime? collectStartDate = DateTime.Today;

    ///&lt;summary&gt;
    /// VMクラスを定義する
    ///&lt;/summary&gt;
    MainVM myVM = new MainVM();

    //コンストラクタ
    public MainWindow()
    {
        InitializeComponent();

        //VMクラスをxaml側に反映させる
        DataContext = myVM;
    }

    ///&lt;summary&gt;
    /// 検索ボタンを押下したとき発火
    ///&lt;/summary&gt;
    private void Button_Click(object sender, RoutedEventArgs e)
    {
        myVM.PId = Message;
        myVM.dayTime = collectStartDate;
    }

}


//VMクラスを定義
public class MainVM : INotifyPropertyChanged
{
    /*MachineクラスのインスタンスをObservableCollectionで定義*/
    private ObservableCollection&lt;Machine&gt; _Machines = new ObservableCollection&lt;Machine&gt;()
    {
        new Machine(){Id=1111, Name="aaa"},
        new Machine(){Id=2222, Name="bbb"}
    };
    /*セッターゲッターを定義*/
    public ObservableCollection&lt;Machine&gt; Machines
    {
        get =&gt; _Machines;
        set
        {
            _Machines = value;
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(Machines)));
        }
    }

    //ID
    private string _PId;
    public string PId
    {
        get =&gt; _PId;
        set
        {
            _PId = value;
            SetProperty(nameof(PId));
        }
    }

    //日付
    private DateTime? _dayTime;
    public DateTime? dayTime
    {
        get =&gt; _dayTime;
        set
        {
            _dayTime = value;
            SetProperty(nameof(dayTime));
        }
    }

    //変更通知
    public void SetProperty(string PropertyName)
    {
        var e = new PropertyChangedEventArgs(PropertyName);
        PropertyChanged?.Invoke(this, e);
    }

    //INotifyPropertyChangedに定義されているイベント
    public event PropertyChangedEventHandler PropertyChanged;
}

public class Machine
{
    public int Id { get; set; }
    public string Name { get; set; }
}

