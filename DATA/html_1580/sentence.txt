More than 1 year has passed since last update.本章では、Uno Platform の応用的な機能や Tips について説明します。Uno Platform のプロジェクトを新規作成すると Droid, iOS, Shared, UWP, Wasm の 5 つのプロジェクトが出来ます。
この中の Shared プロジェクトに多くのコードを書いていくのですが、Shared プロジェクトにクラスを作ると「プロジェクト名.Shared」がデフォルトの名前空間になります。
この Shared を消すには、ソリューションエクスプローラーで Shared のプロジェクトを選択して右クリックメニューから「プロパティ」を選択します。
プロパティウィンドウが表示されるので、その中のルート名前空間から .Shared を消します。これでクラスの新規作成時に名前空間に Shared が含まれなくなります。Uno Platform は、UWP の API を各プラットフォームで動くように実装されていますが、基本的には UI 部分の機能が主になります。
そのため、どうしても UWP の API だけでは出来ないことも出てきます。そういった時のために Uno Platform にはプラットフォーム固有の処理を実装する方法があります。
Android 固有の処理は Xamarin.Android で、iOS 固有の処理は Xamarin.iOS で、WebAssembly 固有の処理は、Wasm のプロジェクトに実装します。Shared プロジェクトに #if ディレクティブなどで同じファイルに記述することも出来ます。また、XAML でも UWP, Android, iOS, WASM で表示を分けるように書くことが出来ます。Uno Platform は、プラットフォーム毎にソースコードがビルドされます。
例えば、Android 用にビルドしているときは、Xamarin.Android の機能にアクセスできます。そして、各プロジェクトにはコンパイル定数が定義されています。そのため、#if ディレクティブを使うことでプラットフォーム固有の処理を記述できます。
Uno Platform のプロジェクトには以下の定数が定義されています。そのため各プラットフォーム固有の処理を実装する場合には以下のように書けます。また、この中で以下のように型の別名を定義することで、その後のコードで共通の型名を定義できます。また、同じシグネチャーのコードが Droid, iOS, Wasm, UWP の各プロジェクトにあれば Shared で使うことが出来ます。
この特性とパーシャル クラスを組み合わせると以下のように共通部分は Shared プロジェクトで定義して、プラットフォーム固有の処理は各プラットフォームのプロジェクトで実装できます。パーシャル クラスの使用例を以下に示します。WebAssembly は、JavaScript との相互運用機能を使って JavaScript の関数を実行してトーストを表示したいと思います。
使用する JavaScript のライブラリーは依存関係のないシンプルな iziToast にします。ダウンロードして iziToast.min.js を iziToast.js にリネームして Wasm プロジェクトの WasmScripts フォルダーに、iziToast.min.css を WasmCSS フォルダーに埋め込みリソースとして追加します。JavaScript の関数を呼び出すには Uno.Foundation.WebAssemblyRuntime クラスの InvokeJS メソッドに JavaScript の文字列渡して呼び出します。例えばアラートを出したい場合は WebAssemblyRuntime.InvokeJS("alert('Hello world');"); のようになります。JavaScript のライブラリーを使うときに注意する点は、require.js に対応したモジュールの場合は、require 関数を使って読み込んで使う点です。例えば今回利用する iziToast も、reqire.js に対応したライブラリーの 1 つです。C# に require 関数の呼び出しを含んだ JavaScript を文字列として書くと複雑になってしまうため、WasmScripts フォルダーに toastnotifier.js というファイルを埋め込みリソースで作成して、以下のような関数を定義して、それを C# から呼ぶ形で実装します。そして、WASM のプロジェクトに　ToastNotifier.cs というファイルを作成して InvokeJS メソッドで上記関数を呼び出します。これで UWP、Android、iOS、WebAssembly 全てのプラットフォームでの実装が終わりました。あとは、MainPage.xaml にボタンを置いてクリックイベントで以下のような呼び出し処理を書きます。各プラットフォームで実行すると以下のようにプラットフォーム固有の表示方法で表示されます。C# で書くロジックだけではなく、XAML でもプラットフォーム固有機能を利用できます。XAML 上でプラットフォーム固有機能を使うには、以下のような XML 名前空間を定義します。この XML 名前空間のプレフィックスをつけると、その対象プラットフォームでだけ評価されます。例えば Android と、それ以外のプラットフォームで表示テキストを変える場合は以下のようになります。m:Ignorable に追加しないといけない名前空間は追加するのを忘れないように注意してください。WebAssembly(左) と Android(右) で実行しました。この例では属性に指定しましたが、タグにも適用可能です。以下のようにタグを書くと、iOS のみで表示されるコントロールが定義できます。CommandBar を使うと、iOS や Android でタイトルバーを出すことが出来ます。ここまでは小さなプログラムで動作を見てみましたが、ここでは、もう少し本格的なサンプルで見ていきます。
UADO という Uno Platform のサンプルを見ていきます。このアプリケーションを Android などのモバイル OS で実行すると以下のようにネイティブの見た目のタイトルバーがある画面が表示されます。Android と iOS では、CommandBar コントロールを置くとタイトルバーが表示されます。UWP や WebAssembly でも CommandBar は表示されますが Android や iOS の持っている戻るボタンなどへの対応はありません。
UADO のサンプルでは、UWP と WebAssembly でも CommandBar の動きを Android と iOS に合わせるために、そこそこの量のコードが追加されています。
自分で対応する場合でも、同じようなコードを書くことになるので UADO の src/Uno.AzureDevOps/Uno.AzureDevOps.Views/Styles/Controls/CommandBar.xaml によるスタイルのカスタマイズと src/Uno.AzureDevOps/Uno.AzureDevOps.Views/Controls/PageHeader.xaml と src/Uno.AzureDevOps/Uno.AzureDevOps.Views/Controls/PageHeader.xaml.cs のソースコードは参考になるので興味のある方は是非確認してみてください。ほぼ全てのアプリケーションで複数レコードのデータをリスト形式で表示します。
Uno Platform では、ListView を使って実現します。ListView は、ItemsSource プロパティに設定された配列やリストを ItemTemplate に設定されたテンプレートで表示します。例えば以下のような Person クラスのリストを ListView に表示してみましょう。Person クラスの定義は以下のようになります。そして、XAML で ItemTemplate を設定した ListView を定義します。MainPage.xaml.cs では、コンストラクターで ListView の ItemsSource にデータを設定します。MainPage.xaml で使用している FromColorToSolidColorBrushConverter は以下のような Color から SolidColorBrush に変換するコンバーターです。実行すると、リスト状にデータが表示されます。以下に WebAssembly(左) と Android(右) に表示した例を示します。ListView の選択項目は SelectedItem プロパティで取得できます。アイテムの変更が変わった時に処理がしたいときは SelectionChanged イベントを処理します。
SelectionChanged イベントを処理するには ListView タグに以下のようにイベントハンドラーを追加します。イベントハンドラーの中では、イベント引数の AddedItems に選択項目が入っています。選択された項目の名前をメッセージダイアログで出す場合は以下のようになります。このコードを実行してリストを選択すると以下のようになります。JSON.NET のようなリフレクションを使うようなプログラムの場合、コード内で明示していない型は最終的な出力ファイルのサイズを小さくするためにビルド時に削除されることがあります。Uno Platform の WebAssembly のプロジェクトも、そのような動きをします。
そのため、WASM プロジェクトから別のライブラリを参照していて明示的にコード内から使っていないメソッドやコンストラクターをリフレクションで呼び出すと実行時エラーになります。例えば ClassLibrary1 というクラス ライブラリー プロジェクトを作成して、以下のようにクラスを 2 つ定義します。そして、MainPage クラスなどでリフレクションを使って Class1 をインスタンス化するコードを書きます。この状態で WASM プロジェクトを実行するとブラウザーの開発者ツールのコンソールに NullReferenceExcpeion が出たというメッセージが表示されます。
これは、Class1 がコード内には出てこないため、削除されてしまい型情報を取得するところで null が返ってきて後続の処理で NullReferenceException が発生します。
これを解消するには、WASM プロジェクトにある LinkerConfig.xml に以下のように追記します。type タグを使用せずに &lt;assembly fullname="ClassLibrary1" /&gt; のように書いてアセンブリー内の全ての型を削除しないように設定することが出来ます。Web API などから取ってきた JSON をシリアライズ・デシリアライズする場所などでエラーが出たときは、型情報などが消されてるためにエラーが起きている可能性があるので LinkerConfig.xml にアセンブリ―の定義を追加して確認してみてください。Uno Platform がベースとしている UWP は、見た目とロジックを分離して作る方法として MVVM パターンがよく採用されています。
XAML とコードビハインドが、View レイヤーで、その裏に View 用のモデルとして ViewModel がいて、アプリケーションのロジックの Model がいるという 3 つのレイヤーにわけてアプリケーションを作成する方法です。ViewModel クラスは、データバインディング向けに前章で紹介した INotifyPropertyChanged インターフェースを実装します。
Model と ViewModel 間はメソッド呼び出しやプロパティ変更通知などのイベントを使って互いにやり取りを行います。実際に MVVM パターンで作られた Uno Platform のアプリケーションとして本章でも取り上げた UADO があります。このリポジトリーの src/Uno.AzureDevOps/Uno.AzureDevOps.Views に View レイヤーのコードがあります。そして、src/Uno.AzureDevOps/Uno.AzureDevOps.Shared には ViewModel と Model のコードがあります。
このプロジェクトは DI コンテナーも使っていて、コンテナーの初期化処理は、先ほど紹介したフォルダーの中に、それぞれある Module.cs ファイル内で行われています。このサンプルでは、ViewModel 内で SimpleIoc というコンテナーの static なインスタンスから依存関係を取得しています。
このようにして、ViewModel から Model を取得して実際の処理をしています。本格的なアプリケーションを Uno Platform で実装するときには UADO は参考になるコードが沢山あるので確認してみてください。アプリが完成したらストア向けパッケージを作成します。各種パッケージの作成方法はここでは詳細には解説しませんが、UWP は UWP の方法で、Android は Xamarin.Android の方法で、iOS は Xamarin.iOS の方法でパッケージを作成できます。以下にドキュメントへのリンクの URL を書いておくのでストアに出す前に確認してください。前章で、画面遷移について説明しました。Frame クラスの Navigate メソッドを使うことで簡単に画面遷移が出来ることを説明しましたが、この状態では Android やブラウザーの戻るボタンには対応していません。
戻るボタンに対応するには Windows.UI.Core.SystemNavigationManager クラスの BackRequested イベントを使います。このイベントはシステムの戻るボタンをハンドリングするための UWP の API で Android の戻るボタンやブラウザーの戻るボタンにも対応しています。戻るボタンの動きをページ単位で細かく制御したい場合は各ページで上記イベントをハンドリングすることも出来ますが、戻るボタンが押されたら素直に戻る動作でよい場合は App.xaml.cs の OnLanuched メソッドの if(rootFrame == null) の if 文の中に以下のコードを追加することで対応できます。まとめここでは、Uno Platform の Tips や応用的なトピックを取り上げました。
ここで紹介した UADO プロジェクトは、参考になるコードがあるため是非 GitHub からクローンして実際に動かして確認してみてください。また、Uno Platform の開発はかなり活発に行われているので、以下の Uno Platform の Twitter アカウントをフォローしてウォッチしてみてください。


