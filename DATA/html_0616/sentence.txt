Windows アプリの DB 周りを調べていて、EF Core のマイグレーションがかなり便利だなと思ったので、構築手順とマイグレーション方法について記載します。公式サイトより引用です。Entity Framework Core は、.NET 用の最新のオブジェクト データベース マッパーです。 LINQ クエリ、変更の追跡、更新、スキーマの移行がサポートされています。 EF Core は、SQL Database (オンプレミスと Azure)、SQLite、MySQL、PostgreSQL、Azure Cosmos DB などの多くのデータベースに対応しています。私が使ったのは EF Core のチュートリアルです。
WPF の使用を開始する - EF Core | Microsoft Docs以下にサンプルコードもあるので、手書きせずともそちらを使っても大丈夫です。
GetStartedWPFただし、まだビルドはしないように気をつけてください。
理由は後ほど説明します。具体的には、_context.Database.EnsureCreated();と書かれていたところを、_context.Database.Migrate();に書き換えます。
書き換える理由としては以下の通りです（公式ドキュメント引用）データベースが既に存在する場合、EnsureCreated() によってデータベースのスキーマとシードデータが更新されないことに注意してください。 リレーショナルデータベースの場合、移行を使用する予定がある場合は EnsureCreated() を呼び出さないでください。ビルドをしないでください、と言ったのもこのためです。
もしビルドをしてしまった場合は、生成されたproducts.dbを削除してください。products.dbが生成されるはずです。個人的に便利だと思ったのがこのマイグレーションです。
本来ならクエリ文を手書きして適用する形でいろいろめんどくさいのですが、EF Core ではクエリ文を手書きせずとも簡単なコマンドで簡単に実現できます。例えばProduct.csを以下のように書き換えてみます。products.dbを見ると、1 で変更した内容が反映されているはずです。UWP アプリにて EF Core のマイグレーションをやるときは、App.xaml.csでマイグレーションしないと動かないので注意です。
WPF アプリなどを Windows アプリケーション パッケージ プロジェクトでパッケージングする場合も同様です。


