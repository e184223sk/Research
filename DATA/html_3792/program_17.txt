
#region IsFloating 依存関係プロパティ
/// &lt;summary&gt;
/// &lt;see cref="IsFloating"/&gt; 依存関係プロパティを識別します。
/// &lt;/summary&gt;
[NotNull]
private static readonly DependencyPropertyKey IsFloatingPropertyKey
    = DependencyProperty.RegisterReadOnly(
        nameof(IsFloating),
        typeof(bool),
        typeof(FloatingLabel),
        new PropertyMetadata(false, IsFloatingChangedCallback));

/// &lt;summary&gt;
/// &lt;see cref="IsFloating"/&gt; 依存関係プロパティを識別します。
/// &lt;/summary&gt;
[NotNull]
public static readonly DependencyProperty IsFloatingProperty = IsFloatingPropertyKey.DependencyProperty;

/// &lt;summary&gt;
/// フローティング ラベルがフロート表示されているかどうかを示す値を取得します。
/// これは依存関係プロパティです。
/// &lt;/summary&gt;
/// &lt;value&gt;フローティング ラベルがフロート表示されている場合は &lt;c&gt;true&lt;/c&gt;。それ以外の場合は &lt;c&gt;false&lt;/c&gt;。&lt;/value&gt;
public bool IsFloating
{
    get =&gt; (bool)GetValue(IsFloatingProperty);
    private set =&gt; SetValue(IsFloatingPropertyKey, value);
}

/// &lt;summary&gt;
/// &lt;see cref="IsFloating"/&gt; 依存関係プロパティが変更されたときに呼び出されます。
/// &lt;/summary&gt;
/// &lt;param name="d"&gt;イベント ソース。&lt;/param&gt;
/// &lt;param name="e"&gt;イベント データ。&lt;/param&gt;
private static void IsFloatingChangedCallback([NotNull] DependencyObject d, DependencyPropertyChangedEventArgs e)
    =&gt; ((FloatingLabel)d).OnIsFloatingChanged((bool)e.OldValue, (bool)e.NewValue);

/// &lt;summary&gt;
/// &lt;see cref="IsFloating"/&gt; 依存関係プロパティが変更されたときに呼び出されます。
/// &lt;/summary&gt;
/// &lt;param name="oldIsFloating"&gt;変更される前の値。&lt;/param&gt;
/// &lt;param name="newIsFloating"&gt;変更された後の値。&lt;/param&gt;
protected virtual void OnIsFloatingChanged(bool oldIsFloating, bool newIsFloating) { ... }
#endregion

