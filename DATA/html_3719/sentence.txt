More than 1 year has passed since last update.フィボナッチ数列をメソッドに記述することを考えます。
フィボナッチ数列は
0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55,……
と続いていく数列です。
式としては
F(0) = 0
F(1) = 1
F(n) = F(n-1) + F(n-2) （n&gt;=2の場合）
と表されます。
※1から始める場合もあるようですが、今回は0から始める数列としました。これをそのままC#で記述しようと思えば以下の様になります。しかし、このメソッドでは n&gt;=2 の場合に行われる Fib(n-1) と Fib(n-2) の計算で重複しており、速度上の問題を抱えています。簡単に高速化を考えるのであれば、計算した結果をキャッシュして置き、計算済みのものはそこから取得するようにすることが思いつきます。このメソッドにおける問題としては、計算結果を保存しておく Cache が他のメソッド等から書き換えられる可能性があります。
※メソッドが複雑になったこと、非同期呼び出しについての意見もあると思いますが、それは別の検討事項としたいと思います。メソッド内に計算結果を保存する変数を閉じ込めることを検討します。
以下の様に記述します。これによりCreateFib内で作成されるDictionaryのインスタンスは他のメソッド等からアクセスされないため、安全に使えます。実際にフィボナッチ数列を高速化するのであれば一般解を求め、一般解をメソッド化することが安全で高速な方法だと思います。（実際にフィボナッチ数列を業務で書く人もいないと思いますし）
定義を素直に記述すると再帰が発生し、遅くなる可能性がある例として利用しましたが、
この技法そのものは特定のメソッドでしか使用しない特定のメンバをメソッド内に閉じ込め、安全性を高めることに利用できると思います。


