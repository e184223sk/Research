この記事は C# Advent Calendar 2020 17日目の記事です。C#を書いている人なら一度はインターフェースという機能を見たことがあるだろう。
メソッド、プロパティなどの定義だけを記述しておき、実装を強制できるあれのことだ。一体あんなものが何の役に立つんだろうか。
私は最初そんなことを思っていた。しかし、テストコードを書きたいと思ったときインターフェースはとても役に立つことに気づいたんだ。
この記事ではテストが難しいコードに対し、インターフェースを使用し、テスタブルなコードに変更していくことで、インターフェースについて理解を深められたらと思う。この記事は以下のような人を対象とする。それでは始めよう。入力した文字列をラベルプリンタに印刷するシステムを想定しよう。
システムの仕様は以下の通りだ。これらの仕様を満たすような以下のようなコードがあったとしよう。
このときPrintServiceクラスに対してテストコードを書けるだろうか？
（コードに不備があるかもしれないが、あくまで例題用のサンプルコードとして見ていただければと思う。）MainPrintServiceクラスLabelPrinterクラス今のままPrintServiceクラスに対してテストコードを書こうとするとどうなるだろうか。まずラベルプリンタを準備して・・・。
テストに応じて電源を付けたり、消したり・・・。そんなことできるはずがない。テストコードを動かすために一人一台ラベルプリンタを準備するのは難しい。
仮に準備できたとしてもテストごとにラベルプリンタの電源を付けたり、消したりするなんてできないだろう。このままではPrintServiceクラスはテストコードを書くことができないのだ。このように外部のデバイスへを利用したり、データベースに接続するなど、外部のものに依存しているとテストコードを書くのは途端に難しくなる。どうすればテスタブルなコードにできるだろうか。
ここからは実際にテスタブルなコードに改善していこう。今のコードの依存関係を改めて整理してみよう。

この依存関係を見て分かる通り、PrintServiceクラスはLabelPrinterクラスを直接使用しているため、テストしようとするとLabelPrinterクラスの実装にもろに影響を受けてしまう。LabelPrinterクラスの実装を気にせずに使用する方法は無いだろうか？
こういうときこそインターフェースの出番だ。LabelPrinterクラスに依存するのではなく、LabelPrinterクラスのインターフェースに依存するように変更してみよう。
（このことを依存関係を逆転させると言ったりもする。以下の図を見ると矢印の方向が逆転していることが分かる。）

LabelPrinterクラスのメソッドをすべてインターフェースとして抽出する。そして、LabelPrinterクラスはこのインターフェースを実装するようにする。あとは、PrintServiceクラスをインターフェースに依存させるようにするだけだ。これを見て「結局ラベルプリンタを使わないといけないじゃないか」と思うかもしれない。
それは正しいが、その解決は次のステップに置いておこう。
まずはこのインターフェースに依存するということが何よりも重要だ。インターフェースに依存したことにより、PrintServiceクラスはLabelPrinterクラスの実装に依存しなくなった。
さらに嬉しいことに、今まではたった一つのクラスしか使うことができなかったが、インターフェースを実装するクラスであれば何でも利用できるようになった。
具体的なクラスに依存するのではなく、インターフェースに依存することで、柔軟性が飛躍的に向上したしたことが分かると思う。さて、先程解決できなかった次のステップに移ろう。
今のままではPrintServiceクラスの中でLabelPrinterを生成(new)しているため、どうしてもLabelPrinterの利用を避けられない。
それなら、内部で生成するのではなく外部で生成し、それを渡してあげるのはどうだろうか。
先ほど抽出したインターフェースを実装したクラスを受け取れるようにコードを変更してみよう。このように依存するものを外部から渡してあげることを依存性の注入（DI）と言ったりする。
これでPrintServiceクラスはILabelPrinterインターフェースを実装しているクラスであれば何でも受け取れるようになった。
これでテスト用のLabelPrinterクラスを設定するといったことも可能だ。テストコードが書ける準備は整った。
早速テストコードを書いてみよう！テストコードではILabelPrinterインターフェースを実装した、LabelPrinterの結果を偽装したクラスを作成し、先程準備したコンストラクタで偽装したクラスを渡してあげるようにする。テストに応じてパラメータを自由に変更することで、ラベルプリンタを実際に準備したり、電源を入れたり、消したりしなくても、テストができるようになった。この記事ではテストが難しいコードに対し、テスタブルなコードに変更して行くことでインターフェースの使い所やメリットを紹介した。
この記事を読んでインターフェースについての理解やテスタブルなコードについての理解が少しでも深まったなら幸いだ。それではまた。TomoProg


