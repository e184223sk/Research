More than 3 years have passed since last update.何か物を飛ばすとき、着弾地点にマーカーを表示したい時がありませんか？
本記事は、飛ばす物体の軌跡の予測線と、着弾座標にマーカーを表示する実装例を紹介します。
凸凹した地形など、着弾地点の高さがあらかじめ分からない場合に重宝します。
弾の射出速度だけを調節して、地形に沿った着弾マーカーを表示する実装例以下の3つのスクリプトを使用します。(長いので折り畳んでいます)
（初速度と開始座標が既に決まっているのであれば、DrawArc.csをちょっと変えるだけで十分です。）スクリプト


DrawArc.cs
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class DrawArc : MonoBehaviour
{
    /// &lt;summary&gt;
    /// 放物線の描画ON/OFF
    /// &lt;/summary&gt;
    //[SerializeField]
    private bool drawArc = true;

    /// &lt;summary&gt;
    /// 放物線を構成する線分の数
    /// &lt;/summary&gt;
    //[SerializeField]
    private int segmentCount = 60;

    /// &lt;summary&gt;
    /// 放物線を何秒分計算するか
    /// &lt;/summary&gt;
    private float predictionTime = 6.0F;

    /// &lt;summary&gt;
    /// 放物線のMaterial
    /// &lt;/summary&gt;
    [SerializeField, Tooltip("放物線のマテリアル")]
    private Material arcMaterial;

    /// &lt;summary&gt;
    /// 放物線の幅
    /// &lt;/summary&gt;
    [SerializeField, Tooltip("放物線の幅")]
    private float arcWidth = 0.02F;

    /// &lt;summary&gt;
    /// 放物線を構成するLineRenderer
    /// &lt;/summary&gt;
    private LineRenderer[] lineRenderers;

    /// &lt;summary&gt;
    /// 弾の初速度や生成座標を持つコンポーネント
    /// &lt;/summary&gt;
    private ShootBullet shootBullet;

    /// &lt;summary&gt;
    /// 弾の初速度
    /// &lt;/summary&gt;
    private Vector3 initialVelocity;

    /// &lt;summary&gt;
    /// 放物線の開始座標
    /// &lt;/summary&gt;
    private Vector3 arcStartPosition;

    /// &lt;summary&gt;
    /// 着弾マーカーオブジェクトのPrefab
    /// &lt;/summary&gt;
    [SerializeField, Tooltip("着弾地点に表示するマーカーのPrefab")]
    private GameObject pointerPrefab;

    /// &lt;summary&gt;
    /// 着弾点のマーカーのオブジェクト
    /// &lt;/summary&gt;
    private GameObject pointerObject;


    void Start()
    {
        // 放物線のLineRendererオブジェクトを用意
        CreateLineRendererObjects();

        // マーカーのオブジェクトを用意
        pointerObject = Instantiate(pointerPrefab, Vector3.zero, Quaternion.identity);
        pointerObject.SetActive(false);

        // 弾の初速度や生成座標を持つコンポーネント
        shootBullet = gameObject.GetComponent&lt;ShootBullet&gt;();
    }

    void Update()
    {
        // 初速度と放物線の開始座標を更新
        initialVelocity = shootBullet.ShootVelocity;
        arcStartPosition = shootBullet.InstantiatePosition;

        if (drawArc)
        {
            // 放物線を表示
            float timeStep = predictionTime / segmentCount;
            bool draw = false;
            float hitTime = float.MaxValue;
            for (int i = 0; i &lt; segmentCount; i++)
            {
                // 線の座標を更新
                float startTime = timeStep * i;
                float endTime = startTime + timeStep;
                SetLineRendererPosition(i, startTime, endTime, !draw);

                // 衝突判定
                if (!draw)
                {
                    hitTime = GetArcHitTime(startTime, endTime);
                    if (hitTime != float.MaxValue)
                    {
                        draw = true; // 衝突したらその先の放物線は表示しない
                    }
                }
            }

            // マーカーの表示
            if (hitTime != float.MaxValue)
            {
                Vector3 hitPosition = GetArcPositionAtTime(hitTime);
                ShowPointer(hitPosition);
            }
        }
        else
        {
            // 放物線とマーカーを表示しない
            for (int i = 0; i &lt; lineRenderers.Length; i++)
            {
                lineRenderers[i].enabled = false;
            }
            pointerObject.SetActive(false);
        }
    }

    /// &lt;summary&gt;
    /// 指定時間に対するアーチの放物線上の座標を返す
    /// &lt;/summary&gt;
    /// &lt;param name="time"&gt;経過時間&lt;/param&gt;
    /// &lt;returns&gt;座標&lt;/returns&gt;
    private Vector3 GetArcPositionAtTime(float time)
    {
        return (arcStartPosition + ((initialVelocity * time) + (0.5f * time * time) * Physics.gravity));
    }

    /// &lt;summary&gt;
    /// LineRendererの座標を更新
    /// &lt;/summary&gt;
    /// &lt;param name="index"&gt;&lt;/param&gt;
    /// &lt;param name="startTime"&gt;&lt;/param&gt;
    /// &lt;param name="endTime"&gt;&lt;/param&gt;
    private void SetLineRendererPosition(int index, float startTime, float endTime, bool draw = true)
    {
        lineRenderers[index].SetPosition(0, GetArcPositionAtTime(startTime));
        lineRenderers[index].SetPosition(1, GetArcPositionAtTime(endTime));
        lineRenderers[index].enabled = draw;
    }

    /// &lt;summary&gt;
    /// LineRendererオブジェクトを作成
    /// &lt;/summary&gt;
    private void CreateLineRendererObjects()
    {
        // 親オブジェクトを作り、LineRendererを持つ子オブジェクトを作る
        GameObject arcObjectsParent = new GameObject("ArcObject");

        lineRenderers = new LineRenderer[segmentCount];
        for (int i = 0; i &lt; segmentCount; i++)
        {
            GameObject newObject = new GameObject("LineRenderer_" + i);
            newObject.transform.SetParent(arcObjectsParent.transform);
            lineRenderers[i] = newObject.AddComponent&lt;LineRenderer&gt;();

            // 光源関連を使用しない
            lineRenderers[i].receiveShadows = false;
            lineRenderers[i].reflectionProbeUsage = UnityEngine.Rendering.ReflectionProbeUsage.Off;
            lineRenderers[i].lightProbeUsage = UnityEngine.Rendering.LightProbeUsage.Off;
            lineRenderers[i].shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.Off;

            // 線の幅とマテリアル
            lineRenderers[i].material = arcMaterial;
            lineRenderers[i].startWidth = arcWidth;
            lineRenderers[i].endWidth = arcWidth;
            lineRenderers[i].numCapVertices = 5;
            lineRenderers[i].enabled = false;
        }
    }    

    /// &lt;summary&gt;
    /// 指定座標にマーカーを表示
    /// &lt;/summary&gt;
    /// &lt;param name="position"&gt;&lt;/param&gt;
    private void ShowPointer(Vector3 position)
    {
        pointerObject.transform.position = position;
        pointerObject.SetActive(true);
    }

    /// &lt;summary&gt;
    /// 2点間の線分で衝突判定し、衝突する時間を返す
    /// &lt;/summary&gt;
    /// &lt;returns&gt;衝突した時間(してない場合はfloat.MaxValue)&lt;/returns&gt;
    private float GetArcHitTime(float startTime, float endTime)
    {
        // Linecastする線分の始終点の座標
        Vector3 startPosition = GetArcPositionAtTime(startTime);
        Vector3 endPosition = GetArcPositionAtTime(endTime);

        // 衝突判定
        RaycastHit hitInfo;
        if (Physics.Linecast(startPosition, endPosition, out hitInfo))
        {
            // 衝突したColliderまでの距離から実際の衝突時間を算出
            float distance = Vector3.Distance(startPosition, endPosition);
            return startTime + (endTime - startTime) * (hitInfo.distance / distance);
        }
        return float.MaxValue;
    }
}




スクリプト


ShootBullet.cs
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class ShootBullet : MonoBehaviour
{
    /// &lt;summary&gt;
    /// 弾のPrefab
    /// &lt;/summary&gt;
    [SerializeField, Tooltip("弾のPrefab")]
    private GameObject bulletPrefab;

    /// &lt;summary&gt;
    /// 砲身のオブジェクト
    /// &lt;/summary&gt;
    [SerializeField, Tooltip("砲身のオブジェクト")]
    private GameObject barrelObject;

    /// &lt;summary&gt;
    /// 弾を生成する位置情報
    /// &lt;/summary&gt;
    private Vector3 instantiatePosition;
    /// &lt;summary&gt;
    /// 弾の生成座標(読み取り専用)
    /// &lt;/summary&gt;
    public Vector3 InstantiatePosition
    {
        get { return instantiatePosition; }
    }

    /// &lt;summary&gt;
    /// 弾の速さ
    /// &lt;/summary&gt;
    [SerializeField, Range(1.0F, 20.0F), Tooltip("弾の射出する速さ")]
    private float speed = 1.0F;

    /// &lt;summary&gt;
    /// 弾の初速度
    /// &lt;/summary&gt;
    private Vector3 shootVelocity;
    /// &lt;summary&gt;
    /// 弾の初速度(読み取り専用)
    /// &lt;/summary&gt;
    public Vector3 ShootVelocity
    {
        get { return shootVelocity; }
    }

    void Update ()
    {
        // 弾の初速度を更新
        shootVelocity = barrelObject.transform.up * speed;

        // 弾の生成座標を更新
        instantiatePosition = barrelObject.transform.position; 

        // 発射
        if (Input.GetKeyDown(KeyCode.Space))
        {
            // 弾を生成して飛ばす
            GameObject obj = Instantiate(bulletPrefab, instantiatePosition, Quaternion.identity);
            Rigidbody rid = obj.GetComponent&lt;Rigidbody&gt;();
            rid.AddForce(shootVelocity * rid.mass, ForceMode.Impulse);

            // 5秒後に消える
            Destroy(obj, 5.0F);
        }
    }
}




スクリプト


AngleController.cs
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class AngleController : MonoBehaviour
{
    /// &lt;summary&gt;
    /// 感度
    /// &lt;/summary&gt;
    [SerializeField, Range(0.01F, 5.0F), Tooltip("感度")]
    private float sensitivity = 1.0F;

    /// &lt;summary&gt;
    /// 砲身のオブジェクト
    /// &lt;/summary&gt;
    [SerializeField, Tooltip("砲身のオブジェクト")]
    private GameObject barrelObject;

    void Update ()
    {
        if (Input.GetKey(KeyCode.LeftArrow))
        {
            this.transform.Rotate(new Vector3(0F, -1.0F * sensitivity, 0F));
        }
        if (Input.GetKey(KeyCode.RightArrow))
        {
            this.transform.Rotate(new Vector3(0F, 1.0F * sensitivity, 0F));
        }

        if (Input.GetKey(KeyCode.UpArrow))
        {
            barrelObject.transform.Rotate(new Vector3(-1.0F * sensitivity, 0F, 0F));
        }
        if (Input.GetKey(KeyCode.DownArrow))
        {
            barrelObject.transform.Rotate(new Vector3(1.0F * sensitivity, 0F, 0F));
        }

    }
}





砲台
砲台っぽいオブジェクトを作り、前述の3つのスクリプトをアタッチします。（下図参照）
弾
RigidBodyを付けたSphereなどをPrefab化し、ShootBulletスクリプトのBulletPrefabにアタッチします。
レイヤーは『Ignore Raycast』に設定しておきます。
マーカー
着弾点を示すマーカーをPrefab化し、DrawArcスクリプトのPointerPrefabにアタッチします。
今回は下図のような、LineRendererで矢印を描いたものを使用します。



