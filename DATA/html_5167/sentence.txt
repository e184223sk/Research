ARFoundationのImageTrackingを使えば登録した画像マーカーを認識することにより、
任意のARオブジェクトを出現させることができます。【参考リンク】：ARFoundationを触ってみた実は画像マーカーを複数登録することも可能なようです。
今回はそれについて調べたのでメモします。内容としては"認識した画像マーカーそれぞれの上にARオブジェクトを出す"だけに留めます。
下記のような難しい実装の手法をこの記事で書くわけでないということ予め明示しておきます。×複数の画像マーカーの位置関係を固定した、広域対応のARの手法。
【参考リンク】：【GyroEye Holo】マーカー位置画像マーカー二枚のそれぞれに対応したARオブジェクトを表示しています。
あまり用途は無いかもですが、ロスト時に非表示にする実装も試してみました。※Andoroidでしか試していませんが、ARFoundationなのでiosでも動くはず、、、です。バージョン情報に従って一通りビルドできるまでの環境構築が終わったら、下記画像を参考にReferenceImageLibraryを作成します。次にReferenceImageLibraryを設定します。あとはAR Session OriginにAR Tracked Image Managerを設定し、
Serialized Libraryに先ほど作成したReferenceImageLibraryを設定すれば準備完了です。やっていることは下記です。①"ReferenceImageLibraryに登録した画像の名前"と"表示したいARオブジェクトのPrefab"を辞書で紐づける。
②画像マーカー認識時に画像の名前に紐づけられたARオブジェクトを出現させる。trackedImagesChangedに画像マーカー認識時のイベントハンドラーを設定できます。イベントハンドラーの引数であるARTrackedImagesChangedEventArgsからは
下記3種類の情報をそれぞれのタイミングで得ることができます。【引用元】：Struct ARTrackedImagesChangedEventArgsaddedとupdatedの使い道は理解できたのですが、removedがいまいち使い道がわかりませんでした。
The list of ARTrackedImages removed since the last event.という説明から、画像をロストした時？かと思い、
その前提で実装を組んでみましたが、何をやっても呼ばれずです。使い道等知ってる方いたら教えてください。先ほど画像をロストした時について実装を試みたと書きましたが、
それについてはTrackingStateが有効でした。ARTrackedImage(認識した画像)から三種類取得できます。【引用元】: Enum TrackingState簡単に言うとLimitedは認識精度が低い時、Noneは非認識時、Trackingは認識した時　といった感じです。画像マーカーを動かすと、再認識とロストを繰り返してARオブジェクトがカクカクし始めるので、
平面に固定することを前提として使った方がいいかも　と色々と実験しながら思いました。AR Foundation Improved Image Tracking - Multiple Objects/Images - Unity Augmented Reality/AR


