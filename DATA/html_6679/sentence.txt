More than 3 years have passed since last update.WPFでダイアログメッセージをちょっとカッコ良く出したい！
そう思ったことはありませんか。
MahAppsとMaterial Design In XAML ToolkitはWPFで簡単に見た目をカッコ良くするライブラリです。
上記2つの基本的な説明は
Material Design In XAML ToolkitでWPFアプリにモダンなUIを！
Material Design In XAML Toolkitでお手軽にWPFアプリを美しく
等をご参考にしてください。この記事ではの3つについてコードビハインドとViewModelからの使用方法を説明します。最初にWindowの中央を帯状に覆うMahAppsのダイアログです。
前提としてMahAppsを使うためにMainWindowはWindowではなくMetroWindowから継承します。コードビハインドから出す方法は簡単で、MetroWindowのShowMessageAsync()を呼び出すだけです。実行結果
ViewModelからの場合はIDialogCoordinatorを使って呼び出します。
まずViewのDialogCoordinatorをViewModelのコンストラクタ経由かプロパティ経由で渡します。
今回はコードビハインドをなるべく書かないため、プロパティ経由で渡します。
MahAppsライブラリのサンプルはコンストラクタ経由で書かれています。実行結果はコードビハインド版とほぼ同じなので省略します。次は中央に浮き上がって見えるMaterialダイアログです。
ポイントはダイアログを出す部分を&lt;material:DialogHost&gt;の直下に置くことです。
またMahAppsと違ってデフォルトのダイアログウインドウとかはありませんから、自前でクラスを作る必要があります。コードビハインド版・ViewModel版共通のダイアログウインドウのViewです。
注意点として、ダイアログウインドウと書いてありますが、ダイアログホストに渡すViewはUserControlから継承する必要があります。自前のダイアログウインドウのコンストラクタで表示する内容を渡します。
そしてそのダイアログウインドウをMainWindowのDialogHostで表示します。実行結果です。
ViewModelの場合は表示状態と表示内容をプロパティでバインドします。こちらは自前のダイアログウインドウのコンストラクタ経由ではなく、ダイアログウインドウのViewModelを作って渡しています。
※追記1　ViewModelでViewを生成するのを止めて、View側のDataTemplateでダイアログのViewとViewModelを結びつける形に変更
※追記2　ViewModelでDialogHostを呼ぶのは止めて、表示状態プロパティの変化でダイアログを表示する形に変更実行結果はコードビハインドとほぼ同じなので省略します。ダイアログとはちょっと違いますが、同じくメッセージを表示するためのUIとしてスナックバーがあります。
ダイアログとは違い、スレッドをブロックせず、しばらく立つと自動で消えます。
一番良く見るのはスマートフォンの通知メッセージですね。スナックバーを表示したい場所に&lt;material:Snackbar&gt;を置きます。
デフォルトではメッセージが無いので最初は表示されません。SnackbarのMessageQueueにメッセージを送ります。
Queueと書いてあることから分かるように、
複数のメッセージを送ると順番に表示されます。実行結果です。
ViewModel側にSnackbarMessageQueueを保持してViewはそれにバインディングします。実行結果です。
一部抜粋して表示していたコード全体です。MahAppsとMaterial Design In XAML Toolkitを使って3つのメッセージ表示について説明しました。
これでもうWPFデフォルトのださいメッセージダイアログとはおさらば出来ますね！VisualStudio2015
.NET Framework 4.6
C#6
ReactiveProperty


