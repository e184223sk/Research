More than 1 year has passed since last update.Blazorとは、一言で説明すると「C#ですべてを作る」ことを考えたフレームワークです。昨今のJavaScriptライブラリの進化やフレームワークの機能の充実には目を見張るものがあります。
クライアントサイドでもダイナミックな処理が可能となった反面、非同期処理によるリアルタイム更新が当然のように求められ開発者に掛かる負担は大きくなっています。
MVCモデルを前提としたフレームワークが出てきた頃から、「クライアントサイドとサーバサイドを分離することでデザイナーとプログラマーの協業がしやすく云々」という説明をよく目にしますが、「いやデザイナーなんて社内にいねーから」というほとんで一人でやらなきゃいけない（当然JavaScriptも使いこなさなきゃいけない）技術者＠零細開発会社への福音になるかもしれないので、個人的には今後の主流になってほしいと願っています。この記事では、Blazorのプロジェクト作成から、.NET Identity をカスタマイズした認証機能作成までの流れを見ていきたいと思います。Blazorアプリケーションは、ASP.NET Coreにプロジェクトテンプレートとして用意されています。
Visual Studioの「新しいプロジェクトの作成」で、プロジェクトテンプレートに「Blazor」アプリを選択します。
プロジェクト名を入力して作成を押します
Blazor サーバーアプリを選択し、認証なしになっているので変更を選択します

個別のユーザーアカウント→アプリ内のストア ユーザーアカウントが選択されていることを確認し、OKをクリックしプロジェクトを作成して下さい

これでプロジェクトが作成されます。プロジェクトの構成はこんな感じになっていると思います。
念のため、依存関係→パッケージからEntityFramework、Identity、SQLServer、Toolsなどのパッケージがインストール済みか確認してください。
もしなければここまでの手順をやりなおすか、NuGetパッケージマネージャーからインストールしてください。
F5をクリック、もしくは「IIS Express」をクリックしてサンプルプロジェクトを実行してみます。

サンプルでは「Home」、「Counter」、「Fetch data」の３つのページが用意されています。
各ページについて詳述はしませんが、（実行時に少し時間がかかるものの）ページ切り替えやボタン操作が非同期でサクサク動くことがわかると思います。

ページ右上にあるRegister をクリックしてみてください。
ここでアカウントを登録することができます。Login と組み合わせてログインユーザー用の機能やページを設定することができます。

Register とLogin の画面はデフォルトのテンプレートには存在しませんが、プロジェクト作成時に認証ありを選択したおかげで、追加されています。
これらは .NET Core の Identity Core という機能を利用して作成されています。少し歴史的な説明をすると、.NET Core 以前の .NETでは Membership Provider という名前で認証機能は提供されていました。これがあることにより、ログインコントロールと連携して、ほぼノンコーディングで認証/認可処理が可能になりましたが、SQL Server以外のDBでは使いにくかったりカスタマイズがしにいといった課題がありました。その後、認証機能は.NET Idendity を経て .NET Idendity Core に進化し、かつての課題を解決しつつ多くの機能が追加されていきました。
登録とログイン周りだけでも二要素認証、パスワードリセット、パスワード忘れの処理が用意されていて、パスワードのハッシュ変換は当然のことながら、SNS認証、SQL Server以外への対応などなども盛り込まれています。正直これらの機能を自力で実装するのは要件定義も実装もテストも困難。情報漏洩は企業イメージの失墜のみならず金銭問題に発展するリスクも抱えるため、認証にかける作業を省略できるのはありがたいの一言に尽きます（何かあったらマイクロソフトのバグですと言い訳できます、できません）。ただデフォルトでこれほど機能モリモリだと、作成されるDBも多く、よくわからないファイルも大量作成されますので、最低限使いこなすための知識は必要です。Identity の機能は多岐にわたるため、ここでは登録とログインのカスタマイズに絞って説明したいと思います。Areaフォルダ内にあるIdentityフォルダを右クリックし、追加→新規スキャフォールディングアイテムをクリックします

追加アイテムとして「ID」を選択し、追加をクリック（パッケージのインストールなどで少し待たされます）
オーバーライドするファイルを聞かれるので、「Account\Login」と「Account\Register」にチェックデータコンテキストクラスの欄で「＋」ボタンクリックし、コンテキストの型の名前を指定（ここではIdentityContext）

Areasフォルダ配下を確認すると、コンテキストファイルやRegister/Login ページが追加され、編集できるようになりました。
スキャフォールディング前

スキャフォールディング後
この状態でF5を押しビルドすると、Programファイルでエラーが発生します。
原因はもともとあったスタートアップファイルと、新たに追加された「IdentityHostingStartup.cs」でそれぞれIdentity をサービスに追加していてバッティングしているからです。

まずそれを解決するためにStartup.cs の方を消します。IdentityHostingStartup の接続情報をDefaultConnectionに修正しておきます再度F5を押しビルドし、エラーが起きないことを確認してください。次に、自前のデータベースにユーザー情報を保存するために、DB接続情報を設定しているappsettings.json ファイルをいじります。
ここではスキャフォールディング時に追加された接続情報は削除し、DefaultConnectionに統一しています。もしまだBlazorアプリ用のDBを用意していなかったらここで新規データベースを作成して、接続文字列を取得して下さい。
Visual Studio の表示→サーバーエクスプローラー→データ接続を右クリック→新しいSQL Serverデータベースの作成→サーバーを指定し、新しいデータベース名（ここではBLAZORAPP）を入力しOKをクリック

追加された接続情報を選択しF4キーもしくは右クリック→プロパティを押すとプロパティが表示されるので、接続情報をコピーして前述のappsettings.json ファイルに貼り付けます

ではこの状態でサンプルページを実行し、Register から登録作業を行えるようになっているのでしょうか。
ここでは試しませんが個人情報を入力して登録しようとすると、「SqlException: オブジェクト名 'AspNetUsers' が無効です。」というエラーが発生します。
コードのプロパティとDBが結びついていないためです。そのための認証に関するテーブル群をデータベースに作成しましょう。
EntityFrameworkに慣れている方には説明不要ですが、SQL Server Management Studio を開いたり、 SQLのコマンドを書いたりは一切しません。
具体的には、マイグレーションファイルの作成と、データベースの更新作業をパッケージマネージャーコンソールというVisual Studio 内のツールを使って行います。ASP.NET Core でデータベースアクセスを行う場合、必ず利用することになるのが「Entity Framework Core」というフレームワークです。
Entity Framework は「ORM」と呼ばれる技術のためのフレームワークです。
一言でいうならばSQL を全く書かずにDBを利用できる機能です。
ORMの考え方が出てきた時は、「こんなの使わないで真面目にSQL覚えればいいのに」と思ったものですが、Visual Studio のインテリセンスにサポートされながら初めてLINQを書いた時は、あまりの便利さに泣きそうになりました。
マイグレーションやデータベースの更新はこの「Entity Framework Core」の機能により実行されます。Visual Studio で「ツール」→「NuGetパッケージマネージャ」→「パッケージマネージャーコンソール」の順に選択します。
画面下部にコマンドを実行できるウィンドウが現れるので、以下のコマンドを入力してEnterを押し実行してください。
解説：
データベースとの差分情報を記述したファイル（マイグレーションファイル）を作成。
「Initial」とした箇所はファイルを識別するための名前で好きな名前を指定できる。コンテキストファイルが複数ある場合はコンテキスト名を指定する必要がある。
解説：
マイグレーションファイルを元にデータベースを更新コンソールに以下のように表示されれば成功です。
DBにテーブルが追加され、無事にユーザーの登録ができるようになりました。
あとは画面に表示されている英語を日本語に変えたりレイアウトを変えて終わりにしてもいいのですが、登録をしていて気になることがあります。というわけで、こんなの使い勝手悪いのでカスタマイズです。
ここでは以下の変更を加えつつ、ページ制御も同時に実装したいと思います。ログイン・登録画面ページ制御まず、ページ制御で使うRedirectToLogin.razor をページフォルダに作成します。
Shared フォルダ上で右クリック 追加→新しい項目を選択

Razorコンポーネントを選択し追加（ファイル名はRedirectToLogin.razor とします）

RedirectToLogin.razor ファイルが追加されたら、以下の内容に書き換えてください。
未ログインユーザーの遷移先をログイン画面に設定しています。App.razor コンポーネントを書き換えます。
書き換えているのは、&lt;NotAuthorized&gt;タグの部分です。ここでRedirectToLogin.razor コンポーネントにURLを引数として渡しています。
また @usingで、先ほどのRedirectToLogin.Razor を追加した名前空間を指定し、@inject でNavigationManager をDI（オブジェクトの注入）します&lt;NotAuthorized&gt;タグを追加しています。ちなみに特定のHTMLタグを&lt;AuthorizeView&gt;&lt;/AuthorizeView&gt;で囲むと、ログイン前の状態では非表示にすることができますここで、試しにCounter.razor コンポーネントのトップに @attribute [Authorize] を加え、プログラムを起動し、Counterページにアクセスしてみてください。ログインページにリダイレクトされればOKです。登録画面とログイン画面の処理を変更するために、以下の4ファイルに手を加えます。
修正点のポイントは以下です。
1. プロパティのEmail を Name に変更
2. パスワードとメールのバリデーションを削除
（パスワードのチェックはライブラリ内部で行っているため、無理やり接尾辞「_Blazor」をくっつけて突破）
3. メール認証の箇所を削除ではあらためて登録してみます。EmailだったところがNameに変わっているので名前を入力し、パスワードは単純に「1234」を入れています。

ページの右上に登録時に入力した名前が表示され、また先ほど見れなかったCounterページにアクセスできていれば成功です。
ログアウトやログインもできるようになっているはずです。

ログイン画面

本格的なカスタマイズにはC#以外にRazor記法や タグヘルパーを駆使する必要がありますが、ひとまずBlazorアプリのプロジェクト作成からログイン機能実装までを行うことができました。次回はDBの参照、登録、削除といったCRUD処理を追加する予定です。コンテキストファイルが複数あるので、少しだけ工夫が必要です。


