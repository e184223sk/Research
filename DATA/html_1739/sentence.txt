More than 1 year has passed since last update.非同期処理が出てくる中で、yieldが出てきて、はて、C#でどうだっけ？と思ったので書いてみます。yieldは JavaScriptとかで出てきました。ちなみに、アメリカに住んでいると、信号機のところにYeildって書いてあって、その意味は状況を見て曲がっていいよです。C#のYield は、IEnumerable&lt;T&gt;や、IEnumerator&lt;T&gt;が戻り値になるようなメソッドで使用可能です。簡単な例を示すとこんな感じです。こういうメソッドを書いておいて、こんな風に使いますすると、１秒ごとにといった感じで表示されていきます。IEnumerable&lt;T&gt;は、シンプルなイテレーターを表すインターフェイスで、実装クラスはGetEnumerator()を実装する必要があります。IEnumerator は、Dispose(), MoveNext(), Reset() の三つのメソッドをもっていて、yield のところで待ち受けをしているのですが、MoveNext() が呼ばれたタイミングで、yieldのところで値が返ります。この仕組みはLinqでも使われているものです。これと似たメソッドは下記のように書けますが、１秒ごとに待たせるというのは難しくて、メソッドが呼ばれた時点で、表示がかかる前に、このメソッドが１０秒時間がかかってから、一気にすべての行が表示されます。これを使って何か実装してみましょう。昔私はScalaを書いていて、MapやFlatMapが懐かしいなと思っていました。C#だと、Linqで書けるのですが、あえてMapを自分で実装してみましょう。うお、めっちゃ簡単や！じゃあ使ってみよう。ちなみに、これを実行すると何も起こりませんｗ。なぜなら、yieldで書いたものは遅延評価になるからです。Linqが遅延評価なのも同じインターフェイスを使っているからです。じゃあ、しっかり要素にアクセスしてみましょう。非同期型のものもあります。IAsyncEnumerable&lt;T&gt;を返す型を定義すると、asyncメソッドの中でyieldを使うことができます。その際、イテレータは、foreachにawaitキーワードをつけてループを回すことができます。


