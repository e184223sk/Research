More than 3 years have passed since last update.チェスのナイト（騎士）を以下の規則に従って配置するパズルです。この３つの規則を満たすように、ナイトを配置します。
8クイーン問題のナイト(騎士)バージョンといった感じのパズルです。この手の他のパズルと同様、バックトラックを使って探索します。どうやって、探索数を減らすのかが、高速化の決め手になると思いますが、なかなか手ごわい問題です。3つ目の条件「なるべく少ない数のナイトで配置する。」があるので、答えがすぐに見つかるようなコードを書くことができませんでした。いろいろと考えた結果、チェス盤を4×4の４つのブロックに区切って探索することにしました。ひとつのブロックには、最大でも４つのKnightを配置すれば条件を満たせるはずです。なぜなら、ひとつのブロックに対し、以下のように配置すれば条件を満たせるからです。かつ、隅の４つの箇所は、他のブロックに置いたナイトからは届かない場所ですから、一つのブロックで４つのナイトを配置した時に、隅の４つが効き筋でもなく、ナイトも置いていなかったら、条件を満たさないことになります。これで枝刈りを行っています。なるべく少ない数のナイトを配置するという問題なので、ひとつ解がみつかると、覚えておいた最善解とを比べて、新たな最善解を記憶したら、次の解を見つけにいっています。最後まで探査すれば、最善解が記憶されているので、その解を表示するようにしています。これを書いていて思ったのですが、ナイトの数が記憶している解のナイトの数よりも多くなった時点で、探索を終了するようにすれば、もうすこし速くなったかもしれません。どなたか気が向いた方がいたら、チャレンジしてみてください。Chessboardクラスは、当パズルに特化したチェス盤を表すクラスです。BoardBaseクラス(後述)から派生させています。
Pieceクラスは駒クラスです。Footmarkクラスは利き筋を表しています。問題を解くクラス。盤面操作の面倒なところはChessbBoardクラスに隠蔽されています。
それでも結構複雑なコードになってますので、コメント付けておきました。Kが騎士を配置した場所、数値はその場所へ移動できる騎士の数を表しています。さすがにすべてを1にする配置方法はないみたいです。
キャラクタベースなので、どこに騎士を配置したかが判りにくいので、数字を'.'に手で置き換えてみました。対象性のある綺麗な形でした。このBoardBaseクラスは、「騎士巡回問題」などで利用したものと同じものです。前述のBoardクラスの基底クラスです。X × Y の盤面を表し、基本的な操作を定義しています。これは似たようなパズルでも再利用できるような汎用的な機能に絞っています。このBoardBaseクラスは、コンソールアプリに依存しない作りにしています。UWP、WinFormsでもそのまま使えると思います。このBoardBaseを継承して、当パズル専用のBoardクラスを定義します。内部では1次元配列を使っていますが、インデクサを定義して、1次元配列、2次元配列としても扱えるようにしています。
ただし、すべてのメソッドで１次元対応と２次元対応のものを用意するのは面倒なので、どちらか一方にしています。まあこれは好み以外の何物でもありません。１次元のインデックスによるアクセスができるようにしている理由は、一重ループで処理が書けるので、コードが簡潔になるからです。LINQのコードも書きやすくなります。2次元配列として見た場合の、X座標、Y座標は、0 からではなく、1から始まります。
つまり、board[1,1] は、いちばん左上を示し、8×8の盤ならば、board[8,8]が右下を示すことになります。なお、盤の周りには番兵用の領域を用意しています。これにより範囲外かどうかの判断を簡単に出来るようにしています。ナイト(騎士)の動きに対応できるよう、番兵は二重にしています。1派生クラスや派生クラスを利用するクラスが、できるだけこの番兵の存在に依存しないように、ToDirectionという関数を定義し、X方向、Y方向のペアで表す移動方向(ベクトル)をインデックスで表す方向に変換するようにしています。上の図は 4×4の盤を表しています。グレー部分が番兵が置いてある盤の周囲で、水色部分が実際の盤です。
盤面上の数値は、１次元配列のインデックスを表しています。BoardBaseクラスはジェネリッククラスにしていて、そのパラメータの型は、盤面上に置けるクラスの型です。この記事は、Gushwell's C# Programming Pageで公開したものを大幅に加筆・修正したものです。当初は一重の番兵でしたが、albireoさんのコメント（アドバイス）により、二重の番兵に変更しました。 ↩


