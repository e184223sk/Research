
// (*1) を拡張してみる（負の数や step &lt; 0 にも対応．step = 0 のエラー処理省略）
Enumerable.Range(0, (int)Math.Ceiling((stop-start)/(double)step))
    .Select(i =&gt; i * step + start)

// (*2) を拡張してみる（これだと負の数には対応できないし効率悪そう）
// Enumerable.Range(start, stop-start).Where(i =&gt; i % step == start % step)

// いっそのこと for ループで静的メソッドを定義してしまう方が分かりやすいかも
public static IEnumerable&lt;int&gt; MyRange(int start, int stop, int step)
{
    if (step &gt; 0) for (int i = start; i &lt; stop; i += step) yield return i;
    else if (step &lt; 0) for (int i = start; i &gt; stop; i += step) yield return i;
    else yield break;
}

