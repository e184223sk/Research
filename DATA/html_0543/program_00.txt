using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;

namespace LazyLoadingAssemblySample
{
    class Program
    {
        /// &lt;summary&gt;
        /// 遅延ローディング対象のDLLが格納されたパス
        /// &lt;/summary&gt;
        private const string c_DirectryPath = @".\ImportDLLs\ClassLibrarySample.dll";

        /// &lt;summary&gt;
        /// 登録されたAssemblyのリスト
        /// &lt;/summary&gt;
        private static List&lt;AssemblyInfo&gt; s_RegisteredAssemblies = new List&lt;AssemblyInfo&gt;();

        static void Main(string[] args)
        {
            AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(CurrentDomain_AssemblyResolve);

            // Assemblyの遅延ローディング対象となるリストの一覧を読み込む
            LoadAssemblyFrom(@"file://" + Path.GetFullPath(c_DirectryPath));

            // インスタンスの生成を試みる
            try
            {
                var type = AppDomain.CurrentDomain.CreateInstance("ClassLibrarySample, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", "ClassLibrarySample.SampleClass");
                if (type != null)
                {
                    Console.WriteLine(type.Unwrap().ToString());
                }
            }
            catch (Exception e)
            {
                // 何もしない
            }

            AppDomain.CurrentDomain.AssemblyResolve -= CurrentDomain_AssemblyResolve;
        }

        /// &lt;summary&gt;
        /// AppDomain.CurrentDomain.CreateInstanceで失敗すると本イベントハンドラが呼び出される
        /// 登録したAssemblyから一致するものを読み込む
        /// &lt;/summary&gt;
        private static Assembly? CurrentDomain_AssemblyResolve(object? sender, ResolveEventArgs args)
        {
            AssemblyName assemblyName = new AssemblyName(args.Name);

            AssemblyInfo assemblyInfo = s_RegisteredAssemblies.FirstOrDefault(a =&gt; AssemblyName.ReferenceMatchesDefinition(assemblyName, a.AssemblyName));

            if (assemblyInfo != null)
            {
                if (assemblyInfo.Assembly == null)
                {
                    assemblyInfo.Assembly = Assembly.LoadFrom(assemblyInfo.AssemblyUri.LocalPath);
                }

                return assemblyInfo.Assembly;
            }

            return null;
        }

        /// &lt;summary&gt;
        /// 指定されたファイルのAssemblyの名前とパスを読み込む
        /// 実体のAssemblyは読み込まない
        /// &lt;/summary&gt;
        private static void LoadAssemblyFrom(string assemblyFilePath)
        {
            Uri assemblyUri = GetFileUri(assemblyFilePath);

            if (assemblyUri == null)
            {
                throw new ArgumentException("InvalidArgumentAssemblyUri", nameof(assemblyFilePath));
            }

            if (!File.Exists(assemblyUri.LocalPath))
            {
                throw new FileNotFoundException(null, assemblyUri.LocalPath);
            }

            AssemblyName assemblyName = AssemblyName.GetAssemblyName(assemblyUri.LocalPath);
            AssemblyInfo assemblyInfo = s_RegisteredAssemblies.FirstOrDefault(a =&gt; assemblyName == a.AssemblyName);

            if (assemblyInfo != null)
            {
                return;
            }

            assemblyInfo = new AssemblyInfo() { AssemblyName = assemblyName, AssemblyUri = assemblyUri };
            s_RegisteredAssemblies.Add(assemblyInfo);
        }

        /// &lt;summary&gt;
        /// 指定されたファイルパスからUriを生成する
        /// &lt;/summary&gt;
        private static Uri GetFileUri(string filePath)
        {
            if (String.IsNullOrEmpty(filePath))
            {
                return null;
            }

            Uri uri;
            if (!Uri.TryCreate(filePath, UriKind.Absolute, out uri))
            {
                return null;
            }

            if (!uri.IsFile)
            {
                return null;
            }

            return uri;
        }
    }
}


