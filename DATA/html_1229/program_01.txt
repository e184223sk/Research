
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using YamlDotNet.Serialization;

namespace precure_shiritori
{
    class Program
    {
        /// &lt;summary&gt;
        /// rubicure/config のパス
        /// &lt;/summary&gt;
        static readonly string rubicureConfigPath = "../../rubicure/config/";
        static void Main(string[] args)
        {
            List&lt;Precure&gt; precureList = LoadPrecure();
            Console.WriteLine("プリキュア名, 読み, 最初, 最後");
            foreach (Precure precure in precureList)
            {
                Console.WriteLine($"{precure.PrecureName}, {precure.PrecureRuby}, {precure.First}, {precure.Last}");
            }
        }

        /// &lt;summary&gt;
        /// 全てのプリキュアのデータを読み込む.
        /// &lt;/summary&gt;
        /// &lt;returns&gt;プリキュアデータのリスト&lt;/returns&gt;
        static List&lt;Precure&gt; LoadPrecure()
        {
            List&lt;Precure&gt; precureList = new List&lt;Precure&gt;();
            var rootPath = rubicureConfigPath + "girls/";
            string[] files = Directory.GetFiles(rootPath, "*.yml", SearchOption.TopDirectoryOnly);
            foreach (string file in files)
            {
                var input = new StreamReader(file, Encoding.UTF8);
                var deserializer = new Deserializer();
                Dictionary&lt;string, Dictionary&lt;string, object&gt;&gt; girls_tmp = deserializer.Deserialize&lt;Dictionary&lt;string, Dictionary&lt;string, object&gt;&gt;&gt;(input);
                foreach (var girl in girls_tmp)
                {
                    if (girl.Value.Count == 1)
                    {
                        // エイリアスは飛ばす
                        continue;
                    }
                    string precureName = null;
                    if (girl.Value.TryGetValue("precure_name", out object precureNameObj))
                    {
                        precureName = (string)precureNameObj;
                    }
                    precureList.Add(new Precure(precureName));
                }
            }

            return precureList;
        }
    }
}

