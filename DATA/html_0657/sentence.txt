OutSystemsのExtension (C#) に渡したデータの型がどうなるかを確認してみました。
ドキュメントが見当たらなかったので、実際にコードを書いて確認した結果です。Personal Environment(Version 11.9.0 (Build 16900))
Service Studio(Version 11.8.8)
Integration Studio(Version 11.6.21)ExtensionにObject型で引数を受け取り、C#内で型を調べて返すようにしました。
同時に、渡ってきたデータの種類の判別に使えそうな3つのInterface (C#) の実装状況も確認しています。Objectクラスから継承する、GetTypeメソッドを利用しています。
戻り値の型がTypeで、FullNameプロパティで、名前空間を含めた完全修飾の型名を取得しています。ardoJSONで利用していた方法です。実装を確認したいInterfaceに対して、typeof識別子を適用してType型のインスタンスを得る。
Type型のIsAssignableFromメソッドでパラメータに渡した値（この場合はActionのパラメータに渡したObject型の値）を該当Interfaceに割り当てられるか確認しています。「確認方法」に従って実際に調査した結果を表にしてみました。上の結果を観察すると、
- 基本データ型は、.NETの組み込み型のクラス表現を使っている様子
- 基本データ型以外のデータに対応するクラスは、「ss&lt;呼び出し側モジュール名&gt;」というフォーマットの名前空間に配置される
- Structureは「ST&lt;Structure名&gt;Structure」というフォーマットのクラス名
- 単独Entityの1レコードは「EN&lt;Entity名&gt;ENtityRecord」というフォーマットのクラス名
- ジョインしたクエリ結果の1レコードは「RC&lt;Entity名1&gt;&lt;Entity名2&gt;...Record」というフォーマットのクラス名
- Data Type Editorで編集した1レコードも似ていて、「RC&lt;構成要素のデータ型1&gt;&lt;構成要素のデータ型2&gt;...Record」というフォーマットのクラス名
- List型は「RL&lt;各レコードのクラス名&gt;List」というフォーマットのクラス名上の結果を観察すると、
- リスト型であれば、個別レコードの型に関わらず、IOSListインターフェースのみ実装する
- 各レコードは、基本データ型なら3つのInterfaceのいずれも実装しない
- 基本データ型でないレコードはIRecordを実装する
- EntityやRecordはISimpleRecordを実装する。ただし、ジョインしたEntityと他のレコードを自分の要素に持つ場合は覗く公式ドキュメントとは少し違いますが、公式のコースの中に、Extensionで利用するデータの型について記述があります（資料のPDF）。
C#コードでのロジックの拡張


