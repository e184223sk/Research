More than 1 year has passed since last update.認証エラーやサービスダウン時に RPC メソッドの呼び出しをブロックしたいことがあります。このような場合は個々の RPC メソッドに実装するよりもインターセプターを使用したほうが簡潔に実装でき、柔軟な対応が可能になります。インターセプターを実装するには、Grpc.Core.Interceptors.Interceptor クラスを継承します。
インターセプターの仕組みについてはこちらを参照してください。
gRPC インターセプターの利用（アイデア編）特定の条件にフォーカスしたものではなく、汎用的な実装としました。コンストラクタで受け取った IRpcCallBlocker インスタンスと IRpcContextFilter インスタンスに従い、RPC メソッドの呼び出しをブロックします。RPC メソッドの呼び出しをブロックするかどうかを判定し、ブロックする理由などをステータスとメタデータで返します。いろいろなインターセプターで実装を共有したり実装を取り替えたりできるようにするため、インターフェースとして定義しました。メソッド定義やヘッダーの内容によるフィルタリングを行います。いろいろなインターセプターで実装を共有したり実装を取り替えたりできるようにするため、インターフェースとして定義しました。IRpcCallBlocker インターフェースの実装例です。メンテナンス中である場合、呼び出しをブロックします。クライアント側でメンテナンス中かどうかのフラグを正しく設定することは難しいですが、うまくサーバーからプッシュする仕組みを設ければサーキットブレーカーのような働きをさせることができると思います。ブロックによってクライアント側で RpcException がスローされ、その例外から「メンテナンスのためにブロックされたかどうか」を判別できる必要があります。メッセージ文字列だけで判断するのは望ましくありませんので、MetaData にエラーコードを格納するような実装を行うことになると思います。前述の RpcCallBlockInterceptor クラスの実装に使用している Null オブジェクトの実装です。ブロックやフィルタを行わないように実装しているだけです。


