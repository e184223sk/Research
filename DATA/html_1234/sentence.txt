More than 1 year has passed since last update.WPF in C# with MVVM using Caliburn Microの22分目あたりからを参考に、Caliburn.Microを用いてWPFアプリケーションを作成する(1) で作った空ウィンドウにテキストを表示させてみる。テキストボックスと連動した文字列表示ができる次のようなウィンドウを作る。
前回 の続き。
WPFプロジェクトで空ウィンドウが出るまでを作成。ShellViewModel.csを開き、'propfull'とタイプ後、タブキーを2回押しSnippet展開（↓のようになる）。動画にあわせて、snippetを編集。FirstNameプロパティを作成する。つづいてShellView.xamlを編集する。
動画のとおり、VisualStudioの編集画面を横並びにしてみる。動画のとおりに Gridタグ内に、Grid.ColumnDefinitions, Grid.RowDifinitionsを記述。
1,1のセル(?)部分に、TextBlockを配置。要素内に何らかの値を入れてみる。
ウィンドウのプレビューを確認。続いて、TextBlock内に入れた文字列を消し、x:Nameを設定する。ここで実行しても、ウィンドウは空白のままで、TextBlockの内容は表示されない。
なぜなら先ほど設定したShellViewModelのプロパティに何も値がはいっていないため。_firstName宣言部に、初期値を入れる。ここで実行すると、ViewModelの内容がバインドされて表示される。つづいてTextBoxをTextBlockの下に作成してみる。
x:Nameで同じものが作れないことを味わってみる。
元Windowのプロパティ WindowStartupLocationを Manual→CenterScreenに変更してみる(このあたりは動画のとおりに触ってみる)次のようにShellView.xamlを編集する。この状態で実行しても、プロパティ初期値は表示されるが、TextBoxの内容とはひもづいてないので、入力しても変化はない。ShellViewModel.csのsetに 'NotifyOfPropertyChange' を追加する。この状態で実行すると、変更が通知され、TextBoxの内容がTextBlockと連携される。ShellViewModel内に、FirstNameと同様にLastNameを追加する。さらにFullNameを追加する。
FullNameは、FirstNameあるいはLastNameのいずれかが変化したときに追従しないといけないので、Notify部分は両方適用されるように編集する。TextBlockにFullNameを表示、TextBoxでFirstName, LastNameを編集できるようにする。FirstNameとLastNameが合体したFullNameが表示されることを確認する。1列目にFullName表示すると、はみ出す場合があるので、Grid.ColumnSpanを設定し、2セル分つかうようにしてみる。次の記事： Caliburn.Microを用いてWPFアプリケーションを作成する(3)


