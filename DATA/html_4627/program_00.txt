using System;

namespace RetryExecutorNameSpace
{
    /// &lt;summary&gt;
    /// リトライ処理を行うクラス
    /// &lt;/summary&gt;
    public class RetryExecutor
    {
        /// &lt;summary&gt;
        /// 処理を実行する
        /// 例外が発生した場合は指定秒数間隔でリトライする
        /// &lt;/summary&gt;
        /// &lt;typeparam name="TResult"&gt;&lt;/typeparam&gt;
        /// &lt;param name="retryFrequency"&gt;最大リトライ回数&lt;/param&gt;
        /// &lt;param name="retryInterval"&gt;リトライ間隔&lt;/param&gt;
        /// &lt;param name="action"&gt;処理&lt;/param&gt;
        /// &lt;returns&gt;処理結果&lt;/returns&gt;
        public static TResult Execute&lt;TResult&gt;(int retryFrequency, int retryInterval, Func&lt;TResult&gt; action)
        {
            //パラメータチェック
            if (retryFrequency &lt; 0)
            {
                //最大リトライ回数
                throw new ArgumentOutOfRangeException("retryFrequency");
            }
            if (retryInterval &lt; 0)
            {
                //リトライ間隔
                throw new ArgumentOutOfRangeException("retryInterval");
            }
            if (action == null)
            {
                //処理
                throw new ArgumentNullException("action");
            }
            /// &lt;summary&gt;
            /// リトライ回数をカウントします
            /// &lt;/summary&gt;
            int retryCount = 0;

            while (true)
            {
                try
                {
                    // メソッド
                    return action();
                }
                catch (Exception e)
                {
                    //リトライが必要な処理で例外が発生した場合
                    //指定回数リトライ

                    if (retryCount++ &lt; retryFrequency)
                    {
                        //最大リトライ回数に達していない場合
                        System.Threading.Thread.Sleep(retryInterval);
                    }
                    else
                    {
                        //最大リトライ回数に達した場合
                        throw e;
                    }
                }
            }
        }

        /// &lt;summary&gt;
        /// 処理を実行する
        /// 例外が発生した場合は指定秒数間隔でリトライする
        /// &lt;/summary&gt;
        /// &lt;param name="retryFrequency"&gt;最大リトライ回数&lt;/param&gt;
        /// &lt;param name="retryInterval"&gt;リトライ間隔&lt;/param&gt;
        /// &lt;param name="action"&gt;処理（戻り値無）&lt;/param&gt;
        public static void Execute(int retryFrequency, int retryInterval, Action action)
        {
            //パラメータチェック
            if (retryFrequency &lt; 0)
            {
                //最大リトライ回数
                throw new ArgumentOutOfRangeException("retryFrequency");
            }
            if (retryInterval &lt; 0)
            {
                //リトライ間隔
                throw new ArgumentOutOfRangeException("retryInterval");
            }
            if (action == null)
            {
                //処理
                throw new ArgumentNullException("action");
            }
            /// &lt;summary&gt;
            /// リトライ回数をカウントします
            /// &lt;/summary&gt;
            int retryCount = 0;

            while (true)
            {
                try
                {
                    action();
                    break;
                }
                catch (Exception e)
                {
                    //リトライが必要な処理で例外が発生した場合
                    //指定回数リトライ

                    if (retryCount++ &lt; retryFrequency)
                    {
                        //最大リトライ回数に達していない場合

                        System.Threading.Thread.Sleep(retryInterval);
                    }
                    else
                    {
                        //最大リトライ回数に達した場合
                        throw e;
                    }
                }
            }
        }
    }
}


