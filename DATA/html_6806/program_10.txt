
using System;
using System.Collections.Generic;

using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.DependencyInjection;

using Smart.Resolver;
using Smart.Resolver.Bindings;

public static class SmartResolverHelper
{
    public static IServiceProvider BuildServiceProvider(StandardResolver resolver, IEnumerable&lt;ServiceDescriptor&gt; descriptors)
    {
        foreach (var descriptor in descriptors)
        {
            if (descriptor.ImplementationType != null)
            {
                resolver
                    .Bind(descriptor.ServiceType)
                    .To(descriptor.ImplementationType)
                    .ConfigureScope(descriptor.Lifetime);
            }
            else if (descriptor.ImplementationFactory != null)
            {
                resolver
                    .Bind(descriptor.ServiceType)
                    .ToMethod(kernel =&gt; descriptor.ImplementationFactory(kernel.Get&lt;IServiceProvider&gt;()))
                    .ConfigureScope(descriptor.Lifetime);
            }
            else if (descriptor.ImplementationInstance != null)
            {
                resolver
                    .Bind(descriptor.ServiceType)
                    .ToConstant(descriptor.ImplementationInstance)
                    .ConfigureScope(descriptor.Lifetime);
            }
        }

        resolver.Bind&lt;IServiceProvider&gt;().To&lt;SmartResolverServiceProvider&gt;().InSingletonScope();
        resolver.Bind&lt;IServiceScopeFactory&gt;().To&lt;SmartResolverServiceScopeFactory&gt;().InSingletonScope();
        resolver.Bind&lt;IHttpContextAccessor&gt;().To&lt;HttpContextAccessor&gt;().InSingletonScope();
        resolver.Bind&lt;RequestScopeStorage&gt;().ToSelf().InSingletonScope();

        return resolver.Get&lt;IServiceProvider&gt;();
    }

    private static void ConfigureScope(this IBindingInSyntax syntax, ServiceLifetime lifetime)
    {
        switch (lifetime)
        {
            case ServiceLifetime.Singleton:
                syntax.InSingletonScope();
                break;
            case ServiceLifetime.Transient:
                syntax.InTransientScope();
                break;
            case ServiceLifetime.Scoped:
                syntax.InRequestScope();
                break;
        }
    }
}

