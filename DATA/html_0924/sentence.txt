More than 1 year has passed since last update.FPS、TPSゲームの視点操作や移動をunityでどう実現しているのかを知りたかったので、tutorialのコードを読んで勉強した。FPS Microgame /| Templates | Unity Asset Storeversionは1.1.2
unityのバージョンは2019.4.7f1入力の受け取り部分は、Scripts/PlayerInputHandler.csが担っている。ここで
m_PlayerCharacterControllerが主人公を操作するcontrollerである。m_GameFlowManagerはゲーム全体を管理するcontroller。これはキャラクターの移動に関する関数である。順番に見ていく。このゲームではescを押すことでマウスのロックを解除できる。
ロックを解除している場合は、キャラクターの操作(移動、方向転換)はできない。中のソースコードを確認すると、つまり、カーソルがロックされているかつ、ゲームがエンディングになっていない場合に入力が可能になる。Input-GetAxisRaw - Unity スクリプトリファレンスaxisName で識別される仮想軸の平滑化フィルターが適用されていない値を返します
The value will be in the range -1...1 for keyboard and joystick input. Since input is not smoothed, keyboard input will always be either -1, 0 or 1. This is useful if you want to do all smoothing of keyboard input processing yourself.これだけではよくわからないが、ゲームパッドの入力や、キーボード、マウスの入力を軸ごとに[-1, 1]の範囲で正規化して返してくれる。
つまり、複数の入力デバイスに対して正規化された数値で方向を返してくれる便利な関数。ちなみにInput.GetAxisRawはキーボードの入力に対しては-1, 1のどちらかを返すが、Input.GetAxisは平滑化された値が返る。
リアルな挙動を再現したい場合は、Input.GetAxisの方が適している？
ref: http://albatrus.com/main/unity/7209vectorの大きさがmaxLengthでclampされるようにする関数である。はじめに戻って、GetMoveInput()について。
これはつまり、入力が可能であれば、入力された値の大きさが1以内に収まるように方向ベクトルを返し、そうでなければ0ベクトルを返す関数であることがわかる。視点の回転に関する関数である。軸が異なるだけなので、Horizontalのみ見ていく。GetMouseOrStickLookAxisを呼んでいるだけであることがわかる。少し複雑だが、順を追ってみていく。ここでは、gamepadの入力を使うか、mouseの入力を使うかを決定している。
Input.GetAxis(), Input.GetAxisRaw()の説明はInput.GetAxisRaw()を参照
gamepadの入力があればその入力を使い、そうでなければmouseの入力を使用する。mouseはInput.GetAxisRawを使っているが、gamepadはInput.GetAxisを使っているのは興味深い。UXの問題？invertAxisはエディタから定義できる定数。
y軸を反転させたいときは、invertYAxis = trueにすれば反転できる…が、X軸とY軸の判定をこの関数ではしていないので、invertYAxis = trueにするとx軸の操作も逆になる(v1.1.2)次に感度の設定その後にgamepadとmouseのscaleを揃えているmouseがフレーム単位の移動量なので、gamepadもそれに揃えるためにTime.deltaTimeをかけている(？)。ここの辺りはよくわからなかったが、とりあえずscaleを揃えているだけという認識で良さそう。


