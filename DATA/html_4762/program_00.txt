using System;
using static System.Console;
using static System.Math;
using System.Collections.Generic;
using System.Linq;
using System.IO;

class Program
{
    static char[,] map = new char[8, 8];

    static void Main()
    {
        string[] input = new string[8];
        foreach (int i in MyEnumerable.Range(8))
        {
            input[i] = ReadLine();
            int count = 0;
            foreach (int j in MyEnumerable.Range(8))
            {
                if (input[i][j] == 'Q')
                {
                    map[i, j] = 'Q';
                    count++;
                    if (count == 3) break;
                }
                else
                {
                    map[i, j] = '.';
                }
            }
        }

        Stack&lt;int&gt; sty = new Stack&lt;int&gt;();
        Stack&lt;int&gt; stx = new Stack&lt;int&gt;();
        sty.Push(0);
        stx.Push(0);

        //int ct = 0;//debug用
        while (sty.Count != 0)
        {
            string temp = "";
            foreach (int i in MyEnumerable.Range(8)) temp += map[sty.Peek(), i];
            if (!temp.Contains('Q'))
            {
                int nowY = sty.Peek();
                int nowX = stx.Peek();
                bool flgMatch = false;
                for (int i = 0; i &lt; 8; i++)
                {
                    if (CheckPassRoad(nowY, i))
                    {
                        map[nowY, i] = 'Q';
                        sty.Push(nowY + 1);
                        if(nowY!=0)stx.Push(i);
                        flgMatch = true;
                        break;
                    }
                }
                if (!flgMatch)
                {
                    sty.Pop();
                    int styPop = sty.Pop();
                    int stxPop = stx.Pop();
                    map[styPop, stxPop] = '.';
                    for (int i = stxPop+1; i &lt; 8; i++)
                    {
                        if (CheckPassRoad(styPop, i))
                        {
                            map[styPop, i] = 'Q';
                            sty.Push(styPop);
                            sty.Push(styPop + 1);
                            stx.Push(i);
                            break;
                        }
                    }
                }

                if (nowY == 7 &amp;&amp; flgMatch)
                {
                    foreach (int i in MyEnumerable.Range(8))
                    {
                        string resStr = "";
                        foreach (int j in MyEnumerable.Range(8))
                        {
                            resStr += map[i, j];
                        }
                        WriteLine(resStr);
                    }
                    //ReadLine();
                    return;
                }
            }
            else if (sty.Peek() == 7)
            {
                foreach (int i in MyEnumerable.Range(8))
                {
                    string resStr = "";
                    foreach (int j in MyEnumerable.Range(8))
                    {
                        resStr += map[i, j];
                    }
                    WriteLine(resStr);
                }
                //ReadLine();
                return;
            }
            else
            {
                int temp1 = sty.Pop();
                sty.Push(temp1 + 1);
            }
            //ct++;
        }

        WriteLine("No Answer");
        //ReadLine();
    }

    /// &lt;summary&gt;
    /// ほかのクイーンの効き筋にかかってたらfalseを返すメソッド(==置けない時にfalseを返す)
    /// &lt;/summary&gt;
    /// &lt;param name="y"&gt;&lt;/param&gt;
    /// &lt;param name="x"&gt;&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public static bool CheckPassRoad(int y, int x)
    {
        for (int i = 0; i &lt; 8; i++)
        {
            if (map[i, x] == 'Q') return false;
            //if (map[y, i] == 'Q') return false;
            if (y + i &lt; 8 &amp;&amp; x + i &lt; 8 &amp;&amp; map[y + i, x + i] == 'Q') return false;
            if (y - i &gt;= 0 &amp;&amp; x + i &lt; 8 &amp;&amp; map[y - i, x + i] == 'Q') return false;
            if (y + i &lt; 8 &amp;&amp; x - i &gt;= 0 &amp;&amp; map[y + i, x - i] == 'Q') return false;
            if (y - i &gt;= 0 &amp;&amp; x - i &gt;= 0 &amp;&amp; map[y - i, x - i] == 'Q') return false;
        }
        return true;
    }
    public static partial class MyEnumerable
    {
        public static IEnumerable&lt;int&gt; Range(int count)
        {
            return Enumerable.Range(0, count);
        }
    }
}

