More than 1 year has passed since last update.本記事は C# Advent Calendar 2019 16日目の記事です。ゲーム制作に人間性を捧げているyoship1639です。
皆様C#の進捗具合はいかがでしょうか。ゲーム制作をしているとデータや操作の履歴を保持したくなる時がありますよね。例えば、パズルゲームとか。
Undo, Redo機能を持つコレクションを自作もしくは類似の操作を行う処理を記述しなければならないので意外と面倒な奴です。そこで、過去のデータや操作履歴をUndo, Redoしたい時にメソッド一つで使えるジェネリックに対応させた汎用コレクションクラス History を実装してみたので、その機能、アルゴリズム、ソースコードを紹介したいと思います。目標とするのは操作一つで履歴の操作を行えることです。履歴を持つだけなら単純にListで良いですが、その操作履歴を時系列で復元するには、Undo, Redoに相当する処理が含まれていなければなりません。なので、最低限必要な機能としては履歴の追加をするPush、Undoに相当するBack、Redoに相当するForwardが求められます。それに加え、コレクションとしての機能(foreachなど)も必要なのでIEnumerable、Linq機能も欲しいのでIEnumerable&lt;T&gt;、クローンもできるようICloneableをそれぞれ実装します。Pushは簡単そうでちょっと考えなければなりません。単純にデータを追加するだけだと、Redoでindexが先頭でない場合に操作履歴が破綻してしまいます。そのため、以下の手順で履歴をpushします。これで、不具合なく履歴を追加することができます。Backは操作履歴を1つUndoするので、今回の場合はindex--を行うだけでokです。
indexが0になったらこれ以上Backできないようにします。Forwardは操作履歴を1つRedoするので、Backと同様index++だけでokです。
indexがCount-1に到達したらForwardできないようにします。IEnumerable、IEnumerable&lt;T&gt;、ICloneableは実装部分で紹介します。上記の機能を順次実装します。保持するデータは汎用でなければならないのでジェネリッククラスです。
まず最低限のひな型として、操作履歴位置であるindex、操作履歴をもつlist、コンストラクタを準備します。データなしの状態だとindexは-1を指すことになるので、初期値を挿入できるコンストラクタを記述しておきます。前章で説明した要領で実装します。それぞれ、indexが破綻しない状態の場合にindexを操作し、その位置のデータを返します。破綻していたらこれ以上操作できないというthrowを吐かせてもいいですが、今回はとりあえずdefault valueを返します。上記だけだと使い勝手が悪いので、指定indexのデータを返すAt、先頭のデータを返すPeek、データを全削除するClear、さらにlistみたいに扱えるインデクサを実装します。このままだと要素数とかインデックスの位置がわからないのでプロパティで設定できるようにしてあげます。IEnumerableは要素アクセスができるコレクションとしての機能を保証するインタフェースで、これを実装していないとforeachでループさせることができません。Historyはコレクションとしての最低限の機能を実装する予定なのでこれを実装します。特段Enumeratorを実装する必要はなく、listがもつenumeratorをそのまま返してあげます。これでIEnumerableは実装できました。IEnumerable&lt;T&gt;はジェネリックコレクションが実装できるインタフェースで、これを実装するとlinq系の機能、拡張メソッドが使えるようになります。例えばWhereとかSkipとかですね。実はIEnumerable&lt;T&gt;はIEnumerableを継承しているので後でIEnumerableは削除しましょう。コレクションのコピーはよく行う操作なのでICloneableも実装してあげます。これで一通りの機能は実装できました。今回実装したHistoryのソースコード全文です。Historyはこんな感じに使えます。これだけだとありがたみがあまり感じられませんが、ジェネリックなので構造体やクラスを記録することができるため、いろんな場面で使えます。Undo、Redoが必要な場面で実際に使ってみてけっこう使えたので、UnityEngineやSystem.Collectionにデフォルトで組み込んであると嬉しいな～と思いました。まだまだ足りない機能が多いので、もっと拡張していってもいいかもしれません。（Remove系とか）本領を発揮するのは複雑な操作履歴データを扱う時なので、ぜひご活用いただければと思います！
それでは。


