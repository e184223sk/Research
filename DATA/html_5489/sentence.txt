More than 3 years have passed since last update.こんなサイトを作成しています。
しかし機能拡張をしていく中でどんどんサイトが重くなってしまいました。
このままでは遅いからだれにも必要とされないサイトになってしまいそうだったので低レイテンシをめざして改修しました。
目標はgoogleの推奨する200ms以下のディレイ。
(2018/05/02追記)PageSpeed Insightsで99/97達成したので追記します。adsense/analytics付きなのでここらが限界かなと思います。
(2018/05/18)Azure http2対応したのでサイトに反映。
TestMySiteで2秒がでるようになりました。
しかしPageSpeed Insightsで99/97達成出来なくなりましたorz参考サイトを見ながら少しずつ進めました。基本的なことですができてませんでした。。。
HogeのIndexページでHugaクラスの属性も表示する場合
以下のようにIncludeするとDBから一度にHogeとHugaを読み込むため
レスポンスが良くなります。一覧画面で合計4000回ぐらいHtml.DisplayForを読んでいたところ
HTML出力が遅くなっていました。VS2015のプロファイラーで
CPU時間を確認するとHtml.DisplayForが原因の一部と判明。
モデルからはstringとintの出力しかしていなかったため
直接出力することにしました。
これは大量にHtml.DisplayForを実行している場合にだけ有効ですね。転送量を削減すればディレイも短くなります。参考サイトよりWhitespaceFilterAttribute
を拝借してプロジェクトに追加します。
WhitespaceFilterAttributeをControllerにつけると出力されるHTMLのスペースと改行が削除されます。
同じサイトにCompressFilterAttributeも載ってましたが
1つのcontrollerに両方使用するとうまく動かなかったため
私は効果の高かったWhitespaceFilterだけ使用することにしました。
ある一覧画面では500kb出力していたページが200kbまで落とせました。これも基本ですができてませんでした。
Web.Release.configに以下を追記私は↓のサイトを利用して各ページのリンク画像をCSSスプライトにしました。
参考サイト2これはアクセスが集中した場合に有効でした。
HogeクラスにToListという全レコードをリスト形式で取り出すメソッドがあったとして以下のような継承クラスを作成しControllerは
CachedHogeRepository を利用するように変えました。(ここから追記)cssのダウンロード/読み込み中にscriptをダウンロードさせることで時間を節約します。私はHomeControllerに上のメソッドを追加し_Layout.cshtml内で下のように読み込むことで
CSSをインラインにしました。(ここまで追記)現在はAzureで以下のようなレスポンスを達成できました。



