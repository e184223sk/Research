using System.Collections;

namespace Utility
{
    /// &lt;summary&gt;
    /// ベジェ曲線を描く
    /// &lt;/summary&gt;
    public class BezierCurve
    {
        public Vector3[] ControlPoints { get; set; }

        /// &lt;summary&gt;
        /// コンストラクタ
        /// &lt;/summary&gt;
        public BezierCurve(Vector3[] controlPoints)
        {
            ControlPoints = controlPoints;
        }

        /// &lt;summary&gt;
        /// ベジェ曲線関数
        /// &lt;/summary&gt;
        public Vector3 Evaluate(float t)
        {
            if (ControlPoints == null)
            {
                return Vector3.zero;
            }

            Vector3 result = Vector3.zero;
            int n = ControlPoints.Length;
            for (int i = 0; i &lt; n; i++)
            {
                result += ControlPoints[i] * Bernstein(n - 1, i, t);
            }

            return result;
        }

        /// &lt;summary&gt;
        /// バーンスタイン基底関数
        /// &lt;/summary&gt;
        static float Bernstein(int n, int i, float t)
        {
            return Binomial(n, i) * Mathf.Pow(t, i) * Mathf.Pow(1 - t, n - i);
        }

        /// &lt;summary&gt;
        /// 二項係数を計算する
        /// &lt;/summary&gt;
        static float Binomial(int n, int k)
        {
            return Factorial(n) / (Factorial(k) * Factorial(n - k));
        }

        /// &lt;summary&gt;
        /// 階乗を計算する
        /// &lt;/summary&gt;
        static float Factorial(int a)
        {
            float result = 1f;
            for (int i = 2; i &lt;= a; i++)
            {
                result *= i;
            }

            return result;
        }
    }
}

