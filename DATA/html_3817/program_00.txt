public class MathTest
{
    // using文を使って範囲を計測できるようにした時間計測クラス
    class Stopwatch : System.IDisposable
    {
        static double baseTime = -1;

        System.Diagnostics.Stopwatch sw;
        string memberName;

        public Stopwatch([System.Runtime.CompilerServices.CallerMemberName] string memberName = "")
        {
            this.memberName = memberName;
            sw = new System.Diagnostics.Stopwatch();
            sw.Start();
        }

        public void Dispose()
        {
            sw.Stop();
            if (baseTime &lt; 0) baseTime = sw.ElapsedMilliseconds;
            Debug.Log($"| {memberName} |  {sw.ElapsedMilliseconds}ms | {sw.ElapsedMilliseconds / baseTime:F2}倍 |");
        }
    }

    // 最適化で消えにくいようにpublic static変数で指定しておく
    public static int count = 10000000;
    public static double firstValue = 0.9999254686; // 掛け続けてもInfinityにならない値に修正

    double Mult()
    {
        double f = firstValue;

        using (new Stopwatch())
            for (var i = 1; i &lt; count; i++)
            {
                f = f * f; // ループ文の影響を薄くするため、とりあえず8回手で複製する
                f = f * f; // 計算結果が最適化で消えないよう過去の値を使う
                f = f * f;
                f = f * f;
                f = f * f;
                f = f * f;
                f = f * f;
                f = f * f;
            }

        return f;
    }

    double Sin()
    {
        double f = firstValue;

        using (new Stopwatch())
            for (var i = 1; i &lt; count; i++)
            {
                f = Math.Sin(f);
                f = Math.Sin(f);
                f = Math.Sin(f);
                f = Math.Sin(f);
                f = Math.Sin(f);
                f = Math.Sin(f);
                f = Math.Sin(f);
                f = Math.Sin(f);
            }

        return f;
    }

    double Sqrt()
    {
        double f = firstValue;

        using (new Stopwatch())
            for (var i = 1; i &lt; count; i++)
            {
                f = Math.Sqrt(f);
                f = Math.Sqrt(f);
                f = Math.Sqrt(f);
                f = Math.Sqrt(f);
                f = Math.Sqrt(f);
                f = Math.Sqrt(f);
                f = Math.Sqrt(f);
                f = Math.Sqrt(f);
            }

        return f;
    }

    double Pow()
    {
        double f = firstValue;

        using (new Stopwatch())
            for (var i = 1; i &lt; count; i++)
            {
                f = Math.Pow(f, i);
                f = Math.Pow(f, i);
                f = Math.Pow(f, i);
                f = Math.Pow(f, i);
                f = Math.Pow(f, i);
                f = Math.Pow(f, i);
                f = Math.Pow(f, i);
                f = Math.Pow(f, i);
            }

        return f;
    }

    double Pow2()
    {
        double f = firstValue;

        using (new Stopwatch())
            for (var i = 1; i &lt; count; i++)
            {
                f = Math.Pow(f, 2);
                f = Math.Pow(f, 2);
                f = Math.Pow(f, 2);
                f = Math.Pow(f, 2);
                f = Math.Pow(f, 2);
                f = Math.Pow(f, 2);
                f = Math.Pow(f, 2);
                f = Math.Pow(f, 2);
            }

        return f;
    }

    double Atan()
    {
        double f = firstValue;

        using (new Stopwatch())
            for (var i = 1; i &lt; count; i++)
            {
                f = Math.Atan(f);
                f = Math.Atan(f);
                f = Math.Atan(f);
                f = Math.Atan(f);
                f = Math.Atan(f);
                f = Math.Atan(f);
                f = Math.Atan(f);
                f = Math.Atan(f);
            }

        return f;
    }

    double Exp()
    {
        double f = firstValue;

        using (new Stopwatch())
            for (var i = 1; i &lt; count; i++)
            {
                f = Math.Exp(f);
                f = Math.Exp(f);
                f = Math.Exp(f);
                f = Math.Exp(f);
                f = Math.Exp(f);
                f = Math.Exp(f);
                f = Math.Exp(f);
                f = Math.Exp(f);
            }

        return f;
    }

    public void MainTest()
    {
        double ret = Mult()
            + Sin()
            + Sqrt()
            + Atan()
            + Exp() // Expは計算途中でInfinityとなるのがちょっと問題かも
            + Pow()
            + Pow2();

        Debug.Log(ret); // インライン展開されて消えることがないようにちゃんと戻り値を使う
    }
}


