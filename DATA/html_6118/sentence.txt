More than 3 years have passed since last update.publicな定数については、constを使用すべきではない。
これは、バージョン管理問題1が発生するため。
以下のように、static readonlyを使用すべき。例外処理という概念そのものがC言語にないので、存在は知っていても扱いにかなり戸惑う。
こちらに移動こちらに移動上記より、端的に言うと以下である。常識なのかもしれないが、Taskを使用して起動したスレッドは、内部的にはスレッドプールを使っているらしい。面白い情報があった（[.NET]複数のTaskを一度に開始しようとすると遅延が発生する）スレッドの数を無駄に増やしてしまわないよう、
新しいスレッドが必要になった場合は、500ミリ秒に1つの割合を
超えないペースでスレッドを生成する設計だとのことということで、Taskは必ずしも同時に並列で実行されるわけではないらしい。
上記の記事より、Taskはスレッドプールを使用しているといえども、複数のTaskを同時実行する要求があると、新しくスレッドを起動する仕組みみたいね。（確かめてないけど）状態を持つオブジェクトに対してSingletonパターンを適用するのはNGいろいろ説があるみたいだけど、一番しっくり来たのは以下。Abstract Factoryパターンを実装するために、次のような役に立つテクニツクがある。
1. Singletonパターンを利附する。典型的なアプリケーションでは、部品の集合ごとにConcreteFactoryクラスのインスタンスを1つしか必要としない。したがって、通常ではConcreteFactoryクラスをSingletonパターンを使って実装することが最良の方法になる。つまり、AbstractFactroyパターンのConcreteFactoryに該当するクラスはSingletonでもいいよってこと。
何故なら、ConcreteFactoryクラスは状態を持たないはずだし、生成者なのでインスタンスはアプリケーション内で一人で十分だから。const値はビルド時に値が読み込まれる。そのため、dllでconstを使用している場合、dllをコンパイルしなおしただけではexe側では値が更新されない（exeのリビルドが必要） ↩


