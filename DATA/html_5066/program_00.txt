class SanValueBoolean {
    public void Do() {
        var bools = new bool?[] { true, false, null };
        foreach (var b in bools) {
            LogicalNot(b);
        }
        var pairs = from b1 in bools from b2 in bools select (b1, b2);
        foreach (var (b1, b2) in pairs) {
            LogicalOperation(b1, b2);
        }
    }

    /// &lt;summary&gt;AND,OR,XOR&lt;/summary&gt;
    void LogicalOperation(bool? left, bool? right) {
        Console.WriteLine($"{left.ToDisp()}\t&amp; {right.ToDisp()}\t= {(left &amp; right).ToDisp()}");
        Console.WriteLine($"{left.ToDisp()}\t| {right.ToDisp()}\t= {(left | right).ToDisp()}");
        Console.WriteLine($"{left.ToDisp()}\t^ {right.ToDisp()}\t= {(left ^ right).ToDisp()}");
    }

    /// &lt;summary&gt;NOT&lt;/summary&gt;
    void LogicalNot(bool? value) {
        Console.WriteLine($"!{(value).ToDisp()}\t= {(!value).ToDisp()}");
    }
}

/// &lt;summary&gt;表示の補助&lt;/summary&gt;
static class NullableExt {
    public static string ToDisp(this bool? b) =&gt; b?.ToString() ?? "NULL";
}

