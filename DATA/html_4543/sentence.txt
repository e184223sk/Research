More than 1 year has passed since last update.初心者のくせして脱線に脱線を重ねた結果、出来上がったものです
クオリティの低さが目立ちますが、投稿して、改善したいと思っています。1月から本格的にSkypeで勉強会に参加してから早くも８ヶ月が経過しようとしていますが・・・全く何も進歩が感じられない・・・！そこで、初学者用チュートリアルがあればクリアしたい・・・と思っていたら、トレンドにこんな記事が・・・！初学者用チュートリアルを探ってみた最初は、TwitterAPIを使って情報取得やツイートをしてみようという内容もあったのですが、私はマストドンしか使ってなかったので、マストドンのAPIを叩きたい！！と思いました（初心者脱却よりも脱線をどうにかしろよという話ですが）そこで、C#でマストドンを動かせるものを探してきて、コンソールでトゥートできるプログラムを作成しました（これもGUIでの実装のためにどう動かすのかの試用としての意味もあります）TodoリストをGUIで作成することが課題となったわけですが・・・これを作る前に、コンソールでどう動くかを考えてみてヒントにしてみよう・・・と考えたわけです。そうしたら、作ったマストドンのコンソールアプリと組み合わせて、TodoListを配信するアプリを作成してみようと思ったわけです。まずはTodoを登録、追加する機能の実装が必要です。それらの実装はリストを使うことで、登録数の制限をなくすことができます。また、配列番号をIDのように取り扱う事も可能ですね。リスト閲覧モードも当然必要でしょう。すべてを表示するようにforeachなどでくくれば簡単です。挿入モードがあると、優先順位でリストを作れるので便利でしょう。うまくいかないので、まだこれが実装中なのを忘れてました（汗）これらのTodoをすべて書き直すことなど意味がありません。セーブ、ロードモードも実装しましょう。こちらはMastdotというAPIを使用すると、トゥートすることが可能です。先ほどの閲覧モードを呼び出して、すべて一つの変数に代入してから、その内容をトゥートするような設計にしました。このモードがあれば、SNSをボケーとみていた時でも、リマインダのような働きをして、「やっべSNSしてる場合じゃねぇや」って思い出す事も可能ではないかなと効果が期待できます。（こじつけ）
しかし、これが一番苦労しました。なんせ、Taskの概念わかってないから、キャンセルの機能実装ができなかった・・・
やっとの思いでできるようになりました。先ほどの自動配信モードに対して、こちらはTodoの中の一つだけを通知してくれる機能があればまた便利ではないか。そう考えたので、作ってみることにしました。すっごく長いので、冗長すぎる表現もあるかと思います。その際にはご指摘いただけると幸いです。基本的にはモードセレクトから選んでもらう形になっています。Switch関数で囲み、必要なデータはこの関数からすべて取得できるようにしてから、値を渡しています。ちなみに登録、削除、一覧表示モードについては以下のように書きました。これについては、リストの追加、foreach(これに関してはラムダ式でも可能なはず)、削除の機能を利用したので、特筆すべき点は見当たらないと思われます。まずはトゥートモードについてです。トゥートモードは、MastdotというAPIを使用します。Mastdotはyamachuさんが作った、MastodonのAPiです。「C# Library for Mastodon API. Easy Toot!」というように、簡単にトゥートが出来る環境を作れてしまいます。認証はGitHubの説明書き通り、「ApplicationManager クラスの RegistApp メソッドを通して行います．」・・・ここで、Macユーザーの方が開発を行っているのであれば注意していただきたいのですが、なぜか（それを分かれよという話かもですが）、この記述では、クラスの名前が違ってしまっているらしく、以下の記述で通りますApplicationManager =&gt; ApplicaionManagerにしないと、ダメなようでした。アクセストークンは、メールアドレスでの認証と、認証ページの表示（OAuth）のいずれかで可能です。今回は認証ページを使用しております。これを実行すると、アクセストークン生成のためのURLを生成します。このURLをコンソール上で表示し、コピーペーストで、認証ページを表示させます。認証を承諾し、コピーする旨を書かれるので、コピーしましょう。そして、そのコードをコンソールリードラインで読み込み、アクセストークンを生成します。
これで、やっと認証完了です。以下にコードを書いておきます。認証を指せるコードをまとめて、アクセストークンをテキストに記述するようにしました。これをしたのには理由が２つあります。ただし、セキュリティの観点で、よろしくないと思われますので、分かってると思いますが、このアクセストークンが入ったテキストファイルの中身を誰かに渡すのは120%騙されてますのでやめてくださいね。もし、セキュアな方法をご存知の方いらっしゃったら、ご指摘いただけると幸いです。APIのほぼ説明通りですが、TodoListを一覧表示させたいので、少し手を加えてあります。手を加えるのが少しでホント助かりますねforeachをつかって、TodoListをすべて一つの変数Pasteに格納してから、client.PostNewStatusを使ってトゥートを行っています。こちらは、手動でトゥートを行っています。そこで、時間が来たら自動でトゥートを行うモードを実装します。実はここの実装に一番苦労しました。何に苦労したのか。Taskは独習C#でも後半の範囲です。そのため、実装するにも前提知識はクラスしかないので、いきなりの理解は無理でした。このコードはほとんど、このC#のタスクキャンセルのコピペですが、どう値を渡されるのかという話や、「処理を渡す」という基礎を学ぶことができただけでも収穫です。このコマンド、死ぬほどではありませんが、危険です。というのも、停止できません。Ctrl+cでもやらない限り止まりませんでした・・・そこで、先ほどのページを参考にして、実装を行いました。では、これらの設計方針をコーディングしていきましょう。チュートリアルでのそれぞれの学習目的は、「APIに触れて、繋げてみることで、クライアントアプリケーションを作ること」「GUIの実装」であるため、結果的にはチュートリアルになったのか甚だ疑問ですね・・・
GUIの実装はこれをベースにして出来るのではないかとは考えています。作り上げてからかなりの時間が立ってしまいましたがこれからも、勉強して作りたいものを作っていこうと思います。


