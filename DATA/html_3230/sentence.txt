　C++でバックエンド、C#やHTML5+JavaScriptでフロントエンド、という案件は、よくある世の中。　ところで、C#でログファイルを定義しているのに、バックエンド側であるC++に渡せなくてちょっと悔しい思いをしている人はいないでしょうか。（基本的に古くてレガシーな技術なので、今後も使えるという保証はありませんが）C++/CLIを介して、C#で定義されたNLogをC++で使うことが出来ますので、今回はそれを紹介。　というか、C++/CLIを最も有効に使えている方法かもしれないと個人的に思う方法。普通に考えて、こんな複雑なことが出来るとは・・・
　私もやってみて、MicrosoftがSQL ServerなどでC++/CLIやILなどの技術をなかなか捨てられん理由がよう分かりました。　こちらの記事を参考に　ここの内容にある「妥協点」の直接的な解決法だと思います。　ちょっとややこしすぎるだろ～という内容ですが、原理的にはis-a関係、has-a関係を組み合わせまくることで何とかなります。ただシングルトンを多用するので、ログ吐き用途などの相当汎用的な機能ではない限り、普通の機能として使うのはちょっと向いていないです。あと、C++/CLIを使う前提のラッパーを書ける人なんてそんなに多くいるのだろうかC++/CLIでは、C++側にNativeLoggingを継承したClrLoggingのオブジェクトを渡します。そうすると、C++側では、NativeLoggingのメソッドを実行することで、C++/CLIで定義されたメソッドが実行されます。(ポリモーフィズム（多態性）に基づいた考え方です。ピンとこなかった人はオブジェクト指向の勉強を少ししておきましょう。)Loggingクラスはシングルトンです。したがって、ClrLoggingからLoggingを直接実行することが出来てしまいます。ということは、C++側からのNativeLoggingの実行に対して、Loggingの実行メソッドを用意しておけば、マネージド側の関数を実行することが出来ます。C++/CLIのクラスLoggingから、C#でUserNLogを継承します。UserNLogは、NLogの実体であるLogManagerを呼び出すことが出来ます。この方法のミソは、ClrLoggingからシングルトンを経由してLoggingを呼び出すことが出来てしまう点です。本来このような使い方は、どちらかと言えば禁忌とされることが多いと思いますが、出来てしまうのが驚きです.この方法は、ある意味では、現時点でのC++からC#のコードを実行する特殊な手段の一つです。この方法を解説する記事はあんまりないと思います(需要もないけどね).一応、C++/CLIのデフォルトにはないはずのnugetライブラリとか、githubからクローンしてきたライブラリなんかも使えるのがおいしいかも　.NET Framework時代では、C++/CLIからC#のライブラリを実行することは比較的容易で、それはC#のライブラリもC++/CLIのライブラリも割とパッケージの依存性が近かったのですが、近年のVS2017, VS2019ではC++/CLIからC#のパッケージをデフォルトの画面を使って設定する機能が削減されている気がします。Referencesからパッケージを設定できるのですが、NLogのようにnuget経由で取ってきたパッケージを検知しないような動きになっていますね。その関係で、C++/CLIは、昨今発展を続けているOSSの恩恵を受けにくくなっています。将来的には、個人的にはラッパーとしての機能は便利なので、そこだけは残してほしいかなあ・・・。　正直、早くCppSharpやSWIGなどのクロスプラットフォーム技術に乗り換えたいという思いはあるこんな感じで、下のコードでは定義していないDEBUGが表示されているのがいい。日付のフォーマットやログフォーマット、ログレベルが変え放題なのも素晴らしい。バックエンドの処理ログって、大体低レベル水準に落としたいという思いが強い気がするので、C++用のログレベルを落として、C#用のログレベルを上げる、みたいな器用なことも出来そうですね。ややこしいのでざっくり紹介します基本的には説明通りですが、最後に少しおまけ(使用例)をつけています。ラムダ式funcを受けて、その結果でエラーが出る場合にエラーメッセージを出す、みたいな書き方をしています。PrintInfo, PrintErrorのように、抽象化しておいて、子クラスであるClrLoggingに明確に渡す書き方をするのがポイントです。先ほどのコメントの通り・・・です。PrintInfo, PrintErrorの実装に、PrintInfoNativeやPrintErrorNativeを実行して、これをシングルトンから呼び出しているのがポイントかな。


