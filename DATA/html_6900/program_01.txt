

public class HDict&lt;T&gt; where T : Relation
{
    private Dictionary&lt;object, object&gt; underlying;

    public HDict(Dictionary&lt;object, object&gt; underlying)
    {
        this.underlying = underlying;
    }

    public HDict() : this(new Dictionary&lt;object, object&gt;()) { }

    internal bool TryGetValue&lt;K, V&gt;(K key, out V value)
    {
        object v;
        if (underlying.TryGetValue(key, out v))
        {
            value = (V)v;
            return true;
        }
        else
        {
            value = default(V);
            return false;
        }
    }

    internal HDict&lt;T&gt; Add&lt;K, V&gt;(K key, V value)
    {
        var dict = new Dictionary&lt;object, object&gt;(underlying);
        if (dict.ContainsKey(key))
        {
            dict.Remove(key);
        }
        dict.Add(key, value);
        return new HDict&lt;T&gt;(dict);
    }
}

