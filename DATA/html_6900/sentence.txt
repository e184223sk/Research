More than 3 years have passed since last update.表題の通り、Heterogeneous DictionaryをC#で実装してみた。
コード全体を参照したい場合は下記のリポジトリへどうぞ。上記の記事で yyu さんが丁寧に解説されている。
必読。上で紹介した記事はSwift実装だが、ここでは他にScalaのライブラリを紹介しておく。Swift実装ではassociatedtype、Scalaではhigher kinded polymorphismが用いられている。
これはなぜかというと、HDictionaryを生成する際にKeyとValueの型を固定したくないからだ。しかし、C#に似たような機能は存在しない。
KeyやValueの型に依存しないinterfaceと、型パラメータを保持するinterfaceを定義することで代用する。
メソッドやプロパティは特に必要ない。Immutableにするためやや冗長な実装だが、基本的にやるべきことは他の言語と大差ない。
型パラメータTではKeyやValueを認知しないinterfaceを用いるのが肝である。
また、安全でないメソッドは他のライブラリから呼び出せないようにしておく。気が向いたら内部で使用するdictionaryをImmutableDictionaryに差し替えるかもしれない。ではどうやって型安全にアクセスするか……もちろん、拡張メソッドだ。Relation&lt;K, V&gt;で型を制限する。
追加、取得できるのはここで定義した拡張メソッドのみなので、型安全であろう。まずクラスを定義する。あとは普通に追加、取得するだけだ。コメントアウトを外してコンパイルするとコンパイルエラーになることがわかる。クラスを定義してインターフェースを実装する方式なので、該当のクラスが外部ライブラリにある場合は継承するか自前で再定義するしかなくなる。
基底クラスの場合は後者しか選択肢がなくなるため、クラスが増えがちになる。Twitterで別の問題に言及している方をみかけたので追記しておく。異なるValue型を持つRelationを持つ場合、このコードはキャストに失敗し例外を投げる。C#でも問題なく型安全なDictionaryが作成できた。


