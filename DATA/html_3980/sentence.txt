More than 1 year has passed since last update.データ型, 演算子を経てついに制御構文.
550ページある本のまっだ100ページをやった構造化プログラミングのための三つのプログラムこれらをやる言わずもがな. if (statement) {...}で書かれて, stateがTrueの時のみ実行
注意点として以下のポイントが書いてあったelse, else ifが使えるよ.
言語によっては, elseifとつながってたり, elifになってたりするからたまに間違えるおなじみ注意点として, matchするstatementが出た時, そのstatementに続くブロックのみが実行されて, 他はスキップされるよとのこと入れ子構造を作れるよ. ネストできるよ.
ただし, ネストすると可読性減るよ.可読性とかコーディングルールにかんする色々な指標としてVisualStudioことVSではコードメトリックス機能があるからつかってね, とも書いてあった. これはとても興味深い. 一行ifの場合はブロックを省略できるらしい.
ただ, 範囲が不明瞭になるからおすすめはしないとか.else ifの連続よりかはswitchを使おうと書いてある.
問題は==か===か, なのだが(PHP脳)C#はそもそも型判定なしの判定方法がObject.Equalだけなので大丈夫ぽい
また, 型の判定をできるらしい.do whileが個人的に可読性低く見える.
条件を後置判定にする意味はあるのか...?
一応内部的には, 最低でも一回実行するのが"do while", しないのがwhileらしいpythonのノリのforはfor each, こちらはJSとかcのノリのforみたいだloopに必要不可欠な機能を宣言のタイミングで書くのがfor注意点として以下が挙げられていたコードゴルフ技術な気もするけれど...for(int i=0; i&lt;6; Console.WriteLine("hogehoge"); i++) ;と書くことで一行forが実装できるみたい(セミコロンをお忘れなく)また,なんてのも可能のよう.
julia感を感じた.pythonとかでのfor.
指定された配列やコレクションの要素を取り出して順に処理するmap関数のような働きをする.array/collectionようの要素が順にvariableでおかれた変数に格納され, hogehoge処理を実行する文コマンドライン引数はMain関数の引数argsに格納されるので, foreachを使って取り出すことが可能になる.なるほど.長くなるまでここまで.
次回にbreak; continue;をやり, goto:, プリプロセッサディレクティブをやってからようやく標準ライブラリに


