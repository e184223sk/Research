
using System.Collections;
using System.Collections.Generic;

namespace WebAppTest_Test
{
    class DummySessionState : IDictionary&lt;string, object&gt;
    {
        Dictionary&lt;string, object&gt; innerDic = new Dictionary&lt;string, object&gt;();

        public object this[string key] 
        { 
            get
            {
                if(innerDic.ContainsKey(key))
                {
                    return innerDic[key];
                }
                else
                {
                    return null;
                }
            }
            set =&gt; ((IDictionary&lt;string, object&gt;)innerDic)[key] = value; 
        }

        public ICollection&lt;string&gt; Keys =&gt; ((IDictionary&lt;string, object&gt;)innerDic).Keys;

        public ICollection&lt;object&gt; Values =&gt; ((IDictionary&lt;string, object&gt;)innerDic).Values;

        public int Count =&gt; ((ICollection&lt;KeyValuePair&lt;string, object&gt;&gt;)innerDic).Count;

        public bool IsReadOnly =&gt; ((ICollection&lt;KeyValuePair&lt;string, object&gt;&gt;)innerDic).IsReadOnly;

        public void Add(string key, object value)
        {
            ((IDictionary&lt;string, object&gt;)innerDic).Add(key, value);
        }

        public void Add(KeyValuePair&lt;string, object&gt; item)
        {
            ((ICollection&lt;KeyValuePair&lt;string, object&gt;&gt;)innerDic).Add(item);
        }

        public void Clear()
        {
            ((ICollection&lt;KeyValuePair&lt;string, object&gt;&gt;)innerDic).Clear();
        }

        public bool Contains(KeyValuePair&lt;string, object&gt; item)
        {
            return ((ICollection&lt;KeyValuePair&lt;string, object&gt;&gt;)innerDic).Contains(item);
        }

        public bool ContainsKey(string key)
        {
            return ((IDictionary&lt;string, object&gt;)innerDic).ContainsKey(key);
        }

        public void CopyTo(KeyValuePair&lt;string, object&gt;[] array, int arrayIndex)
        {
            ((ICollection&lt;KeyValuePair&lt;string, object&gt;&gt;)innerDic).CopyTo(array, arrayIndex);
        }

        public IEnumerator&lt;KeyValuePair&lt;string, object&gt;&gt; GetEnumerator()
        {
            return ((IEnumerable&lt;KeyValuePair&lt;string, object&gt;&gt;)innerDic).GetEnumerator();
        }

        public bool Remove(string key)
        {
            return ((IDictionary&lt;string, object&gt;)innerDic).Remove(key);
        }

        public bool Remove(KeyValuePair&lt;string, object&gt; item)
        {
            return ((ICollection&lt;KeyValuePair&lt;string, object&gt;&gt;)innerDic).Remove(item);
        }

        public bool TryGetValue(string key, out object value)
        {
            return ((IDictionary&lt;string, object&gt;)innerDic).TryGetValue(key, out value);
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return ((IEnumerable)innerDic).GetEnumerator();
        }
    }
}

