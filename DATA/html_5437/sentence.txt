SelectMany は、階層化されたデータを平坦化して取り出す LINQ です。同じ LINQ の Select に比べて、一段深い情報を操作するものなので理解が難しいこともあると思います。そこで、イメージ図とコード例を使って説明する記事を書いてみました。この説明では、LINQ の Select 、ラムダ式についてはほとんど説明しませんので、これらについては知っていることを前提としています。SelectMany は、下の絵のように、リストや配列の階層構造があるときに、深いレベルの情報をまとめて取り出すことができます。山のようになっているデータの山頂部分を一つのリストとして取得できるイメージです。早速 C# のコードで試してみましょう。以下のコードは、 .NET Core 3.1 の環境で実行できることを確認しています。階層構造をもつデータを定義します。通常の Select だと、上の階層にあたる Author の名前一覧が取得したりできるのでした。青い点線で囲まれた作者名をラムダ式で指定することで、作者名の文字列のリストが取得できています。SelectMany を使うと、下の階層に当たる Book の名前一覧が取得できます。Selectとは違って、引数のラムダ式 a.Books.Select(b =&gt; b.Name) では、青い点線で囲まれた部分（本の名前のシーケンス）を指定しています。この複数のシーケンスをつなげた結果が取得できます。LINQ には種々のオーバーロードが定義されていることが多いのですが、 SelectMany も同じです。複数の LINQ が必要になる操作をひとまとめにして実行できるものがオーバーロードで定義されていることが多いです。使いこなせるとよりシンプルで理解しやすい書き方ができます。SelectMany&lt;TSource,TResult&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource,Int32,IEnumerable&lt;TResult&gt;&gt;)
シーケンスの各要素を IEnumerable に射影し、結果のシーケンスを 1 つのシーケンスに平坦化します。 各ソース要素のインデックスは、その要素の射影されたフォームで使用されます。上の階層のインデックス番号を取得します。余談ですが、 Select も同じ様にインデックス番号を取得できるので、２つを組み合わせると、上位と下位のインデックスをつなげて取得したりできます。SelectMany&lt;TSource,TCollection,TResult&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource,IEnumerable&lt;TCollection&gt;&gt;, Func&lt;TSource,TCollection,TResult&gt;)
シーケンスの各要素を IEnumerable に射影し、結果のシーケンスを 1 つのシーケンスに平坦化して、その各要素に対して結果のセレクター関数を呼び出します。上位の要素（例だとAuthor)と、下位の結果の要素（例だとbookName）をまとめて処理するラムダ式を追加できます。１つ目のラムダ式の結果の要素一つ一つに対して、２つ目のラムダ式が呼び出されます。SelectMany&lt;TSource,TCollection,TResult&gt;(IEnumerable&lt;TSource&gt;, Func&lt;TSource,Int32,IEnumerable&lt;TCollection&gt;&gt;, Func&lt;TSource,TCollection,TResult&gt;)
シーケンスの各要素を IEnumerable に射影し、結果のシーケンスを 1 つのシーケンスに平坦化して、その各要素に対して結果のセレクター関数を呼び出します。 各ソース要素のインデックスは、その要素の中間の射影されたフォームで使用されます。さきほどの２つのあわせ技です。


