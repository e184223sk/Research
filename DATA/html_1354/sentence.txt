More than 1 year has passed since last update..NET Core 3.0以降から、Windows Formがプレビュー版で対応しましたので、下記2つを.NET Core版に移植しました。
① 【.NET】進捗ダイアログ画面で動的DLLの進捗状況を表示する
② 【.NET】進捗ダイアログ画面で動的DLL(差し替え可能)の進捗状況を表示する①については、変更箇所が少なかったため(Assembly.Load→AssemblyLoadContextに変更)、記事に追加する形で修正しました。
②については、変更箇所がそれなりにあったので今回記事にしました。.NET Coreにてメイン画面(EXE)を閉じないでもクラスライブラリー(動的DLL)を差し替え可能なことを実現します。画像は前回の記事の使いまわしです。.NET Framework版と.NET Core版で実現することは変わらないため、ただ日付だけ古いですがご了承ください。.NET Framework版では、新規のAppDimainという単一プロセス内で分離された複数の実行領域(domain)を使用して実現させていました。
.NET Core ではAppDimainが1プロセスで1つしかサポートされていないため、AppDimainが使えません。
その代わりAssemblyLoadContextという新しいクラスが用意されているので、これを使用して実現します。
System.Runtime.Loader.AssemblyLoadContext についてAssemblyLoadContextクラスを使用しても、考え方としてはAppDimainの時と変わりません。
進捗ダイアログ画面から取込バッチ処理のクラスライブラリー(DLL)を動的にロードし、処理終了後にアンロードした上で取込バッチ処理(動的DLL)を差し替えようとすると下記のエラーが発生します。

これは、.NETのメタデータ(≒ 型情報)などのアセンブリが進捗ダイアログ画面側に残った状態になってしまうからです。AppDimainの時と同様に進捗ダイアログ画面をクラスライブラリー(DLL)に分離し、メイン画面からAssemblyLoadContextインスタンスを作成して進捗ダイアログ画面(DLL)をロードして実行します。
また、取込バッチ処理(動的DLL)も同じAssemblyLoadContextインスタンスにロードされて実行されます。
進捗ダイアログ画面を閉じると、AssemblyLoadContextインスタンスがアンロードされます。バックグラウンド処理にはBackgroundWorkerコンポーネントを使用しています。
別のスレッドからForm上のコントロールにアクセスしたことにより「有効ではないスレッド間の操作」の例外エラーとなったため、コントロールに対してはInvoke((Action)delegate (){}) で囲んでいます。 前回との違いとして、プロパティにAssemblyLoadContext用のコンテキストを追加しています。実行ボタンで進捗ダイアログ画面を表示する。.NET Core でアセンブリのアンローダビリティを使用およびデバッグする方法アセンブリをロードするときに、そのファイルが見つからない場合、FileNotFoundException例外（System.IO名前空間）が発生してしまう。
この問題を避けるために、JITコンパイラが動くのを、アセンブリがダウンロードされた後まで遅延させなければならない。そのためにJIT 最適化によるインライン展開を抑止する方法として「[MethodImpl(MethodImplOptions.NoInlining)]」をメソッドの上に付加している。frmMain.cs内に追加しています。単純にアセンブリをロードしたいだけなら、AssemblyLoadContext.Default を使用すればいいのだが、下記の理由で Default を使うとアンロードができなくなるためカスタムする必要がある。AssemblyLoadContextのUnloadメソッドはコールされた時点では開始されるだけで完了はしません。、
アンロードが完了されるのは、以下の条件を満たしたときとなります。.NET Coreでアセンブリをアンロードする参照：.NET Core でアセンブリのアンローダビリティを使用およびデバッグする方法AssemblyLoadContextのコンストラクタ引数にある'isCollectible'は'true'にする必要があります。これはパフォーマンスの観点からデフォルトでは'false'になっています。
また、'false'のまま'Unload'をコールすると例外が発生してしまうためです。クラスライブラリー(DLL)で、進捗状況のイベントを発生させ進捗値を渡します。
処理内容はサンプルなので適当です。SubProccess70()の戻り値を true -&gt; false に変更。
.NET Core版の移植に時間がかかるかと思ったんですが、案外あっさりとできました。
とはいっても先人たちが、記事を書いてくれたお陰様です。感謝！今の時代にあんまり用途がない気がしますが、何かの役には立つことがあるかと思います。


