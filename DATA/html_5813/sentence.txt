More than 3 years have passed since last update.もうじき無職の進藤京介です。
以前、倉庫番アプリを作って公開しました
→無職が倉庫番をコンソールアプリで作ってみた C#確かにアプリケーションとしては動きましたが、コメントを頂き自身の力不足を痛感致しました。
そして私はただひたすらに強くなる事だけを願い特訓をしてきました。
それでも何か超えられない壁があり、自分の限界を知った時、自分に対する怒りでスーパーサイヤ人へと進化致しました。御託はもういいですね。というわけで再挑戦しました。ちょっと長くなります。ごめんなさい。アプリケーションでの前回からの進化点は、ゴールの上をプレイヤーが乗る仕組みを実現したくらいで、あとはほとんど変わっておりません。
ルールも大体同じです。とても長くなってしまうので完璧なUML図を用意させていただきました。
※ガチ初心者です。本当にごめんなさい。小学生の落書きだと思ってください下に変な矢印まであります今回もプレイヤーなどのオブジェクトを表現するのにcharを使っています。
これらの文字を扱う簡単なクラスを使いましたやっていることは必要な文字を返却するだけです。
壁（■)に関しては特にすることがないので省いています。もし必要になったら、足りなくなったら足すだけやから。という感じです。ではMainClassです。Stageを作ってゲームをスタートさせています。Stageクラスはゲームのエンジンのようなものです。
マップを読み込みオブジェクトを生み出しループ処理したり。というのを他のクラスに投げたりしています。サブクラスの前に入力を受け取るクラス(InputManager)ですInputManagerは
入力を受け取って移動先となるdirectionを決定し返却するgetInputKeyメソッドを持っています。ではStageのサブクラスです必要なものをオーバーライドします
createObjectではオブジェクト生成に必要なFactoryをインスタンス化し、
objectManagerというオブジェクト管理しているクラスにオブジェクトをぶち込んでいます。updateは、InputManagerから受け取った値でプレイヤーの移動先を調べています。
移動先のオブジェクトに応じて、ActionManagerクラスのメソッドを呼び出しています。移動先が特に何もない床(□)ならば、プレイヤーと入れ替えるようにして終わりですが、プレイヤーがゴールに乗っている場合は、単純な入れ替えではゴールが床になってしまうので、そこを無理やり誤魔化しています。オブジェクトの持つchangeTypeというメソッドを使って書き換えを行なっています。そしてそのプレイヤーなどを表現するクラスです。
GameObjectクラスという名前にしました。これを継承したクラスを作るのですが、今回までならば、このクラスを抽象クラスにせずに済んだのですが、やっちゃいました。
これはクリリンが18号を破壊するスイッチを押せなかったようなもんですね。。。。持っているものは単純で、オブジェクトのタイプと位置情報と文字です。
ゴールの上に乗っているプレイヤーは描画する時の識別で、特にすることがないのでタイプの中には入れてあげませんでした。サブクラスはchangeTypeを実装しただけです。はい。
文字を切り替えて、タイプを変更するという処理です。先ほど登場しスルーされたFactroyを通してこのゲームオブジェクト達を生成しています。これを継承したクラスはcreateGameObjectをオーバーライドし、そこで具体的なインスタンスの生成方法を決定します。やっていることは、受け取った文字列に応じてゲームオブジェクトのタイプを決定し、カウンターの値で位置情報を設定しています。前回は配列にオブジェクト突っ込んで、配列の順番で描画処理をしていましたが、今回はこのオブジェクトの持つ位置情報から描画処理を行います。ゲームオブジェクトをStageで管理させることを考えた時、Stageクラスの処理が膨大に膨れ上がっていったのです。私はこう感じました。これでは前回と同じじゃないか！と。というわけでゲームオブジェクトを管理するクラスを作りました。生成したオブジェクト達はaddObjectメソッドを通じて、Listの中に入っていきます。
あとはメソッド名通りのことをやっています。printObjectは描画処理になります。
ゲームオブジェクトの位置情報で描画処理をするので、ポジションを並び替えてコンソールに出力をしております。悔しかったのがhasGoalメソッドです。
これは、Listの中にGOALタイプがあればtureを返しています。
GOALタイプのオブジェクトが存在しているということは、まだ荷物の乗っていないゴールが存在しているということです。
果たしてこのメソッドはここにいても良いのかどうなのか、私は今も疑問に思っています。StageはObjectManagerからプレイヤーやその移動先のオブジェクトを取得して、処理を行なっているという流れにしました。となると残すところは最後のアクション関係です。
このアプリケーションの頭脳担当のActionManagerクラスです。このクラスはプレイヤーが荷物に衝突した時、ゴールに衝突した時に呼ばれるメソッドを持っています。処理が複雑だったのでコメントを入れてみました。
コンストラクタでObjectManagerを受け取ります。hitGoalメソッドはプレイヤーをゴールの上に乗せます。
しかしゲームオブジェクトのタイプに、ゴールの上に乗ったプレイヤーというのは無いので、文字だけを切り替えています。ゴールの上のプレイヤーに荷物が衝突することは絶対にありえないので、文字を切り替えるだけにしました。以上になります。色々と考えて紙に書いてこんな風に実装しようとか思っていたのですが、いざコードを打ってみるとうまく実現できなかったり、こんな簡単なものなのに結構苦労しました。
それでもプログラミングは楽しいということが実感できました。この先、スーパーサイヤ人２を目指し、ブルーを目指し、身勝手の極意を身につけるためには、まだまだ相当なトレーニングが必要だと思いました。非常に長くなってしまい申し訳ございませんでした。
最後までお付き合いいただきありがとうございました。


