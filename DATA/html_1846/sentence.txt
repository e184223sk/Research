More than 1 year has passed since last update.一覧表示画面に表示する任意のモデルにページング機能を実装するリストクラスを作成して配置する。
このリストクラスにはページングを実行可能にするために以下のようなプロパティーを持たせる。この拡張リストを使用してカレントページに表示するレコードを取り出す静的メソッドを用意する。
このメソッドに引き渡される母集団となるデータリストはページング処理により再クエリーされるため、IQuerableインターフェイスを実装する必要がある。View側にはページングされたモデルのリストを表示するための以下のようなコントロールが必要になる。ポイントとなるのはこれらの&lt;ページング用のビューコントロールが元の一覧表示画面の検索機能や並べ替え機能に最小限の影響しか与えないようにすることである。このドキュメントの前提として、既にアプリケーションには一覧表示画面(Index.cshtml)が用意されており、そこには検索機能とソート機能が実装されているものとする。そのサンプルとして「検索＋ソート機能付き一覧画面(MVC)･･･ASP.NET Core開発ノウハウ 4-2」にて実装したPersonモデルの検索・ソート条件付き一覧表示画面にページング機能を実装する手順を示していく。(https://qiita.com/TR-MF/items/e5ba963be872ecdfe928)プロジェクト内の\Commonまたは\Utility等の任意のフォルダに拡張リスト用クラス「PaginatingList&lt;T&gt;」クラスを作成する。\Common\PaginatedList.cs前提より一覧表示画面(Index.cshtml)には検索機能とソート機能が実装されているので、モデルはこれらの設定をUIとやり取りするためのプロパティーやメソッドを有している。
このモデルのメンバープロパティーである一覧出力対象モデルリストをPagenatedListにセットする。\Models\PersonSearchModel.cs前提より一覧表示画面(Index.cshtml)には検索機能とソート機能が実装されているので、コントローラのIndexアクションメソッドは既に引数として検索値やソート条件を引数として受け付けている。
ここにページングを行うための引数としてページインデックス、即ち「何ページ目を表示するか？」を追加する。\Controllers\PersonController.cs元となるビュー(Index.cshtml)では、検索条件入力エリア及び、一覧画面表示用テーブルのヘッダーにソート条件設定用のリンクを設定していた。これに新たにページングを実装するためのコントロールを加える。
と言っても元々実装されていた検索条件・ソート条件設定用のコントロールには一切手を加えない。\Views\People\Index.cshtmlsやることはたったこれだけ！検索・ソート条件なしの場合。先頭ページが表示される。Top/Previousリンクは使用不可。
次へボタンを2回クリックして3ページ目を表示したところ。前後へのページ遷移可能。
この状態でテーブルヘッダー行の「LastName」をクリックして姓でソートを実行した直後。並べ替えが実行され、先頭ページに移動する。以下のような機能を実装すること
1. 前後のページに移動するボタンではなく、表示可能なページ番号を列挙して、それぞれのページへのリンクを実装できるようなPaginatedListを作成する。
2. ページ数が10を超えたら表示しきれないページは「･･･」で表す。


