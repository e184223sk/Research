
    /// &lt;summary&gt;
    /// 検索ソート機能付き一覧画面表示用メソッド。
    /// ２項目用の検索値とソート条件指定を受け取る。
    /// &lt;/summary&gt;
    /// &lt;param name="crt_name"&gt;名前(FirstName/LastName共通)の検索値。一致条件は一部一致とする。&lt;/param&gt;
    /// &lt;param name="crt_age"&gt;年齢の検索条件。一致条件は前後５歳の幅を持たせる。&lt;/param&gt;
    /// &lt;param name="sortfield"&gt;ソート条件。項目名に所定の区切り文字で昇順・逆順指定を加える。&lt;/param&gt;
    /// &lt;param name="pageIndex"&gt;ページングを行う場合何ページ目を表示するか指定する。&lt;/param&gt;
    /// &lt;returns&gt;引数の検索＋ソート条件で抽出されたレコードのリスト。更にLINQ式により変換が可能&lt;/returns&gt;
    [HttpGet]
    public async Task&lt;IActionResult&gt; Index(string crt_name, string crt_age,
        string sortfield, int? pageIndex)
    {
        IQueryable&lt;Person&gt; selected;

        // ･･･ 途中省略 ･･･
        // この部分にIQuerable&lt;Person&gt;selectedに、引数crt_nameとcrt_ageで指定された検索条件でデータを検索し、
        // sortfiledに指定されたソート条件で並べ替えを行った結果をセットする処理が記載されている。
        // ･･･

        var people_pagelist = await PaginatedList&lt;Person&gt;.CreateAsync(
            selected.AsNoTracking(), pageIndex ?? 1, PageSize
            ).ConfigureAwait(false);

        var myModel = new PersonSearchModel
        {
            People = people_pagelist,
            Crt_Name = crt_name,
            Crt_Age = crt_age,
            SortField = sortfield,
        };

        return View(myModel);
    }

