More than 1 year has passed since last update.「DirectShowで開発する時のイロハ」と書いたけど、DirectShow.NET中心のネタだけど、DirectShow.NETってほとんど、DirectShowのラッパーなので、参考にできるでしょう。とメインは、音声と映像の録画をするプログラムが作りたくてのメモなので、映像の編集とか動画ファイルの再生とかの情報は希薄です。DirectXは広い。... DirectXを.NET Frameworkからアクセスできるようなものって、SlimDXとかManagedDirectX(MDX)とかいろいろあるけど、それらが全てのDirectXをラップしているとは限らないので注意だ。録画中は、アプリケーション側では特に何もしなくてよいほど、DirectShow側がバックグラウンドスレッドのように、よきに計らってくれる。フィルタ作って、グラフに登録して、そこから先は、特に何もしなくていい(RunしてStopだけは必要だけど)、という感じ。
逆に、初期設定というか、録画までの最初の一歩というか、フィルタ作って、グラフに登録して、ピン繋げて、というところが大変というか、DirectShowプログラミングの肝になるところだと思う。COMらしい。なので、COM⇔.NET相互運用の機能を使って、直接 .NET Framework からアクセスできるかもしれない。MediaFoundationというらしい。まぁ、だからなのか、32bit(x86)のフィルタは充実しているけど、64bit(x64)のフィルタが寂しい状況なのは、こういう事だからなのでしょう。これは、他のWebサイトを参照してくれ。以下、簡単にGUIでグラフ(フィルタの繋がり)を編集できるツールなんだけど、当初、私はこれを毛嫌いしていて、VisualStudioの自分のプログラムで、一覧(Listing)とって、そこからフィルタを選択して...とやろうとしたけど、DirectShowはクセが強いので、私のような入門者には無理だった。いろんなWebページだと、WindowsSDkに添付されているとか、いろいろと書かれているけど、とりあえず自マシンで、dir c:\ /s /b | find "graphedt"してみると、既にインストール済かもしれない。また、Microsoft謹製のGraphEditerだけではなく、GraphEditerの代替となるツールを3rdパーティが作っていたりするので、そういうのでもいいと思うので、とりあえずDirectShowの入門者はまずGraphEditerを触ってみる事が肝要だ。てか、GraphEditerでフィルタの繋がり方をまず定義してからでないと、DirectShowプログラミングは始まらないと言い切ってもいいかもしれない。特にマルチロディアデータの再生だけなら、GraphEditerにファイルを与えるだけで、フィルタの繋がり方を示してくれるので、GraphEditerを使いこなす事がDirectShowプログラミングの肝のようだ。Microsoft謹製だと、32bit版と64bit版がある。これが、32bit版のGraphEdt.exeだと繋がらないフィルタの接続でも、64bitだと繋がったりするので、うまくいかない場合は、とりあえず両方で試してみるといい。DirectShow.NET でコードを書いていると、GraphEdit では繋がるのに、自分のプログラムでは繋がらないピンがあったりする。そうなると GraphEdit側の繋がっているピンの状態が知りたくなるのだけど、そういう時は、proppage.dllだ。
私はこの情報に巡り合うまでは、レジストリ(HKCU)の深い森の中をさまよっていましたよ。graphedt.exeがインストールされていれば、proppage.dllもイントールされている公算が高い。とりあえず、dir c:\ /s /b | find "proppage.dll"してみるべきだ。見つけたら、管理者権限のcmd.exe から win32はwin32のregsvr32.exeで、win64はwin64のregsvr32.exeでレジストリに登録(COMを登録)のだ。ちなみに、64bit Windowsの場合、win32のregsvr32.exeはc:\Windows\SysWOW64\regsvr32.exeなので、そこは留意点だ。COM登録が完了すると、右クリックがこんな感じになる。参考 : GraphEdit の使い方 (2) – Media Sub Type の確認方法および GraphEdit を使ったファイル コンバータの作成32bit版と64bit版のGraphEdt.exeを起動してみると分かるけど、32bit版のフィルタが圧倒的に多い。...64bit時代の2019年ではDirectShowってオワコンなのか?まぁ、フィルタ名にSplitterって書かれているとなんとなく分かる(配列に分割する際とかSplitってメソッドだしさ)と思うけど、映像と音声と字幕とか、そういうのを個別に分離するフィルタっていうのは分かる。私は録画(映像と音声)がしたくてDirectShowに手を出したので、それをまとめるものが何かって言うのが分からなかった。
muxっていうのがそれらしい。avi 形式の映像にまとめるのが、AVI Muxだし、WebM形式にまとめるなら WebM Muxer とか言う感じなのがのそれ。
どちらにしろ、録画形式ごとにMuxが必要って事だし、その形式のMuxがないと、映像と音声をまとめられないって事だと思う。つまるところ、コンバータは、動画ファイルを読んで、Splitterで、映像と音声を分離して、映像と音声をそれぞれのデコーダに渡して、それぞれを別のエンコーダで圧縮して、muxでまとめて出力。という手順をとればコンバータは作れる。という事になると思う。録画は、Splitterから先の、それぞれのキャプチャデバイスからデータを受け取って、映像と音声をそれぞれエンコーダで圧縮して、muxでまとめて出力。という感じ。映像だけはプレビューが欲しいとかいう事であれば、圧縮前に SmartTeeでキャプチャとプレビューに分離して、プレビュー側はGUIのレンダラフィルタに渡してあげる。という追加処理も必要という感じ。これは、キャプチャ(録画)とプレビュー(画面出力)に分離する事ができるフィルタ。覚えておきたい。DirectShowには、カメラとマイクがキャプチャデバイスとしてあるので、さらに映像と音声をまとめてくれるmuxフィルタがあるので、録画と録音を同時にできるけど、録音だけも可能...なはず。
しかしながら、録音だけならDirectSoundという選択肢もある。
こちらはリングバッファなどの知識というかそういうものに対してのプログラミング的な慣れも必要だけど、まぁ録音だけならDirectSoundという選択肢もある。配布元はここかなCOM な DirectShow を .NET Framework でアクセスできるようにしたやつ。というか、DirectShow は COM なのだから、.NET-COM相互運用で、直接アクセスできるかもしれない(試した事はない)。こんな感じ。「VideoInputDevice」を「AudioInputDevice」にすれば、音源の一覧も取れるこんな感じで、カテゴリとフィルタ名で抽出して、IBaseFilter インターフェイス型を返せるキャプチャデバイスの一覧と一緒のような感じで書ける。(キャプチャデバイスも、キャプチャフィルタで、フィルタの一種だからねぇ～)第二引数のfilterCategoryには、DirectShowLib.FilterCategory.LegacyAmFilterCategoryを充てたりする。LegacyAmFilterCategory は、GraphEdt.exe でフィルタを探す際の「DirectShow Filter」というカテゴリに該当するはず。大抵の関数は、int型での返値が「0(場合によっては「1」も)」以外でエラーで、それを言語化してくれるのが、DirectShowLib.DsError.ThrowExceptionForHR(int hr);なので、int型を返す関数を呼び出す際には、返値を取得して、このThrowExceptionForHR()を呼び出すようにしようDirectShowプログラミングのポイントは、ピンを繋げていく作業なので、フィルタからピンを取り出さないといけない。ピンを取り出すには、二つの関数があるとの二つ。後者の第三引数、第四引数とかよく分からない。だけど、基本的に後者でよいと思う。前者は、Outputが複数あって、そのうちの「Preview」と書いてある方というような複数の可能性がある場面の時に使う。「Smart Tee」フィルタから「Preview」と「Capture」に分岐させたり、「Mux」系のフィルタで、「Audio」と「Video」を統合したり・・・という場面。下記のピン一覧から取りだすって方法もあるとは思う。出力ピンと入力ピンが繋がったとして、その間はどういう形式(画面サイズとか色数とか)のデータが流れる(予定)なのか。というのを返すのが、ConnectionMediaType() メソッドこんな感じなぜか、out が必要ないので、new する必要があるという、例外的なメソッドなので注意。でもいいんじゃないのと思うけど、こうではないので注意だ。一覧の取り方が特殊。こんな感じ上記は、フィルタからピンの一覧だけど、ピンからメディアタイプの一覧とかも、基本的に同じ手順という手順。
Next() 関数の第一引数は、「1」← これにすごく悩んだ。
Next() 関数の第二引数は、要素が一個の配列 ← これにすごく悩んだ。Input系統のピンをOutput系統のピンに繋げる事で、データがフィルタ間を流れていくわけだ。Input系統のピン⇒をOutput系統だよ。int hr = DirectShowLib.IGraphBuilder.Connect(DirectShowLib.IPin source, DirectShowLib.IPin dist);とint hr = DirectShowLib.IPin.Connect(DirectShowLib.IPin dist, DirectShowLib.AMMediaType mediaType);
int hr = DirectShowLib.IPin.ReceiveConnection(DirectShowLib.IPin dist, DirectShowLib.AMMediaType mediaType);がある。int hr = ((DirectShowLib.IMediaControl)DirectShowLib.IGraphBuilder).Run();Stop(), Pause()とかもあるよStopWhenReady() これは何?こんな感じ。IGraphBuilderインターフェイス内のIBasicVideo2インターフェイスにGetVideoSize()という関数があるよ。VideoCaptureDeviceのCaptureピンを選択すると、複数のMediaTypeが取得できるが、それはキャプチャするフォーマット(色数とか画面サイズとか)の違い。それは、ForamtTypeにあるので、MediaType=videoの時、こんな感じで呼び出せば、一覧がとれる。ビートレート / (高さ幅色ビット) = 1秒当たりのフレーム数 (30とか20とか)
になると思う。一覧取ると分かるけど USBカメラ/Webカメラから出力する時点で MotionJPEG で圧縮されていたりするんですねぇ～....(知らなかった orz)
→ なので、キャプチャデバイスからいきなり FileWriterに繋げてもMotionJPEGで圧縮されているかも知れない。映像が出てきたら、次は音声。・・・映像の連想から AudioInfoHeader ・・・ではなかった ...orzこんな感じ上記を使えって、MediaType指定で、ピンを繋げていけば、キャプチャする際の出力品質を制御する事ができる。自分で new した時だけ、解放が必要になる解放用のメソッドは、DirectShowLib.DsUtils.FreeAMMediaType(DirectShowLib.AMMediaType type);とDirectShowLib.DsUtils.FreePinInfo(DirectShowLib.PinInfo pInfo);の二つがあるので、この二つを new した際には、解放を忘れずに。[INFO] Microsoft MPEG4 Version 3.0 codec は Windows Media Technologies でのみ使用できるということだそうだ。普通に ToString() しても、GUID が出力されてチンプンカンブンなので、こんな関数はどうでしょうか。


