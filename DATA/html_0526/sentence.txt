C#でバッチ処理作る機会があり、ベースになるフレームワークがないかと探していたらEntryPointというライブラリを見つけました。
CLIコマンドを保守する上でとても便利なライブラリだと感じました。ですが、日本語の記事が見つからなかったので実装例をメモしておきます。Nick-Lucas/EntryPoint
https://github.com/Nick-Lucas/EntryPoint手元にwindowsがなくmacを使用しました。基本的にwindowsでも同じだと思います。
（前はwindwsでビルドしました。）QiitaEntryPointというプロジェクトを作成し、EntryPointをnugetでインストールします。最終的には上記のようになります。
サンプルコードを参考にしつつ、コマンドの処理が膨らんでもファイルを作りやすいようにコマンドごとにディレクトリを切りました。今回はPrimaryコマンドとSecondaryコマンドを用意しました。Primaryコマンドの処理内容となります。
コマンドライン引数と対応したクラス「PrimaryCliCommandArgs」を引数に取ります。こちらはPrimaryコマンドのコマンドライン引数と対応したクラスです。
「BaseCliArguments」を継承します。下記のコマンドでMessageに対して"I am Engineer"がAddDayに対して"true"が入ってくるイメージです。[Required]を使用することでその引数は必須になります。また、LongNameで引数名を指定して、ShortNameで引数の省略形を設定できます。
他にもいろいろ機能があるので以下のサンプルコードを参考にすると良いです。直感的に理解できると思います。ヘルプを表示するとこんな感じです。Secondaryコマンドは引数を受け取らないシンプルなコマンドとします。このクラスは各コマンドのファサードになっており、各コマンドの処理へと振り分けを行います。
「BaseCliCommands」を継承します。ここも直感的ですが、CommandAttributeを設定することで、コマンドと処理の紐付けが行われます。
[DefaultCommand]を設定すると、コマンド名を省略したときのデフォルト操作を指定することができます。Cli.Parse&lt;PrimaryCliCommandArgs&gt;(args);を実行することで、型引数にコマンドライン引数をパースしたインスタンスを取得できます。ヘルプを表示するとこんな感じです。最後にエントリーポイントを実装します。3つのパターンで実行してみます。バッチ処理の実装方法はいろいろあると思いますが、こちらのライブラリを使用することで初見にも優しいソースコードになると思います。（CommandAttributeから追えば良いので）
また、CLIコマンド特有のヘルプ処理などをAttributeで切り出すことにより、本質的な実装に集中できるとともにクリーンなコードを書くことができると感じました。今回使用したソースコードです。
https://github.com/ishiyama0530/qiita-EntryPoint


