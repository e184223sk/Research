More than 3 years have passed since last update.Unityから他のアプリを操作する方法で色々悩みつつ実装した話です。
何故そんな事を的な背景や、何をしたくてこうしたかは下のツイートをご覧ください。
ARマーカーで認識したオブジェクトの表示/非表示でボイチェン/ボイロを切り替えます。 pic.twitter.com/Iu0VUtcj4EWindows 10
Unity 2017.1.1f1他アプリの操作には色々な方法があります。
私が知る範囲だと以下のとおりです。・System.Windows.Forms.SendKeys
・SendMessage
・System.Windows.Automationメリット：とっつきやすい
デメリット：操作対象の値を取得できない、本来の操作の邪魔メリット：本来の操作の邪魔にならない
デメリット：要dll参照、wpfアプリを操作しずらい(できない？)メリット：各種コントロール用の操作機能がある
デメリット：Unityからは普通に使えない、一部操作できないコントロールがある？、本来の操作の邪魔になる？今回は本来の操作の邪魔になるのは避けたいのでSendMessageを選択します。GetAllHandleでアプリを探し、再帰でGetChildHandleを呼び出し、アプリ以下のウィンドウハンドラを取得します。一旦取得した後はListの順番かGetHandleで名前を指定して探したウィンドウハンドラにSendMessageで各種操作のメッセージを送ります。全て名前で済めばいいですが、名前が付いていないコントロールもあるのでこうなっています。であれば全部順番にしたい所ですが、コントロールによっては順番が変わったりするので困りものです。WPFアプリの場合、アプリ自体のウィンドウハンドラはありますが、コントロールのウィンドウハンドラがありません。よって、SendMessageが使えません。解決策があるかもしれませんが、私は諦めました。
実験的にWPFアプリ向けにUIAutomationを使ってみました。Unityからは使えない？ので、かなり強引ですが、コンソールアプリを作って画面を隠すように実行すれば対象の操作自体はできました。ただし、この方法はこの方法で一部のコントロールが操作できないため、やむなくSendMessageを使うなど歪な事になったりします。ちゃんと設定できれば使えるのかもしれませんが、私はダメでした。
UiAutomationCore.dllがNativeなのでどうしたら良いか分からない。というのが理由です。
UiAutomationCore.dllを直接参照して必要な機能を使えば良いのかもしれませんが、内部の関数を調べると直接使うのは非推奨らしく、茨の道感があります。
https://msdn.microsoft.com/en-us/library/windows/desktop/ee684032(v=vs.85).aspxhttp://tech.sanwasystem.com/entry/2015/11/25/171004
http://dobon.net/vb/dotnet/process/getprocessesbywindowtitle.html
https://msdn.microsoft.com/ja-jp/library/ms747327(v=vs.110).aspx
https://msdn.microsoft.com/en-us/library/windows/desktop/ee671216(v=vs.85).aspx
https://msdn.microsoft.com/ja-jp/library/windows/desktop/dd318521(v=vs.85).aspx


