
public class NullableKeyDictionary&lt;TKey, TValue&gt; : IReadOnlyDictionary&lt;TKey, TValue&gt;
{
    private readonly IReadOnlyDictionary&lt;TKey, TValue&gt; source;
    private readonly bool hasNullKey;
    private readonly TValue nullValue;

    public NullableKeyDictionary(IReadOnlyDictionary&lt;TKey, TValue&gt; source)
    {
        if (this.source == null)
        {
            throw new ArgumentNullException(nameof(source));
        }

        this.source = source;
        this.hasNullKey = false;
        this.nullValue = default(TValue);
    }

    public NullableKeyDictionary(IReadOnlyDictionary&lt;TKey, TValue&gt; source, TValue nullValue)
    {
        if (this.source == null)
        {
            throw new ArgumentNullException(nameof(source));
        }

        this.source = source;
        this.hasNullKey = true;
        this.nullValue = nullValue;
    }

    public IEnumerator&lt;KeyValuePair&lt;TKey, TValue&gt;&gt; GetEnumerator()
    {
        foreach (var it in this.source)
        {
            yield return it;
        }

        if (this.hasNullKey)
        {
            yield return new KeyValuePair&lt;TKey, TValue&gt;(default(TKey), nullValue);
        }
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public int Count =&gt; this.hasNullKey ? this.source.Count + 1 : this.source.Count;

    public bool ContainsKey(TKey key)
    {
        if (this.hasNullKey &amp;&amp; key == null)
        {
            return true;
        }
        else
        {
            return this.source.ContainsKey(key);
        }
    }

    public bool TryGetValue(TKey key, out TValue value)
    {
        if (this.hasNullKey &amp;&amp; key == null)
        {
            value = nullValue;
            return true;
        }
        else
        {
            return this.TryGetValue(key, out value);
        }
    }

    public TValue this[TKey key] =&gt; key == null &amp;&amp; hasNullKey
        ? this.nullValue
        : this.source[key];

    public IEnumerable&lt;TKey&gt; Keys
    {
        get
        {
            foreach (var it in this.source)
            {
                yield return it.Key;
            }

            if (this.hasNullKey)
            {
                yield return default(TKey);
            }
        }
    }

    public IEnumerable&lt;TValue&gt; Values
    {
        get
        {
            foreach (var it in this.source)
            {
                yield return it.Value;
            }

            if (this.hasNullKey)
            {
                yield return nullValue;
            }
        }
    }
}

