More than 3 years have passed since last update.AzureのサーバーレスAzure FunctionsとNoSQLストレージCosmos DBでAPIサーバを構築しました。作ったもの → https://github.com/momotaro98/yarana-api本記事ではその実装内容を記載します。パブリッククラウドとしてAzureを採用している(しようとしている)人
APIサーバをサーバレスで構築しようとしている人APIを作っていきます。Azure Functionsの実装では今回はC#のcsxスクリプトを採用しています。本記事ではAzure Portal上でのAzure Functions構築方法は記載しません。以前に書いたAzure FunctionsでTable StorageをCRUDするまで手順という記事に記述しているので是非見てみてください。以下のデータモデルを本記事では例として扱います。ID、ユーザーID、タイトル名の3項目あります。また、以下の2つのエンドポイントを作ります。上記のデータモデルのJSONがPOSTでやってきた場合の処理です。Cosmos DBへデータを格納します。コードはたった4行で済みます。
Cosmos DBのコレクションと紐付いたIAsyncCollector&lt;dynamic&gt;型を利用することでPOSTでやって来るJSONをそのまま.AddAsyncメソッドでCosmos DBへ格納することができます。ドキュメントが追加されています。上記で作成したモデルを含むデータを取得します。ここではユーザーIDをURLのuserIdクエリで指定し、そのユーザーIDを持つドキュメントを返す機能を実装します。Cosmos DBからデータ取得する場合はコレクションと紐付いたIEnumerable&lt;dynamic&gt;型を利用することでdocuments.Where(doc =&gt; doc.userId == userId)のようにC#の文法でクエリできます。上記FunctionのURLへGETすると以下のようにデータが取得されます。_self, _etag, _attachments, _tsは、Cosmos DBが管理するメタデータです。上記のコードではこれらが含まれてしまいます。
これらを含めないようにするには、返したい要素のみを持つエンティティ(クラス)を定義し、そのエンティティのJSONを返すような実装にする必要があります。Azure FunctionsではAPI Definitionという機能が提供されており、Swagger規格でAPIドキュメントを管理できます。以下スクショSwagger UIが表示されます。サーバーレス技術はシンプルな機能を持つAPIを構築する場合、開発&amp;運用のコストを抑える意味で力を発揮します。
また、NoSQLストレージを利用すればJSONをそのまま入れ込み、取得できるコードを書ける環境が整っているので実装が楽ちんです。


