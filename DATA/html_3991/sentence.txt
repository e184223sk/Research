More than 1 year has passed since last update.算術演算, 代入演算, 関係演算と追ってきた. 論理演算, ビット演算, その他と進んで次回から制御構文にいきたいという物たち. 集合論の本で一番最初の章に出てくる論理演算.論理演算の特徴は, 左オペランドの評価だけで結果が分かる場合, 右オペランドは評価されない上のケースでは本来, strがnullだった場合でメソッドを呼ぶとエラーが出るけれど, その場合は左辺のみの評価でショートカットが発生するので問題なく動作する.正直ビット演算子あまりよくわかってないのでちゃんと勉強する.
ビット演算子は大きく分けて, ビットの論理演算子とシフト演算子の二種に分けられるのだとか.二進数に直した数字を桁ごとに論理演算していくという物だった.左シフト&lt;&lt;, 右シフト共に新しい桁を左/右に付け加えるものだった右シフトも同じだけれど, 右シフトで加えたビットの値が問題.
数値ビットの最上位は符号を表すため, 最上位の値を残すか残さないか(符号を維持するか)の話になる.残すのを算術シフト, 残さないのを論理シフトといい, 符号有の型か符号無の型によってどちらのシフトが選択されるかが変わる値型のサイズをバイト単位で取得する.基本的にstaticにサイズが決まっている数値型のみしかこのメソッドは使えないが, unsafeモードを利用することで, 三法型を含まない構造体とポインターの賤母求められるとか.unsafe使うには, unsafeブロックでくくったうえで, プロジェクトの設定をunsafeにする必要があるらしい.変数名のようなラベルとして使われている識別子を文字列として取得する例外処理で使えるね, みたいな話が書いてあった.優先順位があるよ.
kwsk要するに, 右から評価されるかと左から評価されるかによって, 結合測()の利用は変わるよという話思ったより残って多分が短かった.
次回制御構文


