Dockerの勉強として、以前ASP.NET Coreで自作したアプリをDocker上で動かしてみました。続いてDockerfileを作成します。
Visual Studioを利用している方はプロジェクトを右クリック &gt; 追加 &gt; Dockerサポート &gt; Linuxを選択するとテンプレートのDockerfileができますので利用すると良いかもしれません。僕の場合はプロジェクトを分けているため、一部ファイルの内容を変更しています。※Dockerfileの一つ上の階層からビルドしました。以下のようにイメージが作られていることを確認します。対象のイメージからコンテナを作成します。
ポートは8080としていますが、こちらは任意の値でいいかと思います。http://localhost:8080 へアクセスすると無事に以下のようにアプリが正しく立ち上がることが確認できました！
今回はDockerの勉強として以前作成したアプリをコンテナ化してみました！
Linux上でも動くことを簡単に確認できるのでDockerは便利ですね。アプリのソースコードは以下にあるのでもし参考になりそうでしたらどうぞ～
https://github.com/Oooooomin2/TestMakerもしDockerfileが無事にビルドできたけど正常にアプリが立ち上がらない場合は以下の処理が抜けている可能性があります。
https://docs.microsoft.com/ja-jp/aspnet/core/fundamentals/host/web-host?view=aspnetcore-5.0#server-urls2021/07/26追記 
こちらの「おまけ」についてですが、別途ご教示をいただいた「おまけ2」の方より良い方法ですのでそちらをご確認くださいませ～！
今回はProgram.csに以下のコードを追記しています。「おまけ」として書いた上記の内容について、お客様先（現在常駐している会社）の上司にもっと良い方法あるよ～！と2点教えてもらったので忘れないように追記します！上記の「おまけ」ではソースコード上にサーバのURLを記載していましたが、DockerfileにASPNETCore_URLを環境変数として渡す内容を追記することでアクセスが可能になります。上記で記載していたDockerfileの下から2行目に「ENV ASPNETCORE_URLS http://*:5000」を追記します。これでDockerfileをビルドして元の手順通りに進めてもブラウザからアクセスできるようになるかと思います。環境変数ASPNETCORE_ENVIRONMENTはデフォルトでは"Production"となります。
https://docs.microsoft.com/en-us/aspnet/core/fundamentals/environments?view=aspnetcore-5.0#environmentsその際はポート80でバインドされるため、docker runの際に-pで5000:80を指定する。※この場合は上記「その1：ASPNETCORE_URLSを環境変数として渡す」で記載したASPNETCORE_URLSはDockerfileに記載していません。どちらもソースコードをいじらずに実現できるのでこちらの方が便利です！！
色々とご教示いただけるので本当に感謝です!(^^)!


