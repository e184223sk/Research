※本記事は下記のエントリから始まる連載記事となります。
.NET5.0/C#9.0でオートシェイプ風図形描画ライブラリを作ろう！(Chapter0)今回は、マウス操作で図形を動かす処理を追加してみます。Capter0からCapter2までの内容は下記ブランチにて実装されています。実装の詳細はこちらをご確認ください。
https://github.com/pierre3/CoreShape/tree/blog/chapter0-2ドラッグ操作を行うには、次の２つの処理が必要になります。まずはIShapeにこの2つの処理を追加しましょう。
基本的な動作は下記の通り。図形内部の判定と輪郭の判定を個別に行い、塗りつぶしなしの場合は輪郭周辺にマウスがある場合のみTrueを返すようにします。マウスポインタのX,Y座標の差分だけBoundsのLocationを移動します。ついでに楕円の当たり判定も実装してみます。
楕円の方程式 x^2/a^2 + y^2/b^2 = 1 から楕円の内部判定を行います。
左辺が1以下なら楕円の内部、1より大きければ楕円の外となります。
（※ 楕円の中心が原点(0,0)にあり、aは原点からX軸と楕円の交点までの距離、bは原点からY軸と楕円の交点までの距離とした場合）下記では、方程式の左辺にあたる部分をローカル関数で計算するようにしています。
また、輪郭の判定では一回り小さい楕円と一回り大きい楕円の間を輪郭とみなすようにしています。DragメソッドはRectangleShapeでの実装がそのまま利用できるのでここでの実装は不要です。続いてSampleWPFプロジェクトの処理を変更しドラッグ操作ができるようにします。処理の詳細は下記ソースコードとそのコメントを参照ください。楕円は輪郭のみ、矩形（四角形）は輪郭＋内部の塗りつぶしで表示しています。うん、いい感じに動いています！ここまで当たり判定の処理は自力で実装してきましたが、もう少し複雑な図形を扱ったり、図形の回転が入ったりした場合自力で実装するのはちょっと厳しいですね。実は今回扱っているSkiaSharpのようなグラフィックエンジンには、ある点が図形領域内に入っているかを判定する仕組みが備わっています。
その仕組みを利用するためのオブジェクトがPathとRegionです。正確に説明するのは難しいのですが、PathとRegionはおおよそ以下のようなものだと理解しています（間違っていたらコメントください！）下記はPathとRegionを利用した楕円のHitTestの実装例です。SKPaintのGetFillPathを実施することで塗りつぶしの有無や輪郭の太さなどの設定をPathに反映させます。ではこの処理をOvalShapeのHitTestメソッドに実装してみたいと思います。
しかし、この処理はSkiaSharpのSKPath、SKRegionに依存してしまっているため、CoreShape側のクラスに直接実装することはできません。そこで今回はStrategyパターンを用いてHitTestの処理方式を切り替え可能としてみましょう。以下のようなインターフェースを定義します。ポインタ座標とIShapeのオブジェクトを引数に取る HitTestメソッドを持ちます。
引数のshapeの型はIShapeインターフェースそのものではなく、ジェネリクスで具体的な型を指定するようにしています。ここからは、RectangleShapeの処理を例に実装を進めていきたいと思います
まずは、既存のRectangleShapeで実装したHitTestの処理をRectangleHitTestStrategyとして切り出します。次に RectangleShapeにHitTestStrategyプロパティを実装します。OvalShapeについても同様に実装を変更しておきます。それでは、先ほど「Regionを利用した楕円の当たり判定の処理」を実装したHitTestStrategyを実装します。
CoreShape.Extensions.SkiaSharp プロジェクトにSKRegionOvalHitTestStrategyクラスを作成します。
（輪郭の幅が細いと操作しずらいので、4ピクセル以上となるように調整する処理が追加されています。）これで必要なものは一通りそろいました。
あとはOvalShape生成時にコンストラクタにSKRegionOvalHitTestStrategyのインスタンスを渡してあげるだけです。以上、OvalShapeの当たり判定差し替え部分をクラス図にすると、下記のようになります。
既定では、OvalHitTestStragegyが設定されていますが、IHitTestStrategy&lt;RectangleShape&gt;インターフェースを実装したクラスのインスタンスをコンストラクタに渡すことでHitTestの処理を別のものに差し替えることができます。次回はです。


