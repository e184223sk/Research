More than 1 year has passed since last update.PDFium等の外部ライブラリを使用しなくても、Windows 8以降にはPDFファイルを画像としてレンダリングできるAPIがWinRTとしてOSに在ります。
UWP(Windowsストア)アプリでは特に苦もなく使用できるはずです。WinForms(またはWPF)からは比較的最近利用できるようになりました。
この記事ではWinFormsのPictureBox(またはWPFのImage)に表示するサンプルコードを示します。docs.microsoft.comを参考にして、NuGetまたは手動でアセンブリへの参照を加えます。要点を引用します。[NuGet パッケージ マネージャー] ウィンドウで、 [参照] タブを選択して、Microsoft.Windows.SDK.Contracts を検索します。Microsoft.Windows.SDK.Contracts パッケージが見つかったら、 [NuGet パッケージ マネージャー] ウィンドウの右側のペインで、ターゲットにする Windows 10 のバージョンに基づいて、インストールするパッケージのバージョンを選択します。docs.microsoft.comを見れば大体わかるかと思います。
ざっくりと下記のようになります。ただし、ストリームはSystem.IO.Streamではありません。
Windows.Storage.Streams.IRandomAccessStreamを使用する必要があります。
直接ファイルから構築するならFileRandomAccessStreamを使用すればいいですが、実際のWinFormsアプリに組み込むならIStreamではないと使い勝手が悪いです。
WindowsRuntimeStreamExtensions.AsRandomAccessStream拡張メソッドでIRandomAccessStreamを取得できます。必要に応じてPdfPageRenderOptionsで多少カスタマイズできます。
画像をpngではなくbmpなどにする場合は、BitmapEncoderIdにWICのEncoder Idを指定すれば良さそうです。フォームを表示した後、1秒毎にページを表示してきます。適当なフォームに、pictureBox1が張り付いている前提です。C# 8.0であればusing文を簡略化できるかと思います。WinFormsの例のの代わりに、としてください。
他の部分はWPFに合わせて適宜変えてください。
OnLoadが嫌なら、usingのタイミングを調整してください。


