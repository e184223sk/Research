
/// &lt;summary&gt;
/// パディングと呼ばれる、空埋め処理を行います。
/// &lt;/summary&gt;
/// &lt;param name="plain_text"&gt;パディングする2進数配列&lt;/param&gt;
/// &lt;returns&gt;パディングされた2進数配列&lt;/returns&gt;
private uint[] Padding(string plain_text)
{
    var plain_bits = ToUInt32Array(plain_text);
    var length = plain_bits.Length;
    var k = CalculateK(plain_bits);

    //処理する値を保持するバッファ
    uint[] buf = { };

    buf = Extend&lt;uint&gt;(plain_bits, 1);

    for(int r = 0; r &lt; k; r++)
    {
        SelfAppend(ref buf, 0u);
    }

    var bytStr = Convert.ToString(length, 2);

    //64桁右寄せゼロ埋め
    //0000000000000000000000000000000000000000000000000000000000011000
    bytStr = bytStr.ToString().PadLeft(64, '0');

    //↑で得た64桁の数列を配列に変換
    //(64)[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0 ]
    uint[] bytStr_array = { };
    for(int x = 0; x &lt;= 63; x++)
    {
        var num_str = bytStr.Substring(x, 1);
        var num = uint.Parse(num_str);
        SelfAppend(ref bytStr_array, num);
    }

    //位取り バッファにAppend
    foreach(var b in bytStr_array)
    {
        SelfAppend(ref buf, b);
    }

#if DEBUG
    //ブロックサイズはパディング後512である
    //Assert(buf.Length != 512)
    PrintArray(buf); //512
#endif

    return buf;
}

