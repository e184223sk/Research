
/// &lt;summary&gt;
/// ブロックを処理します。
/// &lt;/summary&gt;
/// &lt;param name="block"&gt;64バイトの2進数ブロック配列&lt;/param&gt;
/// &lt;returns&gt;処理された2進数ブロック配列&lt;/returns&gt;
private uint[] ExpandBlock(uint[] block)
{
    uint[] result = { };

    for(int x = 0; x &lt; 16; x++)
    {
        //例
        //バイナリ -&gt; ヘックスデシマル -&gt; uint OR バイナリ -&gt; demical
        //↓チャンクバイナリ 01100001011000100110001110000000 は ヘックスデミカル 0x61626380 である.
        //CHUNK: [ 32 ] [0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]
        //= 0x61626380 したがって uint は 1633837952

        //コピー先のチャンク配列
        uint[] chunk_array = new uint[32];
        //ブロックの x*32 から 32byte先までをコピー
        Array.Copy(block, x*32, chunk_array, 0, 32);
        //バイナリに変換
        var chunk_binary_str = ToBinary(chunk_array);

        var chunk_decimal = Convert.ToUInt32(chunk_binary_str, 2);

        SelfAppend(ref result, chunk_decimal);
    }

    for(int y = 16; y &lt; 64; y++)
    {
        var T1 = Sub0(result[y - 15]) + result[y - 16];
        var T2 = T1 + result[y - 7];
        var T3 = T2 + Sub1(result[y - 2]);

        SelfAppend(ref result, T3);
    }

    return result;
}

