More than 1 year has passed since last update.高校生の僕がSHA256暗号化アルゴリズムを外部ライブラリやランタイムに一切頼らず、独自で実装してみました。
当記事は、マイクロソフト様にケンカを売る記事ではございません。この記事をご覧になっている方々は、様々な分野でお仕事をされている方がいらっしゃると思います。
そういった方々含め、プログラミングを実際にされていない方も「SHA256」という単語は一度でも目に入れた方も多くいらっしゃるのではないでしょうか。SHA256とは、アメリカ国家安全保障局によって設計され、
2001年にアメリカ国立標準技術研究所によって連邦情報処理標準とされた暗号化アルゴリズムのひとつです。
SHA256の他にも、「SHA-1」や「SHA-512」といった多くの暗号化アルゴリズムがあります。そのひとつである「SHA-1」は、2017年にGoogleによって攻撃手段が公開され、
それまでSHA-1を使用していたシステムは半強制的に、より安全な暗号化アルゴリズムへの移行を余儀なくされた。
という事件がありましたね。該当記事: Googleがハッシュ関数「SHA-1」を破ることに成功そういった背景もある暗号化アルゴリズム達ですが、今回はなかでも多くの場面で使われている
「SHA-256」をプログラミング言語 C# を使って独自で実装してみたいと思います。ビットコインを支えているブロックチェーンでも、SHA-256は活躍しています。
ブロックチェーンに関しましては、下記記事をご参照頂くとわかりやすいと思います。参考記事: 【Python】10分でイキリ高校生がブロックチェーンを初心者に解説してやる！！！ここまでで、様々な暗号化アルゴリズムがあることがわかりました。
SHA256の特徴はここで、”困難”と言ったのは、総当り攻撃による突破が可能であるからです。
論理的には、2^80（2の80乗）という回数総当たりを仕掛ければどれかが当たる、ということです。
現在では、遥かに少ない2^63（2の63乗）という回数で突破できる手法が見つかっているそうです。簡単に言うと、異なる2つの平文から同一のハッシュ値が得られる脆弱性に強いということです。
詳しく知りたい方は、下記の記事を参照下さい。参考記事: 巷で話題のGoogleのSHA-1衝突やってみたここからは、実際にプログラムを書いてC#で暗号化アルゴリズムを再現してみたいと思います。かなり大雑把ではありますが、大まかな処理フローは以下の通りです。aであれば16進数61 2進数 1100001 に変換されます。パディング（Padding）と呼ばれる空埋め処理を行います。
1ブロックのサイズは64byteですので、それ以下であれば空の部分を埋める必要があります。
但し、ただ埋めるだけではダメです。
例として以下のようなブロックがあったとします。
14byte分足りません。これを埋めます。これを、ただ埋めると何が起こるかは安易に予想できます。
Xの部分を0で埋めたとすると、異なるブロックであっても全く同じメッセージブロックが生まれてしまいます。そこで、もとのブロックのブロック長を末端に記録します。
Bの部分がブロック長を記録した部分です。ブロック長が64byte丁度だったり、万が一記録する余裕が無かっただった場合は次のブロックで記録します。パディングが済んだ512byteのブロックを64byte長のメッセージブロックへと分割します。初回ラウンドでは、初期ベクトル（IV）を使用します。行う処理は簡単に以下の通りです。ここからは論理代数の分野です。
正直なところ、僕もふわっとしか理解できていません。
一通り調べてはみましたが、情報そのものが正しいものであるか区別する手段がありませんでしたので、
あくまで参考として記載します。
詳しい方がいらっしゃいましたら、コメント欄にて解説をお願い致します。参考記事: 論理代数を学ぼう
参考記事: 論理代数と論理関数　湊 真一ここからは、実際のソースコードを紹介します。追記(2)より、一度byte[32]に変換しないと0が抜け落ちる模様。Convert.ToString(value, 16) を使う方法もあります。やっていて、色々と不便に感じた部分や簡略化したい部分を関数化したものです。C#では型付けが厳しい為、定義後に配列の大きさを柔軟に変更することができません。
そこで、既存の配列を拡張する関数を作ってみました。使い方:C#では、Console.WriteLine()で大体のことはできますが、
配列をそのまま出力しようとするとSystem.Int32と、型がそのまま出力されてしまいます。
そのままではデバッグするのもストレスなので、いい感じに出力してくれる関数を作ってみました。例えば、こんな数字から3のインデックス部分を取り出したいとします。
パッと思いつくのは、stringにしてSubString()する方法でした。環境は .NET Framework 4.7.2 です。
WinFormで適当にそれっぽいものを作って実際に実行してみます。使用例:実行結果:出てきたハッシュをSHA256データベースで検索してみます。正しいようです。今回は、アルゴリズムに集点をおいて、可読性を優先してコードを書いたのもあり
速度については一切考慮しておりませんが、一応ランタイムのものと比較してみます。比較にあたって、下記記事を参考にソースコードを拝借いたしました。
ありがとうございました。参考記事: C#でStopwatchを使った時間計測を1行でできるようにする今回は5回ほど計測してみました。
それぞれ1000回の試行にかかった平均時間(ミリ秒)です。
ランタイムのものと比較すると、約800倍近く時間がかかっていますね。
手も足も出ませんでした。正直ランタイムといい勝負するのではないかと期待していた 打ち砕かれました。一番苦戦したのは理論代数の分野の理解です。
一向に理解できないせいで計算があわず、2時間格闘しました。。。
結局ふわっとしか理解できていません。
詳しい方がいらっしゃれば、些細な情報でもコメント欄にて解説頂けるとありがたいです。フルソースコードは僕のGithubリポジトリにあります。
コピペで動きます。
当記事内で間違いや誤字脱字等ありましたら、お手数ですがコメント欄にてご指摘いただけますと幸いです。最後まで読んでいただき、ありがとうございました。を確認しました。本題です。
なぜこのプログラムで一定以上の文字数を超えると算出されるハッシュ値が異なるか？
結論から申し上げますと、ブロック長の記録の例外処理を完全に忘れていました。
「何らかの理由で記録するスペースがなかった場合、次のブロックで記録する」
という処理です。
ただのヒューマンエラーでした。最初、この謎現象の原因を掴むべくデバッグしていましたら右が正しいものです。
ブロック末端＆チャンクが異なっています。
デバッグを続けていくと、この現象は
一定の文字数以上(ブロック数2以上)で発生することがわかりました。
したがって、ブロック分割部分で何かしらの問題が発生していると予想できます。そこで、実際に中身を見てました。予想的中。
1ブロック目と2ブロック目のブロックがそれぞれ同一の値となっていることが確認できます。
問題の分割関数を覗いてみます。問題箇所を特定できました。
人為的ミスは、一歩引いてソースを見てみないと中々発見できませんね。。
2進数のプレーンテキスト配列の0から512までを毎回コピーしていたことが原因でした。
ブロックが複数ある場合にのみ発生する不具合だったので、発見に時間がかかりました。
修正後のソースコードは以下の通りです。以上、折角の機会なので不具合に対する適切な対処法と僕なりのデバッグ手法を紹介してみました。既知の不具合として、コメント欄にてご指摘いただきました。
どうやら、プレーンテキストの文字数が5文字であり、特定の文字が含まれていると発生する模様。▼2文字分、0が抜け落ちてます。
だけど、abcdhは大丈夫。abcdgもダメ。生成されるプレーンテキストに0が含まれていると発生するみたいです。
計算に間違いがあれば生成されるハッシュ全体が変わるはずですから、
この特定の文字が局所的に変化する現象はハッシュを16進数に変換する課程で問題が発生していると思われます。
5文字以上である時は特に問題は無い様子？
↑ははっきりと原因がわからない。とりあえず、デバッグプリントしてみます。4桁区切りでの規則性が見られます。
191, 22, 120, 186 ▶ 186, 120, 22, 191
uintからbyte[4]の変換の際に配列をリバースする必要がある様です。そこで、こんな感じにリバースしてみました。OKっぽい。
肝心のabcdeの中身を見てみます。。。。おろ？問題ないっぽいです。
これを16進数文字列に変換してみます。読みにくいコードでごめんなさい。
やっていることは、
uint▶byte▶Reverse()▶Concat()▶byte▶string(64)
こんな感じです。無事解決しました！やはり、予想通りエンコーディングの問題でした。
具体的な原因は謎ですが、
下記のコードでも不具合が発生することを考えると、フレームワークの不具合なのかな？と思ったり。
とにかく、byteを噛ませないとダメみたいですね。


