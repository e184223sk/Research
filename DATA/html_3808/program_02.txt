
private static readonly JwtHelper s_JwtHelper = new JwtHelper();

/// &lt;summary&gt;
/// 
/// &lt;/summary&gt;
/// &lt;param name="request"&gt;&lt;/param&gt;
/// &lt;param name="context"&gt;&lt;/param&gt;
/// &lt;returns&gt;&lt;/returns&gt;
public async override Task&lt;LoginResult&gt; Login(LoginArgs request, ServerCallContext context)
{
    await Task.Yield();

    UserInfo userInfo = await GetUserInfoAsync(request).ConfigureAwait(false);

    if (userInfo == null)
    {
        return new LoginResult() { IsSucceed = false };
    }
    else
    {
        // トークンの有効期限を5分後に設定します。
        DateTimeOffset expiration = s_JwtHelper.DateTimeProvider.GetNow().AddMinutes(5);
        return new LoginResult()
        {
            IsSucceed = true,
            AccessToken = CreateToken(userInfo, expiration),
            Expiration = expiration.ToString()
        };
    }
}

private async Task&lt;UserInfo&gt; GetUserInfoAsync(LoginArgs request)
{
    await Task.Yield();
    // IDとパスワードが妥当であり、そのユーザーの情報を取得できたものとします。
    return new UserInfo
    {
        Role = UserRole.User,
        Permissions = UserPermissions.Get | UserPermissions.Modify
    };
}

