More than 1 year has passed since last update.gRPC の API 呼び出しで Json Web Token （以降 JWT）を使った認証を行う簡単な例です。JWT の実装ライブラリとして Jwt.Net (https://github.com/jwt-dotnet/jwt) を利用しています。Wikipedia よりJSON Web Token（ジェイソン・ウェブ・トークン）は、JSONをベースとしたアクセストークン（英語版）のためのオープン標準 (RFC 7519) である。略称はJWT。トークンの中に任意のペイロードを含めることができます。ステートレスな認証制御を実現しやすいトークンです。設定次第ではセキュリティホールを生むため賛否両論がありますが、それは何にでも言えることではないかと思います。【Qiita】JWT について調べた内容をまとめました。
【Qiita】JSON Web Token(JWT)って結局使っていいの？
【POSTD】JOSE（JavaScriptオブジェクトへの署名と暗号化）は、絶対に避けるべき悪い標準規格である
【ブログ】JWT認証、便利やん？
【たれろぐ】JWT 認証のメリットとセキュリティトレードオフの私感特に、次のような点には注意する必要があると思います。アルゴリズムに none が指定された場合有効期限を設定するにはAPI に対する認証や認可を実現する手段として向いているのではないかと思います。ユーザー・パスワードでログインを行う Login と、アクセストークンを用いて認証を行う SampleApi を定義しました。JWT 関連のオブジェクトをまとめて保持するクラスを実装しました。各オブジェクトは Jwt.net から提供されている標準の型をそのまま利用しています。JWT のペイロードに格納するユーザー情報を次のように定義しました。gRPC サービスの Login メソッドの実装です。トークン生成の実装です。トークンのペイロードには次のような JSON が格納されます。認証を行う API では、リクエストヘッダーにトークンを設定するものとします。ServerCallContext のリクエストヘッダーからトークンを取得して検証します。
トークンが有効期限切れなのか不正なのかをクライアントで判別できるようにするため、判定結果を表す値を RpcException の Trailer に格納します。API が呼び出されたとき、トークンの認証を行います。この例ではサービスクラスのメソッド内で認証を行っていますが、実際には Interceptor を使って横断的に認証を行った方がよいと思います。


