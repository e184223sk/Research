internal sealed class JwtHelper
{
    internal JwtHelper()
    {
        DateTimeProvider = new JWT.UtcDateTimeProvider();
        JsonSerializer = new JWT.Serializers.JsonNetSerializer();
        UrlEncoder = new JWT.JwtBase64UrlEncoder();
        Encoder = CreateJwtEncoder();
        Decoder = CreateJwtDecorder();
    }

    internal JWT.IJwtEncoder Encoder { get; }
    internal JWT.IJwtDecoder Decoder { get; }
    internal JWT.IDateTimeProvider DateTimeProvider { get; }
    internal JWT.IJsonSerializer JsonSerializer { get; }
    private JWT.IBase64UrlEncoder UrlEncoder { get; }

    private JWT.IJwtEncoder CreateJwtEncoder()
    {
        JWT.Algorithms.IJwtAlgorithm algorithm = new JWT.Algorithms.HMACSHA256Algorithm();
        return new JWT.JwtEncoder(algorithm, JsonSerializer, UrlEncoder);
    }

    private JWT.IJwtDecoder CreateJwtDecorder()
    {
        JWT.Algorithms.IAlgorithmFactory algorithm = new JWT.Algorithms.HMACSHAAlgorithmFactory();
        JWT.IJwtValidator validator = new JWT.JwtValidator(JsonSerializer, DateTimeProvider);
        return new JWT.JwtDecoder(JsonSerializer, validator, UrlEncoder, algorithm);
    }
}

