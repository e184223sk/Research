
private static readonly JwtHelper s_JwtHelper = new JwtHelper();
// 秘密鍵。当然ですが、実際にはストレージなどから読み込みます。
const string secretKey = "GQDstcKsx0NHjPOuXOYg5MbeJ1XT0uFiwDVvVBrk";

private sealed class AuthHeaderKeys
{
    // リクエストヘッダーにトークンを格納するときのキー
    internal const string AuthorizationToken = "authorization";
    // レスポンスヘッダーにトークン認証結果を格納するときのキー
    internal const string AuthenticateResult = "www-authenticate";
}

// コンテキストに格納されている情報からトークンの検証を行います。
private bool VaridateToken(ServerCallContext context, out UserInfo userInfo, out RpcException exception)
{
    if (!TryGetToken(context, out string token) || string.IsNullOrEmpty(token))
    {
        userInfo = null;
        exception = new RpcException(new Status(StatusCode.Unauthenticated, "Token is not set."));
        return false;
    }

    try
    {
        string[] values = token.Split(".");
        var json = s_JwtHelper.Decoder.Decode(token, secretKey, verify: true);
        var payload = s_JwtHelper.JsonSerializer.Deserialize&lt;Dictionary&lt;string, object&gt;&gt;(json);

        userInfo = s_JwtHelper.JsonSerializer.Deserialize&lt;UserInfo&gt;((string)payload["user"]);
        exception = null;
        return true;
    }
    catch (JWT.TokenExpiredException)
    {
        userInfo = null;
        Metadata trailers = new Metadata();
        trailers.Add(AuthHeaderKeys.AuthenticateResult, "expired");
        exception = new RpcException(new Status(StatusCode.Unauthenticated, "Token has expired."), trailers);
        return false;
    }
    catch (JWT.SignatureVerificationException)
    {
        userInfo = null;
        Metadata trailers = new Metadata();
        trailers.Add(AuthHeaderKeys.AuthenticateResult, "invalid");
        exception = new RpcException(new Status(StatusCode.Unauthenticated, "Token has invalid signature."), trailers);
        return false;
    }
    catch (Exception ex)
    {
        userInfo = null;
        Metadata trailers = new Metadata();
        trailers.Add(AuthHeaderKeys.AuthenticateResult, "invalid");
        exception = new RpcException(new Status(StatusCode.Unauthenticated, "Could not get user information."), trailers);
        return false;
    }
}

private bool TryGetToken(ServerCallContext context, out string token)
{
    foreach (var metadata in context.RequestHeaders)
    {
        if (metadata.Key == AuthHeaderKeys.AuthorizationToken)
        {
            token = metadata.Value;
        }
    }
    token = null;
    return false;
}

