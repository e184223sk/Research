
//弾を発射したら数秒後に2段階分裂する
    IEnumerator Attack15(int NwayCount) {

        //最初の弾(p1として保持)
        float r1 = Random.Range(1, NwayCount + 1);
        float angle1 = -(NwayCount + 1) * 5 / 2 + r1 * 5;
        GameObject p = Instantiate(BossProjectilePrefab_slow2, transform.position, Quaternion.Euler(new Vector3(0.0f, 0.0f, angle1)));
        AudioSource.PlayClipAtPoint(BossShotSE, transform.position);

        yield return new WaitForSeconds(0.2f);

        //最初の弾からの1段階の分裂(分裂した弾をp2として保持)
        float r2 = Random.Range(1, NwayCount + 1);
        float angle2 = -(NwayCount + 1) * 5 / 2 + r2 * 5;
        GameObject p2=Instantiate(BossProjectilePrefab_slow2, p.transform.position, Quaternion.Euler(new Vector3(0.0f, 0.0f, angle2)));
        AudioSource.PlayClipAtPoint(BossShotSE, transform.position);

        yield return new WaitForSeconds(0.5f);

        //1段階で分裂したそれぞれの弾が分裂(p1とp2からそれぞれ分裂)
        float r3 = Random.Range(1, NwayCount + 1);
        float angle3 = -(NwayCount + 1) * 5 / 2 + r3 * 5;
        Instantiate(BossProjectilePrefab_slow2, p.transform.position, Quaternion.Euler(new Vector3(0.0f, 0.0f, angle3)));
        AudioSource.PlayClipAtPoint(BossShotSE, transform.position);

        float r4 = Random.Range(1, NwayCount + 1);
        float angle4 = -(NwayCount + 1) * 5 / 2 + r4 * 5;
        Instantiate(BossProjectilePrefab_slow2, p2.transform.position, Quaternion.Euler(new Vector3(0.0f, 0.0f, angle4)));
        AudioSource.PlayClipAtPoint(BossShotSE, transform.position);

    }

