using System;
using System.Collections.Generic;

class Program
{
    static void Main(string[] args)
    {
        int N = int.Parse(Console.ReadLine());
        List&lt;List&lt;int&gt;&gt; row = new List&lt;List&lt;int&gt;&gt;();
        for (int i = 0; i &lt; N; i++)
        {
            List&lt;int&gt; column = new List&lt;int&gt;(N);
            string[] input = Console.ReadLine().Split(' ');
            for (int j = 0; j &lt; N; j++)
            {
                column.Add(int.Parse(input[j]));
            }
            row.Add(column);
        }

        //-魔法陣を修復する。
        List&lt;List&lt;int&gt;&gt; result = GetTheRepairedMagicSquare(row);

        //-完成した魔法陣を出力する。
        for (int i = 0; i &lt; N; i++)
        {
            for (int j = 0; j &lt; N; j++)
            {
                Console.Write(result[i][j]);
                if (j != N - 1) { Console.Write(" "); }
            }
            Console.WriteLine();
        }
        Console.ReadLine();
    }
    static List&lt;List&lt;int&gt;&gt; GetTheRepairedMagicSquare(List&lt;List&lt;int&gt;&gt; OriginMagicSquare)
    {
        List&lt;List&lt;int&gt;&gt; RepairedMagicSquare = OriginMagicSquare;

        List&lt;int&gt; filledPositionRow = new List&lt;int&gt;(2);
        List&lt;int&gt; filledPositionColumn = new List&lt;int&gt;(2);
        //-魔法陣の中から0の数字がある座標を取得する。
        for (int i = 0; i &lt; OriginMagicSquare.Count; i++)
        {
            for (int j = 0; j &lt; OriginMagicSquare[i].Count; j++)
            {
                if (OriginMagicSquare[i][j] == 0)
                {
                    //--その座標の行、または列、i,jのどちらかで合計が定和[1+2+3+...N^2/N]になるように、0の数字がある座標を書き換える。
                    RepairedMagicSquare[i][j] = GetFilledNumber(RepairedMagicSquare, i, j);
                }
            }
        }

        return RepairedMagicSquare;
    }
    static int GetFilledNumber(List&lt;List&lt;int&gt;&gt; OriginMagicSquare, int filledPositionRow, int filledPositionColumn)
    {
        int filledNumber = 0;

        int N = OriginMagicSquare.Count;//魔方陣の行数(列数)
        int constantSum = (int)(N * (Math.Pow(N, 2) + 1) / 2);//魔方陣の定和

        int columnSum = 0;
        for (int row = 0; row &lt; N; row++)
        {
            columnSum += OriginMagicSquare[row][filledPositionColumn];
        }
        if (constantSum - columnSum &lt;= N * N)
        {
            for (int i = 0; i &lt; N; i++)
            {
                if (OriginMagicSquare[i].Contains(constantSum - columnSum))
                {
                    int rowSum = GetSumOfRowNumber(OriginMagicSquare, filledPositionRow);
                    filledNumber = constantSum - rowSum;
                    break;
                }
                else { filledNumber = constantSum - columnSum; }
            }
        }
        else
        {
            int rowSum = GetSumOfRowNumber(OriginMagicSquare, filledPositionRow);
            filledNumber = constantSum - rowSum;
        }

        return filledNumber;
    }
    static int GetSumOfRowNumber(List&lt;List&lt;int&gt;&gt; OriginMagicSquare ,int row)//引数2に指定した行riの合計値(ri_c0+ri_c1+ri_c2...ri_cN)を返すメソッド
    {
        int N = OriginMagicSquare.Count;
        int rowSum = 0;

        for(int column = 0;column &lt; N; column++)
        {
            rowSum += OriginMagicSquare[row][column];
        }

        return rowSum;
    }
}

