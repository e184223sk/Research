
//c:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe /target:winexe Jpg2Pdf_v03.cs
using System.IO;
using System.Text;
using System.Drawing;
using System.Collections.Generic;
using System.Drawing.Imaging;

public class Jpg2Pdf_v03
{

 public static void Main(string[] args)
 {

    string path1;//file name
    path1 = @".\temp.jpg";
    if(args.Length&gt;0){
        path1 = @".\" + args[0];
    }else{
        System.Environment.Exit(0);
    }

    //■
    List&lt;string&gt; file_list = new List&lt;string&gt;();
    using (System.IO.StreamReader file = new System.IO.StreamReader(@".\file_list.txt", System.Text.Encoding.UTF8))
        {
            string line = "";
            while ((line = file.ReadLine()) != null)
            {
                file_list.Add(line);
            }

    //■

    string path2 = path1 + @".pdf";

    /// ★★
    using (FileStream fs2 = File.OpenWrite(path2))
    {


    Bitmap image1;
    FileInfo fi1;

    List&lt;long&gt; list = new List&lt;long&gt;();

    adTx(fs2, "%PDF-1.3");
    byte[] vals = { 0x25, 0xe2, 0xe3, 0xcf, 0xd3, 0x0d, 0x0a };
    fs2.Write(vals, 0, vals.Length);


    int pg = 0;
    int objnm =0;
    int obj_rt =0;

    ////〓Pg
    pg = 0;
    foreach (var item in file_list){

        path1= item;

    image1 = new Bitmap(path1, true);
    fi1 = new FileInfo(path1);

    /// ★
    using (FileStream fs1 = File.OpenRead(path1))
    {

    objnm = (pg * 6) + 2;
    obj_rt = objnm;

    // index 2
    list.Add(fs2.Position);

    adTx(fs2, objnm.ToString() + " 0 obj");
    adTx(fs2, "&lt;&lt;/Type /XObject");
    adTx(fs2, "/Subtype /Image");
    adTx(fs2, "/Filter /DCTDecode");
    adTx(fs2, "/ColorTransform 0");
    adTx(fs2, "/BitsPerComponent 8");

    // Format24bppRgb : Format8bppIndexed
    if (image1.PixelFormat == PixelFormat.Format24bppRgb){
        adTx(fs2, "/ColorSpace /DeviceRGB");
    }else{
        adTx(fs2, "/ColorSpace /DeviceGray");
    }

    adTx(fs2, "/Width " + image1.Width.ToString());
    adTx(fs2, "/Height " + image1.Height.ToString());
    adTx(fs2, "/Length " + fi1.Length.ToString() + "&gt;&gt;");



    adTx(fs2, "stream");
        byte[] b = new byte[1];
        while (fs1.Read(b,0,b.Length) &gt; 0)
        {

            fs2.Write(b, 0, b.Length);
        }
    adTx(fs2, "");
    adTx(fs2, "endstream");
    adTx(fs2, "endobj");

    // index 3
    list.Add(fs2.Position);
    objnm ++;

    adTx(fs2, objnm.ToString() + " 0 obj");
    adTx(fs2, "&lt;&lt;/Type /Page");
    adTx(fs2, "/Parent 1 0 R");
    adTx(fs2, "/MediaBox [0.0 0.0 595.2 841.68]");
    adTx(fs2, "/Contents " + (obj_rt+2) + " 0 R");
    adTx(fs2, "/Resources " + (obj_rt+4) + " 0 R");
    adTx(fs2, "/Annots " + (obj_rt+5) + " 0 R");
    adTx(fs2, "&gt;&gt;");
    adTx(fs2, "endobj");

    // index 4
    list.Add(fs2.Position);
    objnm ++;

    adTx(fs2, objnm.ToString() + " 0 obj");
    adTx(fs2, "&lt;&lt;/Length " + (obj_rt+3) + " 0 R&gt;&gt;");
    adTx(fs2, "stream");
    adTx(fs2, "q");
    adTx(fs2, "1 0 0 1 0 0 cm");
    adTx(fs2, "1 0 0 1 0 0 cm");
    adTx(fs2, "595.2 0 0 841.68 0 0 cm");
    adTx(fs2, "/I0_0 Do");
    adTx(fs2, "Q");
    adTx(fs2, "endstream");
    adTx(fs2, "endobj");

    // index 5
    list.Add(fs2.Position);
    objnm ++;

    adTx(fs2, objnm.ToString() + " 0 obj");
    adTx(fs2, "67");
    adTx(fs2, "endobj");

    // index 6
    list.Add(fs2.Position);
    objnm ++;

    adTx(fs2, objnm.ToString() + " 0 obj");
    adTx(fs2, "&lt;&lt;/ProcSet [/PDF /Text /ImageB /ImageC /ImageI]");
    adTx(fs2, "/XObject &lt;&lt;");
    adTx(fs2, "/I0_0 " + (obj_rt) + " 0 R");
    adTx(fs2, "&gt;&gt;");
    adTx(fs2, "&gt;&gt;");
    adTx(fs2, "endobj");

    // index 7
    list.Add(fs2.Position);
    objnm ++;

    adTx(fs2, objnm.ToString() + " 0 obj");
    adTx(fs2, "[]");
    adTx(fs2, "endobj");


    } /// ★

        pg ++;
    }
    ////〓Pg

    // index 8
    list.Add(fs2.Position);
    objnm ++;

    adTx(fs2, objnm.ToString() + " 0 obj");
    adTx(fs2, "&lt;&lt;/Type /Catalog");
    adTx(fs2, "/Pages 1 0 R");
    adTx(fs2, "&gt;&gt;");
    adTx(fs2, "endobj");

    // index 1
    list.Add(fs2.Position);

    adTx(fs2, "1 0 obj");
    adTx(fs2, "&lt;&lt;/Type /Pages");
    //--------------
    string oj ="[";
    for(int lp = 0;lp&lt;=(file_list.Count-1);lp++){/// ▲Pg数
        oj = oj + ((lp * 6)+3).ToString() + @" 0 R ";
    }
    oj = oj + "]";
    adTx(fs2, "/Kids " + oj);

    adTx(fs2, "/Count " + file_list.Count.ToString());  /// ▲Pg数
    //--------------
    adTx(fs2, "&gt;&gt;");
    adTx(fs2, "endobj");

    // index xref
    list.Add(fs2.Position);
    objnm ++;

    adTx(fs2, "xref");
    adTx(fs2, "0 " + objnm.ToString()); //15
    adTx(fs2, "0000000000 00000 f");

    string s;
    s = "0000000000" + list[(objnm-1)];
    s = s.Substring(s.Length - 10, 10);
    adTx(fs2, s + " 00000 n");


    for (int i = 0; i &lt; (objnm-1); i++)
    {
        s = "0000000000" + list[i];
        s = s.Substring(s.Length - 10, 10);
        adTx(fs2, s + " 00000 n");
    }

    adTx(fs2, "trailer &lt;&lt;/Size " + objnm.ToString() + " /Root " + (objnm-1).ToString() + " 0 R&gt;&gt;");

    adTx(fs2, "startxref");
    adTx(fs2, list[(objnm-1)].ToString());

    adTx(fs2, "%%EOF");


    } /// ★★


}}

    private static void adTx(FileStream fs, string value)
    {
        byte[] info = new UTF8Encoding(true).GetBytes(value);
        fs.Write(info, 0, info.Length);

        byte[] vals = { 0x0d}; // , 0x0a
        fs.Write(vals, 0, vals.Length);
    }


}


