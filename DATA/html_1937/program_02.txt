
// ベースクラスのdisposeパターン.
public class MyBaseClass : IDisposable
{
    // managed resource this class uses.
    private Stream _stream;
    // Track whether Dispose has been called.
    private bool _disposed = false;

    public void Dispose()
    {
        Dispose(true);
        // GC.SuppressFinalize(this);
        // ファイナライザを持たないthisに対して SuppressFinalize(this) は no effect なので、呼び出しは無意味である.
    }

    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                // TODO: Dispose managed resources here.
                _stream.Dispose();
            }

            // Note disposing has been done.
            _disposed = true;
        }
    }

    // アンマネージドリソースを持たないので、ファイナライザ ~MyBaseClass() は不要である.
}

// サブクラスのdisposeパターン.
// public void Dispose() を上書きせず、void Dispose(bool disposing) をオーバライドする.
public class MySubClass : MyBaseClass
{
    // managed resource this class uses.
    private Stream _stream2;
    // Track whether Dispose has been called.
    private bool _disposed = false;

    protected override void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                // TODO: Dispose managed resources here.
                _stream2.Dispose();
            }

            // Note disposing has been done.
            _disposed = true;

            // Call the base class implementation.
            base.Dispose(disposing);
        }
    }

    // アンマネージドリソースを持たないので、ファイナライザ ~MySubClass() は不要である.
}


