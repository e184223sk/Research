More than 1 year has passed since last update.F#の型プロバイダが優秀なので, データIO部分をF#でやって, C#と連携しよう！的な記事です.
今回は input 部分の紹介となります.注) このエントリではサンプルがいくつか出てきますが, ぜひご自身でVisualStudioなどを起ち上げて, インテリセンスなどの動作を見ていただければと思います. ちょっとした感動を得られると思います.F#の機能のひとつで, データソースから自動で型を生成することができる機能です.
簡易的な説明はこちらのページを参考にしてください.型プロバイダを利用することで, DBなどとのインピーダンスミスマッチ問題などを比較的容易に解決することができます.
O/Rインピーダンスミスマッチに関しては, 岩永先生の解説が非常にわかりやすいため, ぜひ一読してみてください.まずは, JSONデータの構成を記したJSONファイルを準備します.
今回は以下のようなデータ構成としました.「string型のname」と「int型のage」があるだけの非常にシンプルなものです.
それをプロジェクトファイルを同じ階層に保存しておいてください. 以下のような構造になっていればOKだと思います.
使い方はとっても簡単です. 以下のサンプルにコメントを付けましたので, 読んでいただけると雰囲気がつかめると思います.これの何がうれしいかというと, 「a.Name」や「a.Age」と記述しているところでインテリセンスが効くところです.
しかも, 型情報までしっかりあります！！こんな感じ(↓)でプロパティの候補が現れます.
クラスや構造体を作成しなくても, 自動で作ってくれるなんて素敵ですね.型プロバイダはいろいろなデータ構造に対応しています. もちろんXMLにだって対応済みです.
JSONと同じようにファイルからサンプルを読み込んでもいいのですが, それだと面白くないので, Web APIからサンプルデータを取得してみるサンプルを作成してみました.今回はログインやAPIキーの取得をしなくても利用できる, 「ニコニコAPI」を使いました.
サンプルのXMLデータは, @hiki_neet_pさんにご協力いただきました. この場を借りて感謝申し上げます.もちろんXMLでもインテリセンスはバッチリ効きます.
XMLデータを読み取るコードをdll化してC#から参照してみましょう.
そのときに, Nugetから "FSarp.Data" を導入する必要があるので注意してください. 
F#とC#で型プロバイダを直接やりとりさせると不都合が生じます. どういうことか見ていきましょう.上のサンプルで "x" だったところを "xmlData" としていますが, 根本的にコードは変わっていません.
F#上ではキチンとインテリセンスが効いていますね.
しかし, C#側からだとインテリセンスが効きません...
そんなときは, レコード型を利用して, 適当なデータ構造に変換する必要があります.
これに関しては型を用意する必要があるので, 面倒ですが, C#でデータマッピングするよりも何倍もマシなコード量になります.
コピペ用ThumbInfo型に変換してあげることで, C#側でもインテリセンスを効かせることができます(当たり前と言えば当たり前ですが...).
そして, F#を挟んでいることで実はうれしい副次的な効果が発生しています. F#は基本的にnullを許容していないため, C#側でわざわざnullチェックをしなくてもよいのです！また, 同じことをC#でやろうとすると, とんでもないコード量になりますが, F#ならばそんな事態には陥りません.
ここではサンプルを出しませんが, 暇なときに同様のコードをC#で書いてみるとその違いがよくわかると思います.コードの全体像《F#のdllコード》
《C#のコンソールコード》今回はあまり詳細に説明をしませんでした. これは実際にコードをコピペでもいいので書いていただいた方が, 言葉で説明するよりも型プロバイダの良さをわかっていただけると考えたためです.C#でいうところの "クラス" や "構造体" を用意していないのに, 勝手にインテリセンスが効くのを体験すると, おそらく感動すると思います.
特に, ネットワーク越しにサンプルデータを指定できるところがイケてます. ぜひ, ご自身でサンプルコードを記述してみてください.また, C#よりもF#で書いた方がコードが簡潔になり, 可読性と生産性の高いプログラムを作成できる場合があります.
今回のような場合が, 特に顕著だと思います. これはC#を長年使ってきた私の感覚値となってしまいますが, データI/O関連は割とF#の方がキレイに書けると思います(というか, 書けました).そして, DBとも直接繋げられたりもするので, SQL Providerのサンプルを見てみていただくと, さらに素敵さがわかると思います.このように, C#オンリーではなく, F#も混ぜ込むことで, より一層プログラミングの幅が広がると思います.現在, 私のホームページでは, F#の日本語リファレンスを絶賛追加中です！
もし, F#に興味がでてきた方がいらっしゃいましたら, ぜひご利用ください！！そして, まだ準備中の段階ですが, F#とC#をコラボさせるWPF/MVVMの記事を連載する予定(コチラ)ですので, 公開できるように頑張ります.また, 記事の内容やC#/F#などで質問がある方は, お気軽にYoutube Liveの方でコメントしていただければと思います.
基本的に毎日放送していますので, 思い立ったときにでも来ていただければと思います.
ここまで駄文を読んでいただきありがとうございました.


