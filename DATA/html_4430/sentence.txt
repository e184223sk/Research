More than 1 year has passed since last update.async/await は非同期処理を同期処理のように書ける機能です。
しかし、async/awaitにはそれ以上のポテンシャルがあります。
それが 継続の取得 です。
AsyncMethodBuilderとasync/awaitを併用することで 継続の取得を行うことができます。今回は継続の取得を悪用使用する拙作ライブラリAsync.Chaosの紹介と解説をします。yaegaki/Async.Chaos実用的な内容ではないネタ記事です。
こんなこともできるのか、くらいの感じで読んでください。
async/awaitに自信がある方は解説を読む前にどのようにして実現しているのかを考えてみるのも面白いかもしれません。
コンパイラの暗黙の挙動に頼っている部分もあるのでバージョンが変わると動かない可能性があります。Async.Chaosの使用例です。一番シンプルな使用例です。
ChaosTask.Continuationで継続を取得して再帰的に呼び出します。ChaosTask.Checkpointでコードにチェックポイントを作成し、任意の場合からチェックポイントに戻ります。ChaosTask.Concurrentで継続を並行で実行します。
同時に実行されるわけではなく常に順番に実行されます。ChaosTask.Concurrentは処理を並行で実行するため、一つのタスクが処理をブロックするとほかのタスクも影響を受けます。
ChaosTask.YieldやChaosTask.WaitTask、ChaosTask.WaitNextを使用することで別タスクの処理を行います。基本的なコンセプトは継続の取得と実行です。
Awaiterを使うとOnCompletedで継続を取得できますがここで取得できる継続はそのままでは再利用できません。再利用できない理由はここで取得できる継続がステートを持っているからです。
一回呼ぶと継続の内部ステートが変更されてしまうのでもう一度呼んでも違う結果になります。なので、ステートの保存と復元ができるなら何度でも使用できる継続を取得することができます。
ではこのOnCompletedで渡される継続はどこから来たものでしょうか。
答えはコンパイラが自動生成したステートマシンのMoveNextです。以下の例を見てください。この関数からは以下のステートマシンが生成されます。このステートマシンのMoveNextが継続の正体です。
みればわかりますが、MoveNextが呼ばれると内部の変数が変更されます。ステートマシンのコピーはAwaiterでは実現できません。
コピーできるタイミングとしてAsyncMethodBuilderが考えられます。
AsyncMethodBuilderは任意の型をasync関数の戻り値にするためのものです。
AsyncMethodBuilderにはAwaiterとStateMachimeが渡されるAwaitUnsafeOnCompletedという関数があります。
ここがコピーを行うことのできるタイミングです。これで何度も呼び出すことが可能な継続を手に入れることはできました。
次に問題になるのがawaitしたときの戻り値です。
awaitしたときの戻り値はAwaiterのGetResultが使用されます。
よって以下のようにMoveNextの前にAwaiterに準備させます。以上で基本的な解説は終わりです。
後は継続をどうやって作るか、どうやって継続を管理するかの問題になります。
あまり面白い話でもないので省略します。コードとしてはこの辺にあります。(上記のものとは結構違いますが基本的なコンセプトは同じです。)
AsyncChaosMethodBuilder.csAsync.Chaosはパフォーマンスの面でも機能面でもあまり意味のないライブラリです。
(しかもスケジューラがおそらくバグっているのでスレッドが複数になってくるとうまく動かないかもしれない)
しかし、今のC#ではやろうと思えばこんなこともできるというのは面白いと思いました。


