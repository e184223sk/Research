More than 1 year has passed since last update.Cinemachineを意地でも使わないyoship1639です。対象のオブジェクトを舐めまわすように回転・追従する多機能カメラコントローラを作ってみたのでその紹介です。
SceneのMain Cameraにアタッチし追従対象のTransformを指定するだけでいいのでお手軽で、また調整すればプレイヤーの追従にもそのまま使えるので様々なシーンで使えるのではないかと思います。キャラクタをアタッチするだけで使える多機能カメラスクリプトを作ってみた。いろんな場面で使えるように中心回転、遅延、フリールック、距離、高さ、手ブレ、ドリーズームを搭載しました。プレイヤー追従にもそのまま使えます。qiita記事書いて配布予定です('ω') pic.twitter.com/SSYJBybaJXどの様な機能があるのかご紹介します。今回作成したカメラスクリプトは標準入力からの操作でも他スクリプトからでも扱える様にしてあります。ターゲットを中心に周ります。基本機能です。
マウス左＋移動です。ターゲットを中心にしているのでそのまま追従します。遅延です。Dampingの値を大きくするとカメラが遅延して追従します。
滑らかに見せるには必須の手法です。ターゲットを中心としてその周りを見渡すことができます。
特定の場所を見たい場合に使えます。
マウス右＋移動です。マウス中央で初期化します。ターゲットとの距離を変える事が出来ます。これもなくてはならない基本機能ですね。
マウスホイールです。一々プレイヤーの目の位置にトランスフォーム用のゲームオブジェクトを設定するのが面倒な人のための機能です。
見る高さを変えます。手ブレです。いかにも人が手で撮っている様に見せます。
あまり大きくすると酔います。めまいショットともいわれるドリーズーム。演出を凝るためにはこの効果を試してみるのもいいかもしれません。振動です。縦振動のみ、横振動のみ等も設定できます。カメラとキャラクタの間に遮蔽物がある場合に正しく処理する機能です。
壁裏にカメラがめり込むのを防ぎます。有効にするとカメラの位置をその場から動かさないようにできます。UpdateでシミュレートするかFixedUpdateでシミュレートするかを選べます。
移動対象が剛体の場合はFixedUpdateで追従するのが有効です。それぞれの機能をどのように実現しているのかを簡単に解説したいと思います。ターゲットを中心にカメラを回転する手法ですが、これはSinとCosをうまく組み合わせることで簡単に実現できます。
ターゲットを中心としたカメラの水平位置は、上から見て単位円を描けば簡単に理解できます。ターゲットを後ろから見た状態を基準にした場合単位円のX座標はSin(rot)、Z座標は-Cos(rot)であることが分かるので、まずそれをそのままプログラムに落とし込みます。次に、Y座標ですが、これは単純でSin(height)です。そして、上下に回り込むほどX,Z座標は小さくなるので、Cos(height)を掛けてあげます。単位円の長さは1なので、このままではターゲットからカメラまでの距離が1で固定されてしまうので、distanceを掛けてあげます。また、中心をターゲットにするので、var pos = Vector3.zeroはvar pos = target.positionに直してあげます。これでターゲットを中心にして回るという処理ができました。ターゲットを中心とするので、自動的にFollowing機能が付いてきます。更に、posにVector3.up * eyeHeightを足してあげれば高さも調整できます。これで、4つの機能が出来上がりました。遅延はMathf.Lerpを使えば大丈夫です。
先ほどのrotやheightの値を遅延させればいいので、このような処理をかませます。Mathf.Lerpのrate値を時間にしてあげる事で、時間がたつにつれてtargetRotはrotに近づくようになります。近づく速度はrotationDampingで調整可能です。この処理をheightやdistanceにも適用させると動きが滑らかになります。これは意外と簡単で、camera.transform.LookAtの後にcamera.transform.Rotateで回転させればいいだけです。手ブレは、パーリンノイズを使います。引数を経過時間にすればいいだけなので、これも簡単に作れてしまいます。
Free Lookと同じ様にcamera.transform.LookAtの後にcamera.transform.Rotateを行います。
Zだけ別の変数にしているのは、cameraのupの変動が大きいと見ずらくなってしまうので個別に調整できるようにするためです。手ブレと要領でcamera.transform.Rotateしてあげます。
引数をランダムにすればいいだけです。これはちょっと考えなければできない処理です。ドリーズームはカメラのField of ViewとDistanceをうまく調整する事でターゲットの大きさを変えずに周りの遠近感を変える手法です。説明が面倒なので抜粋ソースコードを見て納得してください（投げやり）
最初の奴のdistanceをdollyDistに置き換えればおｋです。一応Unity公式リファレンスにも説明があります。
https://docs.unity3d.com/jp/460/Manual/DollyZoom.html壁を検知し壁に埋まらない様にする手法です。ターゲットからカメラ方向にRayを飛ばして壁があったらdistanceをその壁までの距離に置き換えます。これだけで壁にめり込まなくなります。残りのFixed PointとUpdate Functionは特に説明することはないので割愛です。前章のアルゴリズムをごった煮して入力を受け付ける様にしたら多機能カメラコントローラの完成です。
コピペしてメインカメラに追加しターゲットを設定すればそのまま使えます。以前もカメラワークに関する記事を書かせていただきました。
ゲームの質を劇的に上げるカメラワークの3つの手法解説【減衰・FoV・手ブレ】3D関連はカメラワークを変えるだけで見た目が大きく変わるのでぜひ参考にしていただければと思います。この機能が足りない、この挙動がおかしい等ありましたら遠慮なくコメントください！修正バージョンを記載します。
よきUnityライフを。※本記事で使用しているモデルは以下のライセンスで提供されています。
© Unity Technologies Japan/UCL


