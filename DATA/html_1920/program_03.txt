
    // デシリアライズ
    JObject weatherForecast = JObject.Parse(jsonString);

    // 直下の値を取得
    Console.WriteLine("Date: " + weatherForecast["Date"].ToString());

    // 入れ子の値を取得
    Console.WriteLine("TemperatureRanges_Cold_High: " + weatherForecast["TemperatureRanges"]["Cold"]["High"].ToString());

    // []
    var DatesAvailable = weatherForecast["DatesAvailable"].Children();
    foreach (var DatesAvailabl in DatesAvailable)
    {
        Console.WriteLine("DatesAvailable: " + DatesAvailabl.ToString());
    }

    // {}
    JEnumerable&lt;JToken&gt; TemperatureRanges = weatherForecast["TemperatureRanges"].Children();
    foreach (JToken TemperatureRange in TemperatureRanges)
    {
        // キー
        Console.WriteLine("TemperatureRange Key: " + ((JProperty)TemperatureRange).Name);
        // 値
        Console.WriteLine("TemperatureRange Value: " + TemperatureRange.First["High"]);
        // 一部だけ定型クラスに取り出したい
        HighLowTemps highLowTemps = TemperatureRange.First.ToObject&lt;HighLowTemps&gt;();
    }

    // トップレベルに追加
    weatherForecast["hoge"] = "fuga";

    // 削除
    weatherForecast.Property("Summary").Remove();

    // []に追加
    ((JArray)weatherForecast["DatesAvailable"]).Add("2020-02-02T02:02:02-02:00");

    // {}に追加
    ((JObject)weatherForecast["TemperatureRanges"]).Last.AddAfterSelf(
        new JProperty("Lukewarm", JObject.Parse(@"{""High"": 10,""Low"": 10}"))
    );
    // これでもいい
    weatherForecast["TemperatureRanges"]["Absolute"] = JObject.Parse(@"{""High"": -273,""Low"": -273}");

    // JSON文字列に戻す
    var jsonStringAfter = JsonConvert.SerializeObject(weatherForecast);

