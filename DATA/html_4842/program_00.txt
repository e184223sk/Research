using System.ComponentModel;
using System.Diagnostics;
using System.Windows.Forms;
using System.Text.RegularExpressions;

namespace SampleMain
{
    public partial class frmDoWork : Form
    {
        // 取込処理名
        public string ExecuteName { get;  set; }
        // 取込処理の引数
        public string Arguments { get; set; }

        // プロセス処理用
        private Process _proc = null;

        // コンストラクタ
        public frmDoWork()
        {
            InitializeComponent();
        }

        // 画面ロード時
        private void frmDoWork_Load(object sender, EventArgs e)
        {
            // 取込処理の準備
            _proc = new Process();
            // プロセスの実行名をセット
            _proc.StartInfo.FileName = ExecuteName;
            // プロセスの引数をセット
            _proc.StartInfo.Arguments = Arguments;
            // ウィンドウを表示しないようにする
            _proc.StartInfo.CreateNoWindow = true;

            //入力できるようにする
            _proc.StartInfo.UseShellExecute = false;
            _proc.StartInfo.RedirectStandardInput = true;

            //非同期で出力を読み取れるようにする
            _proc.StartInfo.RedirectStandardOutput = true;
            _proc.OutputDataReceived += proc_OutputDataReceived;
         }

        // 画面初回表示時
        private void frmDoWork_Shown(object sender, EventArgs e)
        {
            // 閉じるボタンを無効にする
            btnClose.Enabled = false;

            // ProgressChangedイベントが発生するようにする
            bgWorker.WorkerReportsProgress = true;
            // 処理を開始する
            bgWorker.RunWorkerAsync();
        }

        // 画面を閉じる
        private void btnClose_Click(object sender, EventArgs e)
        {
            Close();
        }

        // 行が出力されるたびに呼び出される
        private void proc_OutputDataReceived(object sender, DataReceivedEventArgs e)
        {
            if (e.Data == null) return;

            Regex regex = new Regex(@"進捗 (\d.)%");
            Match match = regex.Match(e.Data);
            if(match.Groups.Count &gt; 1)
            {
                int percentage = int.Parse(match.Groups[1].Value);

                // ProgressChangedイベントハンドラを呼び出し
                bgWorker.ReportProgress(percentage);
            }
        }

        // 取込処理
        private void bgWorker_DoWork(object sender, DoWorkEventArgs e)
        {
            BackgroundWorker bgWorker = (BackgroundWorker)sender;

            // 処理を開始する
            _proc.Start();
            // 非同期で出力の読み取りを開始する
            _proc.BeginOutputReadLine();
            _proc.WaitForExit();

            // 結果を設定する
            e.Result = _proc.ExitCode;
        }

        // 途中経過イベント処理
        private void bgWorker_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            // ProgressBarの値を変更する
            prbDowork.Value = e.ProgressPercentage;
            // タイトルのテキストを変更する
            lblTitle.Text = (e.ProgressPercentage).ToString() + " %";
        }

        // 取込処理が終わったときに呼び出される
        private void bgWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            if (e.Error != null)
            {
                // エラーが発生したとき
                lblTitle.Text = "エラー:" + e.Error.Message;
            }
            else
            {
                // ProgressBarの結果を取得する
                int result = (int)e.Result;

                if(result == -1)
                {
                    // エラーで中断したとき
                    lblTitle.Text = "処理を中断しました。";
                }
                else
                {
                    // 正常に終了したとき
                    prbDowork.Value = prbDowork.Maximum;
                    lblTitle.Text = "完了しました。";
                }
            }

            // 閉じるボタンを有効に戻す
            btnClose.Enabled = true;
        }
    }
}

