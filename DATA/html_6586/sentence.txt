実は最近、Rubyの勉強をチェリー本で始め、こないだ読み終えました。Rubyを学ぼうと決めた理由なんですが、とある名刺管理サービス会社のCTOの方がインタビュー記事で「エンジニアこそ事業にコミットすることが大切」「プロなら経済価値に直結するコードを書くべきだ」という記事を見つけ、めちゃめちゃ感銘を受けました。で?ってなるんですが、実は日本のスタートアップや自社サービスを展開している企業のRuby(Rails)のシェア率・覇権がすごい！つまり、長いものには巻かれろ！！ってことで、日本でRuby(Rails)を学べば、経済価値を生む機会が増えるんでないかと考えたわけです。ちなみに僕はC# (ASP.NET MVC)を業務で使用しています。まず本題に入る前に大事なことがあります。それは言語のタイプです。
C#やJavaなどは静的言語、RubyやPHPは動的言語にカテゴライズされてます。詳しい説明はしませんが、動的言語はstringなどの型の制約はない。なのでRubyには静的言語でいうインターフェースがない。↓のコードはC#。静的言語でよくあるインターフェースを使用した抽象的なプログラムは出来ない。これをRubyで書こうとすると　※クラスの書き方とかは後で説明します。Rubyのほうは、コンストラクタで渡されたオブジェクトがFindというメソッドを持っているか否かだけで実行かエラー判定をします。
これをダックタイピングというらしい。まあ「アヒルのように鳴けばそれはアヒルである」ってことらしい。
おしゃれな言い回しｗ　ちなみに動的なので戻り値の型もない。。ここも後で説明やっと、本題に入ります。
今から説明する項目をインプットしていれば、最低限やっていけると思う。たぶんRubyでは変数宣言と代入を同時に行う必要がある。
コメントは#で可能ifの{}は使用しない。endで代用。三項演算子は一緒なので省略。
戻り値はコードの最終行が戻り値となる。この場合、文字列。普通のforはほとんど使用しないらしい。eachメソッドで要素を1個ずつ取り出しnに代入する。まあforeachと一緒。
sumが最終行なので戻り値となるメソッドはdefとendで記述する。
戻り値がtrueかfalseの場合、メソッド名に?を付ける。これも最終行が戻り値となる。明示的なreturnは使用しない。順を追って説明します。まずクラスはclassとendで記述します。コンストラクタはinitializeで定義します。
@ nameはインスタンス変数といいます。同インスタンス内で使用できる値です。attr_reader はgetterのこと。わざわざ、getの処理を書かずに省略できる。
オブジェクト指向であれば基本的getterのみ使用するとおもうので他は説明しません。※setterのみとか色々あります。ググっててくれーインスタンスメソッドはクラスをインスタンスしてから呼び出します。クラスメソッドは少し勝手が違う。メソッド名にselfがついてると思いますがこれがクラスメソッドとなる。こいつはインスタンスせずにクラスから直接呼び出して使用する。静的言語のstaticに近い感じ。Rubyにはモジュールという概念がある。基本的にはクラスに近い。ただインスタンスは出来ない。
module 　endで記述する。使用したモジュールをクラスでincludeすれば使用できる。これをミックスインという。
includeすればインスタンスメソッド。extendでクラスメソッドになる。最初は気にしなくていいかも。後、privateの修飾子が出てきたが、privateと記述した以降のメソッドがprivateになる。クラスも一緒。
色んな書き方があるので是非ググってほしい。p はただの出力メソッドだ。シンボルシンボルは「:文字列」の形になる。
用途としては、基本的にハッシュなどのキー値に使用することが多い。理由はシンボルは裏では整数として値を持っているようだ。なのでキー探索に向いており、探索を高速化できる。配列操作系配列操作はどの言語でも高頻度で使用すると思う。とりあえず序盤で説明したeachとこの三つを覚えておけば何とかなるそう。※Railsをやってる先輩曰くやっぱり、ダックタイピングに慣れるのに時間がかかる静的型付エンジニアはいると思う。


