More than 1 year has passed since last update.ASP.NET Core のローカリゼーション回りのソースを読んだのでメモ調べたバージョンはASP.NET Core 3.1IStringLocalizer, IStringLocalizerFactory あたりは今回は触れません。
ここではミドルウェア周りについて触れます詳細はこちら に書いているので
ここではさらっと触れるのみとします。あとは利用側でIStringLocalizer&lt;T&gt; をインジェクションし、T に相当するクラス及びResources/T.ja.resx, Resources/T.en.resx を用意すればよいです。ApplicationBuilderExtensionsクラスのUseRequestLocalization メソッドを実行する事で登録されます。RequestLocalizationMiddleware クラスのソースはこちらHttpContextから カルチャーに関する情報を取得し SetCurrentThreadCultureメソッドで CultureInfo.CurrentCulture, CultureInfo.CurrentUICultureにセットしています。カルチャーに関する情報はデフォルトではの順序で解決が行われます。
これらの内容は RequestLocalizationOptions で設定を行います。ソースはこちら上記の RequestLocalizationMiddleware でカルチャの解決に使用するオプションを定義しています。これらのプロパティについて紹介します。HttpContext からカルチャの解決を行っているものの正体です。デフォルトではの3つがListの要素に設定されています。解決に用いるキーの名前はインスタンスプロパティとして定義されているので変更することができます。
(例 CookieRequestCultureProviderのCookie名が .AspNetCore.Culture という値であり ASP.NET Core を使用している事を外部に公開していることになるので、この名前を変更したい という要望に対応することができます。 )このRequestCultureProvidersプロパティを変更することで、解決の順序を変更することや、新しいカルチャ解決の方法を追加することも可能です
(例. HttpContext が渡されているので Claim から解決することもおそらく可能ではないかと思います。)新しいカルチャ解決の方法を実装する際はRequestCultureProviderを継承
もしくはCustomRequestCultureProvider
に直接ラムダ式を記述すれば可能です。AddInitialRequestCultureProvider拡張メソッドを呼ぶことで、先頭に追加することも可能です。サポートしているカルチャの一覧です。DefaultRequestCulture はカルチャが解決できなかった時に使用されるデフォルトのカルチャです。プロパティに直接セットすることも可能ですが
AddSupportedCultures, AddSupportedUICultures, SetDefaultCultureメソッドを呼ぶことでもセット可能です。
(Addという名前で始まっていますがソースを見た感じ総入れ替えが行われているように見える..🤔)カルチャが見つからなかったときにフォールバックするか？の設定のようです。例えば
- SupportedCulturesがja
- リクエストから解決したカルチャがja-JPのときにja を使うといったことが可能なようです。RequestLocalizationMiddlewareクラスのGetCultureInfo
メソッドあたりで使われています。今回はカルチャの解決方法について注目してソースを確認しました。次は利用する側(IStringLocalizer, IStringLocalizerFactory) について見てみようと思います。


