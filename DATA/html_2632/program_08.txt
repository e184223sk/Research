

public class HogeBehaviour : MonoBehaviour
{
  CancellationTokenSource cts;

  void Start()
  {
    // UniTask呼び出し時
    var cts = new CancellationTokenSource();
    SomeTask(cts.Token).Forget();
  }

  async UniTask SomeTask(CancellationToken token)
  {
    // 任意の処理。
    await UniTask.Delay(0, cancellationToken: token); // await時にはCancellationTokenを渡す
  }

  void Cancel()
  {
    // キャンセル時
    cts.Cancel();
  }

  // 通常は、コルーチンと同様の破壊タイミングを実現するために OnDestroy() でキャンセルを呼んでおく
  // （GetCancellationTokenOnDestroy()で取得したトークンの場合は不要）
  void OnDestroy()
  {
    cts.Cancel();
    cts.Dispose(); // CancellationTokenSourceの後始末が必要
  }
}

