
    IEnumerator FooCoroutine()
    {
        yield return UniTask.ToCoroutine(async () =&gt;
        {
            try
            {
                var token = this.GetCancellationTokenOnDestroy();
                var result = await HogeAsync(token);
            }
            catch (OperationCanceledException e)
            {
                // キャンセル時の例外対応。Coroutine側で対応が必要ならばここで書く
            }
            catch (Exception e)
            {
                // キャンセル以外の例外対応
                Debug.Log($"Exception: {e}");
            }
        });
    }

    async UniTask&lt;int&gt; HogeAsync(CancellationToken token)
    {
        await UniTask.Delay(2000, cancellationToken: token);
        return 5;
    }

