private File Upload(string filePath, DriveService service)
{
    var fileName = System.IO.Path.GetFileName(filePath);

    var listRequest = service.Files.List();
    listRequest.Q = $"name = '{fileName}' and '{_Configuration.DriveDirectoryId}' in parents and trashed=false";
    listRequest.Fields = "nextPageToken, files(id, name, webViewLink) ";

    // アップロード済みのファイルを更新するにはAPIを切り替える必要がある

    var meta = new File()
    {
        Name = System.IO.Path.GetFileName(filePath),
    };

    using var stream = new System.IO.FileStream(filePath, System.IO.FileMode.Open);

    var file = listRequest.Execute().Files.FirstOrDefault();
    if(file != null)
    {
        // 更新
        var request = service.Files.Update(meta, file.Id, stream, GetMimeType(filePath));

        request.Fields = "id, name, webViewLink";
        request.KeepRevisionForever = false;

        _Logger.Info("Request Files.Update");
        var result = request.Upload();
        if(result.Status == UploadStatus.Failed)
            throw result.Exception;

        request.Body.WebViewLink = file.WebViewLink;

        return request.Body;
    }
    else
    {
        // 新規追加
        meta.MimeType = GetMimeType(filePath);
        meta.Parents = new List&lt;string&gt; { _Configuration.DriveDirectoryId };

        var request = service.Files.Create(meta, stream, GetMimeType(filePath));
        request.Fields = "id, name, webViewLink";
        request.KeepRevisionForever = false;

        _Logger.Info("Request Files.Create");
        var result = request.Upload();
        if (result.Status == UploadStatus.Failed)
            throw result.Exception;

        _Logger.Info("権限変更");
        {
            PermissionsResource.CreateRequest permissionRequest;

            if(string.IsNullOrEmpty(_Configuration.Domain))
            {
                permissionRequest = service.Permissions.Create(new Permission
                {
                    Type = "anyone",
                    Role = "reader",
                }, request.ResponseBody.Id);
            }
            else
            {
                permissionRequest = service.Permissions.Create(new Permission
                {
                    Type = "domain",
                    Role = "reader",
                    Domain = _Configuration.Domain,
                }, request.ResponseBody.Id);
            }

            _Logger.Info("Request Permissions.Create");
            permissionRequest.Execute();
        }

        return request.ResponseBody;
    }
}

