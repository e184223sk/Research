More than 3 years have passed since last update.C# は静的型付け言語です。
静的型付けというのは、コンパイル時に型やメソッドの構造が（ある程度）決定している、ということですね。
一方、JavaScript や Python 、Ruby などは動的型付け言語です。
動的型付けは、実行時に型やメソッドの構造が決まるということですね。今回は、dynamic と System.Dynamic を使用した、C# における動的型付けについて見てゆきたいと思います。
そして最後に、デモとしてちょっと変わったコードをお見せいたします。dynamic はクラスやインターフェイスなどの型の名前ではありません。
「変数」の型です（実体は object 型です）。
dynamic 変数は、実行時にメンバへのアクセスや演算を行なったとき、動的にコードを生成します。
これにより、異なる言語や実行環境の間で違いを吸収するなど、相互運用が可能になります。
このあたりの概要は、下記のページが参考になるかと思います。dynamic
http://ufcpp.net/study/csharp/sp4_dynamic.htmldynamic の内部実装
http://ufcpp.net/study/csharp/sp4_callsite.html相互運用だけでなく、リフレクションを参照する機能もあります。
こんな記述が可能です。変数 a に異なる型を代入し、その後に同名のプロパティ X を参照しています。
X が存在するかどうかは実行時に評価されるため、コンパイルエラーにはなりません。
少しだけ、動的型付けっぽいですね。しかし、存在していないプロパティ（例えば Y）にアクセスすると RuntimeBinderException が発生してしまいます。
もっとスクリプト言語みたいに、宣言なしに自由に代入できないものでしょうか。ExpandoObject は、System.Dynamic 名前空間のクラスです。
dynamic 変数に代入して使います。
下記コードをご覧ください。なんと、任意のプロパティ名を自由に使用できてしまっています。
C# でもこんなことができてしまうんですね。ちなみに、ExpandoObject は前章のようにリフレクションを使用しているわけではありません。DynamicObject も System.Dynamic 名前空間のクラスです。
こちらは継承して使います。
DynamicObject を継承したクラスは、dynamic の動的コード生成時に呼び出されるメソッド（TryXXXXメソッド群）をオーバーライドすることが可能です。
どんなものがあるか見てみましょう。これらを実際にオーバーライドして使用した例が以下のコードです。Ruby における method_missing と似たような機能ですね。
特に、プロパティとメンバメソッドの名前を自由に決定できるのは、強力な気がします。そんな機能を使い、次章ではものの役には立たないけれど、なんか変わったコーディングをしてみたいと思います。前章の内容を踏まえ、サンプルプログラムを作ります。
dynamic を利用して XML を生成するクラスです。
実用性はありませんので、ご了承ください。
DSL（ドメイン固有言語）とは、汎用性または公共性の無い、狭い利用に特化した言語のことです。下記が実行例です。dynamic を使わなくても、演算子のオーバーロードで簡単に実現できそうな内容ですが、DynamicObject の TryGetMember を利用して任意のタグ名を指定している点にご注目ください。
Ruby ほどスマートには書けませんが、静的型付け言語の C# でこういったコードが書けるというのは、少し面白い気がします。以下はサンプルコードです。
まず、XML ドキュメントを表すクラスです。次に、XML 要素を表すクラスです。dynamic 変数、 ExpandoObject、DynamicObject について、簡単にですがご紹介いたしました。
こういった柔軟性を持っているところも、C# の魅力の 1 つではないでしょうか。


