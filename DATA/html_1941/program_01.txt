
internal sealed class SaveAction
{
    // 状態へのアクセス
    private MyState State { get; }

    // UI へのアクセス
    private MyView View { get; }

    // DI されるサービス
    private IDatabase Database { get; }
    private ILogger Logger { get; }

    public SaveAction(MyState state, MyView view, IDatabase database, ILogger logger)
    {
        State = state;
        View = view;
        Database = database;
        Logger = logger;
    }

    public Execute()
    {
        try
        {
            Database.BeginTransaction((connection, transaction) =&gt;
            {
                new Data.SaveCommand(State, connection, transaction).Execute();
            });

            View.NotifySuccess("保存しました。");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex);
            View.NotifyError("保存に失敗しました。");
        }
    }
}

