More than 3 years have passed since last update.C#においてawait以降の処理は「どのスレッドで」「Taskが完了してからどのくらい遅延して」実行されるのか？
インターネット上の情報をもとに実験して得た、自分なりの理解をまとめてみる。
これはあくまで「このような挙動になったことを確認したもの」であり、言語仕様としてどう定義されているかではない。※インターネット上の情報としてもっとも理解の助けになったページ：
async/awaitと同時実行制御 | ++C++; // 未確認飛行 C ブログ「想定スレッド識別名」は以下のような規則で命名している：「想定到達順」については、非同期処理のタイミングによって順番が変わり得る部分には「?」を付けている。※実際には2と3の間にdllロードの出力があるが、ここでは関係ないので取り除いているawait前にTaskが終わっている場合はawaitに到達してもreturnせず、await以降の処理は「非同期」にも「後回し」にもされずに「そのままの流れで同期的に」実行される。ワーカースレッドで未完了のTaskをawaitした場合、awaitに到達したスレッドはそこで呼び出し元にreturnし、await以降の処理は「Task側のスレッドでTask側の処理を完了したあと即座に」実行される。総じて（await前にTaskが終わるケースも含め）、ワーカースレッドでawaitした場合はawait以降の処理は「びりっけつで処理を終えたスレッドで実行される」、そんなイメージ。
自分の担当分を先に終えたワーカーは先に帰り（そして次の仕事を始め）、最後まで仕事をしていたワーカーが責任を持って後始末をするのである。UIスレッドで未完了のTaskをawaitした場合、awaitに到達したスレッドはそこで呼び出し元にreturnし、await以降の処理は「Task完了時に高優先度のメッセージとしてUIスレッドのメッセージキューに追加される」、そんなイメージ。


