
using AtCoder;
using AtCoder.Internal;
using System;
using System.Collections.Generic;
using System.Diagnostics;
class Program
{
    static void Main()
    {
        SourceExpander.Expander.Expand();

        // https://atcoder.jp/contests/practice2/tasks/practice2_a
        var line = Console.ReadLine().Split(' ');
        var n = int.Parse(line[0]);
        var Q = int.Parse(line[1]);

        var dsu = new DSU(n);

        for (int i = 0; i &lt; Q; i++)
        {
            line = Console.ReadLine().Split(' ');
            int t = int.Parse(line[0]);
            int u = int.Parse(line[1]);
            int v = int.Parse(line[2]);
            if (t == 0)
            {
                dsu.Merge(u, v);
            }
            else
            {
                Console.WriteLine(dsu.Same(u, v) ? 1 : 0);
            }
        }
    }
}
#region Expanded
namespace AtCoder { public class DSU { internal readonly int _n; internal readonly int[] _parentOrSize; public DSU(int n) { _n = n; _parentOrSize = new int[n]; for (int i = 0; i &lt; _parentOrSize.Length; i++) _parentOrSize[i] = -1; } public int Merge(int a, int b) { DebugUtil.Assert(0 &lt;= a &amp;&amp; a &lt; _n); DebugUtil.Assert(0 &lt;= b &amp;&amp; b &lt; _n); int x = Leader(a), y = Leader(b); if (x == y) return x; if (-_parentOrSize[x] &lt; -_parentOrSize[y]) (x, y) = (y, x); _parentOrSize[x] += _parentOrSize[y]; _parentOrSize[y] = x; return x; } public bool Same(int a, int b) { DebugUtil.Assert(0 &lt;= a &amp;&amp; a &lt; _n); DebugUtil.Assert(0 &lt;= b &amp;&amp; b &lt; _n); return Leader(a) == Leader(b); } public int Leader(int a) { if (_parentOrSize[a] &lt; 0) return a; while (0 &lt;= _parentOrSize[_parentOrSize[a]]) { (a, _parentOrSize[a]) = (_parentOrSize[a], _parentOrSize[_parentOrSize[a]]); } return _parentOrSize[a]; } public int Size(int a) { DebugUtil.Assert(0 &lt;= a &amp;&amp; a &lt; _n); return -_parentOrSize[Leader(a)]; } public List&lt;int[]&gt; Groups() { int[] leaderBuf = new int[_n]; int[] id = new int[_n]; var result = new List&lt;int[]&gt;(_n); for (int i = 0; i &lt; leaderBuf.Length; i++) { leaderBuf[i] = Leader(i); if (i == leaderBuf[i]) { id[i] = result.Count; result.Add(new int[-_parentOrSize[i]]); } } int[] ind = new int[result.Count]; for (int i = 0; i &lt; leaderBuf.Length; i++) { var leaderID = id[leaderBuf[i]]; result[leaderID][ind[leaderID]] = i; ind[leaderID]++; } return result; } } } 
namespace SourceExpander { public class Expander { [Conditional("EXPANDER")] public static void Expand(string inputFilePath = null, string outputFilePath = null, bool ignoreAnyError = true) { } public static string ExpandString(string inputFilePath = null, bool ignoreAnyError = true) { return ""; } } } 
namespace AtCoder.Internal { internal static class DebugUtil { [Conditional("DEBUG")] public static void Assert(bool condition, string reason = null) { if (!condition) throw new DebugAssertException(reason); } [Conditional("DEBUG")] public static void Assert(Func&lt;bool&gt; conditionFunc, string reason = null) { if (!conditionFunc()) throw new DebugAssertException(reason); } } } 
namespace AtCoder.Internal { public class DebugAssertException : Exception { public DebugAssertException() : base() { } public DebugAssertException(string message) : base(message) { } public DebugAssertException(string message, Exception innerException) : base(message, innerException) { } } } 
#endregion Expanded

