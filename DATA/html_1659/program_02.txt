
using OpenCvSharp;
~~
/// &lt;summary&gt;
/// 円弧計算のクラス
/// 線上の座標から最小二乗法に則って円の中心点と半径を計算します。
/// &lt;/summary&gt;
public static class CalcArc
{
    /// &lt;summary&gt;
    /// 線上の座標から最小二乗法に則って円の中心点と半径を計算します。
    /// &lt;/summary&gt;
    /// &lt;param name="points"&gt;線上の座標&lt;/param&gt;
    /// &lt;returns&gt;計算結果を保持する円弧クラス&lt;/returns&gt;
    public static Arc Calc(IEnumerable&lt;Point2d&gt; points)
    {
        Func&lt;IEnumerable&lt;Point2d&gt;, double&gt; Func_sigmaXsquare = (points_local) =&gt;
        {
            return points_local.Select(p =&gt; p.X * p.X).Sum();
        };
        Func&lt;IEnumerable&lt;Point2d&gt;, double&gt; Func_sigmaYsquare = (points_local) =&gt;
        {
            return points_local.Select(p =&gt; p.Y * p.Y).Sum();
        };
        Func&lt;IEnumerable&lt;Point2d&gt;, double&gt; Func_sigmaXY = (points_local) =&gt;
        {
            return points_local.Select(p =&gt; p.X * p.Y).Sum();
        };
        Func&lt;IEnumerable&lt;Point2d&gt;, double&gt; Func_sigmaX = (points_local) =&gt;
        {
            return points_local.Select(p =&gt; p.X).Sum();
        };
        Func&lt;IEnumerable&lt;Point2d&gt;, double&gt; Func_sigmaY = (points_local) =&gt;
        {
            return points_local.Select(p =&gt; p.Y).Sum();
        };

        //Func&lt;IEnumerable&lt;double&gt;, double&gt; LocalFunc_Sum = (list) =&gt;
        // {
        //     double rtn = 0;
        //     foreach (var element in list)
        //     {
        //         rtn += element;
        //     }
        //     return rtn;
        // };

        double sigmaXSquare = Func_sigmaXsquare(points);
        double sigmaYSquare = Func_sigmaYsquare(points);
        double sigmaXY = Func_sigmaXY(points);
        double sigmaX = Func_sigmaX(points);
        double sigmaY = Func_sigmaY(points);
        double sigma1 = (double)points.Count();

        var matrix1 = new double[,]
        {
            { sigmaXSquare, sigmaXY, sigmaX }
            ,{ sigmaXY, sigmaYSquare, sigmaY }
            ,{ sigmaX, sigmaY, sigma1 }
        };

        matrix1 = InvertMatrix(matrix1);

        var matrix2 = new double[,]
        {
            //System.Drawin.Point または OpenCvSharp.Point
            //を多く詰め込んだpointsを渡されると、int型で演算されここでOverflowExceptionが発生します。
            //doubleで扱う様にするとかなり大きな数値を扱わない限りOverflowしません
            //が、しかし、画像の画素数が多いと行列演算中のx^3、y^3等で結構な桁までいってしまいます。
            //よってここで渡すpointsはそもそも数を絞ってやるのが安全です。
            //今回はそこまで書いてません。
            { -1* points.Select(p =&gt; p.X * p.X * p.X + p.X * p.Y * p.Y).Sum() }
            ,{ -1* points.Select(p =&gt; p.X * p.X * p.Y + p.Y * p.Y * p.Y).Sum() }
            ,{ -1* points.Select(p =&gt; p.X * p.X  + p.Y * p.Y).Sum() }

            //foreachで計算するのとSumでは特に差が無いのでSum()にします↑
            //{ -1* LocalFunc_Sum(points.Select(p =&gt; p.X * p.X * p.X + p.X * p.Y * p.Y)) }
            //,{ -1* LocalFunc_Sum(points.Select(p =&gt; p.X * p.X * p.Y + p.Y * p.Y * p.Y)) }
            //,{ -1* LocalFunc_Sum(points.Select(p =&gt; p.X * p.X  + p.Y * p.Y)) }
        };

        var abcMat = MultipleMatrix(matrix1, matrix2);

        var a = (-1 * abcMat[0, 0]) / 2;
        var b = (-1 * abcMat[1, 0]) / 2;
        var rad = Math.Sqrt((-1 * abcMat[2, 0]) + a * a + b * b);
        return new Arc(a,b, rad, points);
    }

    /// &lt;summary&gt;
    /// 3*3行列と1*3行列の積を計算します。
    /// &lt;/summary&gt;
    /// &lt;param name="m1"&gt;3*3行列&lt;/param&gt;
    /// &lt;param name="m2"&gt;1*3行列&lt;/param&gt;
    /// &lt;returns&gt;演算結果の行列(1*3)&lt;/returns&gt;
    private static double[,] MultipleMatrix(double[,] m1, double[,] m2)
    {
        if (m1.GetLongLength(0) != 3 || m1.GetLongLength(1) != 3 || m2.GetLength(0) != 3 || m2.GetLength(1) != 1)
        {
            throw new ArgumentOutOfRangeException("行列の大きさが対応外です");
        }

        double a = m1[0, 0], b = m1[0, 1], c = m1[0, 2];
        double d = m1[1, 0], e = m1[1, 1], f = m1[1, 2];
        double g = m1[2, 0], h = m1[2, 1], i = m1[2, 2];

        double j = m2[0, 0], k = m2[1, 0], l = m2[2, 0];

        return new double[,]
        {
             { c * l + b * k + a * j}
            ,{ f * l + e * k + d * j}
            ,{ i * l + h * k + g * j}
        };
    }

    /// &lt;summary&gt;
    /// 3*3行列を反転します。(逆数)
    /// &lt;/summary&gt;
    /// &lt;param name="m"&gt;3*3行列&lt;/param&gt;
    /// &lt;returns&gt;反転した行列(3*3)&lt;/returns&gt;
    private static double[,] InvertMatrix(double[,] m)
    {
        var denom = CalcDenominator(m);

        if (m.GetLength(0) != 3
            || m.GetLength(1) != 3)
        {
            throw new ArgumentOutOfRangeException("行列の長さは3物にしか対応しません");
        }

        double a = m[0, 0], b = m[0, 1], c = m[0, 2];
        double d = m[1, 0], e = m[1, 1], f = m[1, 2];
        double g = m[2, 0], h = m[2, 1], i = m[2, 2];

        return new double[,]
        {
            {(e * i -  f * h) * denom,
            -1*((b * i -  c * h) * denom),
            (b * f -  c * e) * denom,
            }

            ,{-1*((d * i -  f * g) * denom),
            (a * i -  c * g) * denom,
            -1*((a * f -  c * d) * denom),
            }

            ,{(d * h -  e * g) * denom,
            -1*((a * h -  b * g) * denom),
            (a * e -  b * d) * denom,
            }
        };
    }


    /// &lt;summary&gt;
    /// 行列反転演算の係数を計算します。
    /// &lt;/summary&gt;
    /// &lt;param name="inputMatrix"&gt;反転する行列&lt;/param&gt;
    /// &lt;returns&gt;係数&lt;/returns&gt;
    private static double CalcDenominator(double[,] inputMatrix)
    {
        if (inputMatrix.GetLength(0) != inputMatrix.GetLength(1))
        {
            throw new ArgumentOutOfRangeException("行列の長さが揃ったものにしか対応できません");
        }
        var vals1 = new double[inputMatrix.GetLength(0)];
        for (int i = 0; i &lt; inputMatrix.GetLength(0); i++)
        {
            vals1[i] = inputMatrix[0, i];
            for (int j = 1; j &lt; inputMatrix.GetLength(0); j++)
            {
                int index = i + j;
                if (index &gt;= inputMatrix.GetLength(0))
                {
                    index -= inputMatrix.GetLength(0);
                }
                vals1[i] *= inputMatrix[j, index];
            }
        }

        var vals2 = new double[inputMatrix.GetLength(0)];
        for (int i = 0; i &lt; inputMatrix.GetLength(0); i++)
        {
            vals2[i] = inputMatrix[0, inputMatrix.GetLength(1) - 1 - i];
            for (int j = 1; j &lt; inputMatrix.GetLength(0); j++)
            {
                int index = inputMatrix.GetLength(1) - 1 - i - j;
                if (index &lt; 0)
                {
                    index += inputMatrix.GetLength(0);
                }
                vals2[i] *= inputMatrix[j, index];
            }
        }
        return 1 / (vals1.Sum() - vals2.Sum());
    }

}


