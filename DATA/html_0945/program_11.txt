
// &lt;autogenerated /&gt;
#nullable enable
using System;
using System.Collections.Generic;
using Deptorygen.GenericHost;
using Microsoft.Extensions.DependencyInjection;

namespace UseDeptorygen.Samples.GenericHost
{
    internal partial class Factory : IFactory
        , IDisposable
        , IDeptorygenFactory
    {
        private Service? _ResolveServiceCache;
        private Service2? _ResolveService2Cache;
        private Client? _ResolveClientCache;

        public Factory()
        {
        }

        public Service ResolveService()
        {
            return _ResolveServiceCache ??= new Service();
        }

        public Service2 ResolveService2()
        {
            return _ResolveService2Cache ??= new Service2();
        }

        public Client ResolveClient()
        {
            return _ResolveClientCache ??= new Client(ResolveService(), ResolveService2());
        }

        // GenericHostと連携するためのメソッド
        public void ConfigureServices(IServiceCollection services)
        {
            // キャッシュはファクトリー側が管理するので、すべてTransient
            services.AddTransient&lt;IFactory&gt;(provider =&gt; this);
            services.AddTransient&lt;Service&gt;(provider =&gt; ResolveService());
            services.AddTransient&lt;Service2&gt;(provider =&gt; ResolveService2());
            services.AddTransient&lt;Client&gt;(provider =&gt; ResolveClient());
        }

        public void Dispose()
        {
        }
    }
}

