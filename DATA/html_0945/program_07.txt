
class Service { }
class Client
{
    public Client(Service service) { }
}

[Factory]
interface IFactory
{
    // Service 型に対するメソッドを書き忘れちゃった
//  Service ResolveService();
    Client ResolveClientAsTransient();
}

// 生成されるコード
internal class Factory : IFactory, IDisposable
{
    private readonly Service _service;

    // 足りない依存先はコンストラクタで外部に要求する
    public Factory(Service service)
    {
        _service = service;
    }

    public Client ResolveClientAsTransient()
    {
        // Service に対するメソッドが無いので、仕方なくフィールドに持ってるインスタンスを使う
        // フィールドの中身は、コンストラクタを通じて渡される前提
        return new Client(_service);
    }

    public void Dispose()
    {
    }
}

