More than 1 year has passed since last update.　前回Identityを組み込んでDBをPostgreSQLにしたプロジェクトに、オートマイグレーションを設定し初期のロールと管理ユーザーを登録します。　・プロジェクトの作成からデータベースの設定まで（前々回）
　・オートマイグレーションとロールと管理ユーザーの登録（前回）
　・不要な認証用ページの削除（本稿）　ロールの効果を試すために、デフォルトのIdentityの機能を変更するために、スキャフォールディングしてソースを変更します。
　スキャフォールディングを呼び出し（プロジェクトを右クリックして表示されるメニューで[追加] -&gt; [新規スキャフォールディングアイテム]を選択）表示されたダイアログの左のメニューで「ID」を選び、右に表示された「ID」を選んで「追加」ボタンをクリックします。（この辺りはどんどん変わりそう）
　次に表示されるダイアログで変更したいものを選びますが、とりあえず全てを選択して下さい。データコンテキストはコンボから表示されるものをえらんで、「追加」ボタンをクリックします。
実施すると「Areas/Identity」にソースができます。　Identity関連のユーザーインタフェースをスキャフォールディングで基本のソースを生成しましたが、見ていただくとわかるように多くの画面が展開されます。これらの画面は全てデフォルトで設定されており、スキャフォールディングしたページが優先されますが、このソースを消しても該当のページはなくならず、実行すると同じように動作してしまいます。画面上でリンクを消せば普通の方は表示できませんが、URLを直接入力すると表示されてしまいます。
　コンシューマー向けのページを作るならそのまま使うこともできるのでしょうが、企業内部向けなどで利用者が自身を登録したり、登録内容を変更することができるとよくない場合はそれらの機能を停止する必要があります。　先のIdentity関連のスキャフォールディングで生成したページの中身を空にします。具体的には例えば「Identity/Account/Register.cshtml」の中身をクリアして以下のようにしてしまいます。これで、このページが呼ばれてもNotFoundで返るようになります。　先の方法で一応不要なページが内容にはできるのですが、わざわざデフォルトのページを作成してNotFoundを返すのは、ソースの見た目的にもうれしくありません。
　そこでもう少し調べてみて、結局「AddDefaultIdentity()」を使わない、というよりはその処理中に呼ばれている「AddDefaultUI()」を使わない方法がいいかなということで以下のようにしてみました。
　まず、「AddDefaultIdentity」をやめます。マイクロソフトのページに下記のような中身がGitHubに記載されていますので、それを基に変更します。これを「Startup.cs」に適用して「ConfigureServices(IServiceCollection services)」を以下のようにします。　置き換えの際に「AddDefaultUI()」を削除し、代わりに作成した「AddDefaultUIExceptPages(IdentityBuilder builder)」を利用します。これは「AddDefaultUI()」の処理を書き換えたもので一部不明な処理をコメントアウトしていますが、以降の処理で必要となれば復帰させる必要があるかもしれません。ちなみに「builder.Services.TryAddTransient();」の部分は2段階認証やパスワードリセットでEmailを利用しない場合は「internal class EmailSender : IEmailSender」のクラスと共に不要です。　これでIdentityで自動的に作成されるページ類は作成されないようです。不要なソースを作る必要が無いのですっきりしました。
　実際にスキャフォールディングで作成したページ関連をすべて削除し、「Login」のみスキャフォールディングで作成すると、「Regist」などの他のページは存在しなくなります。　基本的にはこれでIdentityを必要な部分だけ使って業務処理用のWebアプリを作れると思うので、一旦終了です。
　あとで、ポリシーベースの承認や、ページモデルのアトリビュートへの記述以外の承認方法を記載するかもしれません。
　パスワードの設定変更などは、いろいろと記載されている方がおられるのでそちらをご参考に。私のブログページ(https://nosa67.hatenablog.com/)


