More than 3 years have passed since last update.　高階関数とは、引数や戻り値に関数を使う関数のことです。
　関数型言語では当たり前のように使われていますが、手続き型言語ではそれほど使用されていないように感じます。さらにいうと言語によっては高階関数そのものが実装されていない場合もあります。
　手続き型言語になれた人からしたら、高階関数の書き方には癖があると思うのですが、一度覚えると表現の幅が広がるので覚えておいて損はない考え方です。　今回はC#の例で話を進めていきます。C#ではデリゲートと呼ばれる関数を格納するオブジェクトを用いて高階関数を書けるようになっています。C#ではC言語の関数にあたるもののことをメソッドと言うので、コードの説明には「関数」でなく「メソッド」と書いていますが意味合いは同じです。
　記述してあるコードですが動作確認を一切していません。そのままでは動かないかもしれないのであしからず。
　みんなが好きなLinqの話題は出てきません。　高階関数を用いる最大の利点は、処理のネストを浅くすることができることです。
　このような構造になっているクラスたちを…
　
　

　こんな感じに、フラットにできます。　上の図だけだと何が嬉しいのかわからないので、実際にどのような利用例があるかを2つほど書いておきます。　ファイル処理やwebサーバへのアクセスといった処理は、特に理由もなく失敗することがあるので、リトライをかけることがあります。
　そのような場合に高階関数を用いることによって、リトライが必要な処理と、リトライを管理する処理の2つを分けて書くことができます。　では実際に、高階関数を用いた場合と用いない場合ではどう違うかを見ていきたいと思います。　高階関数を用いない場合ですが、　Main →　FileCopyRetry　→　File.Copy　という階層になっています。　高階関数を用いた場合ですが、　Main →　File.Copy
　Main →　SomeRetry　という階層になっています。　高階関数を用いないコードと比べて　という利点が挙げられます。
　あと高階関数を用いたほうが、「File.Moveもリトライを実装してくれ」と言われた場合に、楽に作ることができます。　staicメソッド中は、staticでないメソッドの記述はできないのですが、メソッドを引数とすることで、staticでないメソッドを呼び出すことができます。
　staticメソッドで書きたいけど、staticでないメソッドを呼び出さなければいけないときに利用できるでしょう。


