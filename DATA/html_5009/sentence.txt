More than 3 years have passed since last update.やはり動かしたいということで、以下の参考の"Query-Chan" modelをやってみました。【参考】
[Unity] Oculus Goで3Dキャラクターを眺めよう参考の記事が良くかけていて、この記事はほぼ全て参考の記事のままですが、ウワン＠Unity初心者なりの理解もできたので、記載したいと思います。（１）Query-Chan modelをマイアセットに追加する
（２）GameObjectをHierarchyに新しく作成：CameraPivotと命名
　　このCameraPivot内（配下）にカメラを配置すると、CameraPivotを回転させることでカメラがキャラクターの周りを旋回する
（３）OVRCameraRigをいい感じの場所に移動
　　ここで一度Build&amp;RunしてOculusGoで確認しました
（４）CameraPivotにRigidbodyをくっつける。
（５）スクリプトでRigidbody.AddTorqueを利用
（６）スクリプトの追加の仕方
（７）HierarchyのQuery-ChanをドラッグしてAnim,Emo,Soundのところへ：とは？
（８）Unity上で実行する
（９）OculusGoで実行する
（１０）スクリプトの編集これは前回の記事と同じで、ストアのOpen in Unityを押してもらえれば以下のようにダウロードページが張り付きます。このページはもともとリンクされていたましたが、検索すると出てきます。

これをimport押してそのダウンロードしたすべてを再度ProjectにインポートすればOKです。これは、どういうことかというと、CameraPivotというGameObjectを張り付けて、そこにQuery-Chanを載せて（画面上の同じ位置に置いて）、さらにカメラを配下（Hierarchy上）に置いて、RigidBoyという重力や移動が可能なキャラを（GameObjectの属性として）追加してカメラがこのGameObjectの周りをまわるようにする（できる）ということみたいです。
※ここがこの上記参考記事のアイディアのいいところだと思います
　　ここで一度Build&amp;RunしてOculusGoで確認しました
移動前のカメラから見える風景はこんな感じでした（笑）
OculusGo ：足のある風景
なんか圧倒された。。。（笑）
このカメラをQuery-Chanがちゃんと見える位置に持っていきます。Rigidbodyは、「AddComponent-Physics-」で下の方にあります。
これって、すごく機能というかいろいろできるんですね。
Unity_Documentation_Rigidbody:Scripting
Unity_Documentation_Rigidbody:manual
つまり、「The Rigidbody can receive forces and torque to make your objects move in a realistic way. 」ということだそうです。そういう意味で今回はCameraを動かすためにTorqueを使いたくてこれ使っているわけです。
【蛇足】それにしても、Realistic wayというのが、重みありますね。つまりこういうのが仮想現実を支えているんですね。
【蛇足２】ただ、PivotはQuery-Chanのところにあって、カメラは離れたとこにあるのが。。。難しいそれでは、Rigidbody.AddTorqueのScript例を見てみましょう。
torque  Torque vector in world coordinates.
「Adds a torque to the rigidbody.
Force can be applied only to an active rigidbody. If a GameObject is inactive, AddTorque has no effect.」
ということだそうです。
See Also: AddRelativeTorque, AddForce.
この二つが似たようなScriptなんですね。
Parameters
x   Size of torque along the world x-axis.
y   Size of torque along the world y-axis.
z   Size of torque along the world z-axis.
なので、各軸周りのトルクです。以下が使い方みたいです。
public void AddTorque(float x, float y, float z, ForceMode mode = ForceMode.Force);
そして、肝心な使い方コードは因みに、AddForceの例は、turnの定義がないのと、
rb.AddForce(transform.forward * thrust);
だけ異なった例になっています。まず、以下のようにProjectのcreateのところでcreate-C#scriptを選んで名前「SceneManager」と入れます。

そして、追加されたC#scriptが最下段に現れたら、それをダブルクリックするとVisualStudioが立ち上がり、defaultのコードが入っています。それを以下のコードをコピペして置き換えます。そして上書きします。さらに、rigidbodyにスクリプトを追加するので、Hierarchyのリストからその親玉のCameraPivotにそのスクリプト「SceneManager」をドラッグドロップします。
すると、自動的に右側のInspector欄に４つの入力欄とともに現れます。
※ここが肝心で単にCameraPivotにscriptをaddするだけではこれが出てきません
ここで難問です。どうやったら、以下の状態に持っていけるか。。？？
この意味。。。これウワンはHierarchyでなく、横の画面でドラッグしてそれをあの欄のところへ持っていきました。今やってみると、確かにHierarchyでドラッグしてもできました。。。な～んだ。。ここまでくると、あとは実行するだけ。
Unity上で▶を押してみます。。ちゃんと動くと思います。
あの硬かったQuery-Chanがふんわり浮かんでいるのが驚きです。
そして、マウスをクリックするとその周りをぐるぐる回り始めます。そして、いよいよBuild&amp;Runそして▶押して、OculusGoで眺めると。。。そこにはドーンとQuery-Chanの美しいお姿がぶかぷか浮かんでいます！そして操作スティックの何かを押すと、。。。
まわります。。まわります。。。
これどんどん加速して、目が回る。。。
こんな感じです。。。
OculusGo：まわるまわるQuery-Chanがまわる♬これじゃかわいそうなので、減速させたい！
ということで、マウスの右クリックで原則させることにしました。
つまり、コードをこんな感じに変更しました。このコードでUnityでは左クリックで回転・加速。。右クリックで減速・逆回転となり、まあ平和なのですが、これがOculusGoだと、右クリックが無い。。。さてさて、ここからまたまた試行錯誤。。。
こんなのあるからいけるはずなのに、。。。
Input.GetMouseButtonDown
一応、以下のような入力定義のはずですが、これはRiftの話なのかな？
OVRInput
Riftなら
•Unity マニュアル/•XR/•Unity の xR 入力/•Oculus の入力/今日のところは、やんぬるかな。。。・初めてのぐるぐる回るの作りました
・Unity上では加速・減速・逆回転・ゆっくり眺めることができました・OculusGoのマウス右ボタンに代わるやり方ないのかなぁ～
　　ちなみに、右手左手の持ち替えはやってみたけど、同じですね（笑）
　　あと、戻るボタン連打すると効果小さいけど確かに減速しましたが、。。。？？【追記】逆回転できました！
反応が鈍かっただけで、以下のようにトルク大きくしたら、逆回転も反応して普通に回るようになった。。。こうなると自分の方に向かせたくなる♬
以下YouTubeで。。。
 Oculus-Unity連携：Query-Chanが回る。。逆回転も出来た
※因みに、引き金引く方が速いので右（１）、上面が遅い方で左（０）だった！
【追記２】並行移動要素を入れたら、よりゲーム性が増しました！
Unity-OculusGo連携：いよいよQuery-Chanとドッキング♬
こんな感じでクリックするたびに並行移動しています。
並行移動は以下のコードをkaiten等に入れて実現しています


