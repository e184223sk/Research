
using System;
using System.Linq;

namespace MyLibrary.Extensions
{
    /// &lt;summary&gt;
    /// Int32 拡張メソッドクラス
    /// &lt;/summary&gt;
    public static class Int32Extensions
    {
        /// &lt;summary&gt;
        /// 2進数表記の文字列に変換します。
        /// &lt;/summary&gt;
        /// &lt;param name="value"&gt;変換対象の値&lt;/param&gt;
        /// &lt;returns&gt;16進数表記の文字列（形式：11111111 ... 11111111）&lt;/returns&gt;
        public static string ToBin( this int value ) =&gt; value.ToAnyBase( 2, "11111111".Length );

        /// &lt;summary&gt;
        /// 16進数表記の文字列に変換します。
        /// &lt;/summary&gt;
        /// &lt;param name="value"&gt;変換対象の値&lt;/param&gt;
        /// &lt;returns&gt;16進数表記の文字列（形式：FF FF FF FF）&lt;/returns&gt;
        public static string ToHex( this int value ) =&gt; value.ToAnyBase( 16, "FF".Length );

        /// &lt;summary&gt;
        /// 8進数表記の文字列に変換します。
        /// &lt;/summary&gt;
        /// &lt;param name="value"&gt;&lt;/param&gt;
        /// &lt;returns&gt;8進数表記の文字列（形式：037 777 777 777）&lt;/returns&gt;
        public static string ToOct( this int value ) =&gt; value.ToAnyBase( 8, "777".Length );

        /// &lt;summary&gt;
        /// 10進数の値を、4桁区切りの基数表記の文字列に変換します。
        /// &lt;/summary&gt;
        /// &lt;param name="value"&gt;変換対象の値&lt;/param&gt;
        /// &lt;param name="toBase"&gt;変換対象の基数&lt;/param&gt;
        /// &lt;param name="length"&gt;変換対象の基数における、1バイトを表現可能な桁数(例: 16進数 = "FF" = 2 )&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        private static string ToAnyBase( this int value, int toBase, int length )
        {
            var strs = Convert.ToString( value, toBase ).ToUpper()
                              .PadLeft( length * sizeof( int ), '0' )
                              .Select( ch =&gt; ch.ToString() );

            return string.Join( string.Empty, strs.Select( ( s, i ) =&gt;
                                  ( i + 1 ) % length == 0 ? s + " " : s ) ).TrimEnd();
        }
    }
}

