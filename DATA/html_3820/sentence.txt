More than 1 year has passed since last update.カメラではなくて、テクスチャ単体に対して万華鏡の効果をつけたい。
テクスチャというか、3D空間に置いた、Planeオブジェクトに。万華鏡の素材を準備する。Delaunay triangle pattern makerDLできたテクスチャは、
1000px 2000px 大きかったので適宜リサイズする。Three.jsのPixel Shaders入門 - 気密インタラクティブミラーシェーダの例
ピクセルをある領域から別の領域にコピーする
画面の左側を右側にコピーするatan関数とatan2関数の意味と違い - 具体例で学ぶ数学
うん。（なんかそういうのがある。）「Create」→「Shader」→「Unlit Shader」Diff コード

+﻿Shader "Unlit/NewUnlitShader"
+{
+    Properties
+    {
+        _MainTex ("Texture", 2D) = "white" {}
+    }
+    SubShader
+    {
+        Tags { "RenderType"="Opaque" }
+        LOD 100
+
+        Pass
+        {
+            CGPROGRAM
+            #pragma vertex vert
+            #pragma fragment frag
+            // make fog work
+            #pragma multi_compile_fog
+
+            #include "UnityCG.cginc"
+
+            struct appdata
+            {
+                float4 vertex : POSITION;
+                float2 uv : TEXCOORD0;
+            };
+
+            struct v2f
+            {
+                float2 uv : TEXCOORD0;
+                UNITY_FOG_COORDS(1)
+                float4 vertex : SV_POSITION;
+            };
+
+            sampler2D _MainTex;
+            float4 _MainTex_ST;
+
+            v2f vert (appdata v)
+            {
+                v2f o;
+                o.vertex = UnityObjectToClipPos(v.vertex);
+                o.uv = TRANSFORM_TEX(v.uv, _MainTex);
+                UNITY_TRANSFER_FOG(o,o.vertex);
+                return o;
+            }
+
+            fixed4 frag (v2f i) : SV_Target
+            {
+                // sample the texture
+                fixed4 col = tex2D(_MainTex, i.uv);
+                // apply fog
+                UNITY_APPLY_FOG(i.fogCoord, col);
+                return col;
+            }
+            ENDCG
+        }
+    }
+}



Raw コード

Shader "Unlit/NewUnlitShader"
{
    Properties
    {
        _MainTex ("Texture", 2D) = "white" {}
    }
    SubShader
    {
        Tags { "RenderType"="Opaque" }
        LOD 100

        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            // make fog work
            #pragma multi_compile_fog

            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                UNITY_FOG_COORDS(1)
                float4 vertex : SV_POSITION;
            };

            sampler2D _MainTex;
            float4 _MainTex_ST;

            v2f vert (appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = TRANSFORM_TEX(v.uv, _MainTex);
                UNITY_TRANSFER_FOG(o,o.vertex);
                return o;
            }

            fixed4 frag (v2f i) : SV_Target
            {
                // sample the texture
                fixed4 col = tex2D(_MainTex, i.uv);
                // apply fog
                UNITY_APPLY_FOG(i.fogCoord, col);
                return col;
            }
            ENDCG
        }
    }
}



Diff コード

     }
     SubShader
     {
-        Tags { "RenderType"="Opaque" }
+        Tags { "RenderType"="Transparent" "Queue"="Transparent" }
         LOD 100
+        Cull off
+        Blend SrcAlpha OneMinusSrcAlpha 

         Pass
         {



Raw コード

Shader "Unlit/NewUnlitShader"
{
    Properties
    {
        _MainTex ("Texture", 2D) = "white" {}
    }
    SubShader
    {
        Tags { "RenderType"="Transparent" "Queue"="Transparent" }
        LOD 100
        Cull off
        Blend SrcAlpha OneMinusSrcAlpha 

        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            // make fog work
            #pragma multi_compile_fog

            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                UNITY_FOG_COORDS(1)
                float4 vertex : SV_POSITION;
            };

            sampler2D _MainTex;
            float4 _MainTex_ST;

            v2f vert (appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = TRANSFORM_TEX(v.uv, _MainTex);
                UNITY_TRANSFER_FOG(o,o.vertex);
                return o;
            }

            fixed4 frag (v2f i) : SV_Target
            {
                // sample the texture
                fixed4 col = tex2D(_MainTex, i.uv);
                // apply fog
                UNITY_APPLY_FOG(i.fogCoord, col);
                return col;
            }
            ENDCG
        }
    }
}



上にある、カメラに付ける系のコードを参考にして、
Diff コード

    Properties
    {
        _MainTex ("Texture", 2D) = "white" {}
+        _repeat ("Repeat", Float) = 5.0 // _repeat: number of reflections
    }
    SubShader
    {



            sampler2D _MainTex;
            float4 _MainTex_ST;

+            float _repeat;
+
            v2f vert (appdata v)
            {
                v2f o;




             fixed4 frag (v2f i) : SV_Target
             {
-                // sample the texture
-                fixed4 col = tex2D(_MainTex, i.uv);
+                half2 p = i.uv - 0.5;
+                float r = length(p);
+                float atn = abs(atan2(p.y, -p.x));
+                
+                float tau = 2.0 * 3.1416 ;
+                float sides = _repeat; 
+                atn = fmod(atn, tau/sides);
+                atn = abs(atn - tau/sides/2.0) ;
+                p = r * float2(cos(atn), sin(atn));
+
+                fixed4 col = tex2D(_MainTex, p+0.5);
                // apply fog
                 UNITY_APPLY_FOG(i.fogCoord, col);
                 return col;
             }



Raw コード

Shader "Unlit/NewUnlitShader"
{
    Properties
    {
        _MainTex ("Texture", 2D) = "white" {}
        _repeat ("Repeat", Float) = 5.0 // _repeat: number of reflections
    }
    SubShader
    {
        Tags { "RenderType"="Transparent" "Queue"="Transparent" }
        LOD 100
        Cull off
        Blend SrcAlpha OneMinusSrcAlpha 

        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            // make fog work
            #pragma multi_compile_fog

            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                UNITY_FOG_COORDS(1)
                float4 vertex : SV_POSITION;
            };

            sampler2D _MainTex;
            float4 _MainTex_ST;

            float _repeat;

            v2f vert (appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = TRANSFORM_TEX(v.uv, _MainTex);
                UNITY_TRANSFER_FOG(o,o.vertex);
                return o;
            }

            fixed4 frag (v2f i) : SV_Target
            {
                half2 p = i.uv - 0.5;
                float r = length(p);
                float atn = abs(atan2(p.y, -p.x));

                float tau = 2.0 * 3.1416 ;
                float sides = _repeat; 
                atn = fmod(atn, tau/sides);
                atn = abs(atn - tau/sides/2.0) ;
                p = r * float2(cos(atn), sin(atn));

                fixed4 col = tex2D(_MainTex, p+0.5);
                // apply fog
                UNITY_APPLY_FOG(i.fogCoord, col);
                return col;
            }
            ENDCG
        }
    }
}



そのままだと四角いので、まあるくしたいです。検索しても、よくわからなかったので
マスク用のテクスチャ用意してアルファ見て
透明だったら透明にしてる（語彙力...）
col.a = min(col.a, colA.a);Diff コード

    Properties
    {
        _MainTex ("Texture", 2D) = "white" {}
+        _MainTexA ("TextureA", 2D) = "white" {}
        _repeat ("Repeat", Float) = 5.0 // _repeat: number of reflections
    }
    SubShader



            };

            sampler2D _MainTex;
+            sampler2D _MainTexA;
            float4 _MainTex_ST;

            float _repeat;



                p = r * float2(cos(atn), sin(atn));

                fixed4 col = tex2D(_MainTex, p+0.5);
+                fixed4 colA = tex2D(_MainTexA, i.uv);
+                col.a = min(col.a, colA.a);
                // apply fog
                UNITY_APPLY_FOG(i.fogCoord, col);
                return col;



Raw コード

Shader "Unlit/NewUnlitShader"
{
    Properties
    {
        _MainTex ("Texture", 2D) = "white" {}
        _MainTexA ("TextureA", 2D) = "white" {}
        _repeat ("Repeat", Float) = 5.0 // _repeat: number of reflections
    }
    SubShader
    {
        Tags { "RenderType"="Transparent" "Queue"="Transparent" }
        LOD 100
        Cull off
        Blend SrcAlpha OneMinusSrcAlpha 

        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            // make fog work
            #pragma multi_compile_fog

            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                UNITY_FOG_COORDS(1)
                float4 vertex : SV_POSITION;
            };

            sampler2D _MainTex;
            sampler2D _MainTexA;
            float4 _MainTex_ST;

            float _repeat;

            v2f vert (appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = TRANSFORM_TEX(v.uv, _MainTex);
                UNITY_TRANSFER_FOG(o,o.vertex);
                return o;
            }

            fixed4 frag (v2f i) : SV_Target
            {
                half2 p = i.uv - 0.5;
                float r = length(p);
                float atn = abs(atan2(p.y, -p.x));

                float tau = 2.0 * 3.1416 ;
                float sides = _repeat; 
                atn = fmod(atn, tau/sides);
                atn = abs(atn - tau/sides/2.0) ;
                p = r * float2(cos(atn), sin(atn));

                fixed4 col = tex2D(_MainTex, p+0.5);
                fixed4 colA = tex2D(_MainTexA, i.uv);
                col.a = min(col.a, colA.a);
                // apply fog
                UNITY_APPLY_FOG(i.fogCoord, col);
                return col;
            }
            ENDCG
        }
    }
}



[追記] マスク用のテクスチャ用意しなくてもできた。

                 p = r * float2(cos(atn), sin(atn));

                 fixed4 col = tex2D(_MainTex, p+0.5);
-                fixed4 colA = tex2D(_MainTexA, i.uv);
-                col.a = min(col.a, colA.a);
+                fixed radius = 0.45;
+                fixed rr = distance(i.uv, fixed2(0.5,0.5));
+                fixed4 colA = smoothstep(radius, radius+0.02, rr);
+                col.a = min(col.a, abs(1-colA.a));
                // apply fog
                 UNITY_APPLY_FOG(i.fogCoord, col);
                 return col;
             }



ここも 上にある、カメラに付ける系のコードを参考にして、
Diff コード

        _MainTex ("Texture", 2D) = "white" {}
        _MainTexA ("TextureA", 2D) = "white" {}
        _repeat ("Repeat", Float) = 5.0 // _repeat: number of reflections
+        _rotation ("Rotation", Float) = 0.0 //  _rotation: initial angle in radians
    }
    SubShader
    {



            float4 _MainTex_ST;

            float _repeat;
+            float _rotation;

            v2f vert (appdata v)
            {



                float sides = _repeat; 
                atn = fmod(atn, tau/sides);
                atn = abs(atn - tau/sides/2.0) ;
+                atn += _rotation;
                p = r * float2(cos(atn), sin(atn));

                fixed4 col = tex2D(_MainTex, p+0.5);



Raw コード

Shader "Unlit/NewUnlitShader"
{
    Properties
    {
        _MainTex ("Texture", 2D) = "white" {}
        _MainTexA ("TextureA", 2D) = "white" {}
        _repeat ("Repeat", Float) = 5.0 // _repeat: number of reflections
        _rotation ("Rotation", Float) = 0.0 //  _rotation: initial angle in radians
    }
    SubShader
    {
        Tags { "RenderType"="Transparent" "Queue"="Transparent" }
        LOD 100
        Cull off
        Blend SrcAlpha OneMinusSrcAlpha 

        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            // make fog work
            #pragma multi_compile_fog

            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                UNITY_FOG_COORDS(1)
                float4 vertex : SV_POSITION;
            };

            sampler2D _MainTex;
            sampler2D _MainTexA;
            float4 _MainTex_ST;

            float _repeat;
            float _rotation;

            v2f vert (appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = TRANSFORM_TEX(v.uv, _MainTex);
                UNITY_TRANSFER_FOG(o,o.vertex);
                return o;
            }

            fixed4 frag (v2f i) : SV_Target
            {
                half2 p = i.uv - 0.5;
                float r = length(p);
                float atn = abs(atan2(p.y, -p.x));

                float tau = 2.0 * 3.1416 ;
                float sides = _repeat; 
                atn = fmod(atn, tau/sides);
                atn = abs(atn - tau/sides/2.0) ;
                atn += _rotation;
                p = r * float2(cos(atn), sin(atn));

                fixed4 col = tex2D(_MainTex, p+0.5);
                fixed4 colA = tex2D(_MainTexA, i.uv);
                col.a = min(col.a, colA.a);
                // apply fog
                UNITY_APPLY_FOG(i.fogCoord, col);
                return col;
            }
            ENDCG
        }
    }
}



ここも 上にある、カメラに付ける系のコードを参考にして、
C#

using UnityEngine;

namespace Kaleidoscope
{
    [ExecuteInEditMode]
    public class KaleidoscopeScript : MonoBehaviour
    {
        [SerializeField] int _repeat;
        [Range(0, 6.28319f)] [SerializeField] float _rotation;
        [SerializeField] Shader _shader;
        Material _material;

        //Set these Textures in the Inspector
        public Texture m_MainTexture, m_Alpha;

        void OnRenderObject()
        {
            if (_material == null)
            {
                _material = new Material(_shader);
                _material.hideFlags = HideFlags.DontSave;
                GetComponent&lt;Renderer&gt;().material = _material;
            }


            _material.SetFloat("_repeat", _repeat);
            _material.SetFloat("_rotation", _rotation);

            _material.SetTexture("_MainTex", m_MainTexture);
            _material.SetTexture("_MainTexA", m_Alpha);
        }
    }
}



この、_rotation の値をアニメーションします。AnimationClip6.2832 は、2π です。
 （2 × 3.14 ）おしまい。


