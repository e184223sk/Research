More than 3 years have passed since last update.AzureDataLake Analyticsの特徴として、UDFとして.NETアセンブリが使えるという点があります。Pythonなどに比べて、データ処理に特化したようなライブラリは少ないのですが、業務に特化していたり、特殊な要件の処理を行わせたい場合に、既存の.NETライブラリを使うと、直接解決できる場合が多いです。ここでは、.NETコードのU-SQLスクリプト内で使う方法をまとめます。基本型や基本のアセンブリなどは、U-SQLスクリプトの中に直接書くことができます。U-SQLの基本型があるなら、変数やコレクションを特に変換する必要もありません。C# Functions and Operators (U-SQL)数はそれほど多くありませんが、データ処理で必要そうな、基本的なオペランドはC#と共通のものが使えると思っていれば良いでしょう。SQLとプログラミング言語の接点で、行き来するときにいつも躓きますが、C#erとしてはこの仕様は非常にうれしいところです。ちなみに、linqなどもインラインで使えました。C# Operators
 ● ?: (Conditional)
 ● ?? (Null-Coalescing)
 ● =&gt; (Lamda)String Methods
 ● Compare
 ● CompareOrdinal
 ● CompareTo
 ● Concat
 ● Contains
 ● EndsWith
 ● Equals
 ● Format
 ● GetHashCode
 ● GetTypeCode
 ● IndexOf
 ● Insert
 ● IsNullOrEmpty
 ● IsNullOrWhiteSpace
 ● Join
 ● LastIndexOf
 ● PadLeft
 ● PadRight
 ● Remove
 ● Replace
 ● Split
 ● StartsWith
 ● Substring
 ● ToCharArray
 ● ToLower
 ● ToUpper
 ● TrimString Properties
 ● LengthObject Methods
 ● GetTypeDate &amp; Time
 ● DateTime to String
 ● String to DateTime
 ● Properties
 ● Some Methods
 ● Comparing DateTimes
 ● Some Operators
 ● Date Diff
 ● Add TimeSpan
 ● TimeSpan Plus TimeSpanMath Methods
 ● Abs
 ● BigMul
 ● Ceiling
 ● Floor
 ● Max
 ● Min
 ● Pow
 ● Round
 ● Sign
 ● Sqrt
 ● TruncateRandom Methods
 ● Nextちなみに、初期設定でビルトインされているアセンブリは以下です。
REFERENCE SYSTEM ASSEMBLY (U-SQL)Assemblies: Namespaces: Assemblies: Namespaces: 最も簡単なU-SQLの拡張がコードビハインドによるものでしょう。Extending U-SQL Expressions with User-Code以下のクラスをU-SQLから認識させたいとします。関数なども同様に参照可能です。コードビハインドを使う場合は、上記のコードを以下の"Script.usql.cs"にU-SQLスクリプトのコードビハインドに張り付けるだけです。以下のように、上記関数を直接呼び出すことができます。コードビハインドになっていることで、コンパイルなどのタイミングを同期でき、U-SQLとC#を順次変更しながら試すことができます。デバッグなども比較的辿りやすいエラーメッセージが出ますので、非常に使い勝手が良いです。XAMLでのコードビハインドなどでは、モデルはコードビハインドに書くななどが鉄則ですが、U-SQLでも以下の理由でコードビハインドを多用しすぎるのはあまり推薦されないと思います。そこで、U-SQLでは外部アセンブリの参照が可能です。以下のようなプロジェクトテンプレートから、U-SQLのクラスライブラリを作成可能です。これによりU-SQLスクリプトから直接呼び出せるライブラリを開発可能になります。これは以下のような最小限のプロジェクトを作成しますので、Class1.csに先ほどのコードをコピーしてコンパイルすればOKです。(.NETerでない人のために、アセンブリとはアセンブリ言語のことではなくて、.NETのコンパイル済みライブラリの事です。Javaでいうjarのようなもの。.dllという拡張性で保存されることが多いため、Cライブラリなどと混同されることもあるようですが、中身は別です。)上記で作成したアセンブリをU-SQLスクリプトから参照するには以下となります。
このようなU-SQLスクリプトを走らせることで、手元のdllを登録可能です。これは、実際にはローカルのフォルダから、ADLA環境へのアセンブリ登録になります。一度アセンブリが登録されれば、以下のようにライブラリの参照ができます。U-SQLでは、Rowごと、Rowをまたいだ処理に対して、Operatorという一連のスーパークラスを継承することで、U-SQLの集約処理などを拡張可能です。UDOと言いますが、以下のリンクにあるようにコードビハインドでも定義できます。
U-SQL ユーザー定義演算子 (UDO) の開発上記サンプルでは、 IProcessorという、最も単純な演算子を実装しています。これはデータ1行につき１行の出力を行うという単純な処理を行わせるものです。
以下のIProcessorインターフェイスから継承されたメソッドを定義することで、ユーザ定義の行変換処理を実現可能です。呼び出しは以下のように、USING句を用いて、Processorのインスタンスを生成した後、PROCESS句により対象となるデータを指定し、PRODUCE句で出力のカラムをU-SQL側から指定します。御覧のように、R dplyrのmutateのように同じデータフレーム内の処理を行うわけではなく、新しいカラム定義のデータフ
レームを１by１で作り出していくという感じです。その他、1:n や n:1などの行処理を行うことができるため、ほぼどのような集約、変換処理も記述可能になります。ユーザー定義エクストラクターユーザー定義アウトプッターユーザー定義プロセッサユーザー定義アプライヤーユーザー定義コンバイナーユーザー定義レジューサー


