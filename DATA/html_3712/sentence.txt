More than 1 year has passed since last update.今までのPrismはダイアログや別窓を表示しようと思ったら、使用するUserControlのxaml内にInteractionRequestTriggerとPopupWindowActionを指定してInteractionRequestをRaiseする、という流れが必要でした。
それに取って代わる機能としてIDialogServiceという機能が実装されていたため、preの段階で気が早いとは思いますが試してみたので投稿します。GitHubのIssueに詳細が載っています。実装したサンプルにも実際に動作するコードがあるので参考にしてください。ダイアログとして表示したいViewをユーザーコントロールで用意します。対になるViewModelも用意します。実装したサンプルの例でいうと
/Views/CustomDialogView.xamlと/ViewModels/CustomDialogViewModel.csになります。DialogViewModelBaseはBindableBaseとIDialogAwareを継承したものになります。サンプルはDialogViewModelBaseを使用せずIDialogAwareを継承して実装しました。ウィンドウがオープンされた際に呼ばれるOnDialogOpenedや画面を閉じる際に叩くRequestClose、閉じられる際の後処理を行うOnDialogClosedなどが用意されています。
画面遷移の際に使用するINavigationAwareのような感じで実装できました。App.xaml.csのRegisterTypes内に登録します。ダイアログ専用に登録するための拡張メソッド(RegisterDialog)が追加されていました。Prism.7.2.0.1038-preの時点ではViewとViewModelを明示的に指定するメソッドしか用意されていませんでしたが執筆時点で元ソースを見るとコメントアウト部のような書き方ができるメソッドが追加されていました。実装したサンプルだと/ViewModels/ContentViewModel.csのコンストラクタ付近になります。
ボタンを押されたらダイアログをShowDialogする部分を抜粋します。表示するダイアログを指定して、引き渡したいパラメータを指定して、コールバックを指定します。
ShowDialogの場合は実行するとメインウィンドウの方が止まるので地続きにかけました。
基本的な実装方法は以上です。はじめにでも書きましたが、今までのPrismだとダイアログを表示したい画面のxamlに毎回InteractionRequestTriggerとPopupWindowActionを指定する必要がありましたがIDialogServiceだとその必要がありません。今まで(IInteractionRequestAwareを実装するやり方)でも出来なくはなかったんですけどINavigationAwareと使用感が違いすぎてやりづらかったですがIDialogAwareはINavigationAwareと似たようなインターフェースになったので両方継承しても違和感なかったです。実装したサンプルでは共用の画面として実装してみました。今までダイアログと値のやり取りをするときはINotificationを継承したクラスを用意して入力したい情報も出力したい情報も一緒くたにプロパティとして指定していました。
IDialogServiceの場合は入力値はDialogParametersに値を詰めて渡します。
RequestNavigateのNavigationParametersのような使用感です。(実際DialogParametersはNavigationParametersを継承していました)
出力値はIDialogResultで返ってきます。IDialogResultのプロパティにDialogParametersがあるので出力値も自由に設定できます。IDialogAwareにはIconSourceというプロパティがあり、DialogWindow.xamlにバインディングされています。アイコンなどはスタイルで一括で指定すれば良いような気がするのですが、個別の画面でそれぞれ変えたい要望があるのでしょうか。
自分的には今回は必要なかったのでIconをバインディングしないダイアログ用にWindowを用意してDefaultのWindowと差し替えました。
/Views/CustomDialogWindow.xaml差し替える方法はApp.xaml.csのRegisterTypes内でRegisterDialogWindowを使用して指定します。注意点として差し替えるWindowはIDialogWindowを継承している必要があります。DialogService.Show(Dialog)の引数はの三つなのですがcallbackが必要ないときでも指定が必要です。parametersも不要なこともあるはずなのでオプション引数もしくはオーバーロードがあると嬉しいですね。言葉で説明するのが難しいんですが、実装したサンプルではダイアログ上で同じダイアログを呼ぶような再帰的な動作を実装しました。その際にのような挙動を行います(ShowDialog -&gt; ShowDialogでは発生しないし再帰しなければ問題ない)。
WindowのOwner周りの指定かと思って元ソースを確認したところDialogService.cs抜粋
C#:DialogService.cs
//TODO: is there a better way to set the owner
window.Owner = Application.Current.Windows.OfType&lt;Window&gt;().FirstOrDefault(x =&gt; x.IsActive);
となっていました。1.でダイアログがshowされる際にメインウィンドウがOwnerに指定されているはずなので問題ないような気がしますが解明できていません。PopupWindowActionよりかなり使いやすいです。正式なリリースがされる日を楽しみに待ってます。


