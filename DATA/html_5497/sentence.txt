More than 3 years have passed since last update.1.視点のズームイン・アウト
　マウスホイールで奥に回すと拡大、手前に回すと縮小。
2.視点の水平移動
　マウスホイールクリックしたままドラッグ。
3.視点の回転
　「alt」押したままドラッグ。
4.OBの移動
　ヒエラルキーで動かしたいOBを選択。ツール左から２番め（✚）を選択。回転はツール左から３番目。
5.OBの拡大縮小
　ツール左から４番目を選択。拡大縮小したい方向に伸ばす。
6.プロファイラ
　Gameシーン右上にある「Stats」を選択。FPSや描画ポリゴン数、バッチ数、ドローコール数などを確認できる。3Dゲームで処理が極端に重くなる場合の解析などに使う。より詳しいのを見たいときはWindow→Profilerで確認できる。代入には「=」を１つでいい。出力結果 30左辺と右辺が等しいときは「==」。if文→真のときの処理のみif-else文→真と偽のときの処理if・else-if文→if文を追加するときに使う変数は宣言した行を含む{}内でしか使えない。これを【変数のスコープ（使える範囲）】という。
わかりやすく考えると、同じ関数内では、同じインデントされた行内でしか使えない。配列の宣言「new」は「作る」に近い意味。
配列に値を代入したり、取り出したりするときは次のように番号を指定してやる。これは３番目の値を取り出している。２番めじゃないので注意。配列を書くときは、となるが、簡易的に書く方法として、と書く方法もある。これは要素数が事前にはっきりしている場合に使える。ちなみに、「配列型の変数名.Length」で、配列の長さを取得することもできる。C#では整数同士の割り算をしたときに、小数点以下が切り捨てられる。なので裏技として、最初に「1.0f」を掛けてやる。引数も返り値もない関数引数のある関数引数も返り値もある関数関数を実行した後は、関数の呼び出し部分が返り値に置換されるイメージ。
つまり、「answer = c;」　となり、answerにcを代入していると考えていい。　


