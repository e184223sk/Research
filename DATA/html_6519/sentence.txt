More than 3 years have passed since last update.先日DapperでDBから取得したList&lt;T&gt;型オブジェクトをExcelに出力するクラスを作りました｡
そのときに問題になったのは､単純にGetProperties()で取得してforeachしてもプロパティの列挙順は毎回同じにはならないという点です｡
何回かテストしてみたところ､全て定義順で出力されましたが､公式に保証しないと明言されている以上無視できません｡
DataTableを使えば何も考えずグルグル回せばいいのですが､それではDapperの旨味が無くなってしまいす｡
っていうかDataTableとか使いたくないし
プロパティをソートするお手軽な手段は.Net Frameworkに(たぶん)存在しないので自前で実装することにしました｡ソースはこちらC#でソートといえばみんな大好きLINQ
ただし､OrderByする基準を定義しなければいけません｡
名前順でいいのであればPropertyInfo.NameでソートすればOK
ただし今回はソート順を任意に指定したいので独自属性を付けてOrderByします｡
また､この記事ではExcelに出力するのは面倒なのでCSV形式で出力するサンプルを提示します｡まずDapperで扱えるエンティティクラスを作成します｡LastNameがFirstNameの前に定義されています｡
最終的には以下のように出力します｡今回の肝とも言える部分です｡
この属性を上述したクラスのプロパティへ設定し､ソートの基準とします｡Attributeクラスを継承し､AttributeUsage属性を設定することで独自属性を定義できます｡
コンストラクタにインデックスを渡してreadonlyなプロパティでその値を取得できるようにします｡適用可能範囲です｡
デフォルトでAllになっていますが､今回はプロパティにしか使わないのでPropertyを設定します｡複数設定の可､不可を指定します｡
デフォルトでtrueです｡
1プロパティに複数設定できると困るのでfalseを指定します｡継承の可､不可を指定します｡
デフォルトでtrueです｡
継承する必要がないのでfalseを指定します｡
実際に使う場合は用途によって切り替えてください｡SortAttributeをEntityクラスのプロパティ達に設定します｡後は値をソートしてCSV形式にして出力するだけです｡まず値を設定次にCSV出力クラスを作ります｡GetCustomAttribute()でSortAttributeを取得してキャスト､SortIndexプロパティで設定値を取得してその値を基準にソートしています｡
後はforeachで回してpropertyNames順に値を取り出して出力しているだけです｡ConvertCsvクラスに値を渡してCSV形式の文字列を取得､Console.WriteLine()で出力します｡うまく出力してくれました｡また､WhereでSortAttributeが設定されていないプロパティは除外しているので､任意のプロパティのみ出力したい場合にも対応できます｡
AgeプロパティからSortAttributeを削除します｡こっちもOKプロパティを任意順にソートする機会なんてあまりないと思いますが､何かの参考になれば幸いです｡
カスタム属性を今までほぼ使ったことがなかったのでいい勉強になりました｡
アイディア次第では色々と応用がききそうです｡


