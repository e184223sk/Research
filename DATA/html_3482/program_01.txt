
public static Complex[] FFT(Complex[] input, int bitSize)
{
    var dataSize = 1 &lt;&lt; bitSize;
    var reverseBitArray = BitScrollArray(dataSize);

    var output = new Complex[dataSize];
    for (int i = 0; i &lt; dataSize; i++)
    {
        // バタフライ演算のための置き換え
        output[i] = input[reverseBitArray[i]];
    }

    // バタフライ演算
    for (int stage = 1; stage &lt;= bitSize; stage++)
    {
        var butterflyDistance = 1 &lt;&lt; stage;
        var numType = butterflyDistance &gt;&gt; 1;
        var butterflySize = butterflyDistance &gt;&gt; 1;

        var w = Complex.One;
        var u = new Complex(Math.Cos(Math.PI / butterflySize), -Math.Sin(Math.PI / butterflySize));

        for (int type = 0; type &lt; numType; type++)
        {
            for (int j = type; j &lt; dataSize; j += butterflyDistance)
            {
                int jp = j + butterflySize;
                var temp = output[jp] * w;
                output[jp] -= temp;
                output[j] += temp;
            }
            w *= u;
        }
    }

    return output;
}

// ビットを左右反転した配列を返す
private static int[] BitScrollArray(int arraySize)
{
    var result = new int[arraySize];
    var halfSize = arraySize &gt;&gt; 1;

    result[0] = 0;
    for (int i = 1; i &lt; arraySize; i &lt;&lt;= 1)
    {
        for (int j = 0; j &lt; i; j++) result[j + i] = result[j] + halfSize;
        halfSize &gt;&gt;= 1;
    }
    return result;
}

