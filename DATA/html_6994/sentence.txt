More than 3 years have passed since last update.iOSでは当記事のとおり実装することで、アプリがバックグラウンドに移った場合でもいろいろと処理させることができます。
今回はバックグラウンドに移っても、処理が停止せず、一定タイミングでイベントを発生させる方法を書きます。
2016/9/25 追記
タイトルに「Xamarin.Forms.iOS」と書いていましたが、
誤解を招く記載であったため修正しました。
また、末尾のコメントにてshagaさんに教えていただきましたとおり、
位置情報を使わずともバックグラウンド処理は可能であるため、
純粋にバックグラウンドの処理を知りたい方は、コメント欄をご確認ください。
調べ方が良くなかったですね。反省・・・。
Xamarin.Formsでバックグラウンド処理を実装するにあたり、iOSの「位置情報サービス」の設定が必要となります。
そもそもiOSのバックグラウンド処理を行うには、位置情報を取得するCLLocationManagerDelegateクラスを継承し、ロジックを組み込む必要があり、PCLのみでは実装出来ない仕組みとなっています。（他の方法もあるらしいのですが今回は位置情報で実装します。）
そのため、iOS側の設定が必須であり、この設定が不足しているとバックグラウンドのロジックを実装しても正常に動きません。「バックグラウンドモード（Background Modes）」の「位置情報の更新（Location updates）」をチェックします。
「新しいエントリの追加」で「Location Always Usage Description」を追加し、文字列を設定します。
この設定は、位置情報を利用する際の確認メッセージで表示される文字列です。
この設定を行わなければ、以降のロジックを組み込んでもバックグラウンドで処理は行われません。
以下の赤枠部分に表示されます。
iOSプロジェクトに以下のクラスを追加します。TimerクラスのTimerCallbackで、定期的に処理させたいメソッドを呼び出す設定を行い、呼び出し先のCallWriteLineで、現在時刻を出力するだけのロジックを組み込んでいます。また、TimerクラスのChangeメソッドにて、インターバルを設定する必要があり、今回は1,000ミリ秒を指定し、1秒ごとにCallWriteLineを呼び出すようにしています。
※CLLocationManagerについては、当記事の最後のURLに詳細が記載されています。バックグランド処理を呼び出します。
今回はアプリを立ち上げた時点でバックグラウンド処理を呼び出すため、iOSプロジェクトのAppDelegate.csに記述します。前述までの設定やロジックを組み込み後、実際に起動させて確認します。
起動後にホームボタンを押し、ホーム画面の状態でもログが出力されていれば成功です。初回起動時に以下のメッセージが表示されますので、許可を選択します。
許可後にアプリケーション出力を確認し、1秒ごとにログが表示されることを確認します。
ホームボタンを押し、ホーム画面が表示されている状態で、2と同様にログが出力され続けていれば成功です。Takahiro Octopress Blog　－　Backgroundで位置情報を取得しよう！
http://grandbig.github.io/blog/2013/09/27/location-nstimer/


