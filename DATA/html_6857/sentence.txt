More than 3 years have passed since last update.本来、プログラムコードはまっとうなプログラマーが、まっとうなスケジュールで設計、実装すれば自然とテストしやすくなります。しかしながら、我々は楽園には住んでいないので、さまざまな理由で名状しがたきプログラムコードは作成され、厳しい選択肢を突き付けられます。選択①　トムデマルコのような管理者がプログラムを修正するようなスケジュールを引き直す。
選択②　オブジェクト指向を理解した増員が来て助けてくれる。
選択③　直せない。現実は非情である。Microsoft Fakesはこのような非情な現実を突き付けられた者にとっての一助になります。MicrosoftFakesのShim機能を使用することで、複雑に依存した機能を切り離して特定の箇所のみテストを実施することが可能になります。Microsoft Fakes を使用したテストでのコードの分離
https://msdn.microsoft.com/ja-jp/library/hh549175.aspxたとえば、データベースや別システムに通信するような機能のテストであっても、データベースや別システムがテストに都合のいいデータを返すように偽装できます。たとえば、現在時刻に依存したテスト対象や、ユーザ名に依存したものでもテストに都合のいい現在時刻やユーザ名を偽装して返すことができます。これにより、テスト対象に手を加えることなくテストを実施することが可能になります。ただし、VisualStudio2013ではPremiume以上、VisualStudio2015ではEnterpriseのエディションが必要になります。また基本的なVisualStudioでのテストコードの書き方は下記を参照してください。
http://qiita.com/mima_ita/items/55394bcc851eb8b6dc24VisualStudioEnterpriseは下記のページから無料試用版を取得することができます。
https://www.visualstudio.com/ja/downloads/なお、75万円くらいするのでなかなかハードルが高いです。(1)以下のような構成のプロジェクトを用意する
(2)テストプロジェクトの参照から偽装したいアセンブリを選択して右クリックをして「Fakesアセンブリに追加」を実行する。
(3)Fakesフォルダに拡張子がfakesのファイルが作成される。
構成管理にあげる場合は、このfakesファイルを上げること。(4)テストコードの実装(5)テストを実施するとShimで偽装した値が取得できることが確認できる。public/private/protectedのあらゆるスコープのメソッドを偽装できるが、privateの内部クラスや型をパラメータもしくは戻り値にする関数は偽装はできない。偽装するための関数は以下の命名規則で作成される。インスタンスのメソッドの場合：
【テスト対象の名前空間】.Fakes..Shim【クラス名】.AllInstances.【関数名】【パラメータ1の型】【パラメータ2の型】..【パラメータnの型】(クラスのインスタンス,パラメータ1,パラメータ2...)スタティックのメソッドの場合：
【テスト対象の名前空間】.Fakes..Shim【クラス名】..【関数名】【パラメータ1の型]【パラメータ2の型】..【パラメータnの型】(パラメータ1,パラメータ2...)プロパティの場合：
【テスト対象の名前空間】.Fakes..Shim【クラス名】.AllInstances.Get【プロパティ名】(クラス)
【テスト対象の名前空間】.Fakes..Shim【クラス名】.AllInstances.Set【プロパティ名】【パラメータの型】(クラスのインスタンス,パラメータ)偽装対象の関数のパラメータ数分だけ名称がながくなるので注意が必要。
古いVS2012だと長すぎると偽装用の関数が作成されない。（256あたり？）
VS2015だと、後方の文字を切って適正な文字に変換しているようだ。現在日付はテストをするうえでやっかいだが、これも偽装できる。(1)System.dllのfakesアセンブリを追加する。
(2)System.DateTime.Nowを偽装する。(1)Fakesフォルダの「mscorlib.fakes」を開く
(2)ShimGenerationにSystem.Environmentを追加する。(3)リビルドを行う。(4)下記のように偽装を行う。内部クラスはShim親クラス名.Shim内部クラス名という形で偽装が可能である。ベースクラスの偽装はベースクラス自体を偽装する必要がある。継承先のShimにはベースクラスのメソッドは存在しない。ジェネリックメソッドの偽装方法は型を指定したShimを作成する必要がある。ジェネリッククラスのShimを使うにはShimクラス名&lt;型&gt;を定義する必要がある。Shimは強力なツールであります。これにより多くのコードを通すことが可能になり、カバレッジも100%近くにすることができるかもしれません。しかし、適切に実行が検証されないテストは、無意味です。
ここでは、この強力なツールをどう利用してコードの検証を行うかを考えてみます。Shimのパラメータをチェックすることで、渡された値が期待値通りか？実行時のオブジェクトが期待通りの状態か検査すべきです。Shimの実行回数をカウントとするか、フラグで管理することによりShimが期待の回数実行されるかどうかを確認します。Shimが複数回実行される場合は、以下のようにリストで期待するパラメータとShimが返す値を設定します。今回は回数で返す値を替えたが、分岐を作ってパラメータが～だったら～を返すという方法でもいいでしょう。Microsoft Fakesを使用するとテスト対象の依存先のコードを偽装することができます。
これにより、テスト対象に手を加えずにテストコードを記述することができます。


