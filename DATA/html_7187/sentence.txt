More than 5 years have passed since last update.【手抜きUI】C#でCUIな人が楽するためのGUIフレームワーク（萌えあり？）　その１  (2版）からの続きです。その１でも書きましたが、普段VisualStudioやらない人が作った、生まれたてのソフトなんで生暖かい目で見守って下さると。。こちらではアプリケーションを組むにあたり、必要となる情報をまとめます。諸々事情がありまして、DLL化しました。つか、初めからしろって話で・・申し訳ございません。。
それに合わせて、設定ファイルの場所などを変更しています。CuiHelperはHTML系とCuiHelperLibプロジェクトで生成されるDLLから構成されます。んでもって、アプリケーションを開発する際は、そのDLLを用いてソフトを書き、CuiHelperContentsにあるHTML系のリソースを使って目的の機能を実現させます。CuiHelperは出力としてHTML5ベースのWebページを使っています。その関連ファイルをまとめました。以下構成です。デザインとかデフォルトの絵を変更とかが必要なければ、アプリケーションを書く人は特に修正をする必要はありません。必要に応じて画像を追加する事があるぐらいを想定しています。クラス構成は以下の通りです。GitHubにある CuiHelperApp を参考にして戴けると助かります（ぶっちゃけしょっぱいコードなんで見た方が早いかも）。ご自分のプロジェクトで以下の作業を行うことで、CuiHelperを利用したシステムを組むことが出来る…はず。まずCuiHelperLibが提供するツールや、アプリとして書かないといけない処理について説明します。その後でアプリケーションの作り方をもう少し具体的に説明する構成で進めさせて下さい。ちなみに一番簡単なのはGitHubに同梱したCuiHelperAppをベースにして自分のアプリ部分だけ修正する事だったりします。以下、ツールとして用意したオブジェクト／関数を紹介します。画面左下のイメージファイルと右下のテキストをこれで表示してくれます。imageには画像ファイル名を、serifは表示するテキストの文字列をそれぞれ指定します。要はリアクションをこれで設定できます。こんな感じで書きます。imageですが、絶対パスを指定する必要はありません。CuiHelperBotクラスはexeと同じフォルダにあるsetting.jsonに書かれたImagePathを利用します。例えばImagePathに「c:\\CuiHelperContents\\img\\」と記載されていれば、上記の例では「c:\\CuiHelperContents\\img\\output.png」が選択されます。fileは完成したHTMLファイルを保存するパス名を、textは生成したHTMLタグの文字列をそれぞれ指定して下さい。戻り値は成功(true)、失敗(false)です。パスを指定する際は、CuiApplication.csのメンバ変数m_contentsPathにHTMLシステムのルートパスが入っていますので、これを使う事が出来ます。以下の感じです。処理結果は原則HTMLのタグで書いてもらう事を想定しています。本関数はそのタグを元にHTMLファイルを生成します。headタグなどはテンプレートをそのまま使いますので、処理結果の記載だけ加工したタグを書けばよいです。ぶっちゃけ面倒であれば処理結果の文字列をpreタグで囲む（以下）のでも良いです。その他、tableタグで表とかは定番かと思います。その場合tableタグだけ作って本関数に食わせて下さい。urlで指定したHTMLファイルを表示させます。
パスを指定する際は、CuiApplication.csのメンバ変数m_contentsPathにHTMLシステムのルートパスが入っていますので、これを使う事が出来ます。以下はその例。MakeHtmlWithTemplateで作ったHTMLでも良いですし、全て自作した独自のHTMLでも良いです。ただしアクティブなページは現在想定していません。それするとWebBrowserが悲鳴を上げるかも。。SetURLと同じですが、こちらはHTMLを文字列で与えます。簡素なHTMLを表示する際に利用して下さい。本アプリでは設定ファイルの解析で使っています。実際にはDynamicJsonを使っています。アプリケーションでもDynamicJsonを使う際には、同ライブラリが提供するサービスを直ちに使う事が出来ます。しかしながらｍDynamicJsonは文字通り、記載したJSONのアイテム名で直接やりとりできるものなので、本クラスのAPIを使うよりはDynamicJsonをそのまま使う方が良いと思います。使い方などは以下URLを参照ください。既に参照していますのでusing入れるだけで使えます。こんなのクラスにせんでもええやろシリーズ第１弾。
staticですので注意　すみせんstaticおじさんで・・外部アプリを実行します。nameは実行するファイル名をフルパスで指定して下さい。exeの他関連付けが終わっているファイルでも可能です（pdfとか）。
argsは引数が必要なら与えて下さい（エディタで開けるファイル名とかが該当します）。
workはワークスペースディレクトリが必要な際に指定して下さい。argsやworkは不要ならnullで構いません。こんなのクラスにせんでもええやろシリーズ第２弾。
staticですので注意　すみせんstaticおじさんで・・ファイル選択ダイアログを出してユーザにファイルを選択させ、選択した結果のパスを戻します。
tittleはダイアログのタイトルに出るメッセージです（例えば「画像を選んでね」とか）。途中で選択がキャンセルされた際には、nullが戻ります。こんなのクラスにせんでもええやろシリーズ第３弾。
staticですので注意　すみせんstaticおじさんで・・pathで指定したテキストファイルを読み込んでその文字列を戻します。
失敗した場合はnullが戻ります。いや、fopenとかじゃないので、面倒だったので・・staticですので注意　すみせんstaticおじさんで・textの内容をpathで指定されたファイルに書き込みます。appendは既にファイルがある場合の対応で、trueなら上書き、falseなら既存の内容は消します。戻り値は成功でtrue,失敗でfalseです。staticですので注意　すみせんstaticおじさんで・・VisualStudioでのデバッグの際に使えます。以下のフォーマットで出力ウィンドウにメッセージを出します。本APIを使う際は、Debugでビルドしたdllを使って下さい。CuiHelperを使えば、.NETとかXAML系のリソースとかあまり考えずに出力動作を実装できます。本節では、処理完了後、その結果を表示させるコードの基本的な書き方を説明します。以下の例はCuiApplicationクラス内に記述する前提です。画面下側のImageエリアに画像を出し、TextBoxにコメントを出力するには、CuiHelperBotクラス Play関数を利用して以下のように書きます。pathですが、絶対パスを指定する必要はありません。CuiHelperはexeと同じフォルダにあるsetting.jsonに書かれたImagePathを利用します。例えばImagePathに「c:\\CuiHelperContents\\img\\」と記載されていれば、上記の例では「c:\\CuiHelperContents\\img\\output.png」が選択されます。上記にあるCuiHelperBrowserクラスの関数を使って出力を記述出来ます。テンプレを使うのであれば、head系とか細かい事は考えなくて良いです。ファイル名はindex.html以外でまぁ適当にお願いします。MakeHtmlWithTemplate関数で指定したタグからHTMLファイルを作成し、それをSetURLで指定する事で表示が出来ます。Bootstrapを使うことも可能です。このように表示されます（pronama_execute.jpgは手を挙げたポーズの画像です）

図１　表示例htmlファイルを作成するので、後からでもブラウザで確認が可能です。必要な関数はCuiHelperAppInterfaceにまとめています。以下です。アプリケーション開発者はこれを継承して実装する必要があります。以下、各関数の説明をします。初期化時に呼び出されます。bot、browserは上記で紹介したツールが入っているクラスです。通常はメンバ変数に設定しておいて、処理する際に使うことになるかと思います。contentsPathはCuiHelperContentsフォルダへのパスが入っていますので、必要ならこれもメンバ変数などに記録して下さい。アプリはここで以下のリソース設定を行います。1と2はbot.Playを呼び出して設定する感じです。上の項目も参考にしてみて下さい。3のComboboxに登録するデータですが、実際にはCuiHelperComboBoxDataクラスの配列データです。詳細はCuiHelperComboBoxData.csなどを見て戴く方が良いのですが、使うだけなら割と簡単です。以下、実際の定義例としてGitHubに置いたサンプルからの引用です。要は必要な項目分、CuiHelperComboBoxDataをnewして上記のようにNameとCommandの文字列を定義しておけば良いです。で、InitからMakeComboBoxDataを呼び出すようにします。この配列はクラスのメンバ変数に格納しておく事を想定しています。NameはComboBoxに表示される文字列です。
Commandはイベント時に通知されるメッセージです。つまり、ユーザが項目を選んだ際に「ユーザはこれを選んだよ」の「これ」に相当する文字列です。そして後で説明するPrepareButtonEvent、ButtonEvent辺りでこれを使います。他に実装するアプリとしての必要な初期化があれば行う感じです。これも初期化時、Initの後に呼び出されます。Initで生成したCuiHelperComboBoxData配列データを戻してあげてください。上記の例ならm_ComboBoxDataです。ユーザがComboBoxから項目を選んで、GOをクリックした際に呼び出されます。但しこれは事前通告みたいなイメージです。ここに実処理は実装しないで下さい。commandには選択した項目に該当するCuiHelperComboBoxDataのcommandデータが戻りますので、どの処理が選択されたかを判定する際に利用して下さい。textは入力用のTextBoxの文字列データが入ります。パラメータを必要とする際には利用してみて下さい。ここには事前処理を記述します。以下の例を想定しています。戻り値はmsecの時間となります。ここで設定された時間経過後、ButtonEvent関数が呼び出される仕組みとなります。0にすれば直ちに呼び出します。ユーザがComboBoxから項目を選んで、GOをクリックした際の実処理です。PrepareButtonEventの後に呼び出されます。引数の意味はPrepareButtonEvent関数と同じです。commandを見て、何を選択したのか判断する処理を記述して下さい。判断が出来たら処理の実体を記入し、処理が終わったら「CuiHelperのサービスを利用して表示さす例」で書いたような出力処理を記述します。ユーザがテキスト入力を行いENTERキーを押した際に呼び出されます。但しこれは事前通告みたいなイメージです。ここに実処理は実装しないで下さい。textは入力用のTextBoxの文字列データが入りますここには事前処理を記述します。以下の例を想定しています。戻り値はmsecの時間となります。ここで設定された時間経過後、ButtonEvent関数が呼び出される仕組みとなります。0にすれば直ちに呼び出します。ユーザがテキスト入力を行いENTERキーを押した際に呼び出されます。
PrepareTextBoxEventの後に呼び出されます。引数の意味はPrepareTextBoxEvent関数と同じです。入力文字列がtextに入ります。ここに処理の実体を記入し、処理が終わったら「CuiHelperのサービスを利用して表示さす例」で書いたような出力処理を記述します。ユーザが処理したいファイルをドラッグ＆ドロップした際に呼び出されます。但しこれは事前通告みたいなイメージです。ここに実処理は実装しないで下さい。filesには選択されたファイルのパスが配列で格納されています（複数選択にも対応しています）。textは入力用のTextBoxの文字列データが入りますここには事前処理を記述します。以下の例を想定しています。戻り値はmsecの時間となります。ここで設定された時間経過後、ButtonEvent関数が呼び出される仕組みとなります。0にすれば直ちに呼び出します。ユーザがテキスト入力を行いENTERキーを押した際に呼び出されます。
PrepareDragAndDropの後に呼び出されます。引数の意味はPrepareDragAndDrop関数と同じです。filesに指定されたファイルのパスが入っています。ここに処理の実体を記入し、処理が終わったら「CuiHelperのサービスを利用して表示さす例」で書いたような出力処理を記述します。まずは以下の作業をアプリケーションをビルドするプロジェクトで行って下さい。下ごしらえはこれぐらいです。双方向バインディングはCuiHelperLibがやる前提です。それだと困る場合は別途対応が必要になります（後述しますがこの場合はちょっと厄介）HTML系のリソース（html, css, 画像など）で追加あるようでしたら、CuiHelperContents内を修正・追加してあげて下さい。また、応答時の女の子の画像が別にあったりとか、キャラを変更したい際にはそれらの画像を用意して戴き、setting.jsonのImagePathで定義した場所に入れて下さい。CuiHelperFactoryクラスを利用して、コードを記述します。具体的にはGitHubに同梱したCuiHelperAppのMainWindow.xaml.csを見てもらった方が早いかと思います。同ソースのコメントを見ながら、同じようにインプリメントしてみて下さい。CuiHelperAppInterfaceを継承したクラスを生成し、その中に実際の処理を記述します。具体的にはお手数ですがGitHubに同梱したCuiHelperAppのCuiApplication.csとSample.csを見てもらえますでしょうか（手抜きでスミマセン）。サンプルではCuiHelperApplicationとSampleに分割しました。CuiHelperApplicationでは主にDLLと実際のアプリケーションとをどう繋げるかという観点で実装しました。そして実際の処理をSampleにて実装しています。CuiHelperでは基本的にGUI部分をDLLで行う前提ですので、双方向バインディングをDLL内部で行い、値の反映もDLL内部で行います。それ以外のケースは正直考えていない状態ですごめなさい。その場合は以下のように対策する事は可能です。ComboBoxはアプリ側で元々、設定・拡張が可能ですので、それでお願いしたい所です。以下使わせて戴きました。素晴らしいソフトウェアを提供して下さり、ありがとうございます。以上です。


