More than 3 years have passed since last update.ミニゲームを作ってUnityを学ぶ！[タンクウォーズ編]今回は前回配置した戦車モデルについて、以下のような移動する機能を実装していきます。前回配置した戦車オブジェクトにはアセットの開発者が作ったスクリプトが初めからアタッチされていますので、このままでもキーボードやマウスで操作することができます。ただこれではお勉強としての意味があまりありませんので、今回はアタッチされているスクリプトを全て取り除いて必要な部分をそれぞれ自作していくことにします。戦車オブジェクトはSD_Firefly_1.1という名前の空オブジェクトを親（ルート）とした、多数の部品オブジェクトの集合体です。この状態からSD_Firefly_1.1を除外してMainBodyを部品オブジェクトたちの親とします。
さらにMainBodyの名前をPlayerTankに変更します。ルートオブジェクトのSD_Firefly_1.1を除外することで、ほとんどの部品オブジェクトが正常に動作しなくなります。これはそれぞれの部品オブジェクトにアタッチされたスクリプトがSD_Firefly_1.1にアタッチされているID_Control_CSというスクリプトの参照を持っていることが原因です。めんどくさい作業ですが、ここで初めからアタッチされているスクリプトや不要なオブジェクトを全て取り除いてしまいます。プロジェクトを実行してみてコンソールに赤字のエラーログが出ない状態になれば完了です。_MyFolder直下に新しくPrefabsフォルダを用意し、その中に先ほど修正したPlayerTankのプレハブを書き出します。これにより以後のPlayerTankに対する修正は新しく紐づけた方のプレハブに反映されます。それではいよいよ、スクリプトの作成に取り掛かります。まずは戦車の本体となるTankModelクラス。
このTankModelがプレイヤーからの入力を受け取ってそれぞれの部品に指示を出すことで移動などのアクションを実現する、いわば部品に対するマネージャーとしての役割を担います。フィールド名がC#の命名規則であるPascalCaseではないのですが、これは筆者がJavaのCamelCaseとC#のPascalCaseを混在させてしまうために統一している自己流のクセですので、どうかご了承くださいませ。TankModelクラスはそれがアタッチされているオブジェクトについての3つのフラグを持ち、それぞれのフラグはプロパティになっています。また後述の[SerializeField]によってプレイヤーフラグをインスペクタから変更できるようになっていますので、このタイミングでインスペクタに表示されたmIsPlayerの項目にチェックを入れておきます。戦車本体を表すスクリプトが出来たので、次は戦車に移動機能を実装していきます。まずはAwake()で自身のRigidbodyを取得。
インスペクターから戦車の速度を設定できるようにしておきます。Update毎に特定キーの入力を監視し、「そのいずれかが押されている or 全てが押されていない場合」に対応するメソッドを実行しています。入力を受けた場合はmTempVelocityに速度ベクトルを格納し、その値をFixedUpdate内でRigidbody.velocityに適用しています。この段階で一度プロジェクトを実行して移動操作が正しく行えるかを確認してみると、2つの問題があることがわかります。原因を探るために戦車を横から眺めてみると、なぜか足回りがプルプルと震えています。これは戦車を構成するそれぞれの部品オブジェクトのColliderがお互いに干渉していると予想して、Layer Collision Matrixで当たり判定を見てみるもわからず。
というより部品オブジェクトのLayerがDefaultでもない空白になっています。
そこで元のスクリプトをいくらか確認。なぜレイヤーとその当たり判定の設定をコード上で行っているのか。
そしてインスペクタ上のLayerが空白になっているのかはわかりませんが、とりあえずの原因らしきモノを見つけたのでTankModelを修正します。元々のコードと同じようにAwake()でレイヤーの当たり判定を設定。
これで戦車がプルプルと震えてしまう現象が治まりました。これについては、今回の戦車に必要なのが見下ろし型画面での上下の移動 = Z座標のPosition変化のみですので、Rigidbodyに対してそれ以外の変化を制限することで対応します。これで戦車が予定通りの上下移動をしてくれるようになりました。移動機能を実装するためのTankMovementでは、Update()で入力を受け取りFixedUpdate()でその結果をRigidbodyに反映しています。これを最初のほうで示したように、マネージャー役であるTankModelがプレイヤーからの入力を受け取り、それぞれの部品に指示を出すことで移動などのアクションを実現するという構造に修正します。TankModelのAwake()で同じくアタッチされているTankMovementを取得し、新しく追加したUpdate()とFixedUpdate()でそれぞれTankMovementのメソッドを呼び出しています。また、入力の監視を行うのはこの戦車がプレイヤーかつ操作可能な状態の場合のみに制限しています。次にTankMovementで不要になったUpdate()とFixedUpdate()を削除し、TankMovelから呼び出されるメソッドをprivateからpublicに変更します。最後にプロジェクトを実行して、修正前と同じ挙動であることを確認します。次のページに進む
イントロダクションに戻る



