More than 3 years have passed since last update.ミニゲームを作ってUnityを学ぶ！[タンクウォーズ編]例えばタイトル画面のシーン、実際にプレイするシーン、結果表示のシーンなど、一般的なUnityのプロジェクトは複数のシーンから構成されています。今回のような小規模なゲームでは一つのシーンでプロジェクトが成り立ってしまいますが、ここではあえてプロジェクト（以後、ゲーム全体と称します）とシーンについてそれぞれ個別のスクリプトを使って管理・制御していきたいと思います。まずは現在のシーン（main.unity）を制御するスクリプトについて、土台を作っていきます。SceneMainクラスはINIT, PLAY, GAME_OVERの3つのうちいずれかの状態(mState)を持ち、その状態によってUpdate()の処理を分岐させています。続いてゲーム全体を管理するスクリプトの土台です。※ GameControllerは他のスクリプトと違ってオブジェクトにアタッチしません少しわかりにくいかもしれませんが、このGameControllerはプロジェクト全体で1つしかインスタンスが存在せず、同時にその唯一のインスタンスはプロジェクト内の全てのスクリプトから呼び出すことができます。この特性を利用することで本来はシーンが切り替わる際に破棄されてしまう値を残したり、複数のクラスから呼び出される定数などを一元管理することが主な役割です。では実際に、SceneMainからGameControllerのインスタンスを取得してゲーム全体に関係する設定をしてみます。SceneMainのAwake()でGameControllerのインスタンスを取得し、続いてGameControllerに定義されているInitGame()を実行しています。プロジェクトの流れとしてはとなります。TankModelのAwake()で実行しているレイヤー毎の当たり判定を決めるSetLayerCollision()はゲーム全体に関わる処理ですので、このタイミングでGameControllerクラスに移動しておきます。これでゲームの初期化処理としてFixedUpdateの更新頻度とレイヤー毎の当たり判定が設定できました。
TankModelの該当する部分のコードは不要となりましたので削除しておきます。これまでに登場した定数についてもGameCotrollerで定義しておきます。どちらも現在はBulletModelでしか使用していない定数ですので移動する意味は薄いのですが、タグ名をGameControllerで管理しておくというルールを作っておけば、登録しているタグ名を途中で変更することになった場合などにコード側の修正が容易にできます。そして実際にBulletModelで上記の定数を利用するコードがこちらです。これでゲーム全体の管理とシーンを制御する土台が完成しました。
ゲームの開始や終了など具体的な処理は次回以降に引き継ぎますので、今回は少し短いですがここで終了となります。次のページに進む
イントロダクションに戻る



