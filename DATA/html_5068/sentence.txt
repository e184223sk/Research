More than 3 years have passed since last update.ミニゲームを作ってUnityを学ぶ！[ひつじコレクション編]まず最初に、ゲーム内でプレイヤーが操作するキャラクターを作成していきます。
この記事では主に「移動制御・アニメーション・アニメーションイベント・ビヘイビア」を取り扱います。Unityプロジェクトを新しく作成します。
3Dにチェックが入っていることを確認したら名前を決めて新規プロジェクトを作成。
最初にシーンを保存しておきます。↑このあたりは自分の使いやすいように変更してください。プレイヤーの操作するキャラクターとしてSDユニティちゃんをインポートします。UNITY-CHAN! OFFICIAL-WEBSITE上記リンク先より、右上のDATA DOWNLOADから「SDユニティちゃん 3Dモデルデータ」と「ユニティちゃんシェーダー (Unity 5.4/5.5β　対応版)」をダウンロードして取得したファイルをダブルクリック。
現在開かれているプロジェクトにアセットをインポートします。お勉強のために、予め作成されているプレハブは使用せずにモデルデータのみを使用します。オブジェクトにアニメーションを実装するにはMecanim（メカニム）というUnityの機能を利用します。参考:  UnityのMecanimでキャラクターを動かす配置したPlayerオブジェクトにはAnimatorコンポーネントがすでにアタッチされていますので、こちらを使って必要なアニメーションを実装していきます。先ほど作成したPlayerAnimContollerをダブルクリックするとAnimatorウインドウが表示されます。
このウインドウ内にアニメーションクリップやアニメーション間の遷移条件を設定していくことでアニメーションを実装することができます。作成したState間を遷移するために必要なトランジション（矢印）を設定します。一番最初に作成したIdleにはEntryからすでに矢印が伸びています。
このEntryから続いているStateがデフォルトで再生されるアニメーションとなります。続いて矢印の方向に遷移するための条件を設定していきますが、まずは条件式に必要なフィールドを先に作成してしまいます。この2つのフィールドを使ってアニメーションの遷移条件を設定します。これでIdleステートからRunステートへ遷移する条件が設定できました。
続けてRunからIdleに戻る矢印を選択し、先ほどと同じ設定からConditionsの部分のみをIsRunがfalseになったときに変更して遷移条件を設定します。さらにIdleとRunそれぞれからDownに伸びる2つの矢印について、下表のように設定します。IdleまたはRunアニメーションが再生中にDoDownトリガーがONになったタイミングで即座にDownアニメーションが開始されます。AnimatorControllerの設定が完了しましたので、スクリプトからアニメーションを制御できるようにします。InitAnim()でアタッチされているAnimatorコンポーネントとAnimatorControllerで設定した遷移条件となるフィールドを取得しています。
またANIM_IDを定義し、Play()に与えることでそれぞれのアニメーションを再生する仕組みです。この時点でプロジェクトを実行するとユニティちゃんがIdle状態のアニメーションを再生し続けることが確認できます。続いて、プレイヤーの入力によってユニティちゃんを操作できるようにします。PlayerActionによってユニティちゃんが移動する流れは以下のようになります。移動処理に加えてダウンするアクションを実装します。
こちらは本来ゲームオーバー時に使用する予定のアクションですので、今回は動きを確認するだけの簡単な実装にしておきます。プロジェクトを実行するとWASDキーでユニティちゃんが画面を走り回り、右クリックすることでダウンアクションを行うことが確認できます。（ダウン後は操作できなくなります）現時点で移動やダウンは実行されるものの、コンソールログに以下のようなエラーが出力されてしまいます。これはOnCallChangFaceというアニメーションイベントについて、Playerオブジェクトにはそれを受け取る仕組みが無いというエラーです。インポートしたユニティちゃんアセットのアニメーションクリップにはイベントが設定されたものがいくつかあるようで、先ほどAnimationStateに設定した各クリップをProjectビューから確認してみるとRunning@loopとKneelDownには以下のようにイベントが設定されていました。エラーを修正するために、このイベントに対応するコードをPlayerAnimationに追加します。イベントで呼び出されるOnCallChangeFace()はアニメーションの特定タイミングでユニティちゃんの表情を変更するメソッドです。
このメソッドを利用するには今回のコード修正に加えて、アニメーションレイヤーを実装する必要があります。参考： Unityのレイヤー、アバターマスクを使って体の一部分を別のアニメーションにする
参考： Animatorの個人的な逆引きリファレンス_faceOnlyはユニティちゃんアセットに含まれている表情部分のアバターマスクです。
この設定によってFaceLayerは表情部分だけのアニメーションを定義するレイヤーとなります。続いて以下のようにStateを作成し、motion部分にはStateと同じ名前のクリップを「UnityChan/SD_unitychan/FaceAnimations/Humanoid/~」から探して設定します。加えて、先ほどコードを追加したPlayerAnimationについて、インスペクタ上からanimationsプロパティに今回使用する4つの表情アニメーションのクリップを設定します。実際にアニメーションを再生しているのは以下のメソッドです。まずSetLayerWeight()でFaceLayerのWeightを1に設定しています。
Weightはこのレイヤーのアニメーションをどのくらいの割合で他のレイヤーとブレンドするかという重みで、0~1の範囲で指定することができます。
ここではWeightが最大の1ですので、FaceLayerで設定しているアニメーションの100%がBaseLayerのアニメーションにブレンドされることになります。そして次行のCrossFade()ではstrに指定されているStateに0秒の時間をかけて遷移しています。この2つのメソッドによってアニメーションの再生を行っていますが、今回はブレンド手法をOverrideに設定しているためBaseLayerを上書きする形でFaceLayerのアニメーションが再生され、結果的に表情はFaceLayer、それ以外はBaseLayerのアニメーションが実行されているように見えます。プロジェクトを実行して移動やダウンの際にエラーメッセージが出ないことと、ユニティちゃんの表情が切り替わることを確認します。移動やダウンに対する表情変化は実装できましたが、アイドル状態に遷移したタイミングでの表情変化がまだ実装されていないため、移動して止まったときもユニティちゃんは驚き顔のままになってしまっています。
こちらを元の表情に戻すためにアニメーションビヘイビアという機能を利用します。ビヘイビアはMonoBehaviourを継承した通常のクラスとは異なりStateMachineBehaviourを継承していて、定義されているメソッドをオーバーライドすることで独自の処理を実装していきます。
また引数のAnimatorはオブジェクトにアタッチされているAnimatorコンポーネントの参照ですので、これを利用してGameObjectなどを取得することができます。今回はRunステートから他のステートに遷移するタイミングで判定を行い、必要な場合はユニティちゃんの表情をデフォルトに変更しています。これでユニティちゃんの表情が正しいタイミングで切り替わるようになりました。インポートしたユニティちゃんのアセットにはブレンドシェイプを用いたまばたきアニメーションを実装できるスクリプトAutoBlinkforSDが含まれています。こちらのスクリプトをPlayerオブジェクトにアタッチし、Ref_faceプロパティに以下の_face（表情部分のメッシュ）を指定することでユニティちゃんが自動的にまばたきを行うようになります。参考： Unity-Chanは二度笑う～ユニティちゃん表情モーション研究次のページに進む
イントロダクションに戻る

この作品はユニティちゃんライセンス条項の元に提供されています


