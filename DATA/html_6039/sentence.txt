More than 3 years have passed since last update.本エントリーは某社内で実施するデザインパターン勉強会向けの資料となります。
本エントリーで書籍「Java言語で学ぶデザインパターン入門」をベースに学習を進めますが、サンプルコードはC#に置き換えて解説します。  第1回：Iteratorパターン
第2回：Adapterパターン
第3回：Template Methodパターン
第4回：Factory Methodパターン
第5回：Singletonパターン
第6回：Prototypeタイプ
第7回：BuilderタイプFactoryメソッドはインターフェイスを提供して、具体的な実装はすべてインターフェイスの実装クラス側で行います。Abstract Factoryメソッドは関連する部品(クラス)も含めてインスタンスを生成してくれる手順のインターフェイスを提供します。
よって作りたい部品を渡せばfactoryインターフェイスを実装したfactoryメソッドで部品のインスタンス生成してくれます。LinkとTrayを統一的に扱うためのインターフェイス。URLを取り扱うクラス。
MakeHTML()の具体的な実装がないため、こちらは抽象クラス。複数のLinkやItemを集めるクラス。
MakeHTML()の具体的な実装がないため、こちらもLink同様に抽象クラス。継承先のPageクラスで生成したHTML形式の文字列をファイル出力する。
※ファイル出力のみの為、継承元のPageクラスに実装する。Item、Link、Trayクラスを生成するクラス。
ただしインターフェイスの定義の為、各クラスのインスタンス生成は
具体的な工場クラスで実装する。
また、生成する工場は呼び出し元から渡される引数をもとに生成する。Linkクラスの実装部。
引数で指定した見出し(caption)とURLをもとにHTMLタグを生成Linkクラスの実装部。
MakeHTML()の実装がありここでLinkとTrayからHTMLを生成する。
※ListItemとListTrayのMakeHTML()が実装されているため、イテレータ(ForEach構文)にて
インターフェイス側のIItemを指定しており、それぞれのMakeHTML()メソッドが呼び出される。Pageクラスの実装部。
ListTray、ListLinkにHead、bodyを付与してHTML形式の文字列を生成する。
※ListTrayと同様にForEach構文でIItemの型を指定している為、変数がListTray、ListLinkのいずれの型であっても
問題なくMakeHTML()が呼び出される。ListLink、ListTray、ListPageを生成する。作成したいHTMLを作る工場を指定してインスタンス生成する。
生成した工場クラスに作りたいリンクおよびページの見出し、URLを渡すことで
Tray、Link、Pageを生成する。・今後、工場（この場合、違うHTMLにて出力）するケースを増やす場合でも、新しく工場の実装を増やせば良い。（main処理は修正不要）。
・Itemクラスをインターフェイスにすることでlistクラス、Itemクラスは確実にMakeHTML()メソッドを実装されることを担保される。
・pageクラス（この場合、実装クラスのListpageクラス）のMakeHTMLクラスにおけるforEach構文
でイテレータのカウンタをitemにして実装することが可能。


