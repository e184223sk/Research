More than 1 year has passed since last update.前回に引き続きAOJの解説です。
前回の→AOJをC#で解く②~ITP1_2~今回はITP1_3です。
ITP1_3は繰り返し処理がテーマです。for文やwhile文が出てきます。問題
1000 個の "Hello World" を出力するプログラムを作成して下さい。制約
なし数値例
output
Hello World
Hello World
Hello World
Hello World
Hello World
Hello World
Hello World
.
.
.
.
.
.
Hello World解法
for文で1000回回すだけです。
for文の()内は (初期化式; 条件式; 更新式)を書きます。言い換えると、繰り返す処理において、最初の状態：何回繰り返すか：繰り返す時に行う初期値への変更です。コメント
簡単な処理なので今回は特にないです。問題
１つの整数 x を読み込み、それをそのまま出力するプログラムを作成して下さい。ただし、この問題は以下に示すようにいくつかのデータセットが与えられることに注意して下さい。
x が 0 のとき入力の終わりを示し、このデータセットに対する出力を行ってはいけません。制約数値例
input
3
5
11
7
8
19
0output
Case 1: 3
Case 2: 5
Case 3: 11
Case 4: 7
Case 5: 8
Case 6: 19解法
for文を使ったパターンとwhile文を使ったパターンを載せました。【for文を使った場合】for文で文字列を読み込み、xが0になったときにbreakさせるようにします。iをCaseのナンバリングにするため、1からスタートさせ、読み込む数値をくっつけてそのまま出力させます。以前も少し触れましたが、("Case {0}: {1}", i, x);という書き方はフォーマット出力というやり方です。【while文を使った場合】while文の()内は条件式です。つまりその式が真である限り永遠にwhile内の処理を繰り返します。ここではxが0の時処理が終わるので、xが0じゃない時に処理を繰り返すようにしたいので、i != 0が入ります。while文の条件式でiを使いたかったので、先に0以外の数値を適当に入れて宣言しときます。while文内で宣言しても使えないので。コメント
for文のほうが書きやすいですが、while文でも書けるようになっておくといいと思います！問題
２つの整数 x, y を読み込み、それらを値が小さい順に出力するプログラムを作成して下さい。
ただし、この問題は以下に示すようにいくつかのデータセットが与えられることに注意して下さい。x と y がともに 0 のとき入力の終わりを示し、このデータセットに対する出力を行ってはいけません。制約数値例input
3 2
2 2
5 3
0 0output
2 3
2 2
3 5解法
こちらの問題も二通りのせておきます。なおどちらもwhile文を使い、どちらもxとyが0になったときにbreakさせます。【条件分岐させるパターン】
文字列を読み込んだあとに、if文でどちらが大きいか判定し、出力させます。【Mathクラスのメソッドを使うパターン】
Math.Min(x, y)でxとyの小さい方を判定、Math.Max(x, y)でxとyの大きい方を判定します。これを使って出力させるやり方であればわざわざif文を書く必要はなくなります。コメント
一つの問題に対して、いくつか解き方があるので解けた後、他の人の回答をいろいろ見ていくとかなり勉強になると思います。問題
３つの整数 a、b、cを読み込み、aから bまでの整数の中に、cの約数がいくつあるかを求めるプログラムを作成してください。制約数値例
input : 5 14 80
output : 3解法
まず約数はNを割り切る整数のことですね。例えば、6の約数は1, 2, 3, 6です。
ここで求めたいのは、かつ整数が何個あるか、です。よって、cをa~bの数字で割っていき、割り切れた回数を数えれば解けます。【LINQを使った解法】
あまり見慣れないですが、LINQを使うとこうなります。
int型の配列xを宣言し、読み込んだ文字列をSplitで空白で分割し、stringからint型に変換するという処理をArray.ConvertAllで全要素に対して適用します。
int[] x = Console.ReadLine().Split(' ').Select(int.Parse).ToArray();でも同じ結果になります。これをEnumerable.Rangeを使って、x[0]から順番に、(x[1] - x[0] + 1)個目までの数のうち、x[2]を割り切れる数をCountさせます。Enumerable.Rangeの()内は(a, b)でaからbまでではなく、aから数えてb個までなので、上記のような書き方になります。コメント
「cの約数」かつ「a から b の間にある整数」という解の性質を出せれば、問題を解く手順は自ずと見えてくる問題だったと思います。文法よりも問題の定義をしっかりできるかどうかが肝要です。問題の難易度や処理のレベルが上がると、いくつか解法があるというパターンがあります。
その時にどっちをなんで選択したかをしっかり言語化できるといいと書きながら自分で思いました。状況に応じてどっちが向いてるなどがあると思うので。


