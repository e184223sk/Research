More than 3 years have passed since last update.開発環境：Unity 2017 + Visual Studio Community 2017
言語：Unity C#, C++DLLのある関数をループしている間に変数を取り出すには、どのような方法を使えばいいのか考察します。
今回は、DLL内で10ずつ変数をインクリメントしている中、1を加算する方法で成功か失敗か判断します。
1をインクリメントすることが可能ならば、その記述を任意の変数を用いた命令に変換することで希望の動作が実現できるはずだからです。この節では、以下のコードで記述されたDLLを使用します。
C#で使用する前提なので、関数はC++の命名規則に違反しているかも…。Startに無限ループで構成されたDLL内の関数「Loop」を使用し、Update()で値を返そうとしましたが、パソコンがフリーズしました。
普通に考えれば「Start」が呼び出された後「Update」が１フレームごとに呼び出されるので当たり前ですね。「Update」内にDLLの関数「LoopNotToUseWhile」入れ、イベント「onMouseDown」を用いる方法。
「onMouseDown」を用いることで、Unity上でDLL内の関数をループしている間にインクリメントできます。
また、この方法を用いる際には、「onMouseDown」の特性上「RunDLL.cs」を適用したオブジェクトにColliderを追加する必要があります。
当方の場合、Emptyオブジェクトでやっていたので、インスペクタから「Box Collider」を追加し、サイズを(100,100,1)にしました。
蛇足ですが、(100,100,100)だと上手く機能しなかったため、そのあたりは調節する必要があります。Update内にDebug.Logを入れているため、しっかり反応していればクリックした際に１ずつインクリメントした値が返ってくると思います。
これにより、イベントを使用することで任意のタイミングで変数をひっぱることができることが分かりました。「Update」のみで毎回同じ動作をしようとすると、順に処理されない、とかループされないといった動作を起こすことがあります。
「Update」関数の後に実行される関数「LateUpdate」を使用することで、確実に「Update」関数内の動作を実行した後に特定の動作をさせることができます。
イベント関数の実行順については、Unityのマニュアルを参照してください。
これは特定のタイミングで変数を抜き出すのではなく、毎回その値を使用して何か同様にループさせるのに適しています。このコードを実行すると分かるように、確実にループ動作をし、適切な順でインクリメントしていることがわかります。


