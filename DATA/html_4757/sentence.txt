More than 3 years have passed since last update.音声認識を使ったアプリをつくるなかで、音声認識アプリの、漢字、カタカナ・ひらがな混じりに悩まされたので、推定プログラムを書いて見ました。日本語の文章の音声認識で難しいポイントに、漢字の誤変換問題があります。文章の構造としては正しく認識されているのに、漢字が意図しない変換になってるために、単純には正誤判定ができない問題があります。今回作ってるアプリでは、複数の選択肢の日本語の中から、正解をテキストで提示し音声入力で読み上げて選択肢を選ぶタイプだったため、提示するテキストデータを使って、どの選択肢が読み上げられたのかを推定しました。鈴木さんに変って貰います期待値は選択肢2の「鈴木さんに代わってもらいます」が選ばれることです。認識結果の文字列と選択肢(choice)の一致する文字数をスコアとしてもっとも一致数の多い選択肢を選びます。これを実現するために認識結果の文字列を、各選択肢の文字の出現位置で置き換えていきます。見つからない文字は-1で埋めます。アプリをUnityで実装している都合上、言語はC#ですが、SwiftやKotlnにも簡単に移植できると思います。
コードの全容はGistで公開しています(https://gist.github.com/sarukun99/3e11a08c9b9aef0e07164fcf47bcff88)選択肢の１文字をkey、出現位置の配列をValueとするハッシュを内部に文字、ある文字Xを渡した時に、その出現位置を返すメソッドを持つクラスを作成します転置インデックスを使って、選択肢上の出現位置を保持するPathクラスを作成します。
コンストラクターで、使用するindexとsearch上の位置を渡します。Selectメソッドに、元文章中の出現位置posと文字sを渡します。文字を使って転置インデックス
から、位置の候補を選択しもっとも近い場所を採用します。枝狩りされたパスは後述する、全パスを作成することでカバーしています。この2つのクラスを使って選択肢を推定します。まずはじめに、全ての選択肢の転置インデックスを作成します。次に認識文字列を１文字づつずらしながら、Pathクラスを生成します。
これは認識結果の先頭に無関係の文章が入ることがあるため、下の展開の例のように、search途中から始まるPathを用意しています。また、認識文字列の１文字が複数の出現位置を持つ場合は、その全てについてPathを作成することで、途中分岐の枝狩りによる欠落をカバーします。日本語の音声認識の漢字問題は忌まわしき問題ですが、文法構造は正しく取れるようになってきてるため、簡単な推測を挟むことで格段に認識率を向上させることができました。


