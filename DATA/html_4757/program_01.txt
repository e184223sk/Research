
class Path {

        public Path(InversedIndex index, int node, int pos){
            mPos = pos;
            mNodes.Add(node);
            mIndex = index;
        }

        public void Select(int pos, string s) {
            if (pos &lt; mPos) { return; }
            var newPos = mIndex.Positions(s)
                               .Where(p =&gt; mPos &lt; pos)
                               .OrderBy(p =&gt; pos - mPos)
                               .FirstOrDefault();
            if (newPos &gt; 0)
            {
                mNodes.Add(newPos);
            } else {
                mNodes.Add(-1);
            }
        }

        public float Score() {
            return mNodes.Where(node =&gt; node &gt; -1).Count() / mIndex.source.Length;
        }

        public string Source() {
            return mIndex.source;
        }

        private InversedIndex mIndex;
        private List&lt;int&gt; mNodes = new List&lt;int&gt;();
        private int mPos = 0;
    }

