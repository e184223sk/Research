using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace CalendarCustom
{

    public class TestViewModel : INotifyPropertyChanged
    {
        public ObservableCollection&lt;TestModel&gt; TestCollection { get; private set; }

        public TestViewModel()
        {
            this.TestCollection = new ObservableCollection&lt;TestModel&gt;()
            {
                {new TestModel("first", new DateTime(2018, 11, 20)) },
                {new TestModel("second", new DateTime(2018, 11, 20)) },
                {new TestModel("third", new DateTime(2018, 11, 23)) },
                {new TestModel("forth", new DateTime(2018, 11, 28)) },
                {new TestModel("fifth", new DateTime(2018, 12, 20)) },
                {new TestModel("sixth", new DateTime(2018, 10, 20)) },
            };

            this.RaisePropertyChanged(nameof(this.TestCollection));

        }

        public event PropertyChangedEventHandler PropertyChanged;
        private void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            this.PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// &lt;summary&gt;
    /// テストサンプル
    /// &lt;/summary&gt;
    public class TestModel : INotifyPropertyChanged
    {
        private string _displayItem;
        /// &lt;summary&gt;
        /// 表示するもの(今回は文字列)
        /// &lt;/summary&gt;
        public string DisplayItem
        {
            get { return _displayItem; }
            private set
            {
                _displayItem = value;
                this.RaisePropertyChanged(nameof(this.DisplayItem));
            }
        }

        private DateTime _displayDate;
        /// &lt;summary&gt;
        /// 表示したい日付
        /// &lt;/summary&gt;
        public DateTime DisplayDate
        {
            get { return _displayDate; }
            private set
            {
                _displayDate = value;
                this.RaisePropertyChanged(nameof(this.DisplayDate));
            }
        }

        /// &lt;summary&gt;
        /// ctor
        /// &lt;/summary&gt;
        public TestModel(string displayItem, DateTime displayDate)
        {
            this.DisplayItem = displayItem;
            this.DisplayDate = displayDate;
        }

        public TestModel()
        {
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            this.PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

    }
}


