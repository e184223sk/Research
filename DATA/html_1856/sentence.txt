More than 1 year has passed since last update.モーショングラフィックスエンジン的なものを作りたい。
グラフィックスの描画はDXRを見越してDirectX12が使いたい。
でも、周りのUIはグラフィックスとは分離して、MVC的なフレームワークで作りたい。Unityでいいじゃんって話なのですが…WPFで色々なパラメータやリソースを表示編集できるWindowの中に、DirextXが描画するコントロールを置きたい。
ポリ一枚表示しただけですし、スライダーで動くわけでもなければリサイズにも対応していませんが、
一応上記画像のようにできました。WPFにはD3DImage/D3D11Imageというクラスが用意されており、それぞれDirextX9/11向けのRenderTargetを提供しています。
WPFDXInteropDirectX12向けのクラスは提供されていませんが、DirectX11-12間でテクスチャリソースの共有が可能です。
DirectX11のWPFDXInteropでは、WPFControlからIDXGIResourceが手に入るので、それからID3D11Texture2Dを取得し、RenderTargetViewを作成し描画します。
DirectX12の場合も同様にIDXGIResourceからID3D12Resource1を取得してRenderTargetViewを作成して描画すればいいはずです。
（DirectX12ではTextureやConstantBufferなどのインターフェイスとしての垣根がなくなり、ID3D12Resource1に統一されました。）しかし、いざ実装してみようとすると、SwapChain使わない場合のやり方などがよくわからなかったので、確実なHwndHostを使ってみました。
ID3D12CommandQueue::ExecuteCommandListsの後、IDXGISwapChain::Presentを呼ばずに、描画完了も待たずにリターンすればいいのでしょうか？WPFコントロールから渡されるIDXGIResourceはバックバッファなんですかね？とすると、描き切れなかったら半端なRTが表示されちゃう？？？DirectX12のサンプルなどでは生Win32でGUIを生成して、ルートのWindowに対して描画をしています。
Win32のGUIというのは、以下のようなもので前半部がWindowの初期化、後半部がいわゆるUpdateやイベント（メッセージ）処理です。
HWNDという変数が出てきますが、これはFormやWPFでいうWindow/FormやControlに相当するもので文字通りのウインドウからボタンまでWindowとして扱い、HWNDで管理します。
DirectXにHWNDを指定して描画させる場合、このWindowの矩形領域内に描画することになります。それで、HwndHostはこのWINAPIの枠を提供してくれます。
実質的にはWindowの矩形領域を提供してくれる＆HWNDを保持管理してくれます。ここにうまいことDirectX12の初期化処理とUpdate(Render)処理を挟みます。
この方法の最大の利点は、Win32で作る場合とほとんど変わらない…というかWin32との互換性維持のための機能という点です。
DirextXはそもそもゲームを作るためのAPIなので外部GUIは不要でWindowいっぱいに描けばいいので、手に入るサンプルやノウハウも大抵の場合は生Win32のルートWindowに描いています。それらを参考にできます。ということで、このHwndHostとWin32とDirectX12合体させてみたのがこちらになります。
DirectX12の処理は「DirectX12 Programming Vol.1」の付録のサンプルコードを流用させていただきました。DLLImportするときはImportするDLLが参照しているDLLもexeのディレクトリに並べないとDllNotFoundExceptionが出ます。
この例では、02_SimpleTriangle.dllがdxcompiler.dllなどを参照していてハマりました。全文は こちら（Github）WPFのコントロールは一枚のDirectX9で描かれています。そこに無理やりWin32のウインドウを乗っけてそこにDirextX12で描画している訳です。
なのでWPFコントロールでサンドイッチすることができません。詳しくは 技術領域の概要（MSDN）DirectX12の情報…少なすぎ！！
最近のMSの動向としてはDirectXを触るのは本当に限られた場合だけで、基本的にはUnityとか使ってね！君たちはDirectXなんて知らなくていいよ！ってスタンスですし、いまだにDirectX9が現役（？）ですからね。ゲームの専門学校などでもいまだにDirectX9と聞きます。確かにシンプルで初学向けなのかもしれませんが。
MSDNは情報「量」だけは結構ありますし、「DirectX12 Programming Vol.1」のおかげで基本的な使い方は理解できましたが、少し外れたことを、応用したいと思うと似たような例が見つかりませんね。


