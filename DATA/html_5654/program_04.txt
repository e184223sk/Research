
public struct MyTaskMethodBuilder&lt;T&gt; {
    private AsyncTaskMethodBuilder&lt;T&gt; _methodBuilder;

    public static MyTaskMethodBuilder&lt;T&gt; Create() =&gt;
        new MyTaskMethodBuilder&lt;T&gt; { _methodBuilder = AsyncTaskMethodBuilder&lt;T&gt;.Create() };

    public void Start&lt;TStateMachine&gt;(ref TStateMachine stateMachine)
        where TStateMachine : IAsyncStateMachine {
        _methodBuilder.Start(ref stateMachine);
    }

    public void SetStateMachine(IAsyncStateMachine stateMachine) {
        _methodBuilder.SetStateMachine(stateMachine);
    }
    public void SetException(Exception exception) {
        _methodBuilder.SetException(exception);
    }
    public void SetResult(T result) {
        _methodBuilder.SetResult(result);
    }

    public void AwaitOnCompleted&lt;TAwaiter, TStateMachine&gt;(
        ref TAwaiter awaiter, ref TStateMachine stateMachine)
        where TAwaiter : INotifyCompletion
        where TStateMachine : IAsyncStateMachine {
        _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);
    }
    public void AwaitUnsafeOnCompleted&lt;TAwaiter, TStateMachine&gt;(
        ref TAwaiter awaiter, ref TStateMachine stateMachine)
        where TAwaiter : ICriticalNotifyCompletion
        where TStateMachine : IAsyncStateMachine {
        _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);
    }

    public MyTask&lt;T&gt; Task =&gt; new MyTask&lt;T&gt;(_methodBuilder.Task);
}

