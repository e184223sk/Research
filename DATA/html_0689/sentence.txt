近々.NET、C#の立ち上げプロジェクトに参画するので.NETについて色々勉強中
今回は単体テスト自動化について調べてみた。
.NETではNUnit、xUnit、MSTestの3種類がメジャー？な自動テストFWらしいので
一番初めに目についたNUnitを使用してみることにしました。.NET：3.1.401
C#：8.0
NUnit：3.12.0まず、テスト対象のプロジェクトを作成。今回は下記のような電卓クラスを作成。次にテスト用プロジェクトを作成。
プロジェクトテンプレートにnunitがあるので、それを使用。
Javaとは違いテスト対象プロジェクトとテスト用プロジェクトは分けるものらしい。次に、以下のコマンドで
テスト対象のプロジェクトが属するソリューションと同じソリューションに設定する。
また、テスト対象プロジェクトを参照できるように設定する。これで事前準備は完了。
階層は下記のような感じに。Assertクラスには、テスト対象機能を評価する様々なメソッドが用意されており、
これらを使用してテスト評価対象の機能が想定した結果となるかどうかを評価する。
Assert#Thatメソッド以外のテスト評価メソッドを
Classic Modelと言う。例えば、上記のようなAreEqualメソッドを利用の場合、
第1引数に想定される値、
第2引数にテスト対象機能の実行結果を指定すると、
2つの値が一致する場合テスト結果OK、異なる場合テスト結果NGという結果が得られる。下記のように第3引数にNG時のメッセージを指定することも可能。Classic Modelのよく使いそうなメソッドは下記。基本的に各メソッドの引数に評価対象機能の結果（戻り値）を指定する感じだ。その他Classic Modelメソッドは下記参照。
Classic Modelメソッド一覧Assert#Thatでアサーションするやり方。
制約（評価方法）をロジカルに書くことが可能。
第1引数に評価対象、第2引数に制約（評価方法）を記載する。上記の場合、ClassicModelのときと同じように
テスト評価対象と想定結果が一致しているかを評価できる。下記のように制約を複数組み合わせることも可能。上記の場合はテスト評価対象の実行結果が1超えかつ4未満であることを評価している。制約（評価方法）のためのクラスやメソッドは下記を参照。
Constraint Model
制約一覧テストロジックを実装したメソッドが
テストメソッドであることを認識させるための注釈をメソッドに付ける。また、テストの事前・事後に処理を行いたい場合、
事前・事後処理用の注釈を実装したメソッドに付与する。よく使いそうなのは下記。単体テスト環境でDBを使う場合のコネクション生成・破棄や設定ファイル読み込みなど、
初回と最後に1度だけやっておきたい処理はOneTimeSetUpやOneTimeTearDown に書くといいかも。
テストメソッド間でリセットしておきたいこと（例えばDB更新したのを戻すなど）はSetUpやTearDown に書くとよいと思う。また、TestCase注釈はテストメソッドの引数にパラメータを指定することができ、
かつ、同一テストメソッドに対して異なるパターンのパラメータを複数指定することができる。このように指定した場合、AddTestParamテストメソッドが指定したそれぞれのパラメータで3回実行される。
この注釈はかなりあるので、また今度色々試してみたい。Attribute一覧ソリューション直下、もしくはプロジェクトフォルダ直下でdotnet testを打つと
テストが実行される。テスト結果NGの場合は、以下のように出力される。(Assert.AreEqualの場合)なお、ソリューションフォルダ直下でdotnet testを打った場合、
ソリューション配下の全てのプロジェクトのテストが実行される。
テスト実行が特定のプロジェクトだけでよいのであれば、
そのプロジェクト配下に移動してdotnet testを打てばいい。とりあえず.NETにおける単体テスト実装を最低限できるところまではできた。
アサーションのモデルはClassic Modelの方が直感的でわかりやすそうだし、
Constraint Modelだと制約をロジカルに実装するとそこにバグが生まれやすそうではある。
ただ、複数条件でチェックしたいときとかありそうかなぁ。あと、MicroSoftの単体テストのベスト プラクティスは分かりやすく
テスト実装の標準化に使ってもいいかも。
.NET Core と .NET Standard での単体テストのベスト プラクティスAssertメソッド、Attributeは書いたもの以外も沢山あるので
また今度いろいろ試してまとめてみたい。NUnit公式
MicroSoft解説ページ


