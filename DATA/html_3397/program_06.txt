
using ScottPlot;
namespace ScottPlotSample1
{
    /// &lt;summary&gt;
    /// Interaction logic for MainWindow.xaml
    /// &lt;/summary&gt;
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            double[] values1 = DataGen.RandomWalk(100_000);
            double[] values2 = DataGen.RandomWalk(10_000);
            double[] values3 = DataGen.RandomWalk(1_000);
            WpfPlot1.Plot.AddSignal(values1, sampleRate: 1000);
            WpfPlot1.Plot.AddSignal(values2, sampleRate: 100);
            WpfPlot1.Plot.AddSignal(values3, sampleRate: 10);

            //描画されているSignalPlotをリスト化
            var Signals = GetPlotableList&lt;ScottPlot.Plottable.SignalPlot&gt;(WpfPlot1);

            //現在のY軸をリスト化
            var YAxes = WpfPlot1.Plot.GetSettings().Axes.Where(x =&gt; x.IsVertical == true).ToList();
            //足りないY軸を追加
            for (int YAxisIndex = YAxes.Count; YAxisIndex &lt; Signals.Count; YAxisIndex++) //軸インデックスがない場合は追加する
            {
                YAxes.Add(WpfPlot1.Plot.AddAxis(ScottPlot.Renderable.Edge.Left, YAxisIndex));
            }

            //各軸に描画
            for (int No = 0; No &lt; Signals.Count; No++)
            {
                Signals[No].YAxisIndex = No;
            }

            //オートスケール
            WpfPlot1.Plot.AxisAuto();

            //X軸を表示制限
            var AxisLimits = WpfPlot1.Plot.GetAxisLimits();
            WpfPlot1.Plot.SetViewLimits(AxisLimits.XMin, AxisLimits.XMax);

            //各Y軸の設定（色指定、ラベル、表示制限）
            for(int No = 0; No &lt;YAxes.Count; No++)
            {
                YAxes[No].Ticks(true);
                YAxes[No].Color(Signals[No].Color);
                YAxes[No].Label($"Signal{No}");
                AxisLimits = WpfPlot1.Plot.GetAxisLimits(yAxisIndex: YAxes[No].AxisIndex);
                YAxes[No].Dims.SetBounds(AxisLimits.YMin, AxisLimits.YMax);
            }

        }

        /// &lt;summary&gt;
        /// WpfPlotの中にあるすべてのTのリストを返す
        /// &lt;/summary&gt;
        /// &lt;typeparam name="T"&gt;ScottPlot.Plottable Type&lt;/typeparam&gt;
        /// &lt;param name="fp"&gt; WpfPlot&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        private List&lt;T&gt; GetPlotableList&lt;T&gt;(WpfPlot fp)
        {
            List&lt;T&gt; Plotables = new List&lt;T&gt;();
            var AllPlottables = fp.Plot.GetPlottables();
            foreach (var Plottable in AllPlottables)
            {
                switch (Plottable)
                {
                    case T Plotable:
                        Plotables.Add(Plotable);
                        break;
                }
            }
            return Plotables;
        }
    }
}

