More than 3 years have passed since last update.EC-CUBE3 になって、 Web API のプラグイン が登場しました。
でも、 まだβ版だから不安 とか、 うちは2系なんだけど という方も多いはず。EC-CUBE で API の開発をする上で、難易度が高いのが認証部分。
商品データを扱う認証不要な API を作るのは簡単ですが、 API で扱いたいのは、注文や顧客データのような、機密性の高いデータである場合が多いです。EC-CUBE3 の API プラグインでは、OAuth2.0/OpenID Connect の認証 を採用していますが、 PHP ではサポートしているライブラリも少なく、実装がものすごく大変です。2016年に .NET Core がオープンソースとしてリリースされ、 Windows だけではなく、 Linux や Mac の環境でも利用できるようになりました。
また、 C# は、認証関連のライブラリや実装例も豊富です。EC-CUBE だからって PHP で書く必要は無くて、 DB のデータを RESTful な API で安全に操作したいだけだから、 C# で書いてしまえ！というやつです。microsoft.com/net/core から .NET SDK をインストールしておきます。
上記のチュートリアルでは、 Mac や Linux の方は Visual Studio Code をおすすめされますが、 vim しか使いたくないんだよ！という方や、 PhpStorm が慣れてるから〜という方にも、便利な開発ツール が用意されていますので安心してください。
ちなみに、僕は Omnisharp Emacs を使ってます。あ、別途 EC-CUBE をインストールしておいてくださいね。 2系でも 3系でも大丈夫です。
手っ取り早く済ませたい方は、 1行のコマンドでローカル環境にEC-CUBEを最速でインストールする のがおすすめです。まず、ソリューションを作成します。続いて、 EC-CUBE API プロジェクトを作成します。プロジェクトに必要な nuget パッケージを追加していきますお使いの DB に対応した EntityFrameworkCore パッケージをインストールします。dotnet ef コマンドを有効にするため、 EccubeAPI/EccubeAPI.csproj ファイルを開いて、 DotNetCliToolReference の書かれている &lt;Items&gt; に以下を追加します。EccubeAPI ディレクトリで dotnet restore コマンドを実行すると、 dotnet ef コマンドが使用できるようになります。以下のコマンドを実行します。 ConnectionString 及び Provider は、使用している DB に応じて変更します。ConnectionString は、こちらを参考にこのコマンドで Models 以下に、各テーブルに対応するモデルクラスが生成されます。DB とプログラムが接続できるよう設定します。Models/eccubeContext.cs を開き、コンストラクタを追加します。Startup.cs の ConfigureServices メソッドと Configure メソッド に接続設定を追記します。appsettings.json に ConnectionString を追記します。商品データを取得するためのコントローラクラスを作成してみます。以下のコマンドでローカル環境に Webサーバーである Kestrel が起動します。http://localhost:5000/swagger/ui/index.html へアクセスすると、 Swagger UI が表示され、 先ほど作成した API のテストが可能です！さっそく curl コマンドで API にアクセスしてみましょう！.NET Core を使用することで、大変少ないコード量で API を作成することができました。
古い EC-CUBE でも、 .NET Core の動作する環境からデータベースにさえ接続できれば動作させることが可能です。
また、 PHP に比べ、大変パフォーマンスが良いのも特徴です。いつもは PHP で頑張ってる EC-CUBE プログラマーな方にも、ぜひチャレンジしていただきたいです。


