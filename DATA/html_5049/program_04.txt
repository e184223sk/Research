

        public void LoadStage(int stageId)
        {
            // 指定されたステージファイルを読み込んで1行ずつ処理
            string filePath = "stage_" + stageId;
            TextAsset textAsset = Resources.Load(filePath) as TextAsset;
            string text = textAsset.text;
            string line;
            using (TextReader reader = new StringReader(text)) // usingとは、処理終わりにstreamの解放を自動で行う構文（finally句でDisposeを実行するコードと同じ）
            {
                while ((line = reader.ReadLine()) != null)
                {
                    // ステージサイズ
                    if (line.StartsWith("@size"))
                    {
                        line = REGEX_WHITE.Replace(line, "");
                        string[] mapSize = line.Split(DELIMITER, System.StringSplitOptions.RemoveEmptyEntries);
                        mStageX = int.Parse(mapSize[1]);
                        mStageY = int.Parse(mapSize[2]);
                        mStageMap = new int[mStageY, mStageX];
                        InstantiateFloor();
                        continue;
                    }

                    // ステージ構造（ブッシュ）
                    if (line.StartsWith("@bush"))
                    {
                        // ステージ構造は16進数表記の文字列なため、10進数のint配列に変換
                        StringBuilder sbStage = new StringBuilder();
                        for (int y = 0; y &lt; mStageY; y++)
                        {
                            sbStage.Append(reader.ReadLine());
                        }
                        int start = 0;
                        for (int y = 0; y &lt; mStageY; y++)
                        {
                            for (int x = 0; x &lt; mStageX; x++)
                            {
                                mStageMap[y, x] = Convert.ToInt32(sbStage.ToString(start, 2), 16);
                                start += 2;
                            }
                        }
                        // ステージ構造を元にブッシュを生成
                        InstantiateBushs();
                        continue;
                    }

                    // ポップアップポイント
                    if (line.StartsWith("@popup"))
                    {
                        line = REGEX_WHITE.Replace(line, "");
                        string[] strPopupPos = line.Split(DELIMITER, System.StringSplitOptions.RemoveEmptyEntries);
                        InstantiatePopup(int.Parse(strPopupPos[1]), int.Parse(strPopupPos[2]));
                    }

                    // プレイヤー初期位置
                    if (line.StartsWith("@player"))
                    {
                        line = REGEX_WHITE.Replace(line, "");
                        string[] strPlayerPos = line.Split(DELIMITER, System.StringSplitOptions.RemoveEmptyEntries);
                        InstantiatePlayer(int.Parse(strPlayerPos[1]), int.Parse(strPlayerPos[2]));
                        continue;
                    }

以下、ゴールエリアの位置と大きさを読み込むコードを追加

                    // ゴールエリア
                    if (line.StartsWith("@goal"))
                    {
                        line = REGEX_WHITE.Replace(line, "");
                        string[] goalData = line.Split(DELIMITER, System.StringSplitOptions.RemoveEmptyEntries);
                        InstantiateGoalArea(goalData);
                        continue;
                    }

ここまで：ゴールエリアの位置と大きさを読み込むコード
                }
            }
        }

        //---------------
        // ゴールエリア //
        //---------------------------------------------------------------------------------

        [SerializeField]
        private GameObject prefabGoalArea; // ゴールエリアのプレハブを設定する

        /// &lt;summary&gt;
        /// ゴールエリアを指定されたステージ座標に生成
        /// &lt;/summary&gt;
        /// &lt;param name="goalData"&gt;
        /// 0:tag
        /// 1:posX
        /// 2:posZ
        /// 3:scaleX
        /// 4:scaleZ
        /// &lt;/param&gt;
        private void InstantiateGoalArea(string[] goalData)
        {
            float scaleY = 1.2f;
            float posY = scaleY / 2.0f;
            float posX = int.Parse(goalData[1]) * BLOCK_SIZE + BLOCK_SIZE_HALF;
            float posZ = int.Parse(goalData[2]) * -BLOCK_SIZE - BLOCK_SIZE_HALF;
            Vector3 pos = new Vector3(posX, posY, posZ);
            GameObject obj = Instantiate(prefabGoalArea, pos, Quaternion.identity);
            obj.transform.parent = mTrans;
            float scaleX = float.Parse(goalData[3]);
            float scaleZ = float.Parse(goalData[4]);
            obj.transform.localScale = new Vector3(scaleX, scaleY, scaleZ);
        }


