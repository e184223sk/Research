More than 3 years have passed since last update.ミニゲームを作ってUnityを学ぶ！[ひつじコレクション編]前回はナビゲーションシステムを利用してフォロワーにプレイヤーを追従する機能を実装しました。
今回はゲーム内にスコアの概念を追加し、併せてそのスコアを得るために必要なゴールエリアを実装していきます。スコアの概念をゲームに追加するにあたって、このタイミングでプロジェクト全体を管理するためのクラスを作成しておきます。GameControllerはプロジェクト全体を通して1つしかインスタンスを生成することができません。
（このような構造のクラスをSingleton（シングルトン）なクラスと呼びます。）それと同時に、GameControllerのインスタンスはプロジェクト内の全てのスクリプトから呼び出すことができます。
この特性を利用することで本来はシーンが切り替わる際に破棄されてしまう値やクラスを残したり、複数のスクリプトから呼び出される定数などを一元管理することが主な役割です。では、スコアを管理するための簡単なスクリプトを用意していきます。int型のScoreプロパティを持ち、その値を加算させていくメソッドを持ったシンプルなクラスです。
これだけの内容ならStageManagerにスコアを管理するコードを追加する形でも良いのですが、Scorerには後程オンラインランキングに対応するコードを追加していきますので、今回は1クラスとして定義しておきます。次に、このScorerをGameControllerに保持させてゲーム内のどのスクリプトからも呼び出せるようにします。Init()でScorerをインスタンス化し、それを他クラスから呼び出せるようプロパティに代入しています。
またそれとは別にStageManagerの参照を保持し、こちらも他クラスから呼び出せるようにしています。このGameControllerに対応するためにStageManagerを少し修正します。Start()にGameControllerに対応するコードを追加しました。
GameControllerは初めて呼び出されたこのタイミングで自身のインスタンスを生成し、StageManagerはこのインスタンスを使ってGameControllerのInit()やプロパティの設定を行っています。これでGameControllerを介してどのスクリプトからでもScorerやStageManagerの参照を取得できるようになりました。ここでスコアについては一度切り上げて、ゴールエリアの実装を行っていきます。
ゴールエリアを実装するにあたって、まずは簡単にゴールエリアの役割を確認します。ひつじコレクションのゴールエリアは赤色の半透明な立方体で表現されています。
このゴールエリアにプレイヤーが接触すると追従している全フォロワーが解放され、その数によってスコアが加算されます。またゴールエリア内は敵キャラクターが侵入することのできない安全地帯となっていて、プレイヤーが接触ではなく完全にエリア内に侵入している場合は、安全地帯であることを表すためにゴールエリアの色が赤から緑色に変わります。以上の点を踏まえて、さっそくオブジェクトの土台を作っていきます続けて、出来上がったゴールエリアをStageConstructorで生成できるようにします。LoadStage()に@goalが先頭に付いた行からゴールエリアの生成に必要な情報を取得するコードを追加し、併せて実際にインスタンス化を行うメソッドを追加しました。ちなみにstage_1.txtで@goalの付いた行とその仕様は以下のようになっています。ゴールエリアとの当たり判定をプレイヤーに追加し、追従させているフォロワーの数によってスコアを獲得する処理を実装します。プレイヤーがゴールエリアに接触したタイミングでReleaseFollower()が呼ばれ、フォロワーを追従させている場合はスコアの加算やフォロワーの解放など各処理を行っています。現在スコアの表示についてはまだUIが未実装ですのでログの表示に留めておき、続いてフォロワー側の修正を行います。Awake()の修正とSleep()の追加を行っています。
Sleep()では次のポップアップに備えた初期化を行い、最後にGameControllerを介してStageManagerに自身がSLEEP状態になったことを通知しています。この通知に対応するため、StageManagerにメソッドを追加します。StageManagerはコルーチンのPopupFollower()で最大4匹までのフォロワーをステージに出現させる処理を行っています。
今回のOnSleepFollower()によってステージ内に存在するフォロワーが減ったことを感知し、フォロワー数が最大になるまでまた新しいフォロワーをポップアップさせることができます。スコアの実装にあたっては一度に沢山のクラスの修正や作成が重なってしまいわかりにくくなってしまったのですが、1つ1つ順を追って確認してみてください。最後に、安全地帯であることを示すゴールエリアの色の変化を実装します。色の変化についてはオブジェクトに設定されているマテリアルを差し替えることで実装します。
まずは変化後の緑色に使用するマテリアルを用意します。次に、オブジェクトに設定されたマテリアルを動的に差し替えるためのスクリプトを作成します。これでマテリアルを差し替える機能が完成しました。プレイヤーがゴールエリアに完全に侵入した場合は緑色のマテリアルを適用し、そうでないならば赤色のマテリアルを適用する仕組みをGoalAreaに実装します。ゴールエリアと同じサイズの立方体と、その四方を囲むように厚みのある壁の領域を用意し、Layer名がPlayerに設定されているコライダーの侵入をそれぞれ判定しています。
その結果が立方体には重なっているけれど四方の壁には重なっていない場合をゴールエリアにすっぽりと入っている状態と判断し、マテリアルを緑色に差し替えています。コメントアウト部分を外すとシーンビューでは上画像のように四方の壁を示すワイヤーが表示されます。プロジェクトを実行して、フォロワー解放とスコアの加算やゴールエリアの挙動を確認してください。次のページに進む
イントロダクションに戻る

この作品はユニティちゃんライセンス条項の元に提供されています


