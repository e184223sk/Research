More than 1 year has passed since last update.WindowsBaseパッケージに入ってる
System.Windows.ThreadingのDispatcherを使えば、
別のスレッド上でからメインスレッドでExceptionを起こすことができる。キャッチするにはApplication.TheradExceptionにイベントを設定しておくと、
ハンドリングされなかったExceptionが飛んでくるXamarin.Androidは以下でできる
Exception発生キャッチandroidはunhandledExceptionイベントが走った時点でアプリが強制終了前提なので、拾ってもログ仕込むくらいのことしかできない
AndroidEnvironment.UnhandledExceptionRaiserを使えばアプリが落ちないとの情報もありましたが、だめでした。
https://qiita.com/ta-yamaoka/items/e374921d642e9ac84b3b
http://atamo-dev.hatenablog.com/entry/2016/10/30/174556公式に回答ありました。
https://docs.microsoft.com/en-us/dotnet/api/system.appdomain.unhandledexception?redirectedfrom=MSDN&amp;view=netframework-4.8
～～～～～～～～～～～～～～～～～～～～～～～～～
NET Frameworkバージョン1.0および1.1では、メインアプリケーションスレッド以外のスレッドで発生する未処理の例外はランタイムによってキャッチされるため、アプリケーションは終了しません。したがって、アプリケーションを終了せずにUnhandledExceptionイベントが発生する可能性があります。.NET Frameworkバージョン2.0から、子スレッドの未処理の例外のこのバックストップは削除されました。そのようなサイレント障害の累積的な影響には、パフォーマンスの低下、破損したデータ、ロックアップが含まれていたためです。ランタイムが終了しないケースのリストなど、詳細については、「マネージスレッドの例外」を参照してください。
～～～～～～～～～～～～～～～～～～～～～～～～～～～.Net Framework2.0から強制終了するようにしたみたいですね。


