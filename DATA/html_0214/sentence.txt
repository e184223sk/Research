PONOS Advent Calendar 2020 22日目の記事です。
昨日は@FW14Bさんの【Unity】32bitアーキテクチャを切り捨てれば開発効率が上がるでした。アクションゲームを始めとした様々なゲームには、ジャンプ操作があります。
ジャンプと言っても動かし方は色々ですが、今回はボタンを押し続けると上昇量が高くなるタイプのジャンプをUnityで実装します。キーを押すと上昇し、一定時間飛ぶかボタンを離すと下降。地面に着地すると停止し、再度ジャンプが出来るようにします。
状態としては「接地・上昇・落下」の3つがある感じです。この3つの状態を識別できるようにEnum型を作成し、その変数を使います。接地判定はOnCollisionで取ると楽です。
下記は「落下状態の時、名前が"Ground"の物体に触れると接地状態にする」関数です。ただしこれだと壁に横からぶつかった時にも接地判定になってしまうので注意です。
下からの接触判定のみ取りたい場合、ContactFilter2Dを使うと便利です。(この記事では割愛します)まず地面とジャンプさせたい物体を置きます。

地形にコライダーを、ジャンプさせたい物体にコライダーとRigidbodyをアタッチしておきます。PlayerJump.csとしてスクリプトを作ってみました。
Update内でキー入力を感知し、それに合わせてFixedUpdate内で物体の状態変化・速度付けを行っています。ジャンプの際に初速を与え、地面に着地するまで重力をかけ続けます。上記のコードでジャンプさせるとこんな感じになります。

スペースキーを長押しすると高く跳び、途中で離すと低く跳んでいますね。これだけでもジャンプは出来ているのですが、もう少し調整します。現状では、
1. 一瞬だけキーを押した時の上昇量が低すぎる。
2. 途中でジャンプを止めた際の動きが不自然。急に下に落ちる。
3. キーを押しっぱなしにすると着地後に再度ジャンプが行われてしまう。
4. 動きがもっさりしている。といった問題点が挙げられます。特に4の「動きがもっさりしている」という点。
現状の動きは概ね物理法則に沿っているはずなのですが、それではメリハリの無い動きになってしまうようです。
現実の落下運動とは異なりますが、もっと極端に速度変化を付けてみたいところです。先ほど挙げた問題点を改善してみます。まず1と2について。1.一瞬だけキーを押した時の上昇量が低すぎる。
2.途中でジャンプを止めた際の動きが不自然。急に下に落ちる。途中でキーを離した際に急に落下するようになっているので、緩やかに(かつ早めに)落下するようにします。キーを離したら急に落下に移行するのではなく、縦方向の移動速度がマイナスになった時点で落下に移行するようにしました。
また途中でキーを離した場合は上昇速度が減るのが早くなります。次に3について。3.キーを押しっぱなしにすると着地後に再度ジャンプが行われてしまう。着地時にキーを押しっぱなしだった場合、離すまでキー操作をロックする事でジャンプを防ぎます。
これはキーロック用の変数を用意する事で対策します。次に4について。4.動きがもっさりしている。最初のコードでは物理法則に沿った動きをさせていました。色んな改善方法がありそうですが、2次関数を用いて速度変化を強めます。修正後のコードがこちらです。これで動かした場合、こうなります。

先ほどと比べると、メリハリの付いた動きになりました。
途中でキーを離したりしても、自然な動きで落ちていきます。キーを押した長さに応じてジャンプの高さを変えるコードを実装し、その改善を行いました。
今回は動きの分かりやすさ・操作のしやすさを重視してメリハリの付いた速度付けを意識しています。動きの付け方ですが、どれが正解という物でもありません。
リアルさを重視したいのであれば物理法則に沿った物を実装するのもアリです。もっと極端な動きを付ければ、インパクトのあるゲーム画面が生まれる事でしょう。
どういう動きを付ければ気持ち良い操作感が生まれるか、試行錯誤するのもまた楽しみの一つですね。以上です。
明日は@ackylaBさんの記事です。


