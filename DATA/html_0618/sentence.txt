　同じような悩みを持つ方がどれだけいるかは全く謎ですが，オリジナル文字コードを変換して，別の環境に移植する必要があったため，その方法を記載します。取り上げる内容は以下のとおりです。　以下の理由でシステムの若返りを図りたいと考えています。　下の赤枠の文字コード変換するためのツール
【特徴】変換元の環境では，BMP面の一部をサロゲートペア領域として使用しています（固定長データ処理系のため）。１　変換プログラムのインターフェースは以下のとおりです。２　変換プログラムは以下のとおりです。　以下のコードでbuf（元データ：ビッグエンディアン）のデータを読み出し，そのままビッグエンディアン順でキーの指定を行っています（リトルエンディアンであれば，buf[i]とbuf[i+1]の指定が逆になる。）。
　２バイトデータが変換テーブルを使用して，面02(U+2XXXX)に変換された場合，UTF-16ではサロゲートペアに更に変換が必要となる。その際，C#で変換ライブラリを見つけることができなかったため，以下の変換を実装しています。　ネット上にはいくつか実装方法があったが，乗算・除算器を使用するものだったため，加減算及びシフト演算のみのコードに書き直しました。また，サロゲートペアは32bitデータになりますが，UTF-16なので16ビットごとにリトルエンディアンによる書き込みが必要です。　計算時間が結構掛かっている割に，以下のようにプロセスエクスプローラーで確認するとCPU，DISKIOは全力を出し切っていません。実際の移行時には，HyperThread OFF にして，ファイルを４分割し，Threadを４本立てて同時実行する実装を現在検討しています。
@jzkeyさんのコメントより，サロゲートペアの計算を以下のライブラリで計算できることがわかった。


