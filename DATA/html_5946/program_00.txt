class Hoge : IDisposable
{
    // コンポジション
    private List&lt;Piyo&gt; m_piyos = new List&lt;Piyo&gt;();
#if true
    // 部分が他の全体に属しているかをチェックするリスト
    private static List&lt;Piyo&gt; m_piyosCheckList = new List&lt;Piyo&gt;();
    private static object m_checkListLock = new object();
#endif
    public Hoge()
    {
    }

    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
        if (disposing)
        {
            foreach(Piyo piyo in m_piyos)
            {
                piyo.Dispose();
            }
            m_piyos.Clear();
            m_piyos = null;
        }
    }

    ~Hoge()
    {
        Dispose(false);
    }
#if false
    public void Addpiyo(Piyo piyo)
    {
        m_piyos.Add(piyo);
    }
#else
    public bool Addpiyo(Piyo piyo)
    {
        lock (m_checkListLock)
        {
            // この要素がすでに全体に属しているかチェック
            if (m_piyosCheckList.Contains(piyo) == true)
            {
                // すでに他の全体に属しています
                return false;
            }
            // 部分として保持
            m_piyos.Add(piyo);
            // この要素が全体に属したことを記憶する
            m_piyosCheckList.Add(piyo);
            return true;
        }
    }
#endif
#if false
    public bool Removepiyo(Piyo piyo)
    {
        return m_piyos.Remove(piyo);
    }
#else
    public bool Removepiyo(Piyo piyo)
    {
        lock (m_checkListLock)
        {
            // 部分としてのリストから削除
            bool ans = m_piyos.Remove(piyo);
            if (ans == true)
            {
                // この要素が全体に属したことを記憶から消す
                m_piyosCheckList.Remove(piyo);
            }
            return ans;
        }
    }
#endif
}

