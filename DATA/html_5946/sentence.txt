More than 1 year has passed since last update.この記事は、クラス図の書きかた（集約とコンポジションの意味の違い）
のサンプルコードの補足です。クラス図の書きかた（集約とコンポジションの意味の違い）に説明した部分は触れませんので、まずクラス図の書きかた（集約とコンポジションの意味の違い）のサンプルコードの説明を読んでから、続けて読んでください。少しだけ振り返ると、集約 ＝　同一の部分インスタンスが、複数の全体インスタンスに属することができる。
コンポジション　＝　同一の部分インスタンスは、複数の全体インスタンスに属することができない。
の違いがありました。前回のサンプルコードでは、この属することができないの部分を実装していなかったので、
今回のサンプルコードでは、その部分を#if true と #if falseで、追加しました。一番上のは、部分要素を、誰かが保持しているかのリストです。
static なので、どのHogeインスタンスからも参照されます。
このリストを見ることで他のHogeインスタンスが保持していないかをチェックしています。
Lockは、m_piyosCheckListの排他処理のためのものです。AddとRemoveの処理は、lock (m_checkListLock){ ... } で囲って、排他しています。あとは、HogeのAdd()の最初に、で、実際に部分として保持する前にチェックし、その後、下記のようにチェックリストに加えます。また、Removeできたときは、でチェックリストからもRemoveします。サンプルコードを利用する際は、各自の責任のもとご利用ください。
複数スレッドからの動作確認テストは行っていません。
もし、不具合と思われる点が見つかりましたら、この記事にコメントでフィードバックをお願いします。今回のサンプルコードでは、「全体」がHogeクラスしかない前提で作成しました。
ですので、もし、「全体」がHogeクラスのほかにHogeraクラスがあったとすると、
「部分」を共有されてしまう可能性があります。そもそも、UML仕様書ではどう定義しているのかと思いみてみると、Composite aggregation is a strong form of aggregation that requires a part instance be included in at most
one composite at a time. 
合成集約は、部分インスタンスが一時点では最大でも１つの合成物にしか含まれてはならないとする、集約の強い形態である。(OMG 西原 2006)とあります。厳密に、上述のHogeとHogeraのようなケースについては言及を見つけられなかったので、
compositeの英語的な意味
Oxford英英辞典 「composite : made of different parts or materials」
から推測すると、HogeとHogeraであっても共有してはダメなのだろうなと思います。ですので、複数のクラスが同一の「部分」クラスを使うような場合を想定する場合のために、
次のようなクラスを作ると、対応させることができました。ですが、さすがに実装が面倒になってきたので、集約やコンポジション自体をクラスライブラリにしてしまうほうが良さそうです。
乞うご期待。この記事で紹介している内容を使って、集約やコンポジションの実装を補助するクラスを作りました。
UMLの関連を分かりやすく実装するクラス（C#）をどうぞ。


