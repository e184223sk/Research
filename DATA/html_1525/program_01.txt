
namespace TestApp.Views.Behaviors
{
    public class WindowAttachedBehavior
    {
        public static readonly DependencyProperty DraggableAnywhereProperty
            = DependencyProperty.RegisterAttached(
                "DraggableAnywhere",
                typeof(bool),
                typeof(WindowAttachedBehavior),
                new PropertyMetadata(OnDraggableAnywhereChanged));
        public static bool GetDraggableAnywhere(DependencyObject obj)
            =&gt; (bool)obj.GetValue(DraggableAnywhereProperty);
        public static void SetDraggableAnywhere(DependencyObject obj, bool value)
            =&gt; obj.SetValue(DraggableAnywhereProperty, value);

        private static void OnDraggableAnywhereChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)
        {
            if (!(sender is Window window))
                return;

            if ((bool)e.OldValue)
                window.MouseLeftButtonDown -= MouseLeftButtonDown;
            if ((bool)e.NewValue)
                window.MouseLeftButtonDown += MouseLeftButtonDown;
        }

        private static void MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            if (!(sender is Window window))
                return;
            if (e.ButtonState != MouseButtonState.Pressed)
                return;

            window.DragMove();
            e.Handled = true;
        }
    }
}

