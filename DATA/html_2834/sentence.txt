More than 1 year has passed since last update.前回に引き続きASP.NET Coreを学習メモです。今回はASP.NET Core MVC のルートについて学んでいきます。MVCフレームワーク正規表現ASP.NET Core MVC はルーティングミドルウェアを使って、受信したHTTPリクエストのマッチングを行い、対応したコントローラーにがリクエストを処理できるようにします。複数のルーティング設定はできますが、マッチングの順番は先に定義したルーティングが優先されます。MVCフレームワークは既存では2つのパラメータ(controller, action)があり、ルーティングマッチングした場合に、リクエストが処理される。つまり、この2つのパラメータが1つでも存在しないと、ルートが正しく動作できません。前回作成したプログラムに対して、少し追加をします。Controllersフォルダに新しくTutorialController.csクラスを作成して、下記のように実装します。Startup.csにルーティング設定を追加します。このルーティング設定にマッチングするURLこのルーティング設定にマッチングしないURLもし、ageパラメータ無くてもURLをマッチングさせたい場合、ageを任意パラメータに変更することもできます。
{age}から{age?}に変更します。このルーティング設定にマッチングするURLこのルーティング設定にマッチングするURLtemplateにcontrollerの引数がないため、defaultsにcontrollerの初期値の指定が必要です。ルートはルートパラメーターに関連付けされた検証ルールを用いて制約をかけることもできます。制約かけるためにはStartup.csの名前空間に必要モジュールを追加します。nameの長さが6桁越えること禁止このルーティング設定にマッチングするURLこのルーティング設定にマッチングしないURL年齢(age)が1~100以内このルーティング設定にマッチングするURLこのルーティング設定にマッチングしないURLこのルーティング設定にマッチングするURLこのルーティング設定にマッチングしないURLここでnameに対して、正規表現を使って制約をかけました。Commonフォルダを作成して、NameRouteConstraint.csのクラスを作成し、IRouteConstraintを実装します。nameパラメーターにadminというキーワードを含んではいけないようにしました。Startup.csに名前空間を追加ConfigureServicesにカスタム制約を注入。ルーティング設定このルーティング設定にマッチングするURLこのルーティング設定にマッチングしないURL属性ルーティングはコントローラーメソッドをURLにバインドする1つの方法です。
ルーティング設定ではなく、コントローラーメソッドに属性ルート(RouteAttribute)を使ってルートテンプレートを直接マップします。
内部ではそれらのルート属性により、システムのルートテーブルが生成されます。ただし、コントローラーはルーティング設定or属性ルーティング1つしか使用できません。もしRouteAttributeでルーティング配置したら、Startup.csで配置したルーティング設定は無効になります。Controllersフォルダで新しくTestController.csクラスを作成し、下記通りに実装します。例えば[Route(“/test/home”)]なら、内部では以下のようなルーティング設定が生成されます。ルーティングはStartup.csで定義しても、Controllerで定義しても構いませんが、
個人的には特殊な場合を除き、下記のようにStartup.csにて初期値のルート定義だけで統一したほうが良いと思います。開発者の決定すべきことをなるべく減少させ、ビジネスロジックに集中させたほうが効率的に開発できます。今回作成したソースコードです。GitHubリポジトリでは！！( ｀ー´)ノ


