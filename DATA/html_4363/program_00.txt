using System;
using System.IO;

class Tester
{
    public string Name { get; set; }
    public int Age { get; set; }
    public string Country { get; set; }
    public string Lang { get; set; }
    public string Response { get; set; }
    public string Rating { get; set; }
    public string Specialty { get; set; }

    //public int Counter { get; }
}



class TestTester
{

    static void Main()
    {
        Tester t = new Tester();

        Console.Write("テスターの現在の人数 : ");


        // 既定値外
        int numOfTesters = -1;

        // 文字は代入されずwhileへ、既定値外は代入されwhileへ、既定値は代入されwhileパス
        if (int.TryParse(Console.ReadLine(), out var nType))
            { numOfTesters = nType; }


        while (numOfTesters &lt;0)
        {
            Console.Write("retype number of testers. ");
             if (int.TryParse(Console.ReadLine(), out nType))
                 numOfTesters = nType;
        }

        Console.Write("name : ");
        t.Name = Console.ReadLine();


        Console.Write("age : ");

        if (int.TryParse(Console.ReadLine(), out var nInput))
            { t.Age = nInput; }

        while (t.Age &lt; 9 || t.Age &gt; 99)
        {
            Console.Write("retype age(10-98). ");
            if (int.TryParse(Console.ReadLine(), out nInput))
                t.Age = nInput;
        }


        Console.Write("country : ");
        t.Country = Console.ReadLine();

        Console.Write("lang : ");
        t.Lang = Console.ReadLine();

        Console.Write("response : ");
        t.Response = Console.ReadLine();

        Console.Write("rating : ");
        t.Rating = Console.ReadLine();

        Console.Write("specialty : ");
        t.Specialty = Console.ReadLine();


        int counter = ++numOfTesters;

        Console.WriteLine("\n入力内容の確認:");// 以前の書き方

        var testerString =
        $"Tester number: No.{counter}\n" +// もっといい書き方
        $"Tester Name: {t.Name}\n" +
        $"Tester Age: {t.Age}\n" +
        $"Tester Country: {t.Country}\n" +
        $"Tester Lang: {t.Lang}\n" +
        $"Tester Response: {t.Response}\n" +
        $"Tester Rating: {t.Rating}\n" +
        $"Tester Specialty: {t.Specialty}\n";
        Console.Write(testerString);





        byte nInput3 =3;

        Console.Write("\n保存しますか？(1/新規保存 2/上書き保存 0/保存しない)");
        if (Byte.TryParse(Console.ReadLine(), out var nType3))
        { nInput3 = nType3; }

        while (nInput3 &lt;0 || nInput3 &gt;2)
        {
            Console.Write("\n入力ミスです。保存しますか？(1/新規保存 2/上書き保存 0/保存しない)");
            if (Byte.TryParse(Console.ReadLine(), out  nType3))
            { nInput3 = nType3; }
        }


        string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
        string personInfo, fileName, fileName2, filePath;
        fileName = "Person_final.txt";
        fileName2 = "Person_final" + DateTime.Now.ToString("yyyyMMddHHmmssffff") + ".txt";
        // fileName2は既存ファイルあるのに新規保存した場合の命名規則 (挙動→switch case1)
        filePath = folderPath + "\\" + fileName;


        personInfo = testerString;






        switch (Ans)
        {

            case 0:// 保存しない

                Console.WriteLine("保存されませんでした。");
                break;



            case 1:// 新規保存



                if (File.Exists(filePath))
                {
                    Console.WriteLine("タイムスタンプ付で新規保存されました。。");
                    filePath = folderPath + "\\" + fileName2;
                    File.WriteAllText(@filePath, personInfo);
                }

                File.WriteAllText(@filePath, personInfo + Environment.NewLine);
                Console.WriteLine("以下のタイトルで保存されました。" + fileName2);
                break;





            case 2:// 上書き保存

                Console.WriteLine("上書き保存されました。");
                File.AppendAllText(@filePath, Environment.NewLine + personInfo + Environment.NewLine);
                break;

        }

    }
}




