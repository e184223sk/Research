using System;
using System.Diagnostics;
using System.IO;
using UnityEditor;
using UnityEngine;
using Debug = UnityEngine.Debug;

public class GitCommandPractice
{
    /// &lt;summary&gt;
    /// Gitのautocrlfを確認する。
    /// &lt;/summary&gt;
    public void GetAutocrlf()
    {
        // gitのパスを取得する。
        string gitPath = GetGitPath();

        // gitのコマンドを設定する。
        string gitCommand = "config core.autocrlf";

        // コマンドを実行して標準出力を取得する。
        string autocrlf = GetStandardOutputFromProcess(gitPath, gitCommand).Trim();

        Debug.Log(autocrlf);
    }

    /// &lt;summary&gt;
    /// Gitの実行ファイルのパスを取得する。
    /// &lt;/summary&gt;
    /// &lt;returns&gt;Gitのパス&lt;/returns&gt;
    private string GetGitPath()
    {
        // Macのとき
        if (Application.platform == RuntimePlatform.OSXEditor)
        {
            // パスの候補
            string[] exePaths =
            {
                "/usr/local/bin/git",
                "/usr/bin/git"
            };

            // 存在するパスで最初に見つかったもの
            return exePaths.FirstOrDefault(exePath =&gt; File.Exists(exePath));
        }

        // Windowsはこれだけで十分
        return "git";
    }

    /// &lt;summary&gt;
    /// コマンドを実行して標準出力を取得する。
    /// &lt;/summary&gt;
    /// &lt;param name="exePath"&gt;実行ファイルのパス&lt;/param&gt;
    /// &lt;param name="arguments"&gt;コマンドライン引数&lt;/param&gt;
    /// &lt;returns&gt;標準出力&lt;/returns&gt;
    private string GetStandardOutputFromProcess(string exePath, string arguments)
    {
        // プロセスの起動条件を設定する。
        ProcessStartInfo startInfo = new ProcessStartInfo()
        {
            FileName = exePath,
            Arguments = arguments,
            WindowStyle = ProcessWindowStyle.Hidden,
            UseShellExecute = false,
            RedirectStandardOutput = true,
        };

        // プロセスを起動する。
        using (Process process = Process.Start(startInfo))
        {
            // 標準出力を取得する。
            string output = process.StandardOutput.ReadToEnd();

            // プロセスが終了するかタイムアウトするまで待つ。
            process.WaitForExit(TimeoutPeriod);

            return output;
        }
    }
}

