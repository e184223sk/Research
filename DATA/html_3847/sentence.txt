More than 1 year has passed since last update.　前回(C#.NET Frameworkでソートアルゴリズムの可視化をした話)ではあまり詳しく話をしなかったので今回はもうちょっと詳しく話をしたいと思います。
前回同様、C#.NETでやります。大好きだからです。ちなみにWPFです。パフォーマンスが悪いのは変わらないです。
クイックソートとかマージソートとかは再帰を用いたコードを書くことが多いですが実装したものは全て非再帰コードです。（再帰だとどうもうまく動かなかった）
作ろうと思ったきっかけは、IPAの応用情報技術者試験もありますがこちらの動画の存在も大きいです。超クールですよ...こちらも前回同様、各アルゴリズムの詳しい説明はggってください...
・バブルソート
・シェーカーソート
・挿入ソート
・マージソート(Out-of-place)
・クイックソート
・基数ソート(Radix sort)こちらはちょっと改良しまして、RectangleのStrokeThicknessを0にしてRectangleを見やすくしました。
各RectangleのHeightの値はランダムです。そのランダムにするコードがこちら。バブルソートでどのようにRectangleを動かしているか説明したいと思います。
バブルソートはとても簡単なのでどのようなものか知っていると思います。ソート前に各値とRectangleの色を初期化します。これらはただ単に比較回数とアレイアクセス回数を表示するメソッドです。array[from]とarray[to]を交換します。StackPanelのi番目の要素Rectangleへの参照を返します。かなり遅いです。await Task.Delayしてるからですが。可視化するならin-placeなソートのほうが見ていて楽しいですね。今度はDXライブラリで書いてみようと思います。
ちなみにDXライブラリでの動作例（バブルソート）もこっそり置いておきます。（今度はDXライブラリでのソートの記事を書くかも）
!!GIF画像の点滅にご注意ください!!
最後までみてくれてありがとうございました。なにか変なところとかありましたらコメントで教えてください。


