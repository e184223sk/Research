More than 1 year has passed since last update.オレオレJsonシリアライズの自前実装 (蛇足なので隠蔽)


オレオレJsonシリアライズ


オレオレJsonは、対になる括弧とセパレータをユニークにすることで、解析を簡単にしました。



{1&gt;"a":"あ"&lt;1&gt;"b":{2&gt;"A":"ああ"&lt;2&gt;"B":"いい"&lt;2}&lt;1&gt;"c":"う"&lt;1}みたいな感じです。


必要なクラス全てで以下を実装しました。



ToString ()をオーバーライドして、シリアライズしたいメンバーをToString ()して連結する感じで、オレオレJsonを吐かせます。(下記コードを参照)

string jsonを受け取るコンストラクタで、メンバーの名前で要素を取り出してはnewする感じで、オレオレJsonからインスタンスを再現します。


また、ジェネリックなユーティリティ関数群を使って記述を簡素化し、Dictionaryを含む様々な型にも対応させます。
使い勝手は悪くないのですが、stringを取り回すせいで、大規模に使うとGC Allocが大量発生してよろしくないです。



使用時のイメージ

public Preference () {
    this.version = CurrentVersion;
    this.CurrentSlot = 0;
    this.Continue = false;
    this.seVolume = 0.5f;
    this.smVolume = 0f;
}
public Preference (string json) : this () {
    if (!string.IsNullOrEmpty (json)) {
        if (json == "load") {
            json = PlayerPrefs.GetString (Prefkey);
        }
        this.version = json.JsToValue ("version", string.Empty);
        this.CurrentSlot = json.JsToValue (int.Parse, "CurrentSlot", 0);
        this.Continue = json.JsToValue (bool.Parse, "Continue", false);
        this.seVolume = json.JsToValue (float.Parse, "seVolume", 0.5f);
        this.smVolume = json.JsToValue (float.Parse, "smVolume", 0f);
    }
}

public override string ToString () {
    return (new [] {
        this.version.ValueToJs ("version"),
        this.CurrentSlot.ValueToJs ("CurrentSlot"),
        this.Continue.ValueToJs ("Continue"),
        this.seVolume.ValueToJs ("seVolume"),
        this.smVolume.ValueToJs ("smVolume"),
    }).Brackets ();
}


ありがとうございました。


