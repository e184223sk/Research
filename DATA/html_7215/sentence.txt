More than 5 years have passed since last update.Unityは「ゲームを簡単に作れるようにする」ソフトですが、他のプログラミング経験がないままで利用するとScriptが分からなくてつまずいてしまいます。ここでは、Unityで利用するC#に絞って、Scriptの仕組みを解説します。
Scriptのエディタで出てくる簡単な解説は以下で記していますので、一度読んでからこちらを参考にして下さい。[超初心者向け]やっと納得、Unityを初めて触ると出てくるC#の何だあれの答えこれだけでは「なんとなく分かる」程度なので、制作するには更に知識が必要です。
ここでは最低限の知識を書きます、学習の糸口として利用してください。この記事は以下でシリーズしていますので、適宜、参照してください。
UnityでのC#の基礎リファレンスを見ていくと、ほとんどのページにclassかstructが書いてあります。これは使い方が違いますが、「データとメソッド（処理をする部分）をまとめる」ものです。関連するものをまとめていると、便利なものを、Unityでは予めまとめて作っています。例えば、Transformを見てみると、以下のように書いてあります。Transform
class in UnityEngine/継承元:Component引用元:http://docs.unity3d.com/ja/current/ScriptReference/Transform.htmlこれは、Transformという名前のclassをUnityで用意してますよ、という宣言です。「継承元」とは、classは継承という形で、元にあるものから別のものを定義する機能があります。Componentと書いてあるので、このTransformはComponentの内容を継承し、更に何かを付け加えたものであることが判ります。実際には、UnityEngineの中では以下のように書いてある筈です。自分でScriptコンポーネントを追加した場合、以下のようなソースコードが出来上がります。これも同じです。特定の属性などで共通化できる部分をまとめて作ったclassを基底クラスにして、派生するclassをつくることで、効率のよく質のいいプログラミングができます。Componentは、UnityエディタでScene内にあるGameObjectにくっついているものです。Unityのエディタでは、メニューのComponentから色々なものを追加すると、Inspectorで並びます。あたり判定を処理するColliderや色などを保持するRendererなども同じようにComponentを基底クラスにしています。Renderer
class in UnityEngine/継承元:Component引用元:http://docs.unity3d.com/ja/current/ScriptReference/Renderer.htmlクラスの{と}の間に囲まれているブロックの中に、メンバーを定義します。ここに入るもので主なものは、データを記憶するフィールドと、何らかの処理をするメソッドです。例えば、Transform.childCountの説明をみると、引用元:http://docs.unity3d.com/jp/current/ScriptReference/Transform-childCount.htmlと書いてあります。このchildCountは、と定義されています。これを参照する場合、以下のようになります。自分のClassの外に在るものを覗き見る場合は、外部のクラス名とドット演算子「.」で結んで指定すれば可能です。単純な変数型で無い場合もあります。例えば、Transform.positionは以下のようになります。この場合は、更にVector3という型を調べると、構造体(struct)であることが判ります。参考：http://docs.unity3d.com/jp/current/ScriptReference/Vector3.htmlこの構造体はまたメンバを持っています。そのx座標は以下のようになっています。引用元:http://docs.unity3d.com/jp/current/ScriptReference/Vector3-x.htmlこれにアクセスしたい場合は、ドット演算子「.」で結んで指定します。このように型が何かを調べて適宜、値を参照しましょう。C#の基本仕様はこちらが参考になります。
https://msdn.microsoft.com/ja-jp/library/ms173118.aspxTransforamでは、以下を例に取ります。引用元：http://docs.unity3d.com/jp/current/ScriptReference/Transform.Translate.htmlこのPublic関数は指定したベクトルによってTransformを移動させる処理を実行します。2種類が在るのは、同じ名前で引数（渡すパラメータ）を複数の種類、用意している「オーバーロード」という仕組みです。一つ目の場合はVector3を用いて、以下のように記します。これを同じ処理が以下の形でも可能です。使い分けは、どちらの形で使いたいかによります。この記事は以下でシリーズしていますので、適宜、参照してください。
UnityでのC#の基礎


