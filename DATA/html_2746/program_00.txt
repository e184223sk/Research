
/// &lt;summary&gt;
/// 指定された型のフォーマットされた型名を取得します。
/// &lt;/summary&gt;
/// &lt;param name="type"&gt;&lt;/param&gt;
/// &lt;returns&gt;&lt;/returns&gt;
public string FormatTypeName(Type type)
{
    if (!type.IsGenericType) { return type.Name; }
    return FormatGenericTypeName(type.GetGenericTypeDefinition(), type.GetGenericArguments());
}

/// &lt;summary&gt;
/// 指定されたジェネリック型のフォーマットされた型名を取得します。
/// &lt;/summary&gt;
/// &lt;param name="definitionType"&gt;&lt;/param&gt;
/// &lt;param name="args"&gt;&lt;/param&gt;
/// &lt;returns&gt;&lt;/returns&gt;
private string FormatGenericTypeName(Type definitionType, Type[] args)
{
    if (definitionType == typeof(Nullable&lt;&gt;) &amp;&amp; args.Length == 1)
    {
        // ex) Int32?
        return FormatTypeName(args[0]) + "?";
    }
    else if (IsValueTuple(definitionType))
    {
        StringBuilder sb = new StringBuilder();

        // ex) (Int32, Boolean)
        sb.Append("(");
        for (int i = 0; i &lt; args.Length; ++i)
        {
            if (i &gt; 0) { sb.Append(", "); }
            sb.Append(FormatTypeName(args[i]));
        }
        sb.Append(")");

        return sb.ToString();
    }
    else
    {
        StringBuilder sb = new StringBuilder();

        // ex) Tuple&lt;Int32, Boolean&gt;
        sb.Append(definitionType.Name.Substring(0, definitionType.Name.IndexOf('`')));
        sb.Append("&lt;");
        for (int i = 0; i &lt; args.Length; ++i)
        {
            if (i &gt; 0) { sb.Append(", "); }
            sb.Append(FormatTypeName(args[i]));
        }
        sb.Append("&gt;");

        return sb.ToString();
    }
}

/// &lt;summary&gt;
/// 指定された型が ValueTuple ジェネリック型であるかどうかを取得します。
/// &lt;/summary&gt;
/// &lt;param name="definitionType"&gt;&lt;/param&gt;
/// &lt;returns&gt;&lt;/returns&gt;
private bool IsValueTuple(Type definitionType)
{
    if (definitionType == typeof(ValueTuple&lt;,&gt;)) { return true; }
    if (definitionType == typeof(ValueTuple&lt;,,&gt;)) { return true; }
    if (definitionType == typeof(ValueTuple&lt;
