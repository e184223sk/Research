競技プログラミングに慣れてくると、入出力の処理や頻出のアルゴリズムをいちいち打つのが面倒になり、関数にまとめてライブラリ化したいと思うようになります。
この記事では、C# のカスタムテンプレートというものを使って、AtCoder で使えるライブラリを作っていきます。追記: もっと簡単に、既存のプロジェクトを問題分だけコピーするツールを作りました!!
MakeACこんなコマンド一つで、

問題一問分のプロジェクト（ソースファイルなどが含まれた作業用のフォルダ）が生成されます！もちろんソースファイルには、自分で作ったライブラリを含めることができます。
また、自分で作ったシェルスクリプトを使ってのようにコマンドを打つと、

コンテストのフォルダと、その中に問題 A~F のプロジェクトを一気に生成する、ということもできるようになります！PC 初心者の内 Windows を使っている方は、パスの概念やコマンド操作に触れる機会が無く、知らないという人も多いかもしれません。
コマンド操作を知っておくと、いろいろな場面で「こんなことができます!」のような自動化ができて非常に便利です。絶対パスと相対パス
Windows のコマンド操作dotnet CLI をインストールするカスタムテンプレートにしたい元のプロジェクトを作るカスタムテンプレートの構成ファイル(template.json)を作るdotnet CLI に、作ったカスタムテンプレートをインストールする自作のカスタムテンプレートを使ってプロジェクトを作ってみる※注意（わからない人は飛ばしてOK）
AtCoder のルールでは実行環境が C# (Mono 4.6.2.0) ですが、 Mono プロジェクト を dotnet CLI で扱う方法がわかりませんでした……
気になる方は Windows ならば、 Mono は .NET Framework と互換性があるので、 .NET Framework プロジェクトで問題ないと思います。
Linux ならば、Mono と互換性のない .NET Core プロジェクトになります。(おそらく問題ないと思うのですが、そこら辺の知識が乏しいのでわかりません……)
いろいろ調べたのですがめんどくさくなったので、今回は既存のコンソールアプリケーションのテンプレートを使った .NET Core 2.2 のプロジェクトを元に作ることにします。dotnet CLI は、アプリケーションを作るために必要な、プロジェクトの作成・ビルド・実行・テストなどの操作を、コマンドライン上で行うことができるツールです。開発環境に VisualStudio を使っている方には、あまり馴染みがないかもしれません。dotnet CLI は .NET Core SDK に含まれているため、公式で最新の .Net Core SDK をインストールします。
現在の最新バージョンは、 .NET Core 2.2 です。
Download .NET以下は、dotnet CLI について詳しく知りたい人だけ読んでくださいdotnet CLI についての具体的な使い方は、以下の記事がわかりやすいです。
コマンドラインでC#プログラミング
また、より詳しいコマンドの説明は、公式のドキュメントを確認してください。
.NET Core コマンドライン インターフェイス (CLI) ツールカスタムテンプレートの目的は、あるプロジェクト（ソースファイルなどが含まれた作業用のフォルダ）を雛形として中身が同じ別のプロジェクトを作る、ことです。
雛形となるプロジェクトにカスタムテンプレート用の構成ファイルを含めたものが、カスタムテンプレートとなります。まずは、カスタムテンプレートの元となる AtCoderTemplate プロジェクトを作っていきます。
dotnet CLI の dotnet new コマンドで、既存のカスタムテンプレートからプロジェクトを作ることができます。ls コマンドで確認してみるとAtCoderTemplate プロジェクト(フォルダ)が存在し、その中に AtCoderTemplate.csproj ファイルや、 Program.cs ファイル、 bin フォルダ、 obj フォルダが確認できます。
フォルダ階層は、以下のようになっています。この内、 Program.cs ファイルに Main 関数を含む Program クラスがあります。さて、 AtCoder に提出するコードでは外部のライブラリを呼ぶことができないため、自作ライブラリのクラスと Main 関数を持つ Program クラスを一つのファイルにまとめないといけません。具体的には、以下のように1つの Program.cs ファイルの中に、Program クラスと MyLibrary クラスを置き、 MyLibrary クラスに自作の関数を追加していく形になります。構成ファイル(template.json)は、カスタムテンプレートの名前や種類などの情報を含むファイルです。2. カスタムテンプレートにしたい元のプロジェクトを作る で作った AtCoderTemplate プロジェクト(フォルダ)の中に .tmeplate.config フォルダを作成し、さらに .template.config フォルダの中に、空の template.json ファイルを作成します。
フォルダ階層は以下のようになります。次に、 template.json ファイルを開き、以下のように書き込みます。今回、template.json の内容については説明しません。
ただし、この template.json で、 カスタムテンプレートの名前を AtCoderLibraryTemplate と設定したことだけ、覚えておいてください。以下は template.json の内容について、詳しく知りたい人だけ読んでください。template.json の詳細については公式のドキュメントを確認してください。
dotnet new のカスタム テンプレート
また、 "symbols", "postActions", "primaryOutputs" の設定については、以下の記事を確認してください。
プロジェクト作成時に依存関係を復元(dotnet restore)させるAtCoderTemplate プロジェクトを AtCoderLibraryTemplate という名前のカスタムテンプレートとして、 dotnet CLI にインストールします。 (template.json に記載されている)インストールが成功した場合、以下の画像のように表示されます。

少し、拡大してみます。
図のように、 AtCoderLibraryTemplate という名前が表示されていれば、インストールが成功しています。Linuxの方で Permission denied というエラーが出てしまう場合は、以下のようにroot権限でコマンドを実行してみてください。お疲れ様でした。
これで、カスタムテンプレートのインストールは完了です。
これ以降は、AtCoderTemplate プロジェクトの中身(例えばProgram.cs ファイル)を変更すると、インストールしたカスタムテンプレートである AtCoderLibraryTemplate に反映されるようになります。さあ、 dotnet new コマンドで、カスタムテンプレート AtCoderLibraryTemplate からコンテスト用のプロジェクトを作ってみましょう！まずは、 コンテスト用のフォルダを作ります。今回は例として ABC141 を作ります。ABC141 フォルダを生成して、移動することができました。dotnet new コマンドを使ってA問題のプロジェクトを作成しましょう。もしくは、 AtCoderLibraryTemplate の省略名である actemp を使って、このようにコマンドを打ちます。-o は、生成されるプロジェクトフォルダの場所や名前を決めるオプションです。「テンプレート "AtCoderLibraryTemplate" が正常に作成されました。」と表示されれば、成功です！dotnet CLI はコマンドラインインターフェースのため、シェルスクリプトからの操作も可能です。Windowsならば bat ファイル (または PowerShell スクリプト)を使い、Linux ならば bash スクリプトを使って、「こんなことができます!」のように、一回のコマンドでコンテスト用のプロジェクトを一気に生成することができます。bat ファイル (mkac.bat)・ bash スクリプト(mkac) どちらも私の GitHub リポジトリにあるので、よろしければご利用ください。
また、私の拙いライブラリもありますので、よろしければそちらもご利用ください。
kazurego7/AtCoderToolsふぅー、つかれた〜
早く水色になりたいなー


