using System;
using UnityEngine;

public struct Language : IEquatable&lt;Language&gt; {
    private bool hasValue;
    private SystemLanguage language;
    public static readonly Language Undef = new Language (false);
    public Language (bool _hasValue) {
        hasValue = _hasValue;
        language = _hasValue ? Application.systemLanguage : SystemLanguage.Unknown;
    }
    public Language (SystemLanguage _language) {
        hasValue = _language != SystemLanguage.Unknown;
        language = _language;
    }
    public static bool TryParse (string name, bool ignoreCase, out Language language) {
        if (string.IsNullOrEmpty (name) || !Enum.TryParse (name, ignoreCase, out SystemLanguage syslang)) {
            language = Undef;
            return false;
        }
        language = syslang;
        return true;
    }
    public static bool TryParse (string name, out Language language) =&gt; TryParse (name, false, out language);
    public static Language Parse (string name, bool ignoreCase) { TryParse (name, ignoreCase, out var language); return language; }
    public static Language Parse (string name) { TryParse (name, false, out var language); return language; }
    public SystemLanguage GetValueOrDefault () =&gt; hasValue ? language : SystemLanguage.Unknown;
    public SystemLanguage GetValueOrDefault (Language l) =&gt; hasValue ? language : (SystemLanguage) l;
    public static implicit operator bool (Language l) =&gt; l.hasValue;
    public static implicit operator SystemLanguage (Language l) =&gt; l.hasValue ? l.language : SystemLanguage.Unknown;
    public static implicit operator Language (bool b) =&gt; new Language (b);
    public static implicit operator Language (SystemLanguage l) =&gt; new Language (l);
    public override string ToString () =&gt; hasValue ? language.ToString () : "Undef";
    public static bool operator == (Language a, Language b) =&gt; (a.hasValue == b.hasValue) &amp;&amp; (!a.hasValue || a.language == b.language);
    public static bool operator != (Language a, Language b) =&gt; !(a == b);
    public bool Equals (Language other) =&gt; (hasValue == other.hasValue) &amp;&amp; (language == other.language);
    public override bool Equals (object obj) =&gt; (obj == null || GetType () != obj.GetType ()) ? false : Equals ((Language) obj);
    public override int GetHashCode () =&gt; hasValue ? language.GetHashCode () : int.MinValue;
}

