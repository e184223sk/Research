More than 1 year has passed since last update.今回は、HTML、CSS、画像、および、JavaScript などの静的ファイルはアプリケーションで扱う方法について調べてみました。
扱わないアプリなんてほぼ皆無だと思いますので、これは必須な知識のはず。なお、環境を.NET Core 3.1に上げました。Startup.csのConfigureメソッドにある、UseStaticFilesメソッドの呼び出しをすることで、wwwrootフォルダ以下にあるファイルを提供することができます。view側で、ここにあるファイルにアクセスする際は、以下のような記述をします。~/ が wwwroot を指します。ですからこれで、wwwroot/images/example.jpg を参照することになります。wwwroot内のファイルに加えて、別のフォルダ内の静的ファイルも提供したい場合は、Configureメソッドで、以下のようなコードを書きます。上の例は、StaticFiles フォルダの例です。最初の "StaticFiles" は、物理フォルダの名前で、2番目の"/StaticFiles"は、ルーティングのパスを指定します。
ここでは同じ名前にしましたが、別の名前でもかまいません。では、試してみます。プロジェクトの直下に、StaticFiles フォルダを作成し、その下に Images フォルダを作成します。
このフォルダの下に、任意の画像ファイルを入れます。チュートリアルで作成したindex.cshtml に以下のタグを追加します。実行してみます。
無事、画像が表示されました。試しに、の部分をコメントアウトしてみます。画像は表示されません。staticsfiles フォルダにはアクセスできないのが確認できます。まず、以下のコマンドで、Microsoft.AspNetCore.Httpパッケージをインストールします。次に、StartUp.cs のConfigureメソッドを書き換えます。こうすると、Response HeaderにCache-Controlの値を設定できます。この例では、600秒間キャッシュを有効にしています。ブラウザで確認すると、確かにCache-Control が設定されているのが確認できます。上の例では、PhysicalFileProviderでの指定がないので、wwwroot配下のファイルに限定されます。通常のWebアプリではこの機能は不要ですが、時には、ディレクトリの参照を有効にしたい場合があります。Startup.Configure で UseDirectoryBrowser メソッドを呼び出すと、ディレクトリの参照を有効にできます。上のコードでは、app.UseStaticFilesで、/wwwroot/myimages フォルダ配下の静的ファイルを提供し、app.UseDirectoryBrowserで、ディレクトリの参照を有効化することで、ブラウザ上でフィルを閲覧できるようになります。
"/images"がルーティングのパスを指定です。以下、ブラウザの表示例です。


