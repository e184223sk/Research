More than 1 year has passed since last update.昔から難しそうだな、でも便利そうだな、使いこなせるとかっこいいと思ってた抽象クラスとかinterfaceとか。
で、いい機会に恵まれたので復習の意味でミニマムコードチックなものを作ってみた。どうだろう。正直自分あて。自分の復習のため。
一応、ペタッと張ってそのまま動くはずなので、よければどうぞ。
文末に書いたけど、学ぶとき、手元に動くものがあっていじってみるとはかどるよ～・・・というか、「こう書いたらいいのに」という、ご教授あればお願いします。
(正直、ついこの前初めてinterfaceとかabstractとか書いた。何か凄く間違ってるかも。。。)Windows 8 Pro
.net framework 4.0
(C:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe)いつもの。
お勉強用としてはVisual Studioのコード補完(補助輪)は強すぎるのでVisual Studio Codeかサクラエディタで。■C#手遊び(Compiler w/o Visual Studio)
https://qiita.com/siinai/items/8a325ad4eade1a2f6e9eこの手のことでよくある、「動物」とか、「人」とか、「犬」・「猫」とかってやってもな・・・と思ってた。
正直、今回書くまで、そういう記事を読んでも自分の中に入ってこないの。
説明する側からするとベストな選択なんだけど、わかろうと思っている人(=わかってない人)からするとピンとこない。
・・・いや、あたしが分かろうとしてないだけだったってことかもしれないけど。なので、わかった(つもり)のことをOutputするために、こんなのでやってみた。&lt;方針&gt;
いま、画面を作っている。TextBox, ComboBox, ListBoxがある。
それ以外にコントロールA,コントロールBがあって、それぞれ不可視のオブジェクト(クラス)に値を置いておく。
それらをまとめて一つのList&lt;何か&gt;に集めて、foreachでGetValue()をくるくるっと呼び出したい。なので、GetValue()を持つinterfaceを定義する。
foreachしたい対象とinterface両方を継承したExなどを作ってそれぞれにinterfaceを継承させる。
これでGetValue()が存在することを保証させられる。
だから、List&lt;そのinterface&gt;で集められるからforeachでくるくるできる。interfaceのままだと呼び出し方と戻り値などを定義するだけで、歴の数を返すという「具体的な形」を入れられない。
最終的にnewして具象クラスを作るときにオブジェクトを作るとしても、その手前で決めておいてもいいことは決めておきたい。
逆に、だったら普通にクラスでいいじゃん、って話だけど、普通のクラスにしてしまうと、直接それをnewできてしまう。
似ているけどちょっと違うものを作りたいとき、その最大公約数として「普通のクラス」を作ったのに、コーディングミスでそれをnewされても困るときに使うといい?自分のイメージとしてはFuncとかして名前を与えただけのものを束ねたもの。
具体的な処理の内容とか、値とかは持たない。(持たせない)
だからこそ、C++とかで問題になる多重継承問題が発生しない。(菱形見たくない。。)(コンパイルと実行結果)
コンパイラが何か言っているけど気にしない方向で。。。まあ面白かった。
正直、これを書く前、初めてabstractとかinterfaceとか書いた時が、もう、すごく、なんか、こう、という感じだった。
みんなこんな知識を前提に何年も前からプログラム書いているのか・・・と思うと、もったいないというか、悔しいというか。。。


