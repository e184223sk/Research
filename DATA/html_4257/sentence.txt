More than 1 year has passed since last update.C#におけるコマンドラインオプションパーサーの実装にはいくつか種類がある。
過去にCommandlineParserというものの紹介記事も書いたことがある。今回はMcMaster.Extensions.CommandlineUtilsについて書こうと思う。以前はASP.NETのコンポーネントの一つとして、Microsoft.Extensions.CommandlineUtilsというものがあった。
ただ、コマンドラインオプションというのはどうしても要望が多くなってしまう類のもので、本質ではない部分のメンテコストが
増大することを危惧したASP.NET Coreチームは、このパッケージをメンテしないことに決定した。そして、ASP.NET本体とは切り離し、完全に別個のパッケージとして分岐したのが今回紹介するMcMaster.Extensions.CommandlineUtilsである。
そのため、多くの部分がMicrosoft.Extensions.CommandlineUtilsに由来している。また、ASP.NETが用意しているDIを非常に意識して作られているので、相性が良い。記述が他のライブラリに比べて多少冗長になる傾向がある。仕様的には 公式READMEが大変親切なので、ここを参考にすればいいと思う。
Builderパターンはオプション変数の取り回しが面倒なので、Attributeパターンがお勧め。Attributeパターンについてのサンプルコードを見ると、基本的に以下の順番で作っていけばいいことがわかる。コマンドの実行時には、単純な引数とのマッピングだけではなく、例えばロギング等様々なパラメーターと共に使用したい場合がある。
そんな時はインジェクションを使用する。サンプルコードを見ると、というのが基本的なやり方となる。これにより、ASP.NETでも使っているようなロギングや、各種便利機能を使えるようになるので、それだけでも結構いいと思う。
が、一番の利点はサブコマンドを使用した時、親コマンドのインスタンスをDIで受け取れるようになることだと思う。
これにより、サブコマンドの扱いがかなり楽になる。以上のコードで、Executor.EntryPoint()を実行すると、以下の出力が得られる。サンプルコードを眺めてみても、他のライブラリに比べて煩雑な記述が多いと思うかもしれない。実際書き捨てコマンドには向いていない。
実際自分もそう思うことはあるが、しかしサブコマンドの扱いやロギングまで含めると、
DI経由でASP.NETの機能を使えるようになるのは色々と嬉しいことも多いので、ある程度以上の規模になれば、
その利点も実感できるようになるかと思う。執筆時点の安定板である2.2.5では、ASP.NETの汎用ホストとの連携はまだ取れないが、masterには連携コードが入っているので、恐らく2.3.x辺りには入ることになると予想される。そうすれば、サービスアプリ等を書くときにこのライブラリが有用になっていくと思う。


