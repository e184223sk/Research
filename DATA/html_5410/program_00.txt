public static int GetRuntimeEventCount(this UnityEventBase unityEvent) 
{
    Type unityEventType = typeof(UnityEventBase);

    Assembly libAssembly = Assembly.GetAssembly(unityEventType);

    Type invokableCallListType = libAssembly.GetType("UnityEngine.Events.InvokableCallList");
    Type baseInvokableCallType = libAssembly.GetType("UnityEngine.Events.BaseInvokableCall");
    Type listType = typeof(List&lt;&gt;);
    Type baseInvokableCallListType = listType.MakeGenericType(baseInvokableCallType);

    FieldInfo callsField = unityEventType.GetField("m_Calls", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo runtimeCallsField = invokableCallListType.GetField("m_RuntimeCalls", BindingFlags.Instance | BindingFlags.NonPublic);

    var calls = callsField.GetValue(unityEvent);
    var runtimeCalls = runtimeCallsField.GetValue(calls);
    PropertyInfo countProperty = baseInvokableCallListType.GetProperty("Count");

    return (int)countProperty.GetValue(runtimeCalls, null);
}

