
using System.Collections.Generic;
using System;
using UnityEngine;
using XLua;

public static class XLuaGenConfig
{
    //lua中要使用到C#库的配置，比如C#标准库，或者Unity API，第三方库等。
    [LuaCallCSharp]
    public static List&lt;Type&gt; LuaCallCSharp = new List&lt;Type&gt;()
    {
        typeof(System.Object),
        typeof(UnityEngine.Object),
        typeof(Vector2),
        typeof(Vector3),
        typeof(Vector4),
        typeof(Quaternion),
        typeof(Color),
        typeof(Ray),
        typeof(Bounds),
        typeof(Ray2D),
        typeof(Time),
        typeof(GameObject),
        typeof(Component),
        typeof(Behaviour),
        typeof(Transform),
        typeof(Resources),
        typeof(TextAsset),
        typeof(Keyframe),
        typeof(AnimationCurve),
        typeof(AnimationClip),
        typeof(MonoBehaviour),
        typeof(ParticleSystem),
        typeof(SkinnedMeshRenderer),
        typeof(Renderer),
        typeof(WWW),
        typeof(Mathf),
        typeof(System.Collections.Generic.List&lt;int&gt;),
        typeof(Action&lt;string&gt;),
        typeof(UnityEngine.Debug),
        typeof(WaitForSeconds),
        typeof(System.Collections.IEnumerator),
    };

    //C#静态调用Lua的配置（包括事件的原型），仅可以配delegate，interface
    [CSharpCallLua]
    public static List&lt;Type&gt; CSharpCallLua = new List&lt;Type&gt;()
    {
        typeof(Action),
        typeof(Func&lt;double, double, double&gt;),
        typeof(Action&lt;string&gt;),
        typeof(Action&lt;double&gt;),
        typeof(UnityEngine.Events.UnityAction),
        typeof(System.Collections.IEnumerator)
    };

    //黑名单
    [BlackList]
    public static List&lt;List&lt;string&gt;&gt; BlackList = new List&lt;List&lt;string&gt;&gt;()
    {
        new List&lt;string&gt;() {"System.Xml.XmlNodeList", "ItemOf"},
        new List&lt;string&gt;() {"UnityEngine.WWW", "movie"},
#if UNITY_WEBGL
                new List&lt;string&gt;(){"UnityEngine.WWW", "threadPriority"},
    #endif
        new List&lt;string&gt;() {"UnityEngine.Texture2D", "alphaIsTransparency"},
        new List&lt;string&gt;() {"UnityEngine.Security", "GetChainOfTrustValue"},
        new List&lt;string&gt;() {"UnityEngine.CanvasRenderer", "onRequestRebuild"},
        new List&lt;string&gt;() {"UnityEngine.Light", "areaSize"},
        new List&lt;string&gt;() {"UnityEngine.Light", "lightmapBakeType"},
        new List&lt;string&gt;() {"UnityEngine.WWW", "MovieTexture"},
        new List&lt;string&gt;() {"UnityEngine.WWW", "GetMovieTexture"},
        new List&lt;string&gt;() {"UnityEngine.AnimatorOverrideController", "PerformOverrideClipListCleanup"},
#if !UNITY_WEBPLAYER
        new List&lt;string&gt;() {"UnityEngine.Application", "ExternalEval"},
#endif
        new List&lt;string&gt;() {"UnityEngine.GameObject", "networkView"}, //4.6.2 not support
        new List&lt;string&gt;() {"UnityEngine.Component", "networkView"}, //4.6.2 not support
        new List&lt;string&gt;() {"System.IO.FileInfo", "GetAccessControl", "System.Security.AccessControl.AccessControlSections"},
        new List&lt;string&gt;() {"System.IO.FileInfo", "SetAccessControl", "System.Security.AccessControl.FileSecurity"},
        new List&lt;string&gt;() {"System.IO.DirectoryInfo", "GetAccessControl", "System.Security.AccessControl.AccessControlSections"},
        new List&lt;string&gt;() {"System.IO.DirectoryInfo", "SetAccessControl", "System.Security.AccessControl.DirectorySecurity"},
        new List&lt;string&gt;() {"System.IO.DirectoryInfo", "CreateSubdirectory", "System.String", "System.Security.AccessControl.DirectorySecurity"},
        new List&lt;string&gt;() {"System.IO.DirectoryInfo", "Create", "System.Security.AccessControl.DirectorySecurity"},
        new List&lt;string&gt;() {"UnityEngine.MonoBehaviour", "runInEditMode"},
    };
}


