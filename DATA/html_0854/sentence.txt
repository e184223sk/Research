この記事では、Tencentが公開しているOSSのXLuaを使わせていただき、量産できるノベルゲーシステムの紹介です。Unityのランタイムで動作するLua言語が使えるようになるOSSです。今回はこちらのXLuaを用いて量産できるノベルゲーシステムを作りました。これらのスクリプトは、事前に読み込んでコマンドを積み実行していく方式ではなくランタイムで動作します。Unity 2018LTS or higher
XLua 2.1.15 or hight
mac os BigSur 11.2.1https://github.com/Tencent/xLua/releases/download/v2.1.15f1/xlua_v2.1.15.zip
URLから最新のXLuaをダウンロードします。Unityプロジェクトを作成し、Assetsと同階層にダウンロードしてきたXLua/Toolsを配置します。projectname/Tools/FileSignature.exe
projectname/Tools/FileSignature.ext.meta
projectname/Tools/XXX...
このようになるはずです。次にAssets/XLuaディレクトリを作成します。
ダウンロードしてきたxlua_v2.1.15/Assets/XLuaの中身を全てAssets/XLua/に配置します。Assets/Pluginsディレクトリを作成します。（既にある場合は大丈夫です）
ダウンロードしてきたxlua.v2.1.15/Assets/Plugins/の中身を全てAssets/Pluginsに配置します。ここまでで大体の配置（インポート）は完了です。参考：https://baba-s.hatenablog.com/entry/2017/09/26/090000必要な方は設定してください。
残念ながらXLuaは標準でAssembluDefinisionが定義されていませんので自分で作成する必要があります。
Assets/XLua/Tencent.XLua.asmdef
Assets/XLua/Src/Editor/Tencent.XLua.Editor.asmdef
以上の二つを定義すれば動作するかと思います。
もちろんEditorはEditorにチェックを入れてXLuaのみを参照します。
XLuaは何も参照しません。
（name spaceをXlua.asmdefにすると命名が被ってエラーになるのでご注意を）XLuaが正しくインポートされているか確認します。
適当なゲームオブジェクトを作成し、以下のプログラムを実行してくださいConsoleにて、luaスクリプトの実行と表示されたら成功です🎉以下の対応をしてみてください。PlayerSetting.Configuration.ScriptingBackEndをMonoからIL2CPPに変更
公式のIssueに上がっているもの
https://github.com/Tencent/xLua/issues/481
https://github.com/Tencent/xLua/issues/766XLuaのインポート、動作確認が終わりました。
ここから実際にノベルゲーシステムの構成をしていきます。これは任意ですが、非同期処理やクリック処理などの処理簡潔化のために以下のライブラリを導入しています。
（コードにライブラリのコードが散見されるかもしれませんが、ご容赦ください）Resources/Scenario/sample.lua.txtを作成します。
ディレクトリがない場合は作成してください。
sample.lua.txtが動くように実装していきます。一旦このようなスクリプトを記述しておきます。次に、このtextコマンドの実装をします。Resources/Scenario/lib.lua.txtを作成します。
ディレクトリがない場合は作成してください。(CS.Main.MainPresenterについて呼び出したいpublicでstaticな関数が定義されているC#側のネームスペースを指定すれば大丈夫です)lua側から呼び出す関数をC#側に記述します。
Main.MainPresenterにしていますが、別の名前でも問題ないです。(lib.lua.txtのCS.Main.MainPresenterはCS.変更後の名前にする必要があります)この状態で起動してもInitialzieが呼ばれないため、MainViewを作成します。MainViewを適当なゲームオブジェクトにアタッチし起動します。
コンソールに表示するテキストと表示されれば成功です🎉
一旦この状態でUI有りの画面に表示してみます。以下のような構成画面配置にしています。
ここはお好きなデザインにしてみてください。MainView、MainPresenterにSetText系のメソッドを増やします。Unity Scene上のMainViewコンポーネントにTextをアタッチし、起動すると以下の画面のようになります。
これでUIの適用が完了です🎉
ラベルや背景の命令も同様に増やしていくことが可能です。クリック待ちを実装していきます。現状だと普通のノベルゲーのようにクリックで物語を進めることができません。
テキストを表示するたびにクリック待ちのコマンドを入れることで実装していきます。Main直下に以下のC#を追加してください。
lua側からUnityの型を扱いたいときに事前に登録しておく必要があります。
Dotween等も使いたい場合はこちらに追加記述します。_buttonがないと思うので、以下の画像のようなヒエラルキー構造にしbuttonを追加してください。
大きさは画面全体のストレッチでColorのaを0に設定し透明な状態にします。

lua側でWaitClickedを扱えるようにlib.lua.txtに定義します実際に再生したいスクリプトで使用してみます入力待ちができていればOKです🙆‍♂️ここまでで基本的なコマンドの実装を行ってきました。
この流れで一番最初にgif画像で上げたような画面を作るには、他のコマンドの実装していくことになります。
ぜひ頑張ってみてください！


