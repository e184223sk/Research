みなさん、OpenVINO使っていますか？
OpenVINOはIntel製CPUやGPU、VPU等の上で高速に推論をするエンジンなのですが、C#のインターフェースは提供されていません。
C/C++かPythonで書く必要がありますが、私は C# を使いたいのです！
ということで、SwigでWrapperを作ろうと決意したわけですが、作ったことがないので調べてみました。私と同じように思っている方がどの程度いるか不明ですが、その方の助けの一部になればと思います。この記事は以下5つのパートに分かれます。
1. C++でdll作成
2. C++からdll呼び出し
3. Wrapper作成
4. C#からWrapper経由でのdll呼び出し
5. 結論SwigでWrapperを作りたいのですが、現時点では失敗しています。
Wrapper経由でC#から呼び出そうとすると例外を吐きます。
詳細は結論に記載していますが、詳しい方からアドバイスいただけるかもしれないと思い、この状態で投稿しております。
もし原因わかる方、これじゃないの？と思う方、コメントいただけると幸いです。[2020.11.23追記]
原因が判明しましたので記事とソースを修正しました！今回dllやWrapperを作成した環境は以下です。
- Windows10 Pro(x64)
- Visual Studio 2019 Professional
- Swig 4.0.2ソースコードはここに格納しています。
プロジェクトとしては以下3つになります。
- HellDll
　　C/C++で作成するdllのプロジェクトです。
- HellpCpp
　　作成したdllをC++から呼び出すことが出来るのかテスト用のプロジェクトです。
- HelloCSharp
　　作成したdllをC#から呼び出すことが出来るのかテスト用のプロジェクトです。今回はClassifierという名前のクラスとそのクラスを生成する関数をdllで提供しますので、そのためのプロジェクトをHelloDllという名前で作成していきます。作成したヘッダ(Classifier.h)の中身は以下です。dllを作成する部分の詳細はC++で作成したDLLでAPIではなくクラスを提供する方法のやり方を踏襲していますので、そちらを参照してください。C++で作成するコンソールプログラムから作成したdllが呼び出せるか確認します。
プロジェクト名はHelloCppです。
呼び出す部分は以下となっています。こちらも、C/C++で作成したdllをC++から呼び出す部分もC++で作成したDLLでAPIではなくクラスを提供する方法のやり方を踏襲していますので、そちらを参照してください。Wrapperを作成する方法はいくつかあるようなのですが、すべて手作業でするのも面倒なのでSwigを使ってみました！SwigでWrapperを作るのは簡単で、インターフェースファイルと呼ばれる.iファイルを作成するだけです。ただ、これが奥深く、理解するのが大変というか、まだ私自身理解できていないという・・・とりあえず、Swigを使ってWrapperを作っていきましょう。ここからサクッと落としましょう
2020年11月21日にこの記事を記載していますが、現時点での最新は4.0.2となっています。
私の環境はwindowsなのでswigwin-4.0.2をダウンロードすることになります。
お使いの環境に合わせてダウンロードしてください。ダウンロード後は、適当な場所に展開しパスを通すなりしてください。
これでインストールは完了です。ようやくSwigの肝であるインターフェースファイルの作成です。
マニュアルはここにありますので、まずは熟読しましょう。で、とりあえず必要最低限の内容をカバーしたインターフェースファイルは以下のようになります。ポイントは以下です。
- %moduleの後ろにdll名
- %{}の中に提供するヘッダ名を記載
- %includeの後ろに提供するヘッダ名を記載
- エラー対策にwindows.iを最初にinclude最後のwindows.iをincludeする部分ですが、広大なネットの海を探しているときにそのような情報を見つけたのですが、今となってはその記述を見つけられず。。。
とりあえず効果があるので記載していますが、どのような理由でエラーが回避できるのかなどは不明です。コマンドプロンプトで毎回ビルドしても良いのですが、Visual Studioでdllをビルドした際に一緒にビルドするようにしましょう。
手順は以下です。
1. 作成したインターフェースファイル(今回はSwig.i)をdllのプロジェクト(今回はHelloDll)に加える
2. 1.で加えたSwig.iをVisual Studio上で右クリックしプロパティを開く
3. 項目の種類をカスタムビルドツールに変更
4. 3.を実行すると左側にカスタムビルドツールが表示されるようになるので、コマンドラインに以下を記載5.出力ファイルに以下を記載1.～5.が完了後、HelloDllプロジェクトをリビルドして、以下のファイルが作成されれば成功です。
- Classifier.cs
- HelloDll.cs
- HelloDllPINVOKE.cs
- Swig_wrap.cpp[2020.11.23 追記]
Swig.exeが作成した上記4つのファイルのうち、Swig_wrap.cppをHelloDllプロジェクトのソースファイルフォルダに追加します。これが必要でした！C#で作成するコンソールプログラムから作成したdllが呼び出せるか確認します。
プロジェクト名はHelloCSharpです。することは2つだけです。
1. Swig.exeが作成した.csファイルをプロジェクトに加える
2. dllが提供する関数を呼び出す1.は特にわからない部分はないと思いますので割愛します。
2.ですが、呼び出す部分は以下となります。では実際に動作するか見てみましょう！。
。
。
はい、動きませんね。
私にもわかりません(汗)
dll自体はC++側で呼び出せているので問題ないはずなので、やはりSwigの使い方だと思うのですが、謎です。。。[2020.11.23 追記]
問題なければ以下が表示されるはずです。Swigを使ってWrapperを作り、C++のdllをC#から呼び出したかったのですが、C#側で呼び出した途端、以下の例外を吐いて失敗します。解決策を探している途中なのですが、にっちもさっちもいかないので、アドバイスいただけたらと思いQiitaに投稿しました。
もし原因わかる方、これじゃないの？と思う方、コメントいただけると幸いです。
何かしら情報にアップデートあれば本記事を更新いたします。[2020.11.23 追記]
無事、C++で作成したdllをSwigでWrapperを作成してC#から呼び出すことが出来ました。
Wrapper開発の工数削減を目的にSwigを使いましたが、インターフェースファイル(.iファイル)を用意するだけなので、インターフェースファイルさえ問題なく作ることが出来れば目的は達せられるという印象を受けました。
今回は簡単にするために引数や戻り値を簡単なものにしましたが、どうやら文字列や構造体、クラスやポインタなど色々難しそうですが、少しずつ調べていきたいと思います。


