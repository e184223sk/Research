using System;
using System.Collections.Generic;
using System.Linq;

namespace Prime4949
{
    class Program
    {
        static void Main(string[] args)
        {
            int n = 100;
            var answer = string.Join(",", Primes().Where(Program.HasFourOrNine).Take(n));
            Console.WriteLine(answer);
        }

        /// &lt;summary&gt;
        /// 数値に4か9を含むかどうかを判定する。
        /// &lt;/summary&gt;
        /// &lt;param name="x"&gt;自然数&lt;/param&gt;
        /// &lt;returns&gt;xが4か9を含む場合true&lt;/returns&gt;
        static bool HasFourOrNine(int x)
        {
            while (x &gt; 0)
            {
                int mod = x % 10;
                if (mod == 4 || mod == 9)
                {
                    return true;
                }
                x /= 10;
            }
            return false;
        }

        /// &lt;summary&gt;
        /// 素数を次々に生成する。
        /// 
        /// 注意: 
        ///     任意の素数をxとすると、x+1..x^2に1つ以上の素数が含まれていることを前提にしています。
        ///     そのほか、説明のためにもろもろの検査をすっ飛ばしています。
        ///     クリティカルな場面では利用しないことをおすすめします。
        /// &lt;/summary&gt;
        /// &lt;returns&gt;素数&lt;/returns&gt;
        static IEnumerable&lt;int&gt; Primes()
        {
            var primes = new List&lt;int&gt; { 2, 3, 5 };
            for (int index = 0; ; index++)
            {
                if (index == primes.Count)
                {
                    var min = primes.Last() + 1;
                    var max = min * min;
                    var integers = Enumerable.Range(min, max - min + 1).ToList();
                    foreach (var prime in primes)
                    {
                        int sieving = integers.FindIndex(digit =&gt; digit % prime == 0);
                        while (sieving &lt; integers.Count)
                        {
                            integers[sieving] = -1;
                            sieving += prime;
                        }
                    }
                    primes.AddRange(integers.Where(integer =&gt; integer != -1));
                }

                yield return primes[index];
            }
        }
    }
}

