
//MessageHandlerFilterは、ジェネリクスのままでも、特定の型のフィルターとしても使えます。
public class AsyncLoggingFilter&lt;T&gt; : AsyncMessageHandlerFilter&lt;T&gt;
{
    readonly ILogger&lt;AsyncLoggingFilter&lt;T&gt;&gt; logger;
    //FilterにもDI可能！
    public AsyncLoggingFilter(ILogger&lt;LoggingFilter&lt;T&gt;&gt; logger)
    {
        this.logger = logger;
    }

    public override ValueTask HandleAsync(T message, CancellationToken ct, Func&lt;string, CancellationToken, ValueTask&gt; next)
    {
        try
        {
            //前処理
            logger.LogDebug("メッセージを送信します");
            await next(message, ct); //ハンドラ本体の処理を待機
            //後処理
            logger.LogDebug("メッセージを送信しました");
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "error");
        }
    }
}

