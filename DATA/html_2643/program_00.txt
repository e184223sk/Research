using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class LorentzEquation : MonoBehaviour
{
    //Lorentz 方程式内の定数
    float p = 10.0f;
    float r = 28.0f;
    float b = 8.0f / 3.0f;

    //Runge-Kutta 法で用いる、時間の刻み幅
    float h = 5e-3f;

    //毎フレームごとに Runge-Kutta 法で GameObject の位置をアップデート
    void Update()
    {
        RungeKutta();
    }

    //Runge-Kutta法の関数
    void RungeKutta()
    {
        Vector3 k1, k2, k3, k4;
        Vector3 position, deltaPosition;

        position = this.transform.position;

        k1 = h * Lorentz(position);
        k2 = h * Lorentz(position + k1 / 2);
        k3 = h * Lorentz(position + k2 / 2);
        k4 = h * Lorentz(position + k3);

        deltaPosition = (k1 + 2 * k2 + 2 * k3 + k4) / 6;

        this.transform.position += deltaPosition;
    }

    //Lorents 方程式の関数
    Vector3 Lorentz(Vector3 position)
    {
        float x = position.x;
        float y = position.y;
        float z = position.z;

        // dx/dt=-px+pz
        // dy/dt=xz-by
        // dz/dt=-xy+rx-z
        float xdot = p * (-x + z);
        float ydot = x * z - b * y;
        float zdot = -x * y + r * x - z;

        return new Vector3(xdot, ydot, zdot);
    }
}

    }

    // Lorentz 方程式の関数
    Vector3 Lorentz(Vector3 position)
    {
        float x, y, z;
        float xdot, ydot, zdot;

        x = position.x;
        y = position.y;
        z = position.z;

        // dx/dt=-px+pz
        // dy/dt=xz-by
        // dz/dt=-xy+rx-z
        xdot = p * (-x + z);
        ydot = x * z - b * y;
        zdot = -x * y + r * x - z;

        return new Vector3(xdot, ydot, zdot);
    }
}

