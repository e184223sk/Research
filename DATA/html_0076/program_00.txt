class A
{
    public A(string s)
    {
        member = s;
    }

    string member;
}

class B
{
    public B(string s)
    {
        member = s;
    }

    string member;
}

//tryとcatchで囲って()キャストする方法
static void Cast(object[] vs)
{
    foreach (object o in vs)
    {
        try
        {
            A v = (A)o;
        }
        catch
        {

        }
    }
}

//asキーワードで変換してからnullチェックする方法
static void AsIf(object[] vs)
{
    foreach (object o in vs)
    {
        A v = o as A;
        if (v == null) { }
    }
}

//isキーワードで変換できるかをチェックし、そのまま変換する方法
static void IfIs(object[] vs)
{
    foreach (object o in vs)
    {
        if (o is A v) { }
    }
}

//isキーワードでチェックしてから()キャストする方法
static void IfIsCast(object[] vs)
{
    foreach (object o in vs)
    {
        if (o is A)
        {
            A v = (A)o;
        }
    }
}

//isキーワードでチェックしてからasキーワードで変換する方法
static void IfIsAs(object[] vs)
{
    foreach (object o in vs)
    {
        if (o is A)
        {
            A v = o as A;
        }
    }
}

//５つの変換方法を試す
static void TryMethods(int percentageOfA)
{
    int separator = (int)(percentageOfA / 100f * ss.Length);
    object[] vs = ss.Select((s, i) =&gt; i &lt; separator ? (object)new A(s) : new B(s)).ToArray();

    Console.WriteLine($"{percentageOfA}%");
    Console.WriteLine($"Cast:\t\t{Measure(count, () =&gt; Cast(vs))}");
    Console.WriteLine($"AsIf:\t\t{Measure(count, () =&gt; AsIf(vs))}");
    Console.WriteLine($"IfIs:\t\t{Measure(count, () =&gt; IfIs(vs))}");
    Console.WriteLine($"IfIsCast:\t{Measure(count, () =&gt; IfIsCast(vs))}");
    Console.WriteLine($"IfIsAs:\t\t{Measure(count, () =&gt; IfIsAs(vs))}");
    Console.WriteLine();
}

static int count = 3000;
static string[] ss = new string[10000000];

//エントリポイント
public static void Entry()
{
    Random random = new Random();
    for (int i = 0; i &lt; ss.Length; i++)
    {
        int length = random.Next(10);
        for (int j = 0; j &lt; length; j++)
        {
            ss[i] += (char)random.Next('A', 'z');
        }
    }

    Console.WriteLine($"count:\t{count}");
    Console.WriteLine($"length:\t{ss.Length}");
    Console.WriteLine();

    TryMethods(0);
    TryMethods(20);
    TryMethods(40);
    TryMethods(60);
    TryMethods(80);
    TryMethods(100);
}

//関数の処理にかかる時間を計測する
public static TimeSpan Measure(int count, Action action)
{
    DateTime time = DateTime.Now;
    for (int i = 0; i &lt; count; i++)
    {
        action();
    }
    return DateTime.Now - time;
}

