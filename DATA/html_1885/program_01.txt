
    public abstract class ConnectorBaseViewModel : SelectableDesignerItemViewModelBase, IObserver&lt;TransformNotification&gt;, ICloneable
    {
        private ObservableCollection&lt;Point&gt; _Points;

        public ConnectorBaseViewModel(int id, IDiagramViewModel parent) : base(id, parent)
        {
            Init();
        }

        public ConnectorBaseViewModel()
        {
            Init();
        }

        public ReactiveProperty&lt;Point&gt; LeftTop { get; set; }
        :

        public ObservableCollection&lt;Point&gt; Points
        {
            get { return _Points; }
            set { SetProperty(ref _Points, value); }
        }

        private void Init()
        {
            _Points = new ObservableCollection&lt;Point&gt;();
            InitPathFinder();
            LeftTop = Points.ObserveProperty(x =&gt; x.Count)
                            .Where(x =&gt; x &gt; 0)
                            .Select(_ =&gt; new Point(Points.Min(x =&gt; x.X), Points.Min(x =&gt; x.Y)))
                            .ToReactiveProperty();
            :
        }
        :
    }

