
// using Microsoft.AspNetCore.Cryptography.KeyDerivation;
// using System.Linq;
// using System.Security.Cryptography;

string password = "ハッシュ化したいテキスト";

// ソルトを作成する。
byte[] salt = new byte[128 / 8];
using var rng = RandomNumberGenerator.Create();
rng.GetBytes(salt);

// Pbkdf2 メソッドではハッシュ化する反復回数や作成するハッシュの長さを指定することができます。
// OS をよって最適化された実装が選択され、自前で実装するよりもパフォーマンスが向上するそうです。
// https://docs.microsoft.com/ja-jp/aspnet/core/security/data-protection/consumer-apis/password-hashing?view=aspnetcore-3.0
byte[] hash = KeyDerivation.Pbkdf2(
  password,
  salt,
  prf: KeyDerivationPrf.HMACSHA256,
  iterationCount: 10000,  // 反復回数
  numBytesRequested: 256 / 8);  // ハッシュの長さ

// ハッシュ値を 16 進数文字列に変換します。
string hashed = string.Concat(hash.Select(b =&gt; $"{b:x2}")); // -&gt; 93541bd68ccf06f3d4f9cf56a3ca415f1d2d315f3f672ecec9f52b0c7c3ad9fc

