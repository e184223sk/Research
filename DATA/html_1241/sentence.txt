More than 1 year has passed since last update.前回で、ANTLR4のListenerで計算機を作ることができた。
それより前にVisitorを少し触ったが、使い方はまだわかっていない。
今回でVisitorについて学ぶ。文法はListenerで計算機を作ったのと同じ。CalculatorBaseVisitorを継承した、CalculatorVisitorクラスを作成。
各メソッドの内容は、VisualStudioが自動的に書き出した内容に、適当にConsole.WriteLineを書き足したもの。
前回との違いは、文法に代替テキストを使っていること。それによりVisitorで利用できるメソッドが増えた。main()の最後のConsole.WriteLineの直前に2行追加VisitorのVisit***もListenerのExit***も、親→左下→右下と辿る。このページの2つ目の図では、終端ではVisitが起きないように書かれているが、終端でもVisitが起きた。理由はわからない。ANTLR のターゲットに Go が追加されたので Gogland とあわせて遊んでみるによると、ANTLR では，構文解析木を作ってから解析をするのではなくて，Listener や Visitor と呼ばれるものをあらかじめ Parser にセットしておいて解析しながら処理を行うことができる仕組みがあります．Listener は解析木を深さ優先で処理していく場合に使い，解析木の形に合わせてたどるノードを変えたい場合には Visitor を使います． Listener も Visitor もひな形ができているのでそれを使うだけです．Antlr4 - Visitor vs Listener PatternによるとDeepL翻訳ではVisitorでは明示的に子ノードを巡回するとあるが、今回はmain()から1回visit()した以外は自動的にvisit()されている。上記のプログラムのスタックトレースをgraphvizで視覚化した。すると、CalculatorVisitor.VisitNumberの場合は
return base.VisitNumber(context);
を起点に、のように、VisualStudioが自動的に書き出したreturn文が子要素のvisitを起動している。何をreturnするか。どのように木をwalkするかは、プログラムの都合で上書きするのだろうと想定する。
今回は計算機を作るので次回以後で、+ / 等の演算子のノードのvisitから、左辺と右辺のvisitを呼び出す。
また、+ /等のノードのvisitは、それ以下の計算結果の数値をreturnする。と上書きする。


