
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Reflection;

namespace Calculator02_1
{
    class CalculatorVisitor : CalculatorBaseVisitor&lt;object&gt;
    {
        public override object Visit([NotNull] IParseTree tree)
        {
            Console.WriteLine("{0}", MethodBase.GetCurrentMethod().Name);
            Console.WriteLine("\tGetText():{0}", tree.GetText());
            return base.Visit(tree);
        }
        public override object VisitExpression([NotNull] CalculatorParser.ExpressionContext context)
        {
            Console.WriteLine("{0}", MethodBase.GetCurrentMethod().Name);
            Console.WriteLine("\tGetText():{0}", context.GetText());
            return base.VisitExpression(context);
        }
        public override object VisitAddition([NotNull] CalculatorParser.AdditionContext context)
        {
            Console.WriteLine("{0}", MethodBase.GetCurrentMethod().Name);
            Console.WriteLine("\tGetText():{0} , Node:{1}", context.GetText(), context.PLUS());
            return base.VisitAddition(context);
        }
        public override object VisitChildren([NotNull] IRuleNode node)
        {
            Console.WriteLine("{0}", MethodBase.GetCurrentMethod().Name);
            Console.WriteLine("\tGetText():{0}", node.GetText());
            return base.VisitChildren(node);
        }
        public override object VisitDivision([NotNull] CalculatorParser.DivisionContext context)
        {
            Console.WriteLine("{0}", MethodBase.GetCurrentMethod().Name);
            Console.WriteLine("\tGetText():{0} , Node:{1}", context.GetText(), context.DIV());
            return base.VisitDivision(context);
        }
        public override object VisitMultiplication([NotNull] CalculatorParser.MultiplicationContext context)
        {
            Console.WriteLine("{0}", MethodBase.GetCurrentMethod().Name);
            Console.WriteLine("\tGetText():{0} , Node:{1}", context.GetText(), context.MULTI());
            return base.VisitMultiplication(context);
        }
        public override object VisitSubtraction([NotNull] CalculatorParser.SubtractionContext context)
        {
            Console.WriteLine("{0}", MethodBase.GetCurrentMethod().Name);
            Console.WriteLine("\tGetText():{0} , Node:{1}", context.GetText(), context.MINUS());
            return base.VisitSubtraction(context);
        }
        public override object VisitParentheses([NotNull] CalculatorParser.ParenthesesContext context)
        {
            Console.WriteLine("{0}", MethodBase.GetCurrentMethod().Name);
            Console.WriteLine("\tGetText():{0}", context.GetText());
            return base.VisitParentheses(context);
        }
        public override object VisitNumber([NotNull] CalculatorParser.NumberContext context)
        {
            Console.WriteLine("{0}", MethodBase.GetCurrentMethod().Name);
            Console.WriteLine("\tGetText():{0} , Node:{1}", context.GetText(), context.NUMBER());
            return base.VisitNumber(context);
        }
        public override object VisitTerminal([NotNull] ITerminalNode node)
        {
            Console.WriteLine("{0}", MethodBase.GetCurrentMethod().Name);
            Console.WriteLine("\tGetText():{0}", node.GetText());
            return base.VisitTerminal(node);
        }
    }
}


