

    [TestClass]
    public class LoggerDemo
    {
        private ILogger _logger;

        [TestInitialize]
        public void Initialize()
        {
            _logger = new ConsoleLogger();
        }

        /// &lt;summary&gt;この関数が起点&lt;/summary&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        [TestMethod]
        public async Task TestMethod1()
        {
            await HeavyMethodMain();
        }

        /// &lt;summary&gt;計測メソッドの起点&lt;/summary&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        private async Task HeavyMethodMain()
        {
            using (_logger.InfoMeasureTimeAsDisposable())
            {
                await this.Multiply(6, 4);
                await this.HeavyMethodSub2();
            }
        }

        /// &lt;summary&gt;掛け算：名称、パラメータ、結果指定の例&lt;/summary&gt;
        /// &lt;param name="v1"&gt;The v1.&lt;/param&gt;
        /// &lt;param name="v2"&gt;The v2.&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        private async Task&lt;decimal&gt; Multiply(decimal v1, decimal v2)
        {
            var ret = 0m;
            using (_logger.InfoMeasureTimeAsDisposable(
                processName: "MultiplyProcessName",
                categoryName: "MultiplyCategoryName",
                parameterName: $"(v1:{v1}, v2:{v2})",
                getResult: () =&gt; ret))
            {
                await Task.Delay(millisecondsDelay: 120);
                return ret = v1 * v2;
            }
        }

        /// &lt;summary&gt;引数無しの例&lt;/summary&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        private async Task HeavyMethodSub2()
        {
            using (_logger.InfoMeasureTimeAsDisposable())
            {
                await Task.Delay(160);
            }
        }
    }

