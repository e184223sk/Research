

        public static async  Task ExecuteAsync() 
        { 
            List&lt;ValueTuple&lt;int, int&gt;&gt; list = Enumerable.Range(1, 30).Select((element, index) =&gt;                          { return (index: index, value: element); }).ToList(); 
            IReadOnlyList&lt;ValueTuple&lt;int,int&gt;&gt; col = new ReadOnlyCollection&lt;ValueTuple&lt;int,int&gt;&gt;(list); 

            var dictionary = new ConcurrentDictionary&lt;int, DateTime&gt;(); 

            // 実行順序は保証できない 
            await col.ParallelForEachAsync(10, async (x) =&gt; 
            { 
                Console.WriteLine($"{x.Item1}: Accepted."); 
                await Task.Delay(TimeSpan.FromSeconds(5)); 

                // 成果物があれば、ディクショナリに詰める 
                var dateTime = DateTime.Now; 
                dictionary.TryAdd(x.Item1, dateTime); 
                Console.WriteLine($"{x.Item1}: Done by {dateTime}"); 
             }); 

            Console.WriteLine("---ordered"); 

            // 順番は保証されている。 
            foreach ( var elm  in col) 
            { 
                DateTime result = DateTime.Now; 
                dictionary.TryGetValue(elm.Item1, out result); 
                Console.WriteLine($"index : {elm.Item1} time: {result} "); 
            } 
        } 

