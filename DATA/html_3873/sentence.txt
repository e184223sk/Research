More than 1 year has passed since last update.８×８のチェス盤に２人で交互にクィーンを置いていき、自分の手番のときに置き場所が無いほうが負けというゲームです。すでに置かれているクィーン（自分が置いたものも含め）の利き筋に新しいクィーンを置くことはできません。
いわゆる８クィーンパズルのゲーム版というところです。クィーンは、縦横斜めの何処へでも移動できます。将棋の飛車と角を合わせた動きになります。出典である「ナノピコ教室1」では、先手必勝かどうかを調べるという問題でしたが、ここでは、実際に人との対戦が出来るようにしてみました。ちなみにあなたが後手の場合は、絶対に勝てません。先手でもちゃんと考えないとなかなか勝てません。.NET Coreのコンソールアプリケーションとして作成していますので、MacでもWindowsでもそのまま動くはずです。実際のこの手のゲームプログラムでは、序盤戦は定石を用いたルーチンになっていると思われますが、８クイーンゲームでは、探索手の数が少ないので、愚直に全探索をしています。枝刈りなどは行っていません。
最初の一手目はすこし時間がかかりますが、それ以降は、すぐに探索が終了します。プログラムを単純化するために、黒石(×)をコンピュータ、白石(○)を人間に固定していますが、実際の探索をするSearchメソッドは、石の色に関係なく探索が出来るようにしてあります。Searchメソッドでは、という動きになっていて、2手先、３手先を読むのではなく、勝敗がきまるまで、ずーっと先読みを続けています。
思考型の対戦ゲームとしての基本構造を示せるという点で、８クィーンゲームはなかなか良い題材だと思います。ソースコードにはコメントを付加していますので、詳しくはソースコードを見てください。以下に、実行例を示します。これは、ゲームの途中の状態。人間のプレイヤーは、2桁の数字（行と列）を入力しクィーンをの置く場所を指定します。盤面の _ は、利き筋になってもうクィーンが置けない場所を示しています。.は、クィーンを置ける場所を示しています。次のは、ゲームが終わった状態。僕は先手(o)でしたが、負けてしまいました(T T)このゲームを制御する実質的なメインクラスです。1回の対戦だけを扱います。基本、表示はこのクラスが受け持っています、1回の対戦を扱うクラスです。2つのプレイヤーを交互に呼び出し、ゲームを進めます。人間のプレイヤーを表すクラスです。コンピュータープレイヤーを表すクラスです。この中に思考ルーチンが組み込まれています。盤面を表すクラスです。
このBoardクラスは他のプログラムでも利用しているBoardBase&lt;T&gt;から派生させていますので、すこしオーバースペックかもしれません。協力最短詰めオセロナイト(騎士)の最適配置問題8-Queenパズルを解く騎士巡回問題(Knight's Tour)などなど。UIとロジックを分離するために、IOberver&lt;T&gt;, IOvervable&lt;T&gt;を実装しています。
GameクラスがIObservable&lt;Board&gt;を実装し、盤面の変化を購読者に通知しています。
購読者クラスは、Controllerクラスで、IObserver&lt;Board&gt;を実装しています。C#のコードは、GitHubでも公開しています。『ナノピコ教室―プログラミング問題集』共立出版 (1990/03) ↩


