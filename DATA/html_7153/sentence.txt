More than 5 years have passed since last update.前回は Riot.js を使って Hello World してみました。
今回は Web API からデータを取得して一覧を表示するところをやってみます。Windows 10 Pro
Visual Studio CodeServer-side に Web API を実装します。今回作成する HTTP メソッドは以下となります。今回は一覧を表示するだけなので一番上の GET メソッドだけあればよいのですが、 CRUD 操作に必要なメソッドを一通り作成しておきます。まずは HTTPメソッドでやり取りするために必要な Model となるクラスを作成していきます。Model を作成していきます。今回は Building Your First Web API with ASP.NET Core MVC and Visual Studio を参考に Repository  パターンを使ってやってみたいと思います。ここでは以下のことをおこないます。まずは Models フォルダに必要なファイルを作成します。Visual Studio Code のターミナルから以下のコマンドを入力してください。Models フォルダに作成した Person.cs のコードを以下のように変更します。Repository を作成します。まずは IPersonRepository に Repository クラスで実装するデータアクセスロジックを定義します。Models フォルダに作成した IPersonRepository.cs のコードを以下のように変更します。続いて作成したインターフェイスに定義されているデータアクセスロジックを PersonRepository に実装します。 Models フォルダに作成した PersonRepository.cs のコードを以下のように変更します。実際は Database からデータを取得してマッピングしたりなどすると思いますが、今回はモックとして private な 静的メンバとして _people コレクションを用意して、適当なデータを突っ込んでいます。System.Collections.Concurrent.ConcurrentDictionary は値のペアのコレクションです。値のペアからなるコレクションということで System.Collections.Generic.Dictionary と似ていますが ConcurrentDictionary は同時に複数のスレッドからアクセスすることができる（スレッド セーフ）という特徴を持っています。作成したRepository クラスをサービスとして登録します。ASP.NET Core プロジェクトで新しくサービスを登録する場合は Startup.cs に定義されている ConfigureServices() メソッドに処理を追加していきます。 AddSingleton() メソッドを呼んで作成した Repository クラスをひとつだけインスタンス化するよう DI コンテナに追加しています。ここで登録したサービスは Controller などのコンストラクタで受取ることで利用できます。これで Model の作成は完了です。つぎは Controller を作成してWeb API として今回提供する HTTP メソッドを実装します。ターミナルから以下のコマンドを入力して Controllers フォルダに PersonController.cs を作成します。作成したらコードを以下のように変更します。コントラクタで先ほど登録した Repository サービスをインジェクションして受取ります。クラスに Attribute を付加してルーティングします。(api/v1/person)GET/POST/PUT/DELETE など Web API として今回提供する HTTP メソッドを定義するときは対応する Attribute をメソッドに付加します。付加できる Attribute は以下となりますURLにパラメータを指定する場合は Attribute の引数に指定します。アクション名を指定する場合は Attribute の Name に指定します。メソッドの戻り値には IEnumerable&lt;Person&gt; など任意の型を返すことができます。ステータスコードは 200 (OK) となります。 また、 戻り値がないメソッドも扱えます。 この場合のステータスコードは  204 (No Content) となります。IActionResult は処理結果に応じてステータスコードを返す必要がある場合に使います。例として Put() メソッドでは条件によって BadRequest() や NotFound() などそれぞれのステータスコードに対応するメソッドを呼び出しています。Put() メソッドの条件とステータスコードは以下となります。最後にプロジェクト作成時にデフォルトで作成されている ValuesController.cs は使わないので削除すれば Server-side の実装は終わりです。続いて Client-side の実装をおこないます。Client-side では index.html と app.tag の修正をおこないます。index.html は以下となります。Web API とのやり取りを jQuery を使って Ajax 通信でおこないたいので jQuery を読込むようにします。あと前回 app タグの title 属性に値を入れていましたが今回は使わないので取りました。app.tag に Ajax 通信で GET してレスポンス結果を一覧で表示する処理を実装します。$.ajax() で GET リクエストして people にレスポンス結果を設定しています。今回は $.ajax() のオプションに url と type だけ指定してますが、本番では timeout を指定したりする必要があると思います。また、Web API の内容を変更した場合など再度 GETリクエストしたときに IE などで取得結果がうまく反映されないことがあると思います。そのときは cache : false を指定してあげます。ul タグ内では取得した結果を一覧で表示するために each="{ person in people }" で people コレクションをループして要素を person として取り出して内容を li タグにバインドしています。これで Client-side の実装は終わりです。dotnet run してブラウザから localhost に接続すると一覧が表示されます。次回は Server-side に実装した HTTP メソッドを利用して、Client-side でデータの追加や変更などができるようにします。


