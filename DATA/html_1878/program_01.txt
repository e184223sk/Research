

    [SerializeField]
    GameObject parent;

    float speed;
    float distance; //追加 基準オブジェクトとの距離。半径の役割を持つ
    Vector3 distancePosition; //追加 半径設定用のベクトル

    // Start is called before the first frame update
    void Awake()
    {
        speed = 50.0f;

        //半径設定 高さをカメラと同一にすることで距離をそのまま半径として利用できる
        distancePosition = new Vector3(parent.transform.position.x, transform.position.y, parent.transform.position.z); 
        distance = Vector3.Distance(distancePosition, transform.position);
    }

    // Update is called once per frame
    void Update()
    {
        float x = Input.GetAxis("RightHorizontal");
        float y = Input.GetAxis("RightVirtical");

        //等速円運動をする物体の角速度(rad/s)の公式は 角速度(ベクトル) = 速度 / 半径 もしくは 角速度(ベクトル) = 角度 / 時間 (2π * 半径 / 時間)
        //今回は角速度(ベクトル) = 2π * 半径 / 時間 を利用する
        //今回の場合、秒間72°移動する処理である
        float radSpeedValue = 2 * Mathf.PI * distance / 5.0f; //変更

        //RotateAroundと同等の動きをする
        Vector3 radSpeed = x * transform.right * radSpeedValue;

        transform.position += radSpeed * Time.deltaTime;

        //振動を防ぐためにMathf.Clampは利用していない
        //振動を防ぐ方法として一定以上もしくは以下になったらそれ以上動きを足さない処理を利用する
        float eulerAnglesX = transform.eulerAngles.x;

        if (!((eulerAnglesX &lt; 180 &amp;&amp; eulerAnglesX &gt; 89.0f &amp;&amp; y &gt; 0) || (eulerAnglesX &gt; 180 &amp;&amp; eulerAnglesX &lt; 271.0f &amp;&amp; y &lt; 0)))
            transform.RotateAround(parent.transform.position, transform.right, y * speed * Time.deltaTime);

        transform.LookAt(parent.transform);

        //半径設定 高さをカメラと同一にすることで距離をそのまま半径として利用できる
        distancePosition = new Vector3(parent.transform.position.x, transform.position.y, parent.transform.position.z);
        //y軸となす角度によって距離が変動するため、毎フレーム更新
        distance = Vector3.Distance(distancePosition, transform.position);
    }

