

using System;
using System.Drawing;
using System.Text;
using System.Text.RegularExpressions;
using System.Runtime.InteropServices;
using System.Windows.Forms;


internal class MyRichTextBox:RichTextBox
{
    //----------------------------------------------------------------
    // Win32
    //
    private const int EM_SETTABSTOPS = 0x00CB;
    private const long IMF_DUALFONT = 0x80;
    private const int WM_SETREDRAW = 0x0008;
    private const int WM_USER = 0x0400;
    private const int EM_SETLANGOPTIONS = WM_USER + 120;
    private const int EM_GETLANGOPTIONS = WM_USER + 121;
    private const int EM_GETTEXTEX = (WM_USER + 94);
    private const int EM_GETTEXTLENGTHEX = (WM_USER + 95);

    // Flags for the GETEXTEX data structure  
    private const int GT_DEFAULT = 0;
    private const int GTL_CLOSE = 4; // Fast computation of a "close" answer 
    private const int GTL_DEFAULT = 0; // Do default (return # of chars) 

    class NativeMethods
    {
        [DllImport("user32.dll", EntryPoint = "SendMessage", CharSet = CharSet.Auto)]
        public extern static IntPtr SendMessage(IntPtr hWnd, int Msg, IntPtr wParam, IntPtr lParam);

        [DllImport("user32.dll", EntryPoint = "SendMessage", CharSet = CharSet.Auto)]
        public static extern IntPtr SendMessage(IntPtr hWnd, int msg, ref GETTEXTEX wParam, StringBuilder lParam);

        [DllImport("user32.dll", EntryPoint = "SendMessage", CharSet = CharSet.Auto)]
        public static extern IntPtr SendMessage(IntPtr hWnd, int msg, ref GETTEXTLENGTHEX wParam, IntPtr lParam);
    }

    [StructLayout(LayoutKind.Sequential)]
    struct GETTEXTEX
    {
        public int cb;
        public int flags;
        public int codepage;
        public IntPtr lpDefaultChar;
        public IntPtr lpUsedDefChar;
    }

    [StructLayout(LayoutKind.Sequential)]
    struct GETTEXTLENGTHEX
    {
        public int flags;
        public int codepage;
    }
    //
    //----------------------------------------------------------------

    protected override void OnFontChanged(EventArgs e)
    {
        SetFixFont();
        SetTabStop(4);
    }

    public override string Text
    {
        get {
            var getLength = new GETTEXTLENGTHEX();
            getLength.flags = GTL_CLOSE; //get buffer size
            getLength.codepage = 1200; //Unicode
            int textLength = (int)(NativeMethods.SendMessage(this.Handle, EM_GETTEXTLENGTHEX, ref getLength, IntPtr.Zero).ToInt64());
            var getText = new GETTEXTEX();
            getText.cb = textLength + 2; //add space for null terminator
            if ( getText.cb &lt; 2 ) { return ""; } // overflow
            getText.flags = GT_DEFAULT;
            getText.codepage = 1200; //Unicode
            var sb = new StringBuilder(getText.cb);
            NativeMethods.SendMessage(this.Handle, EM_GETTEXTEX, ref getText, sb);
            return sb.ToString();
        }
        set { base.Text = value; }
    }

    public override int TextLength
    {
        get {
            var getLength = new GETTEXTLENGTHEX();
            getLength.flags = GTL_DEFAULT; //Returns the number of characters
            getLength.codepage = 1200; //Unicode
            int textLength = (int)(NativeMethods.SendMessage(this.Handle, EM_GETTEXTLENGTHEX, ref getLength, IntPtr.Zero).ToInt64());
            if ( textLength &lt; 0 ) { return 0; } // overflow
            return textLength;
        }
    }

    private void SetFixFont()
    {
        IntPtr lParam = NativeMethods.SendMessage(this.Handle, EM_GETLANGOPTIONS, new IntPtr(0), new IntPtr(0));
        lParam = new IntPtr( ((long)lParam) &amp; (~IMF_DUALFONT));
        NativeMethods.SendMessage(this.Handle, EM_SETLANGOPTIONS, new IntPtr(0), lParam);
    }

    private void SetTabStop(int tabSize)
    {
        int[] tabarray = new int[] { tabSize*4 };
        int wparam = tabarray.Length;

        IntPtr parray = Marshal.AllocCoTaskMem(Marshal.SizeOf(typeof(int)) * tabarray.Length);
        Marshal.Copy(tabarray, 0, parray, tabarray.Length);
        NativeMethods.SendMessage(this.Handle, EM_SETTABSTOPS, new IntPtr(wparam), parray);
    }
}

