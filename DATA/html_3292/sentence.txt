More than 1 year has passed since last update.少し複雑な処理をすると、Transactionを使ってオブジェクト操作履歴を1つに纏めたくなるでしょう。
しかし、例外やnullチェックでの早期リターンで、確実にAbort(もしくはEnd)出来ていないbugを内包する可能性があります。
Autodeskではこの対策としてChangeProcessorを推奨しているようですが、必ずしも使いやすいとは言えないので、何か良い方法がないか模索してみました。C#には言語仕様でusingがあります。
usingが何かを簡単に解説すると、CやC++では、ローカルオブジェクトはスコープを抜けるタイミングでデストラクターが呼ばれる保証がありますが、C#ではガーベージコレクションのタイミングまで存続するので、その欠点を補うものです。InventorのTransaction自体がIDisposableを継承していれば話は簡単なのですが、そうではないので、wrapper classを作りました。
普段使う機能しか実装していないので、名付けてTinyTransactionです。想定される典型的な使い方。要点としては、ということです。
tryとusingのどちらを外側にするかですが、私が組んでいる限りは例の通りusingが外側の方が多いですね。例えばPartDocument型はDocument型に自動変換されないため、コンストラクターを各Document型用に用意しました。Autodesk Inventor API Hacking (概略)


