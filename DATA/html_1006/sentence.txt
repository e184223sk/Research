More than 1 year has passed since last update.これまでの記事で、DLLをUiPathから直接呼び出す手法をご紹介しました本記事では、Visual Studioでブレイクポイントを設定して、高度なデバック方法をご紹介します。■ 実施例
最近では当たり前ですが、昔はUiPathでカスタムライブラリを作成するには、
Visual StudioでDLLを作成し、Nuget ExplorerなどでDLLをnuget化して利用しかありませんでした。UiPathでデバッグするにも、Immediate Panelがなかったり、現時点でもComやラムダ式をデバッグしたり
解析することができませんでした。この記事は2020年7月時点の情報を基に作成しております。
記事の内容は私個人の見解であり、所属する組織の公式見解ではありません。前回の記事で使用したサンプルのカスタムライブラリを使用します前回のソースと同じものです。
今回は、Test2のメソッドを使用します。こちらの記事でご紹介した記事がデバッグを捕捉しやすいので、こちらの実装を流用します
https://qiita.com/takusonix/items/0ac407301570ca433556DLLのソースをVisual Studioで開き、デバッグポイントにブレイクポイントを設定します。
ビルドを行って、DLLを生成します
DLLと同時にpdbファイルが作成されていることを確認します。
UiPathのプロジェクトフォルダにDLLと一緒に、pdbファイルも格納します
Assembly.LoadFileでDLLロードされるUiPathのプロジェクトを実行し、
MessageBoxなどで、ユーザの入力待ち状態にします。
UiPathでMessageBoxが開かれている状態で、VisualStudioのデバッグから、「プロセスのアタッチ」を選択します。
検索窓に、UiPathと入力し、プロジェクト名または、ロボット名と一致するプロセスを選択して、右下の「アタッチ」を選択します。
Visual Studioがデバッグ表示に切り替わります
ラムダ式を含んだ実装をイミディエイトウインドウで確認したり、
message引数の値や、その他の情報を自動パネルから確認したりUiPath以上に有用なDebugが実施できます。
UiPathでExcelを操作する(活用編: 名前を付けて保存する[完成版])を利用して、実際にデバッグしてみます。メッセージボックスの表示を確認する
Visual Studioでプロセスにアタッチする
ブレイクポイントで止まります
UiPathのデバッグでは調査できない、Comオブジェクトや動的ビューも、Visual Studioなら展開可能です。
本投稿では、DLLと一緒にPDBファイルを配置し、VisualStudioからデバックメニューのプロセスアタッチから、UiPathのロボットを捕捉し、事前に設定したブレイクポイントで、処理を停止させる方法と実践的な調査例をご紹介しました。もし、よければLGTMをお願いします。


