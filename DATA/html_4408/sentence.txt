More than 1 year has passed since last update.Waitメソッドによって非同期メソッド（CreateTableAsync）の完了を待機することでDynamoDBへテーブル作成処理をちゃんと完了させるようにしました。
が、こちらの方の非同期処理に関する記事を読んで、Resultプロパティを使って非同期メソッドの結果も取得した方が汎用的と思い、Waitメソッドではなく、Resultプロパティを使うように修正しました。
ありがとうございました。CreateTableしたときに、同名のテーブルが存在すると例外が発生してしまいます。
これを回避するために、CreateTableの前にテーブルの存在確認をするようにしました。
テーブルの存在確認は、ListTablesAsyncメソッドによってテーブルの一覧を取得し、指定した名前のテーブルが存在するかをLinqのExistsメソッドを使って確認しているだけのシンプルなものです。この記事で、公式Alexaチュートリアル第3回の内容をC#で実装しました。次は第4回になるわけですが、第4回は永続的なデータの保持ということでデータをDynamoDBに保存する、という内容になっています。そこでまずはC#からDynamoDBにアクセスする方法を学ばなければなりません。
今回はそういう内容です。公式Alexaチュートリアル第4回を完了しておいてください。Node.jsでそのままやってくださってOKです。
なぜかというと、チュートリアルではSDK for Node.jsが提供しているsetPersistentAttributesメソッドを使ってDynamoDBにデータを保存しているのですが、どのような情報がどのような形で保存されるのかを確認するためです。SDK for Node.jsのメソッドを使えばDynamoDBにデータを保存するときのあれやこれやをよろしくやってくれるので、開発者はメソッド一発でデータをDynamoDBに保存することができます。しかし、C#の場合、それを自分でやる必要があるため、こうして確認し、そのとおりにデータを保存してみようという考えです。公式チュートリアル第4回を完了して、スキルをひととおり動かすとDynamoDBにはユーザーの星座データが保存されます。
AWSのウェブコンソールでDynamoDB内のデータを見てみましょう。
DynamoDBを選択して、左側の一覧から「テーブル」を選択すると、おそらく「HoroscopeSkillTable」かもしくはスキル名を冠したテーブルが表示されると思います。
このテーブルをクリックして開き、右側のタブから「項目」を選択すると、以下のようにテーブルの内容が表示されます。idとattributesという2つの列を持つテーブルです。このidというのはリクエストのJSONでいうところのuserId項目になります。このuserIdは何かというと、こちらに説明のあるとおり、利用者のユニークなIDです。
そのスキルが有効（インストール）にされたときに割り当てられ、そのスキルがいつか無効にされるまではそのスキルの利用において同じIDが使われます。
Alexaスキルのテストを行うと毎回違うIDになってしまいますが、実際には上記のとおりになるということです。テストのために、公式チュートリアル第4回のコードに、「test」というキーで整数「5」を追加しています。DynamoDBにはこんな感じでデータが保存されます。
中はこんな感じと。
C#からDynamoDBにアクセスするにはどうしたら良いのか調べてみると、AmazonさんがそのためのパッケージをNugetで配布してくれていました。
それが「AWSSDK.DynamoDBv2」です。これをインストールします。次はAlexaスキルから呼び出してDynamoDBにテーブルを作るテストをするためだけのAWS Lambdaプロジェクトを作りましょう。
テストするなら実際と同じ環境でテストしたいですからね。
こちらの記事を読んでいただいて、プロジェクトの作成と「Alexa.NET」のインストールをしてください。
そして、Function.csの内容は以下のようなリクエストを受け取ってレスポンスを返すだけのシンプルな状態にしておきます。こちらにC#からDynamoDBへアクセスするサンプルコードが掲載されています
ので、これを参考にします。
これはコマンドラインアプリケーションからDynamoDBにアクセスするサンプルコードなので、AWS Lambdaから利用する場合はいくらか調整する必要があります。調整の結果が以下です。公式ページのサンプルコードでは同期メソッドのCreateTableメソッドが使用されていましたが、今はCreateTableAsyncしか提供されていないんですかね？
ともかく、スキルとしての返り値の制限からasync、awaitを使った非同期メソッドの利用はできないので、非同期メソッドを同期メソッドとして使えば問題はないということです。デプロイの方法はこれまたこちらを参考にしていただくとして、一つ注意があります。
それは「Role」についてです。
今回はDynamoDBにアクセスするので、このプログラムにその権限を与える必要があります。
AWSコンソールでIAMの設定から必要な権限（ポリシー）を持ったロールを作成するとよいのですが、とりあえずここではデプロイ時に選択できるロールとして「AWSLambdaFullAccess」というとても力強いポリシーのものを選びます。
デプロイが完了したら動作確認しましょう。
サンプルリクエストとして「Alexa Start Session」を選択します。
レスポンスが返ってきたら、AWSコンソールでDynamoDBにテーブルが追加されているか確認します。
「TestTable」が追加されています。やったね！
ということで、これでC#を使ってAWS_LambdaからDynamoDBにアクセスする第一歩が踏み出せました。DynamoDBに送るリクエストの構築部分がよくわかっていません。
カラム名の指定のところは見てわかるのですが、KeySchemeとProvisionedThroughputがわかっていません。
調べてわかったら追記します。


