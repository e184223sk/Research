
using System;
using kurema.TernaryComparisonOperator;

namespace kurema.TernaryComparisonOperator
{
    public class Comparison
    {
        public static ComparisonValueDouble operator ==(Comparison left, double right) =&gt; new ComparisonValueDouble(true, right, right);
        public static ComparisonValueDouble operator ==(double left, Comparison right) =&gt; new ComparisonValueDouble(true, left, left);
        public static ComparisonValueDouble operator !=(Comparison left, double right) =&gt; new ComparisonValueDouble(true, right, right);
        public static ComparisonValueDouble operator !=(double left, Comparison right) =&gt; new ComparisonValueDouble(true, left, left);
        public static ComparisonValueDouble operator &lt;(Comparison left, double right) =&gt; new ComparisonValueDouble(true, right, right);
        public static ComparisonValueDouble operator &lt;(double left, Comparison right) =&gt; new ComparisonValueDouble(true, left, left);
        public static ComparisonValueDouble operator &gt;(Comparison left, double right) =&gt; new ComparisonValueDouble(true, right, right);
        public static ComparisonValueDouble operator &gt;(double left, Comparison right) =&gt; new ComparisonValueDouble(true, left, left);
        public static ComparisonValueDouble operator &lt;=(Comparison left, double right) =&gt; new ComparisonValueDouble(true, right, right);
        public static ComparisonValueDouble operator &lt;=(double left, Comparison right) =&gt; new ComparisonValueDouble(true, left, left);
        public static ComparisonValueDouble operator &gt;=(Comparison left, double right) =&gt; new ComparisonValueDouble(true, right, right);
        public static ComparisonValueDouble operator &gt;=(double left, Comparison right) =&gt; new ComparisonValueDouble(true, left, left);

        public override bool Equals(object? obj)
        {
            return Equals(obj as ComparisonValueDouble);
        }

        public bool Equals(ComparisonValueDouble? other)
        {
            return other is not null;
        }

        //new Comparison()よりComparison.NewCompの方が書きやすい場合。
        public static Comparison NewComp =&gt; new Comparison();

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

    [kurema.TernaryComparisonOperator.OperatorOverloadingAttacher.OperatorOverloadingAttachTarget]
    public partial class ComparisonValueDouble : IEquatable&lt;ComparisonValueDouble?&gt;
    {
        internal ComparisonValueDouble(bool status, double valueLeft, double valueRight)
        {
            Status = status;
            ValueLeft = valueLeft;
            ValueRight = valueRight;
        }

        public double ValueLeft { get; private set; }
        public double ValueRight { get; private set; }
        public bool Status { get; private set; }

        public static bool operator true(ComparisonValueDouble value) =&gt; value.Status;
        public static bool operator false(ComparisonValueDouble value) =&gt; !value.Status;

        public static ComparisonValueDouble operator &lt;(ComparisonValueDouble left, ComparisonValueDouble right) =&gt; Combine(left, right, left.ValueRight &lt; right.ValueLeft);
        public static ComparisonValueDouble operator &gt;(ComparisonValueDouble left, ComparisonValueDouble right) =&gt; Combine(left, right, left.ValueRight &gt; right.ValueLeft);
        public static ComparisonValueDouble operator &lt;=(ComparisonValueDouble left, ComparisonValueDouble right) =&gt; Combine(left, right, left.ValueRight &lt;= right.ValueLeft);
        public static ComparisonValueDouble operator &gt;=(ComparisonValueDouble left, ComparisonValueDouble right) =&gt; Combine(left, right, left.ValueRight &gt;= right.ValueLeft);
        //ここは判断に迷う。
        //( 2.ToComp() &lt; 3 ) == ( 3.ToComp() &lt; 4) を 2 &lt; 3 &amp;&amp; 3 == 3 &amp;&amp; 3 &lt; 4 と解釈するか ( 2 &lt; 3 ) == ( 3 &lt; 4 ) と解釈するか。後者かな。
        public static bool operator ==(ComparisonValueDouble left, ComparisonValueDouble right) =&gt; left?.Equals(right) ?? right is null;
        public static bool operator !=(ComparisonValueDouble left, ComparisonValueDouble right) =&gt; !(left == right);

        public static implicit operator bool(ComparisonValueDouble from) =&gt; from.Status;


        public static ComparisonValueDouble Combine(ComparisonValueDouble left, ComparisonValueDouble right, bool condition)
            =&gt; new ComparisonValueDouble(condition &amp;&amp; left.Status &amp;&amp; right.Status, left.ValueLeft, right.ValueRight);

        public override bool Equals(object? obj)
        {
            return Equals(obj as ComparisonValueDouble);
        }

        public bool Equals(ComparisonValueDouble? other)
        {
            return other is not null &amp;&amp; Status == other.Status;
        }

        public override int GetHashCode()
        {
            int hashCode = -1462305666;
            hashCode = hashCode * -1521134295 + ValueLeft.GetHashCode();
            hashCode = hashCode * -1521134295 + ValueRight.GetHashCode();
            hashCode = hashCode * -1521134295 + Status.GetHashCode();
            return hashCode;
        }
    }

    public static class Extensions
    {
        public static ComparisonValueDouble ToComp(this double from)
        {
            return new ComparisonValueDouble(true, from, from);
        }

        public static ComparisonValueDouble ToComp(this float from)
        {
            return new ComparisonValueDouble(true, from, from);
        }

        public static ComparisonValueDouble ToComp(this sbyte from)
        {
            return new ComparisonValueDouble(true, from, from);
        }

        public static ComparisonValueDouble ToComp(this byte from)
        {
            return new ComparisonValueDouble(true, from, from);
        }

        public static ComparisonValueDouble ToComp(this short from)
        {
            return new ComparisonValueDouble(true, from, from);
        }

        public static ComparisonValueDouble ToComp(this ushort from)
        {
            return new ComparisonValueDouble(true, from, from);
        }

        public static ComparisonValueDouble ToComp(this int from)
        {
            return new ComparisonValueDouble(true, from, from);
        }

        public static ComparisonValueDouble ToComp(this uint from)
        {
            return new ComparisonValueDouble(true, from, from);
        }

        public static ComparisonValueDouble ToComp(this long from)
        {
            return new ComparisonValueDouble(true, from, from);
        }

        public static ComparisonValueDouble ToComp(this ulong from)
        {
            return new ComparisonValueDouble(true, from, from);
        }
    }
}


