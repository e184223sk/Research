
using System;
using System.Text;

#nullable enable
public class TextChainAutoIndent
{
    public TextChainAutoIndent? Origin { get; protected set; } = null;
    public string? Appended { get; protected set; } = null;

    public TextChainAutoIndent() { }
    public TextChainAutoIndent(TextChainAutoIndent? origin, string appended) {
        Origin = origin;
        Appended = appended ?? throw new ArgumentNullException(nameof(appended));
    }

    public int IndentShift { get; set; } = 0;
    public string? IndentText { get; set; } = null;

    public const string IndentTextDefault = "    ";

    public StringBuilder GetStringBuilder()
    {
        var result = GetStringBuilderAndInfo();
        return result.Builder;
    }

    public void Indent() =&gt; IndentShift++;
    public void Unindent() =&gt; IndentShift--;

    public (StringBuilder Builder, int IndentLevel, string IndentText) GetStringBuilderAndInfo()
    {
        if(Origin is null){
            var sb = Origin?.GetStringBuilder() ?? new StringBuilder();
            if (Appended is not null) sb.AppendLine(Appended);
            return (sb, IndentShift, IndentText ?? IndentTextDefault);
        }else{
            var currentResult = Origin.GetStringBuilderAndInfo();
            if (Appended is not null)
            {
                for (int i = 0; i &lt; currentResult.IndentLevel; i++) currentResult.Builder.Append(currentResult.IndentText);
                currentResult.Builder.AppendLine(Appended);
            }
            return IndentText is null ?
                (currentResult.Builder, currentResult.IndentLevel + IndentShift, currentResult.IndentText) :
                (currentResult.Builder, IndentShift, IndentText);
        }
    }
    public static TextChainAutoIndent operator +(TextChainAutoIndent origin, string append) =&gt; new TextChainAutoIndent(origin, append);

    public static explicit operator string(TextChainAutoIndent from) =&gt; from.ToString();
    public override string ToString() =&gt; this.GetStringBuilder().ToString();
}

