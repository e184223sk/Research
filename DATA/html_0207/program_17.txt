
public class TextChainCombined : IStringBuilderProvider
{
    public TextChainCombined(IStringBuilderProvider left, IStringBuilderProvider right)
    {
        Left = left ?? throw new ArgumentNullException(nameof(left));
        Right = right ?? throw new ArgumentNullException(nameof(right));
    }

    public IStringBuilderProvider Left { get; private set; }
    public IStringBuilderProvider Right { get; private set; }

    public StringBuilder GetStringBuilder(StringBuilder? stringBuilder = null)
    {
        var sb = Left?.GetStringBuilder();
        sb = Right?.GetStringBuilder(sb);
        return sb ?? new StringBuilder();
    }

    public static TextChain operator +(TextChainCombined origin, string append) =&gt; new TextChain(origin, append);
    public static TextChainEx operator +(string append, TextChainCombined origin) =&gt; new TextChainEx(origin, new TextChainEx.Operations.Insert(0, append));
    public static TextChainCombined operator +(TextChainCombined left, IStringBuilderProvider right) =&gt; new TextChainCombined(left, right);

    public static explicit operator string(TextChainCombined from) =&gt; from.ToString();
    public override string ToString() =&gt; this.GetStringBuilder().ToString();

}

