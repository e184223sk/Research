
    public static ComparisonValueDouble operator &lt;(ComparisonValueDouble left, ComparisonValueDouble right) =&gt; Combine(left, right, left.ValueRight &lt; right.ValueLeft);
    public static ComparisonValueDouble operator &gt;(ComparisonValueDouble left, ComparisonValueDouble right) =&gt; Combine(left, right, left.ValueRight &gt; right.ValueLeft);
    public static ComparisonValueDouble operator &lt;=(ComparisonValueDouble left, ComparisonValueDouble right) =&gt; Combine(left, right, left.ValueRight &lt;= right.ValueLeft);
    public static ComparisonValueDouble operator &gt;=(ComparisonValueDouble left, ComparisonValueDouble right) =&gt; Combine(left, right, left.ValueRight &gt;= right.ValueLeft);
    //ここは判断に迷う。
    //( 2.ToComp() &lt; 3 ) == ( 3.ToComp() &lt; 4) を 2 &lt; 3 &amp;&amp; 3 == 3 &amp;&amp; 3 &lt; 4 と解釈するか ( 2 &lt; 3 ) == ( 3 &lt; 4 ) と解釈するか。後者かな。
    public static bool operator ==(ComparisonValueDouble left, ComparisonValueDouble right) =&gt; left?.Equals(right) ?? right is null;
    public static bool operator !=(ComparisonValueDouble left, ComparisonValueDouble right) =&gt; !(left == right);

    public override bool Equals(object? obj)
    {
        return Equals(obj as ComparisonValueDouble);
    }

    public bool Equals(ComparisonValueDouble? other)
    {
        return other is not null &amp;&amp; Status == other.Status;
    }

    public override int GetHashCode()
    {
        int hashCode = -1462305666;
        hashCode = hashCode * -1521134295 + ValueLeft.GetHashCode();
        hashCode = hashCode * -1521134295 + ValueRight.GetHashCode();
        hashCode = hashCode * -1521134295 + Status.GetHashCode();
        return hashCode;
    }
}

