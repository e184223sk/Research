
public class TextChainBrainfuck : TextChain
{
    public TextChainBrainfuck()
    {
    }

    public TextChainBrainfuck(IStringBuilderProvider? origin, string appended) : base(origin, appended)
    {
    }

    public static TextChainBrainfuck operator +(TextChainBrainfuck origin) =&gt; new TextChainBrainfuck(origin, "+");
    public static TextChainBrainfuck operator -(TextChainBrainfuck origin) =&gt; new TextChainBrainfuck(origin, "-");

    public static TextChainBrainfuck operator ++(TextChainBrainfuck origin) =&gt; new TextChainBrainfuck(origin, "+");
    public static TextChainBrainfuck operator --(TextChainBrainfuck origin) =&gt; new TextChainBrainfuck(origin, "-");

    public static TextChainBrainfuck operator !(TextChainBrainfuck origin) =&gt; new TextChainBrainfuck(origin, "[");
    public static TextChainBrainfuck operator ~(TextChainBrainfuck origin) =&gt; new TextChainBrainfuck(origin, "]");


    public static TextChainBrainfuck operator +(TextChainBrainfuck origin, int count) =&gt; RepeatText(origin, count, '+', '-');

    public static TextChainBrainfuck operator -(TextChainBrainfuck origin, int count) =&gt; origin + (-count);

    public static TextChainBrainfuck operator &gt;(TextChainBrainfuck origin, int count) =&gt; RepeatText(origin, count, '&gt;', '&lt;');
    public static TextChainBrainfuck operator &lt;(TextChainBrainfuck origin, int count) =&gt; origin &gt; (-count);

    public static TextChainBrainfuck operator &gt;&gt;(TextChainBrainfuck origin, int count) =&gt; origin &gt; count;
    public static TextChainBrainfuck operator &lt;&lt;(TextChainBrainfuck origin, int count) =&gt; origin &gt; (-count);


    public static TextChainBrainfuck operator *(TextChainBrainfuck origin, int count) =&gt; RepeatText(origin, count, '.');
    public static TextChainBrainfuck operator /(TextChainBrainfuck origin, int count) =&gt; RepeatText(origin, count, ',');

    public static TextChainBrainfuck operator &amp;(TextChainBrainfuck origin, int count) =&gt; RepeatText(origin, count, '[');
    public static TextChainBrainfuck operator |(TextChainBrainfuck origin, int count) =&gt; RepeatText(origin, count, ']');

    public static TextChainBrainfuck operator +(TextChainBrainfuck origin, string text) =&gt; new TextChainBrainfuck(origin, text);


    private static TextChainBrainfuck RepeatText(TextChainBrainfuck origin, int count, char positiveChar, char? negativeChar = null)
    {
        if (count &gt; 0)
        {
            return new TextChainBrainfuck(origin, new string(positiveChar, count));
        }
        else if (count &lt; 0)
        {
            return new TextChainBrainfuck(origin, new string(negativeChar ?? throw new ArgumentNullException(), -count));
        }
        else return origin;
    }

    public static string GenerateCodeFromBrainfuck(string brainfuck, string varName)
    {
        string? GetCode(char character, int count)
        {
            switch (character)
            {
                case '&gt;': return $"{varName} &gt;&gt;= {count};";
                case '&lt;': return $"{varName} &lt;&lt;= {count};";
                case '.': return $"{varName} *= {count};";
                case ',': return $"{varName} /= {count};";
                case '+' when count == 1: return $"{varName} ++;";
                case '+': return $"{varName} += {count};";
                case '-' when count == 1: return $"{varName} --;";
                case '-': return $"{varName} -= {count};";
                case '[' when count == 1: return $"{varName} = !{varName};";
                case '[': return $"{varName} &amp;= {count};";
                case ']' when count == 1: return $"{varName} = ~{varName};";
                case ']': return $"{varName} |= {count};";
                default: return null;
            }
        }

        char? lastChar = null;
        int lastCharCount = 0;

        var result = new TextChainAutoBreak();

        void appendCode()
        {
            if (lastChar != null)
            {
                var code = GetCode(lastChar ?? ' ', lastCharCount);
                if (code != null) result += code;
            }
        }

        foreach (var character in brainfuck)
        {
            if (lastChar == character)
            {
                lastCharCount++;
                continue;
            }

            appendCode();

            lastChar = character;
            lastCharCount = 1;
        }
        appendCode();

        return result.GetStringBuilder().ToString();
    }
}

