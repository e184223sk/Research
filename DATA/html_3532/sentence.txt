More than 1 year has passed since last update.yield returnとかいうわけのわからないreturnが出てきた。
ちょっと調べると、LINQとも、かかわりが深いらしい。どういうものなのか、知りたい。yield returnを使うと、「コレクション」を簡単に作れるのがよいところらしい。ざっとまとめると、以上、こちら参照実行結果
下記のイテレータブロックの結果として、"ジョン""ポール""ジョージ""リンゴ"の4つの文字列を含むコレクションができあがる。コレクションを作成するGetFriendsNames()が実行されるのは、
「IEnumerable names = GetFriendsNames();」の行ではなく
コレクションを使う「foreach (string name in names)」の行。しかも、
GetFriendsNames()のメソッドをまず上から下まで実行してコレクションを作ってから、foreachでそれを使う、ではなく、という感じで、「必要になった要素から、必要になった分だけ計算する」ということをする。また、結果から分かるように、「必要な時に、毎回同じ計算を行う」ことになっている。
上の例だと、GetFriendsNames()で作るコレクションを使う箇所が来るたびに、毎回GetFriendsNames()を実行することになる。同じようなこと(コレクションを作成して、foreachで回すこと)を、Listをnewして行うと、下記のようになる。このときは、Listの実態を「var nameList = new List();
の行で作成しているため、ヒープにこのList用のメモリを確保している。
そうすると、メモリを食う代わりに、例えば同じforeachを2回書いたとしても、同じ計算は2回行われない。イテレータブロック(yield returnを使い、遅延評価されるもの)と通常のコレクション作成(遅延評価されないもの)の違いは、まとめると下記。LINQは、このyield return（遅延評価）で作られている。
なので、上のストーンズのコレクションに対して、などとしても、「var mick = nameList.Where・・」の行の時点では、メモリ上にリストはない。これを、もし「var mick = nameList.Where・・」の時点でListとしてメモリに保持しておきたい、となった場合は、下記のようにする。こうすると、この行の時点でWhereの処理が実際に実行され、メモリにリストが保持される。上の例では、yiled returnを、メソッドの中で上から何個も並べているが、普通はforなどのループの中で使われると思われる。イテレーター
https://ufcpp.net/study/csharp/sp2_iterator.htmlLINQ と遅延評価
https://ufcpp.net/study/csharp/sp3_lazylist.html


