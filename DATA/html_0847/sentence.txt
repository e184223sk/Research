これはもともとあったMVVMなWPFアプリに自動テストとDependency-Injection(DI)とCI/CDを実装してみた記録です。変更点はWPFとはあまり関係ないので、C#であれば他のフレームワークにも参考になるかもしれません。今回は自動テストの追加までです。WPFアプリの中身はファイルリネーマーです。アプリの詳細はこちらで。コード行数850行ぐらい、クラス数40個ぐらいのサンプルアプリに毛の生えたぐらいのコードサイズです。TestフレームワークはxUnit、DIはMicrosoft.Extensions.DependencyInjectionを使用しました。WPFのアプリを含んだソリューションにxUnitのプロジェクトを追加します。WPFアプリをテストするために、テストプロジェクトの.csprojファイルを編集します。
TargetFrameworkをnet5.0-windowsに、UseWPFを追加しました。
そしてテストしたいプロジェクトへの参照も追加します。👇テストを書きやすくするために、nugetでFluentAssertionsパッケージも入れて、ついでに既存のパッケージも更新しておきます。テストする対象にinternalメソッド・プロパティなどがある場合は、テストされる側のプロジェクト（WPFアプリ側）に、単体テストプロジェクトへの許可を書く必要があります。AssemblyInfo.csを新しく作る方法もありますが、csprojに以下の5行を足すほうが簡単です。VisualStudioを使っているなら、テストエクスプローラーを表示しておきます。プロジェクト生成時にデフォルトで以下のようなテストが作成されます。ここにもろもろ足していきます。この状態で試しにテスト実行すると、デフォルトのテストが成功します。これで自動テストを書く準備ができました。まず、この段階でもテストできるパターンを書いてみます。
以下のようなクラスをテストします。ValueHolderクラスは値を内部に値を一つ保持して、変更されたらPropertyChangedイベントを発生させるだけのクラスです。いわば、ReactivePropertyからreactive要素を抜いたようなものです。
LivetのNotificationObjectを継承することで、INotifyPropertyChangedの通知が使えるようになっています。このクラスは他のクラスに依存していないので、この段階でもテストすることができます。ValueHolderの変更通知を貯めておいて、変更前後に適切な通知が来るか確認しています。
テスト実行して、テストが成功したことを確認します。FluentAssertionsを使うことでTest対象.Should().Be..のようにテストしたい対象に対して、メソッドチェーンにテストが書けます。次に以下のようなクラスをテストします。FileElementModelクラスは1つのファイルに対してリネームプレビュー・リネーム実行をするクラスです。そして、これに対するテストを書いてみます。このまま、テスト実行してみましょう。
なんと無事に成功します！よかったよかった。。。次に別の置換文字列のテストを書いてみましょう。置換する文字列以外はおなじです。
（注 ここでは説明のためにコピペで作っていますが、本当はInlineDataを使用すべき案件です）
するとどういうことでしょうか、元のテストが失敗しました！！
「何もしてないのに壊れた！！💢」（している）これはテストのために必要な環境（ファイル）が重複している、2つのテストが並列に走っているため、おきます。
具体的にはテスト2で"coopy -copy.txt" → "coopy -YYY.txt"へのファイル名変更中に、テスト1が"coopy -copy.txt"にアクセスしたりすると例外が発生してテストが失敗してしまいます。つまり、このパターンの問題点は以下の点です。この問題だけでいえば、XUnitの並列実行パラメータを修正したり、テストごとにテストするファイルを置く一時フォルダを分けても解決はします。
ただ、たまたま同名のファイルが使用中であったりすればテストは失敗します。
そもそもファイルへのアクセス自体が、メモリ上で完結していた場合と比べると遅いのでテストでは避けたいです。というわけで、次回はこの問題をDIを使って解決していきます。https://xunit.net/
https://qiita.com/takutoy/items/84fa6498f0726418825dVisualStudio 2019
C# 9
.NET 5
xUnit 2.4.1
xunit.runner.visualstudio 2.4.3
FluentAssertions 5.10.3
LivetCask 3.2.3.2


