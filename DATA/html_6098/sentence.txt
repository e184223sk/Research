More than 3 years have passed since last update.この記事では、MEFの使い方(実装方法)を解説します。(この投稿ではMEFそのものについては説明を省略します)MEFを使うには、各プロジェクトの参照設定で「System.ComponentModel.Composition」アセンブリをインポートしておきます。このサンプルのアセンブリ構成と、ソースコードツリーは下記の通りです。拡張機能のDLL(MefApplication.Extensionのビルド結果)は、MefApplication配下のDebug/Extensionsフォルダに配置しアプリケーションを実行することで動作確認を行います。MEFで読み込む拡張機能が提供するロジックを呼び出すためのメソッドを定義します。
拡張機能はアプリケーションからこのインターフェースを通じて呼び出しを行います。このサンプルでは、何らかの処理を行うメソッドを提供する拡張機能向けのメソッドを定義します。Export属性を付与するだけでもMEFによりエクスポート対象となるため拡張機能を利用できますが、この時拡張機能のコンストラクタが呼び出されるためインスタンスが作成されてしまいます。
1つ2つの拡張機能を読み込むだけならば、インスタンス化に消費されるリソースは僅かですが大量の拡張機能を読み込む可能性がある場合などでは、できるだけ拡張機能を利用する場面までインスタンス化を避けたいと考えます。
しかし、インスタンスは不要ですが、アプリケーションが利用可能なプラグインの一覧情報だけは作成したいというケースも多々あります。このケースでは、プラグインの情報（プラグイン名やプラグイン概要など）をメタデータで実装する方法が利用できます。メタデータを追加するため、既存のExport属性をスーパークラスとしたカスタム属性(MyExportAttribute)を作成します。MEFの拡張機能を示すExport属性に、追加情報を加えたカスタム属性を実装します。
MEFにメタデータであることを認識させるため、カスタム属性クラスにMetadata属性を付与します。拡張機能を実装したDLLを作成用のプロジェクトを、ソリューションに追加します。
このサンプルでは、MefApplication.Extensionプロジェクトを追加し、2つの拡張機能クラス(MyPluginA、MyPluginB)をそれぞれ実装します。拡張機能を呼び出すための拡張機能（クライアントクラス）をアプリケーション内に作成します。このサンプルでは、拡張機能を「Extensionsフォルダ」に配置する事を想定しているため、DirectoryCatalogを使用し、MEFがインポートするDLLファイルを格納するフォルダパスを指定します。
※下記のコードでは、exeファイルの位置をカレントフォルダとした相対パスを指定します。また、MEFのその他の拡張機能をインポートするためのClientクラスは、exeファイル自身のアセンブリに組み込まれるためAssemblyCatalogを使用し、exeファイル自身も拡張機能のインポート元に指定しています。「サンプルのアセンブリ構成」章を参照し、拡張機能のDLLファイルをExtensionフォルダに配置し、アプリケーションを実行します。この実行結果では、拡張機能のメソッドを呼び出しているためex.Value.Execute()の呼び出しにより、拡張機能がインスタンス化されコンストラクタが実行されていることを確認できます。リソース消費を抑えるために、遅延読み込みにより拡張機能のインスタンスを作成せずにメタデータだけ読み込むように、ソースコードを変更します。上記のコードは、githubからダウンロードできます。


