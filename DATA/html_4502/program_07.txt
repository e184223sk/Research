

    public class ExceptionHandlerSample : DeepInterceptor
    {
        public override AsyncClientStreamingCall&lt;TRequest, TResponse&gt; AsyncClientStreamingCall&lt;TRequest, TResponse&gt;(
            ClientInterceptorContext&lt;TRequest, TResponse&gt; context
            , AsyncClientStreamingCallContinuation&lt;TRequest, TResponse&gt; continuation
        )
        {
            try
            {
                return base.AsyncClientStreamingCall(context, continuation);
            }
            catch (Exception ex)
            {
                // 例外が発生したときの処理
            }
        }

        protected async override Task InterceptClientWriteRequest&lt;TRequest, TResponse&gt;(
            Func&lt;TRequest, Task&gt; writeRequest
            , TRequest request
            , ClientInterceptorContext&lt;TRequest, TResponse&gt; context
        )
        {
            try
            {
                await base.InterceptClientWriteRequest(writeRequest, request, context).ConfigureAwait(false);
            }
            catch(Exception ex)
            {
                // 例外が発生したときの処理
            }
        }

        protected override Task InterceptClientCompleteRequest&lt;TRequest, TResponse&gt;(
            Func&lt;Task&gt; completeRequest
            , ClientInterceptorContext&lt;TRequest, TResponse&gt; context
        )
        {
            try
            {
                await base.InterceptClientCompleteRequest(completeRequest, context).ConfigureAwait(false);
            }
            catch (Exception ex)
            {
                // 例外が発生したときの処理
            }
        }
    }

