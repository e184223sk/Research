More than 1 year has passed since last update.Grpc.Core.Intercepters.Intercepter クラスには RPC メソッドの呼び出しに対するインターセプトメソッドが定義されており、これらのメソッドをオーバーライドすることによって RPC メソッドの呼び出し前後に任意の処理を割り込ませたり、例外に対する処理を行うことができます。インターセプターの仕組みについてはこちらを参照してください。
gRPC インターセプターの利用（アイデア編）私は今、Timeout や Unavailable など特定の例外が連続して発生した場合は一定時間 RPC メソッドの呼び出しを遮断する「サーキットブレーカー」を実装しているのですが、非同期 Unary, ClientStreaming, ServerStreaming, DuplexStreaming （つまり同期 Unary 以外）では RPC メソッドの呼び出し自体で例外が発生することは稀です。これらのメソッドはこの後行う非同期処理のための Call オブジェクトを生成するだけだからです。サーバーダウンしていたとしても呼び出しは成功し、リクエストを書き込んだりレスポンスを読み込んだりした時点で例外が発生します。このときの例外は Intercepter クラスのメソッドを単純にオーバーライドするだけでは捕捉できません。そこで、ストリーム入出力に対するインターセプト機能を追加することにしました。Intercepter クラスを継承した DeepIntercepter クラスとして実装します。Intercepter クラスではインターセプトを行いたい箇所に対応したインターセプトメソッドをオーバーライドする設計になっていますので、ストリーム入出力に対するインターセプトもこの設計に倣うことにします。public である必要はないと考えられるため、protected virtual メソッドとして実装します。RPC 呼び出しメソッドの引数として受け取ったストリームリーダー／ライターをラップし、WriteAsync や MoveNext メソッドに対するインターセプト処理を組み込んだラッパーを生成します。オリジナルのストリームリーダー／ライターの代わりにラッパーを後続の処理に渡します。ソースコードは GitHub にアップロードしてあります。
【GitHub】DeepInterceptor のソースコードラップ対象のストリームリーダー／ライターの型は次の三つです。ラップ対象のインスタンスを内包し、ストリーム操作を行うメソッドが呼び出されたときに実行する処理をデリゲートとして受け取ります。Intercepter クラスを継承して DeepIntercepter クラスを定義します。インターセプトメソッドをオーバーライドし、引数で受け渡しされるストリームリーダー／ライターをラッパーに置き換えます。以下は ClientStream のインターセプトを行う AsyncClientStreamingCall メソッドのオーバーライト部分の抜粋です。続いて、上記のメソッド内で呼び出しているストリームライターのラップ処理です。最後にインターセプトメソッドです。protected virtual メソッドとして定義しています。ストリームや Call オブジェクトに対して操作が行われたときにこれらのメソッドが呼び出されます。割り込みを行いたい場合、これらのメソッドをオーバーライドします。Interceptor クラスで提供されているインターセプトメソッドに加えて DeepInterceptor に定義したインターセプトメソッドをオーバーライドし、RPC メソッド呼び出しとストリーム入出力の両方に対する割り込みを行うことができるようになりました。


