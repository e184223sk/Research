

    internal sealed class AsyncStreamReaderWrapper&lt;T&gt; : IAsyncStreamReader&lt;T&gt;
    {

        internal AsyncStreamReaderWrapper(
            IAsyncStreamReader&lt;T&gt; streamReader
            , Func&lt;IAsyncStreamReader&lt;T&gt;, CancellationToken, Task&lt;bool&gt;&gt; onMoveNext
            , Action&lt;IAsyncStreamReader&lt;T&gt;&gt; onDispose)
        {
            m_StreamReader = streamReader;
            m_OnMoveNext = onMoveNext;
            m_OnDispose = onDispose;
        }

        private readonly IAsyncStreamReader&lt;T&gt; m_StreamReader;
        private readonly Func&lt;IAsyncStreamReader&lt;T&gt;, CancellationToken, Task&lt;bool&gt;&gt; m_OnMoveNext;
        private readonly Action&lt;IAsyncStreamReader&lt;T&gt;&gt; m_OnDispose;

        public T Current
        {
            get { return m_StreamReader.Current; }
        }

        public void Dispose()
        {
            m_OnDispose(m_StreamReader);
        }

        public async Task&lt;bool&gt; MoveNext(CancellationToken cancellationToken)
        {
            return await m_OnMoveNext(m_StreamReader, cancellationToken).ConfigureAwait(false);
        }

    }

