
namespace Quantum.Jones_figEight_5th
{
    open Microsoft.Quantum.Primitive;
    open Microsoft.Quantum.Canon;
    open Microsoft.Quantum.Extensions.Math;

    operation Set (desired: Result, q: Qubit) : Unit
    {
        let current = M(q);
        if (desired != current)
        {
            X(q);
        }
    }

    // U3'(γ, β, δ)
    operation U3p (gamma : Double, beta : Double, delta : Double, q : Qubit) : Unit
    {
        body (...)
        {
              Rz(delta, q);
              Ry(gamma, q);
              Rz(beta, q);
        }

        adjoint auto;
        controlled auto;
        controlled adjoint auto;
    }

    // B1'
    operation B1p (q : Qubit) : Unit
    {
        body (...)
        {
              U3p(0.0, 1.40 * PI(), 0.0, q);
              R(PauliI, 0.20 * PI(), q);
        }

        adjoint auto;
        controlled auto;
        controlled adjoint auto;
    }

    // B2'
    operation B2p (q : Qubit) : Unit
    {
        body (...)
        {
              U3p((103.6 / 180.0) * PI(), 0.60 * PI(), -0.40 * PI(), q);
              R(PauliI, -1.80 * PI(), q);
        }

        adjoint auto;
        controlled auto;
        controlled adjoint auto;
    }


    operation HadamardTest_figEight_5th (count : Int, initial : Result, index : Int) : Int
    {
        mutable numZeros = 0;

        using (qubits = Qubit[2])
        {
            for (test in 1..count)
            {
                Set (Zero, qubits[0]);
                Set (Zero, qubits[1]);

                if (index / 2 == 1)
                {
                    X(qubits[1]);
                }

                H(qubits[0]);

                if (index % 2 == 1)
                {               
                    Adjoint(S)(qubits[0]);
                }

                Controlled(B1p)([qubits[0]], qubits[1]);
                Controlled(Adjoint(B2p))([qubits[0]], qubits[1]);
                Controlled(B1p)([qubits[0]], qubits[1]);
                Controlled(Adjoint(B2p))([qubits[0]], qubits[1]);

                H(qubits[0]);

                let res = M(qubits[0]);

                if (res == Zero)
                {
                    set numZeros = numZeros + 1;
                }
            }

            ResetAll(qubits);
        }

        return numZeros;
    }
}

