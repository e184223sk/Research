namespace Quantum.Jones_figEight_4th
{
    open Microsoft.Quantum.Primitive;
    open Microsoft.Quantum.Canon;
    open Microsoft.Quantum.Extensions.Math; // PI()

    operation Set (desired: Result, q: Qubit) : Unit
    {
        let current = M(q);
        if (desired != current)
        {
            X(q);
        }
    }

    operation HadamardTest_figEight_4th (count : Int, initial : Result, index : Int) : (Int, Int)
    {
        mutable numZeros = 0;

        using (qubits = Qubit[2])
        {
            for (test in 1..count)
            {
                // initial state: |00&gt;
                Set (Zero, qubits[0]);
                Set (Zero, qubits[1]);

                if (index / 2 == 1)
                {
                    X(qubits[1]);
                }

                H(qubits[0]);

                if (index % 2 == 1)
                {               
                    Adjoint(S)(qubits[0]);
                }

                // controlled-A1
                Rz(0.25 * PI(), qubits[1]);
                CNOT(qubits[0], qubits[1]);
                Rz(0.25 * PI(), qubits[1]);
                Ry(0.0, qubits[1]);
                CNOT(qubits[0], qubits[1]);
                Ry(0.0, qubits[1]);
                Rz(-0.50 * PI(), qubits[1]);
                R1(-0.125 * PI(), qubits[0]);

                // controlled-A2†
                Rz(0.50 * PI(), qubits[1]);
                CNOT(qubits[0], qubits[1]);
                Rz(0.0, qubits[1]);
                Ry(-0.25 * PI(), qubits[1]);
                CNOT(qubits[0], qubits[1]);
                Ry(0.25 * PI(), qubits[1]);
                Rz(-0.50 * PI(), qubits[1]);
                R1(0.125 * PI(), qubits[0]);

                // controlled-A1
                Rz(0.25 * PI(), qubits[1]);
                CNOT(qubits[0], qubits[1]);
                Rz(0.25 * PI(), qubits[1]);
                Ry(0.0, qubits[1]);
                CNOT(qubits[0], qubits[1]);
                Ry(0.0, qubits[1]);
                Rz(-0.50 * PI(), qubits[1]);
                R1(-0.125 * PI(), qubits[0]);

                // controlled-A2†
                Rz(0.50 * PI(), qubits[1]);
                CNOT(qubits[0], qubits[1]);
                Rz(0.0, qubits[1]);
                Ry(-0.25 * PI(), qubits[1]);
                CNOT(qubits[0], qubits[1]);
                Ry(0.25 * PI(), qubits[1]);
                Rz(-0.50 * PI(), qubits[1]);
                R1(0.125 * PI(), qubits[0]);

                H(qubits[0]);

                let res = M(qubits[0]);

                // count |0&gt;
                if (res == Zero)
                {
                    set numZeros = numZeros + 1;
                }
            }

            ResetAll(qubits);
        }

        // number of |0&gt; and |1&gt;
        return (numZeros, count - numZeros);
    }
}

