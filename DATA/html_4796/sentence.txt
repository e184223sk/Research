More than 3 years have passed since last update.【swift】 1から100未満の素数の和をforを使わずに求める。こちらの記事を拝見して、業務でfor文を使わず関数型っぽく書くメリットを考えてみました。個人的に業務で関数型っぽく書くことのメリットはだと思っています。
（ですので、今回はパフォーマンスを最優先していません。）ですので、僕ならまず「素数かどうか」を判定する関数を書きます。
その関数をフィルター系の関数1に渡して素数だけの数列にする形をとります。そうすることで、読み手に何をする処理かが伝わりやすくなるのと、
再利用がしやすくなると思います。C#で書きますが、Swift や JavaScript などほかの言語でも同様です。まず、数値が素数ならtrue、そうでない場合はfalseを返す関数を作ります。
例題の解き方だけを考えるだけなら、
1 から 99 までを数え上げて足す処理の中に素数判定を組みこんだほうが効率が良いですが、
あえて、読みやすさ、再利用性のために小さなメソッドに切り出しています。上記の関数は C#プログラミングのイディオム/定石&amp;パターンを参考にしました。素数判定でfor使わない解法は @albireo さんにコメントしていただいたので、そちらへどうぞ。先ほどのIsPrimeを使って1から100未満の素数の和をforを使わずに求めたいと思います。
ここから関数型っぽくなります。かなり読みやすいのではないでしょうか？3IsPrimeを定義しないと何をやっているか読みにくくなります。numbersには何かしらランダムな数列が入っていると思ってください。素数をX個取り出すような実装も簡単です。色々、アドバイスいただいたので、それに従ってIsPrimeを書き直してみました。Swift や JS のfilterとか C# の Where とか関数を引数にとってフィルタリングするメソッドのことを言っています。 ↩Where(IsPrime)のように関数そのものを渡すこともできます。 ↩Aggregateでも良いと思います。 ↩


