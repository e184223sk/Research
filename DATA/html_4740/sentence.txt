More than 3 years have passed since last update.string型の変数をint型もしくはenum型に変換することを考えます。変換の直前まで変換後の型は分からず動的に変換することを想定しています。結果確認用として、文字列99をint型およびenum型に変換できているか確認するプログラムを用意しました。型変換の具体的な実装はメソッドConvertToTextTypeで行うものとしパラメータTで変換後の型を指定します。はじめに自力で実装するとどのような感じになるのか確認します。適当に実装した例がこちらです。変換後の型を自力で調べ、エラー処理をし、変換したものを返すという構造になっています。これには以下のような課題があります。以降このメソッドに改良を加えたいと思います。.NetFrameWorkのTypeConverterクラスのサブクラスであるInt32Converter、EnumConverterを用いて先程のプログラムを改良したものがこちらです。既存のクラスを利用したことでエラー処理を自前で実装する必要がなくなりました。しかし先程にもあった、変換後の型が増えるたびにif文が増えていくという課題が残っています。上記を更に改良し、型を判別するためのif文を書かなくてすむように改良したのがこちらです。.NetFrameWorkのTypeDescriptor.GetConverterメソッド利用して、先程は自力で行っていたTypeConverterの生成を肩代わりさせています。TがintならconverterにInt32Converterが、enumならEnumConverterが設定されます。これによって自力で実装する場合に比べてシンプルに型変換のプログラムを記述できることが確認できました。TypeDescriptor.GetConverterメソッドで引数に自作クラスを設定して動作させてもうまく動かないと思います。動作させたい場合は変換後のクラスに対してTypeConverterAttributeを設定する必要があります。ここでは変換後の自作クラスMyClassに対して、自作したMyConverterをTypeConverterAttributeに渡すことでTypeDescriptor.GetConverterでも扱えるようになっています。これによってstring型をMyClass型に変換できるようになりました。MyConverterの実装は簡略化しています。詳しくは下記リンクが参考になると思います。参考: 型コンバーターを実装する


