
namespace Examples.GrpcConfiguration.Models
{

    /// &lt;summary&gt;
    /// 
    /// &lt;/summary&gt;
    public class ExampleInterceptor : Interceptor
    {

        /// &lt;summary&gt;
        /// 
        /// &lt;/summary&gt;
        public ExampleInterceptor() : this("")
        {
        }

        /// &lt;summary&gt;
        /// 
        /// &lt;/summary&gt;
        /// &lt;param name="name"&gt;&lt;/param&gt;
        public ExampleInterceptor(string name)
        {
            Name = name;
        }

        /// &lt;summary&gt;
        /// 
        /// &lt;/summary&gt;
        public string Name { get; set; }

        /// &lt;summary&gt;
        /// 
        /// &lt;/summary&gt;
        /// &lt;typeparam name="TRequest"&gt;&lt;/typeparam&gt;
        /// &lt;typeparam name="TResponse"&gt;&lt;/typeparam&gt;
        /// &lt;param name="request"&gt;&lt;/param&gt;
        /// &lt;param name="context"&gt;&lt;/param&gt;
        /// &lt;param name="continuation"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public override AsyncUnaryCall&lt;TResponse&gt; AsyncUnaryCall&lt;TRequest, TResponse&gt;(TRequest request, ClientInterceptorContext&lt;TRequest, TResponse&gt; context, AsyncUnaryCallContinuation&lt;TRequest, TResponse&gt; continuation)
        {
            System.Diagnostics.Debug.WriteLine(string.Format("[CLIENT][ExampleInterceptor:{0}] method={1} request={2}", Name, context.Method.FullName, request));
            return base.AsyncUnaryCall(request, context, continuation);
        }

        /// &lt;summary&gt;
        /// 
        /// &lt;/summary&gt;
        /// &lt;typeparam name="TRequest"&gt;&lt;/typeparam&gt;
        /// &lt;typeparam name="TResponse"&gt;&lt;/typeparam&gt;
        /// &lt;param name="request"&gt;&lt;/param&gt;
        /// &lt;param name="context"&gt;&lt;/param&gt;
        /// &lt;param name="continuation"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public override Task&lt;TResponse&gt; UnaryServerHandler&lt;TRequest, TResponse&gt;(TRequest request, ServerCallContext context, UnaryServerMethod&lt;TRequest, TResponse&gt; continuation)
        {
            System.Diagnostics.Debug.WriteLine(string.Format("[SERVICE][ExampleInterceptor:{0}] method={1} request={2}", Name, context.Method, request));
            return base.UnaryServerHandler(request, context, continuation);
        }

    }

}

