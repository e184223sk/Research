More than 1 year has passed since last update.本記事はC#9.0に関する情報を自分なりにまとめて書いたものとなります。普段C#をメインで使用している人もUnityを使ってゲーム開発している人にも、これからのC#に関する予習となれば幸いです。あとこれアドカレ記事なんですが、完全に遅刻してます、すいません。↓前半は以下から↓
https://qiita.com/4_mio_11/items/bbd0a7c8800b40a13df9現在C#9.0はまだまだ計画段階であり、現在35の機能提案が行われています。以下でC#の言語機能の提案・計画を確認することができます。csharplang/projects全てがC#9.0に確実に入るというわけではないのですが、この中でもいくつか気になる機能の方をピックアップして軽く紹介したいと思います。ざっくり下記の機能について見て行きます。このほかにも細かな構文の変更が提案されていますが、それは追々リリースされてからで…。こちらはF#の判別共用体やC++のVARIANT型と似ている機能ですが、僕はF#を知らないのでどういった機能になるかと言うところから確認していきたいと思います。(https://github.com/dotnet/csharplang/issues/113)判別共用体は、値に対する任意の型の候補を複数定義した型を作成することができる機能だと思われます。まずはint型をbool型どちらかの値を取りうるIntOrBool型を定義します。その次に、IList&lt;int&gt;型とタプル、IntOrBool型いずれかの値を取りうるMixedType型を定義してみます。判別共用体のインスタンスを作成する場合は、以下のようになります。この判別共用体の値でのパターンマッチング例は以下のようになります。新しい属性[CallerArgumentExpression]を使用することで、メソッドに渡される式を文字列としてキャプチャしてエラーメッセージを出力する際にその式の情報も含めることができるようになります。主にAPI開発者などの役に立ちそうな機能です。コードは以下のmdから…。(https://github.com/dotnet/csharplang/blob/master/proposals/caller-argument-expression.md)[CallerArgumentExpression("引数名")] string 変数名と指定することで、指定した引数に渡された式を文字列化して変数名へ格納します。この変数名は引数名+Expressionとすると分かりやすいかもしれません。配列作成時に、new()式を使用することで、コードの簡略化が可能です。(https://github.com/dotnet/csharplang/issues/100)この機能提案は賛否両論という感じです。推論であれば既にvarが存在していますが、varを使う場合には型は右辺に明記することとなります。今回のnew()式ですと、左辺にて型を明記する必要があり、読み辛さを感じる人が多いのかなと。前半と後半に分けて気になる機能の紹介を行いましたがいかがだったでしょうか。数年前から関数型言語が流行ってきていることもあり、Haskellでのような考え方を取り入れることが多いのかなという印象です。ちょっとこれを機に関数型言語の勉強をしようと思います…。実際理解するまでめちゃくちゃ時間かかりました…。これからのC#の未来に期待しつつ、アドベントカレンダーを締めようと思います、ありがとうございました。


