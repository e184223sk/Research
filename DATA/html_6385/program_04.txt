
public async static Task RunTaskAsync()
{
    try {
        var script = CSharpScript.Create( File.ReadAllText( "delay.csx" ) );
        var cancelTokenSrc = new CancellationTokenSource();

        var cancelTask = Task.Run( () =&gt;
        {
            Thread.Sleep( 4000 );   //スクリプト実行まで時間が掛かるので適当にwait
            cancelTokenSrc.Cancel();
            Console.WriteLine( "Cancel executed" );
        } );

        await Task.WhenAll( script.RunAsync( cancellationToken: cancelTokenSrc.Token ), cancelTask );
    }
    catch( CompilationErrorException ex ) {
        Console.WriteLine( "[Compile Error]" );
        Console.WriteLine( ex.Message );
    }
    catch( TaskCanceledException ) {
        Console.WriteLine( "Task is canceled" );
    }
    catch( OperationCanceledException ) {
        Console.WriteLine( "Operation is canceled" );
    }
    catch( Exception ex ) {
        Console.WriteLine( ex );
    }
}

