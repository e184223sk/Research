More than 1 year has passed since last update.Regionを設定する際にRegionManager.csのRegionManager添付プロパティも一緒に指定しましょう。Prism.Wpfで子WindowでRegionを使う方法やPopupWindowActionで出したWindowでRegionを使用するで紹介されているんですけど、PrismのRegion機能ってメインウィンドウから新しいウィンドウをshowして、そのウィンドウ内でRegionをいつも通り設定しても正常に動作しないんですよね。
そのための手法として上記が紹介されているんですけどもう少しシンプルにならないかなぁと調査した結果、RegionManager.csのRegionManager添付プロパティを指定すれば良さそうなのでその内容について投稿します。Prism: 7.1.0.431
.NET Framework 4.7.2PopupWindowActionSample(自作動作確認用)
Prism
こんな感じでメインウィンドウからPopupWindowActionを使用してカスタムウィンドウとしてPopupViewを呼び出します。PopupViewでPopupRegionを設定してSubaViewとSubbViewを切り替えれるか確認します。RegionManagerから抜粋します。以下、google翻訳様です。
コントロールに、RegionNamePropertyとRegionManagerPropertyの両方の添付プロパティがnull以外の値に設定されていて、そのコントロールにIRegionAdapterマッピングが登録されている場合、 そのコントロール用に新しいリージョンを作成して適応させ、指定されたリージョン名でIRegionManagerに登録します。自分的には両方指定したRegionの中はRegionManagerPropertyで指定したRegionManagerで管理されるよ、って認識です。
なのでメインウィンドウでもRegionを別管理したい領域がある場合(毎回生成するようなViewでRegion指定してる時etc)はこの添付プロパティを指定すれば良いのかなと思います。IRegionManagerのインスタンスを指定して上げれば良いのでバインディングしてViewModelから指定するようにしました。以下のパターンを考えました。1.PopupViewModelのコンストラクタで生成
2.ContentViewModelからのリクエスト時に生成してPopupViewに渡すどっちでも良いような気もしますがリクエスト時に毎回設定するのだるいので1.にしました。コンストラクタインジェクションでメインウィンドウの(デフォルトの)RegionManagerを注入してCreateRegionManagerメソッドで新しいRegionManagerを生成してます。それからLoadedイベントをフックしてRequestNavigateしてます。Prism.WpfでRequestNavigateと戻る、進む(IRegionNavigationService, IRegionNavigationJournal)で紹介したことあるんですけど、
OnNavigatedToで取得できるIRegionNavigationServiceを使用すればRegionManagerを意識することなく遷移できます(所属しているRegion内に限る)。IRegionManagerにもその実装であるRegionManagerにもIDisposeはついてないんですよね。
だからいらないとは思うんですけど自分はとりあえず使い終わったら登録されているRegionをRemoveするようにしようかと思います。↑で記載したRegionManagerの後始末をどこでするか？という話なんですけど、
自分の認識だとこの項のタイトル通りなんですけどフック出来たりするんですかね？
右上の閉じるボタンを非表示にするとかPopupWindowActionで呼ばれているDefaultWindowを変更とかいくつか方法はあるとは思うんですけど自分は呼び出し元にRegionManagerを渡して呼び出し元でRemoveするようにしてみました。結局呼び出し元で後始末するんならRegionManagerの新しいインスタンスも呼び出し元で詰めても良いような気がしました。
そもそもRegionManagerの後始末が要らないならやらなくて良い処理だと思いますけど。別窓開いても(Prismデフォルトの機能だけで)Region管理できますよってお話でした。
結局答えは元のソースに書いてあるんですねぇ。
認識違い等あればご指摘お願いします。


