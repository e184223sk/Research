More than 3 years have passed since last update.C#スクリプトでは呼び出し側でグローバル変数・関数(実際はメソッド)を設定することができます。
標準のスクリプティング環境としてcsi.exeでも使いやすいものがいくつか用意されています。csi.exeの使い方はこちら
csiでC#スクリプト
Visual Studio 2017だと
C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin\Roslyn\csi.exe
になっているようです。普通のC#でいうMain(string[] args)のargsのようなものです。
argsはstring[]ですがArgsはIList&lt;string&gt;(List&lt;string&gt;)です。C#には標準出力用にConsole.WriteLineというメソッドが用意されています。
しかし、csi.exeにはPrintという関数が別に定義されています。
出力を比べてみます。int,doubleでは同じ出力、char,stringではクォーテーションでくくられた出力という違いですね。
これだけならあまり意味のないように思えます。
次の例だとどうでしょうか。Console.WriteLineではクラス名が表示される微妙な出力がPrintではいい感じに整形されて表示されていますね。
PHPのvar_dumpなどに近い雰囲気です。
さらにクラスを出力してみます。publicなフィールド・プロパティを自動で表示してくれます。IEnumerableの場合はプロパティを表示しないかわりに、中身を展開して表示していますね。スクリプトでいちいち書かなくても良いので非常に使い勝手が良いでしょう。出力する文字列の長さを設定します。
初期値は1024です。MaximumOutputLengthを超えた箇所の省略で表示する文字列です。
初期値は"..."です。整数の出力を切り替えます。初期値は10。
設定できるのは10進数と16進数のみで、2進数などはできないようです。無念。制御文字をエスケープして表示するかどうかを設定します。初期値はtrue。
下記のサンプルを見るのが早いでしょう。表示形式を設定します。
設定できるものは以下の通りです。
変更にDLL参照が必要なこともあり他の設定に比べると使う機会は少なそうです。SourcePaths,ReferencePathsはインタラクティブ(csx引数なしのcsi.exe呼び出し)でのみ使えます。
使い方はよくわかりませんでしたので、詳しい方がいらっしゃったら解説をお願いします。https://github.com/dotnet/roslyn/blob/master/src/Scripting/Core/Hosting/InteractiveScriptGlobals.cs
https://github.com/dotnet/roslyn/blob/master/src/Scripting/Core/Hosting/CommandLine/CommandLineScriptGlobals.cs


