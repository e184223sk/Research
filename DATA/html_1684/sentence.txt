More than 1 year has passed since last update.　次の写真に示す定規を作ってみた。何の役にも立たない定規だが、Formアプリケーションに必要な動作を幾つか組み込んである。
　この定規でできることは、次のとおりである。
（１）定規の目盛りを読むために黄色い矢印をドラッグして鶯色の領域に配置できる。
　　　　　　　　　　　
（２）この矢印は複数個配置できる。

（３）配置した矢印の上にマウスポインタを乗せると、その矢印が示している指示値を矢印の横に表示し、また目盛り上に赤いカーソルを表示する。
　　　　　　　　
（４）表示された指示値は、通常矢印の右側に表示されるが、矢印が定規の右側の値を指示している時、指示値が見切れるのを防ぐため、矢印の左側に表示される。
（５）配置した矢印をドラッグして、指し示す位置を変えることができる。
（６）配置した矢印をマウスで選択して、矢印キー（←、→）で指し示す位置を変えることができる。
（７）少しずれて重なった２つの矢印の内、下側の矢印にマウスを重ねると前面に表示される。
　　　　　　　　　（８）完全に重なった矢印をダブルクリックすると、一つ下に重なった矢印が前面に現れる。
（９）矢印の上にマウスポインタを置き、左クリックするとメニューが開き、削除の項目が表示され、これを選択するとその矢印が削除できる。
　　　　　　　　
（１０）定規の目盛りを拡大縮小できる。
　組み込まれた機能の内、いくつかの機能についてコードを用いて説明する。　この定規を実現するために、まずArrowクラス（矢印クラス）を作った。Arrowクラスは、PictureBoxクラスを継承し、更に矢印が指し示す目盛りの値を記憶したおくGraduationプロパティを持っている。また、次に示す矢印のイメージを持っている。
　　　　　　この定規アプリケーションのメインクラスは、RulerMainクラスである。このクラスは、Formクラスを継承している。RulerMainクラスのフォームは、次のような構造になっている。まず第１層になるフォームの上にpanel1(下の図の鶯色の部分）、baseArrowと呼ばれるPictureBoxを継承したArrowクラスのインスタンス（縮小ボタンの右側の矢印）、拡大・縮小を行うためのbutton1と2の計４つのコントロールが配置されている。これらのコントロールは、RulerMain()コンストラクタで定義されている。
　panel1の上には、定規の目盛りのイメージを表示するpictureBox1、定規の目盛りを指示する矢印を配置する鶯色のpanel2が載っている。また、panel2には、定規の目盛りを指し示すArrowクラスのインスタンスarrowが配置される。　縮小ボタンの右横に配置されている黄色い矢印、baseArrowをドラッグし、鶯色の領域でドロップするとその領域に配置できる。
　　　　　　　　　　　　　　　　　baseArrowは、つぎのコードのようにイベントハンドラが動作するようにデリゲートが組み込まれている。　baseArrowの上で左マウスボタンを押すと、baseArrow_MouseDown()イベントハンドラが起動する。このイベントハンドラの中でフォームの中を自由に移動できるmovingArrowが作られる。movingArrowは、this.Controls.Add(movingArrow)メソッドでフォームのコントロールコレクションに加えられ、またthis.Controls.SetChildIndex(movingArrow, 0)メソッドでフォームの表示の順番が最前面になる。これにより、他のコントロールに隠れなくなる。
　また ConvertDrugedArrowCoordinates(e, baseArrow, this)メソッドで、マウスの位置の座標系がbaseArrowの座標系からフォームの座標系に変換され、movingArrowに与えられる。　座標変換を行うConvertDrugedArrowCoordinates(e, baseArrow, this)メソッドは、PointToScreen()メソッドとPointToClient()メソッドで座標変換を行っている。マウスの移動に伴って private RulerMain()メソッドにあるthis.baseArrow.MouseMove += new MouseEventHandler(baseArrow_MouseMove);の行のデリゲートにより、baseArrow_MouseMoveイベントハンドラが起動し、movingArrowが移動することになる。ここでも、ConvertDrugedArrowCoordinates(e, baseArrow, this);によって変換されたマウスの位置がmovingArrowのLocationプロパティーに与えられる。　移動する矢印movingArrowをドラッグし目盛りと鶯色の境界付近でマウスボタンを離すと、private RulerMain()メソッドのthis.baseArrow.MouseUp += new MouseEventHandler(baseArrow_MouseUp);の行のデリゲートにより登録されたbaseArrow_MouseUp(Object sender, MouseEventArgs e)イベントハンドラが起動し、矢印はドロップされる。
　この時、Arrow型のarrowインスタンスが作られ、arrowにいくつかのイベントハンドラが登録され、またpanel2.Controls.Add(arrow);の行で、arrowがpanel2に登録され、ディスプレイ上に表示される。また同時にthis.Controls.Remove(movingArrow);の行で、ディスプレイ上からmovingArrowの表示を消す。　鶯色のpanel2に配置した矢印の上にマウスポインタを置くと、矢印が示している値が表示される。
　　　　　　　　　　　　　　
　これは、baseArrow_MouseUp(Object sender, MouseEventArgs e)メソッドのarrow.MouseEnter += arrow_MouseEnter;の行で登録されたarrow_MouseEnterイベントハンドラが起動したためである。　arrow_MouseEnter(object sender, EventArgs e)イベントハンドラでは、 showGraduation(object sender)メソッドが呼ばれ、矢印の指示値が表示される。　showGraduation(object sender)メソッドでは、senderをArrowクラスでダウンキャストすることで、複数あるarrowオブジェクトの内、どのarrowオブジェクトからsenderが送られた来たか特定できる。（注：この記述は、panel2に複数の矢印（arrowオブジェクト）が配置されていることを前提としている。）
　例えば((Arrow)sender).Locationのように記述すれば、マウスが置かれた矢印の位置を知ることがで、また(Arrow)sender).Graduationと記述すれば、マウスが指し示している目盛りの値をしることができる。　下の図のように、下に重なった矢印の上にマウスポインタを重ねると、下側にあった矢印が上側になるようコードを工夫した。
　　　　　　　　　MouseEnter(object sender, EventArgs e)イベントハンドラの中で、panel2.Controls.SetChildIndex((Arrow)sender, 0); メソッドを用い、panel2で表示されている矢印arrowの順番を最前面に変えている。　まず、左クリックをいたときにコンテキストメニューが開くようにするためには、クラス直下でContextMenuStripクラスの変数を宣言しなければならない。これは変数contextMenuStripOnArrowの中に、どのオブジェクトでコンテキストメニューが開かれたかの情報が含まれているからである。　次に、RulaerMain()コンストラクタで、ContextMenuStripのインスタンスを作り、それにコンテキストメニューの「削除」のメニューを追加する。またその削除を選択した時に起動するイベントハンドラをtsmiDelete.Clickに登録する。tsmiDelete_Click(object sender, EventArgs e)イベントハンドラの中で、クラス直下で宣言したContextMenuStrip型の変数contextMenuStripOnArrowに対してSourceControlメソッドの操作を行う。この操作を行うと、どの矢印で削除を行おうとしているかがわかる。そのオブジェクト情報をArrow型のdeltingArrowに代入し、Controls.Remove()メソッドで、panel2の表示から消すことができる。RulerMainクラスの全ソースコードを以下に示す。2.1項で示したArrow.csと合わせて、参照してください。


