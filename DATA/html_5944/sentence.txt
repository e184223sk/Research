More than 3 years have passed since last update.これの続き。前回で組み込み型にメソッドチェーンを組み込むことができることを確認した。
そこで今回はどこまで何をチェーンできるのか試してみた。
また、グローバルを汚染することになるjsに対し対応策を考えてみた。下記のモジュールを実装し、のように処理を行う。インスタンスの内容を改行無しで標準出力する。
戻り値は0を返す。インスタンスの内容を改行有りで標準出力する。
戻り値は0を返す。Stringインスタンスにの手前に文字列を結合して返す。Numberインスタンスの値を2倍にして返す。標準入力を返す。
インスタンスの値は使用しない。
JavaScriptのみ戻り値の方はPromise型とする。プログラムを終了させる。
JavaScriptのみ実装。名前空間代わりにtemplate使っていること以外は至って順当な実装。数値型をObject型としていい加減に扱っていること以外は普通。前回からそのまま拡張。プログラムについては大体C#と一緒。
しかし、数字から書き始めると行数がどうとか怒られたのはびっくり。
あとはビルドする環境(MSBuild, .Net Core他)次第でモジュールのImports名が変わるらしいので注意。だったり、だったりする。
ちなみにこの時の"projectはプロジェクト(.vbploj)名(ファイル名?)を指す。前回から最も手を加えたのがこの実装。
結局、グローバルオブジェクトの汚染は防げないものの、
拡張メソッドの存在確認と処理後のメソッド破棄で安全にしたつもり。
usingメソッドにコールバック関数投げ込むかopen・closeメソッドの間で使用可能。
getsメソッドの戻り値はNode.jsのため致し方なくPromiseを返却。前回同様にプリミティブ型を継承した拡張型を使用。
値を返す時は必ず拡張型のコンストラクタを使用することだけ注意した。
ここからは余り関係ないことだけど、setup.pyでプロジェクトを作成したとき、じゃなくて、としなきゃいけなかったのはなかなかハマってしまった。以下、おまけ。クラスベースかプロトタイプベースかの違いはあるけどアプローチはJavaScriptと一緒。
それゆえにJavaScriptと同様の懸念がありそう。コメントに@raccyさんよりご意見頂きました。
Rubyにはrefineという機能があり、これを使うことで安全にオブジェクトの拡張ができるそうです。Lisp系言語でチェーンはどうするのかなぁと思っていたけどこんな解決策があるんだね。
面白い。こういう機能がデフォルトで組み込まれているのもCommonLispやSchemeに比べて新しい言語ならではって感じ。以上、ここまで。


