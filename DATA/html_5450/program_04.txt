
using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEditor;
using System.Reflection;

namespace Egliss.Editors
{
    [CustomPropertyDrawer(typeof(ReflectionSubClassPopupAttribute))]
    public class ReflectionSubClassPopupDrawer : PropertyDrawer
    {
        public override void OnGUI(Rect position, SerializedProperty property, GUIContent label)
        {
            var atr = this.attribute as ReflectionSubClassPopupAttribute;
            var types = EditorHelper.GetSubClasses(atr.type).Select(m =&gt; m.FullName).ToList();
            var index = types.FindIndex(m =&gt; m == property.stringValue);

            //add nothing
            if (atr.isNothingable)
            {
                types.Insert(0, "Nothing");
                index++;
            }
            if (types.Count == -1)
            {
                var typeName = Assembly.GetAssembly(atr.type).FullName;
                EditorGUI.LabelField(position, typeName + "'s subclass not found...");
                return;
            }

            //type string missing
            if(index == -1)
                index = 0;

            property.stringValue = types[EditorGUI.Popup(position, label.text, index, types.ToArray())];
        }
    }
}

