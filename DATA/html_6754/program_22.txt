
// 12個のintデータを格納するコレクション
public class DozenIntegers : IEnumerable&lt;int&gt;
{
    // 格納できるデータの数
    private const int MAX = 12;

    // データは配列に格納する。初期状態は全て0
    private int[] data = new int[MAX];

    // 第1引数に指定された位置に、第2引数に指定されたデータを格納する
    public void Set(int index, int value)
    {
        if (index &gt;= MAX || 0 &gt; index) { throw new ArgumentOutOfRangeException("index"); }
        data[index] = value;
    }

    // 指定された位置のデータを返す
    public int Get(int index)
    {
        if (index &gt;= MAX || 0 &gt; index) { throw new ArgumentOutOfRangeException("index"); }
        return data[index];
    }

    // 自身のEnumeratorを返す
    public IEnumerator&lt;int&gt; GetEnumerator()
    {
        for (int index = 0; index &lt; MAX; ++index) {
            yield return data[index];
        }
    }

    // IEnumerableのGetEnumeratorも実装する
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator(); // 中身は同じなのでもう1つのGetEnumeratorをそのまま呼ぶ
    }
}

