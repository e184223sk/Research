
// 12個のintデータを格納するコレクション
public class DozenIntegers : IEnumerable&lt;int&gt;
{
    // 格納できるデータの数
    private const int MAX = 12;

    // データは配列に格納する。初期状態は全て0
    private int[] data = new int[MAX];

    // 第1引数に指定された位置に、第2引数に指定されたデータを格納する
    public void Set(int index, int value)
    {
        if (index &gt;= MAX || 0 &gt; index) { throw new ArgumentOutOfRangeException("index"); }
        data[index] = value;
    }

    // 指定された位置のデータを返す
    public int Get(int index)
    {
        if (index &gt;= MAX || 0 &gt; index) { throw new ArgumentOutOfRangeException("index"); }
        return data[index];
    }

    // 自身のEnumeratorを返す
    public IEnumerator&lt;int&gt; GetEnumerator()
    {
        return new Enumerator(this);
    }

    // IEnumerableのGetEnumeratorも実装する
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator(); // 中身は同じなのでもう1つのGetEnumeratorをそのまま呼ぶ
    }

    // GetEnumeratorで返されるEnumeratorクラス
    public class Enumerator : IEnumerator&lt;int&gt;
    {
        DozenIntegers source; // GetEnumeratorを呼ばれたDozenIntegersオブジェクト

        int index = -1; // 現在の位置

        // GetEnumeratorを呼ばれたオブジェクトを記録しておく
        public Enumerator(DozenIntegers source)
        {
            this.source = source;
        }

        // 現在の位置から次の位置に移動する
        public bool MoveNext()
        {
            // ++indexを続けるとオーバーフローするので先にチェック
            if (index &gt; MAX)
                return false;

            ++index;

            // 最大値を超えていなければデータがあるのでtrueを返す
            return MAX &gt; index;
        }

        // 現在の位置のデータを取得して返す
        public int Current { get { return source.Get(index); } }

        // IEnumeratorのCurrentも実装する
        object IEnumerator.Current { get { return Current; } }

        // Enumeratorを使い終わった後の処理。ここでは何もしない
        public void Dispose() { }

        // 最初の位置に戻る。使わないので未実装
        public void Reset() { throw new NotImplementedException(); }
    }
}

