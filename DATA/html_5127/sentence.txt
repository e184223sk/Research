More than 3 years have passed since last update.以下の続きです。.NET Coreのソースを読む！第一回 List パート1.NET Coreのソースを読む！第一回 List パート2Genericではないインタフェースにも対応しているので、Genericではないインタフェースで参照されたとき（何ていえばいいのかな？）のContains・IndexOf・Removeメソッドで型をチェックするためのメソッドのようです。.Net Coreのソースにはコメントが少ないけど、ここにコメントが書いているということは大事なことなのかもしれません。
Tの型がNullが非許容（基本データ型と構造体）でNullableインタフェースを実装していない場合には、default(T) == nullがfalseになりますね。なので、TがNull非許容型の場合には、引数がnullは必ずfalseになりますね。Addメソッド（ジェネリック版）にある[MethodImpl(MethodImplOptions.AggressiveInlining)]は、コンパイル時（C#のコンパイルではなく、JITコンパイルの時のようです）に、インライン化をしてもらいやすくするための指定のようです。参考
[雑記] インライン化Addメソッドは、大量に呼び出される可能性があるので、インライン化による性能向上を目的にしているのでしょうね。しかし、私が理解が出来ていないのが、AddWithResizeメソッドの[MethodImpl(MethodImplOptions.NoInlining)]で、インライン化を禁止しているところです。
コメントには、Non-inline from List.Add to improve its code quality as uncommon pathとあるから、AddメソッドとIList.Addメソッドでの共通化のために、AddWithResizeメソッドがあるけど、IList.Addメソッドからの呼び出しでは、インライン化されないからなのか、インライン化されないようにするためのなか・・・。すいません、分かりません。インデクサー側にも同じ処理があったのですが、if ((uint)size &lt; (uint)array.Length)は、性能のためのようです。
私は気づかなかったのですが、以下の @NetSeed さんの記事にちょうど記載されていました。参考
0,n)のレンジチェックを1回で済ませる6.0から追加された「ラムダ式本体によるメソッドの記述」という方法ですね。
InsertRangeメソッドもpublicであり、こんなメソッドがあるとは知りませんでした。読み取り専用のCollectionに変換するメソッドです。
ReadOnlyCollectionはスレッドセーフになるので、もう変更しないListの情報をキャッシュするときには、これを使った方がよいですね。今回は、ここまで。しかし、まだListのソースの半分も終わっていない・・・。
全部網羅するのは諦めようかな。色々ソースを載せているので、念のためライセンスへリンクしておきます。


