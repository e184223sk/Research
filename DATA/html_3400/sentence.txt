前回の記事にて、Xamarin.FormsでSkiaSharpを用いて線形グラデーションの矩形を描画するコントロールを作成しました。
本記事では、前回作成したコントロールを修正して、線形と放射状のグラデーションを使い分けて矩形と円を描画するコントロールを作成します。グラデーションで、なんらかの形状を描画するabstractのクラスとして、GradientShapeクラスを作成します。
前回作成した矩形を描画する GradientRectクラスは、GradientShapeクラスのサブクラスとなります。さらに、GradientShapeクラスのサブクラスとして、円を描画するGradientCircleクラスを作成します。以下にクラス図を記します。
今回も各コントロールは、グラデーションのenum値(GradientColor)をプロパティに持ち、そのenum値で定義されたグラデーションを表示する構成とします。
以下に、そのenum値(GradientColor)と、グラデーションの設定(GradientModel)と、それを作成するクラス(GradientModelFactory)のソースコードを記します。
前回との大きな違いは、GradientModelクラスが、線形グラデーションと放射状グラデーションを識別するためのDrawTypeプロパティを持っている点です。上記のクラスを用いて、GradientShapeおよびそのサブクラスを作成します。
GradientShapeのxaml部分は以下です(前回記事のGradientRectと同じです)。GradientShapeクラスのコードビハインドは以下です。
ポイントは、PaintSurfaceメソッド内で、背景を描画するDrawFillメソッドとDrawStrokeメソッド(いずれもabstractメソッド)を呼び出している点です。この2つのメソッドをサブクラスで実装することで、矩形と円の描画を実現します。
(SkCanvasViewなどのSkiaSharpの使い方は前回記事を参照ください)矩形を描画するGradientRectクラスと、円を描画するGradientCircleクラスは以下です。これらのサブクラスでの実装内容は、abstractメソッド2つの実装のみです。上記で作成したコントロールの使い方を説明します。
以下のように、各コントロールのBackGradientColorを設定すれば、定義したグラデーションで矩形や円を描画します。上記を実行すると、以下のようになります(画像はAndroidで実行した場合)。
線形と放射状のグラデーションを使い分けて矩形と円を描画するコントロールを作成しました。
本記事で紹介したソースコードを、GitHubの以下にアップしました。よろしければ、自由に改変してご利用ください。
使う場合は、GradientColorとGradientFactoryにグラデーションの定義を自由に追加してもらうことを想定しています。
GitHubのソースコードはこちら次回は、日本語を既定の言語にして多言語対応する方法を紹介します。
次回の記事はこちら


