
private class WhereListIterator&lt;TSource&gt; : Iterator&lt;TSource&gt;
{
    //元クラスのメンバ
    internal int state;
    internal TSource current;

    public TSource Current
    {
        get
        {
            return current;
        }
    }

    //派生クラスのメンバ
    private List&lt;TSource&gt; source;
    private Func&lt;TSource, bool&gt; predicate;
    private List&lt;TSource&gt;.Enumerator enumerator;

    public override bool MoveNext()
    {
        switch (state)
        {
        case 1:
            enumerator = source.GetEnumerator();
            state = 2;
            goto case 2;
        case 2:
            while (enumerator.MoveNext())
            {
                TSource current = enumerator.Current;
                if (predicate(current))
                {
                    base.current = current;
                    return true;
                }
            }
            Dispose();
            break;
        }
        return false;
    }
}

