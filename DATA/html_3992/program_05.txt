
private class WhereArrayIterator&lt;TSource&gt; : Iterator&lt;TSource&gt;
{
    private TSource[] source;
    private Func&lt;TSource, bool&gt; predicate;
    private int index;

    public WhereArrayIterator(TSource[] source, Func&lt;TSource, bool&gt; predicate)
    {
        this.source = source;
        this.predicate = predicate;
    }

    public override Iterator&lt;TSource&gt; Clone()
    {
        return new WhereArrayIterator&lt;TSource&gt;(source, predicate);
    }

    public override bool MoveNext()
    {
        if (state == 1)
        {
            while (index &lt; source.Length)
            {
                TSource val = source[index];
                index++;
                if (predicate(val))
                {
                    current = val;
                    return true;
                }
            }
            Dispose();
        }
        return false;
    }

    public override IEnumerable&lt;TResult&gt; Select&lt;TResult&gt;(Func&lt;TSource, TResult&gt; selector)
    {
        return new WhereSelectArrayIterator&lt;TSource, TResult&gt;(this.source, this.predicate, selector);
    }

    public override IEnumerable&lt;TSource&gt; Where(Func&lt;TSource, bool&gt; predicate)
    {
        return new WhereArrayIterator&lt;TSource&gt;(source, Enumerable.CombinePredicates&lt;TSource&gt;(this.predicate, predicate));
    }
}

