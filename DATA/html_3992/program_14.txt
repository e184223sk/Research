
public static TSource First&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source)
{
    if (source == null)
    {
        throw Error.ArgumentNull("source");
    }
    IList&lt;TSource&gt; list = source as IList&lt;TSource&gt;;
    if (list != null)
    {
        if (((ICollection&lt;TSource&gt;)list).Count &gt; 0)
        {
            return list[0];
        }
    }
    else
    {
        using (IEnumerator&lt;TSource&gt; enumerator = source.GetEnumerator())
        {
            if (enumerator.MoveNext())
            {
                return enumerator.Current;
            }
        }
    }
    throw Error.NoElements();
}

public static TSource Last&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source)
{
    if (source == null)
    {
        throw Error.ArgumentNull("source");
    }
    IList&lt;TSource&gt; list = source as IList&lt;TSource&gt;;
    if (list != null)
    {
        int count = ((ICollection&lt;TSource&gt;)list).Count;
        if (count &gt; 0)
        {
            return list[count - 1];
        }
    }
    else
    {
        using (IEnumerator&lt;TSource&gt; enumerator = source.GetEnumerator())
        {
            if (enumerator.MoveNext())
            {
                TSource current;
                do
                {
                    current = enumerator.Current;
                }
                while (enumerator.MoveNext());
                return current;
            }
        }
    }
    throw Error.NoElements();
}

public static TSource Single&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source)
{
    if (source == null)
    {
        throw Error.ArgumentNull("source");
    }
    IList&lt;TSource&gt; list = source as IList&lt;TSource&gt;;
    if (list != null)
    {
        switch (((ICollection&lt;TSource&gt;)list).Count)
        {
        case 0:
            throw Error.NoElements();
        case 1:
            return list[0];
        }
    }
    else
    {
        using (IEnumerator&lt;TSource&gt; enumerator = source.GetEnumerator())
        {
            if (!enumerator.MoveNext())
            {
                throw Error.NoElements();
            }
            TSource current = enumerator.Current;
            if (!enumerator.MoveNext())
            {
                return current;
            }
        }
    }
    throw Error.MoreThanOneElement();
}

public static bool Any&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source)
{
    if (source == null)
    {
        throw Error.ArgumentNull("source");
    }
    using (IEnumerator&lt;TSource&gt; enumerator = source.GetEnumerator())
    {
        if (enumerator.MoveNext())
        {
            return true;
        }
    }
    return false;
}

