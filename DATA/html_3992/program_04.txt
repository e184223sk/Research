
private abstract class Iterator&lt;TSource&gt; : IEnumerable&lt;TSource&gt;, IEnumerator&lt;TSource&gt;
{
    private int threadId;
    internal int state;
    internal TSource current;

    public Iterator()
    {
        threadId = Thread.CurrentThread.ManagedThreadId;
    }

    public TSource Current
    {
        get
        {
            return current;
        }
    }

    public abstract Iterator&lt;TSource&gt; Clone();

    public virtual void Dispose()
    {
        current = default(TSource);
        state = -1;
    }

    public IEnumerator&lt;TSource&gt; GetEnumerator()
    {
        if (threadId == Thread.CurrentThread.ManagedThreadId &amp;&amp; state == 0)
        {
            state = 1;
            return this;
        }
        Iterator&lt;TSource&gt; iterator = Clone();
        iterator.state = 1;
        return iterator;
    }

    public abstract bool MoveNext();

    public abstract IEnumerable&lt;TResult&gt; Select&lt;TResult&gt;(Func&lt;TSource, TResult&gt; selector);

    public abstract IEnumerable&lt;TSource&gt; Where(Func&lt;TSource, bool&gt; predicate);

    object IEnumerator.Current
    {
        get
        {
            return Current;
        }
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    void IEnumerator.Reset()
    {
        throw new NotImplementedException();
    }

    object IEnumerator.Current
    {
        get
        {
            return Current;
        }
    }
}

