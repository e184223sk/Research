More than 3 years have passed since last update.　OpenCvの.NET向けラッパーであるOpenCvSharpでは、Matクラスを用いて行列を操作します。画像データもMatクラスを中心に操作します。　何か画像処理したいなーと思いまして、こまめに処理経過/処理結果を確認したいなーと思いまして、こまめに動かすならLINQPadだよなーと思いまして、でもMatを直接画像として表示する機能はないんだよなーと思いまして、自分でコード用意しました。　拡張メソッド定義による表示と、LINQPadの機能として用意されているToDumpメソッドの定義による表示の2つを紹介します。　素直な方から紹介します。拡張メソッドの定義も使用方法もシンプルですね。DumpImage拡張メソッドの戻り値が呼び出し元のインスタンスなので、下記のように処理経過をガシガシ表示することが出来ます。　便利なのですが、不満な点もあります。　アチコチで使うためにMyExtensionsに定義したくなりますが、Matクラスを扱うためMyExtensionsにOpenCvSharpをインストールする必要があります。他のスクリプトはMyExtensionを参照することになり、それらのスクリプトまでOpenCvSharpと関係を持つことになってしまいます。辛い。　かといって、DumpImageを使う全てのスクリプトにDumpImageの定義をコピペしていくのも面倒です。辛い。　別DllにDumpImageを定義して各スクリプトから個別に参照させるという手もあります。しかし、別Dllに定義してしまうとLINQPadからサクッと閲覧・編集ができなくなってしまいます。辛い。　後述するUtilクラスの恩恵を受けづらくなってしまします。ちょっと辛い。　上記問題を解決する方法の一つとして、LINQPadのToDumpメソッドで拡張する方法を紹介します。　ToDumpメソッドを定義すると、Dumpメソッドを呼んだときにココを通るようになります。LINQPad側で用意してくれた拡張機能ですので、そういうもんだと思って使いましょう。　DumpImage拡張メソッドの画像が縦に並んだ実行結果と同じです。　Dumpを拡張したことにより、LINQPadが用意してくれたUtilクラスの機能を利用できるようになります。　画像を横に並べて目視比較したいって場面は多いので、大変助かります。　Matクラス特有の問題がありまして。実はMatクラス、そもそもDumpメソッドが定義されてるんですよね(!)。記載時点のソースコードはコチラ。今回最大のハマリポイントでした。　挙動としては下記のとおりでした。　多少手間ですが、Dumpメソッドの引数を操作することで回避できます。MatクラスのDumpに存在しないオーバーロードを選択することでLINQPadのDumpを呼び出せます。後者のDumpはオーバーロードがたくさんあるので、そのどれかを利用できるように引数を突っ込めば良いです。個人的に許容できる手間なのでコレで十分だと思いますが、絶対我慢できないマンはOpenCvSharpをフォークして自分でDumpメソッドを書き換えるといいんじゃないですかね。ないですね。はい。　また、「ToDumpで拡張しちゃうとMatのプロパティ表示したいときにサクッと見れないやん！」という問題もありますが、Matクラスは幅、高さの数値データ以外はポインタの保持ばっかで大した情報は見れないので気にしなくて良いと感じました。　現在は前者のDumpImageをMy Extensionsに定義して作業してます。拡張しやすいので。参照がばらまかれる問題も、まぁ私個人の趣味開発環境だし別にいいやと放置してます。


