More than 1 year has passed since last update.【Qiita】C# protoファイルを使用せずに gRPC サーバー／クライアントを実装する を発展させ、gRPC のリクエスト／レスポンスの型に値型を使用できるようにします。C# 版の Grpc.Core では RPC メソッドの呼び出しには多くのジェネリッククラスが関わります。例えば、などです。これらには型制約 where TRequest:class where TResponse:class が定義されているため、リクエスト／レスポンスの型は参照型である必要があります。値型は使用できません。Unaryメソッド呼び出しのフローは次のように表すことができます。ストリーム方式のRPCメソッドはもう少し複雑なフローになりますが、リクエスト／レスポンスの型に対する処理は同じ仕組みです。結局のところ送受信されるのはバイト配列です。RPCメソッドの呼び出しに割り込み、自前でシリアライズ処理を行います。実際に実行するRPCメソッドのリクエスト／レスポンスの型をバイト配列にしてしまうことで型制限を回避します。理論上、バイト配列へのシリアライズが可能であればどのような型でも使用することができることになります。以下は BlockingUnary のフローをイメージしたシーケンス図です。
次のように変わります。次のように変わります。次のように変わります。次のように変わります。次のように変わります。このドキュメントの内容を含むソースコードは GitHub で公開しています。【GitHub】mxProject/GrpcCommon
【Nuget】mxProject.Helpers.GrpcCommon


