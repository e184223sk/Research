
private string createCertificate(AsymmetricCipherKeyPair keyPair)
{

    // 証明書の属性
    var attr = new Dictionary&lt;DerObjectIdentifier, string&gt;()
    {
        { X509Name.CN, geboko@gebo.com },
        { X509Name.C, "Japan" },
        { X509Name.ST, "None" },
        { X509Name.L, "None" }
        { X509Name.O, "gebo" },
        { X509Name.OU, "None" },
    };
    var ord = new List&lt;DerObjectIdentifier&gt;()
    {
        X509Name.CN,
        X509Name.C,
        X509Name.ST,
        X509Name.L,
        X509Name.O,
        X509Name.OU,
    };

    // 証明書の生成
    var name = new X509Name(ord, attr);
    var certGen = new X509V3CertificateGenerator();
    certGen.SetSerialNumber(BigInteger.One);
    certGen.SetIssuerDN(name);
    certGen.SetSubjectDN(name);
    certGen.SetNotBefore(DateTime.Now);
    certGen.SetNotAfter(DateTime.Now.AddYears(10));
    certGen.SetPublicKey(keyPair.Public);
    var cert = certGen.Generate(new Asn1SignatureFactory(PkcsObjectIdentifiers.Sha256WithRsaEncryption.Id, keyPair.Private));

    // 証明書の出力
    var mem = new MemoryStream();
    using (var writer = new StreamWriter(mem, Encoding.ASCII)) {
        var pemWriter = new PemWriter(writer);
        pemWriter.WriteObject(cert);
        pemWriter.Writer.Flush();
    }
    var pem = Encoding.UTF8.GetString(mem.ToArray());

    return (pem);
}

