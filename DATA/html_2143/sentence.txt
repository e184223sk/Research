More than 1 year has passed since last update.Advent Calendar 最終日が空いていたので、また リクエストもあった ので埋めましょう（Xamarin のカレンダーが半分Webネタで良いのか？は置いといて）。というわけで、の続きです。実体がWebアプリであるため、起動してからアプリが使用可能になるまでに時間がかかるのは、ガワネイティブの弱点の一つです。
これはなんとかごまかしてユーザーに不快感を与えないようにしたいです。ガワネイティブの起動にかかるプロセスは大きくわけて２つです。1 は通常のアプリでも必要なプロセス、2 はガワネイティブ特有の要件です。まずは 1 を対応します。こちらを参考にします。Android 側プロジェクトの Resources/drawable/splash.xml を追加して、次のように記述します。splash.axml次に、Resources/values/colors.xml の colorPrimaryDark の色を Web アプリのテーマ色に合わせます。
この例では #66BB6A とします。前述のリンクでは、スプラッシュスクリーン用の Theme と Activity を作るよう書かれていますが、ガワネイティブの場合少しサボることができます。
Resources/values/styles.xml を開き、MainTheme.Base に android:windowBackground を追加します。styles.xmlこれでアプリ起動時に緑のスプラッシュスクリーンが表示されるようになります。iOS プロジェクトには、最初から LaunchScreen.storyboard がスプラッシュスクリーンとして使用されるよう設定されていますが、色が青になっているので、これを変更します。Resources/LaunchScreen.storyboard を開いて、Background の色を #66BB6A に変更しました。次に 「2. 最初の画面が表示されてから Web ページの読み込みが完了するまで」の対応です。
こちらはベタに、 WebView の読み込みが完了するまで、WebView を隠しておく ことにします。
これは Xamarin.Forms の共通プロジェクトで対応できます。MainPage.xaml を次のように修正します。MainPage.xamlそしてコードビハインドの MainPage.xaml.cs に次のように記述します。MainPage.xaml.csWebView の読み込みが完了すると Navigated イベントが発生するので、それが発生するまでは、WebView は非表示、代わりにプログレス的な View を表示しておきます。
Web アプリ側が真に SPA(Single Page Application) であるなら、Navigated イベントは一度しか発生しないはずですね。ここまでの成果を実行すると、次のような見た目になります。（Xamarin.Forms アプリとしての起動遅っそ。そして iOS シミュレータ早っや！）例えば Web アプリ側の JavaScript で Geolocation API を使用する場合も、ガワの方でその許可を得ておく必要があります(Chrome などのブラウザアプリが実装していることをやらなければならない)。さて、Xamarin.Forms アプリとして作成したプロジェクトには Xamarin Essentials が標準で組み込まれており、それらの機能を使う際には、必要な権限の許可が Xamarin Essentials から要求されるようです。しかし、JavaScript 側で呼び出された機能に必要な許可要求は、自力で行う必要があります 1。
そのために、を使用します。バージョンが Stable で最新の 3.0.0.12、この nuget パッケージを共通、Android、iOS のすべてのプロジェクトにそれぞれ追加します。Android プロジェクトには、 Setup に書かれているように、 MainActivity.cs に数行のコードを足す必要があります。MainActivity.csiOS の方はここでは特にする事はありません。準備が整ったところで、実際に必要な権限の許可を求める処理を書いてみます。例としての権限を求めてみます。位置情報の取得Xamarin.Essentials: Geolocation に書かれているように、Android プロジェクトでは、 AssemblyInfo.cs と AndroidManifest.xml に数行ずつ追加します。
iOS プロジェクト側は、Info.plist を編集します。カメラの使用Android 側は、AndroidManifest.xml に、を追加します。iOS プロジェクトは、Info.plist を開き、新しいエントリ「Privacy - Camera Usage Description」を追加し、Value に適当な説明文を入力します。その他の権限に必要な設定は、Android は、iOS では、が詳しいです。では、いよいよ、許可を求めるコードを書いていきます。共通プロジェクトの MainPage.xaml.cs に次のように記述します。MainPage.xaml.csこれは、アプリの起動時に、必要な権限群 permissions について、という流れです。このコードを動かすと、次の図のようになります。ハマりポイントとしては、iOS で pinfo.list へ追加し忘れると RequestPermissionsAsync を呼んだ瞬間にアプリが落ちる、があります。権限の取得は最小限、且つユーザーに納得感の強いタイミングで行うべきなので、起動時にまとめて行うのは、あまりお行儀の良いアプリとは言えません。次回以降で解説する内容は、ネイティブアプリの情報を Webアプリ に引き渡す方法や、Webアプリのアクションをネイティブ側に処理させる方法などです。
これらを駆使して、必要なタイミングで必要な許可を求めるコードを書くこともできます。2020年も「Xamarin.Forms＋ガワネイティブ」推しでゆくべく、この連載は続けていきたいと思います。
では 2020年 にお会いしましょう。Xamarin Essentials の GitHub で master ブランチの Permissions.cs を見ると、 Permissions クラスが public になっているので、今後のバージョンアップで、権限機能が個別に使用できるようになるのかも知れません。 ↩


