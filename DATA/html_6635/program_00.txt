public static Tuple&lt;double[], int[]&gt; KMeans(double[] data, int k)
{
    // 1. データ点からランダムに k 個のクラスタ平均を初期値として取る。
    var rand = new Random();
    var means = data.OrderBy(v =&gt; rand.Next()).Take(k).ToList();
    // 2. 収束判定のためにループ外に assignments 変数を持っておく。
    var assignments = new int[data.Length];
    // 2. 収束するまで繰り返す。
    while (true)
    {
        // 2. 収束判定のために 1 つ前の状態をコピー。
        var prevAssignments = assignments.Select(v =&gt; v).ToArray();
        // 2.1. 各データ点について、自身に最も近いクラスタに割り当てる。
        assignments = data.Select(v =&gt; means.IndexOf(means.MinBy(m =&gt; Math.Pow(v - m, 2)))).ToArray();
        // 2. 収束していたら計算終了。
        if (Enumerable.Range(0, data.Length).All(i =&gt; assignments[i] == prevAssignments[i])) break;
        // 2.2. 各クラスタについて、所属するデータ点の平均を計算して新しいクラスタ平均とする。
        means = means.Select((m, i) =&gt; data.Where((v, j) =&gt; i == assignments[j]).DefaultIfEmpty(m).Average()).ToList();
    }
    return Tuple.Create(means.ToArray(), assignments);
}

