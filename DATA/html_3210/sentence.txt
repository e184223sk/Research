MessageBoxをMVVMパターンで自作するが面倒で、これまでMessageBoxをそのまま使ってきたのですが、新しくアプリを作るにあたって、改めてメッセージボックスを自作したので記事にしました。
昔自作しようとしたときに、途中でよくわからなくなってしまった経験があったため、この記事では初めて作る方向けに丁寧な説明を心がけてみようと思います。
このメッセージボックスを作ることで、インターフェースの使い方や、PrismのApp.xamlの使用方法やDIについて、データテンプレートなど勉強になることがたくさんあります。
作ったことがない方は一度やってみることをお勧めします。開発前提はC#、Prism、WPF、.Net Coreです。実際は自分のやりやすい手順でいいと思いますが、せっかく記事にするので、初めての人が迷わないように、なるべくエラーが出ない順番で作成します。
そのため、少し行ったり来たりしているところがありますのでご容赦ください。MessageBoxSampleプロジェクトの依存関係を右クリックして「プロジェクト参照の追加」を選び、Module.MessageBoxプロジェクトを選択しますModule.MessageBoxプロジェクトを使用できるようにするために、モジュールをApp.xamlのConfigureModuleCatalogで登録しますメッセージに表示させるボタンの種類を指定するためのenumクラスを以下のように作成しますPrism UserControlとしてMessageDialog.xamlを作成します。
ViewをPrismのダイアログとして利用するためにはIDialogAwareを継承させる必要があります
こんな感じになると思います。ViewをPrismのダイアログとして登録します。
具体的にはMessageBoxModuleのRegisterTypesでRegisterDialogとして登録しますViewModel内に先ほど作成したenum値のプロパティを書きますTemplateSelectorsフォルダにMessageDialogTemplateSelectorクラスを作成し、ViewModelのプロパティ値(MessageDialogValue)に対応するデータテンプレートを返すようにコーディングしますMessageDialog.xamlのデザイン画面を開きます。
いっぺんにコードを乗せるとかなりの量になって混乱するかもしれないので、丁寧に少しずつ説明しながら書いていきます
慣れている人は当たり前になっている部分も多いのですっ飛ばしてくださいまずは&lt; UserControl...... &gt;となっているところに以下のように参照や値を書きます
MinWidthとMinHeightは適当です。実際に使用していくと、MaxWidthとかも設定したほうがよかったりいろいろですが、ここでは省いています次にダイアログが表示されたときに、最大化とかできないようにしたり、タスクバーに表示されないようにするために以下のコードを書きます。ここでTitleプロパティを記述しておくことで、ViewModelのTitleを表示させることができ、メッセージのタイトルとして利用できますデータテンプレートとしてOkOnlyTemplate、YesNoTemplate、OkCancelTemplateを作成します。
このデータテンプレートはボタンの表示部分に関するものとなります。
データテンプレートにx:Key=""でキーをセットしていて、これとMessageDialogTemplateSelector クラスのプロパティとが対応することになり、templateSelector:MessageDialogTemplateSelector.... で表示を切り替えられるようにしていますさきほど説明した通り、データテンプレートはボタンの表示切替のためのものです。
最後はメッセージ表示部分も含めたデザインを作りますが、ここでポイントとなるのがボタン表示部分です。
ContentControlを使用しているのですが、d:ContentTemplateというものがあります。これを使用することで、任意のデータテンプレートを使用しながらデザインすることができます。ViewModelのコーディングを行おうと思いますが、その前に先に、メッセージなどを受け取るためのパラメータ用クラスを作成しておきますModelフォルダにMessageContentクラスを作成し、以下のコードを書きますコマンドやプロパティ値、フィールドのコード宣言をします。さきほどのMessageDialogTypeも再度記載しています
MessageContentを受け取るフィールド
タイトル、メッセージ、ボタン用のプロパティ
ViewのCommandでBinding設定したICommandの宣言
IDialogAwareで実装されたDialogResult, Actionのコード　となりますViewModelのコンストラクタでICommandの初期化、メソッド呼び出しを作成します。メソッド名は説明しやすいように書いているので別の名称にしてもらっても構いませんSelectedOk, SelectedCancel, SelectedYes, SelectedNoメソッドを作成します。
ButtonResult値を引数としてAction RequestCloseを呼び出しています。OnDialogOpenedがViewが表示されるときに使用されます。この引数のIDialogParameters parametersを利用して、タイトル、メッセージ、ボタンの種類を取得します
ついでに、ビープ音も鳴らせるようにしておきました。以上でView, ViewModelまでは完成です
次にこのメッセージボックスを呼び出し・表示させるためのコードを作っていきますModule.MessageBoxプロジェクトのServiceフォルダ内に次のようにインターフェースを作成します次に、作成したインターフェースの実装クラス(MessageDialogService)を作成します。
同じようにServiceフォルダ内の作成します。
ちなみに、注意ですが、ここでは記事のためにフォルダを減らしてシンプルにしています。インターフェースと実装クラスを別にしたほうがいい場合はそうしてください。
インターフェースを継承すると初期状態はこんな感じになると思います。このなかでPrismのIDialogServiceを使用できるようにしたいので、コンストラクタを宣言します。依存オブジェクトの注入ですがここでは説明は割愛します。とりあえずこうすれば使えるよというぐらいでとらえておきましょう。メッセージボックスの呼び出し時に実際に処理が行われる部分で、メッセージを表示後、閉じたときのボタンが戻る処理となります最後に、作成したサービスが使用できるように、App.xamlのRegisterTypesで以下のように登録しますここまでで以下のようなソリューションとなっていれば大丈夫です。
もし動かないときは、どこかが違っているかもしれないので確認してください。
以上でメッセージボックスは完成したので、実際に動くか確認してみたいと思います。
MainWindowのデザインを以下のようにしてMainWindowViewModelをこんな感じでコーディングこれで実行するとちゃんとメッセージが表示されました
メッセージの表示位置やボタンの表示位置などデザイン部分は、データテンプレートをいろいろといじってみて、好みのものに調整していただければと思います。
僕は、MaterialDesignとか使って、スタイル設定して最終的にこんな感じで表示されるようにしてアプリを作成しています



