More than 1 year has passed since last update.2つを組み合わせて使ったら便利だったのでメモ。
ちなみに2つとも日本語記事は全然見かけなかったので、なんで日本では流行らないのかなーとちょっと悲しかった(´・ω・｀)
流行ることを願ってタグ振っておきます。
※わかる方とか想像つく方いましたらコメントください経緯にも記載してるけど、アサーションエラーのメッセージがほとんど書けない 実装になっているらしい。Assert.True() や Assert.False() はメッセージが書けるけど、エラー時の具体的な値が見えなくなってしまう。ライブラリ全体の機能は多いので、実際に試した範囲のみを取り上げます。
(要約：ちゃんと使いこなしてはいません）ライセンス：MIT License
自然言語でシナリオの説明を記載することができるライブラリ。Use natural language to describe your scenarios.具体的には string に拡張メソッド生やして、元の string にエラーメッセージ(というかケース)を記載していくイメージ。
string.x(Action) 内のアクションがそれぞれの説明内容のステップとして実行される。
ケースをまたがる変数についてはローカル変数またはシナリオメソッドの引数として宣言する。
※ TheoryData の代替となる Example を使いたい場合は引数で宣言すること。テストがステップ毎に検証され、エラーが起きると付加情報としてステップ名が一緒に表示される。ちなみに Visual Studio のテストエクスプローラーからテストを実行すると、についてテスト毎に メソッド内部のステップ単位で表示される のでさらに便利。Documentation &gt; Writing scenarios のNoteに記載されているが、テスト処理は値の代入だろうがAssertだろうが
すべて string.x() の内部で記述する必要がある。Note: You should not be writing any code inside a scenario method which is outside one of the step definitions.
It doesn't make sense to do so, since a scenario method only exists in order to define the steps, and it is executed 
in a context which makes that assumption.テストケースのメソッドが全て処理されてから各ステップが処理されるらしい。a scenario method only exists in order to define the steps を逆手に取った使い方。
公式の Documentation にはそれっぽいことが記載されていなかったけどやってみたらできたのでメモ。ステップが動的に作成されてそれぞれテストされている。具体的な使い方としては、以下のようなテスト処理を用意しておくとインファイルとアウトファイル用意するだけでいろんなパターンの検証追加したりできそう。(未検証)ライセンス：Apache License 2.0
テストの期待値を自然な形で指定できるようにするメソッド拡張のライブラリ。A very extensive set of extension methods that allow you to more naturally specify the expected outcome of a TDD or BDD-style unit tests.具体的には各データ型に Should() 拡張メソッドを生やしてアサーションラッパーを生成、ラッパーに対して各アサーションメソッドを呼び出すことで検証していく。エラーメッセージも独自に整形されるのだが、嬉しいのが Should() の呼び出し元 がメッセージに表示されること。
どうやってるんだろうこれ(*´ω`)なお、変数でなく数式やメソッドチェーンでも行ける模様。一つのアサーションラッパーに対して複数の検証を行うことも可能。また Should() は元の型に対して異なるラッパーを返すので、型に応じてある程度自然に記述できるようになっている。
ただしこの辺は特性慣れないとハマることもあるかもしれないので注意。どのステップで失敗して具体的にどの検証に対してNGなのかがわかりやすくなって嬉しい(๑•̀ㅂ•́)و✧


