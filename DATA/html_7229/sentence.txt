More than 5 years have passed since last update.前回はGETリクエストされたら View を返してみました。今回は前々回に作成したGETリクエストで JSON を返すやつを使って View に表示してみます。ここで本題に入る前に少しプロジェクトの構成を変えます。やることは以下の2点です。
1. SampleModule.cs 内の Person クラスを Models フォルダーに移動
2. SampleModule.cs 内の モジュールをModulesフォルダに移動まずは、Person クラスを定義します。次はモジュールなんですが、モジュールを移動させるついでに View を返すモジュールと JSON を返すモジュールに分けちゃいます。まずは View を返すモジュールを定義します。次は JSON を返すモジュールを定義します。こちらは少し内容を変更します。基本クラスのコンストラクタ引数に基本となるルートを指定するようにしました。これでこのモジュールにリクエストを追加するときに同じルートを何度も書く必要がなくなるので記述がシンプルになります。あと、パスに v1 とか付けてみました。この状態で実行するとちゃんと View が表示されると思います。モジュールの配置場所について特別な設定は必要ありません。モジュールを分割したり移動したりしましたが Nancy が見つけて面倒をみてくれます。これで構成の変更は終わりです。SampleModule.cs は不要になったので削除します。
次は必要なJSライブラリなどを揃えます。ASP.NET Core プロジェクトでは Bower を使ってライブラリを管理します。まず、右クリックでコンテキストメニューから追加を選択して、左のツリーから [.Net Core]- [Client-side] を選択して Bower 構成ファイルの新規作成を行います。すると以下の2のファイルがプロジェクトのフォルダに追加されます。この二つのファイルはソリューションエクスプローラ上から通常の状態では表示されていません。ソリューションエクスプローラで表示する場合は『全てのファイルを表示』ボタンを押しあげてください。.bowerrc の "directory" でパッケージのインストール先を指定しています。インストール先は lib のままでもいいんですが個人的には bower_components のほうがいいので変更します。次はソリューションのNuGet のパッケージ管理を開いて bootstrap と検索します。すると bootstrap のところに非互換: 代わりにBowerを使用してくださいと表示されると思います。このBower のところがリンクになっているのでクリックしちゃいます。クリックするとBower パッケージの管理タブが開くのでここから bootstrap をインストールします。インストールボタンを押すと先ほど .bowerrc で指定したディレクトリにフォルダが作成されてその下に bootstrap がインストールされます。ちなみに、Bower 構成ファイルを作成していない場合は wwwroot フォルダと同じ階層に bower_components フォルダが作成されてその下に bootstrap がインストールされます。最後に AngularJs をインストールします。Bower パッケージの管理タブを閉じてしまった場合は、依存関係の下にBower が追加されているのでこの Bower を右クリックすることで 再度タブを開くことができます。管理タブで angular と検索してインストールします。これで今回の実装に必要なファイルが揃いました。
パッケージの構成を参考までに載せておきます。wwwroot フォルダの下に app フォルダを作成してその下に index.html を移動します。
移動後に実行するとまた HTTP 500 で内部サーバエラーを起こします。デフォルトの状態だとルートパスを基準とした以下のディレクトリにある index(-ja).htmlを探しに行くようになっています。
* views/モジュール名/
* モジュール名/
* views/
* ルートパス直下しかし、今回は app/index.html を見つけて欲しいので処理を追加してあげる必要があります。また、スタイルシートなどの静的コンテンツについてもデフォルトだとルートパスの直下にある Contents フォルダを見に行きます。これだと Bower で入れたパッケージやこれから追加するファイルが使えないのでこちらについても処理を追加する必要があります。処理の追加は BootStrapper.cs に行います。ConfigureConventions() をオーバーライドして処理を追加しています。View のロケーションを追加して wwwroot/app を見てもらうようにしました。また、View のロケーションについてはこの処理を追加しないでモジュール内でとしてもOKです。今回は  Contents フォルダは使わないのでいったんクリアしています。
そのあとで今回使う静的コンテンツのディレクトリを指定しています。これで準備が整ったのでView の実装に入ります。HTML と CSS をいじります。まずは HTML からナビゲーションバーを追加してテーブルを追加しただけです。ナビゲーションバーは特にナビゲートするものはないのですが、かっこいいので入れました。次はスタイルシートを作成します。 app フォルダに styles フォルダを作成し app.css ファイルを作成します。ナビゲーションバーで .navbar-fixed-top を指定しているので body 要素の上部に余白を取っています。JSファイルを追加していきます。app フォルダに scripts フォルダーを作成します。scripts フォルダーにて 右クリックでコンテキストメニューから追加を選択して、左のツリーから [.Net Core]- [Client-side] を選択してください。Visual Studio 2015 には AngularJs のテンプレートが標準で用意されています。まずはこの中から AngularJs Module を選択して追加します。名前はデフォルトの app.js でOKです。
今回は画面遷移とかは行わないので 'ngRoute' の部分はコメントアウトします。これで app という名前のモジュールが生成されます。つぎは Controller を追加します。scripts フォルダの下に controllers フォルダを作成して、今度は AngularJs Controller を選択して追加します。 $scope を使用しないほうを選んでください。名前は mainController.js にします。app モジュールに mainController を追加しています。上のコードではお試しで ViewModel に items を追加して適当なデータを入れています。
実行すると ViewModel で設定した items の値がテーブルに表示されます。簡単ですが説明しておきます。index.html の body タグで ng-app に今回作成したモジュールと ng-controller にコントローラを指定しています。これによって body タグ内で app モジュールにある mainController の ViewModel に定義されているプロパティを要素にバインドしたりできるようになります。プロパティには as で宣言している名前を使っての形でアクセスすることができます。また、値をバインディングするときは {{ }} で囲ってあげます。次はテーブルに items の内容を表示するために ng-repeat を使っています。ng-repeat は宣言されているタグの内容をテンプレートにして、コレクション数に応じて foreach みたいに追加していきます。コレクション内に存在する要素のプロパティには in で宣言している名前を使っての形でアクセスできます。mainController.js で画面を表示したときにGETリクエストして JSON を受け取ってテーブルに表示するように変更します。変更後のコードは以下となります。変更点は３つです。$http はサーバと通信する機能を提供してくれます。他にも post, put, delete なんかもできます。
また、今回は成功時の挙動だけ処理を書いていますが失敗時の挙動もチェーンして書くことができます。これで、準備ができました。
実行すると JSON の内容が View に表示されます。


