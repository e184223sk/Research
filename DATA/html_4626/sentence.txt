More than 1 year has passed since last update.C# で文字分割を大量（秒間20万回くらいを数時間）に行う必要があったが、Split関数がどうも遅かったので、お手製で文字列分割することで、少しは高速になったのでその話です。この記事で、C#の文字列操作の高速化の記事があったので、私も自分メモ的に残そうと思い投稿です。世の中にはより早い方法があるらしいのですが、ここが私の限界でした。。。。
 もっと早いのあるよって方がいたら、教えてください。何分割するか決まっている場合にのみ、正しく動作します。
 下のほうに記載したソースの場合、4個つのカンマで構成される文字のみ正しく動作するということです。こんな感じのデータ
 "12345, D, 555555, 115151, EEEEEE"debugビルドだと、普通のSplitのほうが早くなります。
releaseビルドでやる必要があります。paiza.io  を使っています。
 C#をブラウザですぐに実行できるので、さっと処理を確かめたい時に便利です。実行時間が2秒以内という制約があるので、2秒以内に収まる範囲の処理件数で、1回しか計測しません。※マシンスペックにより、チューニングの仕方も違ったりするのでしょうが。。。
　だいたいのロジックを確認するだけなら、これでもいいはず。。。環境によりけりっぽいです。
@nogic1008 さんからコメントのある通り、Try.NETでは、普通のスプリットの方が早いです。高速化くしたかった環境が .net4.5.2だったのですが、
そこでは、お手製splitの方が高速でした。200万回処理したときに、約300ミリ早くなりました。以下の流れで、処理しています。
1.区切り文字の位置を配列に保存
2.区切り文字の位置を利用し、Substringで文字抽出※いつか、全部比較版を載せたいところですが、、、、
・findより、微妙にループし区切り文字の位置を配列に入れたほうが早かった気がします
・i++するより、i = i + 1したほうが、ほんと微妙に早かった気がします。　←大嘘でした。すみません。
・以下のほうが、StringBuilderに格納していき、ToStringするより早かったと思います。ありがたいことに、コメントに高速化の案を頂いたので、
それらを比較してみました。paiza.ioの環境で、比較しているので、お使いの環境によっては、
必ずしも、比較結果通りになるとは限らないようです。paiza.ioの環境では、@albireo さんから提案頂いた方法が一番速かったです。下に記載していますが、「ローカルのVisualStudio2017 .Net Core 2.1 での計測」した場合も、
@albireo さんから提案頂いた方法が一番速かったです。「区切り文字を見つけたらいったん配列に位置を格納して後でSubstringで切り出すより、区切りを見つけたらその場で切り出した方が効率よくないかな？」
という発想の様で、確かに速くなりました！「.net core 2.1」 だと、普通にSplit速い、
paramsで毎回配列が作られるのを防ぐと速いってこと、みたいです。paiza.ioや、私のローカルマシン(.net core 2.1)では、
あまり効果はなかったですが、特定の環境だと速いようです。@muniel さんから、paiza.ioは、Mono環境なので、Split処理が遅いのでは？
と教えて頂いたので、ローカルマシンの「.Net Core 2.1」でも計測しました。結論から言うと、私のローカルマシンでは、Releaseビルドの場合、お手製Splitのほうが早かったです。
※Debugビルドの場合は、お手製ビルドの方が遅いですが、それは.net4.5.2とかでも同じでした。@nogic1008 さんより、教えて頂いたので、以下の方法で計測します。
①計測前に1回処理を回す。
②10回くらい計測して、平均、最大、最少を出す。デバッグモードだとお手製Splitの方が遅いので、
デバッグ、リリースの2種類で計測します。【平均部門】
1位:fast2Split  295ミリ
2位:fastSplit   360ミリ
3位:nomalSplit  453ミリ
4位:nomalSplit2 457ミリ【最大部門】
1位:fast2Split  345ミリ
2位:fastSplit   396ミリ
3位:nomalSplit  530ミリ
4位:nomalSplit2 541ミリ【最小部門】
1位:fast2Split 227ミリ
2位:fastSplit 265ミリ
3位:nomalSplit 350ミリ
4位:nomalSplit2 385ミリ多分、paiza.ioに貼り付ければ、そのまま動くはず。。。ちょっとの差でも、回数多いとダメージでかいですよね。。。
何百万回と動作すると、少しずつ誤差が出ていく。。。そして、「C#ってこんな言語だったっけ？」って思いました。。。
もっと早くなる方法があったら、教えてください。。。本筋とは関係ないですが、paiza.ioのように、
すぐに動作を確認できる仕組みがあるって、ありがたいです。ものすごく便利になったなと思いました。


