
using System;
using System.Threading.Tasks;

class Promise&lt;T&gt;
{
    private TaskCompletionSource&lt;T&gt; tcs = new TaskCompletionSource&lt;T&gt;();
    public static implicit operator Task&lt;T&gt;(Promise&lt;T&gt; p) =&gt; p.tcs.Task;
    public Promise(Action&lt;Action&lt;T&gt;, Action&lt;Exception&gt;&gt; action) =&gt;
        action(tcs.SetResult, tcs.SetException);
}

class Test
{
    static Task&lt;int&gt; test(bool f)
    {
        return new Promise&lt;int&gt;((resolve, reject) =&gt; {
            if (f) resolve(1); else reject(new Exception());
        });
    }

    static async Task Main()
    {
        try
        {
            Console.WriteLine(await test(true));
            Console.WriteLine(await test(false));
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
}

