More than 1 year has passed since last update.非同期処理に使う JavaScript の Promise と .NET Framework (C#) の TaskCompletionSource を比較します。Promise や TaskCompletionSource のどちらか片方の知識から、比較によってもう一方の取っ掛かりにするのが狙いです。JavaScript のコードは以下の記事から一部引用します。Promise の概要もこちらで説明しています。Promise は await での利用に限定して、.then() は利用しません。JavaScript は Deno を想定してトップレベルで await を使用します。ただし最後の Web Speech API の例は、ブラウザで動かす必要があるため async 関数で囲みます。定番の setTimeout を Promise でラップしたものです。C# に移植します。用意されている Task.Delay() を使うだけです。.NET Framework で JavaScript の Promise に仕様が近いのは TaskCompletionSource です。resolve に相当するのは SetResult です。簡単な例で比較します。※ この例では非同期の嬉しさがありませんが、後で SetResult が遅延する例を示します。👉音声合成SetResult の名前のニュアンスは「await で取り出すための結果をセットする」という感じでしょうか。個人的には分かりやすい名前だと思います。reject に相当するのは SetException です。簡単な例で比較します。わざと例外を発生させています。コールバックの引数を外に出せば TaskCompletionSource が模倣できます。SetResult と SetException をコールバックに引数で渡せば Promise が模倣できます。同じようなことを試みた記事です。.then() や .catch() を模倣しようとすると、かなり面倒なことになるようです。TaskCompletionSource ではキャンセルもサポートされます。（SetCanceled）Promise には対応するものがないため、キャンセルを実装するには工夫が必要です。比較は省略します。コールバックで終了やエラーの通知が来るタイプとして、Web Speech API の例を WinRT に移植して比較します。JavaScript では API に任せている部分を WinRT では記述しているためやや混み入っています。MediaEnded のイベントハンドラの中から SetResult を呼んでいるのがポイントです。await Speak() は再生が終了するまで待ちます。WinRT での音声合成については以下の記事を参照してください。


