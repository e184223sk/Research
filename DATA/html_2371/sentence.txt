More than 1 year has passed since last update.配達系国道制作ゲーム、DEATH STRANDING。このゲームに登場するカイラル通信による通話（広義のホログラムのようなもの）を模倣してみました。
『DEATH STRANDING Day-1　GAMEPLAY SESSION Vol.1』PlayStation® presents LIVE SHOW “TGS2019”の53分あたりに登場。Unity ShaderLabでの実装です。
おおまかな構成要素は以下
１．半透明
２．リムライト
３．vertex shaderでx軸方向にモデルの頂点をランダムに動かす
４．上方向に移動するスキャンライン
５．モデル全体にランダムノイズ
６．モデル全体に青系のオーバーレイ
７．上から下にdissolve
８．１のノイズが大きくなる（dissolve時）流れとしては、1Pass目で深度書き込み、2Pass目でアウトライン、3Pass目でその他、といった感じです。QueueをTransparentに設定し、描画順を不透明オブジェクトの後に設定します。
1Pass目でモデルの深度情報を書き込んでおきます。これをしないとデプス値が正しく更新されず、モデルが綺麗に表示されません。
その後はZWriteをOffにすることで深度の計算を破棄し、Blendを記述することでアルファブレンディングを有効にします。2Pass目でモデルの頂点を法線方向にオフセットすることでアウトラインを出します。3Pass目のfragment shaderで視線ベクトルと頂点の法線ベクトルの内積をとることでさらにリムライトっぽくします。3Pass目のvertex shaderで計算を行い、x軸方向またはz軸方向に頂点をランダムに動かします。
ランダムに時間で区切ってオフセットさせるとパッパッと切り替わるような動きになってしまいます。これを防ぐために経過時間をfloorに入れ整数部のみを取り出すことでrandamに入れた時一定時間は同じ値を取るようにし、fracで小数部分のみを取り出しオフセットのサイズ調整に当てています。こうすることでサイズ徐々に変わるウニョウニョした動きをさせることができます。また、ランダムな値の算出は有名な関数をちょっと弄ったもの、Graphは適当にランダムな凹凸が現れるような関数を作成しました。こちらのサイトでグラフを描画して良い感じのものを採用しました。ランダムな太さのスキャンラインを上方向に移動させる方法が思いつかなかったので、白黒のシマシマのテクスチャを作成し、uvスクロールさせる方法を取りました。これがスキャンラインA。
上のgifのようなスキャンラインBは、y座標を定数倍して小数部をアルファ値とすることで実装しています。3で使用したノイズ関数を利用します。floorはタイミング調整に便利です。
noiseを減算することでザラついた感じを表現できます。オーバーレイは加算や乗算、スクリーンなどと異なり条件分岐が必要なので少し面倒です。条件付きコンパイルを用いて実装します。
キーワードを定義しておき、定義されたキーワードによってコンパイルする内容を変更します。
バリアントを作成する方がif文で毎回参照するよりも効率が良いので（おそらく）、できるだけこちらをつかいたいです。dissolveにグラデーションをかけたいので、saturateを使って値を調整します。実際のムービーを見ていただけると分かるのですが、disolve時はノイズのサイズが大きくなり、密度が大きくなります。C#スクリプトから7のdissolveのキーワード切り替えと同時にノイズのサイズと密度を調整します。・半透明　http://nn-hokuson.hatenablog.com/entry/2018/01/23/202530
・オーバーレイ　http://sylphylunar.seesaa.net/article/390331341.html
・スキャンライン　https://twitter.com/minionsart/status/899628037360234496
・シェーダのバリアント作成　http://light11.hatenadiary.com/entry/2019/01/12/232533


