
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading;
using System.Windows.Automation;
using System.Runtime.InteropServices;

namespace RPA
{
    class Program
    {

        [DllImport("user32.dll")]
        public static extern IntPtr FindWindowEx(IntPtr parentWindow, IntPtr previousChildWindow, string windowClass, string windowTitle);

        [DllImport("user32.dll")]
        private static extern IntPtr GetWindowThreadProcessId(IntPtr window, out int process);
        private static IntPtr[] GetProcessWindows(int process)
        {
            IntPtr[] apRet = (new IntPtr[256]);
            int iCount = 0;
            IntPtr pLast = IntPtr.Zero;
            do
            {
                pLast = FindWindowEx(IntPtr.Zero, pLast, null, null);
                int iProcess_;
                GetWindowThreadProcessId(pLast, out iProcess_);
                if (iProcess_ == process) apRet[iCount++] = pLast;
            } while (pLast != IntPtr.Zero);
            System.Array.Resize(ref apRet, iCount);
            return apRet;
        }

        private static AutomationElement mainForm;

        static void Main(string[] args)
        {
            Process process = null;
            try
            {
                foreach (Process p in Process.GetProcesses())
                {
                    if (p.MainWindowTitle.Contains("電卓"))
                    {
                        Console.WriteLine("Detected");
                        Console.WriteLine(p.MainWindowTitle);
                        Console.WriteLine(p.MainWindowHandle);
                        process = p;
                    }
                }

                mainForm = AutomationElement.FromHandle(process.MainWindowHandle);

                var btnClear = FindElementsByName(mainForm, "1").First()
                    .GetCurrentPattern(InvokePattern.Pattern) as InvokePattern;
                btnClear.Invoke();
         }
      }
    }

