using System;
using FourierTransform;
namespace FourierTransform
{
    // 愚直に離散フーリエ変換を行うための構造体
    public struct DiscreteFourierTransform {

        // 波サンプルデータの長さ
        int Samples;

        // コンストラクタ
        public DiscreteFourierTransform(int Samples) {

            // 引数の値が2の自然数乗でなければ例外を投げる
            for(int i = 2; i &lt;= Samples; i *= 2)
                if(Samples % i != 0 || Samples &lt;= 0) throw new DomainException();

            // 波サンプルデータの長さを格納
            this.Samples = Samples;
        }

        // 周波数成分を取得するメソッド
        // 引数 Function には自作した窓関数を指定することができる
        public double[] GetSpectrum(double[] WaveSamples, WindowFunction Window) {

            // 引数となる配列の長さが Samples に等しくなければ例外を投げる
            if(WaveSamples.Length != Samples) throw new SampleDataLengthException();

            // 返り値になる周波数成分データ
            double[] Spectrum = new double[Samples];

            // 波サンプルに窓関数を掛ける
            for(int i = 0; i &lt; Samples; i++) WaveSamples[i] *= Window((double)i / Samples);

            // 離散フーリエ変換
            for(int i = 0; i &lt; Samples; i++) {
                double re = 0, im = 0;
                for(int j = 0; j &lt; Samples; j++) {
                    double arg = -2 * Math.PI / Samples * i * j;

                    re += Math.Cos(arg) * WaveSamples[j];
                    im += Math.Sin(arg) * WaveSamples[j];
                }
                Spectrum[i] = Math.Sqrt(re * re + im * im);
            }

            // Spectrum を返す
            return Spectrum;
        }
    }
}

