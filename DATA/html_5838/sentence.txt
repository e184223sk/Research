More than 3 years have passed since last update.といいつつ、署名と検証です。
愛のメッセージに署名を付与して改ざんを防ぎます。.Net の RSACryptServiceProvider が 512bit 以上の鍵しか利用できないので、自前で計算する羽目になった以下のようにして生成した message.bin, sign.bin, public-key.pem を渡すことで、私がしたためたメッセージだということを保証します。Roslyn の C# Interactive (VS2017) で確認しながら実行していったのでメモとして掲載。s/-.*-//g でヘッダとフッダを削除し、Base64部分のみを取り出す。base64をdecodeする。RSAのDERは1Byte目が 0x30 と決まっているのでそれ以外であれば弾く。DER内の最初のコンテンツの長さを読み、コンテンツを取得する。(それ以外は捨てる)コンテンツをパースする構造は次のように定義されている。この辺は手計算。今回の鍵は32bitなので平文は4文字まで。平文は "love" とします。
これをbyte列にすると byte[4] { 0x6C, 0x6F, 0x76, 0x65 } となります。
整数に直すと 1,819,244,133 です。署名は秘密鍵での暗号化なので 平文 ^ privateExponent mod modulus の式で行います。
今回は 1,819,244,133 ^ 2,281,334,485 mod 3,209,141,941 です。よって署名は byte[4] { 0x52, 0xD1, 0x16, 0xDE } 。
これは openssl にて手順の確認 の署名と一致します。
素晴らしい。署名と一緒。平文に戻りました。
今回はハッシュをしていないので、平文と一致すればOKですね。高速化が必要。32bitの署名に50秒かかった。bit数が大きくなると整数型で扱えなくなる。バイト列で計算する必要がある。publicExponent と modulus から privateExponent を導いてみたい。


