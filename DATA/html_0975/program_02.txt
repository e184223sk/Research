
/// &lt;summary&gt;
/// 逆ポーランド記法における1つのトークンを表す構造体です。
/// &lt;/summary&gt;
private struct Token
{
    /// &lt;summary&gt;
    /// 演算子を表す文字列とその実行処理のマッピング。
    /// &lt;/summary&gt;
    private static readonly Dictionary&lt;string, Func&lt;N, N, N&gt;&gt; _operaters
        = new Dictionary&lt;string, Func&lt;N, N, N&gt;&gt;() {
                                                      { "+", (d1, d2) =&gt; NumericalGeneric.Add(d1, d2) },
                                                      { "-", (d1, d2) =&gt; NumericalGeneric.Subtract(d1, d2) },
                                                      { "*", (d1, d2) =&gt; NumericalGeneric.Multiply(d1, d2) },
                                                      { "/", (d1, d2) =&gt; NumericalGeneric.Divide(d1, d2) }
                                                  };

    /// &lt;summary&gt;
    /// トークンが演算子であるかどうかを取得します。
    /// &lt;/summary&gt;
    public bool IsOperater =&gt; !string.IsNullOrEmpty(this.Operater);

    /// &lt;summary&gt;
    /// トークンが演算子であるとき、その文字列を取得します。
    /// &lt;/summary&gt;
    public string Operater { get; }

    /// &lt;summary&gt;
    /// トークンが数値であるとき、その値を取得します。
    /// &lt;/summary&gt;
    public N Value { get; }

    /// &lt;summary&gt;
    /// 逆ポーランド記法の文字列からトークンを生成します。
    /// &lt;/summary&gt;
    /// &lt;param name="s"&gt;逆ポーランド記法のトークンを表す文字列。&lt;/param&gt;
    /// &lt;param name="replacePrams"&gt;指定したトークン文字列を数値に置き換えるためのマッピング。&lt;/param&gt;
    public Token(string s, Dictionary&lt;string, N&gt; replacePrams)
    {
        if (_operaters.ContainsKey(s))
        {
            // 演算子の場合
            this.Value = default(N);
            this.Operater = s;
        }
        else
        {
            // 数値の場合
            if (replacePrams?.ContainsKey(s) ?? false)
                this.Value = replacePrams[s];  // 指定したトークン文字列を数値に置き換え
            else if (NumericalGeneric.TryParse(s, out var t))
                this.Value = t;                // N.TryParse によって変換に成功
            else
                throw new FormatException();   // 認識できない文字列
            this.Operater = null;
        }
    }

    /// &lt;summary&gt;
    /// 2つのトークンに対してトークンの示す算術演算を行い、その結果から新たなトークンを作成します。
    /// 引数は、Stack&lt;T&gt;から取り出されることを想定して順序が判定していることに留意してください。
    /// &lt;/summary&gt;
    /// &lt;param name="d2"&gt;2つ目の数値。&lt;/param&gt;
    /// &lt;param name="d1"&gt;1つ目の数値。&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public Token Operate(N d2, N d1) =&gt; new Token(_operaters[this.Operater](d1, d2));

    /// &lt;summary&gt;
    /// 数値型のトークンを生成します。
    /// &lt;/summary&gt;
    /// &lt;param name="value"&gt;数値。&lt;/param&gt;
    private Token(N value) =&gt; (this.Value, this.Operater) = (value, null);
}

