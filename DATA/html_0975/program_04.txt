
/// &lt;summary&gt;
/// 逆ポーランド記法の演算を行います。
/// &lt;/summary&gt;
/// &lt;param name="exp"&gt;式。&lt;/param&gt;
/// &lt;returns&gt;結果値。&lt;/returns&gt;
public static N Calculate(string exp) =&gt; CalculateInvoker(exp, null);

/// &lt;summary&gt;
/// 逆ポーランド記法の演算を行います。
/// &lt;/summary&gt;
/// &lt;param name="exp"&gt;式。&lt;/param&gt;
/// &lt;param name="replaceParam"&gt;指定したトークン文字列を数値に置き換えるためのマッピング。&lt;/param&gt;
/// &lt;param name="replaceParams"&gt;指定したトークン文字列を数値に置き換えるためのマッピング。&lt;/param&gt;
/// &lt;returns&gt;結果値。&lt;/returns&gt;
public static N Calculate(string exp, (string Key, N Value) replaceParam, params (string Key, N Value)[] replaceParams)
{
    var valueList = new Dictionary&lt;string, N&gt;(replaceParams.Length + 1);
    valueList.Add(replaceParam.Key, replaceParam.Value);
    valueList.AddRange(replaceParams);
    return CalculateInvoker(exp, valueList);
}

/// &lt;summary&gt;
/// 逆ポーランド記法の演算を行います。
/// &lt;/summary&gt;
/// &lt;param name="exp"&gt;式。&lt;/param&gt;
/// &lt;param name="replaceParams"&gt;指定したトークン文字列を数値に置き換えるためのマッピング。&lt;/param&gt;
/// &lt;returns&gt;結果値。&lt;/returns&gt;
public static N Calculate(string exp, IEnumerable&lt;(string Key, N Value)&gt; replaceParams)
    =&gt; CalculateInvoker(exp, replaceParams.ToDictionary(t =&gt; t.Key, t =&gt; t.Value));

/// &lt;summary&gt;
/// 逆ポーランド記法の演算を行います。
/// &lt;/summary&gt;
/// &lt;param name="exp"&gt;式。&lt;/param&gt;
/// &lt;param name="replaceParam"&gt;指定したトークン文字列を数値に置き換えるためのマッピング。&lt;/param&gt;
/// &lt;param name="replaceParams"&gt;指定したトークン文字列を数値に置き換えるためのマッピング。&lt;/param&gt;
/// &lt;returns&gt;結果値。&lt;/returns&gt;
public static N Calculate(string exp, N replaceParam, params N[] replaceParams)
{
    var valueList = new List&lt;N&gt;(replaceParams.Length + 1);
    valueList.Add(replaceParam);
    foreach (var item in replaceParams) valueList.Add(item.Key, item.Value);
    return Calculate(exp, valueList);
}

/// &lt;summary&gt;
/// 逆ポーランド記法の演算を行います。
/// &lt;/summary&gt;
/// &lt;param name="exp"&gt;式。&lt;/param&gt;
/// &lt;param name="replaceParams"&gt;指定したトークン文字列を数値に置き換えるためのマッピング。&lt;/param&gt;
/// &lt;returns&gt;結果値。&lt;/returns&gt;
public static N Calculate(string exp, IEnumerable&lt;N&gt; replaceParams)
    =&gt; CalculateInvoker(exp, replaceParams.Select((Item, Index) =&gt; new { Item, Index }).ToDictionary(v =&gt; v.Index.ToString("{0}"), v =&gt; v.Item));

