More than 3 years have passed since last update.　MSDNのAsyncのページを読んでいて、「戻り値がTask？voidでもいい？ワカ分からん」となったので実際に動かしてどのような挙動になるかを確認しました。
　MSDNによると非同期メソッドにするには　とすれば良いみたいです。
　今回は戻り値の型の違いによるそれぞれの動作を見ていきたいと思います。検証したのは戻り値がvoidの場合、Taskの場合の2つです。Task&lt;TResult&gt;は戻り値を返す以外はTaskとほとんど同じ動作をするため記載を省略しています。
　今回のソースコードはVisual Studio 2015で実行しています。
　
参考：Async および Await を使用した非同期プログラミング (C# および Visual Basic)
https://msdn.microsoft.com/ja-jp/library/hh191443(v=vs.110).aspx　以下のコードで動作を確認しました。
　非同期処理の戻り値による動作の違いを見たかったため、Thread.Sleep()とConsole.WriteLine()を入れ、処理の順序が分かるようにしています。
　また、例外処理を行なうかを確認したかったためAsyncVメソッドで例外を投げています。
　本当は非同期メソッドが入れ子になったときの状態を確認するためにbutton1_Clickでawaitしたかったのですが、Visual Studio 2015では戻り値voidの非同期メソッドはawaitできないみたいです(Visual Studio 2013では書けた気がする)。　　　ボタン開始
非同期処理開始
ボタン終了
非同期処理終了　AsyncVメソッドの戻り値をTaskに変更したのが下記のコードです。
　今度は呼び出しの際にawaitを行えるようになっています。ボタン開始
非同期処理開始
非同期処理終了
例外発生
ボタン終了戻り値voidの場合、戻り値Taskの場合、


