
using System.Text.Json;
using System.Text.Json.Serialization;
public class SystemTextJsonResult : JsonResult
{
    public SystemTextJsonResult()
    {
        Settings = null;
    }

    public JsonSerializerOptions Settings { get; private set; }

    public override void ExecuteResult(ControllerContext context)
    {
        if (context == null)
            throw new ArgumentNullException("context");

        if (this.JsonRequestBehavior == JsonRequestBehavior.DenyGet &amp;&amp; string.Equals(context.HttpContext.Request.HttpMethod, "GET", StringComparison.OrdinalIgnoreCase))
            throw new InvalidOperationException("JSON GET is not allowed");

        HttpResponseBase response = context.HttpContext.Response;
        response.ContentType = string.IsNullOrEmpty(this.ContentType) ? "application/json" : this.ContentType;

        if (this.ContentEncoding != null)
            response.ContentEncoding = this.ContentEncoding;
        if (this.Data == null)
            return;

        var stringValue = (this.Settings == null) 
                                ? JsonSerializer.Serialize(this.Data)
                                : JsonSerializer.Serialize(this.Data, this.Settings);
        response.Output.Write(stringValue);
    }
}

