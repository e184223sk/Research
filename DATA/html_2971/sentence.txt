More than 1 year has passed since last update.先日記載したコード、文字色の自動判定アルゴリズムに一部無駄があったので改良します。【C#】背景色から黒文字か白文字の見やすい方を自動判定 （WCAG 2.0 利用版）
https://qiita.com/mainy/items/f5540f33d37d8ce6a46e何が無駄かというと、白文字と背景色、黒文字と背景色を毎回計算して比較していました。
背景色の相対輝度の値から、白文字もしくは黒文字にズバッと判定できてもよさそうです。数学的改良とカッコつけてますが、中学レベルです。つまり(1 + 0.05) / (x + 0.05) = (x + 0.05) / (0 + 0.05) となる値は、ちょうど白文字と黒文字の分岐点となるわけです。
分岐点の値を先に計算しておけば、この値を基準に白文字か黒文字を判定させたほうが負荷が軽減されます。分岐点の値をまずは計算します。まずは簡単な数式に置き換えるため、y = (x + 0.05) とおきます。右辺と左辺を整理します。y = (x + 0.05) を戻します。2次方程式の解の公式に当てはめます。近似値は以下の通りとなります。相対輝度の範囲は0~1です。つまり、値は必ず正の値になるので、計算した相対輝度が 0.17912878474779 以上であれば「黒文字」、未満であれば「白文字」の判定すれば良い事がわかります。chooseTextColor() 関数の判定が以下の通りになります。
境界値がマジックナンバーになるので、ドキュメントにしっかりと境界値の意味を記載しておきましょう。背景色と黒文字・白文字どちらかの相対輝度比率が 7.0 以上となるケースも、背景色の相対輝度から判断できそうです。相対輝度比率 が 7.0 以上になるためには、以下の不等式が成立すれば良さそうです。サクッと計算します。相対輝度が 0.1 以下であれば、見やすい白文字の表記ができます。相対輝度比率 が 7.0 以上になるためには、以下の不等式が成立すれば良さそうです。サクッと計算します。相対輝度が 0.3 以上であれば、見やすい黒文字の表記ができます。上記の黒文字・白文字判定の範囲から単純に導き出せそうです。
背景色の相対輝度が以下の範囲の値だと、黒文字だろうが白文字だろうが、どちらを選んでも若干見にくい文字となります。こんなコードで性能は求められないので、実際にはここまでする必要はないかと思います。
自己満足の世界です。


