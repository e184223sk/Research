public class LogProxy&lt;T&gt; : RealProxy
{
    private readonly T _decorated;
    private LogProxy(T decorated) : base(typeof(T))
    {
        _decorated = decorated;
    }

    public static T Create(T instanse)
    {
        return (T)new LogProxy&lt;T&gt;(instanse).GetTransparentProxy();
    }

    public override IMessage Invoke(IMessage msg)
    {
        var methodCall = msg as IMethodCallMessage;
        var methodInfo = methodCall.MethodBase as MethodInfo;

        Console.WriteLine($"Before executing '{methodCall.MethodName}'");
        var result = methodInfo.Invoke(_decorated, methodCall.InArgs);
        Console.WriteLine($"After executing '{methodCall.MethodName}' ");

        return new ReturnMessage(result, null, 0, methodCall.LogicalCallContext, methodCall);
    }
}

