More than 1 year has passed since last update.この記事は、Xamarin Advent Calendar 2016(その2) の23日目の記事です。Xamarin に限らずアプリのデバッグを効率的に行うためにはログ出力ライブラリの利用は必須だと思います。
System.Diagnostics.Debug クラスも便利ですが、複雑なアプリケーションのデバッグになると、厳しい場合があります。
本記事では、NLog を使って Xamarin.Forms のアプリケーションからログを出力する方法について記載します。NLog は以下のような機能をもつ非常に便利なライブラリです。NLog は、Xamarin.Android, Xamarin.iOS をサポートしていますが、Xamarin.Forms はサポートしていません。
しかしながら、DependencyService や Unity (DI コンテナ）等の機能を利用することで、Xamarin.Forms でも NLog の便利な機能を利用することが可能になります。サンプルコードを GitHub に置いています。サンプルは Main.xaml にボタンを二つ配置して、ボタンを押すとファイルにログ出力する簡単なサンプルです。ソリューションの初期構造は以下の流れで作っています。NuGet で以下のパッケージをネイティブのプロジェクト（NLogSample.Droid, NLogSample.iOS）にインストールします。NLog.Config をインストールすると、以下の二つのファイルがプロジェクトに作成されますが、Android ネイティブのプロジェクトに配置されたファイルは移動が必要です。NLog のログ出力インターフェース（ILogger）の中からアプリケーションで利用するインターフェースを Xamarin.Forms のプロジェクトに定義します。今回は、NLog のメソッドからから以下のメソッドをインタフェースとして定義しました。
インターフェースの各メソッドを、NLog の ILogger のメソッドに1対1に対応させています。ログ出力処理は、Android、iOS でも同じなので、共有プロジェクト（NLogSample.Shared）を Android ネイティブ、iOS ネイティブの両方から参照します。共有プロジェクトに、実装クラスを作成します。実装時のポインとは以下の点です。コードの例を以下に示します。
今回は、Xamarin.Forms の DependencyService 経由でインスタンス化されるようにしています。ログを出力する処理を必要に応じて記述します。例を以下に示します。ログ出力に関する設定を構成ファイルで設定します。以下の二つのセクションの設定を行います先ずは、NLog.config のテンプレートに記載さている例を利用して、以下のように設定します。&lt;target&gt; セクション定義の例を示します。各プラットフォームでログの出力先の設定値は以下を参考にしてください。logger 要素の設定例を示します。Android の実機にサンプルをデプロイして確認した結果を以下に示します。
logger の minlevel で Debug レベルを指定しているため、 Trace レベルのログが出力されていないことがわかります。出力レベルは、&lt;rules&gt; セクションに定義した &lt;logger&gt; 要素の minlevel の値を変更することで切り替えることができます。
出力レベルは、降順で以下の通りです。minlevel の値を ”Info” に変更すると Debug, Trace レベルのログは出力されなくなります。また、"Off" にするとログ出力は行われなくなります。必要に応じて出力レベルを指定してください。ログ解析時に必要となる典型的な項目（プロセス ID など）を自動的に出力することができます。
&lt;target&gt; セクションの layout 属性を削除して、子要素に &lt;layout&gt; タグを追加、子要素の &lt;column&gt; タグで出力項目を設定します。
ここでは、CSV ファイルにログを出力するための設定値の例を示します。Android の実機に配置したサンプルで動作確認を行うと、以下のように出力されました。レイアウト、既定の出力項目の詳細については以下を参考にしてください。一つのファイルにログを出力し続けるとファイルサイズが肥大化してしまいますが、NLog では、適切なタイミングで、過去のログを別のファイルに退避することができます。ファイルローリングの設定は、&lt;target&gt; 要素の属性値で設定することができます。
一定時間経過するとファイルを退避したい場合の設定項目を以下に示します。1分経過するとファイルの退避を行い、過去五世代まで archives ディレクトリに保存する場合は、以下のような設定になります。ファイル名には、[yyyy-MM-dd-HH-mm] の形式で日付時刻が付与されます。
（動作確認用のサンプルのため、退避の時間間隔を1分としています。）Android の実機でサンプルを動作させると、1分間隔でログファイルが退避されています。保存数の最大値を超える場合は、一番古いログファイルが削除されていることがわかります。ログファイル退避のその他の設定方法に関しては、以下を参照してください。手順のまとめを以下に箇条書きで記載します。この記事では、デバッグログを出力するために NLog の利用手順について記載しました。
NLog 以外にも @amay077 さんの 「Xamarin.Forms をガチで使う時のプロジェクト構成(2016冬Ver)」 で紹介されている MetroLog というライブラリもあります。
どちらのライブラリも System.Diagnostics.Debug クラスを利用するよりも作業効率が上がると思いますので、お好みで選択していただければと思います。この記事が、NLog を利用される方に少しでも役立てば、非常にうれしく思います。


