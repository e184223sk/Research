More than 1 year has passed since last update.Dyanamoでは、洗練されたビジュアルプログラミングを楽しむことができるのですが、スクリプト環境についていうと、DesignScriptというDSLや、Iron Pythonが使えるのみで、事前に用意されたライブラリ以外は使うことができません。Autodesk Revitと連携させて形状を作るするだけであれば問題ありませんが、システム連携などを考慮すると貧弱に感じます。
Dynamoでは、Zero Touch Node(ZTN)と呼ばれるカスタムノードを開発することが可能です。ちょうどRevitでアドインを開発するように、C#で作ったDLLをDynamoに取り込むことができます。ついでに一般的にはPython Scriptで書くより速いようです。公式のドキュメントはここです。しかし、関連ドキュメント少なすぎやしませんか、、、Visual Studio Community 2017を使って開発します。新しいプロジェクト（クラスライブラリ .NET Framework）を選択します。.NET Framworkのバージョンは4.8としました。
次にNuGetパッケージマネージャーを使って、以下のようにDynamoの開発に必要なライブラリをインポートします。DyanamoVisualProgramming.ZeroTouchLibraryだけで大丈夫です。DynamoServices、DynamoUnits、PhotoGeometryの3つが追加されています。これらをプロパティを選択して、「ローカルにコピー」をFalseにすると不要なパッケージがパッケージに含まれるのを防ぐことができるそうです。
開発したZTNをデバッグするためには、毎回出力したDLLを手動でDynamoに読み込ませる必要があります。面倒なので、Visual Studioから起動できるようにしておきます。以下の手順で行います。pkg.jsonは作成したカスタムノードのメタデータを記述するファイルです。Dynamoで自分でカスタムノードを作る場合は、自動生成されるものです。具体的には、以下のように記述します。続いて、ビルドした後のdllなどをDynamoが起動時に読み込むフォルダに自動配置するようにします。自動的に読み込むフォルダは、使っているDynamoによって違います。Dynamoメニューの設定 -&gt; ノードとパッケージのパスを管理で当該フォルダを確認してください。プロジェクトのプロパティ -&gt; ビルドイベント -&gt; ビルド後イベントのコマンドラインに以下を入力します。以下は、Dynamo Revit 2.0の場合の設定例です。次に、同じくプロジェクトのプロパティから、デバッグ -&gt; 外部プログラムの開始(X)にC:\Program Files\Autodesk\Revit 2019\Revit.exeと入力します。デバッグに利用するプログラムのパスを書き込むわけですが、ここも環境によって適宜変更してください。ここでようやくZTN開発ということですが、特に難しいことはなくて、public staticなメソッドを定義すればいいだけです。メソッド引数がノードへの入力になります。例えば以下の例では、Nameという文字入力をとって、固定文字を追加して出力とします。出力を複数にしたい場合は、Dictionaryをreturnすればよい。この辺はサンプルコードがいくつかあるので、そこから学ぶのが良いと思います。Nodeの中にGUIを作れたりして、実にいろんな拡張が可能です。ちなみに、Dynamo 2.0で追加になったDictionary型を使うためには、System.Collections.IDictionaryを使います。上記のままでも使えるのですが、Dynamoに表示される名称の階層が深くてかっこ悪いです。これはアセンブリ名とC#のNamespaceから自動生成されています。これを変更する手段としては、パッケージフォルダ内にbin/アセンブリ名_DynamoCustomization.xmlというファイルを設置することで実現できます。このファイルのコピーもビルド時の挙動に組み込んでおくとよいでしょう。今回の場合は、HelloWorldZeroTouch_DynamoCustomization.xmlですね。そうすると以下のように読み込まれるのが確認できます。



