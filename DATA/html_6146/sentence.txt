More than 3 years have passed since last update.最近 SNS でよく見かける 画像を利用した "カード" と呼ばれるフォーマット。Bot Framework で利用可能になった Adaptive Cards を使って、情報をグラフィカルに表示する方法を紹介します。
Livedoor 天気予報 Weather Hacks の天気予報 API を利用してデータを取得、日付と気温と共に天気アイコンを表示するカードを作成、表示する BOT を作成します。
Windows 10 + Visual Studio 2017 Enterprise, Bot Framework v3.8 (C#) で作成を行っています。無償の Visual Studio 2017 Community or 2015 Community でOKなので、既存の環境がない場合は、ダウンロードしてインストールします。
Visual Studio 2017 Community ダウンロードサイト
Visual Studio 用の Bot Framework C# テンプレート
Bot Framework Channel Emulator (Windows版) ※Mac/Linux は Console版 をご利用くださいBot Framework 開発環境の作り方は、Microsoft Bot Framework v3.0 からはじめる BOT 開発: Bot Framework を使うための開発環境 をご覧ください。Visual Studio テンプレートから Bot アプリケーションの作成 と同じ手順で、Visual Studio テンプレートから Bot アプリケーションの作成 と同じプロセスで新規アプリケーションを作成します。
今回は WeatherBot という名称で作成しています。
ソリューションエクスプローラーからプロジェクトの配下にある [参照] を右クリックして [NuGet パッケージの管理] をクリックします。
上部バーに このソリューションに一部のNuGetパッケージが見つかりません．．． と表示される場合は、[復元] をクリックして、必要なパッケージをインストールします。(表示されない場合は次に進みます)
[参照] タブをクリックし、検索バーに adaptive cards と入力して検索、Microsoft.Adaptive.Cards をクリックします。すぐ右側に表示される詳細画面の [インストール] をクリックしてインストールします。
インストールの確認 が表示されたら [OK]　、ライセンスへの同意 は [同意する] をクリックして、インストールします。
個人の範囲で無料で利用できる Weather Hack の お天気 Webサービス を使うと、天気と気温の予報データがJSON 形式で取得できます。 (→サービス仕様)
[例] 横浜(cityid=140010)の天気予報を取得
http://weather.livedoor.com/forecast/webservice/json/v1?city=140010このような JSON データを格納して利用しやすくするためのクラスを作成します。
プロジェクトを右クリックして [追加]＞[新しいフォルダー] をクリック、Models というフォルダーを作成します。
作成した Models フォルダーを右クリックして、[追加]＞[クラス]をクリックします。
名前に WeatherModel.cs と入力して、[追加] をクリックして新規クラスファイルを作成します。
WeatherModel.cs を開き、デフォルトで作成されている WeatherModel クラスを一旦削除します。
API のフォーマットを取得するため、ブラウザーを起動して API にアクセスを行います。
http://weather.livedoor.com/forecast/webservice/json/v1?city=140010表示される結果をすべて選択して、コピーします。
Visual Studio に戻り、namespace .Models 内をクリックして選択してから、上部ツールバーから [編集]＞[形式を選択して貼り付け]＞[JSON をクラスとして貼り付ける] を選択して、コピーした内容を貼り付けます。

class Rootobject は class WeatherModel に変更します。
適時ファイルの保存を行っておきます。Dialogs フォルダ を開き、自動生成されている RootDialog.cs を編集します。RootDialog.cs の冒頭に System.Net.Http, Newtonsoft.Json, Adaptive Card への参照を追加します。
上記で作成した WeatherModel を利用するために、Models フォルダー への参照も追加します。ユーザーからメッセージが送信された時の動作を MessageReceivedAsync に記載していきます。
まず、MessageReceivedAsync 内のコードを下記に書き換えます。天気を取得する GetWeatherAsync を作成します。
下記のコードでは、横浜 (city=1400100) を指定して天気情報を取得しています。ここで一旦 BOT の動作確認を行います。、F5 または デバック＞デバックの開始 をクリックして、プロジェクトのビルドおよび起動を行います。ブラウザが起動して Bot Framework のデフォルト画面が表示されたら、Bot Framework Channel Emulator を起動してアクセスを行います。
Bot Framework Channel Emulator の上部中央にある Bot Url に、起動しているブラウザと同じ URL (デフォルトでは http://localhost:xxxx) に /api/messages を追加したアドレス (http://localhost:xxxx/api/messages) を指定します。何か文字を入力して送信すると、天気予報が返されるのを確認してください。
次に Adaptive Cards を使って、カード形式で情報を表示します。
MessageReceivedAsync を以下のように変更します。message.text の代わりに Card を作成、Attachment として返答にセットします。Card を作成する GetCard, その中で天気情報をセットする AddCurrentWeather を以下のように作成します。再度 BOT の動作確認を行います。
何か文字を入力して送信すると、今度は天気予報がカードで返されるのを確認してください。
今度は、Adaptive Cards で複数の Column を持つ形のカードを作成します。
何度か TextBlock と Image を追加する工程があるので、メソッドを作成して再利用できるようにします。
以下のように、RootDialog.cs に AddTextBlock と AddImage を追加します。RootDialog.cs に AddWeather を下記のように追加して、MessageReceivedAsync からの呼び出しを AddCurrentWeather → AddWeather に変更します。再度 BOT の動作確認を行います。
何か文字を入力して送信すると、3日間の天気予報がカードで返されるのを確認してください。
ご参考まで、ここまで作成したアプリはこちらからダウンロードできます
Bot Framework × Adaptive Cards: WeatherBot アプリサンプル次回以降の手順で、Cognitive Services LUIS を用いて、自然言語を判断して回答する BOT に仕立てていきます。
手順 3 まで行って作成できる 天気予報BOT↓



