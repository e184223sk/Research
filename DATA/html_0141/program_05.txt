
/// &lt;summary&gt;有理数を既約分数で表す&lt;/summary&gt;
public readonly struct Fraction : IEquatable&lt;Fraction&gt;, IComparable&lt;Fraction&gt;
{
    /// &lt;summary&gt;分子&lt;/summary&gt;
    private readonly long _numerator;
    /// &lt;summary&gt;分子&lt;/summary&gt;
    public long Numerator =&gt; _numerator;
    /// &lt;summary&gt;分母 - 1 (default を 0/0 ではなく 0/1 にしたい)&lt;/summary&gt;
    private readonly long _denominator;
    /// &lt;summary&gt;分母&lt;/summary&gt;
    public long Denominator =&gt; _denominator + 1;

    public Fraction(long 分子, long 分母)
    {
        var negative = (分子 ^ 分母) &lt; 0;
        分子 = Math.Abs(分子);
        分母 = Math.Abs(分母);
        if (分子 == 0)
        {
            _numerator = 0;
            _denominator = 0;
        }
        else
        {
            var gcd = Gcd(分母, 分子);
            _numerator = 分子 / gcd;
            if (negative)
                _numerator = -_numerator;
            _denominator = 分母 / gcd - 1;
        }
    }

    /// &lt;summary&gt;
    /// 最大公約数をユークリッドの互除法で求める
    /// &lt;/summary&gt;
    public static long Gcd(long a, long b) =&gt; b &gt; a ? Gcd(b, a) : (b == 0 ? a : Gcd(b, a % b));
    public override string ToString() =&gt; $"{Numerator}/{Denominator}";
    public override bool Equals(object obj) =&gt; obj is Fraction f &amp;&amp; Equals(f);
    public bool Equals(Fraction other) =&gt; this._numerator == other._numerator &amp;&amp; this._denominator == other._denominator;
    public override int GetHashCode() =&gt; HashCode.Combine(_numerator, _denominator);

    public static implicit operator Fraction(long x) =&gt; new Fraction(x, 1);

    public static Fraction operator -(Fraction x) =&gt; new Fraction(-x.Numerator, x.Denominator);
    public static Fraction operator +(Fraction x, Fraction y)
    {
        var gcd = Gcd(x.Denominator, y.Denominator);
        var lcm = x.Denominator / gcd * y.Denominator;
        return new Fraction((x.Numerator * y.Denominator + y.Numerator * x.Denominator) / gcd, lcm);
    }
    public static Fraction operator -(Fraction x, Fraction y)
    {
        var gcd = Gcd(x.Denominator, y.Denominator);
        var lcm = x.Denominator / gcd * y.Denominator;
        return new Fraction((x.Numerator * y.Denominator - y.Numerator * x.Denominator) / gcd, lcm);
    }
    public static Fraction operator *(Fraction x, Fraction y) =&gt; new Fraction(x.Numerator * y.Numerator, x.Denominator * y.Denominator);
    public static Fraction operator /(Fraction x, Fraction y) =&gt; new Fraction(x.Numerator * y.Denominator, x.Denominator * y.Numerator);

    public int CompareTo(Fraction other) =&gt; (this.Numerator * other.Denominator).CompareTo(other.Numerator * this.Denominator);
    public static bool operator ==(Fraction x, Fraction y) =&gt; x.Equals(y);
    public static bool operator !=(Fraction x, Fraction y) =&gt; !x.Equals(y);
    public static bool operator &gt;=(Fraction x, Fraction y) =&gt; x.CompareTo(y) &gt;= 0;
    public static bool operator &lt;=(Fraction x, Fraction y) =&gt; x.CompareTo(y) &lt;= 0;
    public static bool operator &gt;(Fraction x, Fraction y) =&gt; x.CompareTo(y) &gt; 0;
    public static bool operator &lt;(Fraction x, Fraction y) =&gt; x.CompareTo(y) &lt; 0;

    public Fraction Inverse() =&gt; new Fraction(Denominator, Numerator);
    public double ToDouble() =&gt; (double)Numerator / Denominator;
}

