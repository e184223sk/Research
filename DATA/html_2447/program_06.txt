
class &lt;Iterator1&gt;d_1 : IEnumerator
{
    int &lt;&gt;1__state;
    object &lt;&gt;2__current;
    IDispose &lt;&gt;7__wrap1;
    void &lt;&gt;m__Finally1() =&gt; &lt;&gt;7__wrap1.Dispose();
    void Dispose =&gt; &lt;&gt;m__Finally1();

    public &lt;Iterator1&gt;d_1(int &lt;&gt;1__state) =&gt; this.&lt;&gt;1__state = &lt;&gt;1__state;
    public object Current =&gt; &lt;&gt;2__current;
    public bool MoveNext()
    {
        bool result;
        switch(&lt;&gt;1__state)
        {
            case 0:
            {
                try
                {
                    &lt;&gt;1__state = -1;
                    &lt;&gt;7__wrap1 = new MemoryStream();
                    &lt;&gt;1__state = -3;
                    &lt;&gt;2__current = 0;
                    &lt;&gt;1__state = 1;
                    result = true;
                }
                catch
                {
                    Dispose();
                }
            }
            case 1:
            {
                try
                {
                    &lt;&gt;1__state = -3;
                    &lt;&gt;m__Finally1(); // -&gt; &lt;&gt;7__wrap1.Dispose()
                    &lt;&gt;7__wrap1 = null;
                    result = false;
                }
                catch
                {
                    Dispose(); // -&gt; &lt;&gt;m__Finally1() -&gt; &lt;&gt;7__wrap1.Dispose()
                }
            }
            default:
            {
                result = false;
            }
        }
        return result;
    }
    public void Reset() =&gt; throw new NotSupportedException();
}

public IEnumerator GetEmumerator() =&gt; new &lt;Iterator1&gt;d_1(0);

