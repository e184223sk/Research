
class &lt;Iterator1&gt;d_1 : IEnumerator
{
    int &lt;&gt;1__state;
    object &lt;&gt;2__current;
    int &lt;i&gt;5__2;
    public string[] args; // 

    public &lt;Iterator1&gt;d_1(int &lt;&gt;1__state) =&gt; this.&lt;&gt;1__state = &lt;&gt;1__state;
    public object Current =&gt; &lt;&gt;2__current;
    public bool MoveNext()
    {
        switch(&lt;&gt;1__state)
        {
            case 0: // 1回目
            {
                &lt;&gt;1__state = -1;
                &lt;i&gt;5__2 = 0;
            }
            case 1: // 2～args.Length回目
            {
                &lt;&gt;1__state = -1;
                &lt;i&gt;5__2++;
                &lt;&gt;1__state = 2
                return true;
            }
            default: // args.Length+1回目以降
            {
                return false;
            }
        }

        if(&lt;i&gt;5__2 &lt; args.Length)
        {
            &lt;&gt;2__current = args[&lt;i&gt;5__2];
            &lt;&gt;1__state = 1;
            return true;
        }
        else
        {
            return false;
        }
    }
    public void Reset() =&gt; throw new NotSupportedException();
}

public IEnumerator GetEmumerator(string[] args)
{
    IEnumerator iterator = new &lt;Iterator1&gt;d_1(0);
    iterator.args = args;
    return iterator;
}

