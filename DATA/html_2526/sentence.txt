More than 1 year has passed since last update.Unityで3D空間にデバッグ用などの簡易的な線を描画する際、GLを使うことが多いかと思われますが、このGLクラスを使うにはOnRenderObjectメソッド内限定であったり、複数カメラがあると重複して描画されたりと簡易的に使うには若干扱いづらい点があります。
Debug.DrawLineなど、Debugクラスにもライン描画機能はありますが、こちらはSceneビューでしか表示されず、実機では扱えません。
そこで、Debug.DrawLineやDebug.DrawRayのように簡単に扱えるものを、GLを使って再現してみました。Unity 2019.2.0f1
IL2CPP
Android適当なSphereなどを2個置いて、_startObjectと_endObjectにそれぞれ突っ込んでください。
そしてカメラをX方向から見たものとZ方向から見たものなど、違う角度から見た2つのカメラを配置し、オブジェクトが重複して描画されるように見てみるとわかりやすいと思います。GLを利用するにはOnRenderObjectが必要なため、専用のGameObjectをSingletonで動作するようにしています。
ただし、外部からはDebug.DrawLineのようにstaticメソッドでアクセスさせたいため、Instanceはprivateにし、外部からは扱えないようにしています。
後はAPIメソッドで指定されたLine情報をListに保持していき、OnRenderObjectのタイミングで一気に描画しています。Updateにて各種リセット処理を行っているため、[DefaultExecutionOrder(-1)]を指定して実行順序未定義のクラスよりも先にUpdateが処理されるようにします。
処理順序がさらに若いクラスでLine描画を行いたい場合はそのクラスよりさらに数値を低くする必要があります。DrawLine、DrawRay共に、position以外はデフォルト引数を指定して省略できるようにしています。
使い方のところにもありますが、個別指定したい場合は「引数名:引数」の形で指定したいものだけを選択できるので大量の引数パターンをオーバーロードするよりはスッキリするかと思います。
オーバーロードの方が分かりやすいんだという方はこんな感じで実装すれば良いかと。
(中身省略)でも面倒ですよね…？cameraを指定すると、そのカメラ以外には映らなくなります。layerMaskを指定すると、そのMaskとカメラのCullingMaskとをAND演算し、結果が0になる場合は表示されなくなります。
逆に言うと、layerMaskで指定されたレイヤーのいずれかがCullingMaskに一つでも含まれている場合は表示されます。
マスクの指定についてはLayerMask.GetMask("Layer名")にて行います。UnityEditor上だと、Sceneビューや、HierarchyでCameraを選択したときにSceneビューの右下辺りに出てくるカメラのプレビュー画面もCameraでの描画として扱われ、その分だけOnRenderObjectが実行されます。Sceneビューのカメラについては Camera.current.cameraType != CameraType.SceneView で判定できるのですが、Camera PreviewだけはCameraType.Previewにはなりませんでした。
Cameraのオブジェクト名が"Preview Camera"になるのでPreviewCameraだということは判定できるのですが、問題は複数選択されている場合です。
Hierarchy上で選択中のどのCameraなのか不明なのです。
そこで選択中のカメラの中から、位置、角度、CullingMaskが一致するカメラを抽出し、その一致したカメラということにして後の判定処理を行っています。
じゃないとAPIでカメラが指定されていた場合に、GameViewにはちゃんと映っているのにPreviewCameraにだけ映らないことになってしまいます。GL使おうとするたびに毎回使い方を忘れてしまって、そのたびに検索するのも億劫だったので改めて作ってみました。
あまり処理負荷などを考慮して作ってはいないので、Debug用途以外で実際のゲームなどに使いたい場合はもう少し工夫した方が良いかと思います。
むしろ実際のゲームにはもう少し複雑なことができるLineRendererなどが良さそうです。


