
private readonly TaskManager m_Manager = new TaskManager();

// 実行中のタスクを表すID
private Guid? m_CurrentTaskId;

/// &lt;summary&gt;
/// 実行します。
/// &lt;/summary&gt;
/// &lt;returns&gt;&lt;/returns&gt;
private async Task RunAsync()
{
    m_CurrentTaskId = Guid.NewGuid();

    try
    {
        await m_Manager.RunWithCancellation(currentTaskId, ExecuteAsync).ConfigureAwait(false);
    }
    finally
    {
        m_CurrentTaskId = null;
    }
}

/// &lt;summary&gt;
/// 実行中のタスクをキャンセルします。
/// &lt;/summary&gt;
private void Cancel()
{
    if (m_CurrentTaskId.HasValue)
    {
        m_Manager.Cancel(m_CurrentTaskId.Value);
    }
}

/// &lt;summary&gt;
/// 実行対象の非同期処理
/// &lt;/summary&gt;
/// &lt;param name="cancellation"&gt;キャンセルトークン&lt;/param&gt;
/// &lt;returns&gt;&lt;/returns&gt;
private Task ExecuteAsync(CancellationToken cancellation = default)
{
    return Task.Delay(1000);
}

