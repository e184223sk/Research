More than 1 year has passed since last update.改行って一言で言っても内部的な改行コードはCr(\r)、Lf(\n)、CrLf(\r\n)の三種類があると言われる。そこで、今回はどの改行コードの場合でも確実に配列(リスト)に分割する方法を調査した。また、同一言語でもsplitメソッドには文字列と正規表現など、複数の実装が存在していることがある。この時の速度を比較して最適な手法を求める。D言語には言語機能で改行で分割するためのメソッドが用意されている。
終端の要素が空欄となる場合は省略される。split単体ではすべての改行コードに対応できないため、replaceと併用する。
splitLinesに比べてかなり遅い。正規表現での分割はさらに遅い。
特別使用したい理由がないのならわざわざ使う必要はないだろう。
一応正規表現の部分を変数に入れてやると誤差程度に速くなる。.NetのSplitは標準では文字(Char型)でしか置き換えの対象を指定することができない。
そのため、Replaceで"\r\n"(vbCrLf)を"\n"(vbLf)に統合しておく。
ちなみにVBの改行用の定数のvbCr/vbLf/vbCrLfは全て型がStringなのでCharとして指定する必要がある。上記のSplitの第2引数にStringSplitOptions.Noneという長ったらしい定数を入れると文字列(String)による分割が使用できる。
ただし、文字列の指定は必ず配列の形で渡さなくてはいけない。
ちなみに速度についてはChar[]での分割と比較しても誤差レベルなのでケースバイケースで使い分けるといいと思う。正規表現版Split。正規表現での分割はかなり遅いので理由がなければあえて使う必要はない。
一応正規表現の部分を変数に入れてやる(new Regex($"\r\n|\n|\r")と誤差程度に速くなる。VB6時代から引き継いでいるVB用のSplit。
単体では複数文字列で分割することはできないのでReplaceを併用する。
記述は簡潔だけど少し遅い。JavaScriptでは初めから正規表現で分割や置換をする方が一般的。
他の言語に比べても正規表現なのになんか爆速で凄い。本来こんなことはあまりやらないけど、replaceを併用してstringでsplit。
replaceを無駄に挟んでいるせいかかなり遅くなっている。PythonにはD言語と同様にsplitlinesという改行類をまとめて置き換えられるメソッドが用意されている。
終端の要素が空欄となる場合は省略される。
インタプリタ言語なのであまり速度は期待していなかったけど、普通に早くて驚いた。
pypy3に至っては今回の比較対象だと最速じゃないかな。
文字列処理にはインタプリタ言語が使用されていることが多いから最適化されているのだろうか。splitでは複数文字列での分割ができないため、replaceで"\n"に統合してから分割。
インタプリタ言語なことを考えるとこれでも破格の速度に見える。正規表現版split。
やはり正規表現はコストが大きい。
特に理由がなければ使わない方が良い。
一応正規表現の部分を変数に入れてやる(re.compile(r"\r\n|\n|\r")と誤差程度に速くなる。HSP3は改行コードが独特で"\n"=CrLfらしい。
strlepで改行コードをlfにまとめてsplitする。CommonLispの言語仕様には文字を分割する関数は存在しないが、
SBCL、ClozureCL等の一部主要なCL処理系にデフォルトでuiopというライブラリが入っている。
この中にsplit相当のstring-split関数とreplace相当のfrob-substrings関数が含まれているので
これで改行コードを置換して分割する。
速度としてはかなり遅いが、用途によっては気にならないだろう。文字列処理は言語による速度の影響を受けにくいというのは新たな収穫でした。
特にNode.jsの正規表現がめっちゃ優秀とかpypy3の最適化も凄い、とかCPython3は遅くないとか。GitHubWindows10(x64)
以下略


