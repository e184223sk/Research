
using System;
using System.Collections.Generic;
using System.Linq;

namespace TowerOfHanoi {
    class HanoiView : System.IObserver&lt;HanoiState&gt; {
        // 初期状態時にもOnNextが呼ばれるので0ではなく、-1にしておく。
        private int count = -1;

        // IObserver&lt;T&gt; インターフェース
        public void OnCompleted() {
            Console.WriteLine($"\n{count}手で移動完了");
        }

        // IObserver&lt;T&gt; インターフェース
        public void OnError(Exception error) {
            Console.WriteLine("{0]", error.Message);
        }

        // IObserver&lt;T&gt; インターフェース
        public void OnNext(HanoiState value) {
            count++;
            DisplayState(value);
        }

        private void DisplayState(HanoiState value) {
            var t1 = TowerToString(value.Number, value.StickA);
            var t2 = TowerToString(value.Number, value.StickB);
            var t3 = TowerToString(value.Number, value.StickC);
            for (int i = 0; i &lt; t1.Length; i++) {
                Console.WriteLine($"{t1[i]} {t2[i]} {t3[i]}");
            }
            Console.WriteLine();
        }

        private string[] TowerToString(int n, IEnumerable&lt;int&gt; tower) {
            // 塔の下から組み立てる　
            // 幅2の円盤だけがあるときは、tower は、{ 2 } となり、Count() == 1 になので注意する。
            var rewot = tower.Reverse().ToArray();
            var list = new List&lt;char[]&gt;();
            for (var i = 0; i &lt; n; i++) {
                var w = i &lt; rewot.Length ? rewot[i] : 0;
                var s = new string(' ', n - w) + new string('=', w * 2 + 1) + new string(' ', n - w);
                list.Add(s.ToArray());
            }
            list.Add(new string(' ', n * 2 + 1).ToArray());
            foreach (var floor in list) {
                floor[n] = '|';
            }
            // 最後に逆転させる。1階が配列の一番最後に来るようにする。
            return list.Select(f =&gt; new string(f)).Reverse().ToArray();
        }
    }
}

