More than 1 year has passed since last update.ハノイの塔のルールは以下の通りです。これらのルールに従い、すべての円盤を一番右の棒に移動させることができれば完成です。どのようにしてこれを解くか、ちょっと考えてみましょう。棒は左から順にA,B,Cと呼ぶことにします。Aには、n枚の円盤が積み上げられているとします。
円盤は、半径の小さな順に、円盤1,円盤2,円盤3,円盤4,...円盤nと呼ぶことにします。それでは、もしAにある上からn-1枚をBに移動できたとしましょう、そうすれば、Aにある一番大きな円盤nをCに移動し、Bに積んである円盤（n-1枚)すべてをCに移動できれば、完成できることになります。今度は、「もし、n-1枚をBに移動できたとしましょう」というところに注目します。
n-1枚をAからBに移動するのは、以下のようにすればできますね。(1) n-2枚の円盤をAからCに何らかの方法で移動します。
 (2) 円盤n-1をBに移動します。
 (3) Cに移動したn-2枚の円盤を何らかの方法でBに移動します。これを最初n枚すべての移動に当てはめてみると、(1) n-1枚の円盤をAからBに何らかの方法で移動します。
 (2) 円盤nをCに移動します。
 (3) Bに移動したn-1枚の円盤を何らかの方法でCに移動します。と書けます。枚数と移動元、移動先が異なるだけで同じような処理です。
つまり、(1)から(3)までの処理を n枚、n-1枚、n-2枚、n-3枚とどこまでも再帰的にくりかえしていきます。そうすると、最後は、1枚の移動にたどり着くわけですが、この１枚の移動は問題なく行えますから、これですべての円盤が移動できることになります。再帰的処理に慣れていないと、なんだか狐につままれたような説明かもしれませんね。ここで、最初のn枚の円盤を右端に移動する処理を以下のように定義してみます。aからcに移動するわけですが、bも作業域として利用しますので、引数にはbも指定しておきます。
Move(n,a,b,c)の中の処理は、このMoveを使うと、手順で示した先ほどの(1)の処理「n-1枚の円盤をAからBに何らかの方法で移動します」は、と書けます。(3)の処理「Bに移動したn-1枚の円盤を何らかの方法でCに移動します」は、と書けます。ここまでくれば、Moveを擬似コードで書くことができますね。これをC#で書いてみます。a,b,cは、一番上に積んである円盤の出し入れしかできませんので、データ構造としては、Stackが適当です。
変数名は、a、b、cではなく、s1,s2,s3としています。ここでは、Consoleアプリで実装していますが、HanoiSolverクラスは、コンソールアプリに依存していないで、GUIアプリでも利用できると思います。表示を担当する機能は、すべてHanoiViewクラスに記述しています。なお、HanoiSolverクラスはIObservableを実装していて、HanoiViewクラスはIObserverを実装していますから、HanoiViewクラスは、移動する途中経過を知ることができます。n == 3 の時の実行結果この記事は、Gushwell's C# Programming Pageで公開したものをに大幅に加筆・修正したものです。


