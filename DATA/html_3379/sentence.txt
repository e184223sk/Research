More than 1 year has passed since last update.本記事では、.csはUnityC#を表し、.shaderはshaderlabsを表すことを前提とします。通常、私たちは角度を表すときに 180° のように度数法で表すことが多いですが、三角関数ではこれとは別に弧度法で角度を表現するのが一般的です。
本記事でも弧度法を普通に扱っていくので、内容に入る前に紹介していこうと思います。視点としては、一周をどのように定義しているだろうか？という部分に着目していきます。
度数法では、一周を$360°$として角度を表現し、単位に「°」を用います。
反対に弧度法は、一周を$2\pi$として角度を表現し、単位に「ラジアン」を用いる表現方法です。[^1]
なので関係式としては、同じ一周という部分に着目しているので、という関係式が導けます。
なので、もし本記事を読んでいて弧度法で何度か分からない時は最後の式を活用してもらえればと思います。
例えば、$30°$は何ラジアンなのかを計算するとこのようになります。ちなみに、コードで表すと次のようになります。三角関数自体は次のように定義されていますが、CG屋には必要ないため興味ある人だけ見るといいと思います。
正式な定義




と定め、それぞれ一般角$theta$の、正弦、余弦、正接と言う。
これらはどれも$\theta$の関数であり、まとめて三角関数という。
(もういちど読む数研の高校数学 より）
定義自体は長いですが、簡潔にまとめると以下のようになります。これをまとめて三角関数と呼びます。（$x,y,r,\theta$は下図や定義内参照）
三角関数自体の定義はこうなっていますが、CGの世界では$r=1$で扱うことが非常に多いです。
（なぜなら、角度の度合いしか考えないため、長さは必要ないと考えることが多いから）
なので、$r=1$とすると、定義はこのように変えれます。こうすると凄いシンプルに考えれますね。（補足）
感の良い人なら分かると思いますが、$\tan\theta$は直線の傾きを表します。
この性質は、CG屋でよく使う話なので覚えておくと良いでしょう。
上図を例にして、原点と点Pの傾きを考えてみます。
例



直線の傾きは

(直線の傾き)=\dfrac{(yの変化量)}{(xの変化量)}


なので、上図の直線OPの傾きはとなりますが、これは$\tan\theta$と同じ値ですね。
なので、ここからも$\tan\theta$は直線の傾きを示すことがわかると思います。

基本的に、三角関数の値は計算機を使わない限りほとんどわからないです。
しかし、有名角[^2]のみは知られている($\tan\frac{\pi}{2}$を除く)のでそれを紹介します。
そして、以降は弧度法で角度を書きます。このように有名角は値が知られているので、それを組み合わせてあらゆる角度に対する値を計算します。
しかし、どのように計算するのか。
三角関数にはこれらを解決するための公式がたくさんあります。ここからは、こんな公式があるというのを紹介していくので、こんな公式があるんだ程度に見てください。
また、実際に角度変換する際としての参照先として使ってくれるとありがたいです。$\sin\theta,\cos\theta,\tan\theta$には次のような関係があります。特に、$\sin^2\theta+\cos^2\theta=1$は非常によく使うので、覚えておくと良いでしょう。
少し解説すると、一番目は、$\tan\theta$の定義であり、二番目は定義の図の斜辺の求め方であり、三番目は二番目の式の両辺を$\cos^2\theta$で割ると出てきます。下図のように三角形ABCがあり、三角形の外で接する外接円の半径をRとすると、以下のような関係が成り立ちます。この定理は外接円とも絡むため、CG屋としての出番はそんなにないかもしれないです。
角度同士の関係を導く際には使うかもしれません。
ちなみにこれをコードにすると以下の通りとなります。下図のような三角形ABCにおいて、以下のような関係が成り立ちます。こっちのほうがかなりCG屋としても使うことが多いでしょう。
（辺の長さを求めるのに便利なため）
ちなみに余弦定理をコードで書くと次のようになります。三角関数を扱う上で以下の式は非常に重要な式となっています。
コード上では、任意の角度でコンピュータが計算してくれるので必要ないですが、論理を考える際には切っても切れない関係式です。と言っても、覚えておくのは一番目と三番目だけで十分ですよ。
（他は符号を変えるだけなため）倍角の公式は加法定理を変形して作ります。
（具体的には、$α$と$β$を共に$\theta$とする。）
コード上では、任意の角度でコンピュータが計算してくれるので必要ないですが、同じく論理を考える際に出てくるでしょうね。
結果としては以下の通りです。一方で、半角の公式は倍角の公式を移項して作ります。
結果としては、以下の通りです。和積の公式も、加法定理を四則演算して作られます。
この公式、意外と便利なので論理を考える際に使うこともしばしば。
和積の公式は以下の通りです。ここまで理解しておけば、三角関数分野としては申し分ないはずです。
きっと、どのコードを見ても三角関数部分は基礎で詰まることはないでしょう。三角関数を実際どのように応用するかについていくつか紹介します。逆三角関数とは、三角関数の逆関数の総称のことを言います。
逆関数については、このサイトが良いでしょう。
実際に、簡易的な定義としては以下の通りです。UnityC#だと、ASin, Acos, Atan, Atan2であり、shaderlabsだとasin, acos, atan, atan2という組み込み関数が逆三角関数にあたります。極座標変換とは、x軸とy軸が直交する直交座標系を角度と長さで表す極座標系に変換すること言います。
極座標の良い所として、曲線的な動きが得意という強みがあるのでたびたび使われます。
では、実際に数学的に見てみましょう。
直交座標系での点Pの座標を(x,y)とし、同地点に対応する極座標系の座標を(r,$\theta$)とします。

このとき、x,yとr,$\theta$の関係は以下の通りとなります。これの応用例として、uvの極座標変換があるので、コードを載せておきます。さらに気になる方はこの記事を読んで見ると良いでしょう。
本質的な部分が多いので、理解すると非常に面白いと思います。
https://qiita.com/drken/items/41b4ec6bde794cbcd0f6次（ベクトル編）：https://qiita.com/hatuxes/items/c7b88a32e0a60ddd3e69
[^1]: 弧度法自体の定義はここでは必要としないため割愛した。
[^2]: 0°,30°,45°,60°,90°,...のような三角形によく出てくる角度のこと


