More than 1 year has passed since last update.ゲームのプレイデータの保存を、Userクラスに集約して、jsonにして保存するやり方。生徒向け。
※クラスのカプセル化については割愛
2020/5/21 カプセル化したパターンも追記例で想定する仕様は、クエストごとにプレイデータが存在するってかんじ。
ユーザーに保存する予定の構造を以下と想定する。新規でUser.cs、QuestResult.csを作成する。
Unityで.csファイルを作成した時に最初から書いてあるやつは邪魔だから全部消してよし。
MonoBehaviourは継承させない。新規でGameManager.csを作成し、中身を下記のように編集する。CreateEmptyで空のGameObjectを作成してGameManager.csをくっつけると、
Inspectorでこのように表示されるはず。
この記事が分かりやすかった気がするので読んで。
https://qiita.com/SotaSuzuki/items/c3b46c4e24c1ca9b4d37UnityでJsonを扱う場合は、JsonUtilityっていう便利なクラスが用意されてます。GameManager.csで、スペースキーを押したらUserデータをjsonにしてコンソールに出してみる、
んだけど、データになんか入ってたほうがおもしろいと思うのでちょっといれてみよう。
GameManager.csを編集実行してSpaceキーを押してConsoleを見てみるとこんな感じになってるはず
ちなみにこの文字列を展開してあげるとこんな感じjsonを展開してみる方法はたくさんあるけどwebサービスでもあるのでリンク乗っけとく。
コンソールに出てきたやつをコピペすれば展開してくれる。
http://www.ctrlshift.net/jsonprettyprinter/じゃあ、レベルがあがったら保存する。っていうふうにしてみるか。
とりあえずスペースキー押したらレベルアップにしとくね。とりあえず。GameManager.csを編集これで再生時に読み込み → スペースキーでレベルアップして保存ができてることが
Inspectorで確認できると思う。
逆に現状はInspectorでしか確認できないからTextやらに表示させたり、
nicknameをInputFieldで編集したりしたらいいと思います。想定仕様は察してください。
GameManagerは葬ります。外部からの使用例はこんなかんじ。書いてて思ったけどexpを受け取ってlevelは直接あげないほうが良かったね
まぁ仕様書いてないしねレベルアップしたときにUnityEventでOnLevelUpとか仕込んでいきたいね。
気が向いたら更新します。


