More than 3 years have passed since last update.普段UI周り触らない(触れない)人がUI関連触ってみましたシリーズ。
まさかの2回め。1回めはこちら
UI上の長い文字列の扱いを考えてみる・独自のボタンコンポーネント単体で連打、同時押し対策をしたい
・そしたら押したときにフラグを立て　そのフラグが立っている時は押しても処理しないにしてみよう
・そのフラグはstaticにしておけば他の独自ボタンコンポーネントも動作しない
・ボタンを押したコールバックは非同期処理も出来てそれが終わってからフラグを折るようにすれば処理待ちもできるかなみたいなのを作ろうと思って何も考えずに引数にコルーチンわたして
動いた　やったぜ！とか喜んだのですが、IEnumaratorは再利用出来ないから2回め以降動かないっていう・・・。「どうせだからあんまりよく知らないasyn awaitでやってみよう」と思ったのが発端です。適当にIEnumaratorを引数に処理の前後にフラグ操作を入れるのでそれをボタンのリスナーに登録3秒待たせる
みたいなので登録したりする感じこれでボタン押す→ボタンが押せなくなる→通信待つ→結果処理してからボタン有効化
みたいな流れができる
予定だった1回めは良かったんだけどね・・・まずはasync/awaitをそもそも理解してなかったので
https://www.slideshare.net/UnityTechnologiesJapan/unite-tokyo-2018asyncawait
完全に理解する理解した気になる！引数を変更ボタンのリスナーへの登録をasyncにしてawait onClick の前後にフラグ操作を入れるとりあえず3秒待つそういうボタンを生成する。
それとなく動いた！とりあえずこれでボタン内部で処理待ちできるようになったわけですが
リソース読み込みとかで処理待つときってyield returnで待つこと多いですよね(しない？)で　このボタンの登録方法だとリソースの読み込みとかで完了を待つ場合みたいに　すごく　その　アレ　な感じになってしまうのが悩み
UniRxだとWaitWhileとかもawaitできたりするんですが
宗教上の理由で導入出来ないときとかは・・・
しかもTaskはWebGLで動かないので別途考えないと行けなかったり・・・うーん
Await可能リソース読み込み作るかぁ・・・。プロジェクトによってボタンの同時押し制御とかが結構違ったことしてたりするんだけど
どれもメリットもあればデメリットもある
そしてデメリットはどれも重かったりする・・・一般的に同時、連打対策ってどうやるのが良いのかねぇ
今回はボタン自体にフラグ持たせてみたけどEventSystem使うほうが良いのかな？
個別に無効にする場合ならinteractableをfalseにするとかでもいいかなって思ったけども・・・作業者にUIの有効無効制御をわざわざ書かせるとだいたい設定、解除忘れしてたりするからなぁ
個人的にそのへんはシステム側が汲み取っておいてあげたいところ。


