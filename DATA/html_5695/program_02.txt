
using System;
using System.Collections.Generic;

/// &lt;summary&gt;
///     Listの拡張クラス
/// &lt;/summary&gt;
public static class ListExtension
{
    //=================================================================================
    //ループ取得
    //=================================================================================

    /// &lt;summary&gt;
    ///     指定したインデックスの値を範囲外参照せずに繰り返しで返す
    /// &lt;/summary&gt;
    public static T GetLoopElementAt&lt;T&gt;(this IList&lt;T&gt; list, int index)
    {
        if (list.Count == 0) throw new ArgumentException("要素数が0のためアクセスできません");

        // 分配
        index %= list.Count;

        // 正の値にずらす
        if (index &lt; 0)
            index += list.Count;

        var target = list[index];

        return target;
    }

    /// &lt;summary&gt;
    ///     指定したインデックスの値を範囲外参照せずに繰り返しで参照し，代入する
    /// &lt;/summary&gt;
    public static void SetLoopElementAt&lt;T&gt;(this IList&lt;T&gt; list, int index, T value)
    {
        if (list.Count == 0) throw new ArgumentException("要素数が0のためアクセスできません");

        // 分配
        index %= list.Count;

        // 正の値にずらす
        if (index &lt; 0)
            index += list.Count;

        list[index] = value;
    }

    /// &lt;summary&gt;
    ///     ループリストに変換
    /// &lt;/summary&gt;
    public static LoopList&lt;T&gt; ToLoopList&lt;T&gt;(this IList&lt;T&gt; list)
    {
        return new LoopList&lt;T&gt;(list);
    }
}


/// &lt;summary&gt;
///     指定したインデックスの値を繰り返しで参照する
/// &lt;/summary&gt;
public class LoopList&lt;T&gt;
{
    private readonly IList&lt;T&gt; _list;

    public LoopList(IList&lt;T&gt; list)
    {
        _list = list;
    }

    public T this[int index]
    {
        get { return _list.GetLoopElementAt(index); }
        set { _list.SetLoopElementAt(index, value); }
    }

    /// &lt;summary&gt;
    ///     IListに変換
    /// &lt;/summary&gt;
    public IList&lt;T&gt; ToIList()
    {
        return _list;
    }
}

