GoFのデザインパターンの1つであるFactory Methodパターンを体験してみました。Factory Methodパターンについての説明は以下の記事がとても分かりやすかったです。FactoryMethodの説明と構成要素は上記記事より引用させていただいています。インスタンス化したいオブジェクト(製品)を実行時の条件によって決めたい場合に利用します。
Factory Methodパターンはオブジェクト(製品)を生成する側と利用する側に分けて定義する必要があります。
分けておくことで、将来システムに起こりえる変更をあらかじめ分離でき保守性を保つことができます。構成要素は以下です。Product : 生成されるオブジェクト(製品)のAPIを定義する抽象クラス。製品の具象クラスが抽象クラスで使用できるようにする
ConcreteProduct : 生成される具象製品クラス
Creator : ファクトリメソッドを除く製品を操作するAPI抽象クラスを定義する抽象クラス
ConcreteCreator : ファクトリメソッドを実装し、実際に製品を作成するクラス以下にサンプルコードを記載します。
構成要素は以下になります。Product: Productクラス
ConcreteProduct: SQLServerクラス, PostgreSQLクラス
Creator: Creatorクラス
ConcreteCreator: DBCreatorクラス最初に引用させていただいた説明にて、「インスタンス化したいオブジェクト(製品)を実行時の条件によって決めたい場合に利用します。」とありましたが、確かに上記のサンプルコードだとDBCreatorのコンストラクタ引数によってインスタンス化したいクラスが簡単に切り替えることが可能ですね。インスタンス化の切り替えについてはMainメソッド内で条件分岐したら同じことができるんじゃない？とも思いましたが、こちらの方が機能を分離できていますし、あちらこちらでnewしてConcreteProductを生成する必要性もなさそうなので良さそうです。
あちらこちらでnewして作っていた場合、仮に元のクラスでコンストラクタ引数を渡すような変更が起きた時にnewしている全部の箇所に引数を追加しないといけませんが、Factory Methodパターンを使っていたらConcreteCreator(上記のサンプルならDBCreatorクラス)だけ直せば良さそうというところも気に入りました。


