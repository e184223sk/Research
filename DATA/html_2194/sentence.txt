More than 1 year has passed since last update.この記事は C# Advent Calendar 2019 の19日目です。
前回は wasimaruさんによるASP.NET Core / ASP.NET Web API 2 Owin で Web API の自動テスト環境を整えるでした。Xamarin.Androidを用いてスマホアプリを制作し、バックエンドに Azure Functions を採用することで全てをC#で完結させました。
今回書き留めるのは、はこだてローカル勉強会"ゆるはこ"での登壇内容＋αです。
登壇の際に用いたスライドはこちら(All C#なモバイル開発. / All C # Mobile Development.)構成はこんな感じ(スライドより)
地元にあるハンバーガーショップ「ラッキーピエロ」の特売情報をストレージから自動で出してくれるアプリ「ラピナビ」を制作しました。
個人開発で遊んでみたかっただけなので、一般公開はしていません。UIも実用性重視で、凝ったものではありません。僕の住んでいる地域、北海道函館市には「ラッキーピエロ」という有名なハンバーガーショップがあります。テレビなどの媒体でよく紹介されているようなので、もしかするとご存じの方もいらっしゃるかもしれません。このお店はよく割引キャンペーンなどを行うのですが、その情報をしっかりと捉えるのが結構大変なんです。
具体的には実施店舗が違ったり、対象商品が違ったり、実施期間が限られているなどなど…キャンペーンに乗っかって最高の立ち回りをするためには覚えることが多いです。そこで！情報をまとめたスマホアプリを作ってやろうという、自分による自分のためのアプリ開発を始めることにしました。自分はC#が大好きなので、どうせならすべての処理にC#を採用してやろうと考えました。今回のスマホアプリ化に必要な機能は以下の通りうん、これくらいなら簡単な実装でなんとかなりそうだ。いろいろ考えた結果、特別割引日の情報を格納するストレージと、特別割引日の情報を送信するサーバが必要だと考えました。「そういえば Azure に簡単にWebAPIを立てられるサービスがあったな」と考え、Azure Functionsにたどり着きます。
Azure Functions は Microsoftが提供するクラウドサービスです。
最近流行りのサーバーレスアーキテクチャを採用しています。従量課金制を採用しており、僕のような個人の開発者でも気軽に使用することができます。
（そして結構安かったりする）またクラウドサービスであるため、オンプレミスほどサーバー管理を気にすることがなく気持ちよく開発を進めることができます。使用言語はC#,Java,JavaScript,Pythonなどから選ぶことが可能です。
もちろん今回の開発ではC#を採用しました。特別割引日かどうかをサーバーから情報を受け取り判断するこの機能を実現するには割引日の情報をサーバーに保存しておく必要があります。
そこで、DBのような働きをしてくれるのがこの Azure Table Storage です。Azure Table Storage の作成とアクセスにはWindowsの場合 Microsoft Azure Storage Explorerが便利です。
Microsoft Azure Storage Explorerをインストールし、Table Storageを作成して、必要な特別割引情報を次の画像のようにぶち込みます。

これでデータ側の準備はできました。次はこのデータを吐き出すAPIの部分です。今回データの受け渡しにはJSONを用いますので、Azure FunctionsでJSONを吐き出すAPIを作成します。
プロジェクトの作成はとっても簡単。VisualStudioで「新しいプロジェクトの作成」で作成できます。

プロジェクトを作成したら、Azure Table Storageを使用するために"Microsoft.Azure.Webjobs.Extensions.Storage" を,JSON形式のデータを扱うために"Json.NET(Newtonsoft.Json)"をNuGetで導入します。

そして、Azure Functions特有の記法でプログラムを記述。内容は"POSTリクエストが送信されたときに、DBに入っている全ての要素をJSON化して送信する"というものです。また、Azure FunctionsとAzure Table Storageのバインドはちょっとコツがあります。以下の文献を読むことをおすすめします。Azure Functions における Azure Table Storage のバインド - GitHub - MicrosoftDocs/azure-docs.ja-jpコードを記述していくに当たり多くの日本語記事で"Iqueryable"を使用するものが見受けられますが、Azure Functions V2からこの記法はできなくなっていました。Functions v2: Can't bind Table to type System.Linq.IQueryable - GitHubこの情報は公式ドキュメントにも記述されていますので、公式ドキュメントを読む方ならそこまで詰まることはないと思います。(自分は精読せずに時間を捨ててしまった(公式ドキュメントはちゃんと読もう))実際に起動してみるとAzure Functionsのマークが出てきて、おおっ！となります。
Hello Azure Functions. pic.twitter.com/bK6ZUcpBUkバックエンド側はオッケーです。フロント側はXamarin.Androidを用いてモバイル側を実装します。
そのために、「新しいプロジェクト」から「Androidアプリ(Xamarin)」を選択してプロジェクトを立てます。
画面はデザイナーやXamlファイルをよしなに編集してやって作成していきます。

ListViewを設置して、Listに格納したデータから情報を表示させる算段です。JSON形式のデータを扱うために"Json.NET(Newtonsoft.Json)"をNuGetで導入します。ここではボタンをクリックされたときに更新処理を行うようにしてあげたいので、お得意の"FindCiewById"をしてあげた後にイベントハンドラを与えます。本当はC＃でよく用いられる Dictionary型を用いたかったのですが、この型だとうまくいきませんでした(JavaList &lt; IDictionary&lt; string, object&gt;&gt;()へのキャストでExceptionを吐いてしまいます)。
そこで、データ構造にはJavaListを採用することにしました。Httpリクエストを送ってAzure Functions からJSONデータを受け取りますJSON.NETを用いているので、デシリアライズも簡単で快適です。そんなこんなでデータを受け取り、JavaListに格納することに成功しました。あとはJavaListの内容をListViewに表示させるだけです。こうして全てがC#製の自分用モバイルアプリの作成に成功しました。今回紹介した全てがC#な開発事例、
そしてこれらの知見がどこかの誰かの役に立てば幸いです。次回のアドベントカレンダーは mei_9961 さんです！


