More than 1 year has passed since last update.こんにちは、個人ゲーム開発がすきな@yoship1639です。
普段は自作エンジンですがUnityにも手を出しています。皆様、自分のゲームのカメラワークが安っぽくて絶望したことはありませんでしょうか。
絶望はしなくても、もっと良いカメラワークにしたいと思う人も多いのではないかと思います。しかし、調べても中々出てこないし大体Cinemachineの記事が引っかかるのではないかと思います。
※ちなみに筆者はCinemachine使ったことありませんそこで、比較的簡単にカメラワークの質を劇的に向上する3つの手法を技術解説し、その素晴らしさに気が付いてもらえたらと思います。とりあえず、見ていただければどの程度違うのか分かります。再掲) 久々にUnity触って高品質な追従型カメラワークを作ってみた。左が作ったやつ、右が普通のやつです。Lerp移動減衰, PerlinNoise手ブレ, FoV変動を駆使しています。カメラワークの違いだけでも大分雰囲気が変わります。 pic.twitter.com/kuxDGG0faDカメラワークの処理が異なるだけでこれだけ見た目に差が出てきます。カメラワークを工夫するだけで安っぽさが無くなるので、ぜひ試してみてください。それでは、実際にどの様な手法をとっているのか見てみましょう。カメラワークの質を比較的簡単に上げる3つの手法は「Lerp減衰・FoV変動・PerlinNoise手ブレ」です。Lerp減衰は、線形補間とフレーム間の差分時間を使った減衰手法で、カメラの移動や方向転換がとても滑らかになる手法です。普通のカメラワークはプレイヤ位置にぴったり張り付いてしまうので移動している感が感じにくいのですが、この手法を使うと移動している感が簡単に得られるようになります。そして、この手法はカメラワーク以外にも様々な場面で利用できるので覚えていて絶対損は無いと断言致します。FoV変動とは、何のこともない、FoV(Field of View)の値を変動させているだけです。例えば、レースゲームで加速する時にいかにも加速している感を演出するためにFoV値を上げたりします。逆に、隠密系のゲームでは隠密時にFoVを下げて視界を狭くしていかにもこそこそ動いている感を出します。この様に、プレイヤの状況に合わせてFoV値を変動させるだけでもカメラワークの質は向上します。最後に、PerlinNoise手ブレです。これは、人間がいかにも手でカメラを持って撮影しているかの様な演出を醸し出すシネマチックなカメラワークを作るのに必須の手法です。PerlinNoiseはMinecraftの地形生成などにも使われたりする優れもののノイズです。実はこの手ブレ、Unityだととても簡単に作れてしまいます。なぜなら、すでにPerlinNoise関数がMathfに標準実装されているからです。ご存知でしたか？これらの３つの手法をカメラワークに組み込むだけで、とても簡単にカメラワークの質を向上させる事が可能です。それでは、実際にこれらの手法を実装してみたいと思います。
今回は分かりやすくするために、キャラクタの移動をX軸固定にしたキャラクタコントローラとカメラワークを作ります。このコードについては特に説明は必要ないと思います。
ただ左右に移動出来てジャンプできるだけです。まず最初にLerp減衰を実装します。これを実現するには、本来到達すべき値と実際の現在の値の二つを用意します。
カメラワークで言うと、本来到達しているべきカメラ位置と現在のカメラ位置です。注目すべき処理はここですtransform.positionは現在のカメラ位置を表しています。
posは本来到達しているべきカメラ位置です。
Vector3.Lerpの第３引数を0に近づけるとtransform.positionに、1に近づけるとposになります。線形補間のVector3バージョンです。Lerp減衰は、第３引数にフレーム間の差分時間であるTime.deltaTimeを使います。
Time.deltaTimeはたかだか1/60.0f程度の値しかないので、この線形補間の結果は限りなく元の値のtransform.positionになります。しかし、Updateは1秒間に何度も呼ばれます。そのため、ほんの少しづつだけど本来到達しているべきカメラ位置posに滑らかに近づいていくのです。これがLerp減衰です。AttenRateの値を変えると滑らかさがゆっくりになったり早くなったりします。今回はカメラの移動のみにLerp減衰を適用していますが、プレイヤーの移動やカメラ向きなどにも応用できるため、あらゆる場面で活躍します。是非試してみてください。次に、FoV変動を実装してみます。これはとても簡単で、Camera.fieldOfViewの値をキャラクタの移動に合わせてLerp減衰で変えるだけです。コードは下記のようになります。これも先ほどのLerp減衰をfieldOfViewに適用させただけのコードです。プレイヤが移動している時にFoV値を上げ、立ち止まっている時にFoV値を下げています。これだけ短くても侮ることなかれ、カメラワークの質はしっかり向上します。最後に、手ブレを実現する手法であるパーリンノイズ(PerlinNoise)をカメラに適用させます。このパーリンノイズの詳細は
パーリンノイズを理解する：https://postd.cc/understanding-perlin-noise
スクリプトリファレンス：https://docs.unity3d.com/ja/2017.4/ScriptReference/Mathf.PerlinNoise.html
などをご覧になって下さい。今回は、プレイヤが移動している時は手ブレが大きく、移動していないときは手ブレが小さくなるようにコーディングしました。Mathf.PerlinNoiseを呼ぶだけで簡単にノイズを手に入れることができるのでとても楽ですね。PerlinNoiseでそれぞれ、X,Y,Z方向のカメラの向きのずれを生成します。このずれ(ノイズ)が手ブレになります。引数のtは経過時間を渡すだけで大丈夫です。tの倍率を変えるとノイズが早くなったり遅くなったりします。次に注目するべきは、Quaternion.Slerpです。これは球面線形補間と言って回転の線形補間に使われるLerpです。カメラの手ブレも、SLerp減衰で滑らかにすることで、さらにシネマチックなカメラワークを実現しています。これですべての手法を紹介し終えました。最後にこれらをすべてまとめ、少し手を加えたコードを載せます。Enable系でLerp減衰、FoV変動、PerlinNoise手ブレをON,OFF可能です。先ほどのプレイヤコントローラと合わせて確認してみてください。きっと質の高いカメラワークが実現できているはずです。多大な反響ありがとうございます。嬉しい限りです。
お礼を込めて、改良して3D移動に対応させたバージョンも作りました。
ただ、ノイズ部分にバグがあるのかパラメータ設定によってはカクツキが出てしまうようです。。。パラメータ設定にはお気を付けくださいぜひご利用ください！ゲームの質を上げるカメラワークの3手法として、Lerp減衰、FoV変動、PerlinNoise手ブレを紹介・解説・実装しました。これにより、比較的簡単に追従型のカメラワークの質を劇的に向上させることが出来る様になりました。この手の手法を紹介している記事がなかなか見つからなかったため記事にした次第です。皆様のゲーム制作の役に立つことを期待しています！


