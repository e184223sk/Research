More than 1 year has passed since last update.Windows上でちょっとした処理をさせたい場合、バッチファイルやPowerShellを利用するのが一般的かと思いますが、バッチファイルにはそこまで精通していなく、かつ柔軟度は必ずしも高くないですし、PowerShellは（Linuxコマンドと等価なものもあるので多少触れますが）まだ覚えていません。C#はたまに書いているのでC#で書きたくなるのですが、わざわざ開発環境でビルドするまではしたくなく、自分の端末・環境でロジックは書いて準備し、本番環境のセットアップに持ち込み、そこで、ちょっと修正もできるようにしたいなぁと思って、こんなものを考えてみました。（本番環境にVisualStudioをインストールなどはしない、というのも考慮しています）.NET Fiddleとか、別の記事に書いてあります【初心者向け】Online完結！Web開発環境クッキングレシピ[ver 2019.11]-その１の Gitpod、その他同等のものを利用したほうがよいです。こちらに置いてあります。
CSBuildRun
もうすぐお別れのWindows7、そこから現役のWindows10まで、.NET Runtimeは標準搭載です。自分のWindows端末であれば、
C:\Windows\Microsoft.NET\Framework64\v4.0.30319
ここに C#のコンパイラ（csc.exe)が普通に含まれています。csc.exe XXX.csとすることで、C#コードをコンパイルすることができます。C#ファイルとバッチファイル、configファイルで構成されています。Bootstrap.batを実行します。初めにどの.Netを利用するか尋ねられます。番号を選択します次にビルドするタイプ（コマンドライン、GUI、管理者権限昇格の有無）を問われるので、番号を選択します。これでBuildAndRun.exeが生成されます。
Bootstrap.batにPlease select build typeを０と答えていれば、実行するとと表示されていると思います。実際にはなにかスクリプト的に処理を実施させたいので、Main.csの下記部分を変更してみます。再度BuildAndRun.exeを実行すれば、日付出力に変わったはずです。試しに、System.Console.WriteLine(DateTime.Now.ToString());の最後のセミコロンを削除してBuildAndRun.exeを実行するとと怒られるはずです。
コードをカスタマイズして、依存するアセンブリがある場合、BuildAndRun.exe.configのAssemblyRefsを任意に編集してください。ただ、.NET 2.0しか入っていないシステムではこれは使えないので、今回記事の方式だと対応できる　（バイナリは一切持ち込まない、ともいえる）XCOPYで動くならばインストールではないので、良いかもしれないです。


