using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Octokit;

namespace DensoCreate.Lakewood.Extensions.GitHubIntegration.Services
{
    /// &lt;summary&gt;
    /// GitHub Issueを取得・追加するために必要なサービスを提供するクラス
    /// &lt;/summary&gt;
    public class GithubService
    {
        /// &lt;summary&gt;
        /// Github Issueを取得する
        /// &lt;/summary&gt;
        /// &lt;param name="settings"&gt;GitHubにアクセスするためのトークン、
        /// Issueを取得するリポジトリを指定するための情報(リポジトリのオーナー名とリポジトリ名)&lt;/param&gt;
        /// &lt;returns&gt;GitHub Issueのリスト&lt;/returns&gt;
        public async Task&lt;List&lt;Issue&gt;&gt; GetIssues(GitHubExtensionSettings settings)
        {
            // 接続情報の設定
            var tokenAuth = new Credentials(settings.Token);
            var client = new GitHubClient(new ProductHeaderValue("lr")) {Credentials = tokenAuth};

            // GitHub Issueの取得
            var gitHubIssues = new List&lt;Issue&gt;();
            var issuesAsync = await client.Issue.GetAllForRepository(settings.Owner, settings.Repository);
            gitHubIssues = issuesAsync.ToList();

            return gitHubIssues
        }

        /// &lt;summary&gt;
        /// Github IssueにIssueを追加する
        /// &lt;/summary&gt;
        /// &lt;param name="settings"&gt;GitHubにアクセスするためのトークン、
        /// Issueを取得するリポジトリを指定するための情報(リポジトリのオーナー名とリポジトリ名)&lt;/param&gt;
        /// &lt;param name="issueTitle"&gt;Issueのタイトル&lt;/param&gt;
        /// &lt;param name="issueBody"&gt;Issueの本文&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public async Task AddIssue(GitHubExtensionSettings settings, string issueTitle, string issueBody)
        {
            // 接続情報の設定
            var tokenAuth = new Credentials(settings.Token);
            var client = new GitHubClient(new ProductHeaderValue(settings.Owner)) {Credentials = tokenAuth};

            // Issueを作成し、本文を設定
            var createIssue = new NewIssue(issueTitle);
            createIssue.Body = issueBody;

            // Issueを追加
            var newIssue = await client.Issue.Create(settings.Owner, settings.Repository, createIssue);
        }
    }
}



