More than 1 year has passed since last update.本記事は、GitHub APIとのやり取りを簡単にするためのライブラリであるOctokitを使用して得た知見をまとめることを目的としています。はじめに、GitHubにアクセスするためのトークンが必要なので作成します。
詳しいやり方はこちらがわかりやすいので参考にしてください。
なお、GitHubで作成したトークンは忘れてしまうと後で見ることができないので、使用するまではどこかに控えておいた方がいいです。
続いて、OctokitをNugetパッケージからインストールします。インストール先のプロジェクトをVisualStudio上で右クリックして、[NuGetパッケージの管理]をクリックします。参照タブを選択して[Octokit]と検索ボックスに入力すると先頭に出るので、画面右側のインストールボタンを押してインストールします。
準備ができました。以下がGitHub Issueの取得・追加している実際のコードです。たった数行書くだけで簡単にできてしまいます。順番に解説したいと思います。GitHubにアクセスするにはOctokitのGitHubClientのオブジェクトを作成する必要があります。GitHubClientのコンストラクタ引数にアプリケーション名を入れたProductHeaderValueオブジェクトを渡すことでGitHubへの接続が可能になります。
ただし、プライベートリポジトリへのアクセスやIssueの追加などをする場合にはユーザー認証が必要になるので、GitHubClientオブジェクトに認証情報(OctokitのCredentialsオブジェクト)を渡してやる必要があります。以上で、GitHub Issueへのアクセスが可能になりました。
続いて、GitHub Issueの取得について説明します。
Octokitのデータ取得、追加、更新の各メソッドは全て非同期になっているので、それを前提にコード書く必要があります。GitHubClientオブジェクトのIssueのGetAllForRepositoryメソッドで引数にリポジトリのオーナーとリポジトリ名を指定することで、すべてのIssueを取得することができます。また、 RepositoryIssueRequestオブジェクトをGetAllForRepositoryメソッドの引数に指定することで取得するIssueにフィルタをかけることもできます。以下の例はOpenなIssueかつ特定のユーザーが Assignee に指定されているものを取得しています。最後に、GitHub Issueへの追加について説明します。
NewIssueオブジェクトのコンストラクタ引数にタイトル、Bodyに本文を設定することができます。なお、タイトルは必ず設定する必要があります。他にもAssignee、MileStoneやLabelを設定できます。ただし、MileStoneとLabelに関しては、あらかじめリポジトリ内に存在する必要があります。
GitHubClientオブジェクトのIssueのCreateメソッドにリポジトリのオーナー名、リポジトリ名、NewIssueオブジェクトを渡すことでIssueを追加できます。今回はIssueの取得・追加を簡単にまとめてみました。すごく簡単にGitHubへアクセスできるので、興味のある方は是非お試しください。Githubへのコミットなどまだまだできることはありますので、色々試してみてください！https://github.com/octokit/octokit.net
https://octokitnet.readthedocs.io/en/latest/issues/


