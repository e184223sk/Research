More than 1 year has passed since last update.この物語はいつもLinuxでC書いてるプログラマが急にC#の案件を振られ、勉強のためいろいろコードを書いていたら、なんとなくオブジェクト指向がわかった気になる過程を淡々と描くものです。間違ってるかもしれないので過度な期待はしないでください。端々にCとの比較が出てきますが、Cの入門書をちょっとでもかじっていれば問題ないと思います。これはあくまでも自分がオブジェクト指向という考え方を勉強し、納得する過程をなぞったものであり、厳密な定義とは異なる解釈をしている場合があります。オブジェクト指向言語触るの初めて(´・ω・｀)ふむふむ。なんとなくJavaとかC++でclassなんとかって書いてあるの見た気がする。namespace？まあ、キーワード名からして#ifndef __MYLIB_H__って書かなくても変数名とか関数名が衝突しないようにするためのものかな。コンパイルして実行。別にVisual Studioからでもいいけど、Vim大好きだから。Vim大好きだから！おーけーおーけー変数作って、配列作って、forでa[]の全要素にアクセスしてる。a.Lengthはオブジェクト指向っぽい書き方だな。ん？int i;はCと同じ書き方なのにnew int[5]ってなんだ？Microsoftのドキュメントを開く。→ 共通型システム
C#の型は値型と参照型に大きく分けられる、と。参照型？難しそうな言葉出てきた Oo(´・ω・｀)要は、値型は数字の型とstructで定義されたもので、参照型はclassで定義されたもの、と。structで定義される構造体はCでも勝手にメモリーが割り当てられる。classは自分でメモリーをnewで割り当てる必要がある。malloc()のC#版がnewか。しかもガーベッジコレクションが勝手に不要になったメモリー回収するからfree()不要。（Cも構造体の中にポインターがあってmallocするとかは一旦忘れて）つまりあれか、参照型はCのポインターみたいなもんか！色んな人に怒られそうなザックリ理解(´∀｀；)厳密には違います。int型はSystem.Int32のエイリアス（別名）でしかなく、stringもSystem.Stringのエイリアスです。C#では源泉を辿っていくとすべてのクラスはSystem.Objectの派生になっています。正確には値型はSystem.ValueTypeを継承するクラス、参照型はそれ以外にSystem.Objectクラスから脈々と派生してできたクラス。SuperText t = new SuperText();はさっき調べたように、クラスだからnewでインスタンスを作る。Console.ReadLine()はCのscanf()みたいなやつ。Console.WriteLine()はprintf()みたいなやつ。s = t.AddWorld();はSuperTextクラスのAddWorld()を呼び出してるんだな？見に行くぞ。public string AddWorld(string s) {は文字列型の引数を取って、外部からアクセスできるようにpublicになってる関数（C#ではメソッドと言う）だな。privateと書くと他のクラスから使えなくなる。Cではファイル単位でやっていたアクセス制限をC#ではクラスと言う単位でやってる。あれ？オブジェクト指向って確か、データとそれを操作するメソッドを合わせたものじゃなかったっけ？string sがボッチになっとる。つまり、SuperTextクラスにstring sとAddWorld()の両方を入れればいい。今度はSuperTextクラスの中にデータを保存するstring strとそれを操作するAddWorld()メソッドとGetResult()メソッドがある。これで、文字列strにはprivate修飾子がついているので、他のクラスが逆立ちしても直接strの値を操作することができない。これがカプセル化（または隠蔽）というやつか。Cでもグローバル変数を使わず、きっちりとファイルスコープで変数とそれをイジれる関数を管理すればいいんだけどね。メンドイよね。クラスを使うとそれがサクッと出来ちゃう。これがオブジェクト指向なのか。納得。(*ﾟ∀ﾟ)C#には他にもインターフェイスやタプルやラムダ式やジェネリックやいろいろな概念が出てきます。一見して難解な概念でもそれはただ学習者を苦しめるためのものではなく、何かしらプログラミングを楽にするためもの。言語の勉強で行き詰まってしまったら「この概念があるとどんないいことがあるのかな」と考えてみましょう。で、どこが25行なのかというと、最後のソースhello4.csです。


