これは自分がラムダ式に出会った頃に受けた印象を元に書いた戯言的な記事です。
ちょっと雑な文章ですがご勘弁を、、、例えば、こんなコードを見かけたことがあるだろう。このコードがやっていることは、使われているトークンや式を見て何となく想像がつく。x.Price &gt;= 100 は、価格が100円以上だろうとわかる。
その式がWhereのカッコで囲まれていることから、SQL文を書いたことがあれば絞り込みを行うんだろうなと想像がつく。価格が100円以上の食べ物foodsのデータ絞り込みを行い、.FirstOrDefault();FirstOrDefaultの言葉どうりに先頭データを得ていると想像できる。
ただひとつ腑に落ちないことがある。それがxである。x.Priceとある。メンバを抱えているようだ。

xにドットを打つとIntelliSenseでリストが現れる。その中にPriceが見える。
このコードの前後の文は後述するが、xは後にも先にもこのカッコ内にしか現れない。xはどこから来たのか？突然、挨拶もなく現れた。=&gt;もよくわからない。大なりイコール&gt;=ではないな。見た目は右向き矢印だ。何となく左側のxが=&gt;で右側に送り込まれて仕事をしている風に見える。xよ、お前は何者だ？この文をVB.NETで書き換えたらどうなるか。以下のとおりである。C#より何をやってるかが分かりやすい。Function(x)は誰が見てもxを引数にとった関数である。その右隣はC#と一緒の式だ。2つの言語により書き方は違えど、Whereのカッコ内はいずれも「ラムダ式」である。
ラムダ式とは、無名関数のことで、C#では=&gt; の左辺が引数、右辺が実装(多くは単一の式)となっている。
VB.NETのラムダ式は、Function(x)とあるので誰が見たって関数だとわかる。通常のVB.NETの関数定義の場合、Function 関数名(x)となるが、無名なので関数名が省略されている。C#に至ってはFunctionすら無い。引数xがあるのみである。ドットを打つとIntelliSenseのリストが現れるところから、何か実態が存在するかのように勘違いをしてしまうが、xは単なる関数の引数である。
xは何でもいい。yでも、zでも、argでも、foodのfでもよい。関数を自作するとき、引数名を自分好みに勝手に宣言するのは当たり前のことだ。Whereは、foodsのデータ型であるList&lt;T&gt;クラスの拡張メソッドである。拡張メソッドとは、雑に説明するとクラスそのものの実装を変えることなく後付けされたメソッドのことである。(ここでは詳しい説明を省略する)Whereの引数は、シグネチャ(宣言構文)の定められたラムダ式である。ラムダ式なら何でも受け入れるということでは当然ない。
ラムダ式の左辺、xの型は定められている。List&lt;food&gt;の一つ一つ、foodクラスである。「うどん」であり「もやし」であり「さんま」であり「たまご」である。
IntelliSenseのリストにPriceが現れたのは型が定められているからだ。
右辺は引数xに関するユーザーが評価したいbool型を返す式である。foodsの全てのアイテムについて引数xを使って評価が行われる。想像するにWhereの中でfoodsがループで回され、そのループの中で右辺の式が使われているのだろう。
リスト内の全アイテムに対して自分が求める条件にあったアイテムだけを抽出することができる。様々な条件を指定できる。クラスをロジックで抽出できる。何という賢い仕組みだろう！で、上の例でxから得たhogeの中身は「さんま」である。
「さんま」は120円か。今年(2020年)はそんなに安く買えないな、、、


