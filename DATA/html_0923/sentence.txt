More than 1 year has passed since last update.【Blazor入門】Blazor初心者がログインからチャット機能まで付けてデプロイしてみた ～その1～
【Blazor入門】Blazor初心者がログインからチャット機能まで付けてデプロイしてみた ～その2～
【Blazor入門】Blazor初心者がログインからチャット機能まで付けてデプロイしてみた ～その3～の続きです。前回は、Cognitoを使用して登録されているユーザーでないとログインできないようにしました。
これだとまだ、とある問題を抱えていますが、その前に今回はログイン情報の保持をさせるようにしたいと思います。多くのサービスは以下の様な処理でログイン情報を保持しているかと思います。
今回はこの方式に則って、機能追加をしていこうと思います。
出典：セキュリティ対策はばっちり？ セッションとCookieの違いとPHPでの使い方をご紹介！結構調べてはみたんですが、今の所クッキーを扱う情報について見当たりませんでした。.NET MVC CoreなどではHTTPContextを通すことによりセッションやクッキーを扱う事が出来ましたが、Controllerクラスからでないと扱う事が出来ません。それはBlazorでも同じなようですが、今のソリューションにControllerクラスを追加するというのはいささか変（というか、それってBlazorにとってどういう意味があるの？）と思ったので別の方法を考えてみました。別の方法としては、JavaScriptでクッキーを扱うしかないと思いました。Blazorのよさを損なうような感じがしますがここはしょうがない。実装してみましょう。_Host.cshtmlファイルにWriteCookieメソッド・ReadCookieメソッドを追加します。ここでReadCookieメソッドはクッキー全体ではなく連想配列などで返したかったんですが、配列を生成するだけでUnHundled Errorとなってしまったので泣く泣くこうしています。配列を返す方法があれば教えてください。新しく、Serviceフォルダ・CookieServiceクラスを追加しました。
というのも、クッキー操作をしたいのは特定のページだけでない可能性があると考えたからです。複数回インスタンス生成するようなクラスでもないですし、DIでどのページでも使いまわせるようにしましょう、という粋な計らいです。
コードは以下の通りです。IJSRuntimeクラスのInvokeAsyncメソッドに対して、先ほど宣言したJavaScriptのメソッド名や引数を渡してあげるだけで実行ができます。かんたんかんたん。あとはDIできるように、StartupクラスのConfigureServicesメソッドにCookieServiceクラスをScopedで追加してあげるだけでおｋです。と、実装は非常に簡単に見えますが、この処理に辿り着くまでにかなり時間が掛かりました。ハマりポイントは2点あります。①サービスクラスへのDIはコンストラクタインジェクションしかできない
これまでは何となくInject属性を付けていればサービスに対してDI出来ていましたが、それはrazorファイルやrazor.csファイルだったから、だそうです。それについては以下のページに記載があります。
サービスでDIを使用するなのでこのCookieServiceクラスではコンストラクタインジェクションを行ってIJSRuntimeクラスへの注入をしています。仮に、プロパティでIJSRuntimeクラスを宣言しInject属性を付けたとしてもnullのままで値は何も入ってきません。②サービスクラスでデフォルトサービスをDIさせたい場合はデフォルトサービスの有効期間に合わせてサービスを追加する
ちょっと何を言っているか分からない人が多くなってきてそうなので丁寧めに説明します。サービスクラスというのは、今回作ろうとしているCookieServiceクラスのことです。
デフォルトサービスというのは、以下の3つのサービスの事を指します。最初から使えるサービス達ですね。今回、私はサーバーサイドでソリューションを作成しています。
また、デフォルトサービスであるIJSRuntimeクラスを使用したいと考えています。
上記の画像を見てみればわかりますが、サーバーサイドではIJSRuntimeクラスの有効期間は「スコープ」となっています。
なので以下の様に、CookieServiceクラスを「スコープ」で追加しています。ここを合わせる必要があると分かっていなかったので最初はシングルトンで追加していました。そうすると以下のようなエラーが出力されました。InvalidOperationException: Cannot consume scoped service 'Microsoft.JSInterop.IJSRuntime' from singleton 'LoginTest.Service.CookieService'.
(InvalidOperationException：シングルトン「LoginTest.Service.CookieService」からスコープサービス「Microsoft.JSInterop.IJSRuntime」を使用できません。)サービスの有効期間についての説明はいかの通りです。スコープはサーバーサイドにしかない有効期間なのですね。
クッキーやローカルストレージを利用して、ログイン情報を保持します。また。ログイン情報が保存されているのであれば自動的にチャットページへルーティングしてあげましょう。まずはNuGetからBlazored.LocalStorageをインストールします。
このライブラリを使用することにより、非常に簡単にローカルストレージを使用することができます。ローカルストレージであればブラウザを閉じたり別タブでも保存している情報が引き継げるので今回はローカルストレージを使用します。

出典：JavaScriptのsessionStorageの使い方を現役エンジニアが解説【初心者向け】改めて、以下の図を思い出してみましょう。
ユーザーがページに訪れた際に行うべき処理は次の通りです。クッキーにセッションIDが保存されていなければ作成し、ログイン成功時にローカルストレージへセッションIDをキーとしてログイン情報を保持させるようにすればよい、ということになります。HTTPContextが使えないので、セッションIDはNewGuidで代用しています。
以下の処理で上記の1～5の処理が実装出来ました。また、Validationのチェックにかからず正しいユーザーでログインできた場合にはローカルストレージへログイン情報を追加してあげれば完了です。この間にクッキーが削除されている可能性があるので、念の為にクッキーへの書き込み処理を追加しています。ログイン画面がちらっと見えてしまいますが、すぐにチャットページへルーティングされることが確認できます。
ログイン画面が見えてしまうのは恐らく、OnAfterRenderAsyncメソッドでルーティングしているせいだと考えています。しかし、OnBeforeRenderメソッドはありません。ただプルリクエストがあったので、今後は使えるようになることでしょう。
OnBeforeRender #1716これまでの記事ではフルC#でしたが、クッキーを扱う為にJavaScriptを使うハメになってしまいました。恐らく今後は、こういったC#以外の部分はライブラリが出てくると思うのでそれに期待したいと思います。次回は、認証をしなくてもチャットページへルーティング出来てしまう問題を解決したいと思います。参考にさせていただいたページ


