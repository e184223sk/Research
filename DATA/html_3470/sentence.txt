More than 1 year has passed since last update.C#のRxライブラリのSubjectクラスを使ってみる自己学習用サンプルです。Windiws 10
Visual Studio Express 2017 for Windows DesktopReactive Extensions (Rx) for .NET ver.4.2.0混乱するので、名前や処理の流れをまとめます。SubjectObserverIObservableIObserver名前が紛らわしいですが、Observer と Observable を併せ持ったオブジェクトです。Observableのように Subscribe でき、かつObserverのように OnNext OnError OnComplete できます。これを使っていきたいと思います。以下のようなテスト用ソースファイルがあります。やっていることはフレームを回して指定したフレーム数で指定した処理を1回だけ行いたいということです。これを gcc prog.c -Wall -Wextra -std=gnu11 で
コンパイル＆実行すると結果はとなります。想定したフレームで処理されているようです。CheckFrame関数が使いにくそうです。フラグ用のビットインデックスを渡す実装なのも間違えそうです。
あとは行いたい処理を読むのが順次探す必要がありそうです。上記のテストソースをC#でSubjectを使い、書き直してみます。指定したフレームでの処理をAction型で別にしています。
7と11でSubscribeを2回設定しているのが気になりますが、Where が (f == 7)||(f == 11)にできないためこうなってしまいました。（テストソースではありえませんが、フレームが飛ぶ場合を考慮して）
Takeは処理を1回だけ通すためにいれてあります。 コンストラクタで処理を登録してMove()でイベント通知OnNextをしています。
実行結果はとなりました。FinalizeとFrame = 16の表示順序が違いますが、想定したフレームで処理されているようです。フレーム数と処理が分離されてるが、Subscribe登録が同じような処理で見にくい。
DistinctUntilChangedの効果がわかりにくい。Subjectクラスの動作がObserverパターンを元に考えると分かりにくい気がします。
Subjectクラス系にはAsyncSubjectクラスやReplaySubjectクラスといった種類があるようです。これらもいずれ使っていきたいと思います。


