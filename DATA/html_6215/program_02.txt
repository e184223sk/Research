
    public class ExplorerStyleTreeView_Behavior : Behavior&lt;TreeView&gt;
    {

        #region Command添付プロパティ
        public ICommand Command
        {
            get { return (ICommand)GetValue(CommandProperty); }
            set { SetValue(CommandProperty, value); }
        }

        // Using a DependencyProperty as the backing store for Message.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty CommandProperty =
            DependencyProperty.Register("Command", typeof(ICommand), typeof(ExplorerStyleTreeView_Behavior), new PropertyMetadata(null));
        #endregion

        protected override void OnAttached()
        {
            this.AssociatedObject.MouseDoubleClick += this.ItemDoubleClicked;
        }

        protected override void OnDetaching()
        {
            this.AssociatedObject.MouseDoubleClick -= this.ItemDoubleClicked;
        }

        /// &lt;summary&gt;
        /// DoubleClick時、DoubleClickした場所がTreeViewの選択したItem内であればCommandを実行する
        /// &lt;/summary&gt;
        /// &lt;param name="sender"&gt;&lt;/param&gt;
        /// &lt;param name="e"&gt;&lt;/param&gt;
        private void ItemDoubleClicked(object sender, MouseButtonEventArgs e)
        {
            var treeView = e.Source as TreeView;
            if (treeView == null) return;
            var mousePosition = e.GetPosition(treeView);
            var selectedItem = treeView.SelectedItem as BaseNode;
            if (selectedItem == null) return;
            if (selectedItem._Info is DirectoryInfo) return;
            //選択中Itemの始点設定
            var selectedItemStartingPoint = (Point)(selectedItem.PointToScreen(new Point(0.0d, 0.0d)) - treeView.PointToScreen(new Point(0.0d, 0.0d)));
            //選択中Itemの終点設定
            var selectedItemEndPoint = new Point(selectedItemStartingPoint.X + selectedItem.ActualWidth, selectedItemStartingPoint.Y + selectedItem.ActualHeight);
            //選択中のItem内でダブルクリックが発生したならCommand実行
            if (inRange(mousePosition, selectedItemStartingPoint, selectedItemEndPoint))
            {
                Command.Execute(treeView);
            }
        }

        /// &lt;summary&gt;
        /// targetPointがstartingPointからendPointまでの範囲にあるかを判定する
        /// &lt;/summary&gt;
        /// &lt;param name="targetPoint"&gt;判定対象のPoint&lt;/param&gt;
        /// &lt;param name="startingPoint"&gt;始点&lt;/param&gt;
        /// &lt;param name="endPoint"&gt;終点&lt;/param&gt;
        /// &lt;returns&gt;bool&lt;/returns&gt;
        private bool inRange(Point targetPoint, Point startingPoint, Point endPoint)
        {
            var x = targetPoint.X;
            var y = targetPoint.Y;
            if (startingPoint.X &lt;= x &amp;&amp; startingPoint.Y &lt;= y &amp;&amp; x &lt;= endPoint.X &amp;&amp; y &lt;= endPoint.Y)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
    }

