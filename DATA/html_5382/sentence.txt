More than 3 years have passed since last update.WPFでViewModel⇔View間でデータを変換する際にはIValueConverterを継承したConverterを定義することがよくあります。
しかしこのIValueConverterは特定の型間の変換に用いることがほとんどなのにもかかわらず、
object型で入出力するので書きづらいしエラーにも気づきづらいです。そこで、Generic型を使用した汎用抽象Converterクラス経由で継承することでこの問題を解決します。題材とするデモアプリの実行結果です。
起動時に青い背景のTextBlockに長い文字列があり見切れています。
下のIsTrimをチェックすると文字列の見切れている部分が...と表示されます。
IsTrimの代わりにその下のIsWrappをチェックすると文字列が折り返して表示されます。
デモアプリのコードです。
MainWindowは主に以下の３つで構成されています。本題となるBoolToTextTrimmingConverterとBoolToTextWrappingConverterについては後で述べます。ViewModelは以下の2つ上記Viewで使われていたBoolToTextTrimmingConverterのコードが以下です。BoolをTextTrimming（文字列が収まらないときに...を最後に表示するかの指定）に変換しています。
ここでは以下の問題があります。Generic型を使用して汎用の抽象Converterクラスを使用します。IValueConverterのメソッドからGeneric型を使用した別のメソッドに変換します
変換前後がobject型だったのが別々のGeneric型になります。これを継承した具象クラスです。
退屈なキャストは終わっており、変換する双方の型が明示されているので、書きやすいです。さらに書きやすくするため、このGenericConverterを継承したConverterクラスのコードスニペットを使用します。
GenericConverter.snippet -GitHubショートカットはgconvです。
変換元と変換先の型を入力すると自動でConverterクラスのスケルトンを作成します。
クラス名も ソース型Toターゲット型Converterになります。
ついでによく使う名前空間（System.Windows等）をUsingに追加します。コードスニペットの使用動画
こんな風にリズムよくコーディングができて楽しい！VisualStudio2017
.NET Framework 4.7
C#7.1


