C#のWindows フォーム アプリケーションにはDataGridViewという便利なコントロールがあります。
下のように、行と列からなる表を表現するコントロールです。
本記事で紹介する実行画面は次の環境のものです。DataGridViewのプロパティのおすすめ設定は次のとおりです。


DataGridViewのセルの指定方法はいくつかあります。DataGridView関連でよく使用するプロパティの例を挙げます。DataGridViewには、「バインド」という機能があります。
この機能は、オブジェクトのデータを簡単にコントロールに反映する便利な機能です。
バインドを行うには、DataGridViewに次のように指定します。DataGridViewにオブジェクトをバインドするにはDataTableなどいくつか方法がありますが、今回はカスタムクラスを使用した方法をご紹介します。System.Windows.Forms名前空間にはBindingSourceというクラスがありますが、そのままだとソートを行うことができません。そのため、次のリンクにあるSortableBindingListクラスを作成してください。https://garafu.blogspot.com/2016/09/cs-sorablebindinglist.htmlカスタムクラスを使用するには、共通で使用できる基底クラスがあると便利です。
コードの例を次に挙げます。実は、カスタムクラスといっても、プロパティに値をセットしてもすぐにはDataGridViewに反映されません。
そのため、DataGridViewに通知をする仕組みが必要です。
その仕組みが、INotifyPropertyChangedインターフェイス・PropertyChangedイベント・OnPropertyChangedメソッドです。
PropertyChangedイベントをプロパティ名を指定して実行すれば、DataGridViewに通知され、表示が反映されるという仕組みになっています。先述で紹介したカスタムクラスの基底クラスを継承して実装します。
各プロパティがDataGridViewの列の１つに紐付けされます。カスタムクラスをバインドしても、列にどのプロパティを適用するかわからないため、そのままでは表示することができません。
そのため、バインドするプロパティを設定する必要があります。

デザイナ画面のDataGridViewの右上の三角をクリックして、「DataGridView タスク」を開き、「列の編集…」を開きます。

DataPropertyNameプロパティに表示対象のプロパティ名を設定し、OKを押します。先ほど紹介したSortableBindingListはListクラスとほぼ同じように（一部使えないメソッドもありますが）追加・挿入・削除・クリア操作ができます。コードの例を次に挙げます。整数を入力する場合、単純にカスタムクラスのプロパティの型を整数にしてしまうと、文字列にしたときにエラーが発生してしまいます。
それを防ぐためのコードの例を挙げます。カスタムクラスの基底クラスの例にある上のコードは派生クラスのプロパティのsetで呼び出します。実はDataGridViewでデータを入力すると、プロパティのsetが呼び出されます。
その性質を利用して、文字列で入力したものを整数に変換できるか確かめて、変換出来たら整数として格納し、空文字列の場合はnullを格納し（null許容型でフィールド変数を作成）、文字が入力されていたら格納しないようにします。
また、そのままではデータの表示が反映されないため、OnPropertyChangedメソッドを呼び出してPropertyChangedイベントを発生させます。DataGridViewのカスタムクラスでは直接色を紐付けすることはできません。
ただし、工夫次第でカスタムクラスで色をコントロールすることができます。背景色を変更するコードの例を挙げます。DataGridViewにはCellFormattingというイベントがあります。
そのイベントを使用して、上のようにプロパティを設定すると背景色を変更できます。
文字色を変更する場合は、ForeColorプロパティを使用します。少しトリッキーな方法ですが、Timerクラスを利用する方法があります。
一定間隔でTickイベントを発生させて、エラーチェックをし、エラーの場合はエラーアイコンとメッセージを表示させます。コードの例を次に挙げます。ただし、重い処理やデータベースにアクセスするような処理はTimerイベントに記述することは望ましくないでしょう。カスタムクラスを使用すればリストを選択すると子リストも変わる処理を簡単に実装することができます。まず最初に親リストのカスタムクラスを作成します。注目すべき点は、親リストのカスタムクラスにバインドリスト（SortableBindingList）がある点です。
このバインドリストの使い方は後述で述べます。次に、子リストのカスタムクラスを作成します。フォーム上では、最初にDataGridViewに次のようにプロパティに設定します。DataGridViewにはセルの選択変更時に発生するSelectionChangedというイベントがあります。
親リストのセルを選択変更したときにこのバインドリストを子リストのデータソースに設定します。DataGridViewのカスタムクラスは「クラス」なので、いろいろな処理を実装することができます。メソッドを追加して計算処理をしたり、文字列の加工処理をしたり、型の変換処理をすることもできます。
また、入力に不備がないかチェックするメソッドを実装することもできます。本記事では色を挙げましたが、画像（Imageクラスなど）などいろいろ格納することができます。バインドにカスタムクラスを使用すれば、実装の可能性が広がります。いろいろ試行錯誤をして、DataGridViewを使用した実装をしてみてはいかがでしょうか？最後までお読みいただきありがとうございました。


