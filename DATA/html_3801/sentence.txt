More than 1 year has passed since last update.PUN2RxPUN2のコールバックをUniRXのOperatorに変換します。
MITです。PUN2のイベントはコールバックとして伝えられます。それぞれのイベントは独立ではないので、順序立ててハンドリングする必要があります。UniRxのオペレーターとして扱うことでイベントのハンドリングが簡単になります。
また、PUN2のイベントコールバックを受け取るにはMonoBehaviourPunCallbacksを継承するか、各interfaceを継承する必要があります。PUN2Rxを使うことで基底クラスを自由に変更できます。最も重要な点として、通常イベントのオペレータはOnNext、エラーのオペレータはOnErrorのみを通知します。これによって、ひとつのSubscribeで正常系とエラーのハンドリングが可能です。dotnet-callbacksPUN2のコールバックのうち、PUN2Rxが対応しているコールバックは以下の通りです。
OnNextのみを通知するのかOnErrorのみを通知するのか。
OnNextで何が流れてくるのか、も記載されています。IPunOwnershipCallbacks.OnOwnershipTransfered
PUN1からですが1、これ多分Typoです。
「Transfer r ed」
PUN2をバージョンアップした際にエラーが出たら適宜修正してください。IConnectionCallbacks.OnDisconnectedはこれだけなぜか正常イベントとエラーイベントをひとつのコールバックで返してきやがるので、エラーオペレータとして扱いたい場合は例のようにSelectで変換して使ってください。むちゃくちゃしてますが他の手段が思いつかない。試作したあとも探してたんですが、なかったので結局自分で作りました。UniRxとPUN2を併用してるプロジェクトなんていくらでもありそうですが……謎。とりあえず自分が欲しい分は作ったので、自分は満足しております。
Taskには対応してません。いまいちいい実装が思いつかないのと、あんまり自分が必要としてないので。
nullチェックのあたりをif文に書き換えれば.NET 4.6は必須じゃなくなるんですが、「PUN2とUniRX導入しといて4.6にしてない奴はおらんやろ……」という独断と偏見によってそのままにしてます。書き直すのめんどくさい。あと#ifdefはよくわからないなので定義してないです。
README.mdは最初あたりGoogle翻訳でがんばってたんですが、めんどくさかったのでもうフィーリングで書いてます。まあプログラマなら英語読まなくてもコード読めばわかるでしょう。
RaiseEventに関してはRER/RESを使ってください2。
最近仕事でドキュメントとか一切作ってなかったので、説明を書くのが一番疲れました。おしまい。誰も使ってないから誰も気づいてないのでは……？　ownership周りの使い所がわからん。 ↩結局みんな使い方がよくわからないらしいので意地になっている。 ↩


