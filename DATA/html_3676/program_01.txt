
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

[assembly: CompilationRelaxations(8)]
[assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)]
[assembly: Debuggable(DebuggableAttribute.DebuggingModes.Default | DebuggableAttribute.DebuggingModes.DisableOptimizations | DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints | DebuggableAttribute.DebuggingModes.EnableEditAndContinue)]
[assembly: SecurityPermission(SecurityAction.RequestMinimum, SkipVerification = true)]
[assembly: AssemblyVersion("0.0.0.0")]
[module: UnverifiableCode]
[CompilerGenerated]
[DebuggerDisplay("\\{ squared = {squared}, cubed = {cubed} }", Type = "&lt;Anonymous Type&gt;")]
internal sealed class &lt;&gt;f__AnonymousType0&lt;&lt;squared&gt;j__TPar, &lt;cubed&gt;j__TPar&gt;
{
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly &lt;squared&gt;j__TPar &lt;squared&gt;i__Field;

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly &lt;cubed&gt;j__TPar &lt;cubed&gt;i__Field;

    public &lt;squared&gt;j__TPar squared =&gt; &lt;squared&gt;i__Field;

    public &lt;cubed&gt;j__TPar cubed =&gt; &lt;cubed&gt;i__Field;

    [DebuggerHidden]
    public &lt;&gt;f__AnonymousType0(&lt;squared&gt;j__TPar squared, &lt;cubed&gt;j__TPar cubed)
    {
        &lt;squared&gt;i__Field = squared;
        &lt;cubed&gt;i__Field = cubed;
    }

    [DebuggerHidden]
    public override bool Equals(object value)
    {
        &lt;&gt;f__AnonymousType0&lt;&lt;squared&gt;j__TPar, &lt;cubed&gt;j__TPar&gt; anon = value as &lt;&gt;f__AnonymousType0&lt;&lt;squared&gt;j__TPar, &lt;cubed&gt;j__TPar&gt;;
        return anon != null &amp;&amp; EqualityComparer&lt;&lt;squared&gt;j__TPar&gt;.Default.Equals(&lt;squared&gt;i__Field, anon.&lt;squared&gt;i__Field) &amp;&amp; EqualityComparer&lt;&lt;cubed&gt;j__TPar&gt;.Default.Equals(&lt;cubed&gt;i__Field, anon.&lt;cubed&gt;i__Field);
    }

    [DebuggerHidden]
    public override int GetHashCode()
    {
        return (405075540 * -1521134295 + EqualityComparer&lt;&lt;squared&gt;j__TPar&gt;.Default.GetHashCode(&lt;squared&gt;i__Field)) * -1521134295 + EqualityComparer&lt;&lt;cubed&gt;j__TPar&gt;.Default.GetHashCode(&lt;cubed&gt;i__Field);
    }

    [DebuggerHidden]
    public override string ToString()
    {
        object[] obj = new object[2];
        &lt;squared&gt;j__TPar val = &lt;squared&gt;i__Field;
        ref &lt;squared&gt;j__TPar reference = ref val;
        &lt;squared&gt;j__TPar val2 = default(&lt;squared&gt;j__TPar);
        object obj2;
        if (val2 == null)
        {
            val2 = reference;
            reference = ref val2;
            if (val2 == null)
            {
                obj2 = null;
                goto IL_0046;
            }
        }
        obj2 = reference.ToString();
        goto IL_0046;
        IL_0046:
        obj[0] = obj2;
        &lt;cubed&gt;j__TPar val3 = &lt;cubed&gt;i__Field;
        ref &lt;cubed&gt;j__TPar reference2 = ref val3;
        &lt;cubed&gt;j__TPar val4 = default(&lt;cubed&gt;j__TPar);
        object obj3;
        if (val4 == null)
        {
            val4 = reference2;
            reference2 = ref val4;
            if (val4 == null)
            {
                obj3 = null;
                goto IL_0081;
            }
        }
        obj3 = reference2.ToString();
        goto IL_0081;
        IL_0081:
        obj[1] = obj3;
        return string.Format(null, "{{ squared = {0}, cubed = {1} }}", obj);
    }
}
public class Person
{
    [CompilerGenerated]
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly string &lt;FirstName&gt;k__BackingField;

    [CompilerGenerated]
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private readonly string &lt;LastName&gt;k__BackingField;

    public string FirstName
    {
        [CompilerGenerated]
        get
        {
            return &lt;FirstName&gt;k__BackingField;
        }
    }

    public string LastName
    {
        [CompilerGenerated]
        get
        {
            return &lt;LastName&gt;k__BackingField;
        }
    }

    public Person(string firstName, string lastName)
    {
        &lt;FirstName&gt;k__BackingField = firstName;
        &lt;LastName&gt;k__BackingField = lastName;
    }
}
public class Program
{
    [Serializable]
    [CompilerGenerated]
    private sealed class &lt;&gt;c
    {
        public static readonly &lt;&gt;c &lt;&gt;9 = new &lt;&gt;c();

        public static Func&lt;int, &lt;&gt;f__AnonymousType0&lt;int, int&gt;&gt; &lt;&gt;9__0_0;

        internal &lt;&gt;f__AnonymousType0&lt;int, int&gt; &lt;Main&gt;b__0_0(int it)
        {
            return new &lt;&gt;f__AnonymousType0&lt;int, int&gt;(it * it, it * it * it);
        }
    }

    [CompilerGenerated]
    private sealed class &lt;Yield&gt;d__1 : IEnumerable&lt;int&gt;, IEnumerable, IEnumerator&lt;int&gt;, IDisposable, IEnumerator
    {
        private int &lt;&gt;1__state;

        private int &lt;&gt;2__current;

        private int &lt;&gt;l__initialThreadId;

        int IEnumerator&lt;int&gt;.Current
        {
            [DebuggerHidden]
            get
            {
                return &lt;&gt;2__current;
            }
        }

        object IEnumerator.Current
        {
            [DebuggerHidden]
            get
            {
                return &lt;&gt;2__current;
            }
        }

        [DebuggerHidden]
        public &lt;Yield&gt;d__1(int &lt;&gt;1__state)
        {
            this.&lt;&gt;1__state = &lt;&gt;1__state;
            &lt;&gt;l__initialThreadId = Environment.CurrentManagedThreadId;
        }

        [DebuggerHidden]
        void IDisposable.Dispose()
        {
        }

        private bool MoveNext()
        {
            switch (&lt;&gt;1__state)
            {
                default:
                    return false;
                case 0:
                    &lt;&gt;1__state = -1;
                    &lt;&gt;2__current = 0;
                    &lt;&gt;1__state = 1;
                    return true;
                case 1:
                    &lt;&gt;1__state = -1;
                    &lt;&gt;2__current = 1;
                    &lt;&gt;1__state = 2;
                    return true;
                case 2:
                    &lt;&gt;1__state = -1;
                    &lt;&gt;2__current = 2;
                    &lt;&gt;1__state = 3;
                    return true;
                case 3:
                    &lt;&gt;1__state = -1;
                    return false;
            }
        }

        bool IEnumerator.MoveNext()
        {
            //ILSpy generated this explicit interface implementation from .override directive in MoveNext
            return this.MoveNext();
        }

        [DebuggerHidden]
        void IEnumerator.Reset()
        {
            throw new NotSupportedException();
        }

        [DebuggerHidden]
        IEnumerator&lt;int&gt; IEnumerable&lt;int&gt;.GetEnumerator()
        {
            if (&lt;&gt;1__state == -2 &amp;&amp; &lt;&gt;l__initialThreadId == Environment.CurrentManagedThreadId)
            {
                &lt;&gt;1__state = 0;
                return this;
            }
            return new &lt;Yield&gt;d__1(0);
        }

        [DebuggerHidden]
        IEnumerator IEnumerable.GetEnumerator()
        {
            return System.Collections.Generic.IEnumerable&lt;System.Int32&gt;.GetEnumerator();
        }
    }

    public static void Main()
    {
        int[] obj = new int[7];
        RuntimeHelpers.InitializeArray(obj, (RuntimeFieldHandle)/*OpCode not supported: LdMemberToken*/);
        int[] source = obj;
        IEnumerable&lt;&lt;&gt;f__AnonymousType0&lt;int, int&gt;&gt; enumerable = source.Select(&lt;&gt;c.&lt;&gt;9__0_0 ?? (&lt;&gt;c.&lt;&gt;9__0_0 = &lt;&gt;c.&lt;&gt;9.&lt;Main&gt;b__0_0));
    }

    [IteratorStateMachine(typeof(&lt;Yield&gt;d__1))]
    public static IEnumerable&lt;int&gt; Yield()
    {
        return new &lt;Yield&gt;d__1(-2);
    }
}
[CompilerGenerated]
internal sealed class &lt;PrivateImplementationDetails&gt;
{
    [StructLayout(LayoutKind.Explicit, Pack = 1, Size = 28)]
    private struct __StaticArrayInitTypeSize=28
    {
    }

    internal static readonly __StaticArrayInitTypeSize=28 572ED8A201DB898C54AEE5E176701DF001029BE8/* Not supported: data(03 00 00 00 01 00 00 00 04 00 00 00 01 00 00 00 05 00 00 00 09 00 00 00 02 00 00 00) */;
}

