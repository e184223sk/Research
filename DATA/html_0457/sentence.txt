音ゲーを作ろうとした時に調べても具体的なソースコードやアルゴリズムに関する記事が無かったので、自己解決した方法を載せます。
分からないことがあったり、間違いがあればコメントお願いします。1.譜面を作る
2.ノーツを作る
3.ノーツをタイミングに合わせて生成する
4.ノーツのタップ判定を作る
5.音楽を再生する私はNoteEditorという外部Assetを使用して作りました。
NoteEditorの使い方はコガネブログさんが説明されてますので、そちらを参考にしてください。
ちなみにBPMが分からないものはBPMカウンターという便利なサイトがあるので使用してみてください。生成したいノーツを作りましょう。
後でノーツ生成から判定場所までかかる時間を取得するので、それを考慮したものの方が良いと思います。
今回は簡単に横移動のみのノーツでやっていきます。
とりあえずこんな感じです。

これはPrefabにしておきます。①譜面の解説
②譜面を読み込む
③読み取った情報からノーツを生成する
の順で説明していきます。先ほど作った譜面はJson形式で保存されています。
まず、そのファイルを見てみましょう。こういった形式になっています。
こちらに書かれているもので使用しないものもあるので、使用したものを上から順に説明していきます。一分間に何回拍が打たれるかを数値にしたものです。
例えば、BPM120なら60秒間に120拍、つまり60/120で1拍0.5秒ということになりますね。
この1拍の時間というのは後々使うことになるので覚えておいてください。1つのノーツの情報をまとめた配列になってます。
ここに書いてあるものも使うので説明していきます。私の知る限り音楽用語ではありません。
NoteEditor独自の用語ではないでしょうか？
これは1拍を何分割してノーツを置くかというものです。
NoteEditorでは下記のようになっています。

太い縦線が拍を意味していて、細線がここでいうLPBを意味しています。
例えば、BPM120でLPB8で、細線に二連続で置くと、その間隔は 60/120/8[秒] となりますね。
これも後々使います。
途中でLPBを変えると色々おかしくなってしまうので注意してください。これは開始の縦線を0、次の縦線を1としてどこの縦線に置かれているかの情報です。
ということは、縦線の間隔は均等なので開始からどのくらいの時間が必要なのかは『60/BPM/LPB*num』で分かりますね。これは横線の位置を意味しています。
上から0,1,2,3,4です。

私はノーツの種類を分ける時に使いました。UnityでJSONファイルを読み込むを参考に読み込みます。これでscoreNum[]にすべての音符の場所データが入りました。
さてここから音楽のタイミングに合わせて生成を行います。一番の難所であろうところです。
いやぁ・・・苦戦したな・・・。
先に生成部分のソースコードを載せます。(1)InvokeRepeatingを使いmoveSpan(0.01秒)ごとに処理を行っているためです。
(2)NoteEditorでいう、今どこの縦線にいるかの取得をします。
(3)scoreNum[]はノーツの場所の情報を順に入れているものなので、いまどこの縦線にいるかを見ているbeatNumと等しかったらノーツ生成のタイミングになります。
(4)生成が終わったら次のscoreNum[]の要素を見たいので足します。さあこれでノーツの生成が終わりました。タップした時の判定を作っていきます。
生成からタップさせたいタイミングのところまでの移動でかかる時間からカウントダウンしていき、その差で判定します。こんな感じです。
これを使い次の工程に移ります。音ゲーに欠かせないのが音楽です。
先ほどの生成のタイミングと音楽が噛み合わなかったら元も子もないですよね。
今のコードでは本来ノーツが判定されるタイミングで生成を行っています。
つまり、生成から判定したい場所までにかかる時間分ずれていることになります。
このずれを直していきます。まず、譜面のnotes[0]にを追加します。LPBは各自合わせてください。次にNotesGeneratorにを追加します。そして、音再生用ノーツの設定です。
先ほど作ったノーツのprefabを複製し、タグをAudioPlayとしておきます。
コードはを追加します。これはどういうことかというと、NoteEditorでは音楽が開始したときにnum0になっています。
これはプレイヤーがノーツをタップしたいタイミングですよね。
ということはすべてnum0からの差分で生成するタイミングを取っているので、num0が判定場所に来てそのタイミングで音を開始したらずれません。これで完成です。
誰かの力になれたら嬉しいです。


