More than 1 year has passed since last update.リングバッファーを使った Tailコマンドを書いてみました。というとても単純なものです。たとえば、sample.txtの最後の30行を表示したい場合は、のように入力します。 行数を省略した場合は、最後の10行が表示されます。ファイル名を省略した場合は、 標準入力からの入力となるようにしました。Tailコマンドを作成するために、リングバッファークラス(RingBuffer)を自作しました。
RingBufferクラスは、リング状になった配列のような構造をしています。格納できるのは、配列と同様、一定の量だけで、それを超えてデータを格納しようとすると、先頭に戻ってデータを格納する構造になっています。Wikipediaに説明がありますので、リングバッファについての詳しい説明は割愛します。wikipwdia:リングバッファ ここで作成した RingBufferクラスは、とジェネリッククラスにしているので、用途にあった型のデータを入れることができます。また、IEnumerable&lt;T&gt; を実装していますので、foreachで簡単に要素を取り出すことができます。なお、この実装では、取り出した要素はバッファから削除していますので、同じ要素を複数回バッファーの中から取り出すことはできません。こういった動きをIEnumerable&lt;T&gt;として実装しても良いの？という疑問も頭をよぎりますが、まあ良しとしましょう。RingBuffer の簡単な使い方を示します。このコードを実行すると、以下のように最後に追加した４つの文字列が表示されます。RingBufferクラスのソースコードはこの記事の最後に掲載しています。コードはこの後に掲載しているので、それと合わせて読んで欲しいのですが、このプログラムの実質的なメイン部分は、DoTailメソッドです。観ていただければ分かると思いますが、「ファイルを１行ずつ読み込み、RingBufferに追加していき、 
   最後まで読み終わったら、RingBufferの中身をforeachで書き出す」 という、とてもシンプルなコードになっています。Mainメソッドでごにょごにょやってるのはコマンドパラメータの解析なので、本質部分ではありません。シンプルなコードとなったのは、RingBufferクラスの存在が大きいですね。 
こういったクラスがなかったら、 かなり複雑なコードを書かないといけなくなってしまいますし、デバッグも大変です。RingBufferクラスは、ある程度汎用性を持たせましたが、 一般的なRingBufferのインターフェースが良くわからないので、僕なりのインターフェースとしました。
他の用途で利用するには、機能不足のところもあるかもしれません。 
特に、Get や foreachでデータを取り出した時に、バッファからデータを除去する仕様としましたが、 除去したくない場合もあると思います。そのような場合は、新たなメソッドを追加する必要があります。一方、Tailコマンドでの利用だけを考えた場合は、オーバースペックの部分があります。 
こういった汎用クラスの設計がなかなか難しいものです。上記ソースを GitHubで公開しています。この記事は、Gushwell's C# Programming Pageで公開したものを加筆・修正したものです。


