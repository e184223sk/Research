これはもともとあったMVVMなWPFアプリに自動テストとDependency-Injection(DI)とCI/CDを実装してみた記録です。変更点はWPFとはあまり関係ないので、C#であれば他のフレームワークにも参考になるかもしれません。前回は自動テストの追加までやりました。今回はDIを追加してみます。WPFアプリの中身はファイルリネーマーです。アプリの詳細はこちらで。コード行数850行ぐらい、クラス数40個ぐらいのサンプルアプリに毛の生えたぐらいのコードサイズです。TestフレームワークはxUnit、DIコンテナはMicrosoft.Extensions.DependencyInjectionを使用しました。nugetからDIコンテナを追加します。アプリケーションのスタートアップでModel層の大本のクラスをDIコンテナに登録します。次に登録したクラスを取得します。Modelの大本のクラスModelは実行時のインスタンスは1つですが、テスト時は複数並列に動かすため、インスタンスが複数できます。
なので、厳密にはこのクラス自体はシングルトンではない？（よくわかっていない）
今は何も依存するサービスが無いので、コンストラクタ引数がありません。この段階で実行して、DIコンテナからインスタンスを取得して無事に動作することを確認しておきます。次にファイルシステムをDIできるように、ファイルシステムのモックライブラリ、System.IO.Abstractionsをアプリケーションプロジェクトとテストプロジェクトにnugetで追加します。System.IO.Abstractionsの簡単な説明は以前の記事を参照ください。ファイルシステムをDIコンテナに登録します。前回の記事でテストが正しくできなかったクラスFileElementModelを変更して、実際のファイルを直接操作せず、外部から注入したファイルシステムに対して操作するように変更します。前回から数行しか変更していないので、変更行は//☆変更がついています。コンストラクタでファイルシステムのインターフェースIFileSystemを引数で受け取っています。
FileElementModelを生成するModelクラスもコンストラクタ引数でIFileSystemを受け取り、アプリケーション実行時はDIコンテナから取得します。DIコンテナから注入されたファイルシステムをフィールドに保持し、子Modelに受け渡しています。
子Modelの生成もDIコンテナにまかせたほうがいい？よくわかっていないので詳しい人いたら指摘ほしいです。アプリケーション側はこれで動作します。本題のファイルシステムのモックを使ったテストです。こちらも前回から数行しか変更していないので、変更行は//☆変更がついています。変更点は2つ
- 最初のファイル準備部分がモックになった。既存のファイルをクリーンする必要がないので、行数はむしろ減った。
- Fileに直接アクセスしていた部分をファイルシステム経由に変更した。fileSystemMock.を先頭にコピペするだけですむ。というわけで思ってたよりも簡単でした。次にもうひとつのテストを書きます。置換文字列以外は同じなので省略します。前回は2つ目のテストを追加したら、テスト実行時にどちらかのテストが失敗していましたが、今回はどうでしょうか。。。無事に成功しました。
実際のファイルにアクセスせず、メモリ上でテストが完結するのでテストが早く終わります。テストごとに環境が独立しているのも良い点です。次回はこの自動テストをGitHub Actionsで実行してみます。DI・自動テストはやった方が良いと思いつつ、ついつい後回しにしていましたが、なんとかできました。
終わってみたら、変更行はそれほど多くなく、テストを書く面倒さも、「思ったほど」では無かったです。
ただ、複雑なアプリケーションに後から追加するのは難易度が高いので、そもそも最初からDI・テストファーストで開発をしたほうがよいです。VisualStudio 2019
C# 9
.NET 5
Microsoft.NET.Test.Sdk 16.9.4
xunit 2.4.1
xunit.runner.visualstudio 2.4.3
coverlet.collector 3.0.2
System.IO.Abstractions 13.2.38
System.IO.Abstractions.TestingHelpers 13.2.38 


