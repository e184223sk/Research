More than 3 years have passed since last update.こんにちは。プログラマの@keroxpです。ちょうどUnity歴は１年ほどになります。
今年は新卒で入ったLINEという会社を辞めてエモを追求するために１人で「黒羽のアリカ」という2Dスマホゲームを作りました。今はARKitとiPhoneXの機能を使った「黒羽のアリカAR」という3Dアプリを作ったりしています。
3Dに苦戦中でまだこんな感じで途中です（ホントはこれの完成版を記事にしたかった…😫）#黒羽のアリカ with #Unityちゃん 視線の動きと、開閉可能な翼のアニメーション。 pic.twitter.com/ZPd9InPKVvアリカさんの名前だけでも覚えて帰ってくださいｗ
それでは本題に入ります。年末年始でお忙しい方も多いでしょうから、短い結論から。Unityを始めてからいくつかのプロジェクトを作成してアプリを作成しているうちに、同じようなコードを度々書いていることに気が付きました。流石に全部一から書き直しているわけではないですが、そのたびにファイルを気合コピペしたり、コピペだとコンパイルが通らないところを細かく修正したり…とだんだん面倒になってきました。そこで、自分なりのまとまりがとれた「黒羽のアリカ」の開発で使用したコードの中からゲームに直接関係のないコードを取り出して別プロジェクト化ました。Unityは2017.2からUnityPackageManagerというパッケージ管理機能が追加されるとアナウンスされているのですが、実際どういうものなのか2017.3の現在もよく分かっていないので、Unityライブラリを配布する方法として使い慣れたnpmを選択しました。将来的にUPM（？）が動き出したらそちらに対応します。参考：Unityプロジェクトの自作パッケージ依存性管理をnpmで行うMacならUnityプロジェクトルートで以下のコマンドを実行すればインストール完了です。自分のScrapboxにドキュメントを作成してあります。全てではありませんが逐次更新予定です。詳細な解説は機能目次から確認していただくとして、UniCommonの中から特に便利な機能を４つ紹介します。Unityのなかで非同期処理を簡単に実行したいと思ったことはありませんか？
Asyncsを使えば1行で簡単に非同期処理が実装できます。Executeメソッドには、ActionもしくはFunc&lt;T&gt;を引数に渡し、バックグラウンドで非同期処理を実行してその結果をメインスレッドで受け取れます。LoggersはUnityのILoggerを実装したロガーのファクトリです。以下のように作成することで、メタデータが付与されたフォーマットでログ出力できるロガーをすぐに作成できます。同様に、ファイルロガーも簡単に作成できます。ファイルへの書き込みはAsyncsを経由してバックグラウンドで実行され、指定インターバルごとに行われるため、アプリケーションのパフォーマンスを落とすことはありません。Filesには、ファイルIOに関した便利なメソッドがあります。
Files.TryWriteは指定パスにデータを同期的に書き込みます。Asyncsと併用することで非同期保存が可能です。Files.TryReadは指定パスのファイルを同期的に読み込みます。Asyncsと併用することで非同期読み込みができますFilesのIOメソッドはちょっとした工夫をしていて、書き込み時に指定パスのすでにあるファイルが消失も破損もしないようになっています。Crypterは、秘密鍵を用いた暗号化/復号化を簡単に実装できるクラスです。
このように使います。Crypterのファクトリに渡しているのは、秘密鍵のプロバイダです。暗号化/復号化を行う場合にこの鍵を利用します。これは次のような方法で実装できると思います。明日はAdvent Calener最終日、Yuta_Nakano0902さんの「クリスマスに相応しい記事」の予定です。それではみなさま健やかに新年をお迎えください。


