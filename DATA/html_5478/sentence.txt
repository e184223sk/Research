本エントリーは某社内で実施するデザインパターン勉強会向けの資料となります。 
本エントリーで書籍「Java言語で学ぶデザインパターン入門」をベースに学習を進めますが、サンプルコードはC#に置き換えて解説します。第1回：Iteratorパターン
第2回：Adapterパターン
第3回：Template Methodパターン
第4回：Factory Methodパターン
第5回：Singletonパターン
第6回：Prototypeパターン
第7回：Builderパターン
第8回：Abstract Factoryパターン
第9回：Bridgeパターン
第10回：Strategyパターン　
第11回：Compositeパターン
第12回：Decoratorパターン
第13回：Visitorパターン
第14回：Chain of Responsibilityパターン
第15回：Facadeパターン
第16回：Mediatorパターン
第17回：Observerパターン
第18回：Mementoパターン
第19回：Stateパターン　まず、flyweightというのはボクシングで最も体重が軽い階級のことを表しています。すなわちFryweightパターンというのは、オブジェクトを軽くするためのデザインパターンです。ここでいう重さはメモリの使用量を表しており、たくさんのメモリを使うオブジェクトを「重い」、少ししかメモリを使わないオブジェクトを「軽い」と表しています。　　
　　新しいクラスのインスタンスを作ると、そのインスタンスを保持するために、メモリが確保されます。そのクラスのインスタンスを沢山作ると、メモリの使用量が大きくなってしまいます。
　　すなわちFryweightパターンは、等価なインスタンスを別々の箇所で使用する際、一つのインスタンスを再利用することによってプログラムを省リソース化することを目的としているデザインパターンになります。大きな文字を表現する(重いインスタンスを作る)クラス。　　
ファイルから大きな文字のテキストを読み込んでメモリ上に蓄え、printメソッドでそれを表示する。BigCharのインスタンスを生成するクラス。　　
同じ文字に対応するBigCharのインスタンスが既に作ってあった場合は、それを利用し、新しいインスタンスは作らない。また、factoryクラスは複数生成する必要がないため、Singletonパターンで実装されています。BigCharを集めた大きな文字列を表すクラス。　　
BigCharのインスタンスを保持する。動作テスト用のクラス。　　
引数で与えられた文字列を元に、BigStringのインスタンスを作り、それを表示する。大きな文字を構成しているデータ。
文字の前にbigという文字列を付けたファイル名。例 : big1.txt実行時引数を 0121　とした場合。・重複したインスタンスを生成することがなくなるため、インスタンスの管理をfactoryに任せておけば、既に生成している、いないの管理をインスタンスを使う側でする必要がなくなる。・インスタンスを共有しているので、一つのインスタンスを変更するだけでそのインスタンスを使っている複数箇所に同時に変更が反映されてしまう。
　　→複数箇所に共有させるべき情報だけ、Fryweight役に持たせるべきである。


