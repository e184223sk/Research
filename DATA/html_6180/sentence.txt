More than 1 year has passed since last update.C# で頻繁に出てくる Mock Framework の Moq を試してみた。どうやら、先日試していた Autfac とも連携するようだ。Moq, Autofac がある程度理解できて、Linq が書けるようになれば、C# で、そこそこ Test Driven Development ができるかもしれない。最初にお試しのために、こんなインターフェイスやクラスを書いてみた。これに対して、Mock のプログラムを書いて試してみる。見ての通り、インターフェイスしかないが、インターフェイスに対して Mock を自動生成できる。テスト駆動開発をする場合は、単体テスト時に外部インターフェイスなどは、Mock したいところだが、自分で MockObject を作るのは面倒くさい。Moq があれば、自動的にやってくれる。しかもとてもいいことに、入力値と戻り値を書いておけば、その通りにモックしてくる。実際に Moq を使う場合は、productMock.Object.GetContent のように、一旦 Object メソッド経由して、モックを取得して使う。実際にクラスを実行してみよう。Mockした通りの値が出力されている。Setup メソッドでセットしていない引数で実行した場合は、空で帰ってくるようだ。では、インターフェイスに対する Mock はできたが、クラスに対してはどうだろうか？モックのSetup は全く同様だ。実行結果は次の通り全く同じだ。Setup で指定しなければ、元のメソッドが呼ばれるわけではないのに注意。また、一点だけ注意点があり、クラスを Mock したい場合は、メソッドに virtualキーワードが必要だ。これを無くすとという感じのエラーが出る。Mock で、メソッドをオーバーライドするのに、virtual がついていないと override 出来ないからだ。ちなみに、クラスがさらに、他のクラスを持っているようなケースがあるが、その場合も、ネストしたオブジェクト毎 Mock してくれる。先ほどのプログラムを改造してみよう。Mock 部実行結果はというわけで、ネストしたオブジェクトもむっちゃ簡単に Mock できる！これはいいね！TDD をやっていて、Mock を使う場面では、偽物のオブジェクトを作るだけじゃなくて、その偽物オブジェクトに、適切な値がわかってきたか？を確かめたい場合がある。そのために verify というメソッドが用意されているようだ。こんな感じで書いておくと、結果は次の通り。基本的に、予想した値が Mock にわたっていなければ例外が発生する。最低限だったが、この最低限のセットがあれば、既にテスト駆動を始められるだろう。他にも、CallBack や Event さらに Linq に対しても Mock がかけられるらしいので、次回以降で試していきたい。今回の動作するコードはこちらに置いておいたので参考にしてください。


