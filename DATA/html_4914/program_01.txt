
using System.Collections.Generic;
using NUnit.Framework;
using UnityEngine;
using Assert = UnityEngine.Assertions.Assert;

public class MathfTest
{
    // 単純なテスト
    [Test]
    public void PITest()
    {
        // 値がほぼ同じかどうか
        Assert.AreApproximatelyEqual(Mathf.PI, 3.141593f);
    }

    // テストメソッドに引数を渡してテストケースを量産
    [TestCase(1, -1)]
    [TestCase(2, -2)]
    [TestCase(3, -3)]
    public void AbsTest(int expected, int input)
    {
        Assert.AreEqual(expected, Mathf.Abs(input));
    }

    // 引数はたくさん渡せる
    [TestCase(9, 1, 2, 3, 4, 5, 6, 7, 8, 9)]
    public void MaxTest(int expected, int a, int b, int c, int d, int e, int f, int g, int h, int i)
    {
        Assert.AreEqual(expected, Mathf.Max(a, b, c, d, e, f, g, h, i));
    }

    // 戻り値があるテスト（Assertを使わず、doubleを返している）
    [TestCase(123.456f, ExpectedResult = 123)]
    public double FloorTest(float input)
    {
        return Mathf.Floor(input);
    }

    // -5,-3,-1,1,3,5でテスト
    [Test]
    public void ClampTest([NUnit.Framework.Range(-5, 5, 2)] float value)
    {
        Assert.IsTrue(0 &lt;= Mathf.Clamp(value, 0, 3));
        Assert.IsTrue(Mathf.Clamp(value, 0, 3) &lt;= 10);
    }

    // -2~2のランダムな値で10回テスト
    [Test]
    public void Clamp01Test([Random(-2, 2f, 10)] float value)
    {
        Assert.IsTrue(0 &lt;= Mathf.Clamp01(value));
        Assert.IsTrue(Mathf.Clamp01(value) &lt;= 1);
    }

    // あらかじめテストケースを定義しておく
    private static IEnumerable&lt;TestCaseData&gt; SqrtTestCases
    {
        get
        {
            yield return new TestCaseData(1).Returns(1);
            yield return new TestCaseData(4).Returns(2);
            yield return new TestCaseData(9).Returns(3);
            yield return new TestCaseData(-1).Returns(double.NaN);
        }
    }

    // 定義しておいたテストケースを使う（引数/戻り値が定数でない場合は[TestCase]が使えない）
    [TestCaseSource(nameof(SqrtTestCases))]
    public double SqrtTest(float input)
    {
        return Mathf.Sqrt(input);
    }

    // テストケース生成用クラス
    public static class TestCaseFactory
    {
        public static IEnumerable&lt;TestCaseData&gt; MinTestCases
        {
            get { yield return new TestCaseData(1, 2, 3, 4, 5).Returns(1); }
        }
    }

    // 別のクラスからテストケースを取得して使う
    [TestCaseSource(typeof(TestCaseFactory), nameof(TestCaseFactory.MinTestCases))]
    public int MinTest(int a, int b, int c, int d, int e)
    {
        return Mathf.Min(a, b, c, d, e);
    }
}

