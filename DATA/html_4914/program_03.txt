
using System;
using System.Collections;
using UnityEngine;
using Miyamasu;

public class SuccessSample : MiyamasuTestRunner {
    // MSetup is annotation for setup.
    // method should return void or IEnumerator.
    [MSetup] public void Setup () {
        Debug.Log("setup!");
    }

    // MTeardown is annotation for setup.
    // method should return void or IEnumerator.
    [MTeardown] public void Teardown () {
        Debug.Log("Teardown!");
    }

    // MTest is annotation for test case. 
    // method should return IEnumerator.
    [MTest] public IEnumerator Same () {
        AreEqual("a", "a");
        yield return null;
    }

    [MTest] public IEnumerator DoneInTime () {
        var obj = new GameObject("runner");
        IsNotNull(obj);

        var runner = obj.AddComponent&lt;Runner&gt;();

        // WaitUntil method can wait that some condition is achieved. 
        // 1st func&lt;bool&gt; is the condition of this waiting. when returns true, finish waiting.
        // 2nd action is for throw timeout exception. you can set original message for fail by timeout.
        // 3rd double parameter is time limit in sec. default is 5sec.
        yield return WaitUntil(
            () =&gt; runner.n == 10,// enough small.
            () =&gt; {throw new TimeoutException("not yet. runner.n:" + runner.n);},
            1.0//sec
        );
    }
}

