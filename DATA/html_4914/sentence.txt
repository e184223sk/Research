More than 3 years have passed since last update.前の記事 ではアプリケーションのテストコードを書くかは別として、Unity使い全員に「トライ＆エラー環境としてUnity Test Runnerを使え！」というメッセージを送った。今回の記事では「ちゃんとテストコード書きたいけどNUnitとか知らない」という人向けに、あらためてテストコードの書き方について説明する。実際テストコードを書いて動かしてみるとUnity Test Runnerの💩な仕様がいくつか浮かび上がってくるので、その対策についても述べる。「Unityテストを完全に理解した」の動画とスライドが公開 で紹介されてるスライドを読めばについて濃い目に紹介されてるので熟読してほしいが、簡単にメリットを上げるとすればこんな感じ↓ただ、テストをちゃんと書くとプロジェクト全体の工数が倍くらいに膨れるみたいな話もあるので、プロジェクトの規模/進捗と要相談。「nunit cheatsheet」とかでググったら「Most Complete NUnit Unit Testing Framework Cheat Sheet」という英語の記事に必要な情報がほとんど載っていたのでリンクを張って終わりにしたくなったが、頑張ってサンプルコードを書いた。せっかくなので手元のUnityで実行してみてほしい。この記事を読んでもよくわからないことがあれば以下を熟読すること。NUnitには属性がたくさん用意されており、メソッドや引数に指定することで柔軟かつ大量にテストを記述できる。テスト前後のコールバックを指定テストメソッドとパラメータの指定その他メタデータ付与サンプルコードと合わせて使い方を順番にみていこう。コールバックの挙動がわかればいいのでMyClassの処理内容自体に特に意味はない。なお、いずれのコールバックもasync/awaitは使えないうえに同期的に処理が行われるので非同期処理を待つことができない。EditMode/PlayModeとかは関係なく待てない。つまり、テストの前処理と後処理で非同期処理を待つ必要がある場合、PlayModeテストで[UnityTest]を使い、[SetUp]などは使わずにテストメソッドすべてにいちいち前後処理を書く必要がある。辛い。テストメソッドの指定には[Test]以外にも[TestCase][TestCaseSource]などが使え、うまく使えばテストケースを楽に量産できる。以下もすべてメソッドに対して指定する属性。カテゴリ名を指定すると、Unity Test RunnerのUI上で「指定したカテゴリのテストだけをすべて実行」みたいなことができる。カテゴリ名は好きにつけることができ、「正常系」「異常系」「通信」「IO」などでカテゴリ分けするといいかもしれない。ただ、カテゴリで分けたとしてもUnity Test Runnerのツリーの表示はあくまで
　(プロジェクト名)▶(dll名)▶(namespace)▶(class)▶(method)
のまま。テストのタイムアウトまでの時間を指定する（単位はミリ秒）。デフォルトだと30秒で、そのままだとPlayModeテストがタイムアウトしまくったりする。テストに対して説明文を書ける。テスト項目選択時にUnity Test Runnerの下のほうに表示される。テストが無視され実行されなくなる（pendingにする）。引数には「未実装」などpendingになっている理由を渡す。まとめて実行する際の実行順を指定できるが、Unity Test Runner内の表示順はアルファベット順のままなので紛らわしい。どうにかならんのかしら。　
他にも [Pairwise], [Sequential], [Combinatorial] などがあり、引数に直接指定する属性[Values],[Range]と合わせて複数の引数の組み合わせ方を指定できる。全ては紹介しきれていないが他にもあるので、興味があれば 公式ドキュメントの属性一覧（英語）を参照。EditModeテストを/Editor以下に置く以外は特に決まりや制限はないが、個人的には以下のようにしている。広く知られた指針とかがあればぜひ教えてください。前回の記事では「基本的にUnityのものを使う」と書いたが、少なくともエディター上ではNUnitのものを使っても問題ないようだ（ビルドしたプレイヤー上の実行は未確認）。NUnitのAssertのほうが圧倒的にメソッドが多く柔軟にテストを書けるので、問題なさそうであればNUnitのものを使ったほうがいいかもしれない。→ NUnitのAssertのチートシートAssertのメソッドはたくさんあるが、Assert.AreEqual()だけ覚えればテストは書けるのでたくさん覚える必要はあまりない。LogAssert を使うと「Debug.Log("ほげ")の実行を期待する」みたいなテストが書ける（もちろんLogWarning(),LogError()も）。いちいち例外を吐かずにDebug.LogWarning()を呼ぶようにしている実装の場合も、これで対象のコード行を通過したかどうかテストできる。あとで書く実機上でテストコードを実行してくれるツール。謎の技術が使われていて、よくわからないがなんかすごい（小並感）。ちゃんと触れてないのでよくわかってない😅MiyamasuTestRunnerを継承することで[MSetup][MTeardown]が使えるようになり、テスト前後のコールバックで非同期処理が待てる。ただ、MiyamasuTestRunnerを継承したクラスがあれば対応するテストコードを自動生成、ということをしているので通常の[OneTimeSetUp]などは使えなくなる。また、[MOneTimeSetUp]や[MOneTimeTearDown]は実装されていない。ちょっと残念。あとで書く


