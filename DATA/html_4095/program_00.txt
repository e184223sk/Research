using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TensorFlow;
using System.IO;
public class imagenet : MonoBehaviour {

    // Use this for initialization
    void Start () {
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　//画像ファイルの読み込み
        string file="Assets/cat.jpg";
        var labels = File.ReadAllLines("Assets/synset.txt");
        var tensor=CreateTensorFromImageFile(file);

        var graph=new TFGraph();
        string modelFile="Assets/plugins/beginner-const-graph.pb";
        var model=File.ReadAllBytes(modelFile);
        graph.Import(model,"");
        using (var session=new TFSession(graph)){
            var runner=session.GetRunner();
            runner.AddInput(graph["input"][0],tensor);
            runner.Fetch(graph["prob"][0]);
            var output=runner.Run();
            var result=output[0];


                var bestIdx = 0;
                float best = 0;
                // 尤も確率が高いものを調べて表示する
                var probabilities = ((float[][])result.GetValue(true))[0];

                for (int i = 0; i &lt; probabilities.Length; i++)
                {

                    if (probabilities[i] &gt; best)
                    {
                        bestIdx = i;
                        best = probabilities[i];
                    }
                }
                Debug.Log($"{file} best match: [{bestIdx}] {best * 100.0}% {labels[bestIdx]}");
        }


    }

    // Update is called once per frame
    void Update () {

    }
    public static TFTensor CreateTensorFromImageFile (string file, TFDataType destinationDataType = TFDataType.Float)
        {
            var contents = File.ReadAllBytes (file);

            // DecodeJpeg uses a scalar String-valued tensor as input.
            var tensor = TFTensor.CreateString (contents);

            TFGraph graph;
            TFOutput input, output;

            // Construct a graph to normalize the image
            ConstructGraphToNormalizeImage (out graph, out input, out output, destinationDataType);

            // Execute that graph to normalize this one image
            using (var session = new TFSession (graph)) {
                var normalized = session.Run (
                         inputs: new [] { input },
                         inputValues: new [] { tensor },
                         outputs: new [] { output });

                return normalized [0];
            }
        }

        // The inception model takes as input the image described by a Tensor in a very
        // specific normalized format (a particular image size, shape of the input tensor,
        // normalized pixel values etc.).
        //
        // This function constructs a graph of TensorFlow operations which takes as
        // input a JPEG-encoded string and returns a tensor suitable as input to the
        // inception model.
        private static void ConstructGraphToNormalizeImage (out TFGraph graph, out TFOutput input, out TFOutput output, TFDataType destinationDataType = TFDataType.Float)
        {
            // Some constants specific to the pre-trained model at:
            // https://storage.googleapis.com/download.tensorflow.org/models/inception5h.zip
            //
            // - The model was trained after with images scaled to 224x224 pixels.
            // - The colors, represented as R, G, B in 1-byte each were converted to
            //   float using (value - Mean)/Scale.

            const int W = 224;
            const int H = 224;
            const float Mean = 117;
            const float Scale = 1;

            graph = new TFGraph ();
            input = graph.Placeholder (TFDataType.String);

            output = graph.Cast (graph.Div (
                x: graph.Sub (
                    x: graph.ResizeBilinear (
                        images: graph.ExpandDims (
                            input: graph.Cast (
                                graph.DecodeJpeg (contents: input, channels: 3), DstT: TFDataType.Float),
                            dim: graph.Const (0, "make_batch")),
                        size: graph.Const (new int [] { W, H }, "size")),
                    y: graph.Const (Mean, "mean")),
                y: graph.Const (Scale, "scale")), destinationDataType);
        }

}


