More than 1 year has passed since last update.一般的なユースケースであろう、FormやUnityのUIスレッドではSynchronizationContext.currentにUIスレッドが設定されているので、UIスレッドからの呼び出しについてはというように書いたとします。すると、意味としては次のようになるようですつまり、awaitもその後もその場で実行されることはありません。最初のawaitが出てきた時点でasyncメソッドの呼び出し元に戻ります。
しかし、SynchronizationContext.Currentに呼び出だし元のスレッドが入っている場合、awaitの後は呼び出し元に戻ります。戻るといっても即時実行されるわけではなく、タスクとして後回しにされます。どうせ後回しにするなら、「別スレッドでそのまま処理した方がいいじゃない」と思いそうですが、UIスレッドでしかアクセスできないクラスが結構あります。（スレッドセーフでないため）そう考えると、言語仕様は次のような使われ方を想定してるんだなと合点がいきます。これをawait使わずに書こうとすると…awaitの方が処理の一見みやすい気がしますが、ここまでのことをちゃんと理解していないと、実行順序が思わぬものになってしまいますね。この例のような単純なものでは全く意識せずともうまくいくと思いますが、メンバの呼び出し順序が厳しいクラスを使っていたり、なまじ昔ながらのスレッドをかじっていると混乱しそうです。（しました）自分で設定しない限りSynchronizationContext.Currentはnullなので、呼び出し元スレッドに後回しで戻そうにも戻れません。他のスレッドに回されます。
コンソールアプリでは、メインスレッドでないと出来ないようなことはGUIアプリほどないので、awaitの旨味もあまりないですね。FormアプリではUIスレッドがブロックされている間、awaitの後の処理がされていないのに対し、コンソールアプリではされています。SynchronizationContext.CurrentがUIスレッドになっているか、nullになっているかの違いです。即座に切り替わっています。最早、呼び出しスレッドは関係なくなります。


