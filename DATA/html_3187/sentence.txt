More than 1 year has passed since last update.Unityでオンラインゲーム作れるようになりたい！！！
UnityではPhoton Realtime SDKを使えば無料でできると聞いたので、制作過程を記します。使用したUnityのバージョンは2018.3.6です。まずはphotonでアカウントを作成します。
新しいアプリを作成するを選んでください。
こんな感じで今回作るゲームの情報を入れておきます。今回使うのはPhoton Realtimeです。
作成するを押して、以下の画面になります。詳細を確認しましょう
このアプリケーションIDはあとで使うので、コピーしておきましょう！
Unityでオンライン化したいプロジェクトに対し、AssetStoreからPhoton Unity Networking Classic-FreeをImportします。Photonは似たようなAseetが沢山あるので注意してください。
Unityのプロジェクトをphotonと繋げるところからやっていきましょう。Importするとすぐ、AppIDを打ち込む画面が現れます。先ほどコピーしたアプリケーションIDをペーストしてください。
入れ損ねた場合や間違えた場合はWindow &gt; Photon Unity NetWorking &gt; HighLight Server Setting から、PhotonServerSettingのInspectorから編集できます。

さっきPhotonのマイページで作ったアプリケーションIDをAppidに入力してください。下の画像の青いところです。日本なのでRegionをJpにしておきます。Auto-join Lobbyにチェックをつけて、ゲーム開始時に自動でロビーに入るようにします。
Photonに接続するスクリプトを書きます。
Hierarchy Viewに空のオブジェクト(PhotonManager)を作って、下のスクリプト(PhotonManager.cs)をアタッチしてください。実行してConsoleを確認してみましょう。こんな感じになっていたら成功です！
ちなみにphotonに繋げないWi-fiもあるみたいです。ポート番号が解放されていないとそうなるみたいです。Wi-fiを変えたらうまくいくということがありました。今のままでは1人プレイしかできないので、各プレイヤーが操作できる車を生成できるようにします。とりあえず2人プレイできるようにしましょう。オブジェクトの位置や角度を同期させるには、PhotonNetworkを用います。int PhotonNetwork.countOfPlayers現在このアプリケーションをプレイしているユーザー数（マスターサーバーで5秒間隔で取得可能）を取得できます。(by Photon Network Class Reference)static GameObject PhotonNetwork.Instantiate(string prefabName, Vector3 position, Quaternion   rotation, int group)ネットワーク越しにプレハブからインスタンス作成します。このプレハブは"Resources"フォルダー直下に配置されている必要があります。Resourcesフォルダーのプレハブを使う代わりに、手動でInstantiateしてPhotonViewを割り当てることもできます。(by Photon Network Class Reference)PhotonManagerのOnJoinedRoomの中を書き加えていきます。PhotonはResourcesというフォルダからPrefabを生成するというシステムらしいです。Carの名前をCarPrefab、
Prefabsフォルダの名前をResourcesに変えるか、新たにResourcesというフォルダを作るかしましょう。同期するオブジェクトにつけるコンポーネントです。
CarPrefabのInspectorを開き、Photon ViewとPhoton Transform Viewをつけます。PositionとRotationにチェックを入れましょう。Photon Transform ViewをPhoton ViewのObserved Componentsにドラッグ＆ドロップします。このようにクライアント間で通信を行いたい際にオブジェクトにPhotonViewコンポーネントを追加し、Obaserved(監視対象)を指定すると、そのオブジェクトが同期されるようになります。
CarPrefabのInspevtorはこんなかんじになります。
逆に、同期したくないオブジェクトはPhotonNetwork越しに生成すると厄介なことになります。
カメラとか、、、、、、、、、むやみに同期させない方が良いということを学びました。ネットワーク負荷の軽減のためにも、同期するオブジェクトは必要最低限にすることを心がけましょう。CarPrefabの子オブジェクトのMainCameraを消してください。カメラはあとでプレイヤー別になるようにしますが、今ついていると2人以上になったとき同期しておかしなことになります。適当な位置にに固定カメラを設置しておきましょう。
CarPrefabの準備が済んだら、CarPrefabをResourcesにいれてPrefab化してください。Hierarchyに残ったCarPrefabは消しちゃって大丈夫です。実行して、Scene Viewにcar1が生成されたのを確認できたら成功です！
ちゃんと2台生成したCarが同期しているか、ビルドして確認しましょう。Photonは沢山Buildします。Buildしないと1つのパソコンで2人分の動作確認ができないからです。
手始めに今どんな挙動を見せるのか確認してみます。PC向けAppをBuildしてください。
動作確認をする際は、まずAppを起動し、次にUnityの再生ボタンを押すようにしてください。

Windowedにチェックを入れておくと楽です。チェックを入れないと全画面で起動します。
2台出たら成功です。
しかしこのままでは片方が移動するともう片方も移動してしまっています。次の章で直していきましょう。bool PhotonView.isMinePhotonViewの所有者が「自分」で、このクライアントからコントロール可能の場合trueです。
PUNは所有権という概念があります。それぞれのPhotonViewをコントロールしたり破棄できる主体のことです。 所有者がローカルPhotonPlayerの場合trueです。 シーンのPhotonViewで、Master client上で動作しているならtrueです。(by Photon Network Class Reference)プレイヤーを操作するスクリプトの部分に、isMineの条件を足します。プレイヤーを操作しているCarUserControl.csを書き換えていきましょう。Builidして、それぞれのCarを動かすことができていれば成功です！その①
PhotonViewのついたCameraを子オブジェクトに持つCarPrefabをPhotonNetworkから生成した場合
→ カメラが同期してちゃんと自分の車につかないその②
PhotonViewのないCameraを子オブジェクトに持つCarPrefabをPhotonNetworkから生成した場合
→ 操作とカメラが逆転する謎現象が起きたその③
PhotonViewのついたCameraをPhotonNetworkから生成し、CarPrefabを追従するようにした場合
→ これもカメラが同期して自分の車につかない全部Buildしないと気づかない失敗です。同期したくないオブジェクトはPhotonNetwork越しに生成すると厄介なことになります。ネットワーク負荷の軽減のためにも、同期するオブジェクトは必要最低限にすることを心がけましょう。PhotonViewのついてないCameraをPhotonNetworkを介さずに生成した場合まずはCameraをCameraPrefabに改名し、CameraScriptをつけてください。CarUserControl.csとCameraScript.csに書き加えていきます。
CarUserControlのAwakeでCameraをCarの子オブジェクトとしてPhotonNetworkを介さずに生成します。CameraPrefabをResourcesに入れてください。再生してカメラがついてくることを確認したら、Buildして動作確認しましょう。
完成品の動画順位つけたりもしたいですね。お疲れ様でした！基本説明 - Photon Unity Networking
UnityでPUNを使ったオンラインマルチプレイの実装-準備編-
Unity猫本のサンプルゲームをPhotonでオンライン対戦ゲーム化してみた
Unityカーレース


