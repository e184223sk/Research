More than 1 year has passed since last update.Rxに適応できないプログラマは北極で人喰いペンギンと戦わされます。
なのでわたしたちは日夜こうしてリアクティブスパゲティを茹でているわけですが、PhotonはコールバックがいっぱいでつらいのでみんなRx化したくなるわけです。PhotonRxPUN1はありますがPUN2はありません。
「誰か作っといて！」と吠えていたのですが誰も作ってくれないので自作を試みます。赤いIConnectionCallbacksとりあえずこのinterfaceに実装されているものだけ作ってみます。拡張メソッドクラス。テストとかぜんぜんしてないけど以下のコードでログとか出てるから動いてるっぽい。
全体の実装方針はこれでよいと思われる。ReplaySubject&lt;&gt;にしてAwakeでnewしておき、後から好きなObservableをSubscribeしても値が受け取れるようにした方がいい？複雑になってよくない気配がする。そこまでのコストを払って対応するべきか。PUN2のエラーコールバックはこんな感じで来る。なのでこういうExceptionを定義する。でこんな感じで使えたらいいな。「エラー時にどのコールバックが来るのかわからない」ってPUNの設計ですっごい嫌いなところ1だったんですけど、2でもそのままでかなしい。ドキュメントにはちらっと書いてはありますが。
結局総当たりでログ打ってどのコールバックが来るか検証するしかないのか……。
これはライブラリではなくセルフサービスでやってね！　なやつ。書いておいてなんだけど複数回SubscribeするとDo~が毎回走って死ぬしObservableがここまでやるのはなんか違う気がするのでなし。各コールバックに応じてTriggerクラスを分割するべきか否か。
ひとまとめにすることで、Componentの数が少なくなってPhotonNetwork.AddCallbackTarget(this);に登録されるコールバックの数が少ないほうがよい気はする。メンテナンスはつらい気持ちになるがライブラリなので度外視。
でもUniRxではひとつのコールバックにつきひとつのTriggerクラスをくっつけている。なにか理由がある？　それくらい分割するように踏襲したほうがよい？ひさしぶりに自分で9.99からライブラリつくろうかな！　と思いましたが道が遠い。
設計マンとしてはやっぱりライブラリ作ると頭使うので楽しいですけれど。
がんばってUniRxのコード読みます。UniTaskとCoroutineのあたりはよくわかってない。というかTaskわからん。おしまい。あとHashTableとかいうC#標準クラスと同じ名前のクラス定義するの、ほんと！　マジで！　やめて！　2でもそのまま！　なんで！！！ ↩


