
using System;
using System.Collections.Generic;
using Photon.Realtime;
using UniRx;
using UnityEngine;

public static class ConnectionCallbacksTriggersExtension
{
    public static IObservable&lt;Unit&gt; OnConnectedAsObservable(this Component component)
    {
        return component?.gameObject == null
            ? Observable.Empty&lt;Unit&gt;()
            : GetOrAddComponent&lt;ConnectionCallbacksTriggers&gt;(component.gameObject).OnConnectedAsObservable();
    }

    public static IObservable&lt;Unit&gt; OnConnectedToMasterAsObservable(this Component component)
    {
        return component?.gameObject == null
            ? Observable.Empty&lt;Unit&gt;()
            : GetOrAddComponent&lt;ConnectionCallbacksTriggers&gt;(component.gameObject).OnConnectedToMasterAsObservable();
    }

    public static IObservable&lt;DisconnectCause&gt; OnDisconnectedAsObservable(this Component component)
    {
        return component?.gameObject == null
            ? Observable.Empty&lt;DisconnectCause&gt;()
            : GetOrAddComponent&lt;ConnectionCallbacksTriggers&gt;(component.gameObject).OnDisconnectedAsObservable();
    }

    public static IObservable&lt;RegionHandler&gt; OnRegionListReceivedAsObservable(this Component component)
    {
        return component?.gameObject == null
            ? Observable.Empty&lt;RegionHandler&gt;()
            : GetOrAddComponent&lt;ConnectionCallbacksTriggers&gt;(component.gameObject).OnRegionListReceivedAsObservable();
    }

    public static IObservable&lt;Dictionary&lt;string, object&gt;&gt; OnCustomAuthenticationResponseAsObservable(this Component component)
    {
        return component?.gameObject == null
            ? Observable.Empty&lt;Dictionary&lt;string, object&gt;&gt;()
            : GetOrAddComponent&lt;ConnectionCallbacksTriggers&gt;(component.gameObject).OnCustomAuthenticationResponseAsObservable();
    }

    public static IObservable&lt;string&gt; OnCustomAuthenticationFailedAsObservable(this Component component)
    {
        return component?.gameObject == null
            ? Observable.Empty&lt;string&gt;()
            : GetOrAddComponent&lt;ConnectionCallbacksTriggers&gt;(component.gameObject).OnCustomAuthenticationFailedAsObservable();
    }


    private static T GetOrAddComponent&lt;T&gt;(GameObject gameObject)
        where T : Component
    {
        var component = gameObject.GetComponent&lt;T&gt;();
        if (component == null)
        {
            component = gameObject.AddComponent&lt;T&gt;();
        }

        return component;
    }
}

