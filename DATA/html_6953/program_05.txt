
//あらかじめ用意しておく
List&lt;double&gt; A_press = (num * 2 - 1).Loop(i =&gt; gain.Select_ToList(a =&gt; Math.Pow(a, i)).Sum());

//A行列の場合、i+jがそのまま次数となるためそれを利用
List&lt;List&lt;double&gt;&gt; A = num.Loop(i =&gt; num.Loop(j =&gt; A_press[i + j]));
List&lt;double&gt;       B = num.Loop(i =&gt; press.Zip(gain, (p, g) =&gt; p * Math.Pow(g, i)).Sum());


List&lt;List&lt;double&gt;&gt; L = ListUtil.CreateNewList(A.Count, () =&gt; ListUtil.CreateNewList&lt;double&gt;(num));
List&lt;List&lt;double&gt;&gt; U = ListUtil.CreateNewList(A.Count, () =&gt; ListUtil.CreateNewList&lt;double&gt;(num));



for (int i = 0; i &lt; A.Count; i++)
{
    for (int j = 0; j &lt; num; j++)
    {

        double sigmaU = i.Loop(k =&gt; L[i][k] * U[k][j]).Sum();
        U[i][j] = (i &lt;= j) ? A[i][j] - sigmaU
                            : 0;



        double sigmaL = j.Loop(k =&gt; L[i][k] * U[k][j]).Sum();
        L[i][j] = (i &gt; j)  ? (A[i][j] - sigmaL) / U[j][j]
                : (i == j) ? 1
                            : 0;

    }

}


//上記で、行列AをL行列、U行列に分解
//下記で、Ax=B⇒LUx=B⇒Ly=Bからyを求める

//c行列の計算
List&lt;double&gt; Z = ListUtil.CreateNewList&lt;double&gt;(num); //指定数の配列を作成する独自の拡張メソッド
for (int i = 0; i &lt; num; i++)
{
    double sigma_C = 0;
    for (int k = 0; k &lt; i; k++)
    {
        sigma_C += L[i][k] * Z[k];

    }

    Z[i] = B[i] - sigma_C;

}


//最後にy(既知)=Uxを計算しxをはじき出す

//出力行列の計算
List&lt;double&gt; res = ListUtil.CreateNewList&lt;double&gt;(num);
for (int i = num - 1; i &gt;= 0; i--)
{
    double sigma_Res = 0;
    for (int k = i; k &lt; num; k++)
    {
        sigma_Res += U[i][k] * res[k];

    }

    res[i] = (Z[i] - sigma_Res) / U[i][i];

}

