More than 1 year has passed since last update.最近「〇〇の達人」にはまってしまい、音ゲーってどうやって作ってるのだろう？
そんな疑問からUnityで作ってみることにしました。Unityでのボタンの配置、ゲームオブジェクト作成等、基本的な操作はできる想定で説明していきます。音ゲーについての知識が全くない状態で作ります。
なので実装において非効率な箇所等出てくると思いますが、知っている方はコメントで指摘していただけると嬉しいです。パート2、パート3はこちら【Unity】音ゲーの仕組みを学び「〇〇の達人」をUnityで作る　パート2【Unity】音ゲーの仕組みを学び「〇〇の達人」をUnityで作る　パート3音ゲーは、音符がどこからか流れてきて、タイミングよく弾くことでスコアが伸びていくゲームです。また、音符はノーツと呼ばれ、曲で出てくるノーツの情報が詰まったものを譜面といいます。
つまり、音ゲーは1曲ごとに譜面データと音楽データが存在していて、プレイヤーは音楽データを聴きながら、譜面をもとに流れてくるノーツを弾いているということになります。ここで肝となるロジックは、譜面からノーツを出現させるロジック、ノーツを動かすロジック、プレイヤーがノーツをタイミングよく弾いたかチェックするロジックです。3Dモードではなく、2Dモードでプロジェクトを作成してください。アセットストアからUniRxをインポートしましょう。UniRxでReactive Extensionsを導入し、マウスクリックなどイベントを検知し関数型的にプログラムを書くことができます。詳しく説明している記事あったので貼っときます。こわくないReactive Extensions超入門githubからMiniJson、JsonNodeを落とし、「Assets　→　Plugins」　に「MiniJson」、「JsonNode」フォルダを作成し設置してください。MiniJsonとJsonNodeを使って、譜面のJsonファイルを読み込ませます。譜面データを作成する前に、少し音楽のテンポについて勉強しましょう。曲にはbpm(beats per minute)という曲のテンポを表現している指標があります。
bpmは1分間に拍数(音符のこと)が何個入るかの数値で、ノーツはbpmを参考に配置されています。例えば、bpm100の曲は、60 * 1000 / 100 = 600で、600(ms)単位でノーツを配置していくことになります。ただしこれだけでは、ノーツ同士の間隔が広い上にノーツの数が少ないため面白くありません。なのでノーツを等分割して連符にすることで、間隔を狭く、数を増やします。例えば、3連符にすると、600 / 3で、200(ms)単位でノーツを配置していくことになります。※音楽の知識がないため、間違っている可能性があるので鵜呑みにはしないでください。譜面データには、曲全体の情報として、「タイトル」、「bpm」を書きます。
ノーツの情報として、「タイプ」、「タイミング(ms)」を書きます。譜面データを適当にjson形式で作成してみましょう。ここで一つ条件があります。timingは必ず"2000"以上にしてください、設計上そうしないと動きが変になってしまいます。※Unity(MiniJson・JsonNode)でJsonファイルを読み込む際、文字列にしないエラーになってしまうので、数値も文字列にしています。GameManagerではゲーム全体の管理をさせます。肝となるロジックである譜面からノーツを出現させるロジックとノーツを動かすロジックの一部分(ノーツを動かし始めるタイミングの管理)が含まれます。「Plugin　→　Scripts」にGameManager.csを作成します。ヒエラルキーから値をセットできるように、filePath、Don、Ka、Play、SetChart、SpawnPointを作成する。FilePath　・・・　譜面のJsonファイルのパス
Don　・・・　ノーツ
Ka　・・・　ノーツ
Play　・・・　ゲーム開始ボタン
SetChart　・・・　楽譜を読み込むボタン
SpawnPoint　・・・　ノーツ配置位置
BeatPoint　・・・　ノーツを弾く位置関数loadChart実行時、値がセットされるように、Title、BPM、Notesを作成する。Title　・・・　曲のタイトル
BPM　・・・　曲のBPM
Notes　・・・　1曲分のノーツ全てが入った配列Unityでは「Assets　→　Resources」にファイルを置くことで、スクリプトからResources.Load&lt;TextAsset&gt;(filePath).ToString()で文字列を取得することができます。先ほど作成した譜面のJsonを「Assets　→　Resources　→　Charts」にSample.jsonという名前で保存しておきましょう。foreach文の中では、ノーツのタイプをチェックし、DonもしくはKaのGameObjectをSpawnPointの位置に新しく作成し、Notesに追加しています。ボタンを押した時に、譜面を読み込む関数実行させるようにする。[ボタンオブジェクト].onClick.AsObservable().Subscribe(_ =&gt; 実行したい関数)で、オブザーバーがボタンを押したイベントを検知し、関数を実行してくれる。GameManagerという名前でGameObjectを作成し、GameManager(Scripts)をアタッチしてください。右から左へノーツを流す想定なので、画面外の右側にSpawnPointという名前で、画面内の左側にBeatPointという名前でGameobject作成してください。SpawnPointがノーツの初期位置、BeatPointがノーツを弾く位置になります。「Assets　→　Prefabs」にDonという名前のPrefabとKaという名前のPrefabを作成しましょう。
DonとKaはノーツになります。※自分のノーツはアウトです。みなさんはまねしないでください(イラレで作成)。UIにSetChart、Playという名前のButtonを設置してください。
SetChartを押すことで譜面データを読み込ませます。最後に、GameManagerのGameManager(Script)の変数をセットしましょう。
FilePathは譜面のJsonが設置しているパスを直接入力してください。
他は、ドラッグアンドドロップで登録していってください。ノーツを動かすロジックの一部分(ノーツを動かし始めるタイミングの管理)の実装は後で行います。NoteControllerではノーツの動きの管理をさせます。肝となるロジックであるノーツを動かすロジックが含まれます。「Plugin　→　Scripts」にNoteController.csを作成します。ノーツの移動スピード、発射タイミングを管理するため、Type、Timing、Distance、During、firstPos、isGo、GoTimeを作成する。Type ・・・ ノーツのタイプ
Timing ・・・ ノーツを発射させるタイミング
Distance ・・・ ノーツの初期位置から弾く位置までの距離
During ・・・ ノーツの初期位置から弾く位置までにかける時間
firstPos ・・・ ノーツの初期位置
isGo ・・・ ノーツが発射しているかTypeとTimingは譜面データに、DistanceとDuringはGameManagerが管理しているので、GameManagerから値を登録できるようにしています。setParameterはノーツを出現させるときに、goはノーツ発射のタイミングでGameManagerから実行させます。this.UpdateAsObservable()はUpdate関数と同じ働きをします。
ここでは、ノーツが発射しているかをチェックし、発射していればノーツの位置を計算して動かしています。DonとKaに作成したNoteController(Script)をアタッチしてください。先ほど作成したNoteControllerのsetParameterとgoを用いて、実際にノーツが動くようにします。ノーツを動かすために必要になる変数を管理するため、PlayTime、Distance、During、isPlaying、GoIndexを作成する。PlayTime ・・・ ゲーム開始時の時間
Distance ・・・ ノーツの初期位置から弾く位置までの距離
During ・・・ ノーツの初期位置から弾く位置までにかける時間
isPlaying ・・・ ゲーム中か
GoIndex ・・・　Notesの発射対象のノーツのインデックス今回はノーツの初期位置から弾く位置までにかける時間を2000(ms)として、GameManager読み込み時に変数に値をセット。ゲーム開始時のゲーム時間をPlayTimeにセットします。
また　isPlayingをtrueにし、OnEnableで書かれているthis.UpdateAsObservable()を動かし始めます。isPlayingがtrueになったタイミングで、発射するノーツがあるかチェック、発射させるタイミングかどうかをチェック、全てのチェックを通れば実際にNoteControllerのgoを発火させています。ここまで実装できれば、実際に動かしてみましょう。
音もならないし、ノーツを弾くこともできないけれども、ノーツが流れていくのはみれるはずです。音ゲーはタイミングが命なので、できる限りずれが生じないように実装しなければいけません。
UnityはGameObjectを作るときの処理が重いので、ゲーム開始前にノーツを読み込ませる等ちょっとした工夫がとても大切なので意識しておきましょう。次回は実際にノーツを弾けるようにします。【Unity】音ゲーの仕組みを学び「〇〇の達人」をUnityで作る　パート2


