
    private Task WorkerThread5(int num, int taskTime)
    {
      Random rnd = new Random();
      int progressCount = 0;
      Task&lt;Task&gt; taskList = new Task&lt;Task&gt;();
      // 時間のかかる処理
      for (int i = 0; i &lt; num; i++)
      {
        var list = panelList.ToArray();//Clone()
        taskList.Add(Task.Run(() =&gt;
        {
          MyPanel panel = list[i]
          changeColor(panel , Color.DodgerBlue);//初期化
          System.Threading.Thread.Sleep(rnd.Next(taskTime));
          changeColor(panel , Color.Yellow);//処理中
          System.Threading.Thread.Sleep(rnd.Next(taskTime));
          Color c = Color.Lime;
          if (rnd.Next(100) &lt; errorRate)//超シンプルな確率判定
            c = Color.Red;//エラー色
          changeColor(panel , c);//完了
          lock (Thread.CurrentContext)
            progressCount++;
          reportProgress(progressCount, num);//進捗%更新
        }));
      }
      Task.WhenAll(taskList);
    }

    private Task WorkerThread6(int num, int taskTime)
    {
      Random rnd = new Random();
      int progressCount = 0;
      var list = panelList.ToArray();//Clone
      Task&lt;Task&gt; taskList = new Task&lt;Task&gt;();
      // 時間のかかる処理
      foreach (MyPanel panel in list)
      {
        taskList.Add( Task.Run(() =&gt;
        {
          changeColor(panel , Color.DodgerBlue);//初期化
          System.Threading.Thread.Sleep(rnd.Next(taskTime));
          changeColor(panel , Color.Yellow);//処理中
          System.Threading.Thread.Sleep(rnd.Next(taskTime));
          Color c = Color.Lime;
          if (rnd.Next(100) &lt; errorRate)//超シンプルな確率判定
            c = Color.Red;//エラー色
          changeColor(panel , c);//完了
          lock (Thread.CurrentContext)
            progressCount++;
          reportProgress(progressCount, num);//進捗%更新
        }));
      }
      // このメソッドからの戻り値
      return Task.WhenAll(taskList.ToArray());
    }
  }

