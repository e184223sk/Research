More than 1 year has passed since last update.重たい処理をTaskにしたり、Parallel.For, Parallel.ForEachしたり良くするのですが、細かい挙動が期待通りにならなかったりします。そのた度に実験コードを書いたりしていたのですが、結局実験コードを書くのに時間がかかってしまって本末転倒になりがちです。
そこで、自身用に並列処理の挙動をメモします。新しい例を作る度に追記していきます。以下のようなお試しプログラムをWinFormで作成しました。昔のデフラグをイメージしました。

・num は処理するタスク数。小さな■の数です。一つのタスクは初期状態を緑として、灰→青→黄→緑 の順に遷移します。
・error% は指定した確率でエラー判定を起こします。エラーの時、黄→赤と遷移します。本記事ではただ色が違うだけでそれ以外の意味を持ちません。
・taskTime 一つの状態遷移にかかる時間です。毎回Rand() % taskTime 分待機を行います。500の場合は0～500ms待機します。ただし、灰→青は初期化処理を想定し待機時間無しとします。Task.Run()でタスクを実行しています。
実験用アプリなのでエラーチェックは割愛しています。コードは下記の通り。Sleepでランダム時間(0～taskTime)待機しているだけです。
Parallel.Forで並列化しました。結果は下記のとおりです。オレンジとか変な色が出ているのはgif圧縮によるものです。
Parallel.ForEachで並列化しました。Parallel.Forで並列化、Sleep部分はawaitで待機しました。Parallel.For自体は一瞬で完了し、メインスレッド(UI)に戻りました。その後Sleepのタスクが完了しています。
awaitなので
さらに、個々のタスクは最後に登録した物から実行されています。Parallel.ForEachで並列化、Sleep部分はawaitで待機しました。
Parallel.Forと同じくForEach自体は一瞬で完了し、メインスレッド(UI)に戻りました。その後Sleepのタスクが完了しています。
Forの時と違うのは、Sleepタスクの実行順に偏りがあることです。Case3, 4は挙動がCase1,2と違ってしまっているため、一旦TaskをListに詰めてからTask.WhenAllしてみました。
(修正 19.1.14)Task生成部分がParallelになっていたのを通常のfor/foreachに変更。左がCase5, 右がCase6です。青→黄→緑の処理順になりました。
Case5&amp;6のTask.WaitAll版です。
gifだと表示タイミングが合わない...公平に分配されるのはParallel.Forのようです。動作も感覚通りといった感じです。 分配については1ループの中身を.NETのPartitionerが判断して決定します。 ForEachは動かし方で挙動が結構変わるので、今回のようにテストをしてから使用したほうが良いと思います。思わぬハマり所になる~可能性があります~。 ハマりました。ハマったところを後述します。
Case5～8のように、一旦Listに詰めてから完了を待つ場合は特に挙動の差は生まれませんでした
並列化部分はちょっといじるだけで挙動はどんどん変化しますので、今回のサンプルは自分の勉強に使えそうな気がします。
また、実行環境によっても挙動は変化する可能性があります。重要なのは今回のようなサンプルを都度作りながら動きを確認することだと思います。今回は8つのケースを作ってみました。場当たり的に作成したので無意味なケースもあるかもしれません。他にも思いついたら情報を足していこうと思います。Reactive Extensions、TPL Dataflowもこんな感じで可視化出来たら面白そう。
monoではどんな動きするんだろう。今回のコード(VS2015)(保存した後拡張子のjpgを消してください。)
地図サイトからある地点の周辺地図を取得する際、中心点から周辺へ徐々に読み込んでいく処理をParallel.ForEachで実装したところ、上手くいきませんでした。
処理の流れとしては
・各タイルに中心点からの距離を格納
・距離が近い順にソート
・近い順に並列処理で読み込んでいく
実行したところ、以下例のように等分割されました。(分かりやすいように2並列)

ForEachは内部でPartitionerという部分でこの分割を制御しており、Parallel.ForEachの引数でPartitionerを指定することができます。PartiionerにはNoBufferingとNoneがあり、デフォルトはNoneで最も最適な処理となるように分割されます。
しかし、今回のようなケースではアプリケーションの意図した分割ではないので、NoBufferingを指定してみます。上記のPartitioner指定でParallel.ForEachしたところ、以下のように配列の並び順を重視した並列化となりました。
await Task.Delay
最近だと、Sleep()は使用せずに、await Task.Delay()の使用をよく使用すると思います。
SleepとTask.Delayでも挙動が変わる模様。
後日更新予定。19.08.13 タイトルをTask.For, Task.ForEach→Parallel.For, Parallel.ForEach に修正


