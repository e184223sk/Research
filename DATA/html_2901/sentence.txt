More than 1 year has passed since last update.もくじ
→https://qiita.com/tera1707/items/4fda73d86eded283ec4fWindows Iot Coreを使って、I2Cに接続するデバイスと通信したい。
たまたま手元にある掲題の9軸センサで、I2Cで通信する練習をしたい。下記の機材とソフトを使用する。また、下記のようなイメージで作業を進める。下記のような回路を作成する。
下記のような手順で、通信を行う。I2Cデバイスの制御に必要な、下記のusingを追加する。上の[センサとのやり取りの流れ確認]のところで確認した流れを実装する。これで、センサーに、通信開始を要求したことになる。・I2CAccel.Write(WriteBuf);
引数の1バイト目に書き込みたいレジスタのアドレス、2バイト目以降にそのレジスタ以降に書き込みたいデータをいれておくと、書き込みを行ってくれる。I2CAccel.WriteRead(WriteBuf, ReadBuf)
WriteBufに読み込みたいアドレス、ReadBufに呼んだデータのバッファを渡すと、WriteBufで指定したレジスタから読んだデータをReadBufに入れてくれる。
指定したレジスタアドレスから何バイト読むかは、バッファ(ReadBuf)のバイト数で決まる。
(var ReadBuf = new byte[14] としてたら、勝手に先頭から14バイト読んで入れてくれる))レジスタ0x6Bに00を書き込み、レジスタ0x37に02を書き込みしている部分について
なぜこの2つに値を書き込むのか、忘れてしまった。(レジスタのデータシートを見ても、よくわからなかった)
一旦、MPU-9150ではお決まりの手順としてこのまま置いておく。
(後で調べる)⇒19/08/26追記
0x6Bの方は「Sleep解除」(こちら参照)
0x37の方は「I2Cで磁気センサ機能(AK8963)へアクセスできるようにする(BYPASS_EN=1)」(こちら参照)上のperiodicTimer = new Timer(this.TimerCallback, null, 0, 100);のところで、100msごとに呼ぶようにしたハンドラを実装する。とれたデータを、画面の各表示用テキストに書き込んでいる。
各値で計算しているのは、データシートに従い生データを意味の分かる値に計算するためのもの。
こちらを参照。パイソンでの超わかりやすいMPU-9150制御プログラム
言語は違うが、制御の流れはほぼこちらのやり方で行けると思う。すごいわかりやすい
https://qiita.com/boyaki_machine/items/915f7730c737f2a5cc79I2CDeviceクラス(MsDocs)
https://docs.microsoft.com/en-us/uwp/api/windows.devices.i2c.i2cdeviceWindows IoT Coreのサンプル
https://github.com/microsoft/Windows-iotcore-samples/blob/develop/Samples/Accelerometer/CS/9軸センサモジュールのページ
http://www.kyohritsu.jp/eclib/PROD/MANUAL/kp9150.pdfMPU-9150の通信開始手順の参考にしたもの
https://strawberry-linux.com/pub/mpu-9150-manual.pdfMPU-9150レジスタマップ
https://strawberry-linux.com/pub/RM-MPU-9150A-00.pdfデータ送信/受信時のフォーマット(1バイト目がアドレス、2バイト目が書き込みたいデータ)(５．タイミングパラメータのところ)
https://monolizm.com/sab/pdf/%E7%AC%AC16%E5%9B%9E_%E3%83%97%E3%83%AC%E3%82%BC%E3%83%B3%E8%B3%87%E6%96%99(IC2%E9%80%9A%E4%BF%A1%E7%B7%A8).pdfセンサ値の計算式参考
http://www.widesnow.com/entry/2015/09/10/061128


