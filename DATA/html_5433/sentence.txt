More than 3 years have passed since last update.小町数を使った数学パズルの第3弾です。「○○ − ○ = ○○ / ○ ＝ ○ ＋ ○ × ○ 」の○の部分に、1から9までの数がひとつずつ入るようにせよ。
真ん中の式は、割り切れる数にすること。いわゆる小町数パズルのひとつです。意外と難しいです。紙と鉛筆で解こうと試行錯誤してみましたが、僕は答えがわかりませんでした。この問題を解くには、基本的には、総当たりで調べてゆくプログラムを書けば良いですね。
それには、1から9までの数のすべての順列を求めて、その順列に対し、式が成り立つかを調べれば答えを求めることができます。
例えば、求めた順列が、3,5,6,9,8,2,1,4,7 ならば、35 - 6 = 98 / 2 = 1 + 4 * 7 という式が成り立つかを調べればいいですね。つまり、順列を求めるプログラムが書ければ、それを少し変形することで、この問題を解くプログラムを書くことができます。ということで、「C#:全ての要素を使った順列を求める」に掲載した順列を求めるクラスPermutationを利用して、問題を解こうと思います。求めた順列の一つ一つに対して、「○○ー○ = ○○ / ○ ＝ ○ ＋ ○ × ○ 」に当てはめて、式が成り立つかを調べます。「C#:全ての要素を使った順列を求める」で掲載しているコードをブラックボックスとして捉えれば、それほど難しいことをやっているわけではありません。
IskomachiExpなんて、力技のコードなので、もうすこしスッキリ書きたいなとは思ったのですが...順列を求めるPermutationクラスのコードも、最後に載せておきます。以下に示すのは、C#:全ての要素を使った順列を求めるに掲載した順列を求めるPermutationクラス2つの答えが出ましたが、最後の２つの数が入れ替わっただけなので、実質的に答えはひとつということになりますね。この記事は、Gushwell's C# Programming Pageで公開したものをに加筆・修正したものです。


