More than 3 years have passed since last update.C#ではCやC++、Pythonなどで利用されている変換指定子が直接利用できないため、
C#上からF#のライブラリを呼び出し、変換指定子付きの書式フォーマットを利用します。C++で作成されているシステムのC#への移行を行う場合等、何かしら今後利用することがありそうな気がするので、
私的メモとしてここに残しておきます。VisualStudio 2015
FSharp.Core 4.4.0.0変換指定子とは、のような形を用いて、出力するデータの書式を指定します。
例としては%dや、%.3fのような形で用いられ、それぞれ「10進数での表示」、
「小数点以下3桁までの表示」となります。変換指定子の詳しい記法等は下記参照。
http://www.tamasoft.co.jp/lc/hlp/F056.htmlC#のToString()を用いて、書式指定の文字列変換を行うことはできますが、
これはCやC++で利用される変換指定子利用とは全く違う形です。ですので、今までC++で作成してきたシステムの
何かを利用する場合、同じように利用できない場合が多いでしょう。確かに、C++のライブラリを作成してC#から呼び出すこともできますが、
stringの扱いや、型の扱い（floatの場合、intの場合、decimalの場合、stringの場合・・・）等、
ライブラリを呼び出す制御作成自体が少し大変であり、時間が掛かってしまいます。勿論、元がC++のコードで、それを移行するだけであればその方法の方が良いかとは思いますが、
現実的にはそうできない場合も多いため、今回はF#での実装を行いました。変換指定子を利用するために、F#のsprintfメソッドを利用します。
引数の型指定はせず、返り値のみの指定とし、あくまでF#のsprintfを呼び出すだけのメソッドとしています。これをC#側から呼び出せばokです。参照に追加するのを忘れないように！Format(string style,T value)というラッパーを用意し、F#のSprintFメソッドを呼び出します。
F#側では動的型付けを用いて変換を行っているので、第二引数にはジェネリック Tを用いています。
これにより、変換対象となるデータがintであっても、floatであっても、意識することなく変換を行うことが出来ます。※変換対象データと書式が合わない場合（変換指定子が.3fなのにデータがintの場合）などは適切な制御が
必要と考えられます。その場合は、Mainから呼び出されFormatを呼び出す仲介メソッドを作成し、
そこでキャスト処理等を加えてやるとよいでしょう。ニッチなメモになってしまいましたが、そのうち使う機会が訪れる・・・かも・・・？
とりあえず、表示に%d使えないからC#やめてC++で開発しよう！とかそういう判断はしたくないので、
忘れないようにします。


