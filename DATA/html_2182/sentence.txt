More than 1 year has passed since last update.副作用と参照透過性という概念がやや難しいので、C#で具体的に説明します。Wikipediaによると、ある機能がコンピュータの(論理的な)状態を変化させ、それ以降で得られる結果に影響を与えることをいうということのようです。
https://ja.wikipedia.org/wiki/%E5%89%AF%E4%BD%9C%E7%94%A8_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0)抽象的でイメージしにくいので具体的に説明したいと思います。関数を以下のようにモデル化します。関数にデータを入力して、作用（処理、加工）して、データを出力します。
プログラムでは、入力＝引数、出力＝返り値となります。
ちなみに、中には以下のように入力、出力が無い場合があります。C系の言語では、このようなものも伝統的に「関数」と呼びます。
しかし、その他の言語では「サブルーチン」とか「プロシージャ」と区別する場合もあります。
http://e-words.jp/w/%E9%96%A2%E6%95%B0.htmlここでは入力、出力があるものを関数と呼びます。
例えば以下のBai関数です。Bai関数は、となります。次に副作用を以下のようにモデル化します。出力するデータ以外に作用が働いてしまいます。
例えば以下のAdd関数です。Add関数は入力とメンバ変数iを足して出力します。
このときiも変更されます。ここで副作用の定義に立ち返ってみます。ある機能がコンピュータの(論理的な)状態を変化させ、それ以降で得られる結果に影響を与えることをいうこの定義は以下のように当てはまります。状態を変化させiを変化させそれ以降で得られる結果に影響を与えるAdd関数に同じ１を与えても、一回目と二回目で結果が違うつまり、Add関数は副作用があります。なお最初に書いたBai関数は、状態は変わらないし、何度呼んでも同じ結果が得られます。
副作用はありません。副作用を持たない関数は常に同じ結果が得られるため、動作が想像しやすいです。
そのため、この関数を利用したコードにおいて、変更やデバッグが容易になります。またWikipediaを見ると、ある式が参照透過であるとは、その式をその式の値に置き換えてもプログラムの振る舞いが変わらないと書かれています。
これも具体的に説明します。先ほどのAdd関数の例です。その式最初のAdd関数その式の値に置き換えても１に置き換えるなんと二回目の結果が変わってしまいました。プログラムの振る舞いが変わらないが成り立ちません。
つまりAdd関数は参照透過ではありません。次に最初のBai関数を試してみます。今度は結果が同じでした。
つまりBai関数は参照透過であると言えます。なお、参照透過性は関数だけでなく変数にも言えます。
https://qiita.com/Yametaro/items/1de3c2b76b8a4dc2d30d参照透過な関数は副作用が無いと言えます。
Wikipediaにも、1.同じ条件を与えれば必ず同じ結果が得られる
2.他のいかなる機能の結果にも影響を与えない
このような性質を参照透過性という[1]。参照透過な機能はそれ自身状態を持たないことで副作用と独立している。と書いてありました。
https://ja.wikipedia.org/wiki/%E5%89%AF%E4%BD%9C%E7%94%A8_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0)


