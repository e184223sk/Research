
    public class CustomLog
    {
        private static CustomLog instance = new CustomLog();

        private CustomLog()
        {
            log = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

            // ログファイルにプロセス番号も出力できるようにする
            int pid = System.Diagnostics.Process.GetCurrentProcess().Id;
            log4net.GlobalContext.Properties["pid"] = pid;

            // 出力するログファイル名を動的に変更するため設定されているFileAppenderを取得する
            const string APPENDER_NAME = "test1";
            FileAppender fileAppender = LogManager.GetRepository().GetAppenders().OfType&lt;FileAppender&gt;().First((e) =&gt; e.Name.Equals(APPENDER_NAME));

            // ファイル名を「MyLog_{YYYYMMDD}_{pid}.log」の形式に置き換え、変更前のファイルを削除する
            string file = fileAppender.File;
            if (!string.IsNullOrEmpty(file) &amp;&amp; file.Contains("MyLog"))
            {
                fileAppender.File = file.Replace("MyLog", string.Format("MyLog_{0}_{1}.log", DateTime.Now.ToString("yyyyMMdd"), pid));
                fileAppender.ActivateOptions();
                File.Delete(file);
            }
        }

        private ILog log;
        public static ILog Log
        {
            get { return instance.log; }
        }
    }

