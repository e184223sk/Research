More than 1 year has passed since last update.JavaScript Object NotationはJavaScriptから派生したものですが、2019年現在、多くのプログラミング言語にてJSON形式のデータを生成および解析するためのコードが含まれています。仕様改定の歴史としては以下のようになっています。JSONの値はobject, array, number, string, true, false, null となります。objectは0個以上の名前/値のペアを囲む、一対のトークンとして表せられます。名前はstringになります。名前の後に「:」とトークンが続き、名前と値を分けます。単一の「,」は値を次の名前から分離します。
名前と値のペアの順序に重要性はありませんし、名前文字列が一意であることを要求するものではありませんし、複数あった場合の挙動は定義されていません。arrayは0個以上の値を囲む角括弧トークンです。値は「,」で区切ります。numberは余分の先頭0が存在しない10進数です。
マイナス記号、小数点、eまたはEが付与される場合があります。
数字として表すことのできないNaNやInfinityは許可されません。10 → Numberとみなす
-10 → Numberとみなす
10.5 → Numberとみなす
1e+3 → Numberとみなす
1E-3 → Numberとみなす
-0   → Numberとみなす
0010 → Numberとみなさない
0x10 → Numberとみなさない
NaN  →　Numberとみなさないstringは「\」によるエスケープシーケンス記法を含む、「"」でくくった文字列です。\u4 hexadecimal digitsの例は以下のようになります。
・"\u3041"→"ぁ"となります。
・"\u002F"と"\u002f"は両方とも有効ここでは以下のプログラミング言語で実際にJSONを操作してみます。
・JavaScript
・Python
・C#
・PowerShell
・Excel VBAいろいろなValueを読み込むJSON大量データのJSON環境:
Windows10
node.js v10.16.0標準のJSONオブジェクトのparseとstringifyでJSONの操作が行えます。
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON出力結果：JSON.parseでJSONからJavaScriptのオブジェクトに、JSON.stringify()でJavaScriptのオブジェクトからJSONに変換できていることが確認できます。
また、num1は重複したデータですが,エラーにはならず、後優先で値が出力されています。JSON.parseのドキュメントによると引数にreviver が設定できることがわかります。
ここには関数を指定でき，JSONから取得した値を変換することが可能です。
下記の例は数値型をDecimal型に変換するサンプルとなります。出力結果出力結果より、JSON中のNumber型が全てDecimal型にJavaScriptのオブジェクトとして作成されたことが確認できます。大きなサイズのJSONファイルを操作する場合、jsonライブラリではメモリを大量に消費し解析に失敗する可能性があります。
この場合は、JSONStreamを使用する必要があります。JSONStreamを使用することで、JSONのデータを一度に全てメモリに展開することなく解析することが可能になります。ファイルストリームを作成してそれをJSONStreamのparserに渡します。
この際、オブジェクトを取得するたびに「data」イベントが発火し、すべてのストリームが完了したら「end」イベントが発火します。
このサンプルでは「data」イベント中で以下の処理をしています。
　・最初に取得したオブジェクトの内容を表示
　・dataイベントが発火した数を数えるまた「end」イベントでは「data」イベントが発火した数を表示しています。以下は出力結果になります詳しい使い方については下記を参照してください。
https://github.com/dominictarr/JSONStream環境：
Windows10
Python 3.7.4Pythonの標準ライブラリのjsonライブラリを使用することでJSONの操作を行うことが可能です。以下のサンプルは「操作対象のJSONの例」を解析するためのプログラムです。出力結果は以下のようになります。json.load()でJSONファイルを展開してJSON中のvalueをPythonのデータに下記の表に従って変換します。出力結果を確認すると上記の表にしたがって型が変換されていることが確認できると思います。
また、元データのJSONには「num1」という名称は2つ存在していますが、出力結果を見ると、後の方のデータが使用されていることが確認できます。また、json.dumps()はPythonのデータをJSONに変換しています。jsonライブラリを確認するとjson.loadにはいくつか興味深いパラメータがあります。次節ではそれらを確認してみましょう。json.loadにはparse_floatとparse_intの二つの引数があります。これらの引数にはコールバック関数が設定できます。以下は、コールバック関数を用いてJSONのnumber型をdecimalに変換した例になります。出力結果json.loadにはobject_hookというコールバック関数があります。これはJSON中にobjectを検知するたびに実行される関数です。
数値型に対するコールバック関数と同様に、これを用いてオブジェクトを任意の型に変換することも可能です。以下の例ではオブジェクト型を検知するたびに、検知した値を出力しています。出力結果出力結果を見てわかる通り、基本的に上から見ていきますが、オブジェクトの中にオブジェクトがある場合は、もっとも深い箇所から検知されていきます。
任意のオブジェクトに変換する場合は、コールバック関数の引数であるdictの全てのキーをみて判断するか、任意の項目に変換すべき型の情報を記載しておく必要があるでしょう。最近のJSONの仕様ではオブジェクトや配列を含まない場合もJSONをパースできます。
これは以下のようなコードで検証できます。jsonライブラリにおいては、この仕様を満たしています。NaNやInfinityを含む場合、デフォルトload/loadsの挙動ではnanやinfに変換されます。
また、nanやinfを含むPythonの値をdump/dumpsでJSON化した場合、NaNやInfinityに変換されます。もし、仕様と合わせてJSON中のNaNやInfinityの値をエラーとする場合は以下のようにします。これを実行すると、NaNなどを検知した場合にerrorfuncが実行されて例外が発生します。
また、逆にPythonのデータをJSON化する場合にNaNやInfinityを認めない場合は以下のような実装になります。この場合、dumps実行時にnanやinfを検出すると「ValueError: Out of range float values are not JSON compliant」が発生します。大きなサイズのJSONファイルを操作する場合、jsonライブラリではメモリを大量に消費し解析に失敗する可能性があります。
この場合は、ijsonを使用します。ijsonはイテレータのインターフェイスを経由してJSONを解析することにより、すべてのJSONデータをメモリに展開する必要がなくなります。
以下のサンプルコードは大量データのJSONを解析している例です。ijson.itemsにfile object と prefixを与えて抽出を行います。prefixを設定することで、特定の要素のみを抽出対象にすることができます。今回はarrayの各要素を取得したいので「item」を指定してます。このファイルの実行結果としては以下のように、最初のオブジェクトと、オブジェクトの総数を出力します。ijson
https://pypi.org/project/ijson/ijson - Github
https://github.com/isagalaev/ijson環境:
Windows10
VisualStudio2019
.NET 4.7.2NewtonSoftが提供するJson.NETを持ちいることでJSONに対する操作を行います。
https://www.newtonsoft.com/jsonASP.NETで開発した人は、おそらく良く見るライブラリかと思います。NuGetで以下のパッケージをインストールしてください。
JsonConvert.DeserializeObjectに型を指定しないでJSONデータを読み込むことができます。これにより、あらかじめJSONの形に合わせたクラスを用意する必要がなくなります。出力結果は以下のようになります。重複している値num1が、後優先で取得されていることが確認できます。JsonConvert.DeserializeObjectに型を指定して呼び出すことで、JSONの解析結果を事前に用意したクラスに割り当てることも可能です。このサンプルではJSONをList&lt;Member&gt;に明示的に変換することを行っています。
また、 List&lt;Member&gt;をJsonConvert.SerializeObjectを使用してJSONに戻しています。出力結果：出力結果が10.0,15.0などの小数点表記になっているのはMemberクラスのlvがdecimalのためです。大量のデータを少ないメモリで処理するにはJsonTextReaderを使用します。ファイルストリームをJsonTextReaderに渡し、StartObjectを検知する度に処理を行うことで、すべてのデータをメモリに展開せずに解析が可能になります。RFC7159で認められていないJSONをJSONとしてみなす挙動が何点かあります。
https://github.com/JamesNK/Newtonsoft.Json/issues/646たとえば以下のコードはjavascriptのJSON.parseでは例外となりますが、Json.NETでは通ってしまいます。2018年時点の仕様より多くのものを許可してしまっているということに注意しなければいけません。特に複数のプログラミング言語を使用している場合、注意が必要です。例：C#で通ったJSONがnode.jsとかでは通らないとかがあり得る。環境：
Windows10
PSVersion  5.1.17134.765
PSEdition  DesktopConvertFrom-JsonはJSONをPowerShellのオブジェクトに変換し、ConvertTo-JsonはPowerShellのオブジェクトをJSONに変換します。ConvertFrom-Json
https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/convertfrom-json?view=powershell-5.1ConvertTo-Json
https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/convertto-json?view=powershell-5.1JavaScriptSerializer classを用いて実装しているとのことですが、これはC#で出てきたJson.NET を使用しているようです。実行結果は以下のようになります。重複しているnum1は後方が優先されており、JSONのObject型はSystem.Management.Automation.PSCustomObject、JSONのArray型はSystem.Object[]に変換されています。
JSONのNumber型はInt32,Double,Decimalのいずれかの型に変換されていることが確認でき、型の取り扱いに注意が必要と考えられます。環境：
Windows10
Office16(32bit)UTF8のJSONファイルをADODB.Streamで読み込み、それをJScriptのオブジェクトに変換する方法が、下記のページに紹介されていました。How to parse JSON with VBA without external libraries?
https://stackoverflow.com/questions/19360440/how-to-parse-json-with-vba-without-external-librariesこの方法は正常に動作しないケースがあります。配列の操作ができない
ウォッチ式を見る限り配列として取得されているようだが、配列の操作が一切できない。array, objectを含まないJSONが解析できないVBA-JSONはVBAでJSONの変換を可能としたライブラリです。
https://github.com/VBA-tools/VBA-JSON使用方法としては以下の通りです。
１． 「Microsoft Scripting Runtime」を参照設定すること
２．　JsonConverter.basを取り込む
３．　下記のような実装を行う先ほどと違い配列データも正常に取得が可能になっています。ただし、最新の仕様に対応していないため、以下のようにobjectまたはarrayを含まないJSONについて仕様通り動作しません。今回は謙虚な気持ちでJSONについて調べなおしてみました。わかってたけど なにもわかっちゃいなかったことも まれによくあるので、わかったつもりになっているモノこそ基礎から見直してみることも必要かもしれません。さもないと慢心の精霊に取りつかれて「JSONはobjectまたはarrayを必ず含む必要ある！どや！( ･`ー･´)」とか言って老害っぷりをさらすことになります。Wikipedia
https://ja.wikipedia.org/wiki/JavaScript_Object_Notation
https://en.wikipedia.org/wiki/JSONhow to parse a large, Newline-delimited JSON file by JSONStream module in node.js?
https://stackoverflow.com/questions/15121584/how-to-parse-a-large-newline-delimited-json-file-by-jsonstream-module-in-node-jJson.NETドキュメント
https://www.newtonsoft.com/json/help/html/Introduction.htm


