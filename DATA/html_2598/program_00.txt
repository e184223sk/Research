#if UNITY_EDITOR
using UnityEngine;
using UnityEditor;

public class LightmapSettingsEdit : EditorWindow
{
    static EditorWindow window;
    float slider;
    Object source;
    bool isOn;

    [MenuItem("MyTools/LightmapSettingsEdit")]
    static void ShowWindow()
    {
        window = EditorWindow.GetWindow(typeof(LightmapSettingsEdit));
        window.position = new Rect(Screen.width /2, Screen.height / 2, 300, 400);
    }

    void OnGUI()
    {
        GUILayout.Space(25);

        //ここでScale In Lightmapの値を設定
        slider = EditorGUILayout.Slider("Scale In Lightmap", slider, 0, 20);

        GUILayout.Space(10);

        //＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
        //Scale In Lightmap一括変更ボタン
        //＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
        if (GUILayout.Button("Change all Scale In Lightmap"))
        {
            GameObject selectionObj = Selection.activeGameObject;

            if(selectionObj == null)
            {
                Debug.LogError("オブジェクトを選択してください");
                return;
            }

            ChangeScaleInLightmap(selectionObj);
        }

        GUILayout.Space(50);

        //ここでLightmapParametersを選択
        source = EditorGUILayout.ObjectField(source, typeof(LightmapParameters), true);

        GUILayout.Space(10);

        //＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
        //LightmapParameters一括変更ボタン
        //＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
        if (GUILayout.Button("Change all LightmapParameters"))
        {
            GameObject selectionObj = Selection.activeGameObject;

            if (source == null)
            {
                Debug.LogError("LightmapParametersを選択してください");
                return;
            }

            if (selectionObj == null)
            {
                Debug.LogError("オブジェクトを選択してください");
                return;
            }

            ChangeLightmapParameters(selectionObj);
        }

        GUILayout.Space(50);

        //ここでStitch Seamsを選択
        isOn =  EditorGUILayout.Toggle("Stitch Seams", isOn);

        GUILayout.Space(10);

        //＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
        //Stitch Seams一括変更ボタン
        //＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
        if (GUILayout.Button("Change all Stitch Seams"))
        {
            GameObject selectionObj = Selection.activeGameObject;

            if (selectionObj == null)
            {
                Debug.LogError("オブジェクトを選択してください");
                return;
            }

            ChangeStitchSeams(selectionObj);
        }

        GUILayout.Space(50);

        //＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
        //一括変更ボタン
        //＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
        if (GUILayout.Button("All Apply"))
        {
            GameObject selectionObj = Selection.activeGameObject;

            if (source == null)
            {
                Debug.LogError("LightmapParametersを選択してください");
                return;
            }

            if (selectionObj == null)
            {
                Debug.LogError("オブジェクトを選択してください");
                return;
            }

            //全部いっぺんにするだけ
            ChangeScaleInLightmap(selectionObj);
            ChangeLightmapParameters(selectionObj);
            ChangeStitchSeams(selectionObj);
        }
    }

    void ChangeScaleInLightmap(GameObject obj)
    {
        foreach (Transform child in obj.GetComponentsInChildren&lt;Transform&gt;(true))
        {
            MeshRenderer mr = child.GetComponent&lt;MeshRenderer&gt;();
            if(mr != null)
            {
                SerializedObject so = new SerializedObject(mr);
                so.FindProperty("m_ScaleInLightmap").floatValue = slider;
                so.ApplyModifiedProperties();

                Debug.Log("ScaleInLightmapを一括変更完了！");
            }         
        }
    }

    void ChangeLightmapParameters(GameObject obj)
    {
        foreach (Transform child in obj.GetComponentsInChildren&lt;Transform&gt;(true))
        {
            MeshRenderer mr = child.GetComponent&lt;MeshRenderer&gt;();
            if(mr != null)
            {
                SerializedObject so = new SerializedObject(mr);

                SerializedProperty sp = so.FindProperty("m_LightmapParameters");
                if (sp != null)
                {
                    sp.objectReferenceValue = source;
                    so.ApplyModifiedProperties();
                    Debug.Log("LightmapParametersを一括変更完了！");
                }
            }         
        }
    }

    void ChangeStitchSeams(GameObject obj)
    {
        foreach (Transform child in obj.GetComponentsInChildren&lt;Transform&gt;(true))
        {
            MeshRenderer mr = child.GetComponent&lt;MeshRenderer&gt;();
            if (mr != null)
            {
                SerializedObject so = new SerializedObject(mr);
                so.FindProperty("m_StitchLightmapSeams").boolValue = isOn;
                so.ApplyModifiedProperties();

                Debug.Log("ScaleInLightmapを一括変更完了！");
            }
        }
    }
}
#endif

