More than 1 year has passed since last update.画像の箇所にチェックを入れると、
GenerateLighting(Bake)した際に、光源からの情報をオブジェクトに焼き付けることができます。Unity触りたての頃は、何のために使うのか？という疑問がありましたが、
今となっては使わないことはありません。簡単に言うとRealTimeで光を反映させると処理が重くなってしまうからです。なので、オブジェクトが大量にあったり、光源が大量にあったりするシーンにおいては、
StaticなオブジェクトにBakeして、あらかじめ光の情報を焼き付けておくというのは重要となってきます。StaticなオブジェクトにBakeする際に、オブジェクト毎に設定が必要となる場合があります。
Staticにチェックを入れるとMeshRendererの項目にBake時の設定項目が増えます。
今回はこの増えた設定項目を変更するScriptを書きます。具体的には、ScaleInLightmap、LightmapParameters、StitchSeamsです。
他にも項目は増えますが、個人的によく変更する上記3つを一括変更することにします。一旦全部載せて、後程細かくメモ残します。実際にできたEditorWindowがこれです。
Hierarchyで選択したオブジェクト含む、子階層を全て一括で変更します。今回編集するプロパティがPublicでは無い為(?)、
MeshRenderer.LightmapParametersのようにしてプロパティにアクセスすることはできません。下記コードのように一度SerializedObjectのコンストラクタに渡して変換してから
FindPropertyを利用します。ただ、このm_LightmapParametersの見つけ方がやっかいでした。
私が行った方法としては、SceneをExplorerからテキストエディタで開きます。MeshRendererの箇所に該当するプロパティを見つけました。
少しめんどうですね。他のやり方あれば教えてください。テキストエディタでSceneを開いた状態でSceneを変更、Saveすると画像のようなエラーウィンドウが出ます。
何回かに一回、編集データが吹き飛んだので気を付ける必要がありそうです。実はこのFindPropertyをSerializedObject経由で行う理由はもう１つありまして、
それはUndoが可能になるという点です。Ctrl+Z、Ctrl+Yで元に戻せますよってことです。例えばEditor拡張で下記のように重力をOffにした場合、Undoできません。下記のように変更することでUndoが可能となります。これはInspectorでオブジェクトをアタッチできるアレです。任意のObjectの種類を指定してあげれば
public GameObject hogehogeとした時と同様の表示が行えます。2番目の引数(typeofの箇所)で型を指定します。3番目の引数のbool値はScene上のオブジェクトを参照するかどうかの設定です。GetComponent時の引数にtrueを渡すと、
非アクティブなオブジェクトからも取得が可能になります。選択したオブジェクトと、子のオブジェクトを一括で変更できるので、
Hierarchy上でグループ化したオブジェクト毎にLightmapParametersを設定するなどもできます。GameObjectに設定されたタグに応じて設定できる。。。といった拡張なども便利かもしれません。引き続き便利そうなのを思いついたら更新します。


