More than 1 year has passed since last update.今回の対象は、丸括弧でくくられた文字列オブジェクトです。
こちらの解説が分かりやすいと思います。
なので、下記では説明をさぼっています。ヘッダに%PDF-1.4を指定して、Adobe Reader DC (ver 2019.021.20056)で動作を確認。PDFの作成は
https://qiita.com/kob58im/items/8474bfd37a5bd464172c
をもとに実施。\075のようにエスケープ文字\と直後に続く1～3桁の8進数で、任意の1byteを表現できる仕様がある。
公式の7.3.4.2章の例では、(\53)の\53は\053とみなされ、+になるとあるが、直後が終端以外だとどうなるかが明記されていないように見える。1PDFファイル上の文字列：(Test\075Test\75Test\758Test\75)表示された文字列：Test=Test=Test=8Test=結論：3文字以内に0～7以外が来たら、その時点で8進数として解釈するようである。2
なお、8bitを超えるbitは無視するとの仕様記載があり、\505は\105とみなされる。こんな感じでよいはず。※注意：作成中のツールのコードから切り出してきたのでコンパイル確認はしていません。&lt;と&gt;で16進文字列をくくると、同様に文字列オブジェクトとして扱われる。PDFファイル上の文字列：&lt;35353 53 5 353\n 5353\t5355&gt;に対し、
表示された文字列：555555555Pとなった。
（35 35 35 35 35 35 35 35 35 50 と解釈されている。）
間に空白文字があっても2桁ずつ取るわけではないので注意が必要。また、1文字だけでも成立するようである。PDFファイル上の文字列：&lt;A&gt;  (0x0A = Lf) (下位に0が補填されるので0xA0)
表示された文字列：□ (表現できない文字として四角形が描画された。)0文字のケースについて
&lt;&gt;に対しては当然ながら表示はされず、Adobe Reader DC上、開いてズームイン/アウトなどの操作をしてもエラーとはならなかったため、おそらく有効なデータ（空文字列）として扱われていると思う。%%EOFは行頭でなくても認識される。
%%EOFがなくても読み込まれるようである。1～3桁という記載はあるが、3桁になるようにleading 0をつけろという記載もある。 ↩Acrobat Reader DCでの結果であり、3rd party製のツールがどこまでまじめにやっているかは不明。 ↩


