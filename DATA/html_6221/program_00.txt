// 認証情報作成時にDLしたキーファイルを実行ファイルと同じ場所に配置。
var keyFilePath = "key.p12";    
var certificate = new X509Certificate2(keyFilePath, "notasecret", X509KeyStorageFlags.Exportable);
var serviceAccountEmail = "控えておいたサービスアカウントのメールアドレス"; 

var credential = new ServiceAccountCredential(
        new ServiceAccountCredential.Initializer(serviceAccountEmail)
        {
            Scopes = new string[] { CalendarService.Scope.Calendar },   // 管理コンソールで設定したのと同じスコープ
            User = "moge@example.com"   // G Suiteの管理者アカウントを設定する。このアカウントが実行したことになる
        }.FromCertificate(certificate));

// Create the service.
CalendarService service = new CalendarService(new BaseClientService.Initializer()
{
    HttpClientInitializer = credential,
    ApplicationName = "Calendar API Sample",
});

// ドメイン内のカレンダーを取得
var cal = service.Calendars.Get("piyo@example.com").Execute();
Console.WriteLine(cal.Id);

// ドメイン内のカレンダーに予定を作成
var schedule = new Event()
{
    Summary = "APIからのテストスケジュール",
    Start = new EventDateTime()
    {
        DateTime = new DateTime(2017, 7, 10, 12, 0, 0)
    },
    End = new EventDateTime()
    {
        DateTime = new DateTime(2017, 7, 10, 13, 0, 0)
    },
    Description = "詳細"
};

service.Events.Insert(schedule, "piyo@example.com").Execute();

Console.WriteLine("press Enter key...");
Console.Read();


