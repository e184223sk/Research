More than 3 years have passed since last update.オブジェクトを動かしたりする。座標にアクセスしてテレポートさせるみたいな感じだけど、どちらかというと「力を加える」という考え方。とりあえず的な解釈として。float は小数。その値には必ず f をつけておくこと。x、y、zに移動させたいスピード値を書く。するとｘ軸、ｙ軸、ｚ軸へそのスピード値が加算されてピューっとどこかへすっ飛んでいく感じで移動する。大きければ大きいほどスピード速くなる。transform.position += (new Vector3(x軸,y軸,z軸));  (Input.GetKey (KeyCode. ボタンとかアクション ))   {
// やってほしい事
}ここではキーボードの矢印キーを設定しただけ。ボタン押されれば、変数ｘとかｙとかｚで設定した値がプラスされる。＋＝で加算なので、ー＝にすれば逆に減算される。最初にmvspという変数作っておく。void Update()内で、さっきやったスクリプト内でTime.deltaTimeと掛け合わせる。Time.deltaTimeは １フレームの時間が値として格納された関数みたいな奴で、３０FPSなら１÷３０＝０．０３３３３という値が格納されている。 これで再生環境に左右されず意図したスピードが再現可能。移動する系統のスクリプトでは頻出っぽい。speedでスピードを設定しておく。void FixedUpdate()は呼び出し回数が一定しているメソッドで、キーを押してアクションする時によく使われる。（対してUpdateは一秒間内に数十回呼び出されるのでマウスを動かすような頻繁な頻度で求められるらしい）GetCompornent&lt;コンポーネント&gt;で、自分のコンポーネントへアクセスする。この場合だと、このスクリプトは動かしたいナニカに貼っつけているので、そのナニカ＝cubeとかsphereとかのオブジェクトを参照する。なので、物理計算するrigitbodyというコンポーネントをくっつけておく必要があるInspectorの「Add compornent」からphisycs→rigidbodyを選択。rigidbodyMass = 質量。ｋｇ（キログラム）
Drag = 空気抵抗。０で空気抵抗ゼロ
Angular Drag = 回転の空気抵抗
Use Gravity = Unityでの重力計算を使うかどうかRigidbodyという型の変数「situryou」にGetComponentでゲットしたデータを受け渡している。そしてそのsituryouにAddForceで力を加えている。AddForceはRigidbodyに力を加えて動かしたりする時に使う。


