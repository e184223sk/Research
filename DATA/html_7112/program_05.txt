
public enum AnyType
{
    TypeA,
    TypeB,
    TypeC,
    TypeD,
}

public class AnyClass : MonoBehaviour
{
    [SerializeField]
    public AnyType AnyType;

    [SerializeField][HideInInspector]
    private string _anyName = "";

    [SerializeField][HideInInspector]
    private bool _anyBool = false;

    [SerializeField][HideInInspector]
    private Vector3 _anyVector = Vector3.zero;

    [SerializeField][HideInInspector]
    private float _anyFloat = 0f;

    // ... actual define.
}

#if UNITY_EDITOR
[CustomEditor(typeof(AnyClass))]
public class AnyClassInspector : Editor
{
    private AnyClass _target;
    private SerializedProperty _anyNameProperty;
    private SerializedProperty _anyBoolProperty;
    private SerializedProperty _anyFloatProperty;
    private SerializedProperty _anyVectorProperty;

    private void OnEnable()
    {
        _target = target as AnyClass;

        // 各種Propertyを取得する
        _anyNameProperty = serializedObject.FindProperty("_anyName");
        _anyBoolProperty = serializedObject.FindProperty("_anyBool");
        _anyFloatProperty = serializedObject.FindProperty("_anyFloat");
        _anyVectorProperty = serializedObject.FindProperty("_anyVector");
    }

    public override void OnInspectorGUI()
    {
        base.OnInspectorGUI();

        // シリアライズされたPropertyを更新しておく
        serializedObject.Update();

        switch (_target.AnyType)
        {
            case AnyType.TypeA:
                EditorGUILayout.PropertyField(_anyNameProperty);
                break;
            case AnyType.TypeB:
                EditorGUILayout.PropertyField(_anyNameProperty);
                EditorGUILayout.PropertyField(_anyBoolProperty);
                break;
            case AnyType.TypeC:
                EditorGUILayout.PropertyField(_anyNameProperty);
                EditorGUILayout.PropertyField(_anyFloatProperty);
                break;
            case AnyType.TypeD:
                EditorGUILayout.PropertyField(_anyNameProperty);
                _anyVectorProperty.vector3Value = EditorGUILayout.Vector3Field(_anyVectorProperty.displayName, _anyVectorProperty.vector3Value);
                break;
        }

        // 更新された値を適用する
        serializedObject.ApplyModifiedProperties();
    }
}
#end

