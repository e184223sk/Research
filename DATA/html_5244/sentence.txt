More than 3 years have passed since last update.先日、MvvmCrossが6.0にメジャーバージョンアップしました！
.NET Standard 2.0対応や、NuGetパッケージが統合されたりと、色々新しくなっています。本記事では、新しくなったMvvmCrossを使ってアプリ開発を始めるための、セットアップ方法を紹介します。
できたものはこちらに置いてあります。もっと簡単な方法を書きました。
MvvmCrossで簡単にアプリ開発を始める準備共通ロジックのプロジェクトは、.NET Standard 2.0で作成します。
今回は、プロジェクト名を「MvxStarterApp.Core」、ソリューション名を「MvxStarterApp」にします。次に、Android、iOSのプロジェクトをソリューションに追加します。
Androidは、テンプレートは[Android アプリ]を選択して、アプリ名を「MvxStarterApp」、プロジェクト名を「MvxStarterApp.Droid」にします。iOSは、テンプレートは[単一ビューアプリ]を選択して、アプリ名を「MvxStarterApp」、プロジェクト名を「MvxStarterApp.iOS」にします。プロジェクトが作成できたら、Android、iOSの両プロジェクトに、MvxStarterApp.Coreの参照を追加します。さらに、Androidには、Mono.Android.Exportも追加します。NuGetを使って、MvvmCrossをインストールします。
「MvvmCross」と検索をかけて、出てきた[MvvmCross]を選択して、インストールします。これを全てのプロジェクトに対して行います。以前のバージョンでは、「MvvmCross.StarterPack」というパッケージをインストールすれば、必要なファイルも含めてインストールすることができたのですが、6.0からは使えなくなってしまいました。なので、必要なファイルは、手動で追加していきます。Coreプロジェクトには、ここにある以下のファイルを追加します。App.cs.ppは、App.csにリネームして、ルートに追加します。ソース内の$rootnamespace$は、MvxStarterApp.Coreに置き換えます。MainViewModel.cs.ppは、ViewModelsフォルダを作って、その中にMainViewModel.csにリネームして追加します。こちらも、ソース内の$rootnamespace$は、MvxStarterApp.Coreに置き換えます。さらに、using MvvmCross.Commands;の追加も行います。注意点として、必ずリネームをした後にファイルの追加を行ってください。そうしないと、謎のビルドエラーに悩まされることになりま。自動で作られるClass1.csは使わないので、削除しておきます。Androidプロジェクトには、ここにある以下のファイルを追加します。LinkerPleaseInclude.csは、ルートに追加します。ソース内の$YourNameSpace$は、MvxStarterApp.Droidに置き換えます。SplashScreen.cs.ppは、SplashScreen.csにリネームして、こちらもルートに追加します。ソース内の$rootnamespace$は、同じくMvxStarterApp.Droidに置き換えます。MainView.cs.ppは、Viewsフォルダを作って、その中にMainView.csにリネームして追加します。こちらも$rootnamespace$は、MvxStarterApp.Droidに置き換えます。残りのファイルも追加していきます。
MainView.axml、SplashScreen.axmlは、Resources/layoutフォルダに、SplashStyle.xmlは、Resources/valuesフォルダに、splash.pngは、Resources/drawableフォルダにそれぞれ追加します。自動で作成されるMainActivity.cs、Resources/layout/Main.axmlを削除します。MainApplicationクラスをルートに作成します。以前のバージョンでは、初期化処理のために、Setupクラスを作成する必要がありましたが、6.0からは、MvxAndroidApplicationを継承したApplicationクラスを作成するように変更になりました。iOSプロジェクトには、ここにある以下のファイルを追加します。LinkerPleaseInclude.csは、ルートに追加し、以下の修正を行います。Androidでも追加したLinkerPleaseIncludeですが、どこからも呼ばれていないし、一見意味のないクラスのように見えます。このクラスは、バインディングで使用するプロパティが削除されてしまうのを防ぐ為のものです。Xamarinには、アプリサイズ削減のため、使われていないプロパティやメソッドを削除する機能があり、AndroidでReleaseビルドを行なったり、iOSで実機で動かしたりすると、その機能が有効になり、他に使われていないなら、バインドするプロパティに指定していても、削除されてしまいます。それを防ぐために適当にプロパティを使っているこのクラスを追加しているのです。MainView.cs.ppとMainView.designer.cs.ppは、Viewsフォルダを作って、その中にそれぞれMainView.cs、MainView.designer.csにリネームして追加します。そして、ソース内の$rootnamespace$をMvxStarterApp.iOSに置き換えます。
MainView.xibもViewsフォルダに追加します。自動で作成されるMain.storyboard、ViewController.cs、ViewController.designer.csを削除します。AppDelegateを以下のように修正します。iOSも以前は、MvxIosSetupを継承したSetupクラスを作る必要がありましたが、デフォルトのままななら、AppDelegateの修正だけで済むようになりました。info.plistを修正します。「メインインターフェース」に「Main」と入っていますが、ここを空にしておきます。以上でセットアップは完了です。実際に動かしてみましょう。始めるまでちょっと面倒ですが、MvvmCrossは使いこなせればとても強力なフレームワークなので、ぜひ使ってみてはいかがでしょうか。


