追加調査した結果タイトルを見直しました。旧タイトル：
C# - NumericUpDownコントロールはHexadecimal=trueで使用すると0x80000000が負になる(せっかくValueがDecimal型なのに入力値がInt32でConvertされる)NumericUpDownコントロールは下記のように、数値の入力をUp/Down操作するのに使いやすいコントロールです。マイコンのシミュレータをフルスクラッチでつくろうというクレイジーなことをやり始めたときにはまった話。。NumericUpDownコントロールはHexadecimalをtrueにすると16進法で数値を表示できるのですが、32bit以上を扱おうとすると厄介な問題が発生しました。Maximumを0xFFFFFFFFとかにし、Minimumを0にして、スピン（？）（コントロールの右端の上下の▲のボタン）をいじってるときはよかったんですが、、コントロールに直接FFFFFFFFとかを入力すると、0になるんですよ。。。　えっ？？？
ってなりましたが、さすがにもうこの手の現象には慣れてきて、どうせ内部でInt32に変換しているんだろうなと思ったら案の定でした。。。ILSpyで確認してみた。ヤッパリネ。。なんでInt32やねん・・・。けちくさい・・・。コメントを頂いて、Hexadecimalをtrueに設定して使用した際の振る舞いとか、
今回やりたいこと（0～0xFFFFFFFF1（あえて型は問わず、16進数8桁を入力・設定できるユーザインタフェースをFormに置きたい。）ができないか追加で調べてみた。しっかり制約事項が書かれていました。。。※日本語サイトのほうは訳が壊れていたので英語のほうを引用しています。
https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.numericupdown.hexadecimal?view=netcore-3.1#remarksWhen the Hexadecimal property is set, the UpdateEditText method is called to update the spin box's display to the new format.
When the Hexadecimal property is set to true, the Maximum property should be set to Int32.MaxValue and the Minimum property should be set to Int32.MinValue.▼を押したらFFFFFFFFが表示される（今回の使い方が一応実現できる）と思ったら、16桁になった。。↓↓なぜかこっちはlong (Int64)。。Decimal構造体 - Microsoft Docsもしくは0x80000000( $= -2^{31} = $Int32.MinValue)～0x7FFFFFFF($= 2^{31}-1=$ Int32.MaxValue) ↩


