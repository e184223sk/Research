前回 : 2Dトップビューのマップと衝突判定の投稿から1年以上立ってるというのがまず驚きでした  
前回の投稿時期を見るに突発案件などで社畜みが上がり始めた頃ですね。ということで、久々にゲーム制作お勉強の気力が湧いたので今回はRPGの定番である「宝箱からアイテムをゲットする」をやります。
が、説明をしっかり書きたいので今回は、話しかけたら会話メッセージを表示するところまでです。
(ウインドウ作成のところだけ、だいぶ前にやってたので若干記憶がうろ覚えです）をやっていきます。今回はスクリプト成分多めです。フリー素材は前回と同様に下記のサイトのものを利用させてもらっております。
ぴぽや倉庫2D RPGといえばキャラが動いたら次は戦闘なのか街での会話なのかというぐらい大事（たぶん）な処理ですね。とりあえず、前回マップチップやキャラをおいたのと同様に「話しかけたら会話を始めるキャラ」のオブジェクトを置きましょう。(前回参考)

貫通しないように、Box Collider 2Dで衝突判定。画面にも見えていますがこのあと「MessageCharactor」というScriptを作っていきます。
（ちなみに、これだけだと実際に動かした際に思うように動かないハズですがそれは後ほど。try &amp; errorで学習していく流れです  )まずは文字を表示するためのメッセージウインドウを作っていきましょう

…明らかにこれまでのウインドウと大きさに差がありますが、とりあえず無視してください。
実行時によしなに大きさが変わる設定もあります。まずHierarchy上で、ウインドウ用のオブジェクトを生成していくのですが右のmessage_window以下はそれぞれ↓のような役割を担います。CanvavsやImage・Textは、 右クリック -&gt; UI から一覧が表示されます。まずは、Canvaｓのオブジェクトを作成して、下記のような設定をしていきます。
主にCanvas Scalerの設定を変更していきます。他の値は、とりあえず今の所はそのまま(上の画像と同じ)でOKです。上記通りにImageのオブジェクトが表示されるので、ImageのComponentの設定を変更していきますここまでいくと、message_windowが表示できる枠いっぱいに設定した色の枠が表示されるので、上のRect Transformで調整をしていきましょう。ここでの設定はmessage_windowに対しての座標で設定していきます。最後に、メッセージを表示するためのテキストオブジェクトを設定していきます。
参考までに画像は貼りますがやることはかんたん。作ったウインドウの上に乗るように位置や幅の調整。お好みにあわせて文字サイズやフォントなどを設定するぐらいです。※独自フォントの設定や、場面によって使い分ける。といったことはまたいずれ。
これでウインドウの設定は完了しました。実行すればウインドウが画面したにいい感じに出せているかと思います。
ただこのままだとなにもないのにウインドウが表示されたままになるので、インスペクタ左上のチェックボックスのチェックを外しましょう。
次項のスクリプトでウインドウの表示 / 非表示を制御していきます。ここからC#成分がゴリゴリ増えます。
とりあえずC#学んで見るのもいいですが、とりあえず動かしてから後で学んで見るでもいいと思います。
（by モチベーションドリブンで勉強するマン）最初に学ぶときはあまり継承関係意識しないほうが理解しやすいとは思いますが、後ほど作ることが見えていて
同じコード複数書くのは大変なのでここでは下記の様に作っています・次回、宝箱用スクリプトに対してもこのクラスを親として使います。余談ReActionのwindowの表示/非表示のタイミングも、これから作っていくオブジェクトによって要/不要やタイミングが異なるかもしれないので、共通化するかどうかは後々検討していきましょう  つまりこんなイメージです。枠はそれぞれ(少女・魔王)のオブジェクトに設定しているColliderの範囲を可視化したものです
(グラフィックソフトで雰囲気伝わりやすくしただけのもの）青Colliderに対して、赤Colliderの領域が接触した瞬間がOnTriggerEnter2D
青Colliderから赤Colliderが離れた瞬間がOnTriggerExit2D
が呼ばれるタイミングになります。
(OnTriggerStay2Dという領域の中で呼ばれるコールバックメソッドもありますが、今回は不要なので省略しています)で、それぞれのメソッドでフラグをON/OFFする際に「領域に入ってきたオブジェクトがプレイヤーかどうか」を↓のような呼び出しでチェックしている。ということです。
これでまず、「接触しているかどうか」の判定を解決します。いきなりStartCoroutineという処理が呼び出されていて「コルーチンとはなんぞや？」と思われるかと思います。
プログラミングよくやる人なら聞いたことあると思いますが、多分今後もなにかとお世話になると思うのでざっくりと説明を書いておきます。
コルーチン - Unity マニュアル など調べて出てくるものがたくさんあるので参考まで。コルーチンとは、擬似的な処理の並列化です。マルチスレッドぽく見えるけど、シングルスレッドでやってます。
細かい話は他の皆々様が色々投稿してくれてるので参考にしましょう。なぜ今回の会話処理をコルーチンから実行するか？ というと、よくあるRPGにおける会話は↓のイメージがあるかと思います。Unity的には、常にフレームを更新したい。会話などの一時的な処理も入力を待ちたい。のに
例えばコルーチンなしでボタンの入力まちをする。ということになると、その待ちのためだけに他の処理ができなくなってしまうのです。
…厳密にはアレですが、処理をとめたくないので待ちが発生する(キー入力など)ようなイベントはコルーチンで実行することでフレーム更新を通常通り行いつつ、待ちが発生するようなイベント処理を実行させているのです。コルーチンの中で yield みたいなものを今後色々書くことになりますが、返すもので挙動が変わるので子クラスの説明にあわせて記載します前項の説明に続き、コルーチンの中での処理なので、yield return xxxx で処理を待機します。
記述による挙動の違いは下記。※他にも色々ありますが、コルーチンについてはぜひ色々調べてみてください。最後に、ここまで書いてきたコードに対してオブジェクトの設定をインスペクタで行っていきます。はUnityのインスペクタ（オブジェクトで紐づくコンポーネントが表示されている部分）で値を設定することができます。
ここで、最初につくったウインドウとテキストのオブジェクトの設定 + 話しかけたときにメッセージウインドウに表示する文章をそれぞれ追加していきます。今回みたいな一つのオブジェクトで試すだけであれば、コード上に会話文をベタで書いてしまってもいいですが
後々いろんなオブジェクトに設定することを考えた場合、当然会話内容は変えていきたいので会話文はUI上でかんたんに設定できるようにしておくと良いでしょう。上記のMessageCharactorクラスのように書くと、ObjectにAdd ComponentをしてこのScriptを追加した場合
Listのサイズが0で表示されているので、Sizeに会話の分だけSizeを指定(↓では3)すると
テキストを設定する枠が追加されます。ここまで設定して起動すると、「あれ？何も反応しないぞ」となります。
そうです。上のほうで話してたこれが原因です。（ちなみに、これだけだと実際に動かした際に思うように動かないハズですがそれは後ほど。try &amp; errorで学習していく流れです  )前回の衝突判定などをしたときにColliderを設定して、衝突判定(自動)をするところは実施しましたが
これだけでは接触したときにトリガーにまつわる機能が働かないのです。そこで Box Colliderにある 「is Trigger」にチェックをつけて実行すると今度は
キャラへの衝突判定がなくなります。魔王様に乗り放題です。
Colliderの領域に入ったことは検出できるので、エンターを押すとメッセージはでます。Box Colliderの特性としてis TriggerをONにした場合、接触など物理的な機能がなくなり
領域に物体が入ってきたか検出する機能に絞られます。これを解決するための方法はかんたんで、一つのオブジェクト（ここでは魔王様）に2つのColliderを設定して
片方はis TriggerをON。もう一つはOFFとすればOKです。ここまで来ると、歩いて魔王様にエンターキーで話しかけると↓のように会話ができるようになります。
ちょっとずつRPGが作れる気がしてきましたね  
…戦闘までの道のりはまだ長いですが  次回は、アイテムの管理と取得と保存のためのScriptableObjectについて解説していければと思います！


