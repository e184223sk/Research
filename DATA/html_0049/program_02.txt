
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using dotnet_auth_basic.Models;

//追加
using System.Security.Claims;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;

namespace dotnet_auth_basic.Controllers
{
    public class AccountController : Controller
    {
        //login(get)
        [HttpGet]
        public IActionResult Login(string returnUrl = null)
        {
            // Console.WriteLine(returnUrl);
            ViewData["returnUrl"] = returnUrl;
            return View();
        }

        //login post
        [HttpPost]
        [AutoValidateAntiforgeryToken]
        public async Task&lt;IActionResult&gt; Login(ApplicationUser user, string returnUrl = null)
        {

            //値取得
            var username = user.UserName;
            var password = user.Password;

            //パスワードが一致しない
            if (username == "hoge" &amp;&amp; password == "password")
            {

                //claimsIdentityを作成
                var identity = new ClaimsIdentity(CookieAuthenticationDefaults.AuthenticationScheme);
                identity.AddClaim(new Claim(ClaimTypes.Name, username));

                //暗号化cookie作成しサインイン
                await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, new ClaimsPrincipal(identity));

                if (!string.IsNullOrEmpty(returnUrl))
                {
                    //要認証ページからのリダイレクト等の場合
                    return Redirect(returnUrl);
                }
                else
                {
                    //loginにダイレクトにアクセスがあったときなど
                    return RedirectToAction(nameof(HomeController.Index), "Home");
                }
            }
            else
            {
                //ID,PWエラー
                return RedirectToAction("Login", "Account");
            }
        }

        //logout
        public async Task&lt;IActionResult&gt; Logout()
        {
            await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
            return RedirectToAction("Index", "Home");
        }
    }
}

