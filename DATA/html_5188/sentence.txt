More than 3 years have passed since last update.最近読んだコードが クソ 伸び代だらけで、 ムシャクシャていた 仏の気持ちになったので書きました。C言語の知識しかない状態で C# を書くと大勢の人が似たようなコードに行き着いてしまうと思います。そこで、どう書くと C# らしくなるのかを自分なりにまとめていきます。第一弾（本記事）
第二弾命名規則はプロジェクトで定められたものに従うのが勿論ですが、言語としての推奨があるので意識してほしいですよね。
名前付けのガイドライン - Microsoft DocsQiita にも記事がありました。
C# CODING GUIDELINES @Ted-HM特に気になってしまうのは以下の2点でしょう。特に命名規則において .NET のクラスライブラリは最大のお手本ですので、自身が書いたコードと見比べてみるのがいいと思います。
（VisualStudio でクラス等にカーソルをあわせて、F12 を押しましょう！）このコードは間違いではないですが、以下のデメリットがあります。なので、このように変更します。このコードでは、 for -&gt; foreach の変更以外に、引数の型が IEnumerable&lt;string&gt; に変化しました。単なる foreach で済むメソッドであれば、この様な引数を定義するのがベストです。
そうすると、以下の様に1つのメソッドで様々な型の引数を受け取れる汎用性が獲得できるのです！これにはインターフェイスが関連しているのですが、ここを理解できれば C# のレベルがグッと上がります。
（欲を言えば Linq を扱えるまでレベルアップしてほしい。）メソッドの戻り値やプロパティ等でも配列を使いがちです。
そして、こんなコードを書いてしまいます。前述の呪縛 その1 で引数が配列になっているため、それに合わせる為だというのが理由の一つだと思います。しかし、それがすでに解決済みならば List&lt;string&gt; を直接 return でき、 ToArray() による無駄なオブジェクトの生成を減らすことができます。さらに戻り値の型を IReadOnlyList&lt;string&gt; や IEnumerable&lt;string&gt; に変える事で、メソッドの外で Add() 等の変更が不可能になり、意図しないミスを防ぐ事ができます。foreach 可能で readonly なインターフェイスを以下にまとめました。
用途に合わせて必要十分なインターフェイスを選定してください。
（もちろんすべて配列と互換があります。）


