    /// &lt;summary&gt;
    /// クラスの名前に迷ったらとりあえずManagerをつければいい。
    /// &lt;/summary&gt;
    public class MapManager
    {
        public Bitmap MapImage { get; set; }
        public int MapChipSize = 32;
        public List&lt;Map&gt; Maps { get; private set; } = new List&lt;Map&gt;();
        //指定したマップチップのMapImage上での開始位置を返します。
        public Point GetMapChipPoint(int nth)
        {
            return new Point(nth * MapChipSize, 0);
        }
        //指定したマップチップの画像を返します
        public Bitmap GetMapChip(int nth)
        {
            var mcpoint = GetMapChipPoint(nth);
            Rectangle rect = new Rectangle(mcpoint.X, mcpoint.Y, MapChipSize, MapChipSize);
            Bitmap bmpNew = MapImage.Clone(rect, MapImage.PixelFormat);
            return bmpNew;
        }
        //指定したマップの画像を返します。
        public Bitmap GetMap(int nth)
        {
            var mapdata = this.Maps[nth];
            var xLen = mapdata.MapChips.GetLength(1);
            var yLen = mapdata.MapChips.GetLength(0);
            var bmp = new Bitmap(xLen * this.MapChipSize, yLen * this.MapChipSize);

            Graphics g = Graphics.FromImage(bmp);
            for(int y = 0; y &lt; yLen; y++)
            {
                for (int x = 0; x &lt; xLen; x++)
                {
                    var mapchip = this.GetMapChip(mapdata.MapChips[y, x]);
                    g.DrawImage(mapchip, new PointF(x * this.MapChipSize, y * this.MapChipSize));
                    mapchip.Dispose();
                }
            }
            g.Dispose();
            return bmp;
        }
        public MapManager()
        {
            this.MapImage = (System.Drawing.Bitmap)Bitmap.FromFile("data/image/map.png");
            //今回表示するマップのマップチップ配列。0:草原,1:山,2:家
            var integerMapChips = new int[,] {
                { 0,0,0,0,0,0,0,0,0 },
                { 0,0,0,0,0,0,0,0,0 },
                { 0,0,2,0,0,0,0,0,0 },
                { 0,0,0,0,1,0,0,0,0 },
                { 0,1,0,0,0,0,0,0,0 },
                { 0,0,0,0,0,0,0,0,0 },
                { 0,0,0,0,0,0,0,0,0 }
            };
            this.Maps.Add(new Map() { MapChips = integerMapChips });
        }
    }
    /// &lt;summary&gt;
    /// これいるの？
    /// &lt;/summary&gt;
    public class Map
    {
        public int[,] MapChips { get; set; }
    }

