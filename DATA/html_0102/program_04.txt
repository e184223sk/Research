
    public void InitializeTheme()
    {
        ThemeManager.Current.AddLibraryTheme(new LibraryTheme(new Uri(HcDarkTheme), MahAppsLibraryThemeProvider.DefaultInstance));
        ThemeManager.Current.AddLibraryTheme(new LibraryTheme(new Uri(HcLightTheme), MahAppsLibraryThemeProvider.DefaultInstance));

        var theme = GetCurrentTheme();
        // colorを設定ファイルから呼び出します
        var color = GetCurrentColor();
        // SetTheme(theme); 
        // SetThemeの代わりにcolorも設定できるようにしたSetThemeAndColorを呼び出します
        SetThemeAndColor(theme, color);

    }

    // カラー設定を呼び出す
    public Color GetCurrentColor()
    {
        if (App.Current.Properties.Contains("Color"))
        {
            Color color = (Color)ColorConverter.ConvertFromString(App.Current.Properties["Color"].ToString());
            return color;
        }
        else
        {
            return Colors.Blue;
        }
    }

    // テーマ・カラーの両方を設定する
    public void SetThemeAndColor(AppTheme theme, Color color)
    {
        if (theme == AppTheme.Default)
        {
            ThemeManager.Current.ThemeSyncMode = ThemeSyncMode.SyncAll;
            ThemeManager.Current.SyncTheme();
            ThemeManager.Current.ChangeTheme(Application.Current, ThemeManager.Current.AddTheme(RuntimeThemeGenerator.Current.GenerateRuntimeTheme("Light", color)));
        }
        else
        {
            ThemeManager.Current.ThemeSyncMode = ThemeSyncMode.SyncWithHighContrast;
            ThemeManager.Current.SyncTheme();
            ThemeManager.Current.ChangeTheme(Application.Current, ThemeManager.Current.AddTheme(RuntimeThemeGenerator.Current.GenerateRuntimeTheme(theme.ToString(), color)));
        }

        App.Current.Properties["Theme"] = theme.ToString();
        App.Current.Properties["Color"] = color.ToString();
    }


