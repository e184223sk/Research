More than 3 years have passed since last update.Azure Functions を使うときに、C# をつかうと、特に便利だ。世界最強の統合 IDE が Functions を使うときでも使うことができる。しかも、デバッグもできるし、デプロイも出来るので超便利だ。さて、いま、Azure Functions を活用したプロジェクトにいるのだが、環境変数の切り替えみたいなものはどのようにマネージしたらいいだろうか？プロダクション環境、ステージング環境、テスト環境みたいなもの。12 factors に従うと、環境変数ということになるが、それをどのようにマネージするのがよさげか？という話である。実はここらへんもうまい仕組みがあるので、それを活用していきたので、その知見をシェアしたい。まずは簡単なプログラムを書いてみよう。 Azure Functions のテンプレートを使うと、デフォルトで、local.settings.json というファイルが生成される。こちらは、Azure Functions をローカル実行するときのコンフィグを書くことができる。local.setting.jsonこのValue の中の項目は、Environment Variables になる。だから、Environment.GetEnvironmentVariable(string); のメソッドで取れるのだが、お勧めしない。お勧めは上記でつかわれているとおり、ConfigurationManager を使う方法だ。ConfigrationManager は、本来、app.config とかの内容を管理できるものだが、Azure Functions では、local.settings.json や、Azure Function を Azure 上にデプロイしたときの、App Settings の内容も取得できる。さらに、クラスになっているので、キーの一覧取得とか、必要そうなメソッドがすでに実装されている。こちらをとって実際に、Azure Functions をローカルで動作させて、実行させてみる。
ブラウザから実行してみると、環境変数も、Connection String もちゃんととれているのがわかる。ちなみに、変数名とかを間違えると、こんな例外がでるのでびっくりするかもしれないが、Object reference not set to an instance of an object. が出たときは、単に、コードから呼ばれる環境変数がみつからないだけだ。私のお勧めは、このような方法で、環境ごとに、この設定ファイルを作ることではない。Azure Functions は様々なサービスを連携させることが多いので、これらの設定ファイルを手でゴリゴリ書いていてはとても面倒だ。しかも、こういうシークレットをがっつりとリポジトリにぶち込むのも抵抗がある。じゃあ、どうするかというと、Azure 上に、このアプリをデプロイして、そこで環境を作ろう。プロジェクトを右クリックして、Publish で簡単にデプロイできる。こんな感じで、App Settings を Azure の Azure Functions 上で設定する。これが、App Settings実行してみて、動作確認する。Azure の方で、実際の Azure Functions の動作確認をしたら、どうするか？というと、Azure Functions CLI というものがあるので、それをインストールしておく。そして、このコマンドをうてばいい。すると、Azure 上の Azure Functions で設定している内容がごっそりファイルになって落ちてくる。local.settings.json は、暗号化にも、非暗号にも対応しているが、暗号化された結果が返ってくるので、中身がわからなくなっているが、ConfigrationManager はこれに対応している。こうしてあげると、ローカルで実行していても、Azure で、Azure Functions を動かしている感じで実行できる。これはいい感じだ。
だから、Azure 上で、環境構築したら、その分だけ、先のコマンドでファイルを落とせばよい。このように、環境ごとに、Azure Functions を Azure に設定したら、ダウンロードして、リポジトリにぶち込めばよい。名前は、local.settings.ushio.json みたいに個人の名前をいれておくといい。それを、local.settings.json を、.gitignore に入れておけば完了で、使いたいlocal.settings.json を都度、local.settings.jsonにコピーして使うとよい。これは、人の名前がついているので、「なんで！」と思うかもしれないが、理由は、先ほどの暗号化は、各PCのKeyを使うので、該当PCでしか解凍できないようになっているから。もし、この程度の情報はプライベートのリポジトリだからいいやという人は、平文で、のこして、IsEncrypted を false にしておくとよい。プログラムに影響はない。私もこういう方法を思いつかなかったが、イケてる同僚がこの方法だったので、学んで試してブログにしてみました。


