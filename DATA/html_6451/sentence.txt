More than 1 year has passed since last update.Task, Parallel, PLINQの使い方集。ついでに.NETの非同期APIの歴史。同期バージョン（ボタンを押した後ダウンロードが終わるまで画面が固まる）非同期バージョン（画面が固まらない）複数のWebサイトから同時にダウンロードするサンプル。最大同時並行数を抑えたい場合は、Semaphoreの仕組みが便利。C# Taskの待ちかた集 に書いたCPU主体の処理には Task.Run() が便利。IO主体の処理には別の手段が用意されている。※Task.Run() を使うとスレッドプールを有効活用できなくなるほかの便利なもの：CPU主体の処理を並列実行したいときに有用。上記のコードを実行すると、HeavyWorkA,B,Cが同時並行に動く。※CPUのコア数やスレッドプールの空き状況によっては、同時に動かないこともある。なお、Parallel クラスには Parallel.Invoke のほかに、Parallel.For や Parallel.ForEach もある。また、第一引数の ParallelOptions は省略可能。LINQで並列処理ができる。PLINQではAsParallel()以降のコードが並列化される。上記のコードでは、A(ファイル読み)はシングルスレッドで実行され、B(ハッシュ値計算)はマルチスレッドで実行される。なお、AsParallel() のあと のWithDegreeOfParallelism() は省略可能。TaskやParallelの中で発生した例外は AggregateException としてcatchできる。ただし Task を await する場合は元の Exception で catch できる。Taskの中で発生した(catch されてない)例外をまとめて処理したいときは TaskScheduler.UnobservedTaskException.NETには古い非同期APIも残されている。間違って使ってしまうことがないよう、簡単に紹介しておく。
詳細は MSDN:Asynchronous Programming Patterns で。Beginなんとか～Endなんとか。使うななんとかCompletedイベントとか。使うなasync/await. 今から始めるならこれを使えばよい。 上2つのコードはTAPではこうなる。


