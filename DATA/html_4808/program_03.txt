
    public class ContentViewModel : BindableBase, INavigationAware
    {
        private IRegionNavigationService RegionNavigationService { get; set; }

        public DelegateCommand BackCommand { get; }
        public DelegateCommand ForwardCommand { get; }

        public ContentViewModel()
        {
            BackCommand = new DelegateCommand(() =&gt; RegionNavigationService.Journal.GoBack(), () =&gt; RegionNavigationService?.Journal?.CanGoBack ?? false);
            ForwardCommand = new DelegateCommand(() =&gt; RegionNavigationService.Journal.GoForward(), () =&gt; RegionNavigationService?.Journal?.CanGoForward ?? false);
        }

        public void OnNavigatedTo(NavigationContext navigationContext)
        {
            RegionNavigationService = navigationContext.NavigationService;
            BackCommand.RaiseCanExecuteChanged();
            ForwardCommand.RaiseCanExecuteChanged();
        }

        public bool IsNavigationTarget(NavigationContext navigationContext) =&gt; true;

        public void OnNavigatedFrom(NavigationContext navigationContext){}
    }


