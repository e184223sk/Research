こちらは Unity #2 Advent Calendar 2020 の 6日目の記事です。オープンソースのネットワークライブラリ(アセット)です。プレイヤーのマッチングに公式サーバーが必要ないので
同一LAN内が担保されていれば接続が可能です。当然、サーバーをゴリゴリ頑張れば自前運用も可能です。【参考リンク】：無料で使えるネットライブラリMirrorのざっくり紹介公式Discordに参加してみましたが、
アップデートが頻繁に行われているのもあってか、
実装上の質問も飛び交って賑やかでした。(全部英語です)①同一LAN内のサーバー(ホスト)を検索
②サーバーが見つかればクライアントとして接続、なければ自身がサーバー(ホスト)になる
③サーバー(ホスト)がマッチングを確認し、ゲームを開始する
④サーバー(ホスト)、各クライアント、共にシーン遷移する一言でまとめるとオートマッチングシステムを作ります。Unity 2019.4.8f1
Mirror 26.2.2
UniTask.2.0.18左上が自動でホストになり、残りの3画面がクライアントとして接続を試みます。
同一LAN内が前提なのでIPアドレスの入力などは省略できます。まずはサーバーを検索し、接続するための処理を担うコードです。サーバーを検索、もしくはサーバーが自身の存在を通知する機能を持ちます。NetworkDiscoveryはそのまま使用することもできますが、
UIをカスタマイズしたかったり、
シーン遷移時のフェードアニメーションなどを追加したかったりする場合には
カスタムしないと難しいです。そのために継承して利用しています。StartDiscovery,StopDiscovery,AdvertiseServerなどは
NetworkDiscoveryの機能に当たります。これらの機能は名前のまんまです。
ただし、シーン遷移時にしっかりとサーバーの検索、通知を停止させないと
サーバーは停止しているのにレスポンスだけは返ってくるという謎の減少が起きるので
OnDestroyで確実にStopDiscoveryするのが安全だと思います。サーバー内のすべてのクライアント(ホスト含む)に引数で指定したデータを送信します。CustomNetworkDiscovery内ではホストがプレイボタンを押したことを各クライアントに通知しています。先ほどのSendToAllでデータが送られてきたことを検知し、
各クライアントでデータの受信時に行いたい処理を登録できます。(引数のNetworkConnectionは別になくても動きます。)やり取りするデータも別途定義が必要となります。
NetworkMessageというインターフェースを実装することで
やり取りが可能なデータとなります。次に接続にまつわるコードです。文字通りネットワークにまつわるいろいろを担います。The Network Manager is a component for managing the networking aspects of a multiplayer game.引用：Network Managerこれもあまりそのまま使う想定のものではないので、
継承してメソッドをオーバーライドしてカスタムします。コールバック含め、大量に機能があるので今回使ったものだけ解説します。接続にまつわる関数です。
StartHostを実行した場合、サーバーとクライアントの両方の役割を持つことになります。StartClientは引数に指定したアドレスのサーバーにクライアントとして接続します。StopHostは自身がサーバーならサーバーの接続を中断し、
クライアントならサーバーから抜けます。NetworkManagerはシングルトンとなっており、
インスタンスをどこからでも呼び出せます。StartHost, StartClient, StopHostは全てPublicな関数なので、
これらもどこからでも呼び出せるってことです。今回はサーバーの検索を担う、CustomNetworkDiscoveryで接続にまつわる関数を呼び出しています。そうすることで、
・LAN内にサーバーが見つかったら→StartClient
・LAN内にサーバーが見つからなかったら→StartHost
のように同一LAN内で自動でマッチングする仕組みを作れます。クライアントがサーバーから切断された場合に各クライアントで呼び出されます。このコールバックの中でシーン遷移を呼び出すことで
切断→シーン遷移　という処理が可能となります。すなわち、接続状態にあるクライアントでStopHostを呼び出せば
下記処理が呼ばれるということです。Mirrorにはプレイヤーという概念があります。
誤解を恐れずに簡単にまとめると
サーバーに接続したクライアントのことをプレイヤーと呼び、接続時にサーバーに追加されます。このOnServerAddPlayerはプレイヤーが追加された際に呼び出される処理です。デモにおける接続された人数の表記の変更の通知(プレイヤー増加時)はOnServerAddPlayerで行っています。また、プレイヤーを概念ではなく、実体として生成する場合もあるかと思います。その場合、OnServerAddPlayerでInstantiateしてあげれば
各クライアントにプレイヤーが生成されます。ただし、この機能を利用するには
InspectorのPlayerPrefabにNetworkIdentityが付与されたPrefabを
事前に登録しておく必要があります。詳しくは知りませんがUNETという機能？がひと昔前にあったそうで、
それを改良したのがMirrorのようです。結構なビッグタイトルに採用されているようですが、
ドキュメント以外の情報がなかなか無いので苦労しました。私の今の力では及びませんがサーバー側の実装とかもいずれできるようになりたいです。(UniTaskの実装は見よう見真似でやったので間違ってたら教えてください。)


