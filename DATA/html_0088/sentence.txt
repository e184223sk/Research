前提
・Assetをインポートしすぎて60個くらいAssemblyDefinitionできちまったぜ！てへっ！
・グローバルなDebugクラスはHighBridRender(ver8.2.0)で定義されててこっちで定義するとビルドエラー！うへっ！
　⇒やめてほしい
・AssemblyDefinitionに共通クラスを追加するの面倒だな（今後も含めて）
・ECSとか何万個のオブジェクトをゴリゴリ動かすから少しでも負荷になることは避けたい…ンゴ。やることは大まかに以下の通り。
＜手順＞
１．クラスライブラリ(DLL)を作成。
　⇒VisualStudioで適当にプロジェクト作ってビルドでおｋ
２．クラスライブラリをAssets/Pluginsのどこかにおく。
　⇒Assets/Plugins/DLLとかネストしてておｋ
３．どこででも１．で作成したクラスライブラリが使えるようになる。
　⇒＼(^o^)／やた＜メリット＞
・AssemblyDefinitionにわざわざ追加しなくていい。
　[Plugins]⇒[各AssemblyDefinition]⇒[Assembly-CSharp]の順で参照されるらしい。詳しくは知らんが動く。
　＃最初はクラスライブラリをUnityのクラスライブラリ群に突っ込んだりしていろいろ試してた。
　[Plugins]にAssemblyDefinition作って置けばいいんじゃね？っていってもできんかった。
　ワイももっと楽がしたかった＜デメリット＞
・クラスライブラリのビルド忘れとかがある場合がある。
・クラスライブラリから[Assembly-CSharp]とか[各AssemblyDefinition]の参照ができない。
　⇒１回目はプレイボタンをエラーなく押すと動くけど、２回目以降は参照がおかしいとUnity様に怒られる。
　　バグだと思っているが直るの待つのは愚策なので参照できないと割り切って作る。
　　クラスライブラリなので処理を独立させましょう。＜例＞
DebugLog用のオーバーラップクラスでいい感じに作れるんじゃないかと思われる。使用例（上記DLLを[Assets/Plugins/DLL]とかに配置後）Unity標準のDebugクラスがオープンソースコードだったら喜んでたけど探してもなかったのであきらめた
（オーバーラップしたかった）これが一番っょぃと思います。元のDebugぶっ壊せてもユーザ環境壊せんから仕方ないな、これで勘弁してやろう。
俺より強いやつに会いに行く。（いまここ）


