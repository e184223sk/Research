public class CustomExceptionFilter : ExceptionFilterAttribute
    public override void OnException(HttpActionExecutedContext actionExecutedContext)
    {
        string exceptionMessage = string.Empty;
        if (actionExecutedContext.Exception.InnerException == null)
        {
            exceptionMessage = actionExecutedContext.Exception.Message;
        }
        else
        {
            exceptionMessage = actionExecutedContext.Exception.InnerException.Message;
        }

        // Logging(exceptionMessage);
    }
}

public class CustomExceptionHandler: ExceptionHandler  
{
    public async override Task HandleAsync(ExceptionHandlerContext context, CancellationToken cancellationToken)
    {
        // Logging(context.Exception);
    }
}

public class WebApiApplication : System.Web.HttpApplication
{
    protected void Application_Start()
    {
        // 例外ハンドラの登録
        GlobalConfiguration.Configuration.Filters.Add(new CustomExceptionFilter());
        GlobalConfiguration.Configuration.Services.Replace(typeof(IExceptionHandler), new CustomExceptionHandler());
    }
}

