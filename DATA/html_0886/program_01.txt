
using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

namespace webapi_sample01
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllers();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler();
            }

            app.UseHttpsRedirection();

            app.UseRouting();

            // UseExtensions.Use
            // https://github.com/dotnet/aspnetcore/blob/425c196cba530b161b120a57af8f1dd513b96f67/src/Http/Http.Abstractions/src/Extensions/UseExtensions.cs#L21
            app.Use(async (context, next) =&gt;
            {
                // nextの前に実行したい処理
                await next();
                // nextの後に実行したい処理
            });

            // IApplicationBuilder.Use
            // https://github.com/dotnet/aspnetcore/blob/8efcca43ceaaf72281e17f25d759844f488914ac/src/Http/Http/src/Builder/ApplicationBuilder.cs#L72
            app.Use((next) =&gt;
            {
                // nextの前に実行したい処理
                return next;
            });

            // UseExtensions.Use の中では IApplicationBuilder.Use を使っていて
            // 意味的には大体こんな感じになっている
            app.Use((next) =&gt;
            {
                // 型推論が効いているおかげで簡単に書ける。気持ちいい
                // Task RequestDelegate(HttpContext context)
                return async (context) =&gt;
                {
                    // next の前に実行したい処理
                    await next(context);
                    // next の後に実行したい処理
                };
            });

            app.UseAuthorization();

            app.UseEndpoints(endpoints =&gt;
            {
                endpoints.MapControllers();
            });
        }
    }
}

