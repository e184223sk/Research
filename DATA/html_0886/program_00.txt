using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

namespace webapp01
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // Configureメソッドを実行する前にランタイムから呼び出される
        // DIコンテナにサービスを登録する
        // 登録したサービスはアプリケーション全体(Configureメソッドも含む)で使用できる
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddRazorPages();
        }

        // ランタイムから呼び出される
        // httpリクエストを処理するパイプラインを定義する
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Error");
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
            }

            // httpで接続してきたクライアントをhttpsで再接続させる
            // https://docs.microsoft.com/en-us/aspnet/core/security/enforcing-ssl?view=aspnetcore-3.1&amp;tabs=visual-studio#usehttpsredirection
            app.UseHttpsRedirection();

            // 静的ファイルを返せるようにする
            // https://docs.microsoft.com/en-us/aspnet/core/fundamentals/static-files?view=aspnetcore-3.1
            app.UseStaticFiles();

            // リクエストの内容に応じて、アプリで定義したエンドポイントを選択する
            // https://docs.microsoft.com/ja-jp/aspnet/core/fundamentals/routing?view=aspnetcore-3.1
            app.UseRouting();

            app.Use(async (context, next) =&gt;
            {
                // UseRoutingの後に配置したミドルウェアではhttpコンテキストからエンドポイントの情報を取得できる
                // リクエストに対応するエンドポイントが存在しない場合はendpointの値はnullになる
                var endpoint = context.GetEndpoint();
                Console.WriteLine(endpoint?.DisplayName ?? "not found");

                await next.Invoke();
            });

            app.UseAuthorization();

            // エンドポイントとデリゲートを関連付ける
            app.UseEndpoints(endpoints =&gt;
            {
                endpoints.MapRazorPages();
            });
        }
    }
}


