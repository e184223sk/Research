

        void Awake()
        {
            mAgent = GetComponent&lt;NavMeshAgent&gt;();
            InitAnim();
        }

        void Update()
        {
            switch (State)
            {
                case STATE.FOLLOW:
                    UpdateFollow();
                    break;
            }
        }

        private Transform mTarget; // 追従する対象
        private int mOrder; // フォロワーの並び順

        /// &lt;summary&gt;
        /// 指定された対象の追従を開始
        /// &lt;/summary&gt;
        public void Follow(Transform target, int order)
        {
            mTarget = target;
            mOrder = order;
            State = STATE.FOLLOW;
        }

        //-----------------
        // アニメーション //
        //---------------------------------------------------------------------------------

        private Animator mAnimator;
        private int mIdIsRun;

        private void InitAnim()
        {
            mAnimator = GetComponent&lt;Animator&gt;();
            mIdIsRun = Animator.StringToHash("IsRun");
        }

        //----------------
        // NavMeshAgent //
        //---------------------------------------------------------------------------------

        private readonly float START_DISTANCE = 1.0f;
        private readonly float STOP_DISTANCE = 0.8f;

        private NavMeshAgent mAgent;

        public void SetSpeed(float spd)
        {
            mAgent.speed = spd;
            mAgent.acceleration = spd * 4.0f;
        }

        private void UpdateFollow()
        {
            mAgent.SetDestination(mTarget.position);

            float remainingDistance = mAgent.remainingDistance;
            if (remainingDistance &gt; START_DISTANCE)
            {
                mAgent.isStopped = false;
                mAnimator.SetBool(mIdIsRun, true);
            }
            else if (remainingDistance &lt;= STOP_DISTANCE)
            {
                mAgent.velocity = Vector3.zero; // 減速ではなくピタっと止める
                mAgent.isStopped = true;
                mAnimator.SetBool(mIdIsRun, false);
            }
        }


