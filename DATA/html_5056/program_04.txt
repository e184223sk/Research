

        //-------------
        // 当たり判定 //
        //---------------------------------------------------------------------------------

        private readonly string TAG_POPUP_POINT = "PopupPoint";

        void OnTriggerEnter(Collider other)
        {
            if (State != STATE.IDLE &amp;&amp; State != STATE.RUN) return;

            // ポップアップポイントに接触した
            if (other.tag == TAG_POPUP_POINT) TakeFollower(other.GetComponent&lt;PopupPoint&gt;());
        }

        //-------------------
        // フォロワーの追従 //
        //---------------------------------------------------------------------------------

        private List&lt;FollowerModel&gt; mFollowerList = new List&lt;FollowerModel&gt;();

        /// &lt;summary&gt;
        /// 連れているフォロワーの数によって移動速度を再設定
        /// &lt;/summary&gt;
        private void SetSpeed()
        {
            int followerCount = mFollowerList.Count;
            mSpeed = MAX_SPEED - DEC_SPEED_VALUE * followerCount;
        }

        /// &lt;summary&gt;
        /// 接触したポップアップポイントに待機中のフォロワーが存在する場合はそのフォロワーを連れていく（追従させる）
        /// &lt;/summary&gt;
        /// &lt;param name="popup"&gt;&lt;/param&gt;
        private void TakeFollower(PopupPoint popup)
        {
            if (!popup.IsExsistFollower()) return;

            // フォロワーに追従させる対象を決定する（すでにフォロワーが追従している場合は一番後ろのフォロワーを対象にする）
            Transform target = mTrans;
            int followerCount = mFollowerList.Count;
            if (followerCount &gt; 0) target = mFollowerList.Last().gameObject.GetComponent&lt;Transform&gt;();

            // フォロワーの追従開始
            FollowerModel follower = popup.DeleverFollower();
            follower.Follow(target, followerCount);

            // フォロワーをリストに追加し、プレイヤーとフォロワーの移動速度を再設定
            mFollowerList.Add(follower);
            SetSpeed();
            foreach (FollowerModel model in mFollowerList)
            {
                model.SetSpeed(mSpeed);
            }
        }


