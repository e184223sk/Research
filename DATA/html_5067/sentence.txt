More than 3 years have passed since last update.ミニゲームを作ってUnityを学ぶ！[ひつじコレクション編]前回はユニティちゃんアセットを使用してプレイヤーが操作するキャラクターを作成しました。
今回はゲームの舞台となるステージをスクリプトで動的に生成していきます。はじめに、ステージを構成する部品として以下のアセットをストアからインポートします。Low Poly:Foliage続いて、下の画像をダウンロードして「FloorTexture」という名前でプロジェクトにインポートします。まずはインポートしたFloorTextureを使ってステージの地面に当たる部分を作っていきます。次はステージ上でプレイヤーの通行できないエリアを形成するブロックを作成します。
今回の舞台は森の中ですので、ブロックには木のオブジェクトを利用してみます。ちなみに、今回利用したLowPoly:Foliageに含まれているプレハブにはLODという仕組みが導入されています。参考:  LODでパフォーマンスを向上させるステージを構成する部品が準備できましたので、次はステージの構造をまとめたテキストファイルを作成します。stage_1.txtは先頭にアットマークの付いた識別子と、それに続いて具体的な内容を数字とカンマで表したテキストファイルです。@Popupより下は次回以降に対応しますので今は特に何の効果もないと考えてください。先ほどのファイルを読み込んでステージを動的に生成するためのスクリプトを作成していきます。StageConstructorはLoadStage()で指定されたステージのデータが入ったファイルを読み込み、その内容を1行ずつ処理していくことでステージを生成しています。上記がファイルを読み込んでいる部分です。
Resourcesフォルダに入っているアセットにアクセスするためにはResources.Load()を使用します。参考:  特殊なフォルダについて - KAYAC enginner's blog尚、Unity公式のResourcesフォルダのベストプラクティスによるとResourcesフォルダを使わずにAssetBundleを使用するように推奨されていますので、そちらについても参考となるサイトをご紹介させていただきます。参考: AssetBundleとは - (:3[kanのメモ帳]続けて、ステージを管理するマネージャーを作成します。ゲーム開始時にStageManagerのStart()が呼ばれた際にStageConstructorのLoadStage()を呼び出すことで対応したファイルからステージを生成します。ステージを動的に生成することができましたが、ここで新しく2つの問題が発生しました。1つ目の問題についてはオブジェクトの大きさに合わせてテクスチャのタイリングを自動的に調節することで対応します。2つ目の問題についてはカメラをプレイヤーに追従させることで対応します。これで無事に問題が解決しました。
プロジェクトを実行してプレイヤーを自由に操作してみてください。次のページに進む
イントロダクションに戻る

この作品はユニティちゃんライセンス条項の元に提供されています


