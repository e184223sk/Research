
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using animJump;
using JumpState = animJump.JumpState;

public class PlayerStateController : MonoBehaviour
{
    ///&lt;summary&gt;
    ///    ジャンプ処理に使用するRigidbody
    ///&lt;/summary&gt;
    private Rigidbody _rigidBody;

    ///&lt;summary&gt;
    ///    ジャンプアニメーションを担当するAnimator
    ///&lt;/summary&gt;
    private Animator _animator;

    ///&lt;summary&gt;
    ///    ジャンプの各状態を保持しておく辞書リスト
    ///&lt;/summary&gt;
    private Dictionary&lt;JumpState, IJumpState&gt; _jump_state_list;

    ///&lt;summary&gt;
    ///    ジャンプの以前の状態を記憶しておく
    ///    これと比較することで状態の変更を識別する
    ///&lt;/summary&gt;
    private JumpState _state_old = JumpState.IDLE;

    ///&lt;summary&gt;
    ///    現在のジャンプの状態を保持
    ///&lt;/summary&gt;
    private IJumpState _state_instance;

    ///&lt;summary&gt;
    ///    ジャンプ力に関する情報を保持
    ///&lt;/summary&gt;
    private JumpData _jump_data;

    ///&lt;summary&gt;
    ///    プレイヤーキャラクターと地面間の距離に関する情報を保持
    ///&lt;/summary&gt;
    private JumpDistance _jump_distance;

    ///&lt;summary&gt;
    ///    キーを押している間に溜めるジャンプ力の1フレーム分
    ///&lt;/summary&gt;
    [SerializeField] private float _jump_power_up;

    ///&lt;summary&gt;
    ///    ジャンプ力の上限
    ///&lt;/summary&gt;
    [SerializeField] private float _jump_power_max;

    ///&lt;summary&gt;
    ///    上昇中から下降中に切り替わる変化の検知精度
    ///&lt;/summary&gt;
    [SerializeField] int distance_list_limit;

    ///&lt;summary&gt;
    ///    下降中から接地したと判定する距離
    ///&lt;/summary&gt;
    [SerializeField] float ground_distance_limit;

    ///&lt;summary&gt;
    ///    プレイヤーキャラクターと地面間の計測距離上限
    ///    最高高度より高い値でないと、ジャンプ頂点での下降モーションへの切り替わりが出来ません
    ///&lt;/summary&gt;
    [SerializeField]float raycastSearchDistance;

    public void Start()
    {
        _rigidBody = GetComponent&lt;Rigidbody&gt;();
        _animator = GetComponent&lt;Animator&gt;();
        _jump_data = new JumpData(_jump_power_up, _jump_power_max);

        _jump_distance = new JumpDistance(
            transform,
            distance_list_limit,
            ground_distance_limit,
            raycastSearchDistance
        );

        _jump_state_list = new Dictionary&lt;JumpState, IJumpState&gt; {
            { JumpState.IDLE, new JumpStateIdle(_animator) },
            { JumpState.WAITING, new JumpStateWaiting(_animator, _jump_data) },
            { JumpState.RISING, new JumpStateRising(_animator, _jump_data, _jump_distance, _rigidBody) },
            { JumpState.FALLING, new JumpStateFalling(_animator, _jump_distance) },
            { JumpState.LANDING, new JumpStateLanding(_animator) },
        };

        _state_instance = _jump_state_list[JumpState.IDLE];
        _state_instance.enter();
    }

    public void Update()
    {
        var state = _state_instance.stayUpdate();
        if (state == _state_old) return;

        _state_instance.exit();
        _state_instance = _jump_state_list[state];
        _state_instance.enter();
        _state_old = state;
    }

    public void FixedUpdate()
    {
        _state_instance.stayFixedUpdate();
    }
}

