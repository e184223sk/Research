More than 1 year has passed since last update.UnityでButtonのクリック時のコールバックメソッドをスクリプトから定義する時のような感じで書くと思います。調べると今まで曖昧だったデリゲートと関連することが分かったので、調べたことを記事にしたいと思います。記事を書こうと思ったら、すでに模範解答のような記事を見つけました。
良記事なので、そちらを参照してみても良いかもしれません。AddListenerはUnityEventクラスのパブリックメソッドでのように定義されています。ランタイムコールバックの追加をこの関数はしています。注目すべきは引数にUnityAction型のコールバックメソッドを指定しているところです。
一体UnityActionとは何なのでしょうか。ではUnityActionの定義を見てみましょう。となっています。つまり戻り値、引数なしのdelegateにすぎないと分かります。
UnityActionを理解するにはデリゲートについて理解していないとだめですね。まずは言葉の定義から。Microsoft公式ドキュメントよりデリゲートは、特定のパラメーター リストおよび戻り値の型を使用して、メソッドへの参照を表す型です。デリゲート自体はあくまでメソッドへの参照を表す型。
１つ簡単な例をあげておきます。定義したデリゲートをインスタンス化する時、同じ戻り値の型、引数リストを持つ関数を参照することができ、参照された関数はそのデリゲートインスタンスを通して呼び出されるということですね。他にもデリゲートはクラスメソッド、インスタンスメソッドのどちらも参照することができます。
また便利な機能として、マルチキャストデリゲートと言って複数のメソッドを代入することができます。どんな状況でデリゲートの力が発揮されるのか分かれば、デリゲートへの理解も深まると思います。（実際、僕自身デリゲートをわざわざ使う理由が中々分かりませんでした。）「++C++; // 未確認飛行 C」のデリゲートの利用例を参考にすると、などが主な利用例だそうです。今回理解したいUnityActionがイベント処理に用いられているのもここからわかりますね。後のサンプルを見ると、よりデリゲートのイメージが湧くかもしれません。デリゲートを引数や戻り値として用いることで、デリゲートを通して関数をもっと自由に扱えるようになる（関数を呼ぶタイミングを調整できたり、実行する関数を状況に応じて変更できたり）ことがデリゲートを使う利点なのではないでしょうか。サンプルとして、ボタンを押したらwebから画像を引っ張ってきて、それをシーン上のimageUIに貼り付けるということをしてみます。シーンにimageとbuttonを用意します。
canvasに以下のUIController.csというスクリプトを貼り付けます。まずは、UnityAction型のデリゲートにコールバック関数としてOnButtonClickedを渡す。
そうすることでボタンがクリックされた時に、OnButtonClickedが呼ばれることになります。結果
特に解説するようなことは何も書いていないのですが、LoadImage関数の引数を見ると、ここでも自分で定義したデリゲートを使用しています。第二引数のコールバック関数には、戻り値の型と引数リストさえ合っていれば良いので、のような画像を保存するような関数を渡したりもできますね。AddListenerで登録したOnButtonClicked()関数なのですが、わざわざコルーチンを実行するためだけに関数を定義したくないというのが本音です。そこで匿名関数（匿名メソッドとラムダ式があるが、今回はラムダ式）を用いると、インラインで処理内容を記述できるようになります。匿名関数、ラムダ式に関しては【LINQの前に】ラムダ式？デリゲート？Func？な人へのまとめ【知ってほしい】を参照してくだされば分かるかと。また、LoadImage関数でもと引数にImageProcessingというデリゲートを指定していますが、このためだけにデリゲートを作るのもあまり格好が良いとは言えませんし、そもそもデリゲートって型なので名前をつけるのちょっと難しいんですよね。今回それを解決してくれるのが、 Action&lt;T&gt;型のデリゲートです。Action&lt;T&gt;型のデリゲートは標準ライブラリが用意してくれているデリゲートです。標準ライブラリが用意してくれている主に利用するデリゲートには以下のようなものがあります。ここではAction&lt;T&gt;型を用いて変更すると、これまたスッキリ。今回はbuttonを扱いましたが、sliderとかでも基本一緒だと思います。
デリゲートはまだまだ奥が深く勉強しがいがありそうです。以下のことを今後調べたいと思います。Qiita書いたのほぼ初めてだったのですが、学んだことを言語化して記事にするのって中々大変なのだなと感じました。
いつも読むばかりだったので、これからは継続的に学んだことのアウトプットとして記事を書いていけたらなと思います。最後の方は、体力切れてしまったので、少しあやふやな部分が多いです。もし誤り等あればご指摘お願いします。また、以下の観点からコメント頂けると嬉しく思います！以下今回調べるに当たってお世話になった参考資料です。
ありがとうございました。インターネット万歳。(MSDN)
Delegate Class
Delegate(C# Programming Guide)
MulticastDelegate Class
(++C++; // 未確認飛行 C)
デリゲート
デリゲートの利用例
デリゲートの内部
(Qiita)
【LINQの前に】ラムダ式？デリゲート？Func？な人へのまとめ【知ってほしい】
(Unity Documentation)
Unity Action
Button.onClick
UnityEvent.AddListener
(書籍）
『独習C#新版 山田 祥寛著 』


