using GoogleVR.Beta;
using UnityEngine;

public class ViewModeChange : MonoBehaviour
{

    GvrControllerInputDevice gvrControllerInputDevice;

    [SerializeField]
    GameObject[] hideDuringSeeThrough;

    void Start()
    {
        gvrControllerInputDevice = GvrControllerInput.GetDevice(GvrControllerHand.Dominant);

        bool supported = GvrBetaSettings.IsFeatureSupported(GvrBetaFeature.SeeThrough);
        bool enabled = GvrBetaSettings.IsFeatureEnabled(GvrBetaFeature.SeeThrough);
        if (supported &amp;&amp; !enabled)
        {
            GvrBetaFeature[] features = new GvrBetaFeature[] { GvrBetaFeature.SeeThrough };
            GvrBetaSettings.RequestFeatures(features, null);
        }
    }

    void Update()
    {
        if (gvrControllerInputDevice.GetButtonUp(GvrControllerButton.App))
        {
            SeeThroughModes();
        }
    }

    void SeeThroughModes()
    {
        if (!GvrBetaSettings.IsFeatureEnabled(GvrBetaFeature.SeeThrough))
        {
            return;
        }

        GvrBetaSeeThroughCameraMode camMode = GvrBetaHeadset.CameraMode;
        GvrBetaSeeThroughSceneType sceneType = GvrBetaSeeThroughSceneType.Augmented;

        switch (camMode)
        {
            case GvrBetaSeeThroughCameraMode.Disabled:
                camMode = GvrBetaSeeThroughCameraMode.ToneMap;
                break;
            case GvrBetaSeeThroughCameraMode.ToneMap:
                sceneType = GvrBetaSeeThroughSceneType.Virtual;
                camMode = GvrBetaSeeThroughCameraMode.Disabled;
                break;
        }

        GvrBetaHeadset.SetSeeThroughConfig(camMode, sceneType);

        bool seethruEnabled = camMode != GvrBetaSeeThroughCameraMode.Disabled;
        foreach (var go in hideDuringSeeThrough)
        {
            go.SetActive(!seethruEnabled);
        }

    }
}


