More than 3 years have passed since last update.息抜きと趣味のプログラミングも兼ねて作成してみました。
作ってみたと書いてはいますが下記の記事の発展版みたいな感じです。
デスクトップマスコットの作り方
上記の記事の内容までできていることが前提となります。表示したモデルをデスクトップ内をマウスで自由に移動させたいですよね。
移動させようと思うと少し面倒かもしれません。
というのもマウスの座標はスクリーン座標、モデルはワールド座標を使用しており、これらの座標を合わせてあげる必要があります。
ワールド座標、スクリーン座標について記述するとそれだけで長くなるのと私も完璧に理解しているわけではないので私が勉強しているリンク先を載せておきます
座標変換
モデルの描画について・マウスポインタがモデル上にあるかの判定
まずは左クリックした際にマウスポインタがモデル上にあるかの判定です。
考え方としてはマウスを左クリックした際に線分を飛ばし、それがモデルに当たればマウスポインタはモデル上にあると判定します。
その際に線分の始点、終点はワールド座標へ変換します。
コードにすると下記のような感じです。抜粋しているので変なところもありますがこんな感じです。
EdgeInputは前回のフレームでは押されていなくて今回のフレームでは押されているボタンのみの押下状態を格納しております。
何もないところをクリックしてからオブジェクト上にマウスを動かした際にクリックしたと判定されるとまずいからです。線分の始点、終点の座標をそれぞれConvScreenPosToWorldPos関数でワールド座標に変換しています。
MV1CollCheck_Lineで線分とモデルの当たり判定をしています。・モデルの移動
次にマウスの移動に合わせてモデルを移動させる処理です。
処理としては
モデルをクリックしたときの座標を保存しておき、左クリックが離されるまでその座標との差分で計算する。
モデルの移動値にはマウス座標の移動分をそのままモデルの移動分とするのではなく、マウスがクリックした３Ｄ座標にマウス座標の移動分を加味した３Ｄ座標の差分をモデルの移動値とする。
*マウスでクリックしたスクリーン座標とモデルの３Ｄ座標をスクリーン座標化したものが離れていればいるほどマウスカーソルを移動した際の誤差が大きくなるためコードは下記のようになります一度スクリーン座標でマウスの移動値を計算しておき、その移動値をモデルと線分が当たった時のスクリーン座標に足し、それをワールド座標に変換します。
そしてクリック時のモデルのワールド座標にマウスがクリックした３Ｄ座標にマウス座標の移動分を加味した３Ｄ座標の差分をモデルの移動値を加算しています。
移動値には掴んだときのモデルと線分が当たった座標分も含まれてしまっているのでこちらを引いておきます。引かないとクリック時にモデルの原点がクリックした座標に飛んで行ってしまうと思います。全体のコードです分かりにくいところもあると思いますが参考になったら幸いです。
変数の定義とかの部分は省略しています。
私はこれを関数化して使用しています。
個人的には3Dの当たり判定、座標変換の勉強にはなったと思いました。次回はホイールの動きに合わせてのモデルの拡大縮小を書こうと思います。


