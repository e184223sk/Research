int MouseX, MouseY ;

// マウスカーソルの座標を取得
GetMousePoint( &amp;MouseX, &amp;MouseY ) ;
// マウスボタンの入力状態を更新
PrevInput = NowInput ;
NowInput = GetMouseInput() ;
EdgeInput = NowInput &amp; ~PrevInput ;

// 既にモデルを掴んでいるかどうかで処理を分岐
if( Catch == 0 )
{
　　　　// 掴んでいない場合

    // 左クリックされたらモデルをクリックしたかを調べる
    if( EdgeInput &amp; MOUSE_INPUT_1 )
    {
        VECTOR ScreenPos1 ;
        VECTOR ScreenPos2 ;
        VECTOR WorldPos1 ;
        VECTOR WorldPos2 ;

        // モデルとの当たり判定用の線分の２座標を作成
        ScreenPos1.x = ( float )MouseX ;
        ScreenPos1.y = ( float )MouseY ;
        ScreenPos1.z = 0.0f ;

        ScreenPos2.x = ( float )MouseX ;
        ScreenPos2.y = ( float )MouseY ;
        ScreenPos2.z = 1.0f ;

        WorldPos1 = ConvScreenPosToWorldPos( ScreenPos1 ) ;
        WorldPos2 = ConvScreenPosToWorldPos( ScreenPos2 ) ;

        // モデルの当たり判定情報を更新
        MV1RefreshCollInfo( ModelHandle, -1 ) ;

        // モデルと線分の当たり判定
        MV1_COLL_RESULT_POLY Result = MV1CollCheck_Line( ModelHandle, -1, WorldPos1, WorldPos2 ) ;
// 当たっていたら掴み状態にする
        if( Result.HitFlag )
        {
            // 掴んでいるかどうかのフラグを立てる
            Catch = 1 ;

            // 掴んだときのスクリーン座標を保存
            CatchMouseX = MouseX ;
            CatchMouseY = MouseY ;

            // 掴んだときのモデルのワールド座標を保存
            Catch3DModelPosition = MV1GetPosition( ModelHandle ) ;

            // 掴んだときのモデルと線分が当たった座標を保存( 座標をスクリーン座標に変換したものも保存しておく )
            Catch3DHitPosition = Result.HitPosition ;
            Catch2DHitPosition = ConvWorldPosToScreenPos( Catch3DHitPosition ) ;
        }
    }
}

