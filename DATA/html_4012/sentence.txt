More than 1 year has passed since last update.前回、ListViewをXAMLで定義する場合の最小限のコードを書きました。【Xamarin.Forms】ListView の CustomCell を XAML で定義する上記の記事でListViewとその中身のCustomViewCellをXAMLで定義できるようになりましたが、これではまだデータソースに変更があった場合にUIが更新されません。そこで、今回はデータソースの変更に合わせて自動でUIが更新されるよう修正を加えたいと思います。今回は以下の記事を全面的に参考にしています。ListViewで学ぶコレクションのBind通知 - @furugen上記の記事との差分としては、getterにラムダを使っていることと、nullチェックを今風の書き方にしているくらいかと思います。まずはデータソースを任意のタイミングで変更できるよう、以下2種類のボタンを追加しておきます。XAMLにボタンを2つ追加し、StackLayoutでレイアウトを整えます。1コードビハインド側にはボタンタップ時に実行されるメソッドを追加します。これで、ボタンの準備は完了です。現状ではこのボタンを押してScheduleListDataの中身を追加・変更しても特にUIに変化はありません。では、ここから動的なListViewのUI変更に対応していきます。まずデータがScheduleListに追加された場合に、追加された項目がリストへ自動で表示されるようにします。対応内容自体は簡単で、データソースの型にList&lt;T&gt;ではなくObservableCollection&lt;T&gt;を使うだけです。実行すると、以下のように"Append Data"ボタンを押すたびにリストの項目が1件ずつ追加されているのがわかるかと思います。ObservableCollection&lt;T&gt;は、Microsoftのドキュメントによると項目が追加または削除されたとき、あるいはリスト全体が更新されたときに通知を行う動的なデータ コレクションを表します。とのことです。詳しい仕組みはまだ調査できていませんが、要するにObservableCollection&lt;T&gt;をListViewのデータソースとして利用することで、ObservableCollection&lt;T&gt;が発する通知をListViewが受信し、UIを更新してくれるような作りになっているのだと思います。ObservableCollection&lt;T&gt;はリスト自体の状態の変化は検知できても、リストに格納される一つひとつのインスタンスの状態の変化は検知しません。そのため、個別のデータのプロパティが変化してもUIには反映されません。個別のデータのプロパティの変化を検知してListViewがUIを動的に変更できるようにするために、INotifyPropertyChangedインターフェースを利用します。先ほどのObservableCollection&lt;T&gt;がやっていた変更通知を自分のデータクラスにも実装してあげるイメージですね。この方法はListViewに限らずC#においてModelがプロパティの値の変更を通知する手段としてよく利用されるもののようです（調査中）。というわけで、Scheduleクラスを以下のように修正します。上記を対応したコードが以下になります。動作確認をすると、"Change Title"ボタンを押すと１件目の予定のタイトルが"The Concert is Canceled!!!"に変化しているのが分かります。これで、個別のデータのプロパティが変化した場合も、動的にUIが変化するようになりました。AndroidやiOSのネイティブアプリを経験していると、notifyDatasetChanged()やreloadData()のようなメソッドがListViewにあるのではないかという気がしてきますが、見た感じXamarin.FormsのListViewにはそのようなメソッドはありませんでした。Xamarin.Formsでは、リストのUIは自分で更新するものではなく、データバインディングの仕組みを利用してデータ側からListViewへ通知を送り、UIが自動で更新されるものと考えるのがよさそうです。コードはGitHubで公開しています。chooyan-eng/XamarinPractice今回の記事の分のコミットは以下のあたりです。ContentPageは子ビューを1つだけとるレイアウトですので、ListViewとボタンを並べるStackLayoutをさらにStackLayoutでひとまとめにする必要がありますので注意です。 ↩


