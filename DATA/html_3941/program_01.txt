
using System;
using System.Runtime.InteropServices;
using UnityEngine;

public class WindowHandle : MonoBehaviour {
    [DllImport("user32.dll")]
    public static extern IntPtr GetActiveWindow();

    IntPtr hWnd;    // 自ウィンドウのハンドルをここに取得したい

    bool isHandleConclusive = false;    // ハンドルが確かならtrueとするフラグ

    void Start () {
        hWnd = GetActiveWindow();
        isHandleConclusive = false;
    }

    private void Update()
    {
        if (!isHandleConclusive)
        {
            if (Input.anyKey)
            {
                RetakeMyWindowHandle();
            }
        }
    }

    /// &lt;summary&gt;
    /// 別アプリとの間でフォーカスが移ったら呼ばれます
    /// &lt;/summary&gt;
    /// &lt;param name="focus"&gt;こちらにフォーカスがあたればtrue。外れた際はfalse&lt;/param&gt;
    private void OnApplicationFocus(bool focus)
    {
        if (!isHandleConclusive)
        {
            if (focus)
            {
                RetakeMyWindowHandle();
            }
        }
    }

    /// &lt;summary&gt;
    /// 現在のアクティブウィンドウを自ウィンドウとしてハンドル取り直し
    /// &lt;/summary&gt;
    private void RetakeMyWindowHandle()
    {
        IntPtr activeHWnd = GetActiveWindow();
        if (activeHWnd == IntPtr.Zero) {
            // アクティブウィンドウハンドルが取得できていなさそうなら、何もしない
        }
        else if (hWnd == activeHWnd)
        {
            // 前に取得したハンドルと今のアクティブウィンドウのハンドルが一致すれば
            // 自ウィンドウが確実に取得できているだろうとしてフラグを立てる
            isHandleConclusive = true;
        }
        else
        {
            // 前に取得したハンドルが今のアクティブウィンドウのハンドルと一致しなければ
            // 今のハンドルを有効とする

            // もし既にhWndを使って何かしてあれば、ここで戻す

            // 今アクティブなウィンドウを自ウィンドウとする
            hWnd = activeHWnd;
        }
    }
}

