More than 1 year has passed since last update.Android向けに開発したSDKをUnityアプリに対応させる場合、プラグインを作ってSDKとUnityアプリの橋渡しをしてやる必要があります。Android向けネイティブプラグインの実装方法は複数存在しますが、本記事ではUnityPlayerActivityを継承する方式を紹介します。iOS向けプラグインとの共通部分の実装については共通編を参考にして下さい。 BaseNativeActivityはUnityPlayerActivityを継承したクラスです。SampleやSampleLifecycleといったSDKで定義されたクラスのメソッドを代理で呼び出すことで、Wrapperとしての役割を果たしています。SampleUnityListenerはSDK側のコールバックをUnity側へ伝えるためのクラスです。SDK側で定義されたリスナークラス、SampleListenerを実装しています。build.gradleの一例です。 SDK本体(SampleSDK-*.jar)に加え、UnityPlayerActivity等のクラスをimportするためclasses.jarをlibsディレクトリに含めていますが、ビルド時は不要のためexcludeしています。またUnity側から名前解決する必要があるため、minifyもfalseにしています。AndroidStudioの場合、Build -&gt; Make Moduleからaarを作成することができます。ビルドしたaarはUnityプロジェクトのAssets/Plugins/Android配下に置くと良いでしょう。また、コンパイル時に使用しているclasses.jarの取得方法等についてはこちらを参照して下さい。Sample_Android.csはISampleを実装したクラスで、プラグイン側で実装したクラス（BaseNativeActivity)にアクセスすることでUnityアプリとSDKの橋渡しを行います。UnityプロジェクトのAssets/Plugins/Android配下に置くAndroidManifestの一例です。前述のBaseNativeActivityを記載しています。一部のクラスに対するMinifyの回避等の設定を行いたい場合、proguard-user.txtを作成してUnityプロジェクトのAssets/Plugins/Android配下に置いておくと、AndroidプロジェクトとしてExportした際に自動的に反映してくれます。下記を必要に応じてUnityプロジェクトのAssets/Plugins/Android配下に配置して下さい。
- SDK本体(jar/aar)
- プラグイン(jar/aar)
- AndroidManifest.xml
- proguard-user.txt


