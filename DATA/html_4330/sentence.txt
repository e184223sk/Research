More than 1 year has passed since last update.ヒルベルト曲線とは、ドイツの数学者ダフィット・ヒルベルトが考案したフラクタル図形の一つで、再帰的に定義できる空間充填曲線です。大抵の人は、「ああ、どこかで見たことある」と思うような図形です。ヒルベルト曲線は、コの字の形状を基本図形とし、以下の４つの基本描画ルールの再帰的組合せで描くことができます。描画ルールのアルファベットはそれぞれ、の意味です。n が 0 の時には、何も描画しません。例えば、Rul(1)なら、右、上、左なので、コ字型の図形ということになります。Ldr(4) とすれば、逆コの字を基準に４次のヒルベルト曲線を描画します。コンソールアプリケーションとして作成しています。以下、主なクラスです。プログラムをつかさどるクラス。HilbertCurveとDrawerを使って、図形を描画しています。
ここで、曲線の次数を与えています。なお、次数を9以上にすると極端に結果がでるまでに時間がかかるようになります。当然ブラウザでこのファイルを描画するのも時間がかかります。ヒルベルト曲線を定義しています。やっていることは、前述のヒルベルト曲線の定義をそのままC#のコードに落としたものです。
UrdやRulなどから始めても良いのですが、ここでは、Ldr を元となる図形としました。
ただ、ここで実際の線は引いていません。HirbertCurveクラスは、IObservableを実装していて、
線を引く代わりに、購読者クラス(Drawer)にその状態の変化を伝えています。
描画という行為からは完全に独立しています。描画を受け持つDrawerクラスは、IObserverを実装している購読者クラスです。
HilbertCurveからの通知を受け取り、線を描いて行きます。線を描くのに、Canvasクラスを利用しています。NGraphicパッケージを利用して、線を描いています。結果はpngファイルにしています。※ ソースコードは、GitHubで公開しています。以下は、 Ldr(5) で、5次のヒルベルト曲線を描いた結果です。いやー、実に不思議な形をした図形です。この記事は、Gushwell's C# Programming Pageで公開したものを大幅に変更・加筆したものです。


