More than 1 year has passed since last update.「.Net Core 3.1について調べてみよう」その２です。 
Visual studio 2019でASP .Net Coreのプロジェクトを作成するとlaunchSettings.jsonとappsettings.jsonがプロジェクトに追加されています。これらのファイルの使い方が気になったので調べてみました。Visual Studio等の開発環境で、アプリケーションを起動する際の環境とパラメータを指定するために使用されます。commnadNameによって以下のように分けられます。dotnet runで実行した場合は、Projectの設定で実行され、Projectの設定が複数ある場合、ファイルの最初に定義されているものが実行されます。.Net Frameworkのアプリケーション設定ファイル（exe.config）の代わりとなるファイルです。このファイルは実行時のASPNETCORE_ENVIRONMENT環境変数によって切り替えることが可能です。
appsettings.ASPNETCORE_ENVIRONMENT.jsonファイルがあれば、appsettings.jsonの代わりに使用されます。
例えば、ASPNETCORE_ENVIRONMENT=Developmentの場合、
appsettings.Development.jsonファイルがあれば、このファイルが使用されます。追加した"test"をコードから読み込みます。また、直接アクセスせずにクラスにアサインすることもできます。launchSettings.jsonは、publish(発行)には含まれないので開発専用の設定ですね。
Kestrelを使用する場合、運用時の設定は、appsettings.Production.jsonに行い、Startup.csでこの設定をKestrelServerOptionsクラスにアサインすればいいようです。
この設定は、json:launchSettings.jsonのapplicationUrlよりも優先されます。そのため、appsettings.jsonに定義してしまうとapplicationUrlの設定を上書きしてしまいます。appsettings.jsonの設定を読み取る際に、IConfigrationのGetValue&lt;type&gt;("key")を使用すると、そのたびにファイルアクセスが発生するという記事を見かけたので調べてみましたが、アプリケーション起動時に１度だけ読み込んこまれてメモリ上に保存されていました。


