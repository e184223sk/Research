More than 3 years have passed since last update.XAMLデザイナでデザイナ用インスタンスを指定すると、実行時の結果が表示されるので、デザイン作業が捗ります。
しかし、デザイン用インスタンスには制限があるので、実際に使用するViewModelは使えないことがあります。
そこでデザイナ専用のViewModelコンストラクタを別途作ります。
そして、デザイナ以外からのこのコンストラクタ呼び出しを防止します。
こんなアプリを題材にします。
実行すると、ファイルから文字列を読み込んで表示するだけのソフトです。
今回は話に関係ないのでINotifyPropertyChangedは実装していません。View層はWindowの中心にUserControl、その中心にTextBlockが置いてあるだけです。Model層では生成時に指定されたファイルパスを読み取り、プロパティに設定します。ViewModel層ではMainWindowViewModelでModel・子ViewModelの生成をしています。子ViewModelではModelのファイルから読まれた文字を受け取って表示用プロパティに設定しています。実行時の動作には問題ありませんが、XAMLデザイナーで結果が表示されません。
ユーザーコントロールのXAMLデザイナーですが、真ん中にあるはずの文字が表示されません。の部分でデザイン用インスタンスとしてViewModelを生成しています。

しかしViewModelに引数なしのコンストラクタが無いとXAMLデザイナーに結果が表示されません。
また引数なしコンストラクタがあっても内部でファイルアクセスなどを実行していると、やはりXAMLデザイナーに結果は表示されません。この状態ですと実行時と違うので、デザインがしづらいです。
清く正しい解決策は
d:DataContextでデザイナ用にViewModelを設定する
のようにデザイナ用データをXAMLで作って渡すことです。しかし、膨大な表示項目があった場合、ViewModelのダミーをデザイナのためだけに作るのは正直めんどうです。
そこで簡単に済ませるために、ViewModelに（必要であればModelにも）デザイナー用のコンストラクタを作ってしまいます。
こうして、XAMLデザイナ専用の引数なしViewModelコンストラクタを作ることで、XAMLデザイナに結果が表示できました。
しかしXAMLデザイナー以外からもこのコンストラクタは呼び出せます。
どんなにヘルパーテキストで警告したところで、読まない人は読みません。そこでObsolete属性を使用してコードからの呼び出しを防ぎます。
XAMLデザイナー用のViewModelコンストラクタをこうします。呼び出すとコンパイルエラーになります。警告文も平和になりました。
第2引数をtrueにしてObsolete属性をマークすると、コードから呼ばれた際にコンパイルエラーを起こします。
ただし、Obsolete属性がついたメソッド内でObsolete属性がついたコードを呼ぶことは出来ます。
つまりデザイナ専用viewModelコンストラクタでデザイナ専用Modelコンストラクタを呼ぶことは問題ありません。コードから呼べないObsolete属性ですが、XAMLデザイナーはこれを無視します。
ですのでXAMLデザイナー側は何も変える必要はありません。
めでたしめでたし。VisualStudio2015
VisualStudio2017
.NET Framework 4.6
C#6


