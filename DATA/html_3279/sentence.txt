More than 1 year has passed since last update.日本語Windows10の自分のPCで動かすと、出力される文字列(日本語を含む)がうまく表示されるのに、exeをコピーして英語Windows10で動かすと、文字化けしてうまく表示されなくなった。解決方法を知りたい。元のプログラムとは異なるものだが、この現象の実験のために作ったプログラムが下記。プログラムの構成としては下記の構成になっている。ポイントは、C#exeからC++dllに文字列を渡す際、「Ansi」形式で渡しているところだった。原因を追いかけていくと、exeからdllに文字列を渡したときに、化けていた。
デバッグ実行すると、受け取った文字列(下記ではtxtが、????になってしまっている。)色々調べた結果、Windowsの設定の「Unicode対応ではないプログラムの言語」から、「システムロケールの設定」を「日本語」にしてやると、改善されることが分かった。
Windows10では、下記のようにするとその設定を変更できる。システムロケールの設定を行うと、C#exeからC++dll側に、うまく日本語が渡ってくるようになる。
システムロケールの設定を変えてやれば解決できることは分かったが、どんな言語のWindowsでも大丈夫なように、システムロケールをコードで日本語に設定できないか？を試した。が、結果としては、下記のようなコードを入れてみたが、システムロケールを英語にしていると受けた文字列が「????」になってしまい、うまくいかなかった。やったこと
- C#側でThread.CurrentThread.CurrentCulture = new CultureInfo("ja-JP");
- C++側でstd::setlocale(LC_ALL, "ja_JP");とりあえず、一旦解決しているので置いておくが、時間があれば調べる。システムロケールが英語のままにしたい場合は、Unicodeを使うように、C#、C++のコードを直すことでも対応はできる。これで、システムロケールが英語でも、正しく日本語文字列を渡すことができる。今回のC++dll側のようなchar*で文字列をやりとりしているようなプログラムのことを、今のWindows的には「Unicode対応ではないプログラム」と位置付けている。Unicode対応ではないプログラム(dll)に対して、引数で文字列を渡すようなときは、Windowsはシステムロケールの設定をもとに、その文字列がなにかを判定してやりとりさせている(っぽい)。だから、NativeMethodのstaticクラスのところでメソッドをImportするときに、CharSet =CharSet.Unicodeとか[MarshalAs(UnmanagedType.LPWStr)]と書いていても、「日本語である」ということが分かっていないため、うまく渡せない(っぽい)。マーシャリング(++C++)
https://ufcpp.net/blog/2016/12/tipsstringmarshal/


