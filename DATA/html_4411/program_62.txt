
public class UpdatePaymentCommandFactory {
  private readonly CreditApi creditApi;
  private readonly BankApi bankApi;

  public UpdatePaymentCommandFactory(CreditApi creditApi, BankApi bankApi) {
    this.creditApi = creditApi;
    this.bankApi = bankApi;
  }

  public IUpdatePaymentCommand CreateUpdatePaymentCommand(UpdatePaymentRequest request) {
    switch (request.PaymentType) {
      case PaymentType.ConvenienceStore: return new UpdatePaymentToConvinenceStoreCommand(request.AccountId);
      case PaymentType.CreditCard:       return new UpdatePaymentToCreditCardCommand(creditApi, request.AccountId, request.CreditCardNumber, request.CreditCardName);
      case PaymentType.Bank:             return new UpdatePaymentToBankCommand(bankApi, request.AccountId, request.BankType, request.BankNumber);
      default: throw new ArgumentOutOfRangeException(typeof(request.PaymentType));
    }
  }
}

