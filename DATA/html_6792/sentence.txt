More than 3 years have passed since last update.さて、今年のAdvent Calendarも13日目。
ちょうど折り返し地点ですね。担当日を忘れて電子回路の勉強ばっかりしてたので、以前作ったプログラムを引っ張り出してきました。
ゲフンゲフン。えーと。
今回は電子工作の遊び記事から一転、Unityの実用的なネタでいこうと思います。Unity UI(uGUI)では、ScrollRectを使うとリストビュー的なものが作れます。ただ、ScrollRectはあくまでスクロールを制御するscriptですので、普通に使うとリスト内の要素（今回はセルと呼びます）は全部先に生成して放り込んでおく形になります。
そのため、セルが増えるとパフォーマンスに思い切り影響を及ぼします。セル数百個くらいになると初期化（Instantiate）は激遅、スクロール操作もカクついちゃったりするわけで。かのテラシュールウェア様が正解を記事にしてくださっています。（いつもお世話になっておりますm(_ _)m）
http://tsubakit1.hateblo.jp/entry/2015/01/21/233000画面外に出たセルを再利用する形。
ウン、これですよこれ。ということで、今回の記事はおしまい。
ということで、今回は↑のscriptをカスタムしてみました。
（ほぼ原型を留めていません。。ｗ）イメージとしては、AndroidのListView/iOSのUITableViewを目指しました。
どっちかって言うとAndroidに近いかも？↓はScrollRectのContentに紐付けるscript。外部からコールできるのは初期化用のInitializeメソッドと、データが変わった時の再描画用Refleshメソッドのみです。
あとはPaddingとかスクロール方向とかの基本的な設定のみ。続いて、リストビューのデータプロバイダインターフェース。
セルの個数を返すメソッド、セルの高さor幅（ScrollRectのスクロール方向による）を返すメソッド、セルを返すメソッドだけで、とってもシンプルです。↑のscriptを使った実装サンプルです。ContentとCellの設定にちょいとクセがある（スクロールの向きに応じて、AnchorsとPivotを正しく指定しないと表示がおかしくなる）ので、サンプルプロジェクトを用意しました。
https://github.com/akako/recyclable-items-scroll-view-sample実装は上記プロジェクトの SampleSimple シーンをご覧ください。動かしてみるとこんな感じ。
例えば、リスト内にキャラ情報のセルとアイテム情報のセルを混在させたい場合などを考えてみましょう。セル内のごく一部が変わるだけであれば良いのですが、↑の例ようにセルの内容が全然異なる場合、ひとつのscript上に無理やり詰め込むと非常に残念な事になります。そんな時は、データプロバイダ側のクラスでセルオブジェクトをプールしておくようにすれば、セルのクラスを分けつつInstantiateの回数も抑えた形で実現することが出来ます。
（サンプルプロジェクトにある SampleMultipleTypeCell シーンで実装しています）動かしてみるとこんな感じ。
ちと荒削りですが、良ければ使ってみてくださいまし！


