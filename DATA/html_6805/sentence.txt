More than 3 years have passed since last update.この記事は「Unity Advent Calendar 2016」 の8日目の記事になります。今回はこの一年で一番触り、一番調べたDoTweenについて書かせていただきます。なお、DoTweenの導入や基本的な使用方法のネタは他に優良な記事がありますので
こちらでは割愛させていただきます。また当方は三十路の後半にWebフロントエンジニアからUnityエンジニアに
JobChangeした新米Unityエンジニアであるため、至ら無いところが多々あるかと思いますが
何卒、ご理解くださいませ。Tweenのアニメーションを一時停止させたり、そこから再生させたり
あるいは最初からやり直したり、と単純にアニメーションさせるだけでは
要件を満たさない場面はたくさんあります。あまり詳しく書かれてい無いのですが、DoTweenは非常に優秀で
このあたりも簡単に実装する事が可能です。この節のサンプルはuGUI上にあるUIオブジェクトで行う事を
前提と致します。画面イメージはこんな感じです。まず、Tweenの対象のGameObject（動くオブジェクト）のRectTransformをインスペクターで取得出来るようにします。
次にSequence型のフィールドを用意します。
コードで書くとこんな感じです。実行した時の状態（座標だとその位置）で停止します。再生です。
DoTweenの再生はTweenを実行すると再生されます。
その為、これを利用するのは上記で説明した一時停止を利用した場合などになります。一時停止後に実行すると停止した状態から再生を開始します。Tweenの開始位置から再度Tweenを実行します。
※一時停止中でも同様の挙動になります。こちらはSequenceを完全に破壊します。
実行後、GameObjectは実行したタイミングの状態で停止します。
尚、Sequenceが破壊されていますので、上記で説明した 再生、再スタートは当然ですが実行不可能になります。
※GameObjectは破壊されません。あくまでSequenceの破壊です。説明は割愛しますが
TweenさせるGameObject（動くオブジェクト）のRectTransformをインスペクターで取得。
「再生」「停止」「破壊」「最初から」はボタンオブジェクトで
Play(), Pause(), Kill(), Restart()
をそれぞれ実行するようにすると実行出来るかと思います。DoTweenはDOMoveなどの拡張メソッドが豊富にあり、殆どの場合はそれで要件を満たすのですが
稀に拡張メソッドに無いものをTweenさせたい場合があります。ちょっと有効な例が思いつか無いので、必要になった時に分かりやすいように
簡単なサンプルコードで解説致します。このサンプルコードはLogを見るとNumberの中身が100まで10.0秒かけて増えていくのが
確認出来るただそれだけのコードです。上記のサンプルコードの具体的に解説をしていきます。
該当部分のコードを抜粋致します。まず 見出しの通り DoTweenは、ラムダを使います。
ちょっと自分て的にはラムダが解りにくいので分解してみました（私だけ?）任意のプロパティなどを扱えるので抑えておくと役に立つと思います。かなりレアケースですが、私はAnimationで管理するアニメーションクリップを
Tweenさせると言うケースで私は利用しました。最後はイージングのカーブをインスペクターで指定する為の方法です。
分かってしまうと簡単な事ですが、見つけるのにかなりの時間を費やしました。今回は備忘録の意味も兼ねて書いておこうと思います。まず、DoTweenでイージングを指定するSetEaseの説明を見直してみます。DoTweenのドキュメントのSetEaseの説明の部分
を見てもらうと以下のような記載があります。SetEase(Ease easeType \ AnimationCurve animCurve \ EaseFunction customEase)今回は2の AnimationCurveを指定する方法をお伝えしたいのでそれ以外は割愛致します。ここからが本題です。
実際にAnimationCurve型を用意しカーブを指定する部分を解説致します。以下は最初のSample01の内容を少し変更したコードです。変更点を抜粋すると以下の部分になります。以下の画像のようにインスペクターでカーブを指定できるようになります。カーブのところをクリックして編集よく考えれば分かりそうなものですが、これに気がつくのにかなりの時間を費やしました;インスペクターで出来る事がなぜ良いのか？
それは、微妙なイージングの調整をGUIで行うことが出来る点です。
もし同じプロジェクトにアニメーターさんがいらっしゃるのでしたら、
細かい部分をお任せする事が出来ます。これ地味に便利です。アニメーションの細かい動きを全てアニメーション(クリップ)で作ってしまうと
数が膨大になります。そのため動的に制御するわけですが、イージングを調整して繊細な動きをつけたい時は
プログラムでは難しいのでこういった場合非常に助かります。個人的になかなか良い情報が見つからずに調べまくった内容を
まとめてみました。
間違っているところや、もっと良い方法などがありましたらコメント頂けると幸いです。さて、明日の 「Unity Advent Calendar 2016」 は monryさん の記事になります。
よろしくお願い致します。


