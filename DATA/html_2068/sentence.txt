More than 1 year has passed since last update.http の 404エラーなどに対応したページを構成したいという場合の対応です。Startup.Configureメソッドで、を追加することで、 404などのステータスコードのページを提供することができるようです。通常は、の前に、書けば良いようです。実際に確かめてみます。
確かに、以下のようなページが表示されました。でも、あまりにもそっけないです。調べたら、UseStatusCodePagesWithRedirectsというメソッドがあるようです。とすれば、指定したページにリダイレクトされるようです。
すでに、Error.cshtml Error.cshtml.csがデフォルトで作成されているので、これで実行してみます。あれ、だめです。「リダイレクトが繰り返し行われました。」とエラーになってしまいます。
OnGetメソッドが呼び出されません。ブラウザのURLは、

https://localhost:5001/error/404
となるので、想定したURLにリダイレクトはされているようです。でもソースコードをよくみたら、OnGetAsyncメソッドには、StatusCodeを受け取る引数がありません。ああ、Error.cshtmlは、アプリケーション内での例外に対応するエラーページなのですね。ということで、以下のように書き換えます。statuserrorページも作成します。
Pagesフォルダーの下に、StatusError.cshtmlとStatusError.cshtml.cs ファイルを以下のように作成します。実行して、存在しないURLを指定してみます。このcshtmlは、固定でメッセージを表示していますが、実際は、ステータスコードに対応するメッセージを表示するなどの対応が必要になると思います。ASP.NET MVCの時は、Http Statusコードに対応したページを表示するには、Web.configで面倒な記述が必要だったんですが、そういったことなく実現できるのはありがたいです。UseStatusCodePagesWithReExecuteというメソッドもあるようです。こちらは、リダイレクトせずに同じURLのまま、エラーページが表示されます。こちらに、変更してみます。ページに表示された内容だけだと、どのURLでエラーが発生したのかがわかりません。まあ、ユーザにとってはあまり気にするところではありませんが、開発者側からするとこれが分かったほうが何かと便利です。ということで、ページモデルを変更します。これで、どのURLを要求したのかがわかります。
Viewも ErrorPath を表示するように書き換えます。実行してみます。
ブラウザのアドレスバーで、存在しないURLを入れてみます。どこでエラーが発生したのかがわかるようになりました。


