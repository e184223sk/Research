public static void Run()
{
    var poly_list = new List&lt;List&lt;int&gt;&gt;();
    poly_list.Add(new List&lt;int&gt;() { 1 });
    int n_max = 385;
    for (int n = 1; n &lt;= n_max; n++)
    {
        var poly = new List&lt;int&gt;();
        for (int j = 0; j &lt;= n; j++) poly.Add(0);
        poly[0] = 1;
        poly[n] = -1;
        for (int d = 1; d &lt; n; d++)
        {
            if (n % d != 0) continue;
            poly = Devide(poly, poly_list[d]);
        }
        poly_list.Add(poly);
        Console.WriteLine("\\Phi_{{{0}}}&amp;={1}\\\\", n, Str(poly));
    }
}
static List&lt;int&gt; Devide(List&lt;int&gt; numerator, List&lt;int&gt; denominator)
{
    var result = new List&lt;int&gt;();
    for (int i = 0; i &lt;= numerator.Count - denominator.Count; i++)
    {
        result.Add(numerator[i]);
        for (int j = 1; j &lt; denominator.Count; j++)
        {
            numerator[i + j] -= numerator[i] * denominator[j];
        }
    }
    return result;
}
static string Str(List&lt;int&gt; poly)
{
    var sb = new StringBuilder();
    var dim = poly.Count - 1;
    for (int i = 0; i &lt;= dim; i++)
    {
        int c = poly[i];
        if (c == 0) continue;
        if (c &gt; 0 &amp;&amp; i &gt; 0)
        {
            sb.Append("+");
        }
        if (c &lt; 0)
        {
            sb.Append("-");
            c = -c;
        }
        var d = dim - i;
        if (c &gt; 1 || d == 0)
        {
            sb.Append(c);
        }
        if (d == 1)
        {
            sb.Append("x");
        }
        else if (d &gt; 1)
        {
            sb.AppendFormat("x^{{{0}}}", d);
        }
    }
    return sb.ToString();
}

