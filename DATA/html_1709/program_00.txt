using System.Collections;
using UnityEngine;

/// &lt;summary&gt;
/// 色違い場所違いキューブ自動生成プログラム
/// &lt;/summary&gt;
public class CubeCreate : MonoBehaviour
{
    [SerializeField] private GameObject _cube;

    private MaterialPropertyBlock _materialPropertyBlock;

    private int propertyID;

    private void Start()
    {
        _materialPropertyBlock = new MaterialPropertyBlock();

        //プロパティーのIDを取得しておく　SetColorをstringで指定しても結局intに変換してるらしく、無駄らしい
        propertyID = Shader.PropertyToID("_Color");

        StartCoroutine(InstantiateColorCube());
    }

    /// &lt;summary&gt;
    /// ランダムな位置にランダムな色のキューブを生成 
    /// &lt;/summary&gt;
    private IEnumerator InstantiateColorCube()
    {
        while (true)
        {
            //ランダムな値
            float randomValueA = Random.Range(-1.0f, 1.0f);
            float randomValueB = Random.Range(-1.0f, 1.0f);
            float randomValueC = Random.Range(-1.0f, 1.0f);

            //ランダムな値
            float randomMagnification = Random.Range(0.0f, 5.0f);

            //ランダムな位置にキューブ生成
            Vector3 randomPos = new Vector3(randomValueA, randomValueB, randomValueC);
            GameObject tmp = Instantiate(_cube, randomPos*randomMagnification, Quaternion.identity);

            //MaterialPropertyBlockで色を変更　元のマテリアルの色はそのまま
            MeshRenderer mr = tmp.GetComponent&lt;MeshRenderer&gt;();
            Color randomColor = new Color(randomValueA, randomValueB, randomValueC);
            _materialPropertyBlock.SetColor(propertyID, randomColor*randomMagnification);
            mr.SetPropertyBlock(_materialPropertyBlock);

            yield return null;
        }
    }
}

