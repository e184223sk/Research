
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.UI;

public class MyItem : UIBehaviour 
{
    [SerializeField]
    Text uiText = null;

    [SerializeField]
    Text MaineText = null;
    static Text mein;

    public string[] textMessage; //テキストの加工前の一行を入れる変数
    public string[,] textWords; //テキストの複数列を入れる2次元配列 

    public static int rowLength; //テキスト内の行数を取得する変数 @staticに変更
    private int columnLength; //テキスト内の列数を取得する変数

    int i; //@外側で宣言
    int n; //@外側で宣言

    new private void Start()
    {
        TextAsset textasset = new TextAsset(); //テキストファイルのデータを取得するインスタンスを作成
        textasset = Resources.Load("Test", typeof(TextAsset) )as TextAsset; //Resourcesフォルダから対象テキストを取得
        string TextLines = textasset.text; //テキスト全体をstring型で入れる変数を用意して入れる

        //Splitで一行づつを代入した1次配列を作成
        textMessage = TextLines.Split('\n'); 

        //行数と列数を取得
        columnLength = textMessage[0].Split('\t').Length;
        rowLength = textMessage.Length;

        //2次配列を定義
        textWords = new string[rowLength, columnLength];

        for( i = 0; i &lt; rowLength; i++)
        {
            string[] tempWords = textMessage[i].Split('\t'); //textMessageをカンマごとに分けたものを一時的にtempWordsに代入

            for ( n = 0; n &lt; columnLength; n++)
            {
                textWords[i, n] = tempWords[n]; //2次配列textWordsにカンマごとに分けたtempWordsを代入していく
            }
        }
    }

    //プレハブ化された表示形式に以下の処理で文字と画像を順番に割り当てていく
    public void UpdateItem(int count) 
    {
        Start();
        n = 0;

        //アイテムナンバー、0から始まるので+1をして1から表記
        uiText.text = (count + 1).ToString("00");

        //テキストの行数を超えないように制限、テキストをカウントに併せて変更。
        if(count &lt; rowLength)
        {
            MaineText.text = (textWords[count, 0]);
        }       
    }
}


