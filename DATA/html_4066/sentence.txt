More than 1 year has passed since last update.C#7.0から、型変換において、型スイッチ 型パターンという便利な書き方ができるようになりました。コメントで型スイッチは古い呼び方と教えていただきました！pattern-matching
https://docs.microsoft.com/ja-jp/dotnet/csharp/pattern-matchingこちらの記事様を参考にさせていただきました。is、switch の拡張 (型スイッチ) - C# によるプログラミング
https://ufcpp.net/study/csharp/datatype/typeswitch/この記事では簡単な使用例を示します。そのまえに、is/as演算子を使った従来の型変換について超簡単におさらい。変数名で指定したクラスにダウンキャスト可能かどうかを調べる。
ダウンキャストできるか否かが、true/falseで返される。構文 : 変数名 is クラス名is演算子のように前もって診断しなくても安全にダウンキャストできる。ダウンキャストを実行して、ダウンキャスト不可の場合はnullを返す。構文 : 変数名 as クラス名もし、ダウンキャスト判定するだけなら、is演算子だけで十分です。ただし、判定した上で、さらにダウンキャストもしたい場合。is演算子を使うと以下のような二重処理のコードになってしまい、なんかあんまり良くない感じです。この場合、as演算子を使った方がスマートです。やっと本題です。C#7では、上記のis演算子が拡張され「ダウンキャストできるかどうかの判定」と「新しい変数の定義」が同時にできるようになりました。これを型スイッチ 型パターンといい、さらにスマートな記述ができるようになりました。ダウンキャスト可能ならtrueが返り、ダウンキャストが実行され変数が定義されます。構文 : 変数 is 型 変数名型スイッチはswitch文でも使えます。
caseの後ろに型も書けるようになりました。構文 : case 型 変数名:また、whenによる条件フィルターをかけることもできます。構文 : case 型 変数名 when 条件式さらにC#は進化を止めず、C#7.1では、ジェネリック型の型スイッチが使えるようになりました。つまり、ジェネリック型の引数に対してパターンマッチングすることができます。かなり便利な機能だと思うのですが、C#7.0まではこれをやるとコンパイルエラーとなります。おわり


