文字列を数値型とか enum 型とかに変換する場合、Parse() とか TryParse() を使うかと思います。Parse() は、成功すれば変換された値が返ってくる点は楽なのですが、失敗したときに例外を吐くので少々扱いにくいです。一方、TryParse() のシグネチャは bool TryParse(string s, out T v) となっています。返り値は解釈成功・失敗を表し、変換された値は v に入ります。変数 v を事前に宣言する1面倒くささはありますが、失敗したときの処理は簡単です。enum 型には、bool Enum.TryParse&lt;TEnum&gt;(string s, out TEnum e) が使えます。
名前からでも数字からでも TEnum 型に変換できます。ところが、数字からの変換が曲者で、enum 型で定義していない値でも変換に成功したことにして outの変数に入れてしまいます。ある値が enum 型で定義されているか検証するには、Enum.IsDefined() を使います。これを TryParse() と組み合わせれば、安全な変換が実現できます。任意の enum 型に対応するため、ジェネリック化します。
型パラメータ TEnum は enum 型のみを許容するので、'where` 節で制約します。残課題
- : struct は、TEnum を値型に制約しています。できれば enum 型に制約したいのですが、enum 型はクラスではないのでできません。
- 作成した TryParse は自作クラスのメンバになります。できれば Enum 型の拡張メソッドにしたいのですが、静的メソッドで this を引数にできないので、拡張メソッドにはできません。C# 7 では、事前の宣言が不要になるようです。 ↩


