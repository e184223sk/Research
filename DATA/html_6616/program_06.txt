
class FileDropBehaviorB : Behavior&lt;FrameworkElement&gt;
{
    protected override void OnAttached()
    {
        base.OnAttached();
        this.AssociatedObject.PreviewDragEnter += AssociatedObject_PreviewDragEnter;
        this.AssociatedObject.Drop += AssociatedObject_Drop;
    }

    protected override void OnDetaching()
    {
        base.OnDetaching();
        this.AssociatedObject.PreviewDragEnter -= AssociatedObject_PreviewDragEnter;
        this.AssociatedObject.Drop -= AssociatedObject_Drop;
    }

    private void AssociatedObject_PreviewDragEnter(object sender, DragEventArgs e)
    {
        e.Effects = DragDropEffects.All;
        e.Handled = true;
    }

    private void AssociatedObject_Drop(object sender, DragEventArgs e)
    {
        //ここでinterfaceの関数を実行する。xamlでbindされていないときはnullで実行されない
        this.FileDropHandler?.Drop(e.Data.GetData(DataFormats.FileDrop) as string[]);
    }

    public IFileDropB FileDropHandler
    {
        get { return (IFileDropB)this.GetValue(FileDropHandlerProperty); }
        set { this.SetValue(FileDropHandlerProperty, value); }
    }

    // Using a DependencyProperty as the backing store for FileDropHandler.  This enables animation, styling, binding, etc...
    public static readonly DependencyProperty FileDropHandlerProperty =
    DependencyProperty.Register(nameof(FileDropHandler), typeof(IFileDropB), typeof(FileDropBehaviorB));
}

