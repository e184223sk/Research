
class FileDropBehaviorC//behaivorの継承要らない
{
    public static IFileDropC GetFileDropHandler(UIElement target)
    {
        return (IFileDropC)target.GetValue(FileDropHandlerProperty);
    }

    public static void SetFileDropHandler(UIElement target, IFileDropC value)
    {
        target.SetValue(FileDropHandlerProperty, value);
    }

    /// &lt;summary&gt;
    /// コールバックでイベントの購読の定義
    /// &lt;/summary&gt;
    public static readonly DependencyProperty FileDropHandlerProperty =
    DependencyProperty.RegisterAttached("FileDropHandler", typeof(IFileDropC), typeof(FileDropBehaviorC), new PropertyMetadata(OnFileDropHandlerChanged));

    private static void OnFileDropHandlerChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e)
    {
        var element = obj as UIElement;
        if (element != null)
        {
            //この場合、イベントの購読解除はどこでやるんだ？
            element.PreviewDragOver += Element_PreviewDragOver;
            element.Drop += Element_Drop;
        }
    }
    private static void Element_PreviewDragOver(object sender, DragEventArgs e)
    {
        e.Effects = DragDropEffects.All;
        e.Handled = true;
    }

    private static void Element_Drop(object sender, DragEventArgs e)
    {
        GetFileDropHandler(sender as UIElement)?.Drop(e.Data.GetData(DataFormats.FileDrop) as string[]);
    }
}

