    class FileDropBehaviorA:Behavior&lt;FrameworkElement&gt;
    {
        protected override void OnAttached()
        {
            base.OnAttached();
            this.AssociatedObject.PreviewDragEnter += AssociatedObject_PreviewDragEnter;
            this.AssociatedObject.Drop += AssociatedObject_Drop;
        }

        protected override void OnDetaching()
        {
            base.OnDetaching();
            this.AssociatedObject.PreviewDragEnter -= AssociatedObject_PreviewDragEnter;
            this.AssociatedObject.Drop -= AssociatedObject_Drop;
        }

        private void AssociatedObject_PreviewDragEnter(object sender, DragEventArgs e)
        {
            //previewでの処理。おまじないw。
            e.Effects = DragDropEffects.All;
            e.Handled = true;
        }

        private void AssociatedObject_Drop(object sender, DragEventArgs e)
        {
            //こんな感じでdropされたファイル名が取得可能
            this.DropFiles = e.Data.GetData(DataFormats.FileDrop) as string[];
        }

        public string[] DropFiles
        {
            get { return (string[])this.GetValue(DropFilesProperty); }
            set { this.SetValue(DropFilesProperty, value); }
        }
        /// &lt;summary&gt;
        /// FrameworkPropertyMetadataOptions.BindsTwoWayByDefaultは付けなくても可
        /// ただしその場合は,xamlのbinding modeをtwowayをつける必要がある。
        /// FrameworkPropertyMetadataOptions.BindsTwoWayByDefaultをここでつけておくとその必要はない。
        /// &lt;/summary&gt;
        public static readonly DependencyProperty DropFilesProperty =
        DependencyProperty.Register(nameof(DropFiles), typeof(string[]), typeof(FileDropBehaviorA), new FrameworkPropertyMetadata(default(string[]), FrameworkPropertyMetadataOptions.BindsTwoWayByDefault));
    }


