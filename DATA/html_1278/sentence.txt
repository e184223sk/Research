More than 1 year has passed since last update.先日、ASP.NET Core Blazor WebAssembly が正式リリースとなりました。ということで、今回は簡単な CRUD アプリケーションをバックエンドからフロントエンドまですべて C# で作ってみたいと思います。バックエンドは基本的に以前書いた記事（これとこれ）をほぼ流用しています。こういうテーブルから、こういう JSON を返す API を作って、こういう UI を構築する。
Visual Studio 2019 を起動して新しいプロジェクトを作成します。プロジェクト名は適当に。「新しい Blazor アプリを作成します」のところでASP.NET Core hostedを有効にすると、ASP.NET Core Web API とセットでプロジェクトが生成されます。

ASP.NET Core hosted を選択して作成。

プロジェクトが３つ生成されます。Client がフロントエンド、Server がバックエンドで、Shared には共通で利用するクラスを配置します。デバッグ実行するとちゃんとフロントエンドからバックエンドが呼べる状態で立ち上がってくれるので非常に楽です。
まずはエンティティクラスを作成します。BlazorApp.Sharedプロジェクト直下にEntitiesフォルダーを作成し、Bookクラスを追加。パッケージマネージャーコンソールから Entity Framework Core のパッケージをインストールします。（Tools は Migration 用に必要）次にエンティティクラスとテーブルをマッピングするためのデータベースコンテキストクラスを作成します。BlazorApp.Serverプロジェクト直下にDataフォルダーを作成し、AppDbContextクラスを作成。BlazorApp.ServerプロジェクトのControllersフォルダーにBooksControllerコントローラーを追加します。
コントローラーにコンストラクターとテーブルの全レコードを返すList()メソッドを追加します。Startup.csにコンテクストクラスをサービスとして登録しておきます。appsettings.jsonに接続文字列を追加。下記では LocalDb に BlazorAppDb という名前のデータベースを指定しています。パッケージマネージャーコンソールで以下のコマンドを実行します。（Migrations フォルダーと Migration クラスが作成される）続けて以下のコマンドを実行。（データベースとテーブルが作成される）SQL Server Managment Studio か何かで以下のクエリを実行してレコードを追加します。とりあえず全件取得用の API ができたので、デバッグ実行して/api/booksにアクセスして、以下の情報が取得できることを確認しておきます。バックエンドの開発がとりあえず完了したのでフロントエンド開発に移ります。BlazorApp.ClientプロジェクトのPagesフォルダー配下にBookListコンポーネントを追加。
BookListコンポーネントを以下のように編集します。コンポーネントを開く際にOnInitializedAsycn()メソッドが呼ばれるため、そこで先ほど作った API を呼んで、HTML 上のテーブルに書き出すという流れですね。このままだと動線がないので、Shared/NavMenu.razorのリンクにBookListへのリンクを追加しておきます。デバッグ実行してBook listリンクを開き、以下のように表示されれば OK です。
表示ができたので、次は画面上からデータを追加できるようにしていきます。BooksControllerにCreateメソッドを追加します。（結果を返すためにGetメソッドも追加しています。特に今回は無くてもいいけど、お作法として）新規作成用のフォームをBookListコンポーネントに追加します。テーブルの上に Title と Author を入力するフィールドと、送信するボタンを用意しています。ボタンを押すと Add メソッドが実行されて先ほど作成したバックエンドの API が呼び出されます。Title と Author を入力して Add ボタンをクリック。
追加すると表示も自動的に更新されます。
続いて削除です。レコードごとにボタンを用意して、クリックで削除できるようにします。BooksControllerにDeleteメソッドを追加します。削除ボタンをBookListコンポーネントに追加する。テーブルに列を追加して削除ボタンを表示しています。メソッドに引数がある場合はラムダ式を使います。
Delete ボタンを押すと、そのレコードが削除されます。
最後に更新です。Title と Author を入力して、Add ボタンの代わりに各レコードごとに用意された Update ボタンを押すと、そのレコードが入力した内容で更新されるようにします。BooksControllerにUpdateメソッドを追加します。Update ボタンをBookListコンポーネントに追加します。Delete ボタンと同様に、Update ボタン用の列を追加しています。Title と Author を入力して Update ボタンを押します。（ここでは最初の行の Update ボタンを押しています）

内容が更新されれば OK。
全部 C# で書けるのめっちゃ楽。


