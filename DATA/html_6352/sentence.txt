More than 1 year has passed since last update.基本的なことはググるとすぐに見つかると思うが、いろんなやり方があるっぽい
データの形とかで長所短所があると思うのでいくつかまとめてみたこんな感じのデータを例にやってみるまず、DataGridのAutoGenerateColumnsをTrueにする(デフォルトはTrue)
このAutoGenerateColumnsは列の自動生成機能のことで、こいつをTrueにしとくとItemsSourceに指定したコレクションから
自動でいい感じに列を作ってくれる【いいとこ】
　簡単
【悪いとこ】
　細かい設定ができないAutoGenerateColumnsがTrueになっているDataGridのItemsSourceにコレクションデータをバインドするだけ
&lt;DataGrid ItemsSource="{Binding _Model._Goods}"&gt;このとき、列のヘッダーはプロパティ名になる
また、列に表示されるコントロールはプロパティの型によって自動的に決定される
string型やint型はそのまま(テキスト)だが、bool型のものはチェックボックスに、enum型はドロップダウンが表示されるただのリストを表示する時はこれだけでOK
しかし、これだと「リストの中でもこのプロパティは表示させたくない」とか、「このプロパティは◯列目に表示させたい」
とかが指定できない【いいとこ】
　細かいとこも設定できる
【悪いとこ】
　めんどくさい・ややこしいここでは手動で列を指定するので、まずAutoGenerateColumnsをFalseにする
ItemsSourceへのバインドは同じ
そんでXaml
一気にめんどくさくなる...こんな感じになるよDataGrid.Columns内で表示する列を定義していて、表示する列の種類毎でプロパティが違ったりする
各ColumnではHeaderでヘッダー名を設定できる
他にもStyleでいろいろいじったりもできるこれは単純で、Bindingに設定したいプロパティをバインドするだけドロップダウン表示のやつ
かなりめんどくさい
まず、表示させるために別のクラスが必要になるこんな感じで表示させる値とenumが保持できるプロパティをもってればOK
そんで以下のプロパティを定義・SelectedValueBinding
　　現在選択中の項目のプロパティで、データ側のenumプロパティをバインドする
・DisplayMemberPath
　　表示するオブジェクトのソースへのパスで、表示用クラスの表示させる値のプロパティ名を定義する
・SelectedValuePath
　　ドロップダウンリストに表示するコレクションへのパスで、表示用クラスのenumを保持するプロパティ名を定義する
・ItemsSource
　　ドロップダウンリストに表示するオブジェクトのソースで、表示用クラスの配列を持つものを定義する
　　x:ArrayはTypeで指定したものをXamlで配列として定義するものセルの表示とかも自由にカスタムできる
2段表示とかボタン表示とかもできるけどそのぶんややこしくてわかりづらい
今回は省略するが、需要があればそのうち書くかもハイパーリンクが表示できるやつ
これもBindにプロパティをバインドすればいいだけっぽい
あとはElementStyleでクリックされたときのイベントをハンドルするっぽい
使ったことがないのでs(ry【いいとこ】
　そこそこ簡単で細かく設定できる
【悪いとこ】
　いっぱい設定してたらコードが長くなりがち
　コードで固めていくと汎用性が低くなる1.で列の位置の指定ができないとか書いたけど、実はDataGridのAutoGeneratingColumnイベントでコード側からいじったりできる
ItemsSourceはそのままに、DataGridのAutoGeneratingColumnにイベントを追加する
このイベント内で設定をいじるこんな感じで2と同じ表示ができる
eには列生成時のイベントデータが流れてくる
e.PropertyNameでプロパティ名を取得できるので、それを判定して処理を分岐させている
あとは好きにプロパティを設定すればOKだが、PropertyNameで判定するとプロパティ名が変わったときに変更させるのがめんどくさくなる
indexとか取れればいいけどそんなプロパティはない
ちなみに、e.Column.DisplayIndexは流れてきた時点では-1が設定されているので使えない 
そこで、汎用性を上げれるよう少し考えてみたprivate int counter = 0;
とかでint型の変数を作る
そんでAutoGeneratingColumの度にcounterをインクリメントしてそれを判定すればOK
これならプロパティの順番に流れてくるので変更はしやすいはず
あと、AutoGeneratingColumの終了後にはAutoGeneratedColumnsが呼ばれるので、そこでcounterを初期化する【いいとこ】
　表形式のデータを表示するのが楽
【悪いとこ】
　データの整形が少しめんどい
　Xamlから特定列の表示をいじったりできないDataTableをItemsSourceにすれば表形式のデータも簡単にセットできる
Excelとかみたいな表形式でデータをいれれる
上の表のデータはこんな感じでセットしている_DataTable.Columns.Addで列を追加している
ここで第2引数にTypeで型を指定すると型指定の列ができる
var row = _DataTable.NewRow();で_DataTableに属する新しい行を作っている
rowには[]でindexか列を指定してデータを入れる
_DataTable.Rows.Add(row);でテーブルに行を追加するそんでXamlはこのプロパティをItemsSourceにバインドするだけ
簡単でいいね(/・ω・)/DataGridは細かくデザインまでしようと思ったらかなりめんどくさいやつ
もう少しカスタムしやすかったらいいのにね
他にもあれば随時追加していくと思う


