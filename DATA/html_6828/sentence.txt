More than 3 years have passed since last update.完全版も参照のこと。完全版のやりかたの場合、IServiceCollection.Configure()で登録すればIOptionalの形で、カスタムResolverに直接登録すればSettingの形で取得できる形になります。この例のように、カスタムIControllerActivatorを使用して、カスタムDependency Resolverで型付けされた構成を扱う場合について記述します。ASP.NET Coreでは、設定ファイルの内容に対応するクラスを用意して、そのIOptions&lt;T&gt;をDependency Injectionで受け取ることが可能です。まず、この例を記述します。以下のような設定のSmtpSettingsセクションについて、型付けされた形で扱えるようにします。設定ファイルの内容について、型付けされた構成クラスとして以下を用意します。IServiceCollectionのConfigure&lt;T&gt;()拡張メソッドにより、設定ファイルの内容を元にした構成クラスの登録ができます。以下のように、型付けされた構成クラスをDIして使用できます。コントローラーにDIされるオブジェクトは、IServiceCollectionではなくカスタムDependency Resolverに登録してやる必要があります。登録するのはSmtpSettingsのインスタンスになりますが、Configuration.GetSection()で取得される設定ファイルの内容はIConfigurationSectionの形であり、この内容をSmtpSettingsに変換する必要があります。IConfigurationSectionから構成クラスへの変換は以下の処理で行います。IConfigurationSection.Bind()拡張メソッドにより、設定ファイルの内容を構成クラスのメンバにバインドできます。なお、カスタムIControllerActivatorでSmtpSettingsのインスタンスを直接扱う場合、コントローラーではIOptions&lt;SmtpSettings&lt;ではなく、SmtpSettingsをインジェクションして貰う形となります。カスタムDependency Resolver使用時の話としては、あとFromServicesAttributeの対応なんかもあるのよね(・∀・;)


