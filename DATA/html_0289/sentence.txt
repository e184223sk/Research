今回、とある実装でUnityのEditor拡張に触れる機会があり、そこで得られた知見をメモとして記事を書きたいと思います。Edito拡張でObjectを操作するために必要なのが「SerializedObject」です。
通常のInspectorから値を変更する際も実はこの「SerializedObject」を使っています。Updateは対象のObjectの最新の情報を取得するメソッドです。
何かしらSerializedObjectに変更を加える前にかならずUpdateをする必要がある。Objectに変更点を適応させます。
基本Update =&gt; ApplyModifiedPropertiesの順番に記述します。Objectのプロパティを取得します。プロパティが配列の場合にはGetArrayElementAtIndexを使って取り出すこともできます。ボタンなどのUIを作成するときのクラス。横の範囲を指定できます。
次の例ではUsingの中に記載したUIはHorizontalScopeの設定した範囲内に表示される。縦の範囲を指定できます。GUILayoutクラスの便利関数です。Rectを取得します。直前のGUILayoutのRectを取得します。引数に渡したTextやTextureをUIとして表示させることができる。
ToggleやGenericMenuなどで利用できるGUIの見た目などを変更させるため利用するのがGUIStyleです
各UIパーツにGUIStyleを指定できる引数があります。デフォルトで設定ができるStyleがあるのですが、これは文字列で指定する必要があります。
こちらのサイトに載っているのですが、見た目は実際に試してみてください
https://baba-s.hatenablog.com/category/Unity?page=1430097103エディタ拡張用のGUIクラス。四角形を描画するEditorGUILayoutとGUILayoutはほぼ同じです。
現状同じことができるので好きな方を使ってよいと思いますが、EditorGUILayoutでしかできないこともあります。スクロールの領域を指定できます。文字列を表示します。
第２引数でStyleを指定することもできます。floatの入力項目を作成します。EditorGUIの便利関数。指定したファイル名のTextureを取得します。
次の例ではUnityにデフォルトで設定されている画像を取得する処理です。現在次のサイトの画像が取得できそうでう。
https://baba-s.hatenablog.com/entry/2017/12/01/164517自作のメニューを作成できます。
AddItemを使って文言と選択したときのコールバックを記述します。何かしらデータをコールバックへ渡したいときには第４引数に指定します。本来はEditor上での3D描画を行うクラスなのですが、いろいろな図形を書くことができます。
単純な線を引く場合には次のようなコードを書きます。実際Editor拡張をする際にHandlesについてはこちらを参考にしました。
https://qiita.com/kyourikey/items/7a5f693d1fe17bde5387イベントを取得するときにEvent.currentを使います。イベント取得範囲を決めたい場合は、次のように実装ができます。EventTypeはこちらを参考に
https://docs.unity3d.com/ja/current/ScriptReference/EventType.htmlUIの背景色を変える。複数のUIからどれが選択されているか知ることができる。
各UIにSetNextControlNameで名前（key)を設定し、それを何かしらのイベントでFocusする。
Focusされた名前をGetNameOfFocusedControlで取得し、それを使いUIを変更します。


