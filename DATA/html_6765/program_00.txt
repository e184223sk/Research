using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;

namespace SampleNS
{
    public class SampleClass
    {
        public void SampleMethod()
        {
            using (var reader = new iTextSharp.text.pdf.PdfReader(@"sample.pdf"))
            {
                var images = new System.Collections.Generic.List&lt;iTextSharp.text.pdf.parser.PdfImageObject&gt;(); // リスナーからパーサーが返してきた結果を受け取るための入れ物

                var parser = new iTextSharp.text.pdf.parser.PdfReaderContentParser(reader);
                for (int pageNumber = 1; pageNumber &lt; reader.NumberOfPages; pageNumber++)
                {
                    parser.ProcessContent&lt;ImageRenderListener&gt;(pageNumber, new ImageRenderListener(images));
                }
                var index = 1; // 1 からの連番
                images.ForEach(q =&gt; q.GetDrawingImage().Save(System.IO.Path.Combine(System.Environment.GetFolderPath(System.Environment.SpecialFolder.DesktopDirectory), (index++).ToString() + "." + q.GetFileType())));
            }
        }
    }

    internal class ImageRenderListener : iTextSharp.text.pdf.parser.IRenderListener
    {
        private System.Collections.Generic.List&lt;iTextSharp.text.pdf.parser.PdfImageObject&gt; _list;

        public ImageRenderListener(System.Collections.Generic.List&lt;iTextSharp.text.pdf.parser.PdfImageObject&gt; list)
        {
            _list = list;
        }

        public void BeginTextBlock()
        {
            // 今回なにもする必要なし
        }

        public void EndTextBlock()
        {
            // 今回なにもする必要なし
        }

        public void RenderImage(iTextSharp.text.pdf.parser.ImageRenderInfo renderInfo)
        {
            var img = renderInfo.GetImage();
            _list.Add(img);
        }

        public void RenderText(iTextSharp.text.pdf.parser.TextRenderInfo renderInfo)
        {
            // 今回なにもする必要なし
        }
    }
}

