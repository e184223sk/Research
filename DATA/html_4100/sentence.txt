More than 1 year has passed since last update.2018.3でC#6が昇格(?)して、便利になりました。しかしゲームオブジェクトに type がアタッチされている場合は type のタイプを使用してコンポーネントを返します。ない場合は null です
https://docs.unity3d.com/ja/current/ScriptReference/Component.GetComponent.htmlなんでやねん！どうもGetComponent&lt;T&gt;()で帰ってくるnullは真正のnullではないみたいです。デバッカで見ると{null}となっています。
発生している例外もNullRefarenceExceptionではありません。C# 6で導入されたnull条件演算子(?.)ですが、以下の2つの式がほぼ同じ意味になります。
x != null ? x.M() : null
x ?.M()
「ほぼ」であって「完全に同じ」と言えないのは、==演算子を呼ぶか呼ばないかが変わってしまうせいです。 前者(自分で==を呼んでいるやつ)はオーバーロードされた==を呼び出しますが、 後者(?.を利用)は呼びません(直接nullかどうか調べます)。
https://ufcpp.net/blog/2016/12/tipsnulloperation/==がオーバロードされています。UnityObject版null -&gt; 正真正銘のnullに変換する操作を拡張メソッドで隠蔽する方法があるそうです。本来のnull条件演算子だけに比べると少し長くなってしまいますが、それでもif(component!=null)で囲むよりは幾分か短く書くことが出来ます。詳細は@albireoさんのコメントを参照。（ありがとうございました！🙇🙇🙇）


