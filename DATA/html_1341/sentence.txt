awaitを含むということはほとんどの場合時間的に長い処理であり、この間ずっと他のスレッドをブロックしっぱなしというものは決して褒められたコードではない。
できるのであれば、その非同期メソッド内の同期処理部分の必要な部分だけをlockするのが最善である。
ここに記載されている情報は、嬉々として採用するべきものではなく、といった状況化で仕方なく、しぶしぶ採用するべきものになる。通常、排他制御をおこなう場合、lockステートメントを使用する。しかし、このlockブロック内にawaitが含まれるコードはコンパイルエラーが発生する。
というのも、ロックを解放するのはそれを獲得したスレッドでなければならず、await演算子の前と後ろは違うスレッドで実行される可能性があるためだ。そこで、ロックの獲得と解放を異なるスレッドで行うことのできる仕掛けが必要になる。
これに適したクラスがSemaphoreSlimであり、これでawaitを含むコードの排他処理ができるようになる。もし、同じクラスの同期処理部分でも排他制御をおこないたければ、同じSemaphoreSlimオブジェクトのWaitメソッドを使用すればよい。SemaphoreSlimを使用している場合、lockステートメントと異なり、すでに獲得しているロックを再取得できない。
以下のコードは1を出力して、そのまま停止する。2には到達しない。これが意味するのは、あるSemaphoreSlimオブジェクトでガードされているメソッドから、同じオブジェクトでガードされているメソッドを呼び出せないということだ。
以下のAsynchronousMethodAsync()は、SynchronousMethod()のSemaphore.Wait()で処理が停止し、それ以上処理が継続されない。SemaphoreSlimはIDisposableを実装している。そして、この型をインスタンスフィールドに含むクラスは一般論で言えばIDisposableを実装し、そこでSepamhoreSlimオブジェクトをDisposeするべきだということになる。
つまり、排他制御しているオブジェクトを使いおわったらDispose()する必要がある。lockステートメントで済んでいたクラスと比べて、とても面倒だ。安心して欲しい。SemaphoreSlimのソースを追えばわかることだが、AvailableWaitHandleプロパティを使用しない場合、そのDispose()は内部の変数にnullを代入する以外の仕事はおこなわれない。
そして、今回の要件ではこのプロパティは不要なので、SemaphoreSlimオブジェクトをDisposeしなくても実質的な問題は生じない。もちろん未来永劫そうであると保証があるわけではない。
どうするべきかという問いには、「IDisposableを実装するべきだ」と回答するしかない。
だから、コードレビューで原理主義者に追求を受けそうだというのなら、IDisposableを実装することになるだろう。現実的なところでは、SemaphoreSlimのラッパークラスを作り、AvailableWaitHandleを呼び出せなくしてしまうという手がある。
うるさいコード分析ツールを黙らせるのも楽になるだろう。コンストラクタの引数(1, 1)を隠蔽できるようになるのもいい。AvailableWaitHandleのないSemaphoreSlimを再実装してしまう方法もある。
何かまちがっている気もするが、こわいコードレビュアーをかかえたチームでは歓迎されるのではないだろうか。https://www.atmarkit.co.jp/ait/articles/1411/18/news135.html にあるように、SemaphoreSlimそのものを使うのではなく、それを使いやすくしたクラスを使用するという方法がある。簡潔で美しい方法だが、awaitを忘れusing (LockHandler.LockAsync())としてしまうと、ロックされている場合に実行中のTaskをDisposeしようとして例外を投げるコードができあがってしまう。
困ったことに、非同期メソッドの呼び出しがawaitされてないという警告も出力されない。若干一名の尊い犠牲のもとになりたっている情報なので、もし採用するのなら注意してほしい。
犠牲担当の意見としては、二度と利用する気はない。非同期：awaitを含むコードをロックするには？（SemaphoreSlim編）［C#、VB］
https://www.atmarkit.co.jp/ait/articles/1411/11/news117.html非同期：awaitを含むコードをロックするには？（AsyncLock編）［C#、VB］
https://www.atmarkit.co.jp/ait/articles/1411/18/news135.htmlSemaphoreSlimのソース
https://source.dot.net/#System.Private.CoreLib/SemaphoreSlim.cs


