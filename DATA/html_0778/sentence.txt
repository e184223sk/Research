Unityで一定のテンポを刻みたくなりました。・Mac OSX El Capitan
・Unity versiton:2018.3.0音だけ大丈夫な場合はこちらの記事の仕組みがとてもいい感じです。
 [Unity] 正確な時間間隔で効果音を出す
ググってたら上記の記事に書かれているコードを解説しているQ/Aに出会ったので貼っておきます。
 【Unity】音ゲー制作で曲とテンポずれてしまうAudioSource.PlayScheduled();は音を出してくれますが、音と同時に別の処理がしたい場合は他の方法が必要です。InvokeRepeatingを使う手があります。
メリットはコードがシンプルなので読みやすいこと！
第一引数にリピートしたいメソッド名、第二引数に始めるまでの待ち時間(秒）、第三引数にリピートする間隔(秒）を入れます。public void InvokeRepeating (string methodName, float time, float repeatRate);
MonoBehaviour.InvokeRepeating空のオブジェクトにAudioSourceとこのスクリプトをアタッチ。
AudioSourceには適当なAudioClipを入れておいてください。
ゲームを走らせると、一定間隔で音が再生され、コンソールに”Played”が増えていくと思います。途中で好きなテンポに変えたいのであればコルーチンを使いましょう。
INTERVAL_SECONDSの値を変えることでテンポを変更できます。
内容はTempoMaker_InvokeRepeating.csとほぼ一緒ですが、マウスのボタンを押している間はテンポを止める機能を追加しています。InvokeRepeatingは可読性は高いですが、大量のオブジェクトに使いたい場合はパフォーマンス的に不向きのようでうです。
https://answers.unity.com/questions/477862/what-is-the-best-between-startcoroutine-or-invoker.htmlInvokeRepatingとコルーチンのメリット・デメリットはこちらの記事にまとまっていました。（意訳しています）
InvokeRepeating vs Coroutines: Run a method at certain time intervalsUsing an Invoke (or InvokeRepeating) is easier than using a coroutine. On the other hand, Coroutines are more flexible. You cannot pass a parameter to an invoked method but you can do this to a coroutine.Invoke (または InvokeRepeating) はコルーチンより使いやすい一方、コルーチンは自由度が高い。
Invokeには変数を渡せないが、コルーチンなら渡すことできる。Another thing which we have to mention is coroutines are more performance-friendly than the Invoke. For basic games, it does not matter much but if you have several objects which do the same thing, you should consider using Coroutine instead of Invoke.さらに言えることはコルーチンの方がパフォーマンスに優れているということ。簡素なゲームであればあまり関係ないが、複数のオブジェクトで同じことを行う場合、Invokeの代わりにコルーチンの使用を考えるべき。The last difference between Invoke and Coroutine which we will cover is the execution condition after the deactivation of the object. Invoke and InvokeRepeating do not stop after the game object is deactivated. On the other hand, this not true for coroutines. They stop after the game object is deactivated or destroyed. Therefore, you should use Invoke or InvokeRepeating, if you would like your method to continue running, even though the object is deactivated after the method is triggered.最後の違いは、オブジェクトを非アクティブにした後の実行状況。InvokeとInvokeRepeatingはゲームオブジェクトを非アクティブにした後も止まらない。一方でコルーチンはゲームオブジェクトを非アクティブにしたり、デストロイすると止まる。なので、もしオブジェクトが非アクティブになってもメソッドを回し続けたいのであればInvokeかInvokeRepeatingを使うのが良い。以上です。コルーチン便利だなー。


