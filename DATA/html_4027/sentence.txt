More than 1 year has passed since last update.Linqpad5で確認を行いました。配列やList型はLengthやCountといったプロパティを使用することでコレクションの件数を取得し、N件以上であることを判定できます。IEnumerable&lt;T&gt;ではLINQのCount()メソッドを使用することでコレクションの件数を取得することは可能です。しかし、配列のLengthやリストのCountがプロパティへのアクセスに対して、LINQのCount()メソッドは全件走査が必要となります。
少ない件数では問題になりませんが、大量のデータを扱う場合には問題となる可能性があります。  1件以上であるかを判定する場合にはAny()メソッドを使えば判定できます。
1件目の要素にアクセスした時点で判定が終了するため、処理速度も安心できます。 2件以上といった場合にはSkip()メソッドとAny()メソッドを組み合わせて行います。この場合はSkip()メソッドによるn件の要素へのアクセスとAny()メソッドによる1件の要素へのアクセスの系 (n + 1) 件の要素へのアクセスが発生します。
(上記の例では (3 + 1) = 4件の要素へのアクセスが発生)
ListのCountプロパティと比べると遅いと思われますが、Collectionの件数に比べてNが小さい場合には全件走査が発生するCount()メソッドに比べて高速に動作できると考えられます。  N = 1 と N &gt; 2 の2つのパターンに分けましたが、Skip()メソッドを使う方法は N = 1 の場合にも有効です。
ですが、N = 1 の判定としては冗長で、使うことは無いと思われるため、分けて記載をさせていただきました。  やはりCount()メソッドを使った方が直観的に判定したいことが分かるので可読性はあると思います。
Count()メソッドでは速度上の懸念がある場合にチームで合意をして使うのが良いかもしれません。
LINQの様に拡張メソッドとして定義しておくと多少は可読性が向上するかもしれません。  


