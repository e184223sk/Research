
public class Done_EvasiveManeuver : MonoBehaviour
{
    public Done_Boundary boundary;
    public float tilt;
    public float dodge;
    public float smoothing;
    public Vector2 startWait;
    public Vector2 maneuverTime;
    public Vector2 maneuverWait;

    private float currentSpeed;
    private float targetManeuver;

    void Start ()
    {
        currentSpeed = GetComponent&lt;Rigidbody&gt;().velocity.z;
        StartCoroutine(Evade());
    }

    IEnumerator Evade ()
    {
        yield return new WaitForSeconds (Random.Range (startWait.x, startWait.y));
        while (true)
        {
            targetManeuver = Random.Range (1, dodge) * -Mathf.Sign (transform.position.x);
            yield return new WaitForSeconds (Random.Range (maneuverTime.x, maneuverTime.y));
            targetManeuver = 0;
            yield return new WaitForSeconds (Random.Range (maneuverWait.x, maneuverWait.y));
        }
    }

    void FixedUpdate ()
    {
        float newManeuver = Mathf.MoveTowards (GetComponent&lt;Rigidbody&gt;().velocity.x, targetManeuver, smoothing * Time.deltaTime);
        GetComponent&lt;Rigidbody&gt;().velocity = new Vector3 (newManeuver, 0.0f, currentSpeed);
        GetComponent&lt;Rigidbody&gt;().position = new Vector3
        (
            Mathf.Clamp(GetComponent&lt;Rigidbody&gt;().position.x, boundary.xMin, boundary.xMax), 
            0.0f, 
            Mathf.Clamp(GetComponent&lt;Rigidbody&gt;().position.z, boundary.zMin, boundary.zMax)
        );

        GetComponent&lt;Rigidbody&gt;().rotation = Quaternion.Euler (0, 0, GetComponent&lt;Rigidbody&gt;().velocity.x * -tilt);
    }
}

