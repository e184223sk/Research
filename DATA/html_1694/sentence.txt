More than 1 year has passed since last update.LINQを使っていてMax、Averageなどの統計値を出したい、という場面がよくありますが、
なぜこれが標準で計算できないんだ！
と個人的に思う処理に等がありました。
なので、まずは最も使用頻度が高いメディアンを実装してみました。その1：シンプルかつ違和感のない処理
例えば和を求めたい場合は、下のコードのように標準ライブラリのSum()を使ってのような形で実現可能です。
これに合わせてのようにシンプルに算出したいです。その2：型依存性なし
入力がint型のとき、double型のとき、long型のとき・・
と全て実装すると可読性が著しく落ちるので、
色んな型を一括で処理できるようにしたいです。その1を実現するためには「拡張メソッド」
その2を実現するためには「ジェネリック」
を使用すれば良いらしいです
（恥ずかしながら今回調べて初めて知りました）こちらを参考にさせて頂きましたアルゴリズム自体はこちらを参照させて頂きました。本体(DateTime型とそれ以外で処理を分けています)ジェネリックの四則演算用クラス
こちらを参考にさせて頂きました正常にメディアンが出せていそうですその1. Generics(T)型の足し算
上のコード中の「要素数が偶数のとき、真ん中の2要素の平均を出力」とありますが、
平均を出すためには足し算、割り算等の四則演算が必要です。
Generics型は「a + b」みたいな形で四則演算ができないので、
こちらを参考に、四則演算クラスを追加しました。※Average()メソッドを使えばGenerics型のまま平均を出せますが、
今後Generic型の処理で四則演算を使いたい場面が多そうなので、クラスとして作成しました。その2. DateTime型の扱い
DateTime型は上記四則演算クラスが適用できないので、別途メソッドを作りました。
DateTime型はMath.Maxクラスも使えなかったりと、色々不便なところが多いですね。その3. Genericsのキャスト
平均を出す際に「2」で割る必要がありますが、
そのままだとGenerics(T)型をint型で割れずにエラーが出るため、
「2」をGenerics(T)型にキャストする必要があります。
こちらを参考に、
「2.0」としてdouble型で宣言 → object型にキャスト → Generics(T)型にキャスト
の順で、Generics(T)型へのキャストが実現できました。上記を実装したあとに、こんなものがあることに気付きました(泣)
リンク


