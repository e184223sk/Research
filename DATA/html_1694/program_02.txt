
public static class LinQCustomMethods
    {
        // メディアン算出メソッド（Generics）
        public static T Median&lt;T&gt;(this IEnumerable&lt;T&gt; src)
        {
            //ジェネリックの四則演算用クラス
            var ao = new ArithmeticOperation&lt;T&gt;();
            //昇順ソート
            var sorted = src.OrderBy(a =&gt; a).ToArray();
            if (!sorted.Any())
            {
                throw new InvalidOperationException("Cannot compute median for an empty set.");
            }
            int medianIndex = sorted.Length / 2;
            //要素数が偶数のとき、真ん中の2要素の平均を出力
            if (sorted.Length % 2 == 0)
            {
                //四則演算可能な時のみ算出
                if (ao.ArithmeticOperatable(typeof(T)))
                {
                    return ao.Divide(ao.Add(sorted[medianIndex], sorted[medianIndex - 1]), (T)(object)2.0);
                }
                else throw new InvalidOperationException("Cannot compute arithmetic operation");
            }
            //奇数のときは、真ん中の値を出力
            else
            {
                return sorted[medianIndex];
            }
        }

        // メディアン算出（DateTime型のみ別メソッド）
        public static DateTime Median(this IEnumerable&lt;DateTime&gt; src)
        {
            //昇順ソート
            var sorted = src.OrderBy(a =&gt; a).ToArray();
            if (!sorted.Any())
            {
                throw new InvalidOperationException("Cannot compute median for an empty set.");
            }
            int medianIndex = sorted.Length / 2;
            //要素数が偶数のとき、真ん中の2要素の平均を出力
            if (sorted.Length % 2 == 0)
            {
                return sorted[medianIndex] + new TimeSpan((sorted[medianIndex - 1] - sorted[medianIndex]).Ticks / 2);
            }
            //奇数のときは、真ん中の値を出力
            else
            {
                return sorted[medianIndex];
            }
        }
    }

