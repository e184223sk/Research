前回 C# の Channel を学ぶ (1) ではチャネルの基礎を学んだ。今回はキャンセルされた場合や、タイムアウトの実装を見てみる。CancellationToken をAPIがサポートしているので簡単だ。今回も
* C# Channels - Timeout and Cancellationのブログの内容を実施している。タイムアウトのケースでは、ReadAsync() が CancellationToken を受け付けるAPIがあるので、それを使うと、キャンセルが発生したときに OperationCanceledException が発生するようになっている。上記のように、Exception を発生させるのではなく、チャネルが途中で中断されたという風にコードを書いてみよう。実際にキャンセルが発生した場合に、token.IsCancellationRequested を使って、チャネルをComplete するようにすると、うまくそのチャネルだけが中断されて、終了するという感じでコードを書くことが出来る。これは、Producer 側で処理を入れておくことになる。最後に総まとめで、Webサイトにアクセスする場合を想定したキャンセレーショントークンの使い方を見てみよう。Webへのリクエストをシュミレートするため、ランダムなスピードで処理が実行される Search メソッドを作成する。検索の結果は、チャネルに書き込まれるというのを想定している。３つのサイトにアクセスしているが、トータルタイムで、タイムアウトが設定されている。タイムアウトになると例外が発生する。予想通りタイミングによって、タイムアウトになったり、ならなかったりする。
C#の CancellationToken が強力なので、実装がシンプルでとても良い感じ。次回はチャネルの学習の最終回。


