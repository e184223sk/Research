More than 1 year has passed since last update.　このベージでは、C#での非同期処理についてサンプルコードを交えて説明します。
　ある程度C#に触れて、「非同期処理をやってみたいな」と思った人向けです。
　「こう書けばこのような処理が出来る」程度にしか書いていないので、説明不足が多いかもしれませんがご了承ください。
　C#の言語バージョンはC# 7.0以上、.NET Framework 4.7程度です。　非同期処理と言う言葉について調べても理解が出来ない人は多いと思います。(実際、私もそうでした…)
　そこで、図を交えて説明します。
　
　非同期処理には大きく分けて2種類あります。並列処理とバックグラウンド処理です。並列処理はその名の通り、複数のスレッドを用いて処理することを言います。バックグラウンド処理は重たい処理や時間がかかる（いつまでかかるかわからない）処理（I/O待ち等）を、別のスレッド（バックグラウンドスレッド）を用いて処理することです。

赤：何らかの処理　緑：UIの更新・変更等　黄色：I/O待ち等　並列処理は、同時に処理を行うことが出来るため、例えばゲームしながら宿題をする、といったようなことが出来ます。それと、スレッド資源の有効活用にもなるので、処理によっては同期処理に比べて速くなります。
　バックグラウンド処理は、別のスレッドで時間がかかる処理を行うため、UIを更新しているスレッド（UIスレッド）を止めることがない。つまり「UIをフリーズさせることなく」時間がかかる処理を行うことが出来る。　このコードは新たにスレッドを生成して、そのスレッドによって処理を行うものです。子の様に異なるタスクを並列に処理する事をタスク並列と呼びます。
　しかし、2行も使って並列処理をするのはめんどくさいですよね？　あと、thread.Abort();をいちいち使ってスレッドを止めないといけないし・・・。
　それとThreadクラスはスレッドを生成するため、生成のイベントを通知したり、新しいスレッドの分だけスタックを確保したり・・・とにかく、内部的な面を見てもめんどくさいです。　そこで、Taskクラスを使用します！
　Taskクラスはスレッドプールというスレッドの活用法を使用しています。
　スレッドプールは簡単に言うと、スレッドの使い回しです。CPUの「XコアXスレッド」のあのスレッドのことです。
　スレッドを使い回すことによって、スレッド生成による手間（イベント通知、スタック領域の確保等）を省いています。サンプルコードこれでも十分に動きます。
しかし、普通は「Taskの生成とともに動かしたい！」というのが殆どなので、TaskクラスにはTaskの生成から処理開始までを一行で行えるメソッドが存在します。それがTask.Runメソッドです。サンプルコードTask taskとtask.Start();がいらなくなったので、最初のコードと比べると、かなりコード量は減りました。
Task.Runメソッドはかなり便利です。積極的に使いましょう。Parallelクラスはデータが違うが同じような処理を行う時に非常に便利です。
今回はParallel.Forメソッド、Parallel.ForEachメソッドについてのみ紹介します。　ざっくり説明すると、for文の処理を並列に行うメソッドです。サンプルコード　Parallel.Forメソッドは書き方がfor文に似ていますよね？（オーバーロードはありますが）forで書いた直列処理のコードに一手間加える事によって、異なるデータを並列に処理する事（データ並列）が出来ます。
　同時に処理をしているため、for文の様に0番目（id = 0）から順番に出力されるとは限りません。Parallel.ForEachメソッドはforeach文を並列に処理するメソッドです。サンプルコード　Parallel.ForEachメソッドも書き方がforeach文に似ていて（オーバーロードはありますが）、foreachで書いた直列処理のコードに一手間加える事によって、同じくデータ並列が出来ます。
　同時に処理をしているため、Parallel.Forと同様に0番目のコレクションから出力されるとは限りません。---(書きかけ)---随時追加予定---(書きかけ)---随時追加予定
TPLだけ別に書くかも……　初投稿なので、誤字脱字や不足している部分等がございましたらお知らせしていただけると幸いです。


