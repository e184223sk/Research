ファイルの保存
NUll確認やファイルの存在確認を利用して細かくエラーハンドリングしながらファイル操作を行うのは色々と気を遣います。
Fileクラスで保存する場合、Windowsのように(1),(2),,,を末尾につけて自動でインデックスは振ってくれないので同名のファイルが存在していても平気で上書きします。そこで、ファイルがいたらインデックスをつけて新しくファイルを作る方法を紹介します。string sの中身は「,」区切りの文字列であればよくCSVも同じテキストファイルなので拡張子をcsvにすればOK 
あとは出来たファイルをExcelかGoogleSpreadSheetでインポートすれば素敵な表が瞬時に作れます。
メモ帳で開いて中身を確認することもできるのでデータの抜き取りやＨＴＭＬの解析などに使い勝手が良いです。
これだけのためにフォームアプリを利用する気にはならないのでコンソールアプリで開発するひとには必須です。次のコードはメソッドで後からメイン側で呼び出せるようにしています。引数sの中身の代入例としては　と書いても良いですが、使い勝手が悪いのでのほうが見やすいです。また、CSVファイルの場合、改行コード"\n"を入れることで
段替えをおこなうことができます。ディレクトリの環境依存
提供先が誰に渡るか分からない場合、いちいちPCのユーザー名を聞き出してディレクトリにしてしまうのはよくありません。このソフトがどの環境で使用されてもいいようにSystemクラスには環境を呼び出すクラスが用意されています。次のコードは環境のデスクトップを呼び出しますのでどのPCでプログラムを実行してもそのデスクトップに保存されます。
System.Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory)ここからフォルダを自動生成して中に保存することもできます。呼び出し
ファイルの保存は基本的に非同期処理が好ましく、フォームアプリならプログラムのセッションはソフト終了まで続くので例えばセーブボタンを押してから保存完了まで操作を受け付けないというのは望ましい動作とは言えません。
しかし、今回はコンソールアプリなのでセッションが終わると非同期処理も途中で落ちてしまいます。
そこでWait()を使ってタスク完了まで待ち、完了したらセッションを閉じるようにしています。
（最初から非同期にしなければ良いと思うかもしれませんがコードに汎用性を持たせるため）メインで呼び出すときは、次のようなコードになります。


