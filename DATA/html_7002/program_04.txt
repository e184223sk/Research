
class SubStream : Stream {
    public SubStream(Stream s, long start, long length) {
        this.stream = s;
        this.start = start;
        this.length = length;

        this.stream.Seek(this.start, SeekOrigin.Begin);
    }

    Stream stream;
    long start;
    long length;

    public override long Length { get { return length; } }
    public override bool CanRead { get { return this.Position &lt; length; } }
    public override bool CanWrite { get { return false; } }
    public override bool CanSeek { get { return true; } }

    public override void Flush() { }

    public override long Position {
        get { return this.stream.Position - this.start; }
        set { this.stream.Position = this.start + value; }
    }

    public override int Read(byte[] buffer, int offset, int count) {
        if(!CanRead) return 0;

        count = (int)Math.Min(count, this.Length - this.Position);
        return this.stream.Read(buffer, offset, count);
    }

    public override long Seek(long offset, SeekOrigin origin) {
        switch(origin) {
        case SeekOrigin.Begin:
            this.stream.Seek(this.start + offset, origin);
            break;

        case SeekOrigin.Current:
            this.stream.Seek(offset, origin);
            break;

        case SeekOrigin.End:
            this.Seek(this.start + this.length + offset, origin);
            break;
        }

        return this.Position;
    }

    public override void Write(byte[] buffer, int offset, int count) {
        throw new NotImplementedException();
    }

    public override void SetLength(long value) {
        throw new NotImplementedException();
    }
}

