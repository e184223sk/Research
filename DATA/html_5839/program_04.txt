
public class TermNode : Node {
    public override void Parse(Context context) {
        Node node1 = new DivTermNode();
        node1.Parse(context);
        string token = context.CurrentToken;
        while (token == "*") {
            context.MoveNext();
            Node node2 = new DivTermNode();
            node2.Parse(context);
            context.Notation.Add(token);
            token = context.CurrentToken;
        }
    }
}

public class DivTermNode : Node {
    public override void Parse(Context context) {
        Node node1 = new FactorNode();
        node1.Parse(context);
        string token = context.CurrentToken;
        while (token == "/") {
            context.MoveNext();
            Node node2 = new FactorNode();
            node2.Parse(context);
            context.Notation.Add(token);
            token = context.CurrentToken;
        }
    }
}

public class FactorNode : Node {
    public override void Parse(Context context) {
        var token = context.CurrentToken;
        if (token == "(") {
            context.MoveNext();
            Node node = new ExpressionNode();
            node.Parse(context);
            context.MoveNext();
        } else {
            Node node = new SignedNumberNode();
            node.Parse(context);
        }
    }
}

