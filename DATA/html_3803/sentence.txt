More than 1 year has passed since last update.コレクションの操作をオブジェクト指向っぽく記述できる便利機能です（だと思っています。）。
WhereとかSelectとか出てくるのでSQLとは別物ですが、SQLを少しでもかじっていると取っつきやすいと思います。例えば、以下の作業をするとします。LINQを使わないと以下のようなコードになると思います。しかしっ！以上のコードはLINQを使えば以下のように書き換えられます！なんとっ！一行で書ける！しかも読みやすい！
（今回はあえて型を明示しています。）開発する際に、よく以下の手順を踏むことがある。
- ゲームのオブジェクトをあらかじめコレクションに格納しておく
- ボタンを押した際などのイベント時に、上記のコレクションの要素で条件にあてはまるものだけActiveにしたり、色を変えたりする☆今回実装したメニュー画面
以上のようなことをする際に、
「LINQを使えば爆速で開発できるし、行数減らせるじゃんっ！」
と、思い立って書いたコードがこちら。上記のコードのメソッド2つは、Unityのボタンイベントです。引数にUnityのHierarchy上の名前を代入して実行させる前提です。
__slideBarButtonsと_mainPanelMenusにはあらかじめUnityエディタ上から要素を追加しておきます。（そのための[SerializeField]です。）コインの裏と表のような条件分岐（例えば、Where(b =&gt; b.name.Equals(name))とWhere(b =&gt; !b.name.Equals(name))）を一つのメソッドでWhere文の中に二度も書いている・・・し、たいして可読性も上がっていない。LINQで書き換えるものは、以下のような構造のものだと分かりました・・・。
- foreach文の中で条件分岐が1つしかない
- 条件分岐にelseがない普通にforeach文で書き換えました。※if文の前にComponentの取り出しをやれよっ！LINQ初心者がハマった罠について記述しました。
複数のコレクションの論理演算とか、その他LINQには大変便利な機能があることを存じていますので、今後使える場面があれば正しく使いたいと考えています。以上っ！！


