
using System;
using System.IO;

namespace NewFeatures
{
    /// &lt;summary&gt;
    /// C# 7.0 New Features
    /// &lt;/summary&gt;
    /// &lt;remarks&gt;NuGet で System.ValueTuple をインストールすること。&lt;/remarks&gt;
    class Program
    {
        /// &lt;summary&gt;
        /// メイン
        /// &lt;/summary&gt;
        /// &lt;param name="args"&gt;&lt;/param&gt;
        static void Main(string[] args)
        {
            int n;
            string[] menu = { " 1. out 変数", " 2. is 式の強化", " 3. switch 文の強化", " 4. タプル", " 5. タプル要素の使用",
                " 6. ローカル関数", " 7. リテラルの改善", " 8. ref の戻り値", " 9. async 関数の戻り値 (未実装?)", "10. クラスメンバーなどの書き方改善",
                "11. throw の改善" };

            while (true)
            {
                Console.WriteLine("\tC# 7.0 の新機能\n");
                foreach (var mi in menu)
                {
                    Console.WriteLine(mi);
                }

                // 番号を入力。
                Console.Write("\n&gt; ");
                var ns = Console.ReadLine();

                if (Int32.TryParse(ns, out n))
                {
                    switch (n)
                    {
                        case 1:
                            // out 変数
                            testOutVariables();
                            break;

                        case 2:
                            // is 式の強化
                            testIsExpression();
                            break;

                        case 3:
                            // switch 文の強化
                            testSwitch();
                            break;

                        case 4:
                            // タプル
                            testTuple();
                            break;

                        case 5:
                            // タプル要素の使用
                            testDeconst();
                            break;

                        case 6: // ローカル関数
                            testLocalFunc();
                            break;

                        case 7: // リテラルの改善
                            testImproveLiteral();
                            break;

                        case 8: // Ref の戻り値
                            testRefReturn();
                            break;

                        case 9:  // async 関数の戻り値
                            testAsyncFunc();
                            break;

                        case 10:  // クラスメンバーなどの書き方改善
                            testBodiedMember();
                            break;

                        case 11:  // throw の改善
                            testThrow();
                            break;

                        default:
                            break;
                    }
                }
                else
                {
                    Console.WriteLine("番号が正しくありません。");
                    break;
                }
            }
        }

        /// &lt;summary&gt;
        /// out 変数
        /// &lt;/summary&gt;
        static void testOutVariables()
        {
            Console.Write("= ");
            string str = Console.ReadLine();

            if (Int32.TryParse(str, out int n))
            {
                Console.WriteLine($"n = {n}");
            }
            else
            {
                Console.WriteLine("整数に変換できません。\n");
            }
        }

        /// &lt;summary&gt;
        /// is 演算子の強化
        /// &lt;/summary&gt;
        static void testIsExpression()
        {
            object o = 101;

            if (o is int i)
            {
                i++;
                Console.WriteLine("結果 {0}\n", i);
            }
            else
            {
                Console.WriteLine("整数に変換できません。\n");
            }
        }

        /// &lt;summary&gt;
        /// switch 文の強化
        /// &lt;/summary&gt;
        static void testSwitch()
        {
            // ここの代入値を変更してみる。
            object o = "3";

            switch (o)
            {
                case int i:
                    Console.WriteLine("整数 {0}", i);
                    break;

                case char c:
                    Console.WriteLine("文字 {0}", c);
                    break;

                case float f:
                    Console.WriteLine("単精度浮動小数点数 {0}", f);
                    break;

                case string s when (s.Length &gt; 0):
                    Console.WriteLine("空でない文字列 {0}", s);
                    break;

                default:
                    Console.WriteLine("サポートしていないです。");
                    break;
            }
        }

        /// &lt;summary&gt;
        /// タプル
        /// &lt;/summary&gt;
        /// &lt;remarks&gt;NuGet で "System.ValueTuple" をインストールすること。&lt;/remarks&gt;
        static void testTuple()
        {
            Tuple&lt;string, float&gt; tower1 = getHeight("通天閣");
            Console.WriteLine("名前：{0}  高さ：{1}", tower1.Item1, tower1.Item2);

            (string, float) tower = lookupHeight("東京タワー");
            Console.WriteLine("名前：{0}  高さ：{1}", tower.Item1, tower.Item2);

            (string name, float height) tower2 = lookupHeight("東京スカイツリー");
            Console.WriteLine("名前：{0}  高さ：{1}", tower2.name, tower2.height);
        }

        /// &lt;summary&gt;
        /// 従来の Tuple 型の使用例
        /// &lt;/summary&gt;
        /// &lt;param name="name"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        static Tuple&lt;string, float&gt; getHeight(string name)
        {
            Tuple&lt;string, float&gt; tower;

            switch (name)
            {
                case "東京タワー":
                    tower = new Tuple&lt;string, float&gt;(name, 333.0f);
                    break;

                case "東京スカイツリー":
                    tower = new Tuple&lt;string, float&gt;(name, 634.0f);
                    break;

                case "通天閣":
                    tower = new Tuple&lt;string, float&gt;(name, 108.0f);
                    break;

                default:
                    tower = new Tuple&lt;string, float&gt;("unknown", 0.0f);
                    break;
            }

            return tower;
        }

        /// &lt;summary&gt;
        /// 新しい Tuple の使用例
        /// &lt;/summary&gt;
        /// &lt;param name="name"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        static (string, float) lookupHeight(string name)
        {
            (string, float) tower;

            switch (name)
            {
                case "東京タワー":
                    tower = (name, 333.0f);
                    break;

                case "東京スカイツリー":
                    tower = (name, 634.0f);
                    break;

                case "通天閣":
                    tower = (name, 108.0f);
                    break;

                default:
                    tower = ("unknown", 0.0f);
                    break;
            }

            return tower;
        }

        /// &lt;summary&gt;
        /// タプル要素の使用
        /// &lt;/summary&gt;
        static void testDeconst()
        {
            (string name, float height) = lookupHeight("東京スカイツリー");
            Console.WriteLine($"name: {name}, height: {height}");
        }


        delegate double FuncHypo(double x, double y);

        /// &lt;summary&gt;
        /// ローカル関数
        /// &lt;/summary&gt;
        static void testLocalFunc()
        {
            // ラムダ式で定義したローカル関数
            FuncHypo Hypo = (double x, double y) =&gt; Math.Sqrt(x * x + y * y);

            // ローカル関数(新機能)
            double hypotenuse(double x, double y)
            {
                return Math.Sqrt(x * x + y * y);
            }

            double Y = hypotenuse(1.0, 0.5);
            Console.WriteLine($"1 斜辺の長さ {Y}");
            Y = Hypo(1.0, 0.5);
            Console.WriteLine($"2 斜辺の長さ {Y}");
        }

        /// &lt;summary&gt;
        /// リテラルの改善
        /// &lt;/summary&gt;
        static void testImproveLiteral()
        {
            var b = 0b1010_1011_1100_1101_1110_1111;
            Console.WriteLine("{0:x}", b);
        }

        /// &lt;summary&gt;
        /// Ref の戻り値
        /// &lt;/summary&gt;
        static void testRefReturn()
        {
            int[] arry = { 5, 3, 4, 0 };

            // 3 の参照が返される。
            ref int p = ref findIt(3, arry);
            Console.WriteLine(p);

            // 参照なので p を変更すれば配列の要素が変更される。
            p = -1;
            Console.WriteLine(arry[1]);
        }

        /// &lt;summary&gt;
        /// 見つかった配列の要素でなく、その参照を返す関数
        /// &lt;/summary&gt;
        /// &lt;param name="n"&gt;探す値&lt;/param&gt;
        /// &lt;param name="arry"&gt;探す対象の配列&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        static ref int findIt(int n, int[] arry)
        {
            var i = 0;
            while (i != arry.Length)
            {
                if (arry[i] == n)
                {
                    return ref arry[i];
                }
                i++;
            }

            throw new Exception("見つかりませんでした。");
        }


        /// &lt;summary&gt;
        /// async 関数の改善
        /// &lt;/summary&gt;
        static async void testAsyncFunc()
        {
            var sr = new StreamReader(@"C:\temp\Hcg.sql");
            char[] buffer = new char[0x1000];
            int n = await sr.ReadAsync(buffer, 0, buffer.Length);
            System.Threading.Thread.Sleep(10);
            Console.WriteLine($"\n n = {n}");
            //return n;
        }

        /// &lt;summary&gt;
        /// クラスメンバーなどの書き方改善
        /// &lt;/summary&gt;
        static void testBodiedMember()
        {
            var o = new Class1();
            o.Name = "CLASS";
            Console.WriteLine(o.Name);
            Console.WriteLine(o.Length);
        }

        /// &lt;summary&gt;
        /// throw の改善
        /// &lt;/summary&gt;
        static void testThrow()
        {
            var o = new Class1();
            try
            {
                o.getValue();
            }
            catch (NotImplementedException )
            {
                Console.WriteLine("NotImplementedException");
            }
        }
    }
}

