More than 3 years have passed since last update.この記事は、MSDN .NET Blog に出ていた内容について簡単にまとめたものです。今回の機能強化は主に便利機能が中心です。サンプルは独自に作り動作確認を行ってみました。New Features in C# 7.0 このブログによると、新機能は以下の通りです。out パラメータを持つメソッドを呼び出すときに、同時に変数宣言ができるという優れものです。従来は、別に変数宣言を行う必要がありました。 これも便利機能の一種です。is が成立した場合、宣言した変数に同時に代入することができます。 case のところに型判別と変数宣言ができるようになりました。今回の強化点で最も大きい項目がタプル関連機能の強化だそうです。従来のバージョンでも Tuple クラスを使ってタプル機能は利用できました。ただ、これだと使い勝手が悪く、あえてタプルを使わなくても他の方法で目的の機能を実現できたのであまり使われていなかったようです。今回のタプル機能強化で簡単な文法でタプルを使えるようになったので、これまで以上に使われるようになるかもしれませんね。(注意) この機能を使うためには、NuGet で System.ValueTuple をインストールする必要があり、これを怠ると文法エラーになります。 前のタプルのサンプルと似ていますが、タプル変数を宣言しなくても、タプルのメンバーに直接代入できます。従来の C# でも、匿名メソッドをデリゲート変数に代入することにより、ローカル関数を実現できましたが、今回の強化でずばりメソッド内に関数を記述できるようになりました。そのメソッド内だけでしか使わない関数は、ローカル関数にした方がわかりやすいですね。リテラル内に _ を記述して見やすくすることができるようになりました。長い２進数などは、これがないと非常にわかりづらいですね。関数の戻り値として「値」でなく「参照」を返せるようになりました。ただ、あまり使う機会はないような気がしますが。async が付いた関数の戻り値は void, Task, Task&amp;ltT&amp;gt: のどれかである必要があります。この制限をなくすような強化点のようですが、実際にはまだ実装されていない(?)ようで、.NET Blog でもサンプルが出ていません。現在のバージョンでも下のサンプルのように整数を返すような書き方ができるので(Task&lt;int&gt; を返している)、実装されていなくても関係ないと言えば関係ないですが。(注意)コメント欄参照。プロパティの宣言などで =&gt; を使って式を書けるようになりました。前のサンプル (Class1) でラムダ式のように throw を書いていますが、それが正しく動作するかのサンプルが次のコードです。前のサンプルの全体は以下のようになっています。実行例


