More than 3 years have passed since last update.Github Pagesでちょっとしたサイトを公開するのにJekyll(Github側でビルドしてたからプラグインがほとんど使えない)を使っていたのですがやっぱりC#使いたくなったのでC#を使える静的サイトジェネレーターを探したらWyamがありました試したら最高だったので紹介します当記事では現状最新の0.15.*-betaをもとにしていますあと今後.NET Coreとしてクロスプラットフォームにする予定みたいです
https://wyam.ioトップのスクショですレシピとテーマがありますが使ってないので当記事では紹介しないですリリースページ
ここを読んでから入れろと書いてありますがWindowsのインストーラーのSetup.exeを動かせばWyamのコマンドプロンプトがインストールされますC#使うからにはやっぱりVisualStudioの補完が使いたい！ってなるのでVS先輩使いますまずプロジェクト作成ですがASP .NET(.NET Framework)プロジェクトにします

テンプレートですが空のテンプレートでMVCのところにチェックを入れてください(チェックを入れなくても自分で用意することもできますが)
作成されたらプロジェクトのプロパティで必ず対象フレームワークを.NET Framework 4.6にしてください
4.5のままだとNuGetのパッケージが用意されていません
次にVSのビルドでWyamのビルドをできるようにしたら楽なのでWyamのパッケージをNuGetからインストールしますPreview版なのでパッケージマネージャーコンソールからインストールすることにしますWyamのバージョンはすべて同じ系統で統一したほうがいいですこんな感じでソリューションフォルダ直下のpackagesフォルダにWyamのツールが追加されるのでこれをビルドイベントに追加します
これをビルドイベントに書き足すのですがバージョンとコンフィグファイルは各自合わせてくださいVS先輩の補完に使うためにWyam.Commonをプロジェクトに追加しておきますこちらもパッケージマネージャーコンソールからインストールします先ほどビルドイベントで指定したようにソリューションフォルダ直下にconfig.wyamを追加します
#nの行はNuGetパッケージです(-pはプレリリース版) 使うモジュールなどに合わせて追記してください
FileSystem.InputPaths.Add(string);で用意するファイル群ディレクトリを追加します(デフォルトではinput,theme)
最初はFront matter YAMLとRazorを使って直下のindex.htmlを生成するコードにしますC#風な書き方ですがThe configuration file is evaluated as C# code, so you can make use of the full C# language and the entire .NET ecosystem. However, it's not necessary to know C# to write Wyam configuration files. The syntax has been carefully crafted to be usable by anyone no matter their level of programming experience. Some extra pre-processing is also done to the file to make certain code easier to write (which actually makes the syntax a superset of C#, though this extra magic is entirely optional).
https://wyam.io/docs/usage/configurationより構成ファイルはC＃コードとして評価されるため、完全なC＃言語と.NETエコシステム全体を利用できます。ただし、Wyamの設定ファイルを書き込むためにC＃を知る必要はありません。構文は、プログラミング経験のレベルに関係なく誰もが使用できるように慎重に作られています。いくつかの余分な前処理もファイルに対して行われ、特定のコードを簡単に書くことができます（この余分なマジックは完全にオプションですが、実際にはC＃のスーパーセットになります）。
Google翻訳よりとあるように知識がなくても書けて、知識があったらやりたいように書けるという風ですVS先輩の補完を使うには以下のものをcshtmlファイルに追加するといいです
下記ではModel.MetadataからメタデータメソッドにアクセスしてますがModelにも生えてるのでわざわざMetadataにアクセスしなくていいです(小声)先ほどVS先輩のビルドイベントに追加していたらVisualStudioのビルドメニューから該当プロジェクトをビルドするだけでWyamのビルドがされます
少し(自分の環境で30秒ぐらい)時間がかかるのでTwitterでも見ながら暇つぶしするといいですビルドが成功したらソリューション直下のoutputフォルダに生成されるはずなので確認しましょうこんな感じのが生成されていたら成功です
もしビルドエラーがでたらVS先輩からじゃ詳細がわからないのでWyam.exeのパスが通ったコマンドプロンプトでwyam buildをして確認してくださいWyam.exeのパスが通ったコマンドプロンプトでwyam previewするとlocalhostでブラウザから確認できますこれ以降各cshtmlファイルで以下のものが宣言されてる前提にします以下が参考になります各ViewのモデルにはIDocumentインターフェースを実装したもの(おおかたDocumentクラスだろうけども)が来ます
ASP .NETでのMVCパターンのModelとViewの部分が表面に出てきてControllerはWyamが勝手にするという感じですかねジェネリクスなGetメソッドが用意されています
以下はTitleキーのstring型を取ってくる例ですstring型用のStringメソッドも用意されていますグローバルメタデータの場合はconfig.wyamに以下のように書きますアクセス方法はglobalMetadata変数から通常のメタデータを取ってくるのと同じ方法ですIMetadataインターフェースが参考になります
補足ですがIDocumentインターフェースはIMetadataインターフェースを継承してるのでModelからでもアクセスできますIExecutionContextインターフェースにはModelと関連付けられたViewへのリンク(実際の相対URL)を取得するメソッドが用意されています(引数はIMetadataインターフェースでいいです)ただ、この方法はメタデータにある、後述するWriteFilesモジュールなどでセットされるFilePathを利用するのでそのあとの処理でしか使えないです他には、FilePath型のIDocument.Sourceプロパティから出力されるパスに変換するという手もあります
FilePathクラス参考使い道はページ一覧とかタグ一覧とかになりますがちゃんと他のViewのModelを取得することができます(※ただし処理済みのものに限る)IEnumerableを継承したIDocumentCollection型をcontext.Documentsで取得できます
パイプラインによる絞り込みもFromPipeline(string)メソッドで行えますそこからメタデータなどによって絞り込みをすれば一覧ページなどを作ることができますが、処理済みのModelしか取得できないのでconfig.wyamに書くパイプラインの順番には気を付けたほうがいいですどう説明したらいいかわからないので作ったサイトのconfig.wyamを上から補足するように説明しますRazorモジュールのように書くだけですRazorモジュールと組み合わせて使うこともできます、また同じフォルダにcshtmlファイルとmdファイルを共存させることもできます
その場合はConcatモジュールを使いますパイプライン内でもModelのメタデータを追加できます自分の場合Jekyllで書いたファイルをそこまで手直ししたくなかったのでファイル名が(Year)-(Month)-(Day)-(Title).md形式になっているのですがここから時刻をメタデータに格納して出力パスも(Year)/(Month)/(Day)/(Title)にしますサイトの概要を自動で生成したくなりますが、そのときはExcerptモジュールを使います
デフォルトでは一番最初に現れたpタグをメタデータにキーをExcerptとして格納しますまたデフォルトではpタグ自身を含めたり、内部のHTMLタグをそのまま入れたりするのでIfモジュールとMetaモジュールを使い再格納します基本的なモジュールですが出力したいパスが各自違うと思うのでまとめておきますそのまま出力する相対パスはそのままで拡張子だけ変える相対パスをstring型で返す
(例はブラウザでアクセスするときファイル名を隠せるようにindex.htmlファイルにする奴)相対パスをFilePath型で返す
(例は出力直下にindex.htmlファイルを置く奴)ここでWyamの真骨頂Executeモジュールです
やりたいことが用意されているモジュールにないとき、わざわざモジュールを作らなくてもC#をスクリプトとして動かしてやりたいようにできるモジュールですやりたいことの例として、すべての(処理済みの)ドキュメントからTagsというキーのメタデータがあるModelを集めてそのタグごとのModel一覧ページを作るです通常はReadFilesモジュールからコンテンツを作成していきますが、元ファイルがないところからでも作れますただパイプライン上で各Viewを表現するのは鬼畜の所業なのでRazorさんを使ってテンプレートからViewを作成します
また、ファイルがないとこからの処理なのでRazorのとこでWithViewStart(FilePath)メソッドでViewStartを指定します
(View側は_ViewStart.cshtmlが参照してるLayoutでメタデータ中心のレイアウト組めばいいです)ページネーションもちゃんとできます
最初の引数で1ページごとのコンテンツ数を指定し、そのあとの引数で処理するコンテンツをモジュールで引き出します
DocumentsモジュールではReadFilesのようにパイプラインからコンテンツを引き出せます
OrderByモジュールはその名の通りソートしてますメタデータのキーについてはPaginateモジュールを参照してください特に説明することはないですがCopyFilesモジュールでそのままコピーしたり、LessモジュールでLessを処理したり、MinifyCSSモジュールでCSSを圧縮したりできます以上のようにやりたいことは何でもできるようになっています(知識が必要でないとは言っていない)
紹介してないモジュールもたくさんありますのでぜひ使ってみてくださいあといつまでbeta版なんだろ…


