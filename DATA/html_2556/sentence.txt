More than 1 year has passed since last update.前回ASP.NET Core 3.0 Razor Pages 事始め(2)の続きです。今回はちょっと寄り道です。RazorPagesMovieContextクラスのソース見直していたら、とプロパティ名が単数形になってます。僕のタイプミスかなと思ったのですが、チュートリアルのコードが単数形になっていました。やはり、複数形にしたいです。
ということで、Moviesと複数形に直したいと思います。これを参照している個所(cshtml ファイルも含めて）Movies に変更します。Index.cshtml.cs 内の、Movie プロパティも Movies に変更します。併せて、Index.cshtml 内も変更します。これで、ビルドし直し、F5キーで実行し、次のURLにアクセスします。あれ、 以下のようなエラーページが出てしまいました。ああ、データベースのテーブル名と一致しないのでダメなんですね。ということで、もう一回マイグレーションを実施します。とやれば、できると思ったのですが、SQLiteでは制限があるようで失敗します。なので、MvcMovie.db ファイルを削除後、Migrationsフォルダ以下を全て削除します。それから以下のコマンドを再度実行します。MvcMovie.db ファイルが再度作成されたことを確認後、F5キーで実行します。直接、以下のURLにアクセスします。

https://localhost:5001/Movies
無事、/Movies/Index ページが起動できました。SQLiteで本格的にアプリ開発するとき(そんなケースはあまりないと思いますが)はちょっと工夫が必要そうです。ちょっと、ここで、RazorPagesのURLルーティングがどうなっているかを少し見てみます。アプリを起動し、Privacy のリンクをクリックします。するとPrivacyページが開きます。この時の URLは、です。ページ名が、URLと対応しているのが分かります。ちなみに、Startページ（index.cshtml)のURLは、です。
プロジェクトのソースコードのどこを見ても、indexがデフォルトのページだという指定はありませんでした。
これはフレームワーク側で決めているようです。当然ですが、ブラウザで、とURLを直接指定した場合も、indexページが表示されました。さきほどの、MoviesのIndexページのURLもで、Movies/Index.cshtml が開きます。Createページの URLは、です。実にわかりやすいです。Pagesフォルダーに新たなフォルダを作成し、/Pages/Sample/Hello.cshtmlというページを作成すれば、URLは、となります。フォルダ階層がURLのパスと一致するので、とても分かりやすいです。表にまとめてみました。今回は少し寄り道をしてしまいましたが、次回は、公式チュートリアルのASP.NET Core でスキャフォールディングされた Razor ページをやっていこうと思います。


