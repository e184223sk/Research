public class Deck
{
    /// &lt;summary&gt;
    /// 山札用管理リスト
    /// &lt;/summary&gt;
    private List&lt;Card&gt; cards = new List&lt;Card&gt;();

    /// &lt;summary&gt;
    /// 引いたカードの枚数を管理
    /// 山札からカードを引くときに使用
    /// &lt;/summary&gt;
    private int _drawn_Card_Number = 0;

    public Deck()
    {
        // 山札の生成
        Deck_Prepare();
    }


    public Card this[int i]
    {
        get =&gt; this.cards[i];
    }

    /// &lt;summary&gt;
    /// カードを52枚分生成して山札とする
    /// &lt;/summary&gt;
    private void Deck_Prepare()
    {
        if (cards == null)
        {
            return;
        }

        // Cardを生成して山札とする(52枚)
        for (int mark_i = 1; mark_i &lt;= 4; mark_i++)
        {
            for (int no_i = 1; no_i &lt;= 13; no_i++)
            {
                cards.Add(new Card(mark_i, no_i));
            }
        }

        // 山札をシャッフルする
        Shuffle();
    }

    /// &lt;summary&gt;
    /// 山札をシャッフルする
    /// ゲームの途中でシャッフルする可能性があるためメソッド化
    /// &lt;/summary&gt;
    public void Shuffle()
    {
        if (cards != null)
        {
            // 山札をシャッフルする
            cards = cards.OrderBy(a =&gt; Guid.NewGuid()).ToList();
        }
    }

    /// &lt;summary&gt;
    /// 山札からカードを一枚引く
    /// &lt;/summary&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public Card Hit_Card()
    {
        try
        {
            return cards[_drawn_Card_Number];
        }
        finally
        {
            // 必ず+1させる。(次のカードを引くため)
            _drawn_Card_Number++;
        }
    }
}

