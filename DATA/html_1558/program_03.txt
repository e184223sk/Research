
abstract class BasePlayer : IPlayer
{
    /// &lt;summary&gt;
    /// 21を超えたか判定
    /// true:21以上
    /// &lt;/summary&gt;
    public bool isBusted
    {
        get
        {
            return TotalValue &gt; 21;
        }
    }

    /// &lt;summary&gt;
    /// 手札の合計値
    /// &lt;/summary&gt;
    public int TotalValue { get; private set; } = 0;


    /// &lt;summary&gt;
    /// 自分の手札
    /// &lt;/summary&gt;
    public List&lt;Card&gt; MyHand { get; set; } = new List&lt;Card&gt;();


    /// &lt;summary&gt;
    /// 自分のターンの処理
    /// &lt;/summary&gt;
    /// &lt;param name="cards"&gt;山札&lt;/param&gt;
    public void MyTurn(Deck cards)
    {
        Exe_MyTurn(cards);
    }


    /// &lt;summary&gt;
    /// 手札にカードを加える
    /// &lt;param name="card"&gt;手札に追加するカード&lt;/param&gt;
    /// &lt;/summary&gt;
    public virtual void Add_MyHand(Card card)
    {
        MyHand.Add(card);
        Calculate_TotalValue(card.No);

        Console.WriteLine(Properties.Resource.Msg_DrawCard, this.ToString(), card.ToString());
        Disp_MyHand();
    }


    /// &lt;summary&gt;
    /// 手札の合計値の計算
    /// バーストしているかの判定するための計算処理なので、A(エース)は1として計算する
    /// &lt;/summary&gt;
    /// &lt;param name="no"&gt;手札に追加されたカードの数値&lt;/param&gt;
    protected void Calculate_TotalValue(int no)
    {
        // J(11)、Q(12)、K(13)は10として計算する
        if (no &gt; 10)
        {
            no = 10;
        }

        TotalValue += no;
    }

    /// &lt;summary&gt;
    /// 自分の手札を画面表示する
    /// &lt;/summary&gt;
    protected void Disp_MyHand()
    {
        var dispStr = "";

        foreach (var card in MyHand)
        {
            dispStr += "[" + card.ToString() + "]";
        }
        Console.WriteLine(Properties.Resource.Msg_MyHand, this.ToString(), dispStr);
    }

    /// &lt;summary&gt;
    /// A(エース)を考慮した最善手の合計値に更新する
    /// &lt;/summary&gt;
    public void BestSelect_TotalValue()
    {
        Disp_MyHand();

        // 手札にA(エース)が含まれない場合は終了
        if (MyHand.Count(x =&gt; x.No == 1) == 0)
        {
            return;
        }

        // 合計値計算用
        var tmpVal = 0;

        // A(エース)以外を抽出して計算
        var otherA_MyHand = MyHand.Where(x  =&gt; x.No != 1);

        foreach (var card in otherA_MyHand)
        {
            if (card.No &gt; 10)
            {
                tmpVal += 10;
            }
            else
            {
                tmpVal += card.No;
            }
        }

        // A(エース)を抽出して計算
        var onlyA_MyHand = MyHand.Where(x =&gt; x.No ==1);

        foreach (var card in onlyA_MyHand)
        {
            // バーストしなければA(エース)を[11」として計算
            // バーストする場合は、A(エース)を「1」として計算
            if ((tmpVal + 11) &gt; 21 )
            {
                tmpVal += 1;
            }
            else
            {
                tmpVal += 11;
            }
        }

        // 合計値を更新する
        TotalValue = tmpVal;
    }


    /// &lt;summary&gt;
    /// 抽象メソッド
    /// 継承先で自分のターンの処理を実行する
    /// &lt;/summary&gt;
    /// &lt;param name="cards"&gt;&lt;/param&gt;
    protected abstract void Exe_MyTurn(Deck cards);

}

