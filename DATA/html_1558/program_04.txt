
class Player : BasePlayer
{
    /// &lt;summary&gt;
    /// プレイヤー番号
    /// &lt;/summary&gt;
    private int playerNumber;

    /// &lt;summary&gt;
    /// ToStringのオーバーライド
    /// プレイヤー+番号を返す
    /// &lt;/summary&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public override string ToString()
    {
        return string.Format("プレイヤー{0}", playerNumber);
    }

    /// &lt;summary&gt;
    /// コンストラクタ
    /// &lt;/summary&gt;
    /// &lt;param name="num"&gt;プレイヤー番号&lt;/param&gt;
    public Player(int num)
    {
        // プレイヤー番号の割り当て
        playerNumber = num;
    }

    /// &lt;summary&gt;
    /// プレイヤーのターンに実行する処理
    /// &lt;/summary&gt;
    /// &lt;param name="cards"&gt;山札&lt;/param&gt;
    protected override void Exe_MyTurn(Deck cards)
    {
        Console.WriteLine();
        Console.WriteLine(Properties.Resource.Msg_Turn, this.ToString());
        Disp_MyHand();


        // バーストしていない間(isBusted=false)はループを続行
        // プレイヤーがスタンドした場合はループを終了
        while (! isBusted)
        {
            // カードを引くか尋ねる(false:カードを引くのをやめる)
            if (! Game_Controller.Confilm(Properties.Resource.Msg_Stand))
            {
                return;
            }

            // カードを手札に加える
            var card = cards.Hit_Card();
            Add_MyHand(card);
        }

        if (isBusted)
        {
            // バーストした
            Console.WriteLine(Properties.Resource.MSg_Busted);
        }
    }
}

