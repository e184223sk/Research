
class Dealer : BasePlayer
{
    /// &lt;summary&gt;
    /// ディーラーがカードを引き続ける合計値のボーダーライン
    /// &lt;/summary&gt;
    private readonly int Boarder_TotalValue = 17;

    /// &lt;summary&gt;
    /// ToStringのオーバーライド
    /// ディーラーを返す
    /// &lt;/summary&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public override string ToString()
    {
        return "ディーラー";
    }

    /// &lt;summary&gt;
    /// 手札にカードを加える
    /// &lt;/summary&gt;
    /// &lt;param name="card"&gt;手札に追加するカード&lt;/param&gt;
    public override void Add_MyHand(Card card)
    {
        MyHand.Add(card);
        Calculate_TotalValue(card.No);

        // ディーラーの初期手札の2枚目を表示しない考慮
        if (MyHand.Count != 2)
        {
            Console.WriteLine(Properties.Resource.Msg_DrawCard, this.ToString(), card.ToString());
            Disp_MyHand();
        }
    }

    /// &lt;summary&gt;
    /// ディーラーのターンの処理
    /// 自分の手札の合計値が17以上になるまでカードを引く
    /// &lt;/summary&gt;
    /// &lt;param name="cards"&gt;山札&lt;/param&gt;
    protected override void Exe_MyTurn(Deck cards)
    {

        Console.WriteLine();
        Console.WriteLine(Properties.Resource.Msg_Turn, this.ToString());

        // ディーラーの2枚目のカードをオープンする
        Console.WriteLine(Properties.Resource.Msg_Dealers_2nd, MyHand[1].ToString());
        Disp_MyHand();

        // 自分の手札の合計値が17以上になるまでカードを引く
        while (TotalValue &lt; Boarder_TotalValue)
        {
            // カードを手札に加える
            var card = cards.Hit_Card();
            Add_MyHand(card);
        }

        if (isBusted)
        {
            // バーストした
            Console.WriteLine(Properties.Resource.MSg_Busted);
        }
    }
}

