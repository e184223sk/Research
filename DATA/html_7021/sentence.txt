More than 5 years have passed since last update.Roslyn もくもく勉強会の記録。Roslyn は活発に開発中のため、言語仕様含めて随時更新される。
内容は8/6（土）現在のものがベース。
あまり込み入った記述をするとエディターが落ちるので注意。Gitでリポジトリを取得。Visual Studio 開発者コマンドプロンプトを起動し、取得先のフォルダに移動。下のコマンドを実行。Nugetの更新やパッケージの取得が走る（10分くらいかかる）。下のコマンドを実行してビルド（これも10分以上かかるはず）。Visual Studio でRoslyn.sln を開く。ソリューションをビルドする。Binaries フォルダ以下に VisualStudioSetUp.visx が生成されれば一安心。VisualStudioSetUp をスタートアッププロジェクトに指定してF5で実行する。独立した Visual Studio のインスタンスが起動するので、そこでコンソールアプリケーションプロジェクトを作成する。ほぼ下のリンクの通り。現時点で使える機能は以下の通り。詳細と最新のステータスは Language Feature Status を参照。……ただし。
関数の戻り値で Tuple Types を使うとコンパイルエラーが出るので、一点だけ追加の準備が必要。きちんとした内容は主催者でもある 岩永氏のブログを参照。２進数リテラル。 0b または 0B から定数値の記述をはじめると２進数表記が使える。整数値リテラルを _ で区切ることができる。 0b_1100_1111 のようにして使う。ローカル関数。つまり関数内関数。デリゲートやラムダ式と同じで周囲の変数をキャプチャできる。文字どおり、switch 文を型＋変数で分岐させるもの。型のみを対象としたパターンマッチングの一部。switch だけでなく、 is 演算子も予定されている。
これができると下のコードが、下のようにかける。intのような値型でも統一的に使える点で as 演算子よりも優れている。ILレベルでは予想通り if + as にコンパイルされるので、
現時点では単なるシンタックスシュガー。戻り値とローカル変数で ref を使えるようにするという話。もともとの ref の意味からは外れるが、
構造体の受け渡しのオーバーヘッドをなくしたり、
アンマネージドコードのポインタを返す関数を受け取ったりする要望に応えたもの。タプルまわりのアップグレード。
LL的な書き心地ももちろんあるが、async/await構文のために関数の 多重戻り値 のサポートが必要になったのも大きいだろう。具体的には以下の3つの小機能からなる。全部使うと以下のようになる。名前によるアクセスはコンパイラにしか見えない擬似的なフィールド。
ILのレベルではプレーンな System.Tuple と変わらず、
単に TupleElementNamesAttribute という属性で名前を与えている。
なので、リフレクションや式木で扱うときは注意がいる。分解の対象はタプルに限らない。
仕様は揺れているが、拡張メソッドを含めて特定の名前と形のメソッドを提供してさえいればどんなクラスでも適用できるようになる予定。
イメージとしては演算子オーバーロードに近い。out で変数を受け取るときに var で変数を定義するという話。
要するにこれがこうなる。
変数のスコープが「はみ出ない」ことにも注目されたし。 
修正されました。単純に外側の {} ではなく、説明すると少し複雑になる。という話で、言語機能の変更としては 1 が大。Task-like は構文だけあっていればインターフェイスなどは不要（いわゆる structural typing）。
なので、今後、拡張メソッドの static メソッド対応（static extension methods）が実装されると
既存の独自の「非同期」型でも async/await が使えるようになると期待されている。ある程度、新機能を追っているひとへ。なお Visual Studio 15 Preview での実装状況については以下を参照のこと（8/24時点）。
https://blogs.msdn.microsoft.com/dotnet/2016/08/24/whats-new-in-csharp-7-0/


