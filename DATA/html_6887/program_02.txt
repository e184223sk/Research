
class Data{
    long totalvalue {get; private set;}
    long maxvalue {get; private set;}
    long count {get; private set;}

    public static long InterlockedCompareExchange(ref long location, long value, Func&lt;long, bool&gt; compare)
    {
        long initialValue;
        do
        {
            initialValue = location;
            if (compare(initialValue)) return initialValue;
        }
        while (System.Threading.Interlocked.CompareExchange(ref location, value, initialValue) != initialValue);
        return initialValue;
    }

    void update(long value){
        System.Threading.Interlocked.Add(ref totalvalue, value);
        System.Threading.Interlocked.Increment(ref count)
        InterlockedCompareExchange(ref maxvalue, value, mv =&gt; mv &lt; value);
    }
}

