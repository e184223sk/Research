More than 3 years have passed since last update.LINE Bot 開発に Microsoft Bot Framework を活用して、より高度なボットを容易に開発したい。以前 Microsoft Bot Framework と LINE を連携して賢いボットを開発 で Microsoft Bot Framework を使った LINE Bot の開発を紹介しましたが、いくつか課題がありました。上記の課題があっても、はやり Microsoft Bot Framework で開発するメリットは多いです。いくつか理由があります。でも LINE Bot 開発者としては、最後の複数チャネルサポートはどうでもいいです。Microsoft Bot Framework を使いたい理由は上記にあげましたが、結局 BotBuilder SDK を使いたいだけ。よって以下の実現をします。簡単に言うと、LINE から来たメッセージを BotBuilder が分かる形式に変換し、BotBuilder から返す応答を、LINE が分かる形式にすれば良いだけです。開発したソリューションは GitHub: LINEChannelConnector にあります。また LINE Messaging API 部分は こちらのライブラリ を使っています。以下に実装の概要を紹介します。LINE から自分の WebAPI に来たメッセージは OWIN ミドルウェアを開発して自分のコードに要求が渡る前に変換します。
このミドルウェアで署名の検証や LINE の Events を BotBuilder の Activity に変換します。コードは LINEMiddleware.cs 参照
Bot に対する応答は HTTP 要求に対する応答とは別に、自分の WebAPI から別途送り出すことになるため、OWIN ミドルウェアでの対処はできません。そこで BotBuilder の IConversation  を継承したクラスを作成して利用することで、送信の直前にデータを変換する仕組みを入れます。コードは LINEConversation.cs 参照
そのうち Visual Studio 用のテンプレートを作るかもしれませんが、サンプルは以下にあります。あまり考えずにとりあえずこちら実行で OK です。GitHub: LINE Channel Connector Test Web アプリStartup.cs に通常の OWIN ミドルウェア同様に差し込みます。ここで自身の Bot のチャネルシークレットやトークンを渡します。値は Web.Config を変更してください。また以下のサンプルではローカルシミュレータを使う想定となっているため、lineConfig.Uri に値を別途渡しています。シミュレーターについては ボット開発用 LINE クライアントシミュレーターで開発スピードを上げる を参照してください。OWIN ミドルウェアの利用時に設定しているため、特にやることはありません。
コードは LINEMiddlewareConfig.cs を参照。受信した LINE Events から BotBuilder Activity の変換は LINEClient.cs の ConvertToActivity メソッドで行っています。必要に応じて変更してください。
LINEClient.cs - ConvertToActivity メソッドBotBuilder Activity から LINE ISendMessage への変換は ConvertToLineMessages メソッドで行っています。
LINEClient.cs - ConvertToLineMessages メソッドある程度コードが固まったら Visual Studio テンプレートを作る予定です。フィードバックお待ちしています。C# SDK for LINE Messaging API
LINEChannelConnector
ボット開発用 LINE クライアントシミュレーターで開発スピードを上げる


