何でエリアを利用するかについては省きます。.net 5.0
Microsoft Visual Studio Community 2019 Version 16.8.6例えアプリにPersonnelとTreasurerという二つの論理グループがあるとします、エリアを利用するとフォルダー構造は次のようになります。
＊プロジェクト名
　|－Areas
　　|－Personnel
　　　|－Controllers
　　　　|－HomeController.cs
　　　|－Models
　　　　|－HomeModel.cs
　　　|－Views
　　　　|－Home
　　　　　|－Index.cshtml
　　　　　|－About.cshtml
　　|－Treasurer
　　　|－Controllers
　　　　|－HomeController.cs
　　　|－Models
　　　　|－HomeModel.cs
　　　|－Views
　　　　|－Home
　　　　　|－Index.cshtml
　　　　　|－About.cshtml
　|－Controllers
　|－Models
　|－Views
　|－wwwrootエリアを利用する時の構造は一般的にこうなっているですが、MVCの規約ではViewファイルのみこの構造に従う必要がある、ModelとControllerは従わなくても問題がない、外だしは可能ということです。プロジェクトで右クリック⇒追加⇒新規スキャフォールディングアイテム
MVCエリアを選んで追加、その後エリア名を入力して作成する
エリアを作成した後の実際の構造は次のようになります
詳細なエリアルーティングはここから参照上記コードの「{area:exists}」ではルートが必ず一つのエリアと一致しなければならないという制約を掛けている
詳細なルーティング制約はここから参照この二ファイルの影響先はファイルを配置しているフォルダー及びその下級フォルダーのみ、なのでエリアじゃなく普通のViewsフォルダーにあるこの二ファイルはAreasに対しては影響を与えることはできない。
ViewsとAreasの両方に対して影響を与えたい場合はアプリケーションのルートフォルダ（Startup.csを含むフォルダ）にそのファイルを配置もしくはコピーすること。_ViewStart.cshtmlの詳細はここから参照
_ViewImports.cshtmlの詳細はここから参照既定のエリアフォルダー「Areas」を変更することはできます前述のようにエリアとコントローラーを関連付けるため、ントローラーにArea属性を定義する必要が有ります、もしそのエリアに沢山のコントローラーがあったらそれ全部を定義する必要が有ります。そうなると問題が発生し易くなります。AreaAttributeクラスの定義から見るとArea属性が継承を許されていることがわかる、つまり親にArea属性を設定するとそのクラスを継承した子にもArea属性が適用されます。よってエリアコントローラーは次のように変更可能


