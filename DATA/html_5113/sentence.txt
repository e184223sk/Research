More than 1 year has passed since last update.Xamarinに入門するにあたって、QiitaのAPIを叩いて表示するアプリを作ってみました。APIを叩くのはアプリ開発の基本ですが、入門者や初級者にとっては最初の壁と言うか、一個の学習の基準になると思います。
今回はQiitaのAPIを叩き、最新記事一覧を取得・表示することを通して、Xamarinを紹介していきますので参考にしてもらえたら嬉しいです。今回はXamarin.Formsを使用します。以下は完成イメージです。全体のコードはGithubにあげてあります。
https://github.com/r-kaga/Xamarin-QiitaClientApp・.NETの技術でAndroidやiOSアプリが開発できるSDKや統合開発環境などを加えたクロスプラットフォームアプリ開発環境
・AndroidとiOS、MacOSアプリもC#で開発可能
・ビジネスロジック部分のコードを共通化するだけでなく、Xamarin.FormsによりUIも共通化可能
・Nintendo Switch OnlineアプリもXamarin.Formsで作られている。
 https://qiita.com/amay077/items/53fc0d6d0cd46f1885bdダウンロードがまだの方は以下のURLからダウンロードしてください。
https://www.xlsoft.com/jp/products/xamarin/index.htmlまずはプロジェクトの作成行います。
Visual Studioを立ち上げて、マルチプラットフォーム-&gt;アプリ-&gt;空白フォームのアプリ
を選択します。次に以下の内容でプロジェクトを作成していきます。これでプロジェクトの作成が終了しました。
この段階でiOS、Andorid両方にビルドすることが可能です。シュミレーターが選択されてるのを確認した上で、左上の再生ボタンをクリックすれば以下のようなシュミレーターが立ち上がるかと思います。ここではAndroidのシュミレーターを立ち上げていますが、これからはiOSで動作確認を行っていきます。次にListの表示をします。
iOSで言うUITableViewです。それではMainPage.xaml.csを以下のように編集していきます。ここで一旦ビルドして確認してみましょう。
以下の通りになれば成功です。今の所では単に予め設定した内容を表示しているだけなので、これからAPIを叩いてそのデータを用いてListを表示してみたいと思います。まず最初にQiitaAPIという名前でファイルを作成します。
メニューバーからファイル-&gt;新しいファイルを選択すると以下のようなファイル新規作成のプロンプトが表示されます。ここでは画像の通り空のクラスを作成します。
ファイルを作成したら以下のように変更して下さい。これでQiitaAPIから記事の一覧を取得することが出来るようになりました。
ここで取得した内容を先ほどのListViewに反映していきます。MainPage.xaml.csに戻り、以下の内容に書き換えていきます。このままだとNewtonsoft.JSonの部分がエラーになると思います。
このライブラリを使用するためには、NuGetでライブラリを入手する必要があります。まずNuGetパッケージの追加を選択し、右上の検索バーからjsonと検索し、ここでは2番めに出てきているNewtonsoft.JSon選択し、パッケージを追加するを選択してください。これでビルドをすることができるようになりました。
ここまで作成したらビルドして確認してみましょう。以下のようにQiitaの最新記事が表示させることが出来ました。新着記事の表示は出来たので、次に選択した記事をWebViewで表示できるようにしていきます。
まずはCellを選択した際のアクションを設定します。
MainPage()の中に以下のようなコードを追加してください。これによりListViewのCellをタッチした場合に、ItemSelectedイベントを実装して、以下のように簡単なアラートを表示することが出来ます。
ItemSelected イベントは、e.SelectedItemでタップしたCellに関連したデータを取得することが出来ます。ここの中でWebViewを表示する処理を行いたいと思います。
ItemSelectedイベントを以下のように書き換えてください。ここでは選択されたセルのインデックスを取得し、対象の記事のUrlを引数として次の画面に渡しています。次にWebviewを表示するViewを作成します。ファイル名をArticlePageとして、新たなファイルを作成し、以下のようなコードを記述します。これで選択した記事をWebviewで表示することが出来ました。ただこれだけだと記事一覧に戻ることが出来ません。
記事閲覧画面から一覧画面に戻るためにアプリ上部にナビゲーションバーを付けていきたいと思います。まずMainPage.xaml.csを修正します。
MainPage()の中に以下の記述を追加します。またlistView.ItemSelected内のとなっている部分をこのように変更して下さい次にApp.xaml.csを開き、以下のように修正します。ここまで来たらビルドして確認してみましょう。
これでQiitaAPIで新着記事を取得し、その記事を閲覧できるアプリの完成です。記事ではiOSでビルドしていましたが、Xamarin.Formsを使用してるので、Androidでも動くことが確認出来ると思います。
これだけでiOS、Andoridの両方で動くアプリを開発することが出来ました。またXamarin.iOSやXamarin.Androidを使えばUIはそれぞれで構築しながら、ビジネスロジックを共通化することが出来ます。
このようにXamarinを使用すれば、クロスプラットフォームで動くアプリを開発することが可能です。ぜひXamarinでアプリ開発をしてみてください。何か間違い等あったら、ご指摘頂けるとありがたいです。


