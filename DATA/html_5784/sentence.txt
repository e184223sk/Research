More than 3 years have passed since last update.C#でEnumの拡張メソッドのコメントで(付加情報が)増えていくと記述が冗長になるので、ある程度のところでClassに切り分けたほうが良いのかもしれませんね。そりゃまあ情報量が増えていくと「Enumにぶら下げる付随情報」というよりenumの方が「さまざまな情報を引っ張り出すための検索キー」みたいな立場になるわけで、とはいってもそのキーをクラスのプロパティの一部にしてしまうとenumとは別物で、インテリセンスなどで拾ってくれなくなる。
定義をたくさん並べるならキー:情報1,情報2,...みたいにまとめて定義したいけど、「定数の定義(enum)」と「各種プロパティの値」をまとめて定義するようなことはできない。
C++ならマクロを使って可能だけど、C#にはプリプロセッサがないからなー。
そういえばプリプロセッサのかわりにテキストテンプレートってのがあったな。使ったことないけど。という思い付きでテキストテンプレートを調べたらできそうだからやってみたけど、やっぱり最初は思った通りにはいきませんでした。文法や考え方はASPとよく似てます。
ブラウザに投げるHTMLなどのかわりにテキストファイルとして出力する。
定義ファイルを別に用意して、そのレコードから必要な情報を抜き出して「enumの宣言ブロック」と「各種プロパティの値を初期値としてセットしたクラスを作成するブロック」をそれぞれ出力すればいい。
雛型となるプレーンテキストの中でデータを挿入したい箇所に&lt;#= 変数名 #&gt;みたいに書けばその場所に変数の内容が入る。
ループやifなどの制御ステートメントはC#のコードで書ける。ASPそっくり。あらかじめクラス定義を書いたdllを作ってインポートすることはできるみたいです。
でもソースコードを作成するためのテンプレートなので、そのプロジェクトのコンパイルの前にテンプレートからファイルを出力するわけで、そうなると別プロジェクトでdllを作ってからテキストテンプレートに読み込ませてファイル出力となる。最初は定義ファイルをJSONで作ろうと思ったんですが、.NET標準のJSONデシリアライザを使うには読み込んだデータを格納するクラスの定義が必要。
サードパーティー製のパーサーを使って読み込めばできるのかもしれないけど、思い付きでやるには大げさすぎる。あくまで練習用なので外部依存や複数のプロジェクトみたいなことはしないで、最小限の構成にしたい。(訳：めんどくせー)
というわけでできたのがこちらになります。ディクショナリなので使い方はわかると思うけど、この場合は静的変数Definitions.AnimalTypeTableとしているのでDefinitions.AnimalTypeTable[AnimalType.Dog].Nameのようにして取り出せます。元ネタが「enumの拡張メソッド」だったから、拡張メソッドも用意してみました。
ついでに未定義だったらnullではなく空文字を返すなど若干の改良。&lt;#+ ... #&gt;という定義専用ブロック内で型宣言すればできるようです。@kitamin さんありがとうございます。 ↩


