More than 1 year has passed since last update.この記事は2013年頃に、uGUIもなく、NGUIにお金を出すのも厳しかった時に、どうにかして円形のゲージを作りたくて作ったプログラムを、投稿用に手直しをしたものになります。
現在のUnityではuGUIでお手軽に実装できるのでそちらを使ったほうが確実に良いです。
UIではなく3D空間に表示したいだとか、Unityじゃない他のプログラムで実装するのには少し役立つかもしれません。こんな感じのやつです。
丸い画像はいらすとやさんからお借りしました。
お世話になってます。
丸のマークのイラスト「○」まず円形の画像を円形に表示したい場合はどうしたら良いかと考えたときに、中心点と円周上を360に分割した点でポリゴンを作れば良いかとも考えました。
ただ、少し重そうな気がしたのと、そのポリゴンに収まる余白のある元画像を作る必要がありそうだったのでもっと簡素化できないかと考えたときに、画像は四角形に描画されるので、四角形の外周を円運動と同じように角度によって等速で移動できないかと考えました。
上記のプログラムはそれをその通りに実装したものです。※四角形のサイズは縦横1（0を中心としたxy共に-0.5～0.5の範囲）とします。
※角度は正規化されている（0～360°内にある）ものとします。まずは現在の角度によって、xまたyのどちらかの値が確定します。これにはTangentを用います。
覚えていますか？Tangent。
45°、135°、225°、315°に近いほど1または-1に近づき、水平に近いほど0、垂直に近いほど∞に近づきます。
式は tanθ = y / x です。
つまり
x が確定している場合 : y = tanθ * x
y が確定している場合 : x = y / tanθ
という風に確定した値から確定しいない方を算出します。

これで角度によって四角形のどの外周上にいるか算出できました。MeshRendererやMeshFilterなどのコンポーネントを用いて、自前でMeshの操作を行います。で描画に必要なコンポーネントが必ず付随するようにします。verticesとuvは、中心点＋外周を移動する9つの点の計10点で構成します。
位置は後々計算で算出されるので初期化時はすべてVector3.zero（Vector2.zero）で大丈夫です。
こんなイメージです。
※振っている番号にも意味があります。
※右側を開始点とした場合の説明になります。
四角形の外周上の位置を角度によって決めることができましたが、次はそれをverticesの各点に反映します。
中心点は必ず(0,0)なので計算はスキップします。
それ以外の点ですが、入力された角度が何度であろうと各点の範囲は決まっているので、各点の計算時に角度をその点の最大値に制限する必要があります。
①の点は必ず0°、②の点は0°～45°、③の点は0°～90°... といった具合です。
それがの部分です。
入力されるゲージの値 _value の値を制限することで、自動的に角度についても値が制限されることになります。uvについてはverticesの同じindexのx,y値に、それぞれ0.5をプラスした値が0～1になるのでそれで大丈夫です。もしTexture全体ではなく、特定の範囲を使いたい等といった場合には、この値に範囲を掛け合わせて計算すればいけるはずです。trianglesはカメラ側から見た際に、各ポリゴンが時計回りになるようになるように設定されていれば順番は特に関係ありません。
とりあえず左上から１枚ずつ三角形を構成するような作りにしています。
このコンポーネントでは反時計回り、時計回りを選べるようにしていますが、verticesの計算上、同じTrianglesを使ってしまうとゲージを時計回りにしたときにポリゴンが反時計回り（裏向き）になってしまうので、別々のTrianglesを用意しています。
_isUpdateのチェックはデバッグ用なので実際に使うときは消してください。とすれば１行で書けますがほんの少しだけ処理速度が劣ります。
と言っても誤差程度なのでシビアな状況じゃなければこちらの方がスマートだと思います。角度が右辺の範囲にあるかどうかの判定ですが、これをifで記述するとのようにこれだけ２回チェックになってしまうので意図的にelseにしてます。最初にも書きましたが、UIとして使いたい場合はuGUIなどを使った方が良いです。
そちらだと360°以外にも180°、90°、Horizontal、Verticalなど色々なモードが選べます。


