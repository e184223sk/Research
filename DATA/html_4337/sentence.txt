More than 1 year has passed since last update.状態を多く持ち、状態ごとの操作の動作が異なるプログラムで、恐ろしく長い条件分岐処理(if文, switch文)を見かけたことはありませんか？私はよくあります。(^_^;)たとえば、簡単な電気ポットのプログラムがあるとします。このプログラムでは、以下の状態を持ちます。また、以下のボタンを持ちます。各状態ごとに特定のボタンを押したときの電気ポットの動作は異なります。
(電源OFF状態で加熱ボタンを押しても何も起こらないが、待機状態で加熱ボタンを押すと加熱が始まるなど)デザインパターンを使わないで、プログラムを記載すると、以下のようになると思います。ここで、次の新商品では、以下の機能が新しく追加されました。ロックボタンを押すことにより、誤操作を防止する機能さらに、電気ポットがインターネットに接続できるようになり、自動的に電気ポットのプログラムを更新する機能ECOモード(省電力モード)ボタンを押すことで、省電力モードに移行する機能死ぬ気で機能追加しましたが、次の商品では、以下の機能がさらに追加されます。上記のように機能が増え状態が増えるたびに、状態を特定する条件分岐処理は延々と長くなり、コード修正・コードテストしにくくなります…。if文、switch文地獄の始まりです…。上記のように、多くの状態を持ち、状態ごとの操作のふるまいが異なる場合こそ、Stateパターンの出番です。Stateパターンを用いることで、状態に関する条件分岐処理をなくすことが可能です。電気ポットのクラス図とステートマシン図は以下のとおりです。Stateパターンでは、状態1つにつき、必ず1つクラスを作成します。コードでは、タイマークラスを用いて、1秒間ごとに、外気温によるポットの水温低下(3度)、加熱による水温上昇(5度)を再現しています。IStateクラスは、インターフェースクラスであり、各状態で異なる振る舞いをする操作(関数)を定義します。
状態クラスは、本クラスを必ず継承します。状態クラスでは、状態ごとの各動作実施、状態遷移先の判断と遷移先の決定のみ行うようにします。他の機能を一切持たせません。電気ポット制御情報クラスです。本クラスが、電気ポットが現在どの状態にあるかを表すIState変数をもちます。Stateパターンを用いることで、現在何の状態であるかという条件分岐を削除することができました。ただし、Stateパターンは、状態が増えることによって、クラスが必ず１つ追加される設計パターンです。そのため、必ずしも本デザインパターンを使用すれば、設計がよくなるデザインパターンではないと思います。うまく使いこなすには、本当に腕が必要なデザインパターンだと思います。各状態クラスの設計方法は、以下のようにいくつかあるようです。
(1) シングルトンパターンを利用して、状態クラスが1つのみ存在することを保証する。そして、他の状態クラスに自己状態を公開する
(2) 状態クラス内で、遷移先の状態クラスのインスタンスを生成する。他の状態クラスに自己状態を公開しない本プログラムでは、(2)の方法で設計しています。理由は、シングルトンパターンを利用することで、グローバルな変数を増やすと、テストがしにくくなるためです。
なお、各状態クラス内で、遷移先の状態のインスタンス化を実施していますが、IDEで確認したところ、メモリリークは発生しませんでした。これは、状態クラスで、データを保有せず、必ずガーベッジコレクションによって、生成したインスタンス化が破棄されているからと思われます。状態クラス内で、別のデータを持ち、かつどこかのクラスからそのデータを参照されつづけた場合は、ガーベッジコレクションが動作せずに、メモリリークが発生すると思います。その場合は、状態クラスでは、シングルトンパターンを採用したほうがよさそうです。本例のクラス図では、状態クラスが1段となっていますが、2段でもできるようです。
実装方法が分かり次第、展開したいと思います。本記事を記載するのに参考にしたリンクです。
* [https://taiyoproject.com/post-121]
* [https://www.slideshare.net/ayumuitou52/gof-state]
* [https://github.com/solenovex/Head-First-Design-Patterns-in-CSharp]


