namespace DatePickerSample.Views.Behaviors
{
    public class DatePickerAssist
    {
        // Getter
        public static IEnumerable GetSelectableDates(DependencyObject obj)
        {
            return (IEnumerable)obj.GetValue(SelectableDatesProperty);
        }

        // Setter
        public static void SetSelectableDates(DependencyObject obj, IEnumerable value)
        {
            obj.SetValue(SelectableDatesProperty, value);
        }

        // 添付プロパティを登録
        public static readonly DependencyProperty SelectableDatesProperty = DependencyProperty.RegisterAttached(
            "SelectableDates",
            typeof(IEnumerable),
            typeof(DatePickerAssist),
            new PropertyMetadata(null, OnSelectableDatesChanged));

        // コールバック関数の定義
        private static void OnSelectableDatesChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            if (d is DatePicker datePicker &amp;&amp; e.NewValue is IEnumerable&lt;DateTime&gt; dates)
            {
                var minDate = dates.Min();
                var maxDate = dates.Max();

                // 区間の最初と最後を設定
                datePicker.DisplayDateStart = minDate;
                datePicker.DisplayDateEnd = maxDate;

                // 選択できる日付の区間内は、1日ずつ判定して、含まれていなければ BlackoutDates に追加
                for (int i = 1; i &lt; (maxDate - minDate).Days; i++)
                {
                    if (!dates.Contains(minDate.AddDays(i)))
                    {
                        datePicker.BlackoutDates.Add(new CalendarDateRange(minDate.AddDays(i)));
                    }
                }
            }
        }
    }
}

