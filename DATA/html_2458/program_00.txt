// Servo - Version: Latest
#include &lt;Servo.h&gt;

#define LED_PIN 3
#define PIR_PIN 8
#define SERVO_PIN 9

const bool IS_DEBUG = false;
const int INITIAL_ANGLE = 86;
const int ACTIVE_ANGLE = 176;

bool is_reacts = false;
bool is_active = false;
int count = 0;
int cycle = 15;

Servo servo;

void setup() {
  pinMode(LED_PIN, OUTPUT);
  pinMode(PIR_PIN, INPUT_PULLUP);
  servo.attach(SERVO_PIN);
  servo.write(INITIAL_ANGLE);

  Serial.begin(9600);

  // 初期化時は点灯状態
  is_active = true;
  // 初回サイクルを短めに設定
  count = cycle - 5;
  Serial.println("initialized UNO");
}

void loop() {
  // 1秒間隔
  delay(1000);
  count++;

  if(IS_DEBUG) {
    String s_active = String(is_active);
    String s_reacts = String(is_reacts);
    Serial.println("info[so,ten]:" + s_reacts +", " + s_active);
    s_active = s_reacts = "";
  }

  // 1サイクル区切りでチェック
  if (count == cycle){
    count = 0;

    if (is_active &amp;&amp; !is_reacts){
      // Light off
      is_active = false;
      analogWrite(LED_PIN, 0);

      // Servo Reset
      servo.write(INITIAL_ANGLE);

      Serial.println("off");

    }
    is_reacts = false;
  }

  if (count &lt; cycle){

    // 消灯時にセンサーの反応があったら
    if (!is_active &amp;&amp; is_reacts){
      // 点灯
      analogWrite(LED_PIN, 250);

      is_active = true;
      servo.write(ACTIVE_ANGLE);

      // 再カウント
      count = 0;  
      Serial.println("on");
    }
  }

  // センサに反応があった場合
  if (digitalRead(PIR_PIN) == HIGH){
      is_reacts = true;
  }
}

