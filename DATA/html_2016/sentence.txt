More than 1 year has passed since last update.EntityFrameworkCoreを勉強がてらに触ってみて、「リレーションの構築」これは使えそうだなと思ったテクニックをメモしてみました。
作成したソースはメモ置き場としてgithubに公開しています。・.Net Core 3.1
・MySql.Data.EntityFrameworkCore(8.0.18)
・Visual Studio Community 2019
・Windows 10データベースへの接続環境とテーブルを構築します。MySQL用にDBの接続設定を行います。
MySQLの接続先は各々の環境で設定してください。DbContextクラスを継承したクラスを作成し、「OnConfiguring」をオーバーライドします。DBの接続先を変更したら下記コードでデータベースの作成を行います。※注意
「EnsureDeleted」は接続文字列記載のデータベースを全て削除します。今回は技術検証のため使用しています。
使い方等についてはApi の作成と削除-EF Core | Microsoft Docsを参照ください。データベースの初期化を行うと次の4つのテーブルを作成します。ER図作って
PKは全て「ID」としオートインクリメントで構成します。
・M_AREA (MArea.cs) 
・M_SHOP (MShop.cs) ・・・ M_AREAが1に対して複数存在
・T_DAILY_SALES (TDailySales.cs) ・・・ M_SHOPが1に対して複数存在
・T_MONTHLY_SALES (TMonthlySales.cs) ・・・ M_SHOPが1に対して複数存在関連データの構築はDbContextを継承したクラスの「OnModelCreating」の中で行います。リレーション構築に使用するエンティティクラスです。リレーションを構築する上でプロパティの名前が重要になってきます。
プロパティ名がパターンに則っていない場合、リレーションは構築されません。
そのパターンは4つあり、1つ前のセクションで説明した「MShop」クラスで構築した場合の具体例と共にメモします。パターン1：&lt;navigation property name&gt;&lt;principal key property name&gt;パターン2：&lt;navigation property name&gt;Idパターン3：&lt;principal entity name&gt;&lt;principal key property name&gt;パターン4：&lt;principal entity name&gt;Id上記パターンの詳細な説明についてはリレーションシップ-EF Core | Microsoft Docsを参照してください。
ちなみに1対多のほかにで1対1、多対多でのリレーションの組み方などが書いてあります。リレーションデータの取得は次のように行います。リレーションデータの構築を行っていない場合の取得方法は「Join」や「Linqのクエリ式」があります。
ただ今回はリレーションデータに関するメモのため省きます。。リレーションを構築するとオートインクリメントをキーに使用するデータの登録が簡単になります。
「LAST_INSERT_ID()」をINSERT文に組み込むなどの工夫が必要でしたが(私はこんな感じにやってました)、リレーションを構築すると、主キーを自動で紐づけて登録を行ってくれます。ちなみに登録前の何も設定していないIDの値を確認すると「-2147482647」から連番になっていることができます。
登録内容の保存後は採番された値が代入されていることを確認できます。リレーションデータの物理削除を行います。
リレーションの親要素を削除することで、子要素も自動で削除されます。「EF Core | Microsoft Docs」の下記ページを主に参考にしました。
・リレーションシップ
・関連データの読み込み
・関連データの保存
・連鎖削除「EF Core| Microsoft Docs」にはまだまだ有用なテクニック書かれているため、本格的に業務で使うとなれば理解する必要があると感じました。
データベースの移行に関するテクニックは特に。。


