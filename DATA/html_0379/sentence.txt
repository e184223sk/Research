本記事は Xamarin Advent Calendar 2020 の1日目の記事です。
XamarinでxUnit + Moqを使って単体テストを実装する際のコツを紹介します。コメントでご指摘を頂き、タイトルや本文を変更しました。
Xamarinの経験が浅くてまだ理解できていないため、詳細はコメント欄をご参照ください。かんたんなC#のクラスと単体テストを実装します。Xamarin.Essentials.AppInfo.VersionString を返すだけの GetAppVersion() メソッドを持った FooService クラスを実装します。GetAppVersion() メソッドの戻り値が空でないことを確認するだけの単体テストを実装します。上記の単体テストを実行すると、以下のエラーで失敗します。どうやら Xamarin.* のクラスを単体テストで呼び出せないことがあるようです。
Xamarin.* だと主語が大きいのですが、適切な表現が思いつかないためこのままとさせてください。このままでは単体テストが実行できないため、解決策を考えます。単体テストから呼び出せないクラスはDIして、テスト時にモックへ差し替えるようにします。AppInfoService クラスを新規作成し、 FooService クラスから Xamarin.Essentials への依存を切り出します。FooService クラスにコンストラクタ経由で AppInfoService クラスをDIすれば、 Xamarin.Essentials に依存しなくなります。単体テストではMoq（モックライブラリ）を使って IAppInfoService のモックを生成し、 FooService クラスにDIします。モックで GetAppVersion() メソッドの戻り値を 1.0.0 に固定し、アサートで 1.0.0 と一致するか確認します。
Moqはメソッドが何回呼ばれたかかんたんに確認できるので、1回のみ呼ばれたか（ Times.Once() ）を確認します。これで単体テストを実行すると、無事に成功します  コメント で教えていただいたのですが、Xamarin.Essentials.Interfacesというパッケージが非公式で公開されています。
https://www.nuget.org/packages/Xamarin.Essentials.Interfaces/
https://github.com/rdavisau/essential-interfacesまだ試していませんが、こちらを使うのもよさそうです。Xamarinでは Xamarin.* に依存しないようにビジネスロジックのクラスを実装すると、テスタブルになります。
依存していてもテストする方法はあるようですが、それでも Xamarin.* を切り出しておくのは設計パターンとして悪くないと思います。以上、 Xamarin Advent Calendar 2020 の1日目の記事でした。
明日は @ytabuchi さんの記事です。


