More than 3 years have passed since last update.UIのColorブレンドに関して、という要件を満たすものを実装してみたので、まとめました。サンプルはこちらにあります。 → GitHub以下の環境で動作を確認しました
Unity 2018.2.5f1
Unity 2017.3.1f1UnityでUIにカラーを合成する場合、デフォルトでは乗算合成(Multiply)しかできません。
加算合成(Additive)をしたい場合には、加算合成用のマテリアルとシェーダを作成するのが一般的な方法かと思います。
（例：Unity UIデザイナー向けuGUIで色の加算合成をする-渋谷ほととぎす通信）しかしマテリアルを切り替える方法だと、せっかくスプライトアトラス(参考：スプライトアトラス-Unity公式ドキュメント)などを使ってドローコールを抑えているような場合に、ドローコールが増えてしまう原因となります。デフォルトの状態⇩
左：加算、右：乗算（デフォルト）にした状態⇩
したがってドローコールを増やさないためには、ブレンドタイプに応じてマテリアルを使い分ける方法ではダメということですね。結論から言うと、Inspector上で設定したImage ComponentのColorのアルファ値をScript内で加工し、加算：アルファ値 0.0 ~ 0.5
乗算：アルファ値 0.5 ~ 1.0の状態にしてシェーダに渡します。
シェーダ側では受け取ったアルファ値を元にブレンドタイプを判別し、それぞれのタイプに合った処理を行い、最後にアルファ値をもとに戻す、ということをします。シェーダ定数(ShaderファイルのPropertiesのところにゴニョゴニョ書くやつ)でブレンドモードの切り替えや、カラーの変更をおこなってしまうとマテリアルのコピーが走り、ドローコールが増えてしまうのでうまくいきません。そのため今回は、Image Class の拡張（Editorの拡張含む）で対応します。Image Componentで設定できるColorは、「テクスチャを貼り付けるための四角形メッシュ」の頂点カラーなため、ここをいくら変更してもマテリアルのコピーが走ることはありません。まずUnityEngine.UI.Image classを継承したCustomImageというクラスを作成します。列挙型でBlendTypeというものを定義し、後ほどおこなうEditor拡張にてInspector上でブレンドタイプを選択できるようにします。また、Inspectorで入力されたColorのアルファ値に変換をかけています。続いて、Editorの拡張をおこないます。
Editor拡張の説明はここではおこないません（というかまだ正確には把握していない。）
詳しく知りたい場合はこちらのサイトなどを御覧ください。エディター拡張入門UnityEditor.UI.ImageEditorを継承したクラスを作成し、Editorという名前のついたフォルダ配下に保存します。Editorフォルダはどこに置いても大丈夫っぽいです。こうすることで、Inspector上で加算と乗算の切り替え選択ができるようになります。最後にシェーダの拡張をおこないます。
もともとUIの描画にはUI-defaultというビルトインシェーダが使用されています。
UI-default.shaderはUnityの公式HPからダウンロードしてくることができます。
Unity ダウンロード アーカイブダウンロードしたらシェーダファイルを作成してそこにコピペし、Vertex Shader(v2f vert内)とFragment Shader(fixed4 frag内)に以下のように変更を加えます。
"Custom/UI/Default"の部分もデフォルトのShaderと被らないように書き換えます。シェーダ内では処理速度の関係でなるべくif文を使いたくないので、組み込みのlerpとstepを組み合わせて場合分けをしています。
ここでのstep関数は、入力されたColorのアルファ値が0.0 ~ 0.5のときは0を、0.5 ~ 1.0のときは1を返します（正確には0.5は含まない）。
そしてlerpは、step関数の返り値が0のときは左側の式（加算）を、返り値が1のときは右側の式（乗算）を返します。シェーダが作成できたら、マテリアルを作成し、このシェーダを割当ててください。また、CustomImage.csを選択し、Materialのところに作成したマテリアルを割り当てておきましょう。
こうすると、CustomImage Componentを割り当てたときに自動でこのマテリアルが選択されます。実装は以上になります。UIを選択し、デフォルトで付いているImage(Script)をRemove Componentします。
その後、Add ComponentからCustom Imageを検索しアタッチします。Source Imageが外れてしまうので、貼り付けるテクスチャを再度選択しましょう。
これで完了です。あとはBlend Typeをタブで選択し、好きなColorを選択するだけで簡単に乗算・加算が切り替えられます。

また、無事にドローコールも増えていないことが確認できます。
（画像ちっちゃくてすみません）
加算と乗算の場合分けにアルファ値を使っていますが、加算だとアルファ値が1.0のときに0.5に変換されます。また乗算だとアルファ値が0.0のときに0.5に変換されます。そのため0.5が被ってしまうような状態になってしまっています。
そうすると、上の実装ではBlend TypeがMULTIPLYのとき、アルファ値を0.0にすると突然ブレンドの仕方が加算に変わってしまいます。
まぁアルファ値を0にして使う予定は今の所全く無いので、とりあえずいいかなあ…という気持ちで見て見ぬフリをしています。
良い処理思いついたらそのうち直しますね。
まだイケてない箇所も残ってますが、ひとまずドローコールを増やさずColorのブレンドタイプを簡単に切り替えるための実装ができました。改善案やご質問等あれば、気軽にコメントください。


