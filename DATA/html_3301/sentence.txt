More than 1 year has passed since last update.これは一部のHTMLタグだけ許可する(DOM編)の続編で、正規表現で、一部のHTMLタグを許可してみようという試みである。こんな感じ許可タグとして認識できる文字列だけ、ホワイトリスト方式のように、元のタグに戻るので、想定していないタグが有効になるなどの予想もしていない脆弱性が生まれないだろう。前回の「一部のHTMLタグだけ許可する(DOM編)」もそうだが、Webページ上のリッチテキストライブラリが吐き出すHTML形式の装飾されたテキストをXSSのような脆弱性を生むことなく利用しよう、というのが前提なので、自由度のあるあいまいな解釈(例えば、ダブルクォートだけではなくシングルクォートで括ってもよいとか、そもそも括らなくてもなんとなく解釈してくれるとか)をする必要はなくて、そのWebページ上のリッチテキストライブラリが吐き出す形式だけ許可するようにすればよい。入力データは、HTMLエンコードがある程度実施されているという前提(&amp;lt;と&lt;の混在)だと仮定すると、単純な HTMLエンコード処理ではなく、「&lt;」「&gt;」「"」だけをエンコードする方がよい場合(無用な二重エンコードは汚い)もあるので、このあたりは入力されるデータの書式をあらかじめ吟味しておく必要がある。まぁ、一旦HTMLエンコードしたうえで、「&amp;amp;amp;」→「&amp;amp;」に置換しておく。という方法で無用な二重エンコードを防いでもよい。前篇からの前提を引き継いで、属性のない許可タグとして B タグと、Iタグと、それと、今回は BR タグを追加しよう。属性がないので、正規表現としては単純だ。
つまりだ。
データは事前にHTMLエンコードされているので、これらは、になる。それぞれ、これらをHTMLデコードしてもどしてやるだけなので、特に問題はないだろう。これらを一つの正規表現にまとめると、&amp;lt;((/?((b)|(i)))|(br)|(/font))&amp;gt;(ついでにfontの閉じタグも仲間に入れたよ)ここも前篇からの前提を引き継いで、FONTタグで、許可属性は、sizeとcolorということにしてみる。正規表現は、こんな感じになるだろう。&amp;lt;font((●●●●)|(◆◆◆◆))+&amp;gt;さて、一つ目の●●●●について、size属性について考えてみよう。size属性は、数値なので、数値しか与えられないだろう。
という事で、こんな感じになるsize=&amp;quot;[0-9]+&amp;quot;属性の値についてもホワイトリスト方式のように許可のみヒットするようにする事が重要color属性は、アルファベット(色名)と#16進数なので、こんな感じでどうだろう。color=&amp;quot;[a-z0-9#]+&amp;quot;特に、属性の値として「"」や「'」(エンコードされた「&amp;quot;」と「&amp;#39;」)は危険なので、それらがヒットしないように注意上記をまとめるとこんな感じになる&amp;lt;font(( size=&amp;quot;[0-9]+&amp;quot;)|( color=&amp;quot;[a-z0-9#]+&amp;quot;))+&amp;gt;サンプルはC#/.NET Frameworkだけど、JavaとかでPHPには移植しやすいと思う。サンプルは、Bタグと、Iタグと、FONTタグのCOLORとSIZE属性だけ許可するようにしている正規表現だが、それ以外のタグについては、これらの正規表現を修正すればいいだろう。DOM版よりコードが短くなっているなぁ～...正規表現のオプション(System.Text.RegularExpressions.RegexOptions)は、サンプルコードでは RegexOptions.IgnoreCase|RegexOptions.Singleline だけど、アプリケーション起動中に解放しないという事であれば RegexOptions.Compiled を足すと処理が速くなるそうだ。
(なんか、Compiled にすると、解放時にメモリリークみたいな問題があるそうだけど、逆に言えば解放しない固定な正規表現には使えるという事だと思う)私はstaticのRegexにしているpublic static Regex obj = new RegEx(......みたいな感じ


