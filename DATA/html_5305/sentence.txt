More than 3 years have passed since last update.C#からプログラミングを始めたプログラミング初心者に向けたTips集になります。
コードを眺めている際に、突然出てきても検索しづらいものなどを中心に書きました。
全てのシーンでこの方法を使うことを推奨しているわけではありません。
ただし、知らないよりも知っている方がいい知識です。この書き方は冗長な書き方なので、三項演算子を使って以下の書き方で書けます。この三項演算子は、(条件式) ? (Trueの場合の設定値) : (Falseの場合の設定値)となります。条件や設定値が複雑でない場合は、この書き方がおすすめです。
逆に条件、設定値が複雑だと見にくくなるので、一度条件や設定値を変数にセットしましょう。このケースの場合も以下のように書き換えることができます。この三項演算子は、(設定値) ?? (左記の設定値がNull場合の設定値)となります。
この書き方はNullなら初期値はこうしたい、などのケースで利用されます。たとえば以下のケース。型がわかっていれば、変数の型定義はvarに置き換えられます。右辺の型が明らかな場合は、なるべくvarを利用することが
最近のトレンドかつ、MSDNでも推奨となっています。
MSDNちなみに、varは暗黙の型指定です。
宣言時に右辺で型が特定できないといけません。
以下のような書き方はコンパイルエラーになります。メソッドの引数に(x =&gt; x == 1) のような引数を見たことがありませんか？
これはラムダ式と呼ばれ、関数を簡易化して書いてあります。こんな感じです。上記式は、dataListの中にbが存在するかをチェックする関数です。
Any()の内部がラムダ式になっています。Anyの引数は関数を引数とすることになっており(型はFunc&lt;T, bool&gt;)、上記式は省略形になります。
Tはジェネリクスといい、Listの型がstringのため、stringが引数の型となります。
上記式は以下の書き方と同じです。これなら関数っぽさが出たのではないでしょうか？
string dataは引数となっており、リストのデータ1件ずつが渡されます。
そのデータにbが存在するかを１件ずつチェックしており、bが存在すればtrueを返却することになっています。上記式を省略するとdata =&gt; data == "b"となるわけです。名前を知らないと検索が難しそうなものを選ぼうと思っていましたが、varは検索しにくくなかったですね。
プログラミングを始めた頃は自分も使おうとしなかったものを挙げてみました。


