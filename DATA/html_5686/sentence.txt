More than 3 years have passed since last update.前回は、Wikipediaの「ビンパッキング問題」に載っている２つのアルゴリズムをそっくりそのままC#で実装してみました。この２つのアルゴリズムは、荷物の全体像が分からないという前提のアルゴリズムです。もし全体像が把握できるのならもっと賢い結果を出すことができるかもしれません。ということで、考えてみました。アルゴリズムAは、最も空きが多いビンに荷物を入れてゆく解法です。これをすこし改良してみます。と、こんな感じです。実際に物理的に荷物を並び変えるのは現実的ではありませんが、コンピュータで結果を求め、その結果に従って、荷物を積んでいくようにすれば、現実問題にも適用できるはずです。結果によっては、一番最初の荷物を、一番最後のビンに入れないといけないといったことが起こりえます。実際に荷物を詰めるときには、荷物を一時的に別の場所に置いておかなくてはなりません。これは困った状況です。しかし、その場合であっても実際には最後のビンに入れる必要はなく、今空いている空のビンに入れればよい(これが最後のビンと認識させる)ので、対応はできそうです。問題は、ビンを置く場所が足りないというケースですね。そういったケースに対応するには、「いちどに置けるビンの数」という新たな制約を付けたアルゴリズムを考える必要がありますが、今回はそこまではやっていません。クラス名をBinPackingSolver11としました。安易なネーミングですみませんm(_ _)m前回のコードと異なるのは、Solveの前半部分と、foreachの要素取得のところで並び替えをしているところです。foreachの中はまったく同じコードになっています。IBinPackingインターフェースについては、前回のコードを見てください。それでは、本当に改良されたのかどうかを確かめてみます。BinPackingSolver1, BinPackingSolver11 の２つのクラスに同じデータを食わせて比較するコードを書いてみました。それでは、実行してみます。
結果を表示している１つめのブロックが改良前、２つめのブロックが改良後です。
確かに、改良後のほうが良い結果を出しています。次回は、アルゴリズムBを改良してみたいと思います。続く...この記事は、Gushwell's C# Programming Pageで公開したものを大幅に加筆・修正したものです。


