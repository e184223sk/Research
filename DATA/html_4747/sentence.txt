More than 3 years have passed since last update.gRPC の ServerStreaming や DuplexStreaming を利用すると、サーバープッシュ機能を実装できます。
そのような場合に Observable パターンを用いると配信と購読の実装をきれいに分離でき、ReactiveExtensionsとの親和性も高まります。簡単かつ柔軟にレスポンスストリーム（の代わりになるシーケンス）を生成でき、クライアント側のテストがしやすくなると思います。このようなメリットを目論見ながら、レスポンスストリームに対する Observable パターンを実装してみます。gRPC の説明は割愛します。ストリーミングに関する基本的な知識が必要です。通常はレスポンスストリームからの受け取りをループ処理として実装します。RPCメソッドの戻り値からレスポンスを受け取って配信／購読するように実装します。IObservable&lt;TResponse&gt;インターフェースを実装したクラスを定義します。
ServerStreaming と DuplexStreaming で共通する実装が多いため、主処理を基底クラスとして実装しています。
レスポンスストリームに対する処理を提供するインターフェースと、そのインターフェースを実装するAsyncServerStreamingCall&lt;TResponse&gt;クラスとAsyncDuplexStreamingCall&lt;TRequest, TResponse&gt;クラスに対するラッパークラスを定義し、基底クラスを用いずに透過的に実装する方法も考えられます。基底クラスを継承し、ServerStreaming に対する配信クラスを実装します。同様に DuplexStreaming に対する配信クラスを実装します。
リクエストストリームに対する書き込みメソッドと完了メソッドを実装しています。上記の配信クラスを生成するメソッドです。AsyncServerStreamingCall&lt;TResponse&gt;クラスとAsyncDuplexStreamingCall&lt;TRequest, TResponse&gt;クラスに対する拡張メソッドとして定義しています。ほとんどの場合、監視は OnNext, OnError, OnComplete に対するデリゲートを指定できればよいですので、デリゲートを受け取ってIObserver&lt;TResponse&gt;インターフェースを返すメソッドとして定義しました。前述のGrpcObservableクラスに定義しています。
ReactiveExtensionsを利用しているのであれば、IObservable&lt;TResponse&gt;インターフェースに対する Subscribe 拡張メソッドを利用するのがよいと思います。上記のクラスをアプリケーションコードから使用する手順です。
このドキュメントでは一続きに記述していますが、通常はRPCメソッド呼び出し／監視開始／購読開始／購読終了／監視終了は別々のタイミングで実行することになると思います。
購読前に監視を開始した場合、受け取ったレスポンスは捨てられます。DuplexStreaming の場合はリクエストの書き込みと完了の操作が増えます。
リクエストの操作と監視の操作の順番は入れ替わっても構いません。


