

    /// &lt;summary&gt;
    /// ServerStreaming に対する配信オブジェクト。
    /// &lt;/summary&gt;
    /// &lt;typeparam name="TResponse"&gt;レスポンスの型&lt;/typeparam&gt;
    public sealed class GrpcServerStreamingObservable&lt;TResponse&gt; : GrpcStreamingObservableBase&lt;TResponse&gt;
    {

        /// &lt;summary&gt;
        /// コンストラクタ
        /// &lt;/summary&gt;
        /// &lt;param name="call"&gt;呼び出しオブジェクト&lt;/param&gt;
        /// &lt;param name="disposableCall"&gt;配信オブジェクトの dispose 時に呼び出しオブジェクトを dispose するかどうか&lt;/param&gt;
        private GrpcServerStreamingObservable(AsyncServerStreamingCall&lt;TResponse&gt; call, bool disposableCall)
            : base(call.ResponseStream)
        {
            m_Call = call;
            m_DisposableCall = disposableCall;
        }

        /// &lt;summary&gt;
        /// ServerStreaming に対する配信オブジェクトを生成します。
        /// &lt;/summary&gt;
        /// &lt;param name="call"&gt;呼び出しオブジェクト&lt;/param&gt;
        /// &lt;param name="disposableCall"&gt;配信オブジェクトの dispose 時に呼び出しオブジェクトを dispose するかどうか&lt;/param&gt;
        public static GrpcServerStreamingObservable&lt;TResponse&gt; Observe(AsyncServerStreamingCall&lt;TResponse&gt; call, bool disposableCall)
        {
            return new GrpcServerStreamingObservable&lt;TResponse&gt;(call, disposableCall);
        }

        private AsyncServerStreamingCall&lt;TResponse&gt; m_Call;
        private bool m_DisposableCall;

        /// &lt;summary&gt;
        /// 使用しているリソースを解放します。
        /// &lt;/summary&gt;
        /// &lt;param name="disposing"&gt;dispose メソッドから呼び出されたかどうか&lt;/param&gt;
        protected override void Dispose(bool disposing)
        {
            try
            {
                if (m_DisposableCall) { m_Call.Dispose(); }
            }
            finally
            {
                base.Dispose(disposing);
            }
        }

    }


