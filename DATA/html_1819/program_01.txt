

///usingは省略しています

namespace BIBOROKU_001
{
    /// &lt;summary&gt;
    /// MainWindowWPF.xaml の相互作用ロジック
    /// &lt;/summary&gt;
    public partial class MainWindowWPF : Window
    {
        public MainWindowWPF()
        {
            InitializeComponent();
            this.DataContext = new MainWindowWPFVM();
        }

        ///実際にはここから先は分離して別ファイルに

        public class MainWindowWPFVM : INotifyPropertyChanged
        {
            public MainWindowWPFVM()
            {
            }
            private string _InputName;
            public string InputName
            {
                get
                {
                    return _InputName;
                }

                set
                {
                    _InputName = value;
                    RaisePropertyChanged();
                    RaisePropertyChanged("Morining");
                    RaisePropertyChanged("Noon");
                    RaisePropertyChanged("Evening");
                }
            }

            public string Morining
            {
                get
                {
                    if (InputName != "")
                        return InputName + "さん、おはようございます！";
                    else
                        return "";
                }
            }
            public string Noon
            {
                get
                {
                    if (InputName != "")
                        return InputName + "さん、こんにちは！";
                    else
                        return "";
                }
            }
            public string Evening
            {
                get
                {
                    if (InputName != "")
                        return InputName + "さん、こんばんは！";
                    else
                        return "";
                }
            }

            //INotifyPropertyChanged実装
            public event PropertyChangedEventHandler PropertyChanged = delegate { };

            //INotifyPropertyChanged.PropertyChangedイベントを発生させる
            private void RaisePropertyChanged([CallerMemberName]string propertyName = "")
            {
                if (propertyName != null)
                    PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }


}


