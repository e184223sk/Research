More than 3 years have passed since last update.未だ品薄が続いたり、Amazonでは4倍以上の値段で売られたりしているRasberryPiZeroで遊んでみました。購入したのはカメラkitなので、定点カメラサーバーをとりあえずの目標に開発開始。
ぱいそん？　は使ったことがないので、monoを入れてC#で開発を目論見ます。http://dividepizero.bf1.jp:8080/public/
※我が家の猫によるRasberryPi電源切断が多々あるので、繋がったらラッキーぐらいで
※題名は「定点カメラ」となってますが、汚い我が家を晒すのもアレなので、ちょっと違うモノになってます。
※携帯からはアクセスしても面白くないようです。詳しくは↓で まず、monoのインストール。特にエラー等なく順調にインストールは終了したけれど、実は３０分以上かかったような（体感）まずは http://www.buildinsider.net/small/raspisignalr/01 に書いて有ることほぼそのままでOWIN Self Hosting と SignalR による双方向通信を組み合わせてチャット作成サーバーはコンソールでexitと打つまで終わらない構成に。
たったこれだけでサーバーになるっていうんだからすごいですね。次にクライアント側を。
キモは↑のappBuilder.MapSignalR();によって生成されるhubs（中身はJavaScript)を使うことでHubを継承したクラス（今回だとEchoHub）の実装に従ってサーバーとリアルタイムで双方向通信ができるとかなんとか？。うん。よくわからない。ちなみに僕はjqueryは触ったことないです。　頑張ってノリでカバー。なお、件のappBuilder.MapSignalR();でマッピングされるはずのEchoHubがされなくて小一時間悩むハメになりましたが、原因はclassがprivateだった事でした。　ぐげげー。このチャットで重要なのは、クライアントからのpull型ではなく、サーバーからのpush型でチャットが成り立っているということです。
サーバーからのpushでメッセージが送信できているということは、メッセージの代わりにRasberryPiのカメラから取得した画像ファイルのbyte配列を送り付けるようにして、jqueryで受け取ってimg:srcに入れて表示するだけ・・・。やだ、簡単すぎ。まず、
raspistill -o cam.jpg
と、コマンドラインからカメラモジュールへの通電を確認。んで、monoからどうやってカメラモジュールを・・・？　これがまたあんまり情報がなくて。まず試してみた
https://www.nuget.org/packages/RaspberryCam
は、エラーが出て使えず（使い方が間違っているだけかも）色々探し回っていると、更新日が最近の
https://www.nuget.org/packages/Unosquare.Raspberry.IO/
が、GPIOに加えてカメラモジュールも操作できるっぽかったので、これを使うことに。サーバー側（C#)追加処理カメラからJpeg画像を取得して、echoHubに接続されているClient全てに「DataSend」というメソッド名で画像のbyte[]を送ってあげるように。クライアントはそれを受け取り、表示。byte配列はbase64となって送られるっぽくて、画像のsrcにbase64であることを指定しつつ渡してあげるだけでなんと表示できるらしいです。なお、もちろんのようにimgタグをどこかにおいておきます。で、出来たー（汚い机の上が写っております）と。せっかく作ったので公開したいんですが、流石にそのままだと我が家の隠し撮りをそのまま発信することになってしまうので、もうひと工夫したものを。ちょっと調べてみると http://www.a-quest.com/products/aquestalkpi.html なるものがあり、個人の非営利使用であれば無償で使えるとのこと。　これを使ってボイスチャットを作ろう！（ちょっと意味が違う）というわけで、AquesTalk Pi Ver.1.00 をDLあんど展開。
デフォルトユーザー(pi)のホームに展開したので、home/pi/aquestalkpi/AquesTalkPi がモジュールのパスになってます。流れとしてはとなります。　キモは、コマンドラインでAquesTalkPiを呼んで、wavのbyteデータを取得しなくてはいけないというところ。
ファイルに出力もできるので、出力されたファイルを改めて読み込んでも良いのですが、一度Diskを挟む意味が本来はないはずで。　色々やってみたところ、以下のような書き方をすれば標準出力をそのままbyte[]として取得・送信できました。このSendTalkメソッドをクライアントからのメッセージ受信(Send)の時に呼んであげることにします。サーバー側はTalkSendというメソッドでwavのbyte[]を送っているので、クライアント側ももちろんTalkSendで待ち構えてあげます。なお、audioは携帯だと再生されないことが多い（というか、僕の手持ちの端末は全滅でした）ため、PCからのアクセス前提です。　さらに言えば、結構な量のデータ（生wavデータ）がpushで飛んでくるので、パケ死（死語）しないよう気をつけてください。さらっと作っているように見えますが、そもそもプログラムをする以前の問題で、ハードウェア的な準備の方が時間とお金がかかってるのでダラダラと。
情弱おじさんの愚痴なんて聞きたくないという人は回れ右して戻るボタン。無事sdに書き込めたらrasberry piに差し込んで電源接続（なお、これが初通電。無謀）最初、ディスプレイに何も出力されなくてあわあわするが、ちゃんと接続できてなかっただけで、しっかり差し込んだところディスプレイに表示されました。感動。あとは色んなページに書いてある通り、初期設定。　以下参考にしたページraspi-configでパスワード変えたり、SDカードを最大限使えるようにしたり、日本語使えるようにしたりするっぽい（雑）順調。と思いきや、USB有線LANアダプタが認識していなっぽい。ぐぬぬる。相性もあるようなので、今度こそちゃんと動作確認が取れているwifiドングルを買おうと決意。ふて寝。試しにもう一度$sudo rebootすると今度は・・・。　キーボードが認識していない。
あ。これはもしかするとあれだ。　USBハブがアホな子なのでは。試しにPS4に繋いでいたUSBハブを使ったところ普通に認識。恐る恐る昨日ダメだったUSB有線LANアダプタを接続してみたところ問題なく認識。あーー。ふて寝。ここから、やっとmonoインストールで最初に戻ります。　本体５ドルなのになんだかんだで１万円くらいかかっててるし、すぐにZeroW（Wifi・Bluetoothモジュール付き）が発売されるわで・・・。みなさん、ご利用は計画的に。


