using UnityEngine;
using UnityEngine.Events;

public class PlayerController : MonoBehaviour
{
    ///&lt;summary&gt;
    ///    ジャンプ処理に使用するRigidbody
    ///&lt;/summary&gt;
    private Rigidbody _rigidBody;

    ///&lt;summary&gt;
    ///    ジャンプ入力フラグ
    ///    ジャンプ入力が一度でもあったらON、着地したらOFF
    ///&lt;/summary&gt;
    private bool _jumpInput = false;

    ///&lt;summary&gt;
    ///    ジャンプ処理中フラグ
    ///    ジャンプ処理が開始されたらON、着地したらOFF
    ///&lt;/summary&gt;
    private bool _isJumping = false;


    ///&lt;summary&gt;
    ///    Start()
    ///&lt;/summary&gt;
    private void Start()
    {
        _rigidBody = GetComponent&lt;Rigidbody&gt;();
    }

    ///&lt;summary&gt;
    ///    Update()
    ///&lt;/summary&gt;
    private void Update()
    {
        CheckGroundDistance(() =&gt; {
            _jumpInput = false;
            _isJumping = false;
        });

        // 既にジャンプ入力が行われていたら、ジャンプ入力チェックを飛ばす
        if (_jumpInput || JumpInput()) _jumpInput = true;
    }

    ///&lt;summary&gt;
    ///    FixedUpdate()
    ///&lt;/summary&gt;
    private void FixedUpdate()
    {
        if (_jumpInput) {
            if (!_isJumping) {
                _isJumping = true;
                DoJump();
            }
        }
    }


    ///&lt;summary&gt;
    ///    ジャンプ入力チェック
    ///&lt;/summary&gt;
    private bool JumpInput()
    {
        // ジャンプ最速入力のテスト用にGetButton
        if (Input.GetButton("Jump")) return true;    // ジャンプキー押しっぱなしで連続ジャンプ
        //if (Input.GetButtonDown("Jump")) return true;    // ジャンプキーが押された時だけジャンプにする時はこっち
            // または、 if (Input.GetKeyUp(KeyCode.Space)) return true; とかでも可
        return false;
    }


    ///&lt;summary&gt;
    ///    ジャンプの強さ
    ///&lt;/summary&gt;
    [SerializeField] private float jumpPower = 5f;
    //private const float jumpPower = 5f;

    ///&lt;summary&gt;
    ///    ジャンプのための上方向への加圧
    ///&lt;/summary&gt;
    private void DoJump()
    {
        _rigidBody.AddForce(Vector3.up * jumpPower, ForceMode.Impulse);
    }


    ///&lt;summary&gt;
    ///    接地してから何フレーム経過したか
    ///    接地してない間は常にゼロとする
    ///&lt;/summary&gt;
    private int _isGround = 0;

    ///&lt;summary&gt;
    ///    接地してない間、何フレーム経過したか
    ///    接地している間は常にゼロとする
    ///&lt;/summary&gt;
    private int _notGround = 0;

    ///&lt;summary&gt;
    ///    このフレーム数分接地していたらor接地していなかったら
    ///    状態が変わったと認識する（ジャンプ開始したor着地した）
    ///    接地してからキャラの状態が安定するまでに数フレーム用するため、
    ///    キャラが安定する前に再ジャンプ入力を受け付けてしまうとバグる（ジャンプ出来なくなる）
    ///    筆者PCでは 3 で安定するが、安全をとって今回は 5 とした
    ///&lt;/summary&gt;
    private const int _isGroundStateChange = 5;

    ///&lt;summary&gt;
    ///    プレイヤーと地面の間の距離
    ///    IsGround()が呼ばれるたびに更新される
    ///&lt;/summary&gt;
    [SerializeField] private float _groundDistance = 0f;

    ///&lt;summary&gt;
    ///    _groundDistanceがこの値以下の場合接地していると判定する
    ///&lt;/summary&gt;
    private const float _groundDistanceLimit = 0.01f;

    ///&lt;summary&gt;
    ///    判定元の原点が地面に極端に近いとrayがヒットしない場合があるので、
    ///    オフセットを設けて確実にヒットするようにする
    ///&lt;/summary&gt;
    private Vector3 _raycastOffset  = new Vector3(0f, 0.005f, 0f);

    ///&lt;summary&gt;
    ///    プレイヤーキャラから下向きに地面判定のrayを飛ばす時の上限距離
    ///    ゲーム中でプレイヤーキャラと地面が最も離れると考えられる場面の距離に、
    ///    マージンを多少付けた値にしておくのが良
    ///    Mathf.Infinityを指定すれば無制限も可能だが重くなる可能性があるかも？
    ///&lt;/summary&gt;
    private const float _raycastSearchDistance = 100f;

    ///&lt;summary&gt;
    ///    接地判定
    ///&lt;/summary&gt;
    private void CheckGroundDistance(UnityAction landingAction = null, UnityAction takeOffAction = null)
    {
        RaycastHit hit;
        var layerMask = LayerMask.GetMask("Ground");

        // プレイヤーの位置から下向きにRaycast
        // レイヤーマスクでGroundを設定しているので、
        // 地面のGameObjectにGroundのレイヤーを設定しておけば、
        // Groundのレイヤーを持つGameObjectで一番近いものが一つだけヒットする
        var isGroundHit = Physics.Raycast(
                transform.position + _raycastOffset,
                transform.TransformDirection(Vector3.down),
                out hit,
                _raycastSearchDistance,
                layerMask
            );

        if (isGroundHit) {
            _groundDistance = hit.distance;
        } else {
            // ヒットしなかった場合はキャラの下方に地面が存在しないものとして扱う
            _groundDistance = float.MaxValue;
        }

        // 地面とキャラの距離は環境によって様々で
        // 完全にゼロにはならない時もあるため、
        // ジャンプしていない時の値に多少のマージンをのせた
        // 一定値以下を接地と判定する
        // 通常あり得ないと思われるが、オーバーフローされると再度アクションが実行されてしまうので、越えたところで止める
        if (_groundDistance &lt; _groundDistanceLimit) {
            if (_isGround &lt;= _isGroundStateChange) {
                _isGround += 1;
                _notGround = 0;
            }
        } else {
            if (_notGround &lt;= _isGroundStateChange) {
                _isGround = 0;
                _notGround += 1;
            }
        }

        // 接地後またはジャンプ後、特定フレーム分状態の変化が無ければ、
        // 状態が安定したものとして接地処理またはジャンプ処理を行う
        if (_isGroundStateChange == _isGround &amp;&amp; _notGround == 0) {
            if (landingAction != null) landingAction();
        } else
        if (_isGroundStateChange == _notGround &amp;&amp; _isGround == 0) {
            if (takeOffAction != null) takeOffAction();
        }
    }
}


