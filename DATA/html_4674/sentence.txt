More than 1 year has passed since last update.Unity 3Dでのジャンプの長さが変わってもちゃんと動くアニメーション対応のジャンプ処理の記事を書こうと思ったのですが、その前にUnity 3Dでのジャンプ処理自体を取り扱っている記事が少なそうなので、基礎的なところを先に書いていきます。
（Qiitaに少なそうなだけでggればいろいろ出てくると思いますが）（2018/09/16追記：色々って言うわりにUpdateとFixedUpdateの説明しか書いてないので記事名を変更）
（最初の記事名は「Unity 3Dで色々考慮したジャンプ（基礎）」でした）スクリプトに入る前に、プロジェクトをゼロから作っておきます。ご利用のUnityで新規プロジェクトを作成してください。タイトルは何でも良いのですが、筆者は今回は JumpTest と付けました。とりあえずの床として Plane を作成します。名前はFloorとします。Unityちゃんモデルの入手方法が、公式からのダウンロードとアセットストアからのものと2種類あるんですが、公式からダウンロードしてきてimportしたほうがバージョンが新しいようです。アセットストアのものはバージョン 1.1公式は1.2.1です。Modelsディレクトリの中の unitychan をヒエラルキーに追加します。unitychan のGameObjectにはAnimatorコンポーネントが1つだけアタッチされていますが、今回は使わないので削除します。今の状態では接触判定がありませんのでCapsule Collierを追加します。何かコライダーがあれば接触判定は可能ですが、人型のオブジェクトには形状的にCapsule Collierが適しているので、これをアタッチします。
（Capsule Colliderの端の球面のせいで接触判定に支障が出る場合は、Box Colliderでも十分代用が効きます。筆者は壁際に落ちてる細長いもの（剣とか棒とか）に接触出来なくて拾えなかったことがあります）アタッチしたままではUnityちゃんの足元にだけ判定が出てしまうので、設定を行います。InspectorのCenterでコライダーの中心をUnityちゃんの中心にあわせて、Heightでコライダーの高さをUnityちゃんの身長にあわせ、Radiusで半径を調整します。物理法則に則った動作をしてもらうために、Rigidbodyも追加します。そのままだとキャラクターがコケて倒れてしまったりなどするので、Constrainsの中にあるFreeze RotationでxとzのチェックをONし、倒れてしまう向きの回転を停止します。
TransformのRotationのところをドラッグで数値を変更すると、どの値がどの向きの回転なのか分かります。yは横方向の回転のみなので、固定しなくても大丈夫です。これで基本の設定は完了したので、スクリプトを作成しますが、ここでまた考えないといけないことがあります。Update()とFixedUpdate()の違いについてで、皆さんご存知のことと思いますが、Update()とFixedUpdate()は実行されるタイミングとするべき処理が違います。UnityではUpdate()のFPSはデフォルトではディスプレイの垂直同期に同期します。
一般的なディスプレイでは60Hzですが、VRゴーグルでは90Hzが多いようです。
ゲーミングディスプレイの場合は120Hzや144Hzの場合もあり、現行機種で最も速いものは240Hzのものが出ています。数年すると300Hzが出てくるのではとも言われています。
（Project Settings -&gt; Quality -&gt; V Sync Count）FixedUpdate()はUpdate()とは独立したタイマーで固定時間毎に実行され、Unityで設定した通りのFPSで呼ばれます。デフォルトでは50fpsです。
（Project Settings -&gt; Time -&gt; Fixed Timestep）そして、Update()で入力処理を行わなければならず、FixedUpdate()で物理演算の処理を行う必要があることもご存知のことと思います。スクリプトはこの2点について十分に留意して作成する必要があります。垂直同期との同期をOFFにして目標FPSを別で設定する方法もありますが、参考資料にリンクを置いておくのでそちらのほうが良い方は各自ご確認ください。上図はUpdate()が60fps、FixedUpdate()が50fpsと仮定して、数回に1回Update()が2回くるタイミングがある図です。Update()のフレームレートが上がると、もちろんUpdate()の介入回数が増えます。120Hzまたは144Hzの場合は、だいたいUpdate()2回にFixedUpdate()が1回あり、時々Update()が3回ある、という形になります。240Hzでは4回に1回になり、時々5回になります。
極端な例ですが、ディスプレイと設定次第で既に現実に起こり得るものです。Update()でジャンプ入力が複数フレーム続き、次のFixedUpdate()のタイミングでジャンプ入力が終わってしまっていても1回だけジャンプ処理される、という処理にしなければなりません。以上の注意点とタイミング図からジャンプの設計は以下の通りとします。だいたいこんな感じになっていれば、多重にジャンプ処理が行われてしまうことがなくなるはずです。（2018/09/16追記：クラス名がPlayerController2だったのをPlayerControllerに修正）UniRx入れてReactivePropertyとかObservable使うともっとすっきり書けると思いますが、まずは分かりやすく素のUnityで動くスクリプトです。Start()、Update()、FixedUpdate()を見れば大まかな処理は分かると思いますが、
雑に一覧にした設計に従って、ジャンプ入力を受け付けて保持、FixedUpdateでジャンプ処理を行っています。ジャンプ処理は Rigidbody.AddForce() を使っていて、ForceMode.Impulse で質量を考慮した瞬間的な加圧によってジャンプさせています。着地の判定は Physics.Raycast で地面との距離をUpdate()で毎フレームチェックしていて、地面との距離が一定値以下の状態が指定フレーム続いたら着地したと判定するようになっています。これはUnityの物理演算がブレを許容する構造になっているからで、地面と接触した瞬間を拾うようにすると、ジャンプ入力がそのフレームに同時に入った場合にジャンプが出来なかったり、ジャンプの高さが変わってしまったりする為です。筆者環境では60fpsで3フレーム置けば安定して動作するのを確認済みですが、他の環境（ロースペックPCとかfpsがもっと高いとか）ではもしかしたらもっとかかるかもしれないので、一応マージンを取って5フレーム待つようにしてあります。またこのスクリプトでは、最後の CheckGroundDistance メソッドでGroundレイヤーのオブジェクトを地面として認識しているので、
床として作ったPlaneをGroundレイヤーとして設定します。ジャンプに使うスペースキーを押しっぱなしにしたり、定間隔でぽちぽち押してみたり
色々試しましたが、ジャンプできなくなったり多重ジャンプしたりのような兆候は今の所見られません。まだあんまり書き慣れてないので粗末なものですが。AsObservableしただけですね・・・
もっとローカルにごりごり押し込んで高速化したり簡略化出来ると思いますが、これで安定動作しているので今回はこの辺で。Unityゲーム開発所 - UnityでFPSを設定する方法Unityでゲームを作った際に「カクカクしている」と言われないためのTimeSettings.FixedTimestep講座 - 野生のはてなブログイベント関数の実行順 - Unity マニュアル【UniRx】Update()タイミングのイベントをFixedUpdate()のタイミングに変換する - Qiita
とりすーぷさんいつもお世話になっております。この記事はユニティちゃんライセンス条項の元に提供されています。


