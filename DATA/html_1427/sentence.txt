More than 1 year has passed since last update.ゴールデンウィークなので、今まで気になってたところを整備したりしました。GitHub Actions で NuGet へのリリースまで行うようにしました。master ブランチはビルド・テスト・NuGet パッケージをアーカイブに保存、pre-release ブランチに push すると master ブランチでの作業に加えて NuGet にプレビュー版としてリリース、release ブランチに push するとリリース版を NuGet に公開します。GitHub Actions 使ってて思ったのが、tag を使った方が素直に色々出来そうだな…と思いました。GitHub のリリース作成とかでは tag 使うのが前提っぽいし。タグ名をそのままリリースの名前に使うのが自然な流れみたいなので、tag を使わない運用の今回は GitHub のリリース作成は手動のままにしてます。NuGet パッケージを以下のように分割しました。特に理由がなければ、今まで通り ReactiveProperty パッケージを参照に追加してください。WPF, UWP, Xamarin など固有機能が必要な場合は、そちらのパッケージを利用してください。ReactiveProperty.Core は ReactiveProperty みたいなクラスが欲しいけど Rx の機能は不要なんだよな…と思っている方向けで Reactive Extensions への依存を取り除いた ReactivePropertySlim と ReadOnlyReactivePropertySlim が含まれている最小限のパッケージになります。ReactiveProperty と ReadOnlyReactiveProperty に ReactivePropertySlim と ReadOnlyReactivePropertySlim のコードを一部インポートしました。これにより ReactiveProperty と ReadOnlyReactiveProperty の性能が 4 割くらい改善されています。ただ、これでも Slim のついているクラスのほうが桁違いに早いです。ReactiveProperty v7 だけど ReactiveProperty&lt;T&gt; と ReadOnlyReactiveProperty&lt;T&gt; のパフォーマンス改善も入れてみました。ただ、Slimのほうが圧倒的に早いけど…4割くらい早くなってるのかな。 pic.twitter.com/pCHRuqP0IcGitHub のリリースを作らないと…。後でやろう。


