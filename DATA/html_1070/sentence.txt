More than 1 year has passed since last update.System.Runtime.CompilerServices.Unsafe クラスは一部で大変便利なのですが、ドキュメントを見ても動作が分かりにくいことが多いので、実際のILとC#へ逆コンパイルした結果を併記して簡易解説(メモ)します。基本的にldarg.0してretする、つまり引数をそのまま戻り値の型として呼び出し元に返すだけ。conv.u で参照をポインターに変換しているっぽい。純粋に再解釈するので誤ったキャストも許容される。
キャストの場合は、unbox.any !!T命令が使用される。C++でいうとTFrom&amp; source = ...; return (TTo&amp;)source; といったイメージ。.param [1] で仮引数1(1オリジン)に属性を適用している。Cでいうと*((T*)source);IA(x86, x64アーキテクチャ)では、恐らくUnalignedが付かない方を使用しても、(性能以外で)ペナルティはない。
逆コンパイル結果はアライメントされたものと同じだが、C#で表現できないからだろう。逆コンパイル結果はアライメントされたものと同じだが、C#で表現できないからだろう。Cでいうと*((T*)) = value;Cでいうと*((__unaligned T*)) = value;C++で云う(T&amp;)(((T*)&amp;source)+elementOffset)こちらはnative int版ref *(((T*)&amp;source) - elementOffset)こちらはnative int版ref *(((T*)source) - elementOffset)ref *((T*)(((byte*)&amp;source) - byteOffset))(byte*)(ref right) - (byte*)(ref left)unsafeコンテキストでsizeof()することと同じ。
Marshal.SizeOf()はマーシャリングを考慮する。個人的にはwhere T : unmanagedをつけて欲しい。C++/CLIで云うcli::interior_ptrと等価。多分CLRの対応が必要 https://github.com/dotnet/runtime/issues/29905組み合わせれば実現するが、できれば直接欲しいと思っているメソッドの一覧。


