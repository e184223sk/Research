More than 3 years have passed since last update.「明日の横浜の天気は？」そんなナチュラルな入力を解釈する Chat Bot は簡単に作れます。Microsoft Bot Framework と Cognitive Services LUIS (Language Understanding Intelligent Service) を利用して、自然言語で入力された文章を分類し、キーワード(今回は日程と場所)を取得、Livedoor 天気予報 Weather Hacks の天気予報 API を利用してデータを取得、日付と気温と共に天気アイコンを表示するカードを作成、表示する BOT を作成します。下記手順 3 まで行って作成できる 天気予報BOT↓
ご参考まで
1. 天気予報 BOT - Adaptive Card 編で作成したアプリはこちらからダウンロードできます
Bot Framework × Adaptive Cards: WeatherBot アプリサンプル
2. 天気予報 BOT - LUIS(1) で作成した App (JSON) はこちらからダウンロードできます。LUIS 管理画面から Import し、Train &amp; Publish を行ってお使いください。
WeatherBot LUIS App サンプル(JSON)Windows 10 + Visual Studio 2017 Enterprise, Bot Framework v3.8 (C#) で作成を行っています。無償の Visual Studio 2017 Community or 2015 Community でOKなので、既存の環境がない場合は、ダウンロードしてインストールします。
Visual Studio 2017 Community ダウンロードサイト
Visual Studio 用の Bot Framework C# テンプレート
Bot Framework Channel Emulator (Windows版) ※Mac/Linux は Console版 をご利用くださいBot Framework 開発環境の作り方は、Microsoft Bot Framework v3.0 からはじめる BOT 開発: Bot Framework を使うための開発環境 をご覧ください。Dialogs フォルダ を開き、RootDialog.cs を編集します。
RootDialog.cs の冒頭に Microsoft.Bot.Builder.LUIS への参照を追加します。RootDialig　クラスを IDialog から LuisDialig に変更します。
また、[Serializable] の前に LuisModel を追加します。AppID、EndpointKey は前回作成した LUIS App の API アクセス用 URL から抽出してコピー＆ペーストします。StartAsync は使用しないため、コメントアウトまたは削除します。
LUIS により自然言語解析を行い、Intent が "None" または判定できなかった時の動作を Task None として以下のように追加します。ここでは初期メッセージを表示します。Intent が "GetWeather" と判定された時の動作は、Task GetWeatherAsync として下記のように追加します。天気データの取得、Card へのセットは、Adaptive Cards 編 で作成した MessageReceivedAsync とほぼ同じコードになっています。
[追加]
GetLocationAsync: 都市名から都市IDを取得
[変更]
GetWeatherAsync: 都市コードを追加して天気予報を取得するように変更
GetCard: 指定した日付のみ表示されるように変更LUIS による判定結果 (Intent および Entity) は result に格納されています。result.Entity を確認して、”Place” および "Day" と判定された (=Tag に”Place” または "Day" が入っている) Entity を取得します。LUIS の Entity (Place) の値から取得した都市名を使って、都市IDを取得する、GetLocationAsync を追加します。
都市名と都市IDは Livedoor 天気予報 Weather Hacks の 全国の地点定義表(XML) で確認できます。こちらを直接参照するほか、今回はそれをJSON に置き換えた locationIdList.json を作成しましたので、これを利用します。Adaptive Card 編の 天気予報データを格納するクラスを作成する と同じ方法で、新規クラスファイルを作成していきます。
Models フォルダーを右クリックして、[追加]＞[クラス]をクリック、LoctaionModels.cs という名前で新規クラスファイルを作成します。

locationIdList.json を直接開く、またはダウンロードしてテキストエディタなどで開いて、内容をコピーします。
Visual Studio の 上部ツールバーから [編集]＞[形式を選択して貼り付け]＞[JSON をクラスとして貼り付ける] を選択して、コピーした内容を貼り付けます。

class Rootobject → class WeatherModel、Location → Location2 (WeatherModels.cs で利用済みのため。2か所) のように変更します。この LocationModel を利用し、場所を入力すると Id を返す GetLocationAsync を以下のように作成します。念のため、都道府県名を入れてもリストの一番上にある都市のIDを返すようにしています。GetWeatherAsync を修整して、下記のように都市IDを指定して天気を取得できるようにします。作成済みの GetWeatherAsync() を修整しても、新しく GetWeatherAsync(string cityId) を追加しても、どちらでも構いません。取得した天気予報データを、指定した指定した日(今日、明日、明後日) のみの情報ををカードに生成します。以下のように GetCard を修正して、日程を指定できるようにします。AddWeather も以下のように修整し、指定した日の情報のみをカードに表示するようにします。BOT の動作確認を行います。、F5 または デバック＞デバックの開始 をクリックして、プロジェクトのビルドおよび起動を行います。ブラウザが起動して Bot Framework のデフォルト画面が表示されたら、Bot Framework Channel Emulator を起動してアクセスを行います。
Bot Framework Channel Emulator の上部中央にある Bot Url に、起動しているブラウザと同じ URL (デフォルトでは http://localhost:xxxx) に /api/messages を追加したアドレス (http://localhost:xxxx/api/messages) を指定します。天気を尋ねる文章を送ると、指定した都市と日程の天気予報が返されるのを確認してください。
ご参考まで、完成したコードを GitHub で公開しました。
https://github.com/a-n-n-i-e/CognitiveLUIS-AdaptiveCards-WeatherBot


