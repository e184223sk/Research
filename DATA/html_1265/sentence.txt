More than 1 year has passed since last update.boolで実行結果がわかるような、副作用を起こすメソッドmethodThatWontFail()があるとする。
これが失敗して欲しくない時にUnityのAssertionを発生させるという目的で、Assert.IsTrue(methodThatWontFail());とやってはいけない。
ビルドした時に「基本的にAssertは丸ごと取り除かれる」という仕様のおかげでそのメソッドを実行するという事実ごと吹き飛ぶ。C#のList&lt;T&gt;()型には、bool Remove(T item)というメソッドがある。その名の通り、itemに指定したもので一番最初にヒットしたものを削除しようとするメソッドである。
この「しようとする」という部分が今回重要になってくる。
このメソッドは実際にListの中にitemで指定したものがなくても例外を吐かない仕様となっている。その代わり、boolの戻り値がtrueだと削除成功という扱いになる。さて、Assertionとはプログラマがコード中に「何があってもtrueとなってほしい条件」を記述するデバッグの手法の一つであるが、UnityにはこれがUnityEngine.Assertions.Assertクラスで提供されている。ちなみにこのクラスでは条件の記述が読みやすくなるようにラッピングされており、例えばといった記述ができる。先ほどのList&lt;T&gt;::Removeのコードにおいて、例えば42を取り除こうとする時点で42がリストに存在しない状況を絶対に起こしたくない、という要求があった。これをAssertionを利用して検出することを考え:とした。リリースビルド時にこのコードが動かなくなった。Assertionは基本的に「完成品でその条件がfalseになるようなことが起こらないようにデバッグ済みである」という前提となっている。そのため、UnityではReleaseでビルドすると基本的に「すべてのAssertionに関係するコードがそもそもソースに記述されていなかったことにして」ビルドする1という挙動をとる。つまり上記のコードの場合Assert.IsTrue(list.Remove(42)); がなかったことになるすなわちlist.Remove(42); が実行されないという事故が起こった。今回はList&lt;T&gt;::Removeだったが、それに限らず副作用を起こしてその結果をboolなどで返すようなコードをAssertionでチェックしてはいけない。どうしてもチェックする必要があるなら、副作用を起こさないメソッドで確認するのが良い。例:Unityではリリースビルドでも無理やりAssertionを含めるようにすることはできるが、こういう事故が起こった以上、自分はおすすめしない。 ↩


