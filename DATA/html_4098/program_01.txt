
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

// データテーブルそのものの基底クラス
// ジェネリック化しているので、派生クラス作成時にMasterDataTableBaseを継承した項目クラスを設定するだけでおｋ
public abstract class MasterDataTableBase&lt;T&gt; : ScriptableObject where T : MasterDataItemBase
{
    [SerializeField]
    protected List&lt;T&gt; list = new List&lt;T&gt;();

    private int GetIndexToID(string id)
    {
        if(list == null)
        {
            Debug.LogError("初期化が済んでいません");
            return -2;
        }

        if(id.IsNullOrEmpty())
        {
            Debug.LogError("IDが異常値です");
            return -2;
        }
        return list.FindIndex(x =&gt; x.id.Equals(id));
    }

    public void Clear()
    {
        list.Clear();
    }

    public void AddOrUpdate(Dictionary&lt;string, object&gt; item)
    {
        T tmp = Activator.CreateInstance(typeof(T), item) as T;
        AddOrUpdate(tmp);
    }

    public void AddOrUpdate(T item)
    {
        if(Application.isPlaying) return;

        int index = GetIndexToID(item.id);
        // 異常値の場合は何もしない
        if(index == -2) return;

        // 見つからない場合は新規追加
        if(index &lt; 0)
        {
            list.Add(item);
        }
        // 既にある場合はその要素を更新
        else
        {
            list[index] = item;
        }
    }

    public T GetItemInfo(string id)
    {
        if(id.IsNullOrEmpty()) return null;
        return list.Find(x=&gt;x.id == id) as T;
    }
}

