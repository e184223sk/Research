
// 1. Subjectを生成。
private readonly Subject&lt;Unit&gt; someSubject = new Subject&lt;Unit&gt;();

// 2. Subject生成時にSubjectの内部Observerは利用クラスの観測を開始したと見なす。
//    こんなイメージ。
private IObserver&lt;Unit&gt; SomeObserver =&gt; this.someSubject;

// 3. Subjectの内部Observableを公開してこれを中継役とする。
public IObservable&lt;Unit&gt; SomeObservable =&gt; this.someSubject;

private void SubscribeEvent()
{
    // 4. 3.のObservableに購読手続きを依頼。実際に購読するObserverを引数で渡す。
    var observer = Observer.Create&lt;Unit&gt;(onNext: _ =&gt; DoSomethingOnNext());
    this.SomeObservable.Subscribe(observer);
}

private void FireEvent()
{
    // 5. イベント発火タイミングが来たので、当クラスを監視していることになっているObserverに
    //    通知受信時の処理を行うように命令する。
    this.SomeObserver.OnNext(Unit.Default);

    // 6. 5.の命令を受けてSomeObserverはSomeObservable.Publish()を実行し、発行を依頼する。

    // 7. 6.の命令を受けてSomeObservableは、4.で登録されていたObserverのOnNext()を呼び出し、
    //    通知受信時の処理を行うように命令する。
}

