More than 1 year has passed since last update.#regionは、IDE(VisualStudio)上でコードを折りたたむための機能です。
以下のようなコードを書くと、VisualStudio上では下図のようにコードが折りたたまれます。
#regionはクラス内のメンバの分類や、メソッド内の処理の区切りとして、コードの可読性を上げるために使用されます。
単にコードを折りたたむだけの機能なので、コードのブロック単位を無視した使い方ができます。
コード規約で縛るのであればまだしも、無秩序に使われると可読性が逆に低下します。例えばこんなコードはこんな風になります。ネストして使われるとわけがわからないよ。
Windowsフォームのコードを例として出します。
下記のクラスにメンバを追加するとき、正しい位置に追加するには#region-#endregionのブロックをいちいち調べなければいけません。
労力に見合うほどのリターンが、果たしてあるのでしょうか？#regionがなければ読みづらいコードは、そもそもリファクタを必要としている可能性が高いです。
長大なメソッドをの可読性を上げるために#regionで分割することがよくありますが、そもそもメソッドを分割しておけば#regionを使う必要はなく、より可読性も向上します。多次元配列やヒアドキュメントのリテラルがコードの途中にあると、
膨大な行を使ったり、インデントを崩したりするので、読みやすさをかなり損ねてしまいます。
リテラルに用途を絞って#regionを使うのは可読性の向上に有効と言えます。便利機能として多用されることの多い#regionの注意点について解説しました。
どうしても#regionを多用したコードを向き合わざるを得ない場合に、役立つアドオンを最後にご紹介しておきます。どちらのアドオンも、#regionをデフォルトで展開状態にしてくれます。


