More than 1 year has passed since last update.前回に引き続きASP.NET Coreを学習メモを残していきたいと思います。MVCフレームワークIOC(依存性逆転の原則) / DI(依存性注入).NETフレームワークのプロジェクト構築には二つの概念があって、ソリューション(Solution)&amp;プロジェクト(Project)。どんなシステムの開発にしろ、すべてプロジェクトを作成しなければいけない。ソリューションはプロジェクトを組み合わせたものを指しています。開発するシステムが小規模であれば、１つのプロジェクトだけで事が足りますが、レイヤー分けや疎結合を求めたときに、プロジェクトでフォルダ分けでは不十分です。同じプロジェクト内のクラスは参照できてしまうからです。そのときにレイヤーごとにプロジェクトを作成し、プロジェクトの参照を用いることで、よりコードが再利用しやすくなり、移行も楽になります。ソリューションプロジェクトJavaで例えると、Mavenの親プロジェクトと子モジュールの関係ですかね。では実際にソリューションを作成していきます。VSCodeでソリューションフォルダを開きます。Ctrl + Shift + Pでコマンドパレットを開き[View:Show Solution]を入力するとサイドバーがソリューションとプロジェクトのツリー表示され、Visual Studioに似たUIになります。Startup.csを下記のように修正し、MVCのモジュール導入とデフォルトルートを設定します。ds.Tutorial.webのフォルダ配下にControllersのフォルダを新規作成し、そのフォルダ内にHomeControllerのクラスを作成します。
クラスの中身は下記です。恒例のF5でデバッグすると、下記と同じようにWebページが表示されます。Startup.csで設定したルートは{controller}/{action}に従いリクエストを処理します。
そして、初期値がcontroller = "Home", action = "Index" であるため、HelloWorldが最初に表示されます。もちろん、http://localhost:5001/home/index でも同じ結果が得られます。HomeControllerでTimeのAction methodを追加します。Viewsという名前のフォルダを作成し、その配下にHomeというフォルダも作成します。
ASP.NET Core MVC はデフォルトでは次のような順番にViewエンジンを探しに行きます。Viewエンジンが見つからない時点でエラーが発生します。/Views/Home/Time.cshtmlのファイルを作成して、中身を下記のように作ります。F5でデバッグ起動し、http://localhost:50001/home/time にアクセスすると下記のように表示されるはずです。今回作成したソースコードです。GitHubリポジトリでは！！( ｀ー´)ノ


