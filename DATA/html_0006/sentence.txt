先日、角度を表すAngle構造体を作成しました。この構造体をDOTweenに投入したいのですが、DOTweenに投入できる型は予め決まっており、もちろん自作したオブジェクトは投入することができません。調べてみたところ、DOTweenには任意のオブジェクトをTweenさせることができるPluginを作成する機能が備わっているようです。
しかし、DOTweenのPluginを作成する情報が少なく悪戦苦闘しましたので、ここに記録します。DOTween公式ホームページに、Plugin作成サンプルが掲載されています。
以下からダウンロードできます。このサンプルに従って、Angle構造体のPluginの作成を行ってみます。プラグイン本体はABSTweenPlugin&lt;T1, T2, TPlugOptions&gt;クラスを継承する必要があります。このクラスは型引数が3つもあるので、まずはこちらの説明をします。Angle構造体は内部演算で異なる型を使用する必要がなかったので、T1とT2は両方ともAngleを指定しました。
独自のオプションを作成する必要が出てきたので、TPlugOptionsにはAngleOptions構造体を作成してそれを指定しました。理由は後述します。ABSTweenPlugin&lt;T1, T2, TPlugOptions&gt;クラスには次の抽象メソッドが定義されており、これらを実装することでプラグインとして動作するようになります。具体的にどのように実装するのかを、Angle構造体用プラグインの実装例で確認していきます。TweenがResetされたときに実行する処理を記述します。
基本的にプラグイン本体は状態を持たないため、処理は何も記述しません。状態を持たせたい場合、後述するPlugOptionsを使用します。このメソッドはFrom()が指定されたときに呼ばれます。
From()は「現在値から目標値」ではなく「目標値から現在値」にTweenさせる設定なので、開始値と終了値を反転させる処理を記述します。Fromは開始値を指定できるオーバーロードもあります。
その場合は「引数で指定された値から目標値」にTweenさせる設定になるので、開始値を引数の値に設定する処理を記述します。
オーバーロードによって挙動がまったく異なるので注意が必要です。T1とT2を異なる型にした場合に、T1からT2に変換する処理を記述します。
T1とT2が同じの場合は、ただ単にreturnするだけでOKです。開始値と終了値の差分を計算する処理を記述します。SetRelative()が指定されているときに呼ばれます。
目標値が相対値となるように、目標値を修正する処理を記述します。SetSpeedBased()が指定されているときに呼ばれます。通常、Tweenの継続時間はdurationに[単位：s]で指定しますが、継続時間ではなく速度で指定したいときがあると思います。
そういうときに、SetSpeedBased()を指定すると、durationに指定された値が速度[単位：/s]として扱われるようになります。
正確には、ユーザーが[/s]として指定した速度値から、継続時間[s]に変換する処理が内部的に入ることになります。つまり、このメソッドには、durationに指定された速度値[/s]を、継続時間[s]に直す処理を書けば良いことになります。Angle構造体の場合、速度とは角速度です。しかし、単位は[rad/s]と[°/s]の2パターンあり、durationに指定されたfloat値からは単位がどちらなのか判断できません。
そこで、次のような列挙型を作ってAngleOptions構造体に乗せ、Unspecifiedの場合は例外を投げるようにしました。最終的な実装は次のようになりました。Angle構造体の場合は単位の性質上このように複雑な処理になってしまいましたが、通常は単に[/s]から[s]に単位変換する処理を書けば良いと思います。最後にEvaluateAndApplyです。これは毎フレーム呼ばれ、実際にTweenで値を更新するロジックを記述します。
公式の実装例を参考にして、次のように実装しました。以上でメソッドの実装は完了となります。作成したプラグインを使うにはプラグインのインスタンスが必要なのですが、プラグインは状態を持たないのでインスタンスを共有しても問題がないです。
したがって、以下のようにシングルトンパターンを適用しておきます。これでAnglePluginは唯一インスタンスしか作られなくなるので、メモリに優しいです。以上でプラグイン本体の実装は完了となります。続いて、自作のPluginに独自の設定を与えられるPlugOptionsを作成します。AnglePluginには次のオプションを設定可能にしました。1個めのオプションについてはGetSpeedBasedDuration節で説明したとおりです。
2個めのオプションは、例えば270°から0°にTweenするとき、270°→0°と逆回転するのではなく、270°→360°のように正転に変換してTweenさせるような設定を可能にするものです。それでは、実際にAnglePlugin用のオプション構造体AnglePlugOptionsを作っていきます。PlugOptionsとして扱うには、IPlugOptionsインターフェイスを実装した構造体としてオブジェクトを定義する必要があります。この中に保存したいオプションの値を追加していけば良いです。また、IPlugOptionsインターフェイスの定義は次のようになっています。TweenがResetされるときにこちらも呼ばれるようです。
設定を初期状態に戻すコードを実装すれば良さそうですね。上記をすべて実装すると次のようになります。ここで追加したAngleTweenDirectionのオプションを使えるようにするために、プラグイン本体のSetChangeValueメソッドを次のように修正しました。これでオプションが使えるようになります。オプションは使えるようになりましたが、オプションを設定する方法がありません。
そこで、独自のSetOptions拡張メソッドを定義します。
ついでに、SetSpeedBased時に同時に角速度の単位を指定できるようなオーバーロードも作っておきます。ようやくここまで来ました。
作成したAngle構造体用のDOTweenプラグインAnglePluginを使ってみましょう。
プラグインの使い方としては、DOTween.Toの第一引数に、プラグインのインスタンスを指定するだけです。これに従って、オブジェクトを円周上で回転移動Tweenさせてみます。
次のようなコードを用意しました。90°から360°まで1秒でTween
Relative() →　90°から450°になる
From() → 開始値と終了値が逆転、360°から90°になる
From(Angle.FromDegree(180)) → 180°から360°
Durationに90をセット、角速度の単位を°/sにして、SetSpeedBased() → 90°から360°を90°/sの速さでTween
From()（360°から90°にTween）に対してSetOptions(AngleTweenDirection.Forward) → 正転方向にTweenするので0°から90°
この記事では、DOTweenのPlugin作成機能を使って任意のオブジェクトをTweenする方法を紹介しました。
情報があまりなくて手探り状態で色々試しましたが、きちんとモノになってよかったです。
ここで紹介した手法を参考にすれば、任意のオブジェクトをTweenさせるPluginも作成可能と思います。この記事で使用したUnityプロジェクトとソースコードは下記GitHubでも公開しています。また、Angle構造体本体については下記GitHub及び記事を参照ください。ご意見ご指摘等ありましたらコメントをよろしくお願い致します。


