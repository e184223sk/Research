More than 1 year has passed since last update.C#でコードを書いていると必ず式と文を使用します。参考:C# の式と文の一覧今回は文を書かずに式のみを使用してコードが書けるかどうかを検証します。
(ネタ記事です)二番目のレギュレーションについて補足です。上記のコードのここと書かれた部分にコードを記述します。シンプルにFizzBuzz問題を実装します。
1-100までのFizzBuzzを標準出力に出力します。LINQを使用すれば比較的簡単に実装できます。
以下のコードで1から100までのfizzbuzz問題の解答文字列を得ることができます。問題になるのは標準出力に出力する方法です。
式全体で何等かの値を返さないといけない関係上ToListしてForEachという手法は使用できません。
また、Console.WriteLineの戻り値がvoidなためそのままでは使用できません。戻り値がvoidのメソッドを任意の型の戻り値に変換するために以下の手法を使用します。組み合わせると解答は以下の通りです。別解

Console.Out.WriteLineAsyncを使用することでも解決できます。C#でコードを書くときにLINQを使用できないようなこともあるかもしれません。
今回はLINQを使用しない場合についても検証します。LINQを使用しない場合はisを使用したパターンマッチングが使用できます。
これはC# 7から使用できるようになったもので、式中で変数が宣言できる神機能です。参考パターン マッチング - C# によるプログラミング入門このパターンマッチは式が書ける任意の場所に置くことができます。
つまり以下のようなことが可能です。再帰関数がかけるのならばfizzbuzzも解けるはずです。
解答は以下の通りです。ほとんど役に立たないと思います。
isのvarパターンの使用方法について考えているとこのように使用しろと言われている気がしました絶対名前空間を使ってはいけないC#LINQもパターンマッチも使用しない場合

static int Main() =&gt;
    (new Func&lt;
        Func&lt;
            Func&lt;
                Func&lt;dynamic, dynamic&gt;,
                Func&lt;dynamic, dynamic&gt;
            &gt;,
            Func&lt;dynamic, dynamic&gt;
        &gt;,
        dynamic
    &gt;(Z =&gt; 
        Z(f =&gt; t =&gt;
            t.Item1 == t.Item2 ? default :
                t.Item1 % 3 == 0 &amp;&amp; t.Item1 % 5 == 0 ?
                new Action(() =&gt; Console.WriteLine("fizzbuzz")).DynamicInvoke() ?? f((t.Item1 + 1, t.Item2)) :
                t.Item1 % 3 == 0 ?
                new Action(() =&gt; Console.WriteLine("fizz")).DynamicInvoke() ?? f((t.Item1 + 1, t.Item2))  :
                t.Item1 % 5 == 0 ?
                new Action(() =&gt; Console.WriteLine("buzz")).DynamicInvoke() ?? f((t.Item1 + 1, t.Item2))  :
                new Action(() =&gt; Console.WriteLine(t.Item1)).DynamicInvoke() ?? f((t.Item1 + 1, t.Item2))
        )((1, 101))
    ))(
        f =&gt; (new Func&lt;dynamic, Func&lt;dynamic, dynamic&gt;&gt;(x =&gt; f(y =&gt; x(x)(y))))
        (new Func&lt;dynamic, Func&lt;dynamic, dynamic&gt;&gt;(x =&gt; f(y =&gt; x(x)(y))))
    ) != null ? 0 : 0;





