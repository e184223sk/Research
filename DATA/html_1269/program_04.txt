
EnemyStatusStruct enemyStatus = FetchEnemyStatus(qSpawn);

int[] componentIds = enemyStatus.componentIds;
if (componentIds.Length == 0)
    return;

List&lt;ComponentType&gt; typeList = new List&lt;ComponentType&gt;();
for (int j = 0; j &lt; componentIds.Length; j++)
{
    typeList.Add(SettingManager.ComponentDataTypeDic[componentIds[j]]);
}
typeList.Add(typeof(Enemy));
typeList.Add(typeof(Gunner));
typeList.Add(typeof(RenderSprite));
typeList.Add(typeof(Drifting));
typeList.Add(typeof(Durability));
typeList.Add(typeof(Scorable));
typeList.Add(typeof(Destructive));
typeList.Add(typeof(NeedMaterialSetting));
typeList.Add(typeof(MotionData));
typeList.Add(typeof(LinearMotion));
typeList.Add(typeof(CircularMotion));
typeList.Add(typeof(SpringMotion));
typeList.Add(typeof(AttractedMotion));
typeList.Add(typeof(Rotation));
typeList.Add(typeof(HasParent));

ComponentType[] types = typeList.ToArray();
EntityArchetype entityArchetype = entityManager.CreateArchetype(types);
Entity enemyEntity = entityManager.CreateEntity(entityArchetype);

// コンポーネントの初期値設定をする
for (int j = 0; j &lt; types.Length; j++)
{
    var type = types[j];

    if (type == typeof(Translation))
    {
        entityManager.SetComponentData(enemyEntity, new Translation
        {
            Value = new Vector3(qSpawn.x, qSpawn.y, 0),
        });
    }
    if (type == typeof(RenderSprite))
    {
        entityManager.SetComponentData(enemyEntity, new RenderSprite
        {
            materialId = enemyStatus.moveAnimationId,
            speed = 10,
            scaleCurrent = new float2(1, 1),
            sortingOrder = SpriteRenderSystem.SORTING_ENEMY,
        });
    }
    if (type == typeof(MotionData))
    {
        entityManager.SetComponentData(enemyEntity, new MotionData
        {
            Acceleration = new float3(2, 2, 0),
            friction = new float3(1, 1, 0),
            MaxSpeed = enemyStatus.maxSpeed,
        });
    }
    if (type == typeof(Enemy))
    {
        entityManager.SetComponentData(enemyEntity, new Enemy
        {
            explosionMaterialId = enemyStatus.explosionAnimationId,
            triggered = true,
            verseId = qSpawn.verseId,
        });
    }
    if (type == typeof(Durability))     entityManager.SetComponentData(enemyEntity, new Durability { value = enemyStatus.durability, });
    if (type == typeof(Rotation))       entityManager.SetComponentData(enemyEntity, new Rotation { radian = 0.0f, });
    if (type == typeof(Gunner))         entityManager.SetComponentData(enemyEntity, new Gunner { isTriggered = true, });
    if (type == typeof(Scorable))       entityManager.SetComponentData(enemyEntity, new Scorable { value = enemyStatus.score, });
    if (type == typeof(Destructive))    entityManager.SetComponentData(enemyEntity, new Destructive { Is = false, materialId = enemyStatus.explosionAnimationId, });
    if (type == typeof(NeedMaterialSetting)) entityManager.SetComponentData(enemyEntity, new NeedMaterialSetting { Is = true, });
}

