More than 1 year has passed since last update.Entity Framework CoreでAzureのSQL Databaseに接続し、を実現したかったEF Coreになり、行ロックに対応していないかと期待しましたが、まだ未対応。System.ComponentModel.DataAnnotations.ConcurrencyCheckを使って楽観ロックをすることで、更新を競合させないことは可能。
https://docs.microsoft.com/ef/core/modeling/concurrency公式のドキュメントでは、DbUpdateConcurrencyExceptionをキャッチして、問題のデータをアップデートするような例が提示されています。ところが、現在のDBの値に応じて、保存したい値が異なる場合、次の(1)と(2)で同じような処理を入れる必要があります。
扱うエンティティも異なるので共通化しづらいし、リトライ機構も自分で実装する必要があり、どうもいまいち。参考
https://docs.microsoft.com/ef/core/saving/concurrencyMicrosoft.EntityFrameworkCore.SqlServerRetryingExecutionStrategyのラッパークラスを作って、DbUpdateConcurrencyExceptionもSELECTからやり直すようにできればシンプルになると考え、作ってみました。ただ、DbUpdateConcurrencyExceptionが発生しても、そもそもShouldRetryOnに入ってこないようで、挫折参考
https://docs.microsoft.com/dotnet/api/microsoft.entityframeworkcore.sqlserverretryingexecutionstrategyEntity Framework Coreになっても、まだいまいちなので他の方法を探したほうがよいな、という印象でした。


