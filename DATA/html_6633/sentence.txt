More than 3 years have passed since last update.プログラムからPowerPointの図形追加をする際、日本語の簡易なコードサンプルが見つけられず時間を奪われたので、誰かが同じ苦労をしないようにコードサンプルを載せます。使用言語はC#です。Visual Studio 2015を使います。C#からのOfficeのファイル操作には、OpenXML SDKを利用できます。Office 2007以降のPowerPointファイルは、OpenXMLという仕様に準拠しています。OpenXMLの中でもPowerPointファイルを構成する言語をPresentationMLと言います。実体はいくつかのXMLファイル（と、画像などのファイル）をzip圧縮したものです。試しにpptxファイルをzip解凍すると、アプリケーションが対象とするオブジェクト（例えばPowerPointのスライドマスター）に対応したXMLファイルを確認することができます。OpenXML SDKは、OpenXML形式のファイルの読み書きを支援するライブラリです。OpenXML SDKでは、XMLの各要素に対応したクラスがあり、要素の属性に対応したプロパティがあります。
例えばPowerPointでは、スライドを表すSlideクラス、図形を表すShapeクラス、図形の外線を表すOutlineがあり、線幅を表すOutlineのメンバ変数であるWidthがあります。また、Microsoft のダウンロード センターでは、OpenXMLSDKToolV25.msiというツールがあります。
OpenXMLの構造をグラフィカルに表示できるだけでなく、XMLの不正な点を検出したり（Validate）、2 つの OpenXML ファイルを比較（Compare Files）したりできるようです。準備として、NugetでOpenXML SDKのパッケージをインストールします。デフォルトのパッケージソースであるnuget.orgからは得られないので、まずパッケージソースの設定を行います。OpenXML SDKのパッケージに行って、Table 1: The latest builds are available via a MyGet feedからパッケージソースのFeed URLを得ます。Nuget V3であればhttps://dotnet.myget.org/F/open-xml-sdk/api/v3/index.json になります。次の手順でパッケージソースをVisual Studio Nugetパッケージマネージャーの設定に追加します。参考：mygetからのパッケージ取得、github.com/OfficeDev/Open-XML-SDKソリューションのNugetパッケージマネージャーを開いて、パッケージソースを先ほど加えたもの（dotnetopenxml）に変更すると、DocumentFormat.OpenXMLというパッケージが検出されます。それをインストールします。ここからコードサンプルです。
すでにスライドが生成されたpptxファイル（hoge.pptx）が用意されているものとします。図形を加えたり、望みの図形を得るためには、まずhoge.pptxの適当なスライドから、図形をまとめて管理するオブジェクトであるShapeTreeを取得します。この辺りのちゃんとした説明は[方法] プレゼンテーション内の図形の塗りつぶしの色を変更する (Open XML SDK)が詳しいです。では、コードの全体像を示します。流れは次のようになります。generateShapes()の中で使用する汎用的な図形生成メソッドを作成していきます。
名前はAddShape_()とします。オブジェクトの追加は、そのオブジェクトの親のAppendメソッドによって追加していきます。図形の追加であれば、Shapeインスタンスを生成して、ppshapeTreeに対してAppendすればいいということになります。Shapeインスタンスを追加したい図形オブジェクトになるようにするには、そのメンバ変数で指定すればいいというわけではなく、特徴を表すインスタンスをAppendしていきます。Shapeインスタンスには、次の4つのクラスのインスタンスをAppendする必要があります。したがって、AddShape_メソッドは次の手順で書かれています。ShapeインスタンスにAppendするインスタンスはmakeProperties（後述）をはじめとしたメソッドの中で作成しています。
これらのインスタンスにもまた、その子オブジェクトのインスタンスをAppendしていく必要があります。
足らないとファイルが開けなかったり、PowerPointを開いたときに正しく図形が表示できなかったりします。Shapeインスタンスを追加したい図形オブジェクトになるようにするには、ShapePropertiesインスタンス以下を指定していきます。だから、AddShape_メソッドのppshapeTree以外の引数はmakeShapeProperties()に渡しています。makeShapeProperties()だけが関心事なので、以降でmakeShapeProperties()とそれ以外は分けて表示します。AddShape_メソッドの引数は次のようなことを表現します。
あとはだいたいわかると思います。getcm2shapescale()やgetDegree2shapescale()でShapeProperties以下での座標や角度のスケールに変換してからmakeShapePropertiesに値を渡します。makeShapeProperties()では、引数を該当のインスタンスのメンバ変数に代入していきます。おまじないを書きます。ここを参考にしました。generateShapes()の中で以降を呼び出せば、該当の図形が生成できます。(x1,y1)から(x2,y2)への波線矢印AddShape_のhorizontalFlipにtrueを渡せば水平方向に反転。
angleに角度を渡せば回転。


