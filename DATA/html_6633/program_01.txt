
    static class AddShape
    {
        private const int cm2shapescale = 360000;
        private const int degree2shapescale = 60000;

        static void AddShape_(
                ShapeTree ppshapeTree,
                D.ShapeTypeValues shapeType = D.ShapeTypeValues.Rectangle,// Any of the built-in shapes (ellipse, rectangle, etc)
                string fill_rgbColorHex = "EEECE1", // Hexadecimal RGB color code to fill the shape.
                bool isnooutline = false,
                D.SchemeColorValues outlineSchemeColor = D.SchemeColorValues.Text1,
                float x = 1, // Represents the shape x position in 1 cm.
                float y = 2, // Represents the shape y position in 2 cm.
                float width = 2, // Shapw width in in 2 cm.
                float height = 2, // Shapw height in in 2 cm.
                bool horizontalFlip = false,
                bool verticalFlip = false,
                int angle = 0,   //degree
                bool isdashline = false,
                bool isTailEndArrow = false,
                bool isHeadEndArrow = false
            )
        {
            Shape shape1 = new Shape();
            shape1.Append(makeNonVisualShapeProperties());
            shape1.Append(makeShapeProperties(
                shapeType: shapeType,
                fill_rgbColorHex: fill_rgbColorHex,
                isnooutline: isnooutline,
                outlineSchemeColor: outlineSchemeColor,
                x: getcm2shapescale(x),
                y: getcm2shapescale(y),
                width: getcm2shapescale(width),
                height: getcm2shapescale(height),
                horizontalFlip: horizontalFlip, verticalFlip: verticalFlip,
                angle: getDegree2shapescale(angle),
                isdashline: isdashline,
                isTailEndArrow: isTailEndArrow,
                isHeadEndArrow: isHeadEndArrow)
                );
            shape1.Append(makeShapeStyle());
            shape1.Append(makeTextBody());
            ppshapeTree.Append(shape1);

        }

        static long getcm2shapescale(float cm_val)
        {
            return (long)(cm_val * cm2shapescale);
        }

        static int getDegree2shapescale(int angle)
        {
            return angle * degree2shapescale;
        }

        .
        .
        .

    }

