More than 3 years have passed since last update.この記事は、もう数十年前に出版された『ナノピコ教室・プログラミング問題集』(駒木悠二+有澤誠 編　共立出版株式会社)に掲載されている問題をC#で解いたものです。n倍して桁が巡回する自然数を求めてください。 nは、2 &lt;= n &lt;= 9　とします。この時の自然数を巡回数と言います。例えば、1234の場合は、2倍した値が、2341, 3412, 4123 のいずれかになれば、巡回すると言えます。実際には、2倍した値は2468なので、巡回はしません。
巡回数は循環数と言う場合もあるようです。CyclicNumberクラスは、n倍して桁が巡回する自然数を求めます。この問題を解く本質部分を担当しています。
求める自然数は、計算時間を考慮して、1〜999,999までの自然数に限定しました。n倍した数が、nを巡回した数(複数個存在）の中にあるかどうかをしらみつぶしに調べる、という実に当たり前のやり方です。
ただ、高速化のため、泥臭い判定処理を入れています。コンストラクタにn倍する値（乗数:multiplier）を与えています。multiplier倍して巡回する自然数を列挙するpublicメソッドです。multiplierの値はコンストラクタの引数で受け取っています。
泥臭く、１から始めて、2,3,4と一つずつ巡回数かどうかを調べています。巡回数ならば、yield returnで列挙しています。引数numが巡回数かどうかを調べています。
高速化のため、泥臭い判定処理を入れています。詳しくはソースコードを読んでください。引数numを巡回させた数を文字列に変換し列挙しています。Mainメソッドで、CyclicNumberクラスを使って、2倍から9倍までの解を求めています。
特にむずかしいことはやっていません。以下結果です。なんとすべてが６桁です。
結果を眺めてみると、142857は、2倍、3倍、4倍、5倍、6倍のすべての解になっています。
それと、2倍の結果に出てくる６つの数は、3～6倍の結果のいずれかに表れています。
面白いですね。この記事は、Gushwell's C# Programming Pageで公開したものを加筆・修正したものです。


