More than 3 years have passed since last update.こんにちはー！Visual Studio Advent Calendar 2016の15日目担当のニアです。今回は、多言語対応したXMLドキュメントコメント（※以降、単に「コメント」と表記します）ファイルを配置できる、NuGetパッケージを作成し、Visual Studioの言語設定に合わせて、IntelliSenseやオブジェクトブラウザーに表示されるそのコメントを切り替えられるようにする方法を紹介していきます。ちなみに上図は、私が現在開発しているAndroid Wear用のウォッチフェイスアプリ向けクラスライブラリ（Xamarin用）「Chronoir_net.Chronoface.Utility」です。その前に、Visual Studioの言語設定によって、コメントが切り替わる仕組みについて説明します。C#やVisual Basic.NETでは、ソースコードにXMLドキュメントで表したコメントを記述すると、IntelliSenseやオブジェクトブラウザーにそのコメントが表示されます。配布するクラスライブラリでコメントを表示するには、Visual Studioで生成したコメントファイルを、そのクラスライブラリと同じディレクトリに配置します。先ほど示したサンプルクラスでは、コメントが英語ですが、これをVisual Studioの言語設定に合わせてローカライズしたものを表示したい場合、言語コード（例 : 「ja」（日本語）、「en」（英語））のフォルダーを作成して、その中にローカライズしたコメントファイルを配置し、クラスライブラリの直前のフォルダー名を「ターゲットにするフレームワーク名」（例 : 「net452」（.NET Framework 4.5.2）、「monoandroid60」（Mono.Android 6.0））にします。上図の場合、Visual Studioの言語設定が日本語の時に、日本語用のドキュメントコメントが表示されます。それでは早速、NuGetパッケージを作成していきます。◆ 本記事では、クラスライブラリのサンプルとして以下のコードを使用しています。プロジェクトの設定で、構成から「Relese」を選択し、「XMLドキュメントファイル」のチェックボックスにチェックを入れます。また、そのファイル名はクラスライブラリと同じ名前にします。アセンブリ情報を入力し、クラスライブラリをビルドします。出力フォルダーにて、ローカライズする言語コードのフォルダーを作成します。本記事では、日本語（ja）とドイツ語（de）用のコメントファイルを作成しています。◆ 言語コードの例Visual Studioで作成したコメントファイルのコピーを作成して、ローカライズする言語向けに編集します。コマンドプロンプトを起動し、プロジェクトファイルのあるディレクトリ[^1]に移動して、以下のコマンド[^2]を実行し、nuspecファイルを作成します。[^1]: プロジェクトファイルのあるディレクトリ上でnuget specを実行すると、作成するnuspecファイルの一部に、プロジェクトの設定値を使用するトークン（例 : $id$（アセンブリ名））が設定されます。
[^2]: 本記事で使用しているnuget.exeのバージョンは、3.4.4.1321です。※nuget.exeのあるディレクトリを環境変数「PATH」に追加しておくと、コマンド入力がスマートになり、便利です。
&gt;&gt; Visual Studioの外部ツール機能を活用してみよう作成したnuspecファイルを編集します。※今回はサンプルなので、ライセンスのURLやアイコンのURL、プロジェクトのURLは省略しています。C#やVisual Basic.NETのプロジェクトファイルを指定してNuGetパッケージを作成する場合、それに含まれるのはクラスライブラリと既定の言語のコメントファイルのみです。
また、作成したNuGetパッケージのインストールすると、「packages/[パッケージ名]/lib/[ターゲットフレームワーク名]」（本記事の場合、「packages/Sample.1.0.0.0/lib/net452」）フォルダー内に配置されます。ローカライズした方のファイルも含めるには、file要素を追加し、src属性にローカライズしたコメントファイルのパスを、target属性にそのファイルの配置先のパスを設定します。コマンドプロンプトで、以下のコマンド[^3]を実行し、NuGetパッケージを作成します。[^3]: 「-Prop Configuration=Release」オプションは、Releaseビルド側のプロジェクト設定を指定します。NuGetファイルはZIP形式なので、拡張子を「zip」に変更すると、パッケージの中身を確認することができます。
「[パッケージ名]/lib/[ターゲットフレームワーク名]」（本記事の場合、「Sample.1.0.0.0/lib/net452」）のフォルダーの中に、クラスライブラリファイルと既定の言語のコメントファイルに加えて、ローカライズする言語コードのフォルダー及びそのコメントファイルが入っていれば、成功です。あとはNuGetパッケージをNuGet Galleryやリポジトリに公開すればOK！本記事で使用したファイルは、Gistでも公開しています。今回は、多言語対応したXMLドキュメントコメントファイルをNuGetパッケージに含めて、インストール時に適切なディレクトリに配置し、Visual Studioの言語設定に合わせて、ローカライズされたコメントを切り替えられるようにする方法を紹介しました。便利なクラスライブラリを作成したら、ぜひ、コメントを多言語対応にして、世界中の開発者にオススメしてみませんか？それでは、See you next!コメントのローカライズは、今のところ、手作業で編集するか外部ツールを使用して行う状況です。
リソースファイル（resxなど）のように、言語ごとのコメントファイルを簡単に作成できる仕組みがあればな・・・と、私は思います。


