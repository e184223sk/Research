
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.InputSystem;

public class AutoFollowCameraArm : MonoBehaviour, Controls.ICameraActions
{
    private Controls inputCamera;
    [SerializeField] private Transform character;
    [SerializeField] private GameObject cameraObj;

    private Vector2 inputRightStick;
    private Vector3 followPos;      //CameraArmが追従する位置を格納
    private Vector3 lookPos;        //カメラが見る方向を格納
    private float horizontal;       //現在の水平角度
    private float vertical;        //現在の垂直角度
    private Quaternion cameraArmLerpRot;


    private void Awake() {
        inputCamera = new Controls();
        inputRightStick = Vector2.zero;
        inputCamera.Camera.SetCallbacks(this);
    }

    private void OnEnable() {
        inputCamera.Enable();
    }

    private void OnDisable() {
        inputCamera.Disable();
    }

    private void Update() {
        var position = character.position;

        var difference = position-cameraObj.transform.position;
        followPos = Vector3.Lerp(followPos, position, 0.1f);    //追従する位置を減速移動で計算
        Quaternion rot = Quaternion.LookRotation(difference, Vector3.up);
        cameraArmLerpRot = Quaternion.Lerp(transform.rotation , rot, 0.1f);
        lookPos = Vector3.Lerp(lookPos, position, 0.1f);    //カメラの見る位置を減速移動で計算

        if (Mathf.Abs(inputRightStick.x) &gt; 0.25f) {    //入力制限。いらないかも
            horizontal = inputRightStick.x * Time.deltaTime * 40;
        }
        else {
            horizontal = 0;    
        }

        if (Mathf.Abs(inputRightStick.y) &gt; 0.25f) {    //入力制限。いらないかも
            vertical += inputRightStick.y * Time.deltaTime * 40;
            //回りすぎるとUnityでは上下反転してしまうので上限を設ける-98～98までなら設定可能だと思う
            vertical = Mathf.Clamp(vertical, -80, 80);
        }
        Vector3 vec = cameraArmLerpRot.eulerAngles;
        transform.rotation = Quaternion.Euler(new Vector3(-vertical,vec.y,vec.z));     //移動中に見下ろし角度を変えたくないのでVerticalの値はそのまま使う
        transform.Rotate(0, horizontal, 0, Space.Self);    //横は毎回リセットを行う
        transform.position = followPos;
        cameraObj.transform.LookAt(lookPos);
    }

    void Controls.ICameraActions.OnR_Stick_Button(InputAction.CallbackContext context) {
        Debug.Log("ButtonLeftStick");        //カメラリセットの処理を書く予定でしたが、遅刻しているので割愛時間がアレば修正します
    }

    public void OnAxisRight(InputAction.CallbackContext context) {
        inputRightStick.x = context.ReadValue&lt;Vector2&gt;().x;
        inputRightStick.y = context.ReadValue&lt;Vector2&gt;().y;
    }
}


