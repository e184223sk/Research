こんにちは、やまだたいしです。
当記事はUnity #2 Advent Calendar 2020 14日目の記事です。
https://qiita.com/advent-calendar/2020/unity2今回Unityで特にアセットを使わずにTPSカメラを作っていこうと思います。
今回の実装方法は特に言い伝えられている実装方法ではなく私独自の実装方法です。
普通に実装するならcinemachineのFreeLook Cameraを使うことをおすすめします。TPSカメラと一口に言っても、大まかに2つのモードがあると思っています。
ここでは追従モード・非追従モードと呼ばせて貰います。最近Switchで録画したゼルダ無双なのですが、こちらは比較的分かりやすいです。
参考までに貼っておきます。この動画で言うところの走っている時のカメラの動きが追従モードで、軽く走っている所が非追従モードです。ちょっと分かりづらいですが図を用意しました。
カメラを常にキャラクターから相対位置に配置します。
コントローラーの左右を入力すると、そのまま左右にキャラクターが移動します。カメラがキャラクターに追従するように相対距離のみ保ちます。
キャラクターから糸がついているかのような動作をします。
コントローラーの左右を入力するとカメラを中心に円を描くように移動します。
走っているとカメラがキャラクターの後ろに勝手に回り込みます。ここで追従モード・非追従モードどちらが良いのかという利点欠点を書いて置こうと思います。
私が思う部分なので他にもあるかも知れません。と言った利点、欠点がそれぞれあります。
簡単に言うと、非追従モードは戦闘特化、追従モードは移動特化です。ゼルダ無双は戦闘中は基本的に非追従モードのようですが、ある一定上距離の出る早い攻撃をする場合は
追従モードに切り切り替わるようになっている気がします。
製作者の心遣いが感じられます。また、ゲームによって激しく戦闘するゲームでは非追従モードであってもプレイヤーの意図しないカメラワークが行われ3D酔いが発生します。
それを発生させないために追従距離に対して遊び、ピッタリとついてこない範囲を設けてカメラが激しく動かないようすることもあるようです。今回はInputSystemを使用して書いています。
Unity Versionは 2019.4.16f1です。
ロジック自体は以前の入力システムの考え方に置き換えれば使えると思うので以前の入力システムの方も読めば何となく分かると思います。キャラクターの移動のスクリプトに関しては、追従モード・非追従モードのどちらでも使える書き方があるので
そちらを簡単に紹介しようと思います。なお、スクリプトに関しては、今回の記事用に簡単に作成したもので、気持ちのいい操作感にするためには、
また別途修正する必要があると思うので個別に修正をオススメします。InputSystemは今回は記事の中心ではないため、ある程度話は割愛しますが簡単に私の今回の設定の解説をします。
私もInputSystemについては理解していない部分もあるのですが、現在の設定はこんな感じです。
PlayerとCamera2つ用意しそれぞれのスクリプトで利用するのを想定しました。
とりあえず、移動用とカメラ回転用です。
ロジクールのコントローラーをPCに指して利用。
ActionTypeはValeでコントローラーの倒し具合を取得、値の受け取りはVector2Dに設定。(本当はAxisを利用したかったのですがUnityでは、まだ使えない?)
PlayerとCameraとでInteractionsとProcessorsの設定が異なりますが、ここはチョット私も分かっていなくて触っている途中ですので、
それぞれで触って見てください。安定のテラシュールブログさんがわかりやすかったです。
http://tsubakit1.hateblo.jp/entry/2019/01/09/001510
まずは非追従モード・追従モードどちらでも使えるキャラクターの操作を紹介します。

今回の記事用にモデリングしたキャラ「くわぽん」です。
実際に私が書いたコードはこんな感じです。以下スクリプトは「くわぽん」にアタッチ。InputSystemの設定 or 入力拒否範囲の設定だと思うのですが、ちょっと入力の値が怪しいです。
まぁ、今回の解説の主旨ではないので気にせず続けます。(気が向いたら記事を直します)重要なポイントはカメラの回転角度を参照しキャラクターの移動を行っているところです。
この設定がないとカメラを回転したときにキャラクターが上手く動いてくれません。こちらのカメラについては結構Unity TPSと検索すると出てくる一般的なカメラです。
非追従モードのカメラを作るのは比較的簡単です。
カメラをキャラクターの位置に追従させるロジックを作成すればいいです。GameObjectの構成を↓のようにして、

メインカメラのポジションを↓のように10Xぶん離します。

そうするとCameraArmObjectから常に10離れた位置にカメラが出来ます。
後はCamraArmをキャラクターにくっつくように移動させ、カメラの向きを常にキャラクターに向けるようにしてあげれば良いです。以下スクリプトはCameraArmにアタッチ。減速移動でカメラの位置と角度を決めている理由は、キャラクターが猛スピードで動いたときに遅れて追従することでスピード感を出すことが出来るからです。
キャラクターと同じ速度で追従した場合、3D酔いをする人も居る、演出的にこちらの方がカッコいいためです。
今回はカメラの遊びは設けていません。ちょっと、Unityのクォータニオンに手こずって時間がかかりましたが、作成できました。
まず、ゲームオブジェクトの構成です。

先ほどと同じです。しかし、MainCameraの値を少し変えました。(クォータニオンの変換がかかって面倒だったため変えました)

Z軸を-10してあります。スクリプトは以下のとおりです。
先程同様、CameraArmオブジェクトにアタッチ。
ちょっと、FixedUpdateからズレている処理がありますが概ね同じ処理です。
↑横に移動するとカメラを中心に回転するようになりました。若干キャラクターの動きがカクつくところがありますがPlayerの移動スクリプトを直せばなおると思います。
また、カメラの方向にRayを飛ばしてZ軸の長さを調整することで、壁などに埋もれずにカメラを操作することも可能です。
今回は割愛しますが参考になればと思います。今回追従カメラを作るにあたって苦戦したのがクォータニオンです。追従モードのスクリプトの以下の部分なんですが……最初↓のように書いていたのですが、コントローラーである一定角度以上回転させるとカメラが荒ぶってしまいました。
クォータニオン同士の足し算が、掛け算であるからなのかなぁと何となく邪推しますが、取り扱いは難しいようなので、
今回のコードを変更される場合はしっかり理解された上で触ることをおすすめします。↓荒ぶったカメラ
https://www.hanachiru-blog.com/entry/2019/02/20/183552
https://zenn.dev/supple/articles/a18e9282765b85c255db一日遅れになってしまいましたが、UnityでTPSカメラを作るでした。
参考になれば幸いです。
以上、やまだたいしでした。
https://twitter.com/OrotiYamatano


