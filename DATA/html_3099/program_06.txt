
[StructLayout(LayoutKind.Explicit)]
struct FastEnumConverter&lt;T&gt; where T : IConvertible
{
    [FieldOffset(0)] public T Raw;
    [FieldOffset(0)] public sbyte AsSByte;
    [FieldOffset(0)] public byte AsByte;
    [FieldOffset(0)] public short AsShort;
    [FieldOffset(0)] public ushort AsUShort;
    [FieldOffset(0)] public int AsInt;
    [FieldOffset(0)] public uint AsUInt;
    [FieldOffset(0)] public long AsLong;
    [FieldOffset(0)] public ulong AsULong;
}

public static class FastEnumConvert
{
    public static sbyte ToSByte&lt;T&gt;(T value) where T : IConvertible { return new FastEnumConverter&lt;T&gt; { Raw = value }.AsSByte; }
    public static byte ToByte&lt;T&gt;(T value) where T : IConvertible { return new FastEnumConverter&lt;T&gt; { Raw = value }.AsByte; }
    public static short ToShort&lt;T&gt;(T value) where T : IConvertible { return new FastEnumConverter&lt;T&gt; { Raw = value }.AsShort; }
    public static ushort ToUShort&lt;T&gt;(T value) where T : IConvertible { return new FastEnumConverter&lt;T&gt; { Raw = value }.AsUShort; }
    public static int ToInt32&lt;T&gt;(T value) where T : IConvertible { return new FastEnumConverter&lt;T&gt; { Raw = value }.AsInt; }
    public static uint ToUInt32&lt;T&gt;(T value) where T : IConvertible { return new FastEnumConverter&lt;T&gt; { Raw = value }.AsUInt; }
    public static long ToLong&lt;T&gt;(T value) where T : IConvertible { return new FastEnumConverter&lt;T&gt; { Raw = value }.AsLong; }
    public static ulong ToULong&lt;T&gt;(T value) where T : IConvertible { return new FastEnumConverter&lt;T&gt; { Raw = value }.AsULong; }

    public static T ToEnum&lt;T&gt;(sbyte value) where T : IConvertible { return new FastEnumConverter&lt;T&gt; { AsSByte = value }.Raw; }
    public static T ToEnum&lt;T&gt;(byte value) where T : IConvertible { return new FastEnumConverter&lt;T&gt; { AsByte = value }.Raw; }
    public static T ToEnum&lt;T&gt;(short value) where T : IConvertible { return new FastEnumConverter&lt;T&gt; { AsShort = value }.Raw; }
    public static T ToEnum&lt;T&gt;(ushort value) where T : IConvertible { return new FastEnumConverter&lt;T&gt; { AsUShort = value }.Raw; }
    public static T ToEnum&lt;T&gt;(int value) where T : IConvertible { return new FastEnumConverter&lt;T&gt; { AsInt = value }.Raw; }
    public static T ToEnum&lt;T&gt;(uint value) where T : IConvertible { return new FastEnumConverter&lt;T&gt; { AsUInt = value }.Raw; }
    public static T ToEnum&lt;T&gt;(long value) where T : IConvertible { return new FastEnumConverter&lt;T&gt; { AsLong = value }.Raw; }
    public static T ToEnum&lt;T&gt;(ulong value) where T : IConvertible { return new FastEnumConverter&lt;T&gt; { AsULong = value }.Raw; }
}

