今後、仕事でC#を使うのでC#を勉強しているのだが、配列の理解が浅いと思ったので、学んだことを記載していく。配列を宣言する方法は2つある。『(型名) [] 変数名』
のように宣言する。(例)これだと、定義した配列がただ宣言されただけである。
そこで、この配列を使えるようにするためには、配列の数を指定しないといけない。配列の数は
「(配列の変数名) = (配列の数)」
のように指定する。(例)↓↓↓↓↓↓↓ あなたの記事の内容
~~~
ArrayValueName = new int[10];
ArrayValueName2 = new string[3];
~~~
───────
csharp
ArrayValueName = 10;
ArrayValueName2 = 3;

↑↑↑↑↑↑↑ 編集リクエストの内容こうすることで配列の長さを取得したり、配列に値を指定することができたりできる。(A)の方法とは別に、配列の要素数などを明示的に宣言することができる。(例)
数値型で、要素数が5の配列を宣言したい時「(変数の型) (変数名) = new (型名)[] {};」
のようにすることで、これ1行で配列の定義と配列の初期値を宣言できる。特にこだわりがなければ、大体(B)のように定義することが多い。でアクセスしたい要素にアクセスできる。(例)で変更したい要素を変更できる。(例)指定したい配列の番号を指定し、 「= (変更したい値)」のようにするだけ。でで配列の長さを取得できる。配列の中に配列を含んだ配列を多次元配列という。
多次元配列も宣言する方法が2つある。「new (型名) [(多次元配列の要素数), (その要素である配列の要素数)]」
のように定義する(例)配列の要素が2個で、その要素1つにつき、4個の要素を持つ配列を定義したい時(例)配列の要素が3個で、その要素1つにつき、3個の要素を持つ配列を定義したい時中括弧の中に、「,」を記載し、その後の{}で配列を書けばいい。
[]の中に「,」を記載するだけで、その配列が多次元配列であることを表す。※「&lt;(半角)」で囲むとコードとして認識されてしまうので、「＜(大文字)」で書いている。これまで書いたように、基本的に配列は指定した要素数を越えて配列を追加することはできない。
しかし、実際に使われるデータでは配列が増えることはざらにあるので、なんとか追加したい。
そこで役立つのが、List&lt;T&gt;クラス。
このList&lt;T&gt;クラスを使うことで、配列に何個でも要素を追加することができる。
ちなみに、このList&lt;T&gt;クラスをつけた配列をコレクションという。基本的に配列を定義する際は、このList&lt;T&gt;クラスを使って配列を定義することが多い。List&lt;T&gt;クラスを使うには、使いたいクラスファイルでをコードに記載する。配列の宣言と同様に、List&lt;T&gt;クラスの配列を宣言するには2つある。で配列の要素数が0にList&lt;T&gt;型の配列が宣言できる。(例)
int型で、追加可能な配列を作りたい場合、(例)string型のList&lt;T&gt;クラスの4つのstring型の要素が格納された配列を宣言したい時で追加できる。(例) (A)にstring型の要素「"たちつてと"」を加えたい場合、で削除できる。(例) dataの0番目の「"あいうえお"」を削除したい場合、で削除する。全部削除したい場合はのようにClearメソッドを使用する。.Lengthではないので注意。でdataの要素数(5)が取得できる。List&lt;T&gt;クラスは、int、stringなどもともとある型だけでなく、独自に作成したクラスを型としたオブジェクトを持つことができる。例えば以下のようなPokemonクラスがあったとする。このPokemonクラスを型とする配列が作れる。
(例)追加や削除はそのまま配列名を指定して、AddやRemoveを使えばいい。


