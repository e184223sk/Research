※この記事はDiscord Documentation 2.0.1 https://discord.foxbot.me/stable を勉強用に翻訳した記事です。リンク先は翻訳が完了次第、修正いたします。ガイド / はじめに / 初めてのbotDiscord APIを使うため、まずは、ピンポンbot(簡単な受け答えをするbot)を作成しましょう。
このbotは「ping」というコマンドに反応します。
これについては後で詳しく説明して、より多様なコマンドを作成する予定ですが、
今のところはこれが良い出発点となるでしょう。botを作成する前に、まずDiscord Applications Portalからbot用のアカウントを作成する必要があります。
1. Discord Applications Portal にアクセスします。
2. 新しいアプリケーションを作成します。
3. アプリケーションに名前を付けます(これがbotの初期ユーザー名になります)。
4. 左側のSettingsで、Botをクリックします。

5. Add Botをクリックします。

6. ポップアップを確認します。
7. (任意) このボットを公開する場合はPublic Botにチェックを入れます。
botは招待リンクを使うことができません。OAuth2フローで明示的に招待する必要があります。
1. Discord Applications Portalでボットのアプリケーションを開きます。
2. 左側のSettingsで、OAuth2をクリックします。

3. OAuth 2 URL Generatorまでスクロールし、Scopesの中のbotにチェックを入れます。

4. 生成されたURLをブラウザで開きます。
5. サーバーを選択します。
6. Authorizeをクリックします。注
管理者権限を持つサーバーのみがこのリストに表示されます。プロジェクトをまだ作成しておらず、Discord.Netをインストールしていない場合は、ここで行います。詳細については、インストール を参照してください。Discord.Netは.NETのタスク ベースの非同期パターン(TAP)を広範囲に使用します。
ほとんどすべての操作が非同期です。
可能な限り、これらの操作は適切に確立された非同期コンテキストで待機することを強くお勧めします。非同期コンテキストを確立するために、コンソールアプリケーションに非同期なmainメソッドを作成し、
新しい非同期なmainを呼び出すように静的なmainメソッドを書き直します。こうすることで、プログラムが起動したあと、すぐに非同期コンテキストにジャンプします。
これにより、正しく非同期実装ができたかどうか心配することなく、後でDiscordへの接続処理を作成することができます。警告
アプリケーションが非同期コンテキスト内で例外をスローすると、最初の非同期ではないメソッドまで遡ってスローされます。
最初の非同期でないメソッドはプログラムのMainメソッドなので、処理されていない例外はすべてそこにスローされ、アプリケーションがクラッシュします。
Discord.Netを使用すると、イベントハンドラの例外によってプログラムがクラッシュするのを防ぐことができますが、非同期のmainの例外によってアプリケーションがクラッシュすることがあります。Discordクライアントを作成して設定する前に、Discord.Netのログイベントを処理するメソッドを追加します。できるだけ多くのログプロバイダをサポートするために、独自のLogMessageパラメータを持つLogイベントを使用して情報をログに記録します。このイベントの APIドキュメント を参照してください。独自のロギングフレームワークを使用している場合は、ここでそれを呼び出します。
簡単にするために、ここではコンソールにのみロギングします。この概念については、Logging Events/Dataを参照してください。最後に、Discordへの新しい接続を作成します。botを作成しているので、ソケットエンティティとともに DiscordSocketClient を使用します。
違いがわからない場合は、 用語 を参照してください。新しい接続を確立するために、新しい非同期mainに DiscordSocketClient のインスタンスを作成します。
ほとんどの場合、これで問題なく動作します。
必要に応じて、オプションの DiscordSocketConfig を渡すことができます。接続する前に、クライアントのLogイベントを作成したログハンドラに関連付ける必要があります。
Discord.NetのイベントはC#の他のイベントと同様に動作します。次に、 LoginAsync メソッドを使用して、アプリケーションがDiscordにログインするための「トークン」を設定する必要があります。注
developer portalからコピーしているものに注意してください。
トークンは、アプリケーションの「client secret」とは異なります。重要
botのトークンを使用すると、botに完全にアクセスできるようになるので、このトークンを他の人と共有しないでください！
botのソースコードを配布する予定がある場合には、このトークンを外部ソースに保管する必要があるかもしれません。ここで、接続/再接続のロジックを開始する、クライアントの StartAsync メソッドを呼び出します。
このメソッドは、接続ロジックが開始されるとすぐにreturnすることに注意してください。クライアントの状態に依存するメソッドはすべて、イベントハンドラに入ります。
つまり、クライアントの準備が完全に整うまでは、クライアントと直接対話するべきではありません。最後に、アプリケーションの実行時にasync mainメソッドがreturnしないようにします。
無限遅延や、コンソールからの読み込みのようなブロック方法によって待つことができます。以下の行を追加できるようになりました。この状態で、プログラムを起動し、Discordでbotがオンラインになるのを確認してください。TIP
A supplied token was invalid.という警告が出た場合。または、ログインに問題があった場合は、
正しい認証情報を入力したかどうかを再確認し、それがトークンとは異なるクライアントシークレットでないことを確認します。TIP
botの起動時にPlatformNotSupportedExceptionが出る場合は、ターゲットプラットフォームが.NETのデフォルトのWebSocketクライアントをサポートしていません。
この修正方法については、 インストール を参照してください。警告
これはコマンドを作成する適切な方法ではないことに注意してください。
代わりに、 コマンドガイド セクションで説明されているように、ライブラリによって提供されるCommandServiceを使用します。Discordへの接続方法を学習したので、ユーザが送信するメッセージの処理を開始できます。
まず始めに、私たちのbotは、内容が!pingと一致するメッセージを受け取り、「Pong!」という応答を返します。新しいメッセージを受信したいので、関連付けるイベントは MessageReceived です。プログラムで、MessageReceivedイベントのシグネチャに一致するメソッドを追加します。
このメソッドは、Task型を返し、 SocketMessage という1つのパラメータを受け取るメソッド (Func) である必要があります。
また、このメソッドではデータをDiscordに送信するため、非同期(async)としてフラグを立てます。このメソッドでは、ifブロックを追加して、メッセージの内容が!pingと一致するかどうかを判断します。この条件内で、メッセージを送信します。Pong!は、メッセージの送信元のチャンネルに返信されます。
チャンネルを見つけるには、messageパラメータのChannelプロパティを探します。次に、このチャンネルにメッセージを送信します。
Channelオブジェクトは ISocketMessageChannel 型なので、 SendMessageAsync インスタンスのメソッドを呼び出すことができます。
メッセージの内容として、文字列「Pong!」を返信します。これで、次の行が追加されました。これで最初のbotは完成です。
必要に応じて、これに続けて追加することもできますが、複数のコマンドを実行するbotには、以下に示すようなコマンド・フレームワークを使用することを強くお勧めします。NOTE
参照用に、完成したプログラムを表示できます。コマンドサービスの概要 では、コマンドサービス (高度なコマンド使用ができるサービス) を使用できるようにプログラムを設定する方法について説明します。参照用に、この構造の 注釈付きの例 を表示します。重要なのは、ボットの推奨デザインパターンは分離するべきだということです...このページの最終更新日 : 2018/10/1 5:44:33 AM+08:00 (UTC).


