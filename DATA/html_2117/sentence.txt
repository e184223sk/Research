More than 1 year has passed since last update.前回記事、http通信を勉強するで実際に勉強した上でhttpクライアントのプログラムを作成していきます。こちらの方はたくさんの方々が記事を挙げているのですごいざっくり紹介です。
せっかくなので.NET Coreを使っていきます。以下のドキュメントで開始手順が書いているので進めていきましょう。C# および Visual Studio Code の使用を開始する
microsoft公式なので安心です。今回はGUIが面倒だったのでコンソールプログラムで作成します。
作るのはhttpのクライアント側なので以下の公式ドキュメントのサンプルを実行してみましょう。HttpClient クラス
microsoft公式です。
このサンプルでクライアントが送る情報は、GETとHost情報(ドメイン名 or IPアドレス)だけでした。こちらのサンプルはクライアントから非同期スレッド(GetAsyncが非同期スレッドの様子)でHttpResponseMessageを受け取って表示するといったサンプルプログラムになっていますので、HttpResponseMessageクラスについてもしらべてみました。HttpResponseMessage クラス
レスポンスメッセージが詰まっている様子。
コンテンツはstring型のプロパティでゲットできます。
ヘッダー部分は各種特定の型として取得できる様子です。結構な種類があるので全部読むのは時間がかかりそうです。C#のコード(アクセスするアドレスを変更しただけ)


sample

using System;
using System.Threading.Tasks;
using System.Net.Http;

namespace httptest_C_
{
    class Program
    {
        // HttpClient is intended to be instantiated once per application, rather than per-use. See Remarks.
        static readonly HttpClient client = new HttpClient();
        static async Task Main()
        {
            // Call asynchronous network methods in a try/catch block to handle exceptions.
            try
            {
                HttpResponseMessage response = await client.GetAsync("http://192.168.10.254/");
                response.EnsureSuccessStatusCode();
                string responseBody = await response.Content.ReadAsStringAsync();
                // Above three lines can be replaced with new helper method below
                // string responseBody = await client.GetStringAsync(uri);
                Console.WriteLine(responseBody);
            }
            catch (HttpRequestException e)
            {
                Console.WriteLine("\nException Caught!");
                Console.WriteLine("Message :{0} ", e.Message);
            }
        }
    }
}




結果は以下になりました。
最初はリクエストメッセージ(C# -&gt; m5stack)次はレスポンスメッセージ(C# &lt;- m5stack)うーん、ほんとにシンプルで男らしい・・・
m5stack側は上記のhtmlとステータスコード(HTTP/1.1 200 OK),コンテンツタイプ(Content-type:text/html)が来ているはずですが、表示するように作っていないので表示されていません今回はC#で.NET Coreを使ったhttp通信をm5stackとやってみました。使うだけなら非常に楽なのですが、実際に作りこむとなるとHttpResponseMessageのヘッダー部分やステータスコードを判別対象に使わないといけないのでまた勉強が必要そうです。
また、VSCodeで今回は作りましたが、結構コードインテリジェンスが効かない印象を受けました。(Visual Studioが効きすぎなだけかもですが・・・)
ですが、自分のような浅い初心者ではコードインテリジェンスがないと型がわからなかったりこの型で合ってるのか確認するのに時間がかかるのでこれはこれでやりにくかったです。
m5stackはVSCodeでやってるのでやれるのならばいっしょにしたいのですが、何かいい手はないでしょうかねぇ・・・次回はswiftでhttp通信を行ってみたいと思います。
有意義な年末ライフをぜひお楽しみください！


