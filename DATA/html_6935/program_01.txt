
using System;
using System.IO;
using NPOI.SS.UserModel;

namespace Sample_NPOI
{
    class Program
    {
        static void Main( string[] args )
        {
            try {
                //ブック読み込み
                var book = WorkbookFactory.Create( "sample.xlsx" );

                //シート名からシート取得
                var sheet = book.GetSheet( "newSheet" );

                //セルに設定
                WriteCell( sheet, 0, 0, "0-0" );
                WriteCell( sheet, 1, 1, "1-1" );
                WriteCell( sheet, 0, 3, 100 );
                WriteCell( sheet, 0, 4, DateTime.Today );

                //日付表示するために書式変更
                var style = book.CreateCellStyle();
                style.DataFormat = book.CreateDataFormat().GetFormat( "yyyy/mm/dd" );
                WriteStyle( sheet, 0, 4, style );

                //ブックを保存
                using( var fs = new FileStream( "sample2.xlsx", FileMode.Create ) ) {
                    book.Write( fs );
                }
            }
            catch( Exception ex ) {
                Console.WriteLine( ex );
            }
        }

        //セル設定(文字列用)
        public static void WriteCell( ISheet sheet, int columnIndex, int rowIndex, string value )
        {
            var row = sheet.GetRow( rowIndex ) ?? sheet.CreateRow( rowIndex );
            var cell = row.GetCell( columnIndex ) ?? row.CreateCell( columnIndex );

            cell.SetCellValue( value );
        }

        //セル設定(数値用)
        public static void WriteCell( ISheet sheet, int columnIndex, int rowIndex, double value )
        {
            var row = sheet.GetRow( rowIndex ) ?? sheet.CreateRow( rowIndex );
            var cell = row.GetCell( columnIndex ) ?? row.CreateCell( columnIndex );

            cell.SetCellValue( value );
        }

        //セル設定(日付用)
        public static void WriteCell( ISheet sheet, int columnIndex, int rowIndex, DateTime value )
        {
            var row = sheet.GetRow( rowIndex ) ?? sheet.CreateRow( rowIndex );
            var cell = row.GetCell( columnIndex ) ?? row.CreateCell( columnIndex );

            cell.SetCellValue( value );
        }

        //書式変更
        public static void WriteStyle( ISheet sheet, int columnIndex, int rowIndex, ICellStyle style )
        {
            var row = sheet.GetRow( rowIndex ) ?? sheet.CreateRow( rowIndex );
            var cell = row.GetCell( columnIndex ) ?? row.CreateCell( columnIndex );

            cell.CellStyle = style;
        }
    }
}

