// OK
public void Foo(int x, string y)
{
    // 単一ステートメントの場合は{ }がなくてもよい
    if (x &lt; 0) throw new ArgumentException();

    // 2行に分ける場合も同様。ただしインデントは下げる
    if (y == null)
        throw new ArgumentNullException("Exception Message");

    // ネストされている場合は{ }必須
    if (x == 0)
    {
        if (y == "")
        {
            Console.WriteLine("String Empty");
        }
        Console.WriteLine("Int 0");
    }

    // 例外的に、usingはネストを深くしなくてよい
    using (var sr = new StreamReader())
    using (var sw = new StreamWriter())
    {
        // srとswのスコープはこのブロック内
    }
}

// NG(K&amp;R style)
public void Bar(int x, string y) {

    // NGではないが、早期returnに{ }があるのは嫌われがち(issue#381)
    if (x &lt; 0) { throw new ArgumentException(); }

    // NG(インデントを下げていない)
    if (y == null)
    throw new ArgumentNullException("Exception Message");

    // これはFooクラスと異なるコードパスとなる。
    // 以下のように解釈される。
    // =============================
    // if (x == 0)
    // {
    //     if (y == "")
    //     {
    //         Console.WriteLine("String Empty");
    //     }
    // }
    // Console.WriteLine("Int 0");
    // =============================
    // 上記のような勘違いを起こさないように、{ }を必須としている。
    if (x == 0)
        if (y == "")
            Console.WriteLine("String Empty");
        Console.WriteLine("Int 0");
}

