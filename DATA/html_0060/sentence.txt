本記事では Vortice.XInput ライブラリを使ったゲームパッドの入力処理について解説します。素の C# アプリケーションが対象となります。Unity 等のゲーム開発用フレームワーク上で動くプログラムの場合は、フレームワーク独自のやり方が用意されています。それらは本記事の対象ではないという意味です。私自身のゲームパッド入力処理実装経験は今回が初めてです。
個人アプリでの利用経験を元に本記事を書いています。.NET Framework 4.8 のアプリとして実装した経験となります。一般的なやり方から外れている部分があるよといったご指摘等もお待ちしております。Vortice.Windows という DirectX 系 API の .NET 上での利用をサポートしてくれるライブラリの一部です。
同じ役割をしていた SharpDX というライブラリが有名だったようなのですが開発が滞り 2019 年に凍結された模様です。Vortice.Windows はその後継として作られているライブラリです。SharpDX では使っていなかった新しい技術によって作られているみたいです。Vortice.Windows のサイトには Unsafe や SharpGen.Runtime などの最新の技術を使っていると書いてあります。
これらの技術はアンマネージドコードをうまく使うためのものだと思います。（主にメンテナンスの面で）SharpDX よりスマートな実装になっていると想像できますね。凍結されたとはいえ SharpDX をまだ使うという方法もありそうですが、個人アプリ開発目的ですので無茶ができますし、初のゲームパッド入力処理実装ということもありどうせゼロから覚えるので新しい Vortice.XInput の利用を試みることにしました。使った感想は「めちゃめちゃ簡単だった」です。以下のようなことができます。本記事では XInput.GetState と XInput.GetKeystroke について解説します。使ったのがこの２つだからです。NuGet で Vortice.XInput をプロジェクトに追加してください。ライブラリの名前空間は「Vortice.XInput」です。利用するプログラムには以下の一文を入れましょう。機能は Vortice.XInput.XInput クラスに集約されているようです。
static クラスですのでインスタンス化の必要もなく、直接メソッドを呼び出して使います。
機能を使うための事前処理は何もなく、いきなり呼び出して大丈夫です。XInput の全てのメソッドは userIndex を受け取ります。userIndex はゲームパッドのインデックスで、0 ～ 3 の値を指定します。私の環境では作り始めの際はとりあえず 0 を指定して動いたのでしばらくはそれで開発を進め、のちに XInput.GetState を使った userIndex の自動認識＆選択UIの実装を行いました。userIndex の自動認識については XInput.GetState にて解説します。ゲームパッドの入力を非同期で取得して使うために System.Timers.Timer を使います。
以下は 10 ミリ秒置きに処理する例です。共通事項は以上になります。ここからが本題となる具体的な機能の話です。XInput.GetState で現在のゲームパッドの状態を取得できます。利用例は以下の通りです。XInput.GetState の第一引数は userIndex です。以上の例は「0 のゲームパッドが有効かつ A ボタンを押していたら」という条件を実現する例です。XInput.GetState メソッドは呼び出した時点で指定した userIndex のゲームパッドが有効なら true、無効なら false を返すという特性を持っており、有効ならその時点のボタンやスティックの状態を取得できます。有効状態を返すという特性を利用して、ゲームパッドの自動認識に使えます。例えば以下のようなコードです。GamepadDetector.GamepadIndex に UI で選択した値を入れることもできます。XInput.GetState はその時点の正確な状態を取得できます。
アクション／シューティングゲームの自機操作のような連続的な処理に向きます。
一方でロールプレイングゲームでの選択肢の変更のような断続的な処理には向きません。
その場合に使えるのが次に紹介する XInput.GetKeystroke です。XInput.GetKeystroke でゲームパッドの「ボタンを押した」「ボタンを離した」というキーストロークイベントを取得できます。利用例は以下の通りです。「ボタンを押した」を表す KeystrokeFlags.KeyDown と対になる「ボタンを離した」を表す KeystrokeFlags.KeyUp もあります。また、ボタンを押しっぱなしにした場合を表す KeystrokeFlags.Repeat というものもあります。
KeystrokeFlags.Repeat は最初の KeystrokeFlags.KeyDown から少し間を開けてから始まり、そこから断続的な入力として受け取れます。
メモ帳とかでキーボードのボタンを押しっぱなしたときの入力と同じ感じです。利用例は以下の通りです。また、スティック操作も上下左右斜めの８方向のキー操作として受け取れるというのも特徴的です。XInput.GetState と XInput.GetKeystroke を組み合わせてボタン同時押しの判断も簡単に作れました。XInput.GetKeystroke のイベントをトリガーに XInput.GetState で同時押しを判断するといった感じです。例は以下の通りです。以上、Vortice.XInput を使ったゲームパッドの入力処理の方法について解説しました。Vortice.XInput でゲームパッドを扱うプログラムがめちゃめちゃ簡単に作れます。


