
MethodBuilder schedule = typeBuilder.DefineMethod("Schedule", Attributes, typeof(JobHandle), Type.EmptyTypes);
{
    ILGenerator il = schedule.GetILGenerator();
    LocalBuilder local = il.DeclareLocal(typeof(JobHandle));
    il.Emit(Ldarg_0); // thisポインタをロード
    il.Emit(Ldobj, typeBuilder); // thisポインタの指す先にある実体をスタック上にロード IJobParallelForExtensions.Schedule&lt;T&gt;(T, int, int, JobHandle)の第一引数
    il.Emit(Ldc_I4, COUNT); // 第二引数
    il.Emit(Ldc_I4, 1024); // 第三引数
    il.Emit(Ldloca_S, 0); // ローカル変数のアドレスをスタック上にロード
    il.Emit(Initobj, typeof(JobHandle)); // ポインタの指す先にJobHandle型の構造体をnewする。構造体なので当然default(JobHandle)
    il.Emit(Ldloc_0); // ローカル変数の値をスタック上にロード
    il.EmitCall(Call, typeof(IJobParallelForExtensions).GetMethod(nameof(IJobParallelForExtensions.Schedule)).MakeGenericMethod(typeBuilder), Type.EmptyTypes);　// 関数呼び出し
    il.Emit(Ret); // スタックにはJobHandleのみが残っているのでこれを返り値とする
}

