
public interface INumOperator&lt;T&gt; : IEqualityComparer&lt;T&gt;, IComparer&lt;T&gt; where T : struct
{
        T MinValue { get; }
        T MaxValue { get; }
    T Add(T x, T y);
    T Subtract(T x, T y);
    T Multiply(T x, T y);
    T Divide(T x, T y);
    T Modulo(T x, T y);
    bool GreaterThan(T x, T y);
    bool GreaterThanOrEqual(T x, T y);
    bool LessThan(T x, T y);
    bool LessThanOrEqual(T x, T y);
}
public readonly struct IntOperator : INumOperator&lt;int&gt;
{
    public int MinValue =&gt; int.MinValue;
    public int MaxValue =&gt; int.MaxValue;
    public int Add(int x, int y) =&gt; x + y;
    public int Subtract(int x, int y) =&gt; x - y;
    public int Multiply(int x, int y) =&gt; x * y;
    public int Divide(int x, int y) =&gt; x / y;
    public int Modulo(int x, int y) =&gt; x % y;
    public bool GreaterThan(int x, int y) =&gt; x &gt; y;
    public bool GreaterThanOrEqual(int x, int y) =&gt; x &gt;= y;
    public bool LessThan(int x, int y) =&gt; x &lt; y;
    public bool LessThanOrEqual(int x, int y) =&gt; x &lt;= y;
    public int Compare(int x, int y) =&gt; x.CompareTo(y);
    public bool Equals(int x, int y) =&gt; x == y;
    public int GetHashCode(int obj) =&gt; obj.GetHashCode();
}
// LongOperator, UIntOperator, ULongOperator なども同様に定義

