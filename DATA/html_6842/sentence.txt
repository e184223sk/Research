More than 3 years have passed since last update..NET Core 1.1をCentOS上にインストールして、Visual Studio 2015で作ったASP.NET Core Webアプリケーションを配置して実行します。主に、インフラにお金をかけない小規模なシステム開発で、Linux + Javaでやっているけど、本当はC#が使いたいような人を想定しています。よって、本記事では以下のあたりがポイントになっています。CentOS上の実行環境構築手順について記述します。
なお、CentOS以外の手順については.NET Core installation guideを参照してください。後で作成するWebアプリケーションに対して、接続するためにFirewallを設定しておきます。Visual Studioで「ASP.NET Core Web Application (.NET Core)」を作成します。Visual Studioで作成されるひな形は1.0用の構成であり、CentOSには1.1をインストールしているので、プロジェクトを1.1用に更新します。まずはNuGetですべてのパッケージを更新します。次に、project.jsonの次の箇所を更新します。また、次の箇所も変更します。project.json全体は以下のような内容になります。デフォルトではlocalhostからのアクセスのみ許可されるので、外部からも接続できるようにUseUrls()の記述を追加します。なお、この時点でVisual Studio上でもデバッグ動作できることを確認しておきます。デバッグ動作の確認ができない場合、なにか作業が不足しています。Visual Studioの[ビルド]メニューからアプリケーションの発行を実施し、デプロイ用のファイルを作成します。発行方法は「ファイルシステム」で、ターゲットの場所はデフォルトだと「.\bin\Release\PublishOutput」になると思いますが、そのフォルダに生成される内容がCentOS上へコピーするファイルの一覧となります。なお、発行と同じことをコマンドラインからMSBuildを使用して行う場合、以下のコマンドで同様のことが行えますので、CIに組み込む場合等には参考にしてください。CentOS上の「/opt/webapp」にファイルをコピーしたとして、そこに移動してdotnetコマンドを実行して動作確認を行います。この状態で、外部からWebブラウザで接続して動作確認を行います。問題がなければ画面が表示され、コンソールにもログが表示されます。動作確認ができたら、Webアプリケーションのサービス化を行います。まず、起動用のスクリプトとして以下のような/opt/webapp.shを作成します。また、このファイルに対して実行権限を設定します。次に、サービスの起動スクリプトとして以下のような/etc/systemd/system/webapp.serviceを作成します。以下のコマンドで正しく設定ができていることを確認します。サービスの開始を行います。これで、OSを再起動しても、Webアプリケーションが自動起動してきます。なお、これはあくまで最低限の設定なので、実際にプロダクションに導入する際には、もう少しスクリプトの内容を検討してください。…っということで、これで実行環境がLinuxという理由でJava + Tomcat + Eclipseみたいな開発していたｴｯｽｱｲﾔｰの中の人達なんかも、.NET Core + Visual Studioを選択肢とすることが可能になったわけです٩(๑&gt;◡&lt;๑)۶また、開発に使用されるデータベースも、将来的にはSQL Server on Linux(のExpress版？)なんかも対象になってくるでしょうし、そうなればSQL Server Management Studioを使ったり、C# + SQL Serverの強力さを実行環境問わずに得られるようになるわけです。っということで、みんなもこれからはWebアプリをASP.NET Coreで作るのじゃ(｀・ω・´)


