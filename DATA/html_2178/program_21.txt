
// GraphAsset.cs
using UnityEngine;
using UnityEditor;
using UnityEditor.Callbacks;  // OnOpenAssetアトリビュートのために追加
using UnityEngine.UIElements;
using System.Collections.Generic;

public class GraphEditor : EditorWindow
{
    [MenuItem("Window/GraphEditor")]
    public static void ShowWindow()
    {
        GraphEditor graphEditor = CreateInstance&lt;GraphEditor&gt;();
        graphEditor.Show();
        graphEditor.titleContent = new GUIContent("Graph Editor");

        if(Selection.activeObject is GraphAsset graphAsset)
        {
            graphEditor.Initialize(graphAsset);
        }
    }

    [OnOpenAsset()]  // Unityで何らかのアセットを開いたときに呼ばれるコールバック
    static bool OnOpenAsset(int instanceId, int line)
    {
        if(EditorUtility.InstanceIDToObject(instanceId) is GraphAsset)  // 開いたアセットがGraphAssetかどうか
        {
            ShowWindow();
            return true;
        }

        return false;
    }

    GraphAsset m_GraphAsset;  // メンバ変数として持っておく
    GraphEditorElement m_GraphEditorElement;

    public void OnEnable()
    {
        // ShowWindow()を通らないような時（スクリプトのコンパイル後など）
        // のために初期化への導線を付ける
        if (m_GraphAsset != null)
        {
            // 初期化はInitializeに任せる
            Initialize(m_GraphAsset);
        }
    }

    // 初期化
    public void Initialize(GraphAsset graphAsset)
    {
        m_GraphAsset = graphAsset;

        // 以下はもともとOnEnable() で行っていた処理
        // OnEnable() はCreateInstance&lt;GraphEditor&gt;() の際に呼ばれるので、まだgraphAssetが渡されていない
        // 初期化でもgraphAssetを使うことになるのでここに移す
        VisualElement root = this.rootVisualElement;

        m_GraphEditorElement = new GraphEditorElement();
        root.Add(m_GraphEditorElement);
    }
}


