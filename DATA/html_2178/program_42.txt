
// EdgeElementクラス

    // 2020/01/09 追記：バウンディングボックスの取得を別関数に分ける
    //                 また、幅が狭くなりすぎないように少し大きめに取ることにする
    //                 その大きさをDrawEdgeのタイミングで適用することにする
    private Rect GetBoundingBox()
    {
        Vector2 start = From.GetStartPosition();
        Vector2 end = To.GetEndPosition();

        Vector2 rectPos = new Vector2(Mathf.Min(start.x, end.x) - 12f, Mathf.Min(start.y, end.y) - 12f);
        Vector2 rectSize = new Vector2(Mathf.Abs(start.x - end.x) + 24f, Mathf.Abs(start.y - end.y) + 24f);
        Rect bound = new Rect(rectPos, rectSize);

        return bound;
    }

    // 2020/01/09 追記
    private void UpdateLayout()
    {
        Rect bound = GetBoundingBox();

        // レイアウトをバウンディングボックスに合わせて調整
        style.left = bound.x;
        style.top = bound.y;
        style.right = float.NaN;
        style.bottom = float.NaN;
        style.width = bound.width;
        style.height = bound.height;
    }

    // 2020/01/09 追記
    public void DrawEdge()
    {
        if (From != null &amp;&amp; To != null)
        {
            UpdateLayout();  // 見た目とずれることがないよう、ここでLayoutを修正する

            DrawEdge(/* ... 省略 */);
        }
        else
            /* ... 省略 */
    }
    // 2020/01/09 追記ここまで

    public override bool ContainsPoint(Vector2 localPoint)
    {
        if (From == null || To == null)
            return false;

        // 2020/01/09 追記：EdgeElementのレイアウトに大きさを持たせたことにより
        //                 base.ContainsPoint()がバウンディングボックスを見る処理として利用できるようになった

        /*
        Vector2 start = From.GetStartPosition();
        Vector2 end = To.GetEndPosition();

        // ノードを覆うRectを作成
        Vector2 rectPos = new Vector2(Mathf.Min(start.x, end.x), Mathf.Min(start.y, end.y));
        Vector2 rectSize = new Vector2(Mathf.Abs(start.x - end.x), Mathf.Abs(start.y - end.y));
        Rect bound = new Rect(rectPos, rectSize);

        if (!bound.Contains(localPoint))
        {
            return false;
        }
        */
        //  ↓↓ 変更
        if (!base.ContainsPoint(localPoint))
        {
            return false;
        }

        return true;
    }

