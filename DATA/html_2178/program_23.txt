
// GraphEditorElement.cs
using UnityEngine;
using UnityEngine.UIElements;
using System.Collections.Generic;

public class GraphEditorElement: VisualElement
{
    GraphAsset m_GraphAsset;  // 渡されたアセットを保存
    List&lt;NodeElement&gt; m_Nodes;  // 作ったノードを入れておく。順序が重要

    public GraphEditorElement(GraphAsset graphAsset)
    {
        m_GraphAsset = graphAsset;

        style.flexGrow = 1;
        style.overflow = Overflow.Hidden;

        this.AddManipulator(new ContextualMenuManipulator(OnContextMenuPopulate));

        m_Nodes = new List&lt;NodeElement&gt;();

        // 順番にノードを生成。この作る際の順番がSerializableEdgeが持つNodeのIDとなる
        foreach(var node in graphAsset.nodes)
        {
            CreateNodeElement(node);
        }
    }

    void CreateNodeElement(SerializableNode node)
    {
        var nodeElement = new NodeElement(node);

        Add(nodeElement);  // GraphEditorElementの子として追加
        m_Nodes.Add(nodeElement);  // 順番を保持するためのリストに追加
    }

/* ... 省略 */

    void AddNodeMenuAction(DropdownMenuAction menuAction)
    {
        Vector2 mousePosition = menuAction.eventInfo.localMousePosition;

        CreateNodeElement(new SerializableNode() { position = mousePosition });  // 追加生成時には仮で新しく作る
    }
}

