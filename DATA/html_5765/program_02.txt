

namespace UniDAO
{
    // Scripts/Main/IRead.cs
    // インターフェイス：読み込み
    public interface IRead&lt;T&gt;
    {
        T Read();
    }


    // Scripts/Main/Factory/DaoFactory.cs
    // IReadの作成
    public class DaoFactory
    {
        private readonly string basePath;
        private readonly string fileName;


        private DaoFactory( string fileName )
        {
            this.basePath = Application.persistentDataPath + "/DAO/";
            this.fileName = fileName;
        }


        public static IRead&lt;T&gt; CreateReader&lt;T&gt;( string fileName )
        {
            return new DaoFactory( fileName ).CreateReader&lt;T&gt;();
        }


        private IRead&lt;T&gt; CreateReader&lt;T&gt;( string fileName )
        {
            var textReader = new TextReader( basePath, fileName );
            return new DeserializeReader&lt;T&gt;( textReader );
        }
    }


    // Scripts/Main/Read/TextReader.cs
    // テキストの読み込み
    public class TextReader : IRead&lt;string&gt;
    {
        private readonly string basePath;
        private readonly string fileName;


        public TextReader( string basePath, string fileName )
        {
            this.basePath = basePath;
            this.fileName = fileName;
        }


        public string Read()
        {
            string path = basePath + fileName;

            if( !Directory.Exists( basePath ) || !File.Exists( path ) )
                return null;

            return File.ReadAllText( path );
        }
    }


    // Scripts/Main/Read/DeserializeReader.cs
    // Jsonを指定されたクラスとして読み込み
    public class DeserializeReader&lt;T&gt; : IRead&lt;T&gt;
    {
        private readonly IRead&lt;string&gt; stringReader;


        public DeserializeReader( IRead&lt;string&gt; stringReader )
        {
            this.stringReader = stringReader;
        }


        public T Read()
        {
            string text = stringReader.Read();

            if( string.IsNullOrEmpty( text ) )
                return default(T);

            return JsonUtility.FromJson&lt;T&gt;( text );
        }
    }


    // Scripts/Main/Example/Example.cs
    // 使用例
    public class Example : MonoBehaviour
    {
        // データ保存用クラス
        [Serializable]
        private class TestData
        {
            public string testString;
            public int    testInt;


            public override string ToString()
            {
                return   "Test Data :: "
                       + "Test String : " + testString + ", "
                       + "Test Int : " + testInt; 
            }
        }


        private void Start()
        {
            // Data Access Objectの取得
            var testDataDAO = DaoFactory.Create&lt;TestData&gt;( "fileName" );

            var testData = new TestData();
            {
                testData.testString = "test";
                testData.testInt = 99;
            }


            // 保存
            testDataDAO.Save( testData );

            // 読み込み
            Debug.Log( testDataDAO.Read().ToString() );

            // 存在確認
            Debug.Log( testDataDAO.Exists() );

            // 削除
            testDataDAO.Delete();
            Debug.Log( testDataDAO.Exists() );
        }
    }
}



