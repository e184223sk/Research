using System;
using Android.App;
using Android.Media;
using Android.Content;
using Android.Runtime;
using Android.Views;
using Android.Widget;
using Android.OS;

namespace TestProgram
{
    [Activity(Label = "TestProgram", MainLauncher = true, Icon = "@drawable/icon")]
    public class MainActivity : Activity
    {
        private const int c_samplesPerSecond = 8000; // 11025, 22050, 44100, ...

        private short[] _buffer = null;
        private AudioRecord _audioRecord = null;

        protected override void OnCreate(Bundle bundle)
        {
            base.OnCreate(bundle);
            SetContentView(Resource.Layout.Main);

            AudioBuffer.Instance.Frames = AudioRecord.GetMinBufferSize(c_samplesPerSecond, ChannelIn.Mono, Encoding.Pcm16bit);
            _buffer = new short[AudioBuffer.Instance.Frames];
            _audioRecord = new AudioRecord(AudioSource.Mic, c_samplesPerSecond, ChannelIn.Mono, Encoding.Pcm16bit, _buffer.Length * 2);
            _audioRecord.SetRecordPositionUpdateListener(new OnRecordPositionUpdateListener());
            _audioRecord.SetPositionNotificationPeriod(AudioBuffer.Instance.Frames);
            //                    _audioRecord.SetNotificationMarkerPosition(AudioBuffer.Instance.Frames); 用途によってはこちら
            _audioRecord.StartRecording();
            AudioBuffer.Instance.Enqueue(_audioRecord); // 最初に空読みさせないと、リスナーのイベントが発生しないらしい
        }

        public class OnRecordPositionUpdateListener : Java.Lang.Object, AudioRecord.IOnRecordPositionUpdateListener
        {
            public void OnMarkerReached(AudioRecord recorder)
            {
                AudioBuffer.Instance.Enqueue(recorder);
            }

            public void OnPeriodicNotification(AudioRecord recorder)
            {
                AudioBuffer.Instance.Enqueue(recorder);
            }
        }

        public class AudioBuffer
        {
            public static AudioBuffer Instance = new AudioBuffer();
            private System.Collections.Generic.Queue&lt;short[]&gt; Buffer = new System.Collections.Generic.Queue&lt;short[]&gt;();
            public int Frames { get; set; }
            public int Count { get { return this.Buffer.Count; } }

            public void Enqueue(AudioRecord ar)
            {
                var buff = new short[this.Frames];
                ar.Read(buff, 0, buff.Length);
                this.Buffer.Enqueue(buff);
            }

            public short[] Dequeue()
            {
                return (this.Buffer.Count == 0) ? null : this.Buffer.Dequeue();
            }
        }
    }
}

