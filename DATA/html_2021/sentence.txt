タイトルもうちょっとどうにかならんかったか・・・orz下記記事の動作確認まで行う（CentOSは不要）Powershellでdocker -vする
Dockerが正しくインストールされていれば、それらしき文字列が表示されるDocker Hub の Description に沿って進む2019-latestを指定するパスワードには要件がある
8文字以下のパスワードを設定すると、コンテナが`RUNNING`状態にならない
Microsoft SQL Server の強力なパスワードの要件Powershellでdocker psを実行すると、sql1という名前のコンテナが生成されていることがわかる同様に、Docker Desktop の Container/Apps をみれば、PORT: 11433でRUNNING状態であることがわかる参考：DockerでSQL Serverを建ててsqlcmd, SSMS, JDBCでアクセスする SSMSでDockerのSQL Serverへ接続するDockerコンテナ（localhost, PORT 11433）にアクセスするMyDockerDBデータベースを新規作成し、さらにBlogTbテーブルを追加した
Idは主キーかつIDENTITYを指定している適当に作業用ディレクトリを作成し、Powershellでコマンドを打っていく
このプロジェクトからDBを操作するVisual Studioのパッケージマネージャー コンソールからGet-Helpを打ち
EFユニコーンが表示されればOK先にSSMSで作っておいたBlogTbをプロジェクトに移植する
移植という言葉は適切ではないかもしれない
いわゆるデータファーストで、さっきつくったMyDockerDBをC#のモデルとして取り込むEF Core ではないけれど参考↓Visual Stduio のツール(T)&gt;データベースへの接続(D)サーバーエクスプローラーに追加されたDBを右クリックしてプロパティの中の"接続文字列"をメモしておくMyDockerDBデータベースからモデルとコンテキストを自動生成する接続文字列がまる見えだと怒られつつも、プロジェクト内にMyDockerDBContext.cs（コンテキスト）とBlogTb.cs（POCOモデル）が生成されたScaffold-DbContextのオプションを明記すれば、ModelやContextの生成先などを細かく指定できる接続文字列の保護に関するお作法↓↓CRUD用に4つメソッドを用意して、SSMSでDBの様子を都度確認する連続的にレコードを追加して、読み取って、更新して、連続的に削除して・・・をしている。当たり前のように、このままだと
空のテーブルになってもなおDELETEをするとエラーになる普段 Docker は使わないので、言葉遣いや操作に誤りがあれば、ご指摘いただけると幸いです


