
[TestClass]
public class TypeNameTest
{
    [TestMethod]
    public void TypeNameWithoutGenericTypes()
    {
        var tp = new TypeName("Int32");
        {
            var g = new CSharpSourceCodeGenerator();
            Assert.AreEqual("Int32", g.Write(tp));
        }
        {
            var g = new VisualBasicSourceCodeGenerator();
            Assert.AreEqual("Int32", g.Write(tp));
        }
    }
    [TestMethod]
    public void TypeNameWithGenericTypes()
    {
        var tp = new TypeName("Func");
        tp.GenericTypes.Add(new TypeName("String"));
        tp.GenericTypes.Add(new TypeName("Int32"));
        {
            var g = new CSharpSourceCodeGenerator();
            Assert.AreEqual("Func&lt;String, Int32&gt;", g.Write(tp));
        }
        {
            var g = new VisualBasicSourceCodeGenerator();
            Assert.AreEqual("Func(Of String, Int32)", g.Write(tp));
        }
    }
    [TestMethod]
    public void TypeNameWithNestedGenericTypes()
    {
        var tp = new TypeName("Func");
        tp.GenericTypes.Add(new TypeName("String"));
        var tp1 = new TypeName("Action");
        tp1.GenericTypes.Add(new TypeName("String"));
        tp1.GenericTypes.Add(new TypeName("Int32"));
        tp.GenericTypes.Add(tp1);
        {
            var g = new CSharpSourceCodeGenerator();
            Assert.AreEqual("Func&lt;String, Action&lt;String, Int32&gt;&gt;", g.Write(tp));
        }
        {
            var g = new VisualBasicSourceCodeGenerator();
            Assert.AreEqual("Func(Of String, Action(Of String, Int32))", g.Write(tp));
        }
    }
}

