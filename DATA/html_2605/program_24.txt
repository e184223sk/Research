
protected override void SetResultSet(AllDataTypeTableSelectAll.ResultSet resultSet, IDataReader reader)
{
    var r = resultSet;
    Int32 index = -1;
    try
    {
        index += 1; r.PrimaryKeyColumn = reader.GetInt64(index);
        index += 1; r.TimestampColumn = reader[index] as Byte[];
        index += 1; if (reader[index] != DBNull.Value) r.BigIntColumn = reader.GetInt64(index);
        index += 1; if (reader[index] != DBNull.Value) r.BinaryColumn = reader[index] as Byte[];
        index += 1; if (reader[index] != DBNull.Value) r.ImageColumn = reader[index] as Byte[];
        index += 1; if (reader[index] != DBNull.Value) r.VarBinaryColumn = reader[index] as Byte[];
        index += 1; if (reader[index] != DBNull.Value) r.BitColumn = reader.GetBoolean(index);
        index += 1; if (reader[index] != DBNull.Value) r.CharColumn = reader[index] as String;
        index += 1; if (reader[index] != DBNull.Value) r.NCharColumn = reader[index] as String;
        index += 1; if (reader[index] != DBNull.Value) r.NTextColumn = reader[index] as String;
        index += 1; if (reader[index] != DBNull.Value) r.NVarCharColumn = reader[index] as String;
        index += 1; if (reader[index] != DBNull.Value) r.TextColumn = reader[index] as String;
        index += 1; if (reader[index] != DBNull.Value) r.VarCharColumn = reader[index] as String;
        index += 1; if (reader[index] != DBNull.Value) r.XmlColumn = reader[index] as String;
        index += 1; if (reader[index] != DBNull.Value) r.DateTimeColumn = reader.GetDateTime(index);
        index += 1; if (reader[index] != DBNull.Value) r.SmallDateTimeColumn = reader.GetDateTime(index);
        index += 1; if (reader[index] != DBNull.Value) r.DateColumn = reader.GetDateTime(index);
        index += 1; if (reader[index] != DBNull.Value) r.TimeColumn = (TimeSpan)reader[index];
        index += 1; if (reader[index] != DBNull.Value) r.DateTime2Column = reader.GetDateTime(index);
        index += 1; if (reader[index] != DBNull.Value) r.DecimalColumn = reader.GetDecimal(index);
        index += 1; if (reader[index] != DBNull.Value) r.MoneyColumn = reader.GetDecimal(index);
        index += 1; if (reader[index] != DBNull.Value) r.SmallMoneyColumn = reader.GetDecimal(index);
        index += 1; if (reader[index] != DBNull.Value) r.FloatColumn = reader.GetDouble(index);
        index += 1; if (reader[index] != DBNull.Value) r.IntColumn = reader.GetInt32(index);
        index += 1; if (reader[index] != DBNull.Value) r.RealColumn = reader.GetFloat(index);
        index += 1; if (reader[index] != DBNull.Value) r.UniqueIdentifierColumn = reader.GetGuid(index);
        index += 1; if (reader[index] != DBNull.Value) r.SmallIntColumn = reader.GetInt16(index);
        index += 1; if (reader[index] != DBNull.Value) r.TinyIntColumn = reader.GetByte(index);
        index += 1; if (reader[index] != DBNull.Value) r.DateTimeOffsetColumn = (DateTimeOffset)reader[index];
        index += 1; if (reader[index] != DBNull.Value) r.SqlVariantColumn = reader[index] as Object;
        index += 1; if (reader[index] != DBNull.Value) r.GeometryColumn = (global::Microsoft.SqlServer.Types.SqlGeometry)reader[index];
        index += 1; if (reader[index] != DBNull.Value) r.GeographyColumn = (global::Microsoft.SqlServer.Types.SqlGeography)reader[index];
        index += 1; if (reader[index] != DBNull.Value) r.HierarchyIDColumn = (global::Microsoft.SqlServer.Types.SqlHierarchyId)reader[index];
        index += 1; if (reader[index] != DBNull.Value) r.EnumColumn = StoredProcedure.ToEnum&lt;MyEnum&gt;(reader[index] as String) ?? r.EnumColumn;
        index += 1; r.NotNullBigIntColumn = reader.GetInt64(index);
        index += 1; r.NotNullBinaryColumn = reader[index] as Byte[];
        index += 1; r.NotNullImageColumn = reader[index] as Byte[];
        index += 1; r.NotNullVarBinaryColumn = reader[index] as Byte[];
        index += 1; r.NotNullBitColumn = reader.GetBoolean(index);
        index += 1; r.NotNullCharColumn = reader[index] as String;
        index += 1; r.NotNullNCharColumn = reader[index] as String;
        index += 1; r.NotNullNTextColumn = reader[index] as String;
        index += 1; r.NotNullNVarCharColumn = reader[index] as String;
        index += 1; r.NotNullTextColumn = reader[index] as String;
        index += 1; r.NotNullVarCharColumn = reader[index] as String;
        index += 1; r.NotNullXmlColumn = reader[index] as String;
        index += 1; r.NotNullDateTimeColumn = reader.GetDateTime(index);
        index += 1; r.NotNullSmallDateTimeColumn = reader.GetDateTime(index);
        index += 1; r.NotNullDateColumn = reader.GetDateTime(index);
        index += 1; r.NotNullTimeColumn = (TimeSpan)reader[index];
        index += 1; r.NotNullDateTime2Column = reader.GetDateTime(index);
        index += 1; r.NotNullDecimalColumn = reader.GetDecimal(index);
        index += 1; r.NotNullMoneyColumn = reader.GetDecimal(index);
        index += 1; r.NotNullSmallMoneyColumn = reader.GetDecimal(index);
        index += 1; r.NotNullFloatColumn = reader.GetDouble(index);
        index += 1; r.NotNullIntColumn = reader.GetInt32(index);
        index += 1; r.NotNullRealColumn = reader.GetFloat(index);
        index += 1; r.NotNullUniqueIdentifierColumn = reader.GetGuid(index);
        index += 1; r.NotNullSmallIntColumn = reader.GetInt16(index);
        index += 1; r.NotNullTinyIntColumn = reader.GetByte(index);
        index += 1; r.NotNullDateTimeOffsetColumn = (DateTimeOffset)reader[index];
        index += 1; r.NotNullSqlVariantColumn = reader[index] as Object;
        index += 1; r.NotNullGeometryColumn = (global::Microsoft.SqlServer.Types.SqlGeometry)reader[index];
        index += 1; r.NotNullGeographyColumn = (global::Microsoft.SqlServer.Types.SqlGeography)reader[index];
        index += 1; r.NotNullHierarchyIDColumn = (global::Microsoft.SqlServer.Types.SqlHierarchyId)reader[index];
        index += 1; r.NotNullEnumColumn = StoredProcedure.ToEnum&lt;MyEnum&gt;(reader[index] as String) ?? r.NotNullEnumColumn;
    }
    catch (InvalidCastException ex)
    {
        throw new StoredProcedureSchemaMismatchedException(this, index, ex);
    }
}


