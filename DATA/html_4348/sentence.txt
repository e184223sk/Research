BenchmarkDotNetの紹介と使い方を掲載する。BenchmarkDotNetはメソッドのパフォーマンスを簡単に計測できるライブラリです。
統計的な情報をレポートしてくれるため、関数のパフォーマンスを調査する業務で役立ちそう。BenchmarkDotNetは、メソッドをベンチマークに変換し、そのパフォーマンスを追跡し、
再現性のある測定実験を共有するのに役立ちます。上記はGitHubの記載内容の機械翻訳サポート対象は下記。.NET系なら大体使えそう。
本記事ではC#で実装する。Projects: classic and modern with PackageReferences
Runtimes: Full .NET Framework (4.6+), .NET Core (2.0+), Mono, CoreRT
OS: Windows, Linux, MacOS
Languages: C#, F#, VBエクスポート機能も充実している。下記ドキュメントのOverViewに従って、パフォーマンス計測を行う。
BenchmarkDotNetの公式ドキュメントVisual Studioを立ち上げ、「コンソールアプリケーション」を選択する。
下記のNuGetパッケージを追加する。
NuGetリンク
stringとStringBuilderの文字列結合の処理時間を比較する。
期待結果は「StringBuilderの方がパフォーマンスが優れる」こと。
※下記サイトで既に検証済み
文字列処理を高速に行うStringBuilderがパフォーマンスが優れる理由
下記の違いにより、扱う文字の数が増えるとStringBuilderの方がパフォーマンスに優れることが多い。
・string型は編集不可なため、文字列操作の度に新たなインスタンスを作る。
・StringBuilderは編集可能であるため、文字列操作で新たなインスタンスを作らない。
stringとStringBuilderの違い
計測対象のメソッド含むクラスを定義する。
対象メソッドには[Benchmark]属性を指定する。これで準備完了！！実行する前に一点だけ注意事項。
[リリースビルド]で実行すること。
[デバックビルド]の場合は、下記のように実行時エラーになる。
ちなみに、このままの状態で実行すると私の環境で10分以上掛かった。
ベンチマーク計測に正確さが必要ない場合、[ShortRunJob]属性をつけて下さい(後述の項 計測時間の短縮をする方法を参照)。下記の結果がコンソールに表示される。
・実行環境
・統計情報の表(関数名、平均値、エラー、標準偏差）
・統計情報のラベルの説明予想通りStringBuilderの方がパフォーマンスが優れる。
平均値で比較すると、約8721倍StringBuilderが速い。
標準偏差を見ても、stringに比べると計測結果のバラツキが小さいことが分かる。余談
コンソール出力内容はログに記録されている。
ソリューションのRelease直下にBenchmarkDotNet.Artifactsフォルダ内部に下記のログファイルが存在する。
「ソリューション名.計測対象クラス名-(日時:YYYYYMMDDD-HHMMS).log」サマリーは下記の詳細結果のうち、属性でどれを出すかを指定する。
デフォルトだと、平均値、エラー、標準偏差を表示する。
試しに最小値、最大値を追加する。最小値、最大値の項目が増えた。関数のパフォーマンスを改善する場面などでは、正確性よりも試行回数が重視されると思う。
何も制限なしで使うと、文字列の結合の評価だけで約10分かかった。
とても待ってられない。
下記[ShortRunJob]属性指定することで、関数の試行回数(N=3)で固定されて計測時間を短縮できる。下記[MemoryDiagnoser]属性指定することで、メモリ使用量を計測できる。下記表のAllocatedがメモリ使用量。出力形式を属性指定することでエクスポートが可能。形式の指定は下記のリンクを参考に。
エクスポート機能(リンク)も充実している。HTMLでエクスポートした例は下記。コンソールに出力先が表示される。HTMLファイルを開くと、こんな感じに出力される。BenchmarkDotNetの公式ドキュメント
How to benchmark C# code using BenchmarkDotNet
@neueccさんが書いたベンチマークの測り方
文字列処理を高速に行う
stringとStringBuilderの違い


