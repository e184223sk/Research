Qiita Advent Calendar 初参加です。よろしくお願いします。
最近学習していて面白いな、と感じたオブジェクトの複製あれこれについてまとめました。オブジェクトを複製する場合 [代入・コピーコンストラクタ・MemberwiseCloneメソッド・シリアライズ...etc] など様々な方法を選ぶことができます
コピーするオブジェクトが値型か参照型かによって、コピー元（先）の変更がコピー先（元）に適用されるかどうかが異なります　わたしはこの違いで少し躓きました……😊シャローコピー：簡易コピー
コピー元（先）を変更すると、コピー先（元）に変更が適用される
・参照型は、参照先のアドレスが複製されるため 変更は適用される
・ただし、string型 は変更のたびに別のインスタンスが生成されるため、変更は適用されない
・値型は、値がそのまま複製されるため 変更が適用されない ディープコピー：詳細コピー
コピー元（元）を変更しても、コピー先（先）に変更が適用されない[代入・コピーコンストラクタ・MemberwiseCloneメソッド] の三つの複製方法が、どのような動きになるかをまとめています※個人的メモ：今回の記事では値型と参照型をメソッド内でコピーするコードがありますが、引数を渡していないため「参照渡し」は関係ありません上記の動作を実際のコードで確認します👀 単純な代入サンプルコードですoriginal（コピー元）の値を変更します値型 Id と string型 Name はコピー元のみ変更が適用されていますが、参照型 Ids[] と Names[] は両方に変更が適用されています 先程使用した四つの変数（int型・string型・int型配列・string型配列）をメンバーとして SampleStruct 構造体・SampleClass クラスを作成しました
この構造体（値型）とクラス（参照型）を色々な方法で複製します値型/string型は変更の影響を受けない
SampleStruct という構造体を用意し、初期化後、それぞれの方法で複製します※実際のコードではそれぞれの複製を別メソッドで行っていますoriginalメンバー（コピー元）の値を変更します値型 Id と string型 Name はコピー元のみ変更が適用されていますが、参照型 Ids[] と Names[] は両方に変更が適用されています
 構造体を複製すると、別のインスタンスが生成されます（値型のため）

全ての型が変更の影響を受ける
SampleClass というクラスを用意し、初期化後、代入をして複製しますoriginalメンバー（コピー元）の値を変更します全ての型に変更が適用されています
 クラスの代入時は、参照アドレスが渡されるため同一インスタンスを参照します（参照型のため）

値型/string型は変更の影響を受けない
先ほどと同じ SampleClass というクラスを使用し、初期化後、それぞれの方法で複製します
※実際のコードではそれぞれの複製を別メソッドで行っていますoriginalメンバー（コピー元）の値を変更します値型 Id と string型 Name はコピー元のみ変更が適用されていますが、参照型 Ids[] と Names[] は両方に変更が適用されています
 クラスをコピーコンストラクタ・MemberwiseClone でコピーした場合は、別のインスタンスが生成されます

ここからは蛇足なおまけです　ディープコピーについては ★こちら
先程使用した SampleStruct構造体・SampleClass クラスをメンバーとして、SampleStruct2 構造体・SampleClass2 クラスを作成しました
この構造体（値型）とクラス（参照型）を色々な方法で複製します値型/string型は変更の影響を受けない
SampleStruct2 という構造体を用意し、初期化後、それぞれの方法で複製します※実際のコードではそれぞれの複製を別メソッドで行っていますoriginalメンバー（コピー元）の値を変更しますメンバー内の値型である SampleStruct は、値型 Id と string型 Name はコピー元のみ変更が適用されていますが、参照型 Ids[] と Names[] は両方に変更が適用されています
メンバー内の参照型である SampleClass は、全ての型に変更が適用されています 
 構造体を複製すると、別のインスタンスが生成されます（値型のため）

全ての型が変更の影響を受ける
SampleClass2 というクラスを用意し、初期化後、代入をして複製しますoriginalメンバー（コピー元）の値を変更します全ての型に変更が適用されています
 クラスの代入時は、参照アドレスが渡されるため同一インスタンスを参照します（参照型のため）

値型/string型は変更の影響を受けない
先ほどと同じ SampleClass2 というクラスを使用し、初期化後、それぞれの方法で複製します
※実際のコードではそれぞれの複製を別メソッドで行っていますoriginalメンバー（コピー元）の値を変更しますメンバー内の値型である SampleStruct は、値型 Id と string型 Name はコピー元のみ変更が適用されていますが、参照型 Ids[] と Names[] は両方に変更が適用されています
メンバー内の参照型である SampleClass は、全ての型に変更が適用されています 
 クラスのコピーコンストラクタ・代入時は、別のインスタンスが生成されます

上記三種の方法では、参照型メンバーがシャロ―コピーになってしまいます
その為オブジェクトのシャローコピーを作成した後、参照型メンバーをさらに複製する必要があります
 メジャーで簡単な方法
1. MemberwiseCloneメソッドを使用し、別のインスタンスを作成します
2. 参照型メンバーがある場合は、そのメンバーを個別に複製します全ての型は変更の影響を受けない
SampleClass というクラスを用意し、MemberwiseCloneメソッド Array.Cloneメソッド を使用して複製する処理を作成します初期化をし、ディープコピー用のメソッドを呼び出しますoriginalメンバー（コピー元）の値を変更しますコピー元の変更は、コピー先に適用されていないことが分かりますどの型のどの動作がどうなるか、という点を押さえておけば少し面倒なオブジェクトの複製も理解が進むと思います
メンバーに値型・参照型が混ざっていたとしても、動作は一切変わらないのは何故か？という点が大きな収穫でした（今までは「なんとなくそういうもの」という理解だったため・・・）以下のサイトを参考にさせて頂きました　その他公式ドキュメント参照読みづらいところもあると思いますが、最後まで見て頂きありがとうございました


