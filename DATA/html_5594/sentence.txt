More than 3 years have passed since last update.StateVectorと言う名前で公開したクラスは、状態遷移関連の定義を簡素化し、集約するために作成しました。
https://github.com/visyeii/StateVector定義はこんな感じです。
https://github.com/visyeii/StateVector/blob/master/StateVector/StateVector/Form1.cs
※"() =&gt; {...}"の箇所はラムダ式で定義した関数です。m_stateVectorの持つ値が、直前の状態(head)から、新しい状態(tail)に変化した(一致した)とき、
関数(func)を呼び出します。Refreshを呼び出し、引数に新しい状態(tail)を与えます。下図の通り、遷移を示す矢印に関数を割り当てています。初期状態"init"からの状態変化に対応する定義は次の1行です。省略せずに記述すると次の6行となります。※InitStateは() =&gt; { SetLog("start"); }と同じです。このようにVE.TailOrラッパーで定義を集約する事により、記述量を減らしています。DRY！初期状態"init"からの状態変化について、動作を変更せず、丁寧に書き直すと次の記述になります。一致判定に正規表現が使用可能です。
上記Form1_Load内の定義を次のように書き換える事が出来ます。※m_stateVector.EnableRegexp = true;の記述が必要となります。
※各種ラッパーについてはそのまま使用可能です。正規表現を使用する事により、直前の状態(head)または新しい状態(tail)に、何にでも一致する定義を作成可能となります。
状態の名前に接頭辞や接尾辞を付加することにより、パターンマッチを行う方法も考えられます。
より広範囲の処理を集約する事が出来ます。DRY!!ラムダ式部分は&lt;Form1_Load&gt;b__3_xと言う関数名になるようです。※正規表現での判定EnableRegexp = trueでも使用可能ですが、各種ラッパーと違って定義をそのまま判定に使用しますコンストラクタにlistNameを付加します。（下記ではlist_A）デバッグ出力の先頭にlist_Aが付加されているので、
他のStateVector定義が混在しても識別が容易になります※1つのFormにStateVectorは1つか2つ使うくらいが丁度いいと思います。


