More than 1 year has passed since last update.↑ C# Advent Calendar 2019 13 日目です ↑この記事は、みたいな人を対象にしています (誰得)。C# のいろんなネタ探しを兼ねて、長らく「過去から未来まで、コード中に書かれるであろう全ての正規表現を一切滅ぼすことを使命とした代替ライブラリ」を書いていたのですが、気がついたら関数指向プログラミング的な仕掛けが (意図せず) あれこれ混入していたので、そこらへんを適当にピックアップしつつ、いくつか馴染みがなさそうな概念について解説してみます。
とか言って、ある程度関数指向を知ってる人向けです。インターフェースは型クラスのようなものとはよく言われますが、まあ外から差し込みができるできないとかの違いはあるけどだいたい似たようなものです！似たようなものとして使うことができます！さっそく例ですが、メソッドの引数/戻り値としてインターフェースを直接扱う代わりに、ジェネリック型の引数を取って型引数の制約にインターフェースを指定するように書き換えているだけですね。
この Max メソッドの例では、単純にインターフェースを引数に取る場合とは異なり、first と second が「同じ型でなければならない」という重要な制約が課されています。単に同じインターフェースを実装しているだけでは、その実体が同じ型であるかどうかまでは分からないのですね。
また、戻り値の型を引数と同じ具象型にできているところもポイントです。ジェネリクスを利用しなかった場合、どうやっても IComparable&lt;T&gt; のインターフェースを返すことまでしかできません。
値型でも参照型でも関係なく具体的な型に沿ってメソッドを生成できるので、ボクシングの回避にも使えます。ところで、このような、型制約でインターフェースの型引数に「それ自身の型」を渡しているものを勝手に「自己言及型引数」と呼んでいますが、こうするとメソッドに渡すオブジェクトの型と IComparable&lt;TComparable&gt; の TComparable が同じものでない限りコンパイルが通らなくなるので、IComparable&lt;T&gt; の有効な実装を自己言及に制限することができます。
TComparable の実体が仮に IComparable&lt;X&gt; を実装していたとしても、TComparable と X が一致しないので Max に渡されることを防げるのです。
これはインターフェースを型クラス的に使うために必須ではないですが、こういうテクニックも有効活用できるよという話でした。最後にインターフェース定義の方の、この T に対する制約は実際のところ必要ではないのですが、実装者へのアノテーションとして定義してあると親切かと思って入れています。運用上ではこれ以外の定義は許容されないわけなので。つかいどころC# でもインターフェースを悪用すればランク2型のようなものを再現することができます。例えばこんな (適当な) 関数を定義したいと思います。
C# では、こうです。さすがにいろいろめんどくさいですが、まあ、なんかできました。ジェネリックなインターフェースの中に型制約付きなジェネリックメソッド定義を持たせることで、型が合います。
これデリゲートとラムダ式が Higher rank types を公式にサポートしてくれたらなーーーって思いますね！！！つかいどころ存在型は関数指向というよりはむしろオブジェクト指向の考えに近いので……。単純にインターフェースを介するときに型引数のいくつかを隠すことで共通化します。はい、普通ゥーのオブジェクト指向ですね！
インターフェースではなく抽象クラスでやるパターンもあります。
隠した型を使う処理は、シグネチャに表れないように普通にクラス内メソッド中に書けばいいだけです。つかいどころみんなだいすき Fixed point「関数 f の不動点」とは、f(x) = x となる x のことです。
この不動点を「計算する」関数が fix で、fix に f を渡すと x が手に入ります。この fix を不動点コンビネータと呼びます。
fix(f) = f(fix(f)) で定義され、fix(f) = x です。C# でもちょっと変形してるけど定義そのままみたいなのが使えます。主に Lazy&lt;T&gt; とかラムダ式とかを使って作ります。正格評価な環境だと最初の定義では Fix(f) の評価が無限再帰して止まらないので、f の代わりに x =&gt; f x を使うなどして評価タイミングを遅らせます。つかいどころちなみに、「x = f(x) となる x」という不動点の定義をそのまま書き下したような書き方もあって、効率の面でも有利であるため実際の Haskell ではのような実装が採用されています。
C# でも、工夫すれば同じようなことできます！C# は、実は条件を満たすことで末尾呼び出しをジャンプに置き換えることができます。つまり、ちゃんと工夫すれば、無限な再帰的呼び出しを真っ当に実行できるワンダーなコードが書けます。一応先に用語を整理しておくと、末尾再帰の概念は末尾呼び出しの特殊化されたパターンに過ぎないのですが、末尾再帰最適化は (たいてい) 中間言語レベル、末尾呼び出し最適化はアセンブリレベルでの最適化になるので、最適化の文脈では2つはやや毛色が違う扱いをされることが多いです。末尾再帰最適化が効く言語はそこそこ数がありますが、末尾呼び出し最適化を行えるランタイムはそう多くなかったと記憶しています。そういう意味では、.NET のランタイムは結構ステキ。
ただし、肝心の末尾呼び出しが最適化される条件がやや厳しい (ここ最近の新機能でさらに厳しくなった) ので、アセンブリに手を加えて条件を緩和するハックも利用して実用レベルにしています。つかいどころ必要に駆られて作った絶対末尾呼び出し最適化したい人向けビルドツールCPS 変換というのは、一般的に、一連の手続きをぶつ切りにして小さい手続きのチェーンに変換し、再帰的に呼び出すような構造に変換することをいいます。
型の上では、値 a を関数 forall r. (a -&gt; r) -&gt; r に置き換えることに相当します。
例えば a -&gt; b で型付けされる関数を CPS 変換すると a -&gt; (b -&gt; r) -&gt; r になります。ここでおなじみ Factorial くんに登場していただき、末尾呼び出しとそうでないもの、そして CPS 変換の定義を並べてみました。でもよくある内容だし長いので読まなくてもいいです。末尾じゃない普通の定義

int Factorial(int x)
    =&gt; (x == 0) ? 1 : Factorial(x - 1) * x;

Factorial(3) == &lt;Factorial(3 - 1)&gt; * 3
| Factorial(2) == &lt;Factorial(2 - 1)&gt; * 2
| | Factorial(1) == &lt;Factorial(1 - 1)&gt; * 1
| | | Factorial(0) == 1
| | (1) * 1 == 1
| (1) * 2 == 2
(2) * 3 == 6


末尾再帰

int Factorial(int x, int acc)
    =&gt; (x == 0) ? acc : Factorial(x - 1, acc * x);

Factorial(3, 1) == &lt;Factorial((3 - 1), (1 * 3))&gt;
| Factorial(2, 3) == &lt;Factorial((2 - 1), (3 * 2))&gt;
| | Factorial(1, 6) == &lt;Factorial((1 - 1), (6 * 1))&gt;
| | | Factorial(0, 6) == 6
| | 6
| 6
6

/* ↑ は ↓ とみなせる */

| Factorial(3, 1) == &lt;Factorial((3 - 1), (1 * 3))&gt;
| Factorial(2, 3) == &lt;Factorial((2 - 1), (3 * 2))&gt;
| Factorial(1, 6) == &lt;Factorial((1 - 1), (6 * 1))&gt;
| Factorial(0, 6) == 6


CPS 変換による末尾再帰

int Factorial(int x, Func&lt;int, int&gt; cont)
    =&gt; (x == 0) ? cont(1) : Factorial(x - 1, acc =&gt; cont(acc * x));

Factorial(3, (x =&gt; x)) == &lt;Factorial((3 - 1), (x =&gt; x * 3))&gt;
| Factorial(2, (x =&gt; x * 3)) == &lt;Factorial((2 - 1), (x =&gt; (x * 2) * 3))&gt;
| | Factorial(1, (x =&gt; (x * 2) * 3)) == &lt;Factorial((1 - 1), (x =&gt; ((x * 1) * 2) * 3))&gt;
| | | Factorial(0, (x =&gt; ((x * 1) * 2) * 3)) == &lt;(((1 * 1) * 2) * 3)&gt;
| | | | (((1 * 1) * 2) * 3) == &lt;((1 * 2) * 3)&gt;
| | | | | ((1 * 2) * 3) == &lt;(2 * 3)&gt;
| | | | | | (2 * 3) == 6
| | | | | 6
| | | | 6
| | | 6
| | 6
| 6
6

/* ↑ は ↓ とみなせる */

| Factorial(3, (x =&gt; x)) == &lt;Factorial((3 - 1), (x =&gt; x * 3)&gt;
| Factorial(2, (x =&gt; x * 3)) == &lt;Factorial((2 - 1), (x =&gt; (x * 2) * 3))&gt;
| Factorial(1, (x =&gt; (x * 2) * 3)) == &lt;Factorial((1 - 1), (x =&gt; ((x * 1) * 2) * 3))&gt;
| Factorial(0, (x =&gt; ((x * 1) * 2) * 3)) == &lt;(((1 * 1) * 2) * 3)&gt;
| (((1 * 1) * 2) * 3) == &lt;((1 * 2) * 3)&gt;
| ((1 * 2) * 3) == &lt;(2 * 3)&gt;
| (2 * 3) == 6


通常の再帰関数は、自身を呼び出し終わった後に「何か戻り値を処理する手続き」が残るのに対して、末尾再帰とは、呼び出し終わった後の処理が「戻り値をそのまま返すしかやることがない状態」になっているものを指します。
ということは、この返すだけの処理は省略しても結果が変わらなくて、最後の計算結果を直接使えばいい気がしますね！これが「末尾再帰は機械的に最適化が可能 (できるだけで必ずするとは言っていない)」という意味です！ここで、CPS 変換とは、本来末尾再帰にならないような再帰関数を何でも末尾再帰に変換できてしまうマジックです。
再帰関数内の「何か戻り値を処理する手続き」自体を関数にしてしまえば、「続きの処理」をなくすことができます！
コード例を見比べてみると、CPS では通常の再帰定義と同等の処理がそのままフラットに展開されていることが分かります。
まあ、これは実際にやってみて慣れないと分からないやつなので、覚えたいなら実際に何か作ってみたほうが早いです。CPS 変換を利用して再帰的な呼び出しをなんでも末尾呼び出しにできるということは、C# でも任意の再帰的な処理を末尾呼び出し最適化の対象にできるということです！素晴らしいですね！つかいどころモナドが何なのかについては、以前書いた記事を見てもらった方が早いとして……。
C# でモナドを書くなら、ジェネリックなクラス A&lt;T&gt; に対して「T から A&lt;T&gt; を作れる関数」と「A&lt;T&gt; と T -&gt; A&lt;T2&gt; な関数の2つから A&lt;T2&gt; が作れる関数」があれば、後はちょっとしたルールを満たせばモナドになります！簡単ですね！つかいどころちなみに、モナド的な性質を持っているなら、以下のような (拡張) メソッドを定義しておくと、Linq のクエリ構文を do 記法的に扱うことができます。
順次処理するような複数の計算を並べて書くときなどに、クエリ構文が使えると捗る場面がたまにあります。他にも GroupBy や OrderBy などクエリ構文を拡張できるメソッドはまだまだありますが、とりあえず主要なものだけ書きました。
あと、1引数の SelectMany (== bind) はクエリ構文のために定義する必要は無いです。つかいどころはい。最初から最後まで、だから何？って感じの記事でしたね！まあ、C# でもかなりアグレッシブな関数指向プログラミングが実際可能であることは分かりました。どれもうまいことオブジェクト指向の上に乗っけることができています。
ただ、本来的に言語仕様がそういう使い方を想定していないので、いざやろうとすると若干めんどくさい場面が多いです。
もう少し楽に書けるような言語仕様が増えてくれたらって思いますが、増える気配はないですね……きっと誰も使わないですし……。
でもでも、もっとカジュアルな感じに関数指向なら全然書けるので、みんなももっと Functional していってもいいと思います！最後に、今回例に出したプロジェクトでは他にもいろいろチャレンジングなコードが書かれていて、とても C# とは思えないようなコードが散りばめられた極北プロジェクトに仕上がってるので、外面からでも内面からでも、もし興味が沸いたなら是非見ていって下さい。ループ文がなくても、ライブラリはつくれる。


