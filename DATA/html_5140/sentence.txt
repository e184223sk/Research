More than 3 years have passed since last update.何番煎じか分かりませんが、イテレータパターン(Iterator Pattern)のお話です。
C#においては、言語に組み込まれていると言って良いでしょう。
Iterator パターン @ Wikipediaのクラス図に合わせた形で、C#の機能を説明していきます。デザインパターンで出てくるIteratorインタフェースは、C#ではIEnumerator&lt;T&gt;に当たります。
『列挙する者』みたいな意味(Enumurate + -or)ですね。next(),hasNext()は、C#ではCurrent,MoveNext()のように少し違った形で実装されます。デザインパターンで出てくるAggregateインタフェースは、C#ではIEnumerable&lt;T&gt;に当たります。
『列挙可能』みたいな意味(Enumurate + -able)ですね。iterator()メソッドは、C#ではGetEnumerator()に当たります。ConcreteAggregateに当たるC#の型は無数にあります。
同一の型のインスタンスを複数扱うようなデータ型はほぼこれに当てはまると思って良いでしょう。IEnumerator&lt;T&gt;を実装した型は、例えばList&lt;int&gt;.Enumerator型などがあります。
ただ、こちらは実装型を意識せずに利用することが普通ですね。foreach構文では、GetEnumerator()メソッドを持つインスタンスであれば、同一の構文で要素を列挙できます。
これはC#プログラマなら無意識レベルで使っているであろう例です。↑の構文は↓とほぼ同義になります。LINQ to Objectでは、IEnumerable&lt;T&gt;を『流れるようなインタフェース』として扱うことで、様々な標準クエリを利用可能にしています。C#ではIEnumerable&lt;T&gt;を利用したイテレータを生成するための構文が用意されています。
自前でIEnumerable&lt;T&gt;とIEnumerator&lt;T&gt;を作成する手間は基本的に不要と言えます。
(少しややこしいのですが、この構文は"Iterator block"と呼ばれます。)"Gang of Four"によるデザインパターンの紹介が1994年のことになります。つまり、C#に限らずその後にリリースされた言語ではこれらのデザインパターンが言語に取り込まれていることも多いのです。
これからデザインパターンを勉強しようとしている人は、自分の得意とする言語(やフレームワーク)にどのようなデザインパターンが組み込まれているのかを調べてみると良いと思います。


