More than 1 year has passed since last update.ASP.NET Core 3.0 Razor Pages 事始め(9)の続きです。いよいよ最後となりました。今回は公式チュートリアルのASP.NET Core Razor ページに検証を追加するに沿って進めていこうと思います。チュートリアルの最後は、ASP.NET Core Razor ページに検証を追加します。Movieクラスに、検証属性を追加します。Required 属性は、必須項目であることを示します。StringLength属性は、文字列の最大長を示します。MinimumLengthを使うことで、最小長を指定することもできます。Range属性は、指定した範囲で値を制限します。RegularExpressionは、ユーザが入力できる文字を正規表現で指定します。次に、クライアント検証を有効にするために以下の記述を Create.cshtml と Edit.cshtml の最後尾に追加します。ちなみに、_ValidationScriptsPartial.cshtml は以下の通りです。ビルドして、F5キーで実行してみます。
新規作成ページで、無効な値を入力してみます。無効な値を入れた場合は、他の項目に移った段階で検証が走り、エラーメッセージが表示されます。
この時、サーバーへは処理は移っていません。ここで注目すべきは、Movieクラスで指定した検証指定が、２つのページで同じように利用されているという事です。ページごとに検証ルーチンを書く必要がないのは楽だし、統一が取れるのでとてもいいですね。でも、メッセージが英語です(T T)とか、書けばとりあえずはOKです。だけど、すべての検証属性にこれを付けるのは、規模の大きなプログラムではあまりにも大変です。あとでやり方を調べてみます。クライアント検証が有効になっていないと、入力されたデータは、サーバー側で検証されるようになっています。Create.cshtml.csのOnPostAsyncメソッドには、という記述があります。検証エラーが発生すると、IsValidプロパティがfalseになります。
この時は、return Page();で戻っています。わざわざ検証用の処理を呼び出す必要はないということですね。試しに、Create.cshtml のを削除します。これでクライアント検証が無効になるはずです。ビルドしなおし、ブラウザを閉じてから、再度実行してみます。確かにサーバー側で検証が行われ、ブラウザには先ほどと同様に検証エラーが表示されます。ちなみに DataType属性は、厳密には検証用属性ではありません。Viewに対してデータの書式設定のヒントを提供します。例えば、においては、以下のようなHTMLが生成されます。type="data"になっている点に注目です。この属性が無いと、type="datetime-local" となり、利用される入力コンポーネントが時刻も含んだものになります。話がそれますが、日付の書式は、サーバーのCultureInfoに基づき、既定の書式に従って表示されるようです。@Html.DisplayForで日付を表示した場合、と属性を追加すれば、と表示形式を変更できます。属性は、複数の属性を纏めて１行に書くことも可能です。
以下にその例を示します。これで、チュートリアルは終了です。公式ページのチュートリアルだけあって、RzaorPagesの基本が押さえられる内容になっていると思います。基本は抑えられたということで、これからは、チュートリアルをやっていて、疑問に思った点やさらに詳しく知りたいと思った点を調べていこうと思います。この記事で作成したプログラムのソースコードはGitHubで公開しています。ASP.NET Core Razor Pagesの説明をはじめて読んだ時には、デスクトップアプリ（Windows Forms）の開発をやっていた頃を思い出し、コードが分離されずにメンテナンスの悪い構造になってしまうのではないかと、不安を覚えました。しかし、触ってみた感触だと、心配するようなことは無いかなというのが僕の感想です。MVCの欠点が消えて逆にいい感じです。MVCの場合も、Modelをどうすべきかはアプリケーション設計者に任されていたわけです。
それを考えると、ViewとControllerが、Page(.cshtml)とPageModel(.cshtml.cs)に置き換わっただけです。PageとPageModelは、常に1対1の関係ですから、コードを書いている時に、ControllerとViewとModel(ViewModel)の間をいったりきたりする必要がないので、とても快適です。Webアプリの性質上、ページモデルに大量のメソッドを定義するようなことも無いと思います。
また、Controllerをどう分割すべきかという悩ましい問題からも解放されます。
Pagesフォルダの中に、サブフォルダを作成すれば、見通しも良くなりそうです。僕の理解は以下のような感じです。


