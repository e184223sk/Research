More than 3 years have passed since last update.ミニゲームを作ってUnityを学ぶ！[ひつじコレクション編]前回はサクサクっと画面内にミニマップを表示する機能を実装しました。
次はひと通り遊べるようになったひつじコレクションについて、ゲームとしての開始と終わりの概念を実装します。今回の実装はゲームとしての見栄えに大きな変化はありませんが、オンラインランキングを実装する際など後々重要な仕組みになります。一般的なUnityのプロジェクトは例えばタイトル画面のシーン、実際にプレイするシーン、結果表示のシーンなど複数のシーンから構成されていて、それらを適切なタイミングで切り替えることでゲームとしての開始や終了を表現しています。一方で今回のひつじコレクションのように1つのシーンで成り立ってしまう小規模なゲームの場合は、この開始と終了をシーン内の状態を制御することで表現します。プロジェクト開始時にステージをファイルから生成してPLAY状態へ遷移。
GameControllerのプロパティ「IsGameOver」がtrueになったタイミングでGAME_OVER状態へ遷移。
このように適切なタイミングでシーンの状態「mState」を変更することによってUpdate()の処理を切り替えています。また併せてGameControllerとStageManagerについて、SceneMainに対応するための修正を行います。GameControllerにはゲームオーバーに関するフラグを追加し、Init()ですっかり忘れていたフレームレートの設定を行いました。
これ以降、各スクリプトのUpdate()は1秒間に30回の頻度で呼び出されるようになります。今まではプロジェクトを実行した瞬間から操作可能な、いわゆるゲームが始まっている状態でしたが、この開始方法をプレイヤーが自分のタイミングで決定できるように修正していきます。まずはユニティちゃんについて、プロジェクト開始時点ではプレイヤーの操作入力を受け付けない状態にします。初期状態のStateをIDLEからDEFAULTに変更し、新しくOnIdle()を追加しました。
これによってユニティちゃんはStageConstructor#OnActivePlayer()が実行されるまでプレイヤーの操作入力を受け付けない状態になります。敵キャラクターについても同様に、プロジェクト開始時点ではAI行動を無効にしてその場に待機させます。敵キャラクターはStageConstructorのOnActiveChaser()が実行されるまでAIによる移動を行わずその場に待機します。
また同時に、全てのChaser~オブジェクトを非アクティブにするためのメソッド、OffActiveChaser()を追加しています。さらにフォロワーのポップアップについて、こちらもプロジェクト開始時点ではポップアップさせるかどうかの判定を行わないようにします。上記のユニティちゃん、敵キャラクター、ポップアップそれぞれに対応するため、StageManagerにゲーム開始時の初期化メソッドを追加します。最後に、SeneMainにEnterキーの入力を監視する仕組みを実装します。以上でEnterキーによってゲームを開始する仕組みが完成しました。プロジェクトを実行後、Enterキーを押すことでゲームが開始します。先ほどStageManagerにゲーム開始時の初期化メソッドを追加したように、同じくStageManagerに終了処理に関するメソッドを追加します。EndGame()ではゲームの終了に必要な処理を行うと同時に、フラグを立てることでシーンの状態をGAME_OVERに遷移させています。ゲームオーバーのタイミングはプレイヤーがチェイサーと接触してその場で回転。
その後のダウンアニメーションで地面に倒れ込んだ直後に設定します。今回のようにアニメーション再生時の特定タイミングでメソッドを呼び出す場合は第1回で解説したようにアニメーションイベントを利用します。ユニティちゃんがその場に倒れ込んだタイミングでEndDownAnimation()が呼び出され、さらにStageManager.EndGame()が実行されます。以上でゲームに開始と終了の概念を実装できました。
最後に、ゲームをはじめからやり直す機能を追加します。SceneMainの現在のmStateに関係なく、BackSpaceキーの入力を感知したタイミングでシーンを再読み込みすることでゲームを開始前の状態へ戻します。＊ゲームをリスタートした際に画面が暗くなってしまう場合は以下の設定を行ってください。シーンを再読み込みすると各オブジェクトやそれにアタッチされているスクリプトなどは破棄されて新しく生成されなおしますが、シングルトンかつシーン内に配置されていないクラスGameControllerに関しては生成されている唯一のインスタンスが破棄されず同じインスタンスをそのまま参照する形になります。つまりゲームオーバーの際に一度trueになったIsGameOverフラグはシーンを再読み込みしてもtrueになったままの状態ですので、ゲームを完全に開始前の状態に戻すにはこのフラグを初期化する必要があります。前回から見栄えは全く変わりありませんが、これでひつじコレクションに開始・終了の概念とやり直しの機能を実装することができました。次のページに進む
イントロダクションに戻る

この作品はユニティちゃんライセンス条項の元に提供されています


