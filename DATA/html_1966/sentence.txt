More than 1 year has passed since last update.値型、参照型、ポインタ型とは以下の概要である。値型は普通の変数(int,float)です。チルノ「値ぃ。」

&lt;-

参照と値の関係とは。幽々子は、白玉楼 ref型,妖夢は、白玉楼型となっている。この関係では幽々子 白玉楼 ref = Ref(妖夢)となっている。幽々子は妖夢以外の人の居場所を教えることができない(他の人の居場所を教えると怒られる為)。参照の中の大きさはは値のサイズに基本的に等しい(参照の大きさはint程度であることが多い)。例えば霊夢が妖夢がどこいるの?って聞くと今日はここいるよと幽々子が教えるような感じである(必ず、知っている場合はそこにポインティングする)。必ず知っているとは限らないのでその時の場合はもし知らなかったらどうするかを書く必要がある(Null参照問題)。幽々子.妖夢でアクセスできる。これ以後を読むのはC/C++の人が殆どだと思いますのでC/C++を中心に他の言語を少し含めながら紹介します。

ポインタはどこにでも行くことができる。具体的に言うと紅魔館の主レミリア・スカーレットはZUN氏が作ったキャラクター番号で人の管理をしていたとする。レミリアは紅魔館 ptr型,咲夜は紅魔館型である。レミリア 紅魔館 ptr = ID(十六夜咲夜)となる。あくまでレミリアが知っているのはキャラクター番号なのでその番号を加算したり、減算したりして(//レミリア += 10等)アリス(部外者)の番号を示した場合もエラーにならないことも多い。これで起こることが(バッファオーバーフロー)である。勿論Null参照問題(nullptr)も存在する(NullPointerException所謂ヌルポである。)大きさはintと同等の場合が多い。その値自体はそのキャラクターを示せられないのでレミリア-&gt;フランというアクセスをする。(レミリアが知ってる番号のキャラクターを覗き、そこからいる場所を調べる)
八雲紫は多くの主(参照、ポインタ)を管理できるとする。紫は 東方 ptr型,レミリアは 紅魔館 ptr型,フランは 紅魔館型紫 東方 ptr = ID(東方(レミリア))。(紅魔館 ptr)(紫-&gt;レミリア)-&gt;フランとアクセスしたり、(白玉楼 ref)(紫-&gt;幽々子).妖夢とアクセスしたり、できる。また、ポインタのポインタも大きさはintと同等である。このことは以後の汎用ポインタでも重要な概念になる。
@comment ポインタのポインタはよくキャストが起こる。今回はT(object)なので、東方(レミリア)と書く。別に紫,レミリア,さとり,萃香が同じ大きさならそれと同じくらいの大きさのマネージャー(キャラクター番号を読める人)を雇えばよくね？って考えられ作られたのが、汎用マネージャーのこと汎用ポインタである。
　
そのマネージャーの対象としては、OOMC姉貴でもYMN姉貴でもいいのである。動的型の様に型さえ違う場合も無問題である。但し、管理は大変である。別に3重ポインタのポインタとしても問題は起こらない。


