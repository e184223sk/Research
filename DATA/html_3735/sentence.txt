More than 1 year has passed since last update.少し前の記事でいろいろとこんな風にかけるよってコメントをもらった。
で、正直、一目見たときに意味不だったので理解してみた。
※流石に今回はVisual Studio使いました。少し前の記事
■C#手遊び(指数計算: 37^95を323で除算したあまりを計算。少しラムダ式)
https://qiita.com/siinai/items/2b1d8d32b8dccb8381af順番に行きますよ。ラムダ式だけはわかる。これ。「(a, b) =&gt; a * b % 323」。aにbをかけて323で割った余りを返すという関数。
ただ、EnumerableもRepeatもAggregateもわからん。。。何それ?参考にしたサイト
■未確認飛行：標準クエリ演算子（その他）&gt; 生成演算子
https://ufcpp.net/study/csharp/sp3_stdqueryo.htmlなるほど。ひとまず、数を並べてどーにかするクラス(メソッド?)群の親ラスという理解で進めてみよう。これも上記サイトからなるほど。と。
つまり、「Repeat」の言葉の通り、{37, 37, 37, 37, ... , 37 }と37を95個生成しますという意味。
だからこの後ろにLinqで.Sum()とか書くと37*95がReturnされる感じ。なるほど。近づいてきた。変数をおかっけてみようと思ってlambda式を分解して、F11をとんとんしておっかけてみた。なるほどね。理解した。
最初のT(今回は多分int扱いの1)を起点として、次々とそのもとになる数列を処理する感じ。
直前に{37, 37, ..., 37}が来てるから、1回目で1*37%323が来て、2回目でその戻り値に「*37%323」する。
なるほどね。これで37を95回かけて処理する、が成立するのね。じゃ、これで階上が計算できる?できるね。
tmpに6!の解、720が入ってました。もしかしてフィボナッチの数列も作れる?
・・・あっ、無理か。そりゃそうだ。必要な場合が出てきそうなので覚えておこう・・・
というか、コーディングそのもののリテラルは忘れてしまいそうだから、この投稿か、未確認飛行のサイトを参照できるようにしておこう。これもなるほどという感じでした。
これも分けていきます。いや、まあ、こういう書き方できるんだなぁ・・・と。
これからやろうとしていることの伏線ですね。これ、知識になかった。というか、見てもわからなかったなので調べた。参考にしたサイト参考にしたサイト
■未確認飛行：組込み演算子 &gt; シフト
https://ufcpp.net/study/csharp/st_operator.html(引用)
&lt;&lt; は左シフトを、 &gt;&gt; は右シフトを行う演算子です。なるほど。自分で先の記事で「2進数で数えて7回ループ」とか言っていたこともあり、やろうとしていることを考えるとこれですね。
そして3つめに続くです。はい、きましたこれ。
昔、6 and 13 = 4 とかって処理の意味が分からなくておっかけたことがあった。
それを考えると、わかるわ・・・
ビッグエンディアンとして上のビットから数えるということですね。※qiitaのエスケープがよくわからなかったので＠は全角文字で書いちゃました。。。予約語のスペルも変数として定義できると。
確かに int ＠int = 3; とかできた。
ちょっと前に親クラスから継承して・・・とか記事書いてたので「おっ、これは呼び出し元の数をどうにかするのか?」とか思ったけどそうでもなかったみたい。自分でZeroから書いた記事よりよっぽど勉強になった。
たんに書き方、というより、数を扱うということをそういう風にまとめるという考え方が参考になった。本業は機械学習でPythonなのでそっちでpandasやnumpyあたりと向き合うとき、いいフィードバックになってくれることと思います。
(先の記事以外も含め)Qiitaでコメントくださる方々、ありがとうございます！
・・・というか、これからもよろしくです。
(をぃ！)指摘の BigInteger.ModPow 調べてない。。。また追記します。なるほど。最初にPythonは10文字って書いたけど、C#もやるね。流石に998!とかその100乗とかを平気で計算するPythonにはびっくりだけど。


