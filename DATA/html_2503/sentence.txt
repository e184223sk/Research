More than 1 year has passed since last update.※2020年1月15日に正式リリースされた Chromium 版 Edge には対応していません。Chromium 版 Edge を操作するコードについては次の記事をご参照ください。
[C#] 自動UIテストで遊ぼう：生まれ変わったエッヂのはるかさんがクリスマスイブの予定を読み上げる（WinAppDriver でできること／できないこと）マイクロソフト社の開発した Windows Application Driver (WinAppDriver) を使用すると、Windows 10 上で動くアプリケーションのUIテストを自動化することができます。Webブラウザの自動操作と言えば、一般的には Selenium WebDriver を使いますが、ふと興味が湧いて Appium + WinAppDriver でも挑戦してみました。身近なところで、Qiita の「いいね」を検証しましょう。
新たに「いいね」がついていたら成功、ついていなければ失敗とします。新たに「いいね」がついていること。コードは C# で記述しますが、ほかの言語でも同じロジックで実現できると思います。一般的な Selenium WebDriver の方から実装していきます。Edge で Qiita に自動ログインできるようにしておきます。
実行前に Edge を開いていると Url 設定時に NoSuchWindowException が発生してしまいますので閉じてから実行しましょう。まず EdgeDriver を使用して Qiita のトップページを開きます。
次に通知ボックスの div 要素を見つけ、そのテキストから新着件数を取得します。
ここで件数が 0 なら「いいね」はありませんので検証は失敗となります。新着通知があった場合、その中に「いいね」が含まれていることを検証します。
10件までは通知件数クリックからドロップダウンで確認できますが、それを超えることもありえます。
通知一覧ページを開いて確認することにしましょう。通知一覧ページは10件ごとですので、新着件数がそれを超えるときは page クエリパラメータを指定して次ページ以降を確認していきます。「いいね」の場合は &lt;span class="bold"&gt;いいね&lt;/span&gt; で強調表示されます。
それがついた通知が1つでもあれば検証成功です。コードを見てみましょう。起動したブラウザを検証後に閉じたいときは、EdgeDriver を Close または Dispose します。新着があるかどうは色でも判定できます。div 要素のスタイル background-color を RemoteWebElement.GetCssValue メソッドで参照すると、"rgb(88,29,13)" のような書式で色指定が返ってきます。
ここから正規表現を使ってRGB値をそれぞれ抜き出し、Color 構造体オブジェクトに変換しています。同一色かどうかは ToArgb() した結果の int 値で判定します。
理由については別記事『[.NET] コードを見直したくなる「値型」等価判定の思わぬ落とし穴（特殊編）』をご参照ください。ここまでは比較的普通ですね。
ここからが冒険です。一般的には WinAppDriver はデスクトップアプリケーションを扱うためのものですが、Microsoft Edge（ここでは EdgeHTML 版を使用）はHTMLドキュメント部分も MSAA (Microsoft Active Accessibility) の後継である「UIオートメーション」に対応しており、WinAppDriver で扱うことができます。※Windows 版 Chrome の場合、「UIオートメーション」対応は「非常に限定的」とされていますが、MSAA の一部である IAccessible や、MSAA を補完した IAccessible2 に対応しており2、v78.0.3904.97 で試したところ、Edge と同レベルのことは実現できそうでした。通知ボックスをダイレクトに取得する情報が WindowsElement から得られず、この点に苦労しました。
左隣りの [投稿する] リンクが Text プロパティに収められた href 属性値から特定できたので、そこから相対位置で取得することにします。
XPath の following-sibling は効きませんので、親要素から FindElementsByXPath("*/*") で全子要素コレクションを取得し、[投稿する] の次の要素を通知ボックスとして取得しています。Selenium WebDriver と違い、WinAppDriver ではHTML要素は取得できません。
通知が「いいね」であることは、」 に いいね しました。という文字列を含んでいるかどうかで判定しました。次の小技もコード内に含まれています。Selenium WebDriver と違い、HTMLのスタイルは参照できません。
RemoteWebDriver にスクリーンショットを取得するメソッドが用意されていますので、レンダリングされた色から判定してみましょう。これが RemoteWebDriver.GetScreenshot() メソッドでキャプチャした通知画像です。
2桁とかあると格好よかったのですが、これでも1日待ちました。
真っ赤に見えたのは背景色との対比のせいで、実際は意外とオレンジなんですね。ブラウザのデバッグツールで色指定を確認すると "#E14B22" でした。ウィンドウのスクリーンショットから通知ボックス部分を抜き出し、そこに "#E14B22" のピクセルが含まれているかどうかを検証します。できましたね。
「いいね」はあったでしょうか。Edge（EdgeHTML）はHTMLドキュメント部分も限定的ながら「UIオートメーション」に対応しており、上のように WinAppDriver で扱うことができましたが、Windows フォームなどデスクトップアプリケーションと比べると、Inspect.exe に出てくる Name に Appium + WinAppDriver でアクセスできない、AccessibilityId が提供されないなど、機能的に物足りない感は否めず、実装に苦労しました。
あまり実用的とは言えませんね。
HTMLドキュメントの操作には素直に Selenium WebDriver を使用した方がよいでしょう。なお、レンダリングエンジンが Chromium に変わった後の Edge でUI自動化がどのようにサポートされるのか、気になるところですが、ベータ版を Inspect.exe で確認したところ、Chrome 同様に IAccessible2 を通してサポートされているようでした（レンダリングエンジンが同じなのでそれはそうですね）。※2019年11月4日、Chromium エンジンを採用した Microsoft Edge の安定版が 2020年1月15日にリリースされる予定と発表されました。
Getting your sites ready for the new Microsoft Edge - Microsoft Edge Blog通知一覧を開いた瞬間に新着の赤い背景は消えてしまいます。自分の手で赤い通知ボックスをクリックしたい方、新着ありの状態を長めに味わいたい方はご注意ください。 ↩chrome://accessibility/ で開いているページのツリー構造を確認できます。 ↩


