
using UnityEngine;

/// &lt;summary&gt;
/// お絵描き機能　適当なオブジェクトにアタッチ
/// &lt;/summary&gt;
public class TrailMeshCreateTest : MonoBehaviour
{
    [SerializeField] private Transform _paintObjParent;
    [SerializeField] private GameObject _paintObjPrefab;

    private GameObject _tmpPaintObj;

    private void Update()
    {
        Vector3 worldClickPos = Camera.main.ScreenToWorldPoint(Input.mousePosition + Camera.main.transform.forward);

        //マウス押した瞬間
        if (Input.GetMouseButtonDown(0))
        {
            _tmpPaintObj = Instantiate(_paintObjPrefab, worldClickPos, Quaternion.identity,_paintObjParent);
        }

        //マウス押し続けている間
        if (Input.GetMouseButton(0))
        {
            _tmpPaintObj.transform.position = worldClickPos;
        }

        //マウス離した瞬間
        if (Input.GetMouseButtonUp(0))
        {
            MeshCrate();
            _tmpPaintObj = null;
        }
    }

    /// &lt;summary&gt;
    /// Mesh生成
    /// &lt;/summary&gt;
    private void MeshCrate()
    {
        //TrailRendererの頂点情報からメッシュを生成する
        TrailRenderer paintObjectTrailRenderer = _tmpPaintObj.GetComponent&lt;TrailRenderer&gt;();
        //子にコライダーだけ持つオブジェクトを作成する
        GameObject colliderContainer = new GameObject("Collider Container");
        colliderContainer.transform.SetParent(_tmpPaintObj.transform);
        MeshCollider meshCollider = colliderContainer.AddComponent&lt;MeshCollider&gt;();
        Mesh mesh = new Mesh();
        paintObjectTrailRenderer.BakeMesh(mesh);
        meshCollider.sharedMesh = mesh;
    }
}

