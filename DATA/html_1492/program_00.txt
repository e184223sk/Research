
        private void Window_MouseLeftButtonDown(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            if (e.ButtonState != MouseButtonState.Pressed) return;
            DragMove(); //ここからDragMove
        }

        private void Window_MouseUp(object sender, MouseButtonEventArgs e)
        {
            //Draggingの終了
            if (G.isDragging == true) G.isDragging = false;
        }

        private void Window_LocationChanged(object sender, EventArgs e)
        {
            if(G.isTransing == false)   //画面TransitionによるLocationChangedは無視する
            {
                //ドラッグ中の場合はG.isDragging = trueにしておくことで最初のクリックイベントを回避
                if (Mouse.LeftButton == MouseButtonState.Pressed) G.isDragging = true;
                    else G.isDragging = false;

                //スクリーン縁への吸着
                var NewPos = GetPos();
                var hwnd = new WindowInteropHelper(this).Handle;
                NativeMethods.SetWindowPos(hwnd, IntPtr.Zero, (int)Math.Round(NewPos.X), (int)Math.Round(NewPos.Y),
                            (int)Math.Round(Width * G.SR), (int)Math.Round(Height * G.SR), Consts.SWP_NOZORDER);
            }
        }

        private Point GetPos()
        {
            var NewWindowPos = new Point();

            NewWindowPos.X = this.Left * G.SR;  
            NewWindowPos.Y = this.Top * G.SR;
            if (NewWindowPos.X &lt; G.marginsize) NewWindowPos.X = 0;  //左辺への吸着
            if (NewWindowPos.Y &lt; G.marginsize) NewWindowPos.Y = 0;  //上辺への吸着
            if (NewWindowPos.X + (Width * G.SR) + G.marginsize &gt; G.SW) NewWindowPos.X = G.SW - (Width * G.SR);  //右辺への吸着
            if (NewWindowPos.Y + (Height * G.SR) + G.marginsize &gt; G.SH) NewWindowPos.Y = G.SH - (Height * G.SR);  //底辺への吸着
            return NewWindowPos;
        }

