More than 1 year has passed since last update.この記事は C# Advent Calendar 2018 08日目の記事ですついに.NET Core上でデスクトップ開発ができるようになりました。
この記事では.NET Core上で動作するWPFを試してみます。
合わせて最新のC#8.0機能と.NET Frameworkのライブラリが動作するかも実験してみます。なお使用したバージョンはプレビュー版です。
また.NET CoreといってもLinuxやMacでは動きません。VisualStudio 2019 Preview をダウンロードしてインストールします。
ちなみにVisualStudio2019は他の2017とかと完全に別なので共存してインストール・使用することができます。をチェックしてインストールします。さらに.NET Core 3.0 Previewをダウンロードしてインストールします。まだVisualStudioから.NET Core WPFを新規作成することはできないので、コマンドから作成します。
まず任意のプロジェクト名のフォルダを作り、そこで以下のコマンドを実行します。そして出来上がった.csprojファイルをVisualStudio2019から開きます。
Xamlのプレビューやプロパティウインドウなどは動きません。そのまま実行すると、、、無事に表示されます。
ライププロパティエクスプローラなどのUIデバッガーは動きませんが、通常のデバッガーは動きますのでブレークポイントで止めたりすることはできます。VisualStudioを一旦閉じます。
閉じる際にダイアログで.slnファイルを作成するか聞かれるので、作成します。ソリューションを再び開きます。
C# 8の文法を使用してみます。
まずデフォルトではビルド設定を変更します。
プロジェクトのプロパティ＞ビルド＞詳細設定＞言語バージョン
をC# 8.0に変更します。今回はRangeを使用してみます。
MainWindowを少し変更します。MainWindowのコードビハインドのsource[2..5]やsource[^1]がRange機能です。
ボタンを押したときに元配列の2～4番目、最後から1つ目を取得する機能です。実行結果です。次に.NET Coreに正式対応していない、.NET Frameworkのライブラリをつかってみます。
今回はMaterialDesignInXamlToolkit
を使用します。プロジェクトにNugetで以下の2つを追加します。.NET Frameworkにしか対応いていないので警告が出ますが、とりあえず無視します。
MaterialDesignInXamlToolkitのチュートリアルに沿っていくつか変更します。App.xamlにResourceDictionaryを追加します。
私の好みで色をダークテーマ + プライマリ:BlueGrey + アクセント:Cyanにしました。次にViewを少し変更します。コードビハインドは変更しません。
TextBlockをCardで囲い、下のButtonはStyleを変更してContentもPackIconに変更しました。実行結果です。問題なく動きます。警告文が出た以外は今のところ、.NET Frameworkのときと違いはないですね。というわけでVisual Studio 2019と.NET Core3.0を使って最新のC#8.0の文法と.NET Frameworkのライブラリの同時使用ができました。
Windowsのデスクトップ開発はWinFormからUWPまでいろいろな選択肢がありますが、このWPF on .NET Coreも新たな選択肢として検討する価値はありそうです。ソースコード全体を以下の場所に置いてあります。
https://github.com/soi013/WpfNetCoreVSPreVisual Studio 2019 16.0.0 Preview 1.0
.NET Core 3.0 (Beta)
MaterialDesignThemes 2.5.0.1205Update your Windows desktop app to .NET Core 3.0.100-preview-009754 – App Consult Team.NET Core 3.0 でのデスクトップ開発 - かずきのBlog@hatenaAnnouncing .NET Core 3 Preview 1 and Open Sourcing Windows Desktop Frameworks | .NET BlogC# 8.0 Ranges | ++C++; // 未確認飛行 C ブログ


