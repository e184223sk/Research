ポリモーフィズム：多態性、多様性
類似したクラスに対するメッセージの送り方を共通にする仕組み。(相手が具体的にどのクラスのインスタンスであるか意識せずにメッセージを送れる)コード例GetStatusという同じ名前のメソッドを複数のクラスで利用できるようにして異なる挙動をさせる。
PrintStatusメソッドの引数の型はCharacterになっている。
これにより、対象が剣士や魔法使いなど何が来ても対応できる。
(異なる機能(実装)を同じ名前で呼び出せるため、保守に優れている)派生クラスにオーバーライドすることを強制することができる。
抽象メソッドを含んだクラスを抽象クラスと呼び、継承したクラスはすべての抽象メソッドをオーバーライドしなければならない。
抽象メソッドはabstract修飾子を付与して定義する。コード例抽象クラスを継承したクラスからGetStatus()を削除するとエラーとなる。
抽象クラスはインスタンス化することはできない。
抽象メソッドは中身を持つことはできない。抽象クラスでは多重継承ができない。実現したい機能(メソッド)を1つの抽象クラスにまとめる必要があるため、派生クラスでその機能を必要としない場合にも、機能をオーバーライドしなければいけなくなる。
インターフェースは多重継承することができる。目的に応じて異なるインターフェースをに振り分けることで、派生クラス側も必要に応じてインターフェースを選択できるようになる。
インターフェースはinterface命令を利用する。コード例インターフェース名は大文字Iで始めること。
インターフェース配下の抽象メンバーにabstaractは不要。抽象クラスとインターフェースのどちらを利用するか迷ったら、インターフェースを優先して利用する。独習C#おわり。


