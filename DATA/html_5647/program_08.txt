
    internal interface IOpponentGetter
    {
        int GetOpponent();
    }

    internal interface IPlayerGetter
    {
        int GetPlayer();
    }

    internal interface IJankenChecker
    {
        void DoJanken(int player, int opponent);
    }

    internal class OpponentGetter : IOpponentGetter
    {
        public int GetOpponent()
        {
            var random = new Random();
            return random.Next(3);
        }
    }

    internal class PlayerGetter : IPlayerGetter
    {
        public int GetPlayer()
        {
            int player;
            while (true)
            {
                Console.WriteLine("グー[1] チョキ[2] パー[3]");
                var input = Console.ReadLine();
                if (!int.TryParse(input, out player))
                {
                    Console.WriteLine("半角数字を入力してね！");
                    continue;
                }

                if (player &lt; 1 || player &gt; 3)
                {
                    Console.WriteLine("1~3で入力してね！");
                    continue;
                }
                break;
            }

            player--;

            return player;
        }
    }

    internal class JankenChecker : IJankenChecker
    {
        public void DoJanken(int player, int opponent)
        {
            if (opponent == player)
            {
                Console.WriteLine("あいこでした！");
            }
            else if ((player + 1) % 3 == opponent)
            {
                Console.WriteLine("勝ち！");
            }
            else
            {
                Console.WriteLine("負け！");
            }
        }
    }

    internal class Program
    {
        private static void Main(string[] args)
        {
            var opponentGetter = new OpponentGetter();
            var playerGetter = new PlayerGetter();
            var jankenChecker = new JankenChecker();

            Console.WriteLine("じゃんけんしましょ！");
            var opponent = opponentGetter.GetOpponent();
            int player = playerGetter.GetPlayer();

            jankenChecker.DoJanken(player, opponent);
        }
    }

