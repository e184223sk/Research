More than 3 years have passed since last update.説明用に、手なりでオブジェクト指向っぽくコードを書けるようにするためのチュートリアルです。最初は「まず作ってから、それをオブジェクト指向っぽく」します。しょっぱなからオブジェクト指向的に考える方法は次書きます。とりあえず「じゃんけんゲーム」を作ってみます。余計なことをせず、手続き的に全部やります。じゃんけんの部分がちょっとまどろっこしく書かれていますが、基本的には脳みそ停止で手続き的に書くとこんな感じになるんじゃないかなと思います。早速こいつを分解していきます。本当はその関数の責務とか、再利用性を考えて関数を切りますが、脳を停止して関数を切り出せるようになりたいので、「スコープ」だけを見て関数を切り抜いていきます。まず上から。random は opponent の取得にしか使っていないにも関わらず、メソッドの最後までスコープが生きているのでこいつを分離します。次にinput は player の取得にしか使っていませんし、while の中にいるので安全そうに見えますが、while を抜いたりするとスコープが漏れ出てくる可能性があるのでこいつも隔離します。ついでに while 文自体と、player--; も Main がその後知る必要が無いので隔離します。選択肢の表示も関数の中に入っていたほうが都合が良さそうなので、それも移動しておきました。こうなりました：ちょっと input の時に混ざっちゃいましたが、「関心範囲を減らす」とはすなわち「知らなきゃいけないことを減らす」ということです。今 Main 関数が目指しているのは、いわゆる「サービス」と呼ばれるもので、「値を取得して、それを別の関数に流す」という役割です。現段階で Main が直接知っていることは、「Opponent の取得」「Player の取得」「勝ち負けの計算」です。この勝ち負けの計算も関数に抜き取ってしまえば、Main 関数は具体的な処理を知らない状態でじゃんけんゲームを遂行することができます。ということで、勝ち負けの計算を抜き出しました。クラスの切り出し方はシンプルで、この切り出した３つの関数をクラスにするだけです。その際、その関数はインターフェースを定義しておきましょう。この有用性については、また後で説明します。Main でそのままインスタンス化したコードを使ってもなんの得もないので、処理をまかなう部分を JankenService として切り出します。最後に、これはちょっと経験的に慣れなきゃわからないところかもしれませんが、Console.ReadLine とか、いわゆる環境依存なコードも分離したいところです。今回はこれ以上コードを増やしてもこんがらがってくるので省きますが、テストに必要なのでJankenChecker の Console.WriteLine だけは分離します。さて、コードが40行強から140行弱になって、管理しなきゃいけないコードが増えただけに見えて、ここまでやって一体何の得があるねん？ という話なわけですが、モジュール化の有用性を結構すぐに実感できるのがテストコードです。例えば今回、JankenChecker をまどろっこしい方法で書いた訳ですが、これ実際動くんかいな？ っていうのをテストしてみましょう。まずはこんな感じで、さっき作ったインターフェースを背負ったクラスを作ります。この時点で勘のいい読者なら気づくかと思いますが、テストコードを以下のように記述することができます。これを、xUnit の力でちょちょいと書いてあげると……これで勝ちルートはすべてチェックするコードができました。関数を抜き出したりして、ほかのルートもすべて確認してみましょう。別にすべてを一個の関数でテストしちゃってもいいんですが、結果の見やすさを優先して関数で分けてみました。テスト結果は以下のように表示されます。大丈夫そうですね。ここまでやってみて、オブジェクト指向の使い方というか、モジュール化することの有用性を体感して頂けたでしょうか。オブジェクト指向は難しい、とは言いますが、慣れちゃえば結構しょっぱなからインターフェイスを使ったコードを書くようになり、テストしやすいコードを書けるようになるかと思います（これをオブジェクト指向と呼ぶかは、皆さんの解釈にお任せします）。ただもちろん途中で書いたように、コード数は増えるので、どこからどこまでを分離するかはその時々で変わってきます。例えば、入力が変わるのを想定してPlayerGetter のチェック処理を分離するかもしれません。ただ、その変更がない場合徒労に終わることが多いので、YAGNIの法則をお忘れなきよう。皆さんもぜひ、オブジェクト指向を使ってエンバグしづらいコードを書いていきましょう。次回は「しょっぱなからオブジェクト指向」をやってみたいと思います。


