
using System;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading.Tasks;

[assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)]
[assembly: AssemblyVersion("0.0.0.0")]
internal class HelloWorld
{
    [StructLayout(LayoutKind.Auto)]
    [CompilerGenerated]
    private struct &lt;AsyncTest&gt;c__async0 : IAsyncStateMachine
    {
        internal DateTime &lt;before&gt;__0;

        internal DateTime &lt;after&gt;__0;

        internal AsyncTaskMethodBuilder&lt;string&gt; $builder;

        internal int $PC;

        private TaskAwaiter $awaiter0;

        public void MoveNext()
        {
            uint num = (uint)$PC;
            $PC = -1;
            string result;
            try
            {
                switch (num)
                {
                default:
                    return;
                case 0u:
                    &lt;before&gt;__0 = DateTime.Now;
                    Console.WriteLine((object)&lt;before&gt;__0);
                    $awaiter0 = Task.Delay(5000).GetAwaiter();
                    if ($awaiter0.IsCompleted)
                    {
                        break;
                    }
                    $PC = 1;
                    $builder.AwaitUnsafeOnCompleted(ref $awaiter0, ref this);
                    return;
                case 1u:
                    break;
                }
                $awaiter0.GetResult();
                &lt;after&gt;__0 = DateTime.Now;
                Console.WriteLine((object)&lt;after&gt;__0);
                result = &lt;before&gt;__0 + "-" + &lt;after&gt;__0;
            }
            catch (Exception exception)
            {
                $PC = -1;
                $builder.SetException(exception);
                return;
            }
            $PC = -1;
            $builder.SetResult(result);
        }

        [DebuggerHidden]
        public void SetStateMachine(IAsyncStateMachine stateMachine)
        {
            $builder.SetStateMachine(stateMachine);
        }
    }

    public static int Main()
    {
        string result = AsyncTest().Result;
        Console.WriteLine(result);
        return 0;
    }

    [DebuggerStepThrough]
    [AsyncStateMachine(typeof(&lt;AsyncTest&gt;c__async0))]
    private static Task&lt;string&gt; AsyncTest()
    {
        &lt;AsyncTest&gt;c__async0 &lt;AsyncTest&gt;c__async = default(&lt;AsyncTest&gt;c__async0);
        &lt;AsyncTest&gt;c__async.$builder = AsyncTaskMethodBuilder&lt;string&gt;.Create();
        ref AsyncTaskMethodBuilder&lt;string&gt; $builder = ref &lt;AsyncTest&gt;c__async.$builder;
        $builder.Start(ref &lt;AsyncTest&gt;c__async);
        return $builder.Task;
    }
}

