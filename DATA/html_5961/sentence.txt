More than 3 years have passed since last update.Funnel(ファンネル)アルゴリズムとは1辺を共有する三角形リストの始点から終点までの最短経路を求めるアルゴリズムです。
ダイクストラ法やA*から得られた経路を平滑化する方法として使用されています。
Funnelは日本語で漏斗の意味です。
言葉通り漏斗をイメージしながら解いていくアルゴリズムです。※この記事ではソースコード上でArray型となっているものを～配列、それ以外のコレクションを～リストと表記しています。
  また、ベクトルやクオータニオンの演算に対してある程度知識があることを前提としています。前後の三角形から共有辺を探してリストにします。共有辺が見つからない場合は連結してないので失敗とします。最初の三角形の頂点のうち、共有辺と向かい合う(共有辺に含まれない)頂点が始点となる[赤]を左側の頂点、[青]を右側の頂点 とします。この場合、現在の共有辺の下側の頂点が右側の頂点配列の末尾と一致するので、右側の頂点配列に追加します。
反対側の頂点は左側の頂点配列に追加します。始点同様、終点は最後の三角形の頂点のうち、直前の共有辺に向かい合う頂点を採用します。最終的には以下のようになります。※ここで重複する点を削除しないことが重要になります。先ほど作成した3次元配列のコピーを作成します。
コピーするだけなので2次元配列といってもこの段階では3次元座標が入っています。
3次元配列は2次元から3次元に復元する際に必要なので、そのまま保持します。先ほどコピーしたものを2次元に変換していきます。イメージとしては三角形リストの連結部分(折れている箇所)を順番に伸ばして平行にしていく感じです。
起点となる点に対し、共有辺を軸として対象の点を回転させます。対象の点を回転した後は、現在の共有辺以降の全ての頂点に同じ回転を適用させます。
これを始点まで繰り返すことで全ての頂点が同一平面上に展開されます。
※通常の展開図作成アルゴリズムでは重なりを考慮する必要がありますが、ここでは気にしなくて良い問題です。同一平面上に展開できたので、今度はXY平面上に変換します。
まずは始点を原点に移動する平行移動量と、現在の面をXY平面に重なるように回転する回転を求めます。
全ての頂点に対して求めた平行移動と回転を適用します。これでFunnelアルゴリズムを適用する準備が整いました。Funnelの先端(以下Apex)は次の情報を保持します
・2次元頂点配列のインデックス
・座標 (インデックスから所得できるが説明のしやすさのため)
・左か右かのフラグ左右の頂点リストはそれぞれ対応するサイドの2次元頂点配列のインデックスをリストとして保持します。最初のFunnelは次のようになります。
Apex → 始点
左側の頂点リスト → [1]
右側の頂点リスト → [1]左右の頂点リストはそれぞれ対応するサイドの2次元頂点配列のインデックスをリストとして保持します。最初のFunnelは次のようになります。
Apex → 始点
左側の頂点リスト → [1]
右側の頂点リスト → [1]Funnelの左右どちらかの頂点リストを1つ進めます。
このとき2つのことをチェックします。Funnelが絞られる場合は頂点リストを一度クリアしたあとに追加します。
なぜかというと、Apexから追加する頂点まで直進する場合に、現在のFunnelの壁と衝突することがないからです。Funnelが絞られるかの判定は
[1]のベクトルと [1]のベクトルの内積と
[2]のベクトルと [1]のベクトルの内積を比較します。反対側の頂点リストを追い越す場合は、追い越された頂点をApexに設定して、左右の頂点リストを初期化します
このとき以前のApexをリストに追加します追い越しの判定は
Apexから反対側の頂点への[ベクトル]に対する 先端から対象の頂点への[ベクトル]の外積を比べることで判定します。これを終点まで繰り返し、Apexの座標を結べば2次元での最短経路が求まります。処理の都合上、大まかな流れでの以下の工程をまとめて、パスを生成する工程とします。2次元の場合は必要ないですが、3次元の場合は求めた経路と共有辺の交点が必要になります。(理由はデモ動画をご覧いただければわかるかと思います)
交点の計算は単純に2直線の交点を求めるだけでよいのですが、3次元に復元するときにもとの座標を保持していないため工夫が必要です。
いろいろ方法はあると思うのですが、筆者がとった方法は、2次元上で片方の頂点からの距離の割合を保持しておき、3次元に復元した後に適用して交点を求める
方法を採用しました。また、求めた経路上の法線も求めておくと何かと使えそうなので、一緒に法線も計算しています。
※法線の計算は言葉で説明するのが難しいのでコードを読んで頂いたほうが分かりやすいかと思います。
あとは、保持していた3次元頂点配列から対応する座標に変換して3次元に復元して完了です。青色のラインは法線です。今回作成したプロジェクトをGitHubで公開しています。※メインロジックはある程度テストして本記事に合わせてコメントを書いていますが、Editor拡張などの箇所は適当にサクッと実装したので挙動が不自然な箇所があります。
デモのモデルはProBuilderを使用しています。一応メインのソースコードも載せておきます。今回記事を書くにあたって、説明しやすいように処理を冗長に書いたり、変数を多くしたりしているので、最適化の余地がかなりあります。(左右の配列をまとめるなど)
また、Funnelアルゴリズムを3Dに適用するロジックは筆者が考えたものであり、他に最適なアルゴリズムが存在するかもしれません。
あくまで1つの方法として捉えて頂ければと思います。


