More than 5 years have passed since last update.PropertyGridにいろいろ出力して値が見れて便利！→でも上手くコピペできないじゃん。
値のところを範囲選択して何とかコピペしてみるけど、やっぱりプロパティ名＋値でツリーっぽくなってほしい。ここでは、複数回に分けて、PropertyGridのコピペ機能拡張に挑んでみます。
本記事では、比較的容易で効果の高い方法で拡張を行っていきます。
大まかに分けて以下の機能を追加します。
1. プロパティ名＋値のコピー
2. ツリー構造でコピー
3. LINQPad連携 (HTML表示)
第2回はこちら http://qiita.com/longlongago_k/items/a58e7b5e57e02d90e544まずはUIから作成していきます。右クリメニューを作成します。
1. デザイナを開き、ツールボックスからContexMenuStripをD&amp;Dして追加します。
2. カスタムコントロールの時はなぜかグラフィカルに編集できないので、Itemsプロパティを直接編集して"選択した項目をコピー"と言うようなメニューを追加します。
3. デザイナの何もないところをクリックするかプロパティビューの上の欄から選ぶかしてPropertyGridPlus本体を選択します。ContexMenuStripに2.で作成したContexMenuStripを設定します。この時点で適当なフォームにPropertyGridPlusを張り付けると以下のようになっています。細かいところは適当にチューニングしてください。

4. 3.で作成したメニューのClickイベントとコピー用テキスト生成関数を作成します。Clickイベントはデザイナから作れなかったのでコードで入れています。PropertyGridで現在選択している項目はGridItem型のSelectedGridItemで取得できます。SelectedGridItemを入力として、コピー用テキストを生成するCreateTextを作成します。今後色々機能を追加するので引数は少し賑やかになっています。詳しくはコメントを見てください。この時点で選択した項目がいい感じにコピーできるようになっています。ツリー構造でコピーする際は、以下について考慮する必要があります。
1. どの深さまでツリーを展開するかを設定できるようにする必要がある
2. ”①前方のスペース”＋”②プロパティ名”＋"③後方のスペース"＋"値"の構成でテキストを生成する必要がある。①についてはツリーの深さ分タブを入れればよいです。③については、一番深いアイテムの深さを1.も考慮した上でカウントする必要があります。を入力として一番深いアイテムの深さを取得します。再帰処理で一段ツリーを展開するごとに深さ+1をするような処理になっています。コードは以下のようになります。インデント有り版と無し版で関数を分けました。ここでのポイントは、stringのコンストラクタでn個の文字を生成するすることができる事です。new string('\t', 3); //タブを3個生成これまで組んだコードで生成したテキストをクリップボードへコピーします。これは簡単で、Clipboard.SetText()するだけです。コンテクストメニューに対して適当にコピー設定のバリエーションを作るか、コピー設定ダイアログ等を作ってCreateText()を呼び出してください。
以下は実装例です。
サンプルプロジェクトファイルは下記になります。zipがアップロードできなかったので、拡張子をjpgに変えています。
右クリックから保存してjpg→zipにリネームしてください。



