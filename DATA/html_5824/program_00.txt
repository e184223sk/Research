    class Cards {
        private List&lt;int&gt; data;
        public Cards(string input) {
            this.data = new List&lt;int&gt;();
            foreach (var s in input.Split(' ')) {
                this.data.Add(int.Parse(s));
            }
        }
        public int value {
            get {
                if (!this.isValid) return 0;
                int sum = 0;
                foreach (var i in clone) {
                    if (i == 1) {
                        sum += 10;
                    }
                    sum += i;
                }
                //バーストしてて1が手役にあったらバーストしない最大数まで減算
                if (sum&gt;21 &amp;&amp; clone.Any(i =&gt; i == 1)) {
                    double cc = Math.Min(Math.Ceiling((sum - 21) / 10f), (double)clone.Count(i =&gt; i == 1));
                    sum -= (int)cc * 10;
                }
                return sum;
            }
        }
        public bool isValid { get { return data.FirstOrDefault() &gt; 0; } }
        public bool isBlackjack { get { return this.value == 21; } }
        public bool isBurst { get { return this.value &gt; 21; } }
        public int mergin { get { return 21 - this.value; } }
        public IEnumerable&lt;int&gt; List {
            get {
                foreach (var i in this.data) yield return i;
            }
        }
    }

