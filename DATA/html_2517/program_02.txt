
namespace MyEngine
{
    using System;

    /// &lt;summary&gt;
    /// データ集計管理クラス
    /// &lt;/summary&gt;
    public class Aggregate&lt;T&gt; where T : struct, IComparable, IFormattable, IConvertible, IComparable&lt;T&gt;, IEquatable&lt;T&gt;
    {
        #region Properties

        /// &lt;summary&gt; 合計値 &lt;/summary&gt;
        public T Sum { get; private set; }

        /// &lt;summary&gt; 平均値 &lt;/summary&gt;
        public T Average { get; private set; }

        /// &lt;summary&gt; 集計データのサンプル数 &lt;/summary&gt;
        public int SampleNum { get; private set; }

        #endregion


        #region Constructor

        public Aggregate()
        {
            Clear();
        }

        #endregion


        #region API

        /// &lt;summary&gt;
        /// 集計データを初期化する
        /// &lt;/summary&gt;
        public void Clear()
        {
            SampleNum = 0;
            Sum = (dynamic)0;
            Average = (dynamic)0;
        }

        /// &lt;summary&gt;
        /// 集計データを追加
        /// &lt;/summary&gt;
        /// &lt;param name="data"&gt;&lt;/param&gt;
        public void Add(T data)
        {
            SampleNum++;
            Sum += (dynamic)data;
            Average = (dynamic)Sum / SampleNum;
        }

        #endregion

    }
}

