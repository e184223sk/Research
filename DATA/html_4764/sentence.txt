More than 3 years have passed since last update.最近、C#を学び始めました。
コードを書いているときに、引数にList型を持たせた関数を作成した際、以下のように書きました。しかし、これだと関数内でListの中の値が変更可能と知り、C++のconstのように関数内では変更できなくするようなものがないか調べました。使用環境は以下の通りです。指定した型のコレクションに対する単純な反復処理をサポートする列挙子を公開します。
引用先 IEnumerable(T) インターフェイス (System.Collections.Generic)内部でforeach文などを使用するときには便利だと感じました。しかし、関数内ではindex指定して値が得られませんでした。インデックスによってアクセスできる要素の読み取り専用コレクションを表します。
引用先 IReadOnlyList(T) インターフェイス (System.Collections.Generic)IReadOnlyList&lt;T&gt;はインデックス指定で値を得られました。関数内でも配列と同様に扱えるのは便利ですね。個人的な感想としては、IReadOnlyList&lt;T&gt;の方が、C++のconstに近いのかなと感じました。
ただ、両方ともキャスト変換すれば値が変更できますが、その点を考慮しなければ十分読み取り専用として使用できそうです。あと、余談でIReadOnlyList&lt;T&gt;はCountプロパティが使える点が IEnumerable&lt;T&gt;よりも優れていると思います。他にもあれば情報提供よろしくお願いします。sdkeiさんからの情報提供で、変更可能な方にキャストできなくするには、List.AsReadOnly メソッドを使用して ReadOnlyCollection 型のオブジェクトにすればいいという意見をもらいました。


