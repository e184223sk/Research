More than 3 years have passed since last update.重い処理はマルチスレッドとかマルチプロセスでPrallel処理を行う物とは良く聞く話。
じゃあ、どこまで速度が改善されるの?ということで、実測してみる。
(ついでに言語ごとの速度テストも)
Parallel処理は勿論のこと、それ以外のマルチスレッド処理が使えるものはそちらでもテスト。
HSP以外は標準ライブラリのみを使用する。OS:Windows7 32bit
コア数:4C++:Microsoft(R) C/C++ Optimizing Compiler Version 19.00.24215.1
D:DMD32 D Compiler v2.066.1
C#:Microsoft (R) Visual C# Compiler バージョン 1.3.1.60616
VB:Microsoft (R) Visual Basic Compiler バージョン 1.3.1.60616
Node.js:node v7.3.0
HSP:HSP 3.4
Python:Python 3.6.0
Ruby:Ruby 2.3.12000000000回及び5000000000回のインクリメント処理を4つに分けて行う。
言語ごとの実装は後述する。※HSP、Python、Rubyは処理時間がかかるため、処理量を100分の1(100ずつ加算)にし、その代わり計測時間を100倍としている。基本的にマルチスレッドやマルチプロセスは有効で、4倍までとは言わないものの大よそ2倍程度までは速度を引き上げられることを確認。
Threadを使ってもPrallelを使っても効力としては同程度。
必要ならどちらを使っても良いのかな。
ただし、PythonとRubyのマルチスレッドに関してはシングルスレッドとあまり変わる結果とはならなかった。Rubyは同時に一つまでしかスレッドを動かせないとか聞いたけれど、Pythonもそういうことなのかな。
ちなみにJavaScriptのPromiseについてはシングルスレッドなのでそのまんまという所。今回色々試していて、単純なループやインクリメントの速度も見てみた。
静的型付け言語については型の重要さが見て取れた。
データは録っていないが、インクリメントする場合は一般的に整数型の方が浮遊小数点型に比べ、早くなる傾向があるみたいだ。
また、同じ整数型でもlongよりもintの方が速くなる様子。
特にC++の速度の低下っぷりは著しい。
それでも、D、C#、VBと並んでいる位なので、遅くはないけど。あとは、D言語とC#の差異にはあれっ?と言う感じ。
C++とD言語はネイティブコンパイルなので、中間言語型の.NET言語に対しては明確な差が出ると思っていた。それと、C#とほぼ同じコードを書いているはずなのにVBが遅かったことにビックリというか残念だった。
生成されるアセンブリとか解読すれば原因はわかるのだろうか。次にNode.js。
静的言語勢に何だかんだ大差付けられていないあたり流石JITコンパイルといったところ。
なお、ビット論理和演算子("|")と0で小細工して内部的に整数型に固定させると僅かに速度が上がるみたい。
(asm.jsの型指定で使われているものらしい)
結果は載せてないけど、2000000000回の計算時点で100～200msの差が出ている。
しかし、計算回数が5000000000回の時では返って2倍くらい遅くなったのでそちらでは普通のインクリメントとした。
あとは、整数維持し続けると普通にオーバーフローする。HSP。
聞いていた話だけど、forマクロは非常に遅い。
コンパイルとは言っても結局はインタプリタ言語なため、速度はお察し。
intを使い続けるとオーバーフローするけど、doubleを使っても速度的に目立った大差はないみたいだ。Ruby、Python。
パフォーマンス的には似たり寄ったりなインタプリタ言語二つ。
Rubyの方が微妙に早いように見える。


