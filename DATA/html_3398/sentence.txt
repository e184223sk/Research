More than 1 year has passed since last update.だいぶ前に書いたフェードイン、アウトの記事をベースに話を進めます。フェードに使うパラメータは・フェードする際の色
・フェードにかかる時間
・フェード終了時の透明度この3種類です。上記のパラメータをひとまとめにして設定しやすくしようと頑張ってました。もう少し詳しく順を追って説明します。これで可能です。
フェードのパターンが1種類であれば、これで十分です。しかし、"フェードのパターンが複数ほしい"となりました。フェードのパターンが増え、それに応じてパラメータの数も増えます。
コードに落とし込むとこうなります。例)FadeIn、FadeOutの引数に0を渡した場合・panelColorのElement0のパラメータを利用
・fadeTimeのElement0のパラメータを利用
・aipha_PanelのElement0のパラメータを利用という形になります。少なければまだ耐えられますが、増えれば増えるほど
"非常に見づらく設定しづらいのでなんとかしたい"となりました。UnityのEditor拡張で、その名の通り自由に順番を入れ替えられるリストです。
参考記事ReorderableListを使えばパラメータをひとまとめにして設定画面が一目瞭然になるのでは？
と思い試してみました。すでにとてもわかりやすい解説記事があったので助かりました。実際にまとめたものがこちらです。
パラメータがリスト内のひとつの要素に収まっているので
非常にわかり易くなったかと思います。Editor拡張を利用するとコード自体は長くなりますが、
一度書いてしまえばその後なんども使う度に快適さを実感できる上に、
パラメータが増えても見やすさを維持しやすいので
労力分のメリットはあるかと思います。では、実装に移ります。
まずは、ひとまとめにしたいパラメータをつめこんだクラスを作成します。[Serializable]、[SerializeField]を使うことで
Editor拡張で利用できます。ひとまとめにしたクラスをReorderableListで使うために
パラメータを利用したいクラスへ配列として宣言します。先程配列として宣言したクラスを利用して
ReorderableListを作成します。次にReorderableListの要素内のパラメータを描画します。ひとつのScriptに・パラメータをひとまとめにしたクラス
・Editor拡張コード
・プロパティ拡張コード全てまとめてます。下記コードをコピペして
適当なゲームオブジェクトにアタッチしたら動かせます。2019/09/20 追記RectTransformの場合はSetParentで親子関係を設定する必要があるとのことだったので
修正しました。デバッグ用の機能も用意しました。要素のIndexを指定してあげる必要があります。Postprocessingを使いこなしていないのでそっちも使ってみようと思います。


