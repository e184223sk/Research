
using Newtonsoft.Json;
using System.Diagnostics;
using System.IO;
using System.Text;

namespace ConsoleApplication1
{
    public class Fuga
    {
        public string ClassText;
    }

    public class Hoge
    {
        public string Text;

        [JsonIgnore]
        public string IgnoreText;

        public Fuga fuga { get; set; } = new Fuga();
    }

    public class JSONSerializer&lt;Type&gt;
    {
        private string fileName;

        public JSONSerializer(string fileName)
        {
            this.fileName = fileName;
        }

        public void Write(Type obj)
        {
            var json = JsonConvert.SerializeObject(obj, Formatting.Indented);

            using (var sw = new StreamWriter(fileName, false, Encoding.UTF8))
            {
                sw.Write(json);
            }
        }

        public Type Read()
        {
            using (var sr = new StreamReader(fileName, Encoding.UTF8))
            {
                var data =  sr.ReadToEnd();
                return JsonConvert.DeserializeObject&lt;Type&gt;(data);
            }
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            string fileName = @"test.json";

            var obj = new Hoge();
            obj.Text = "hogetext";
            obj.IgnoreText = "ignoretext";
            obj.fuga.ClassText = "fugatext";

            var serializer = new JSONSerializer&lt;Hoge&gt;(fileName);

            serializer.Write(obj);

            Hoge readobj = serializer.Read();

            Debug.WriteLine($"{nameof(readobj.Text)} : {readobj.Text}");
            Debug.WriteLine($"{nameof(readobj.IgnoreText)} : {readobj.IgnoreText}");
            Debug.WriteLine($"{nameof(readobj.fuga.ClassText)} : {readobj.fuga.ClassText}");
        }
    }
}

