
using Photon.Pun;
using Photon.Realtime;
using UnityEngine;
using UnityEngine.UI;


public class PunSampleManager : MonoBehaviourPunCallbacks
{
    [SerializeField] private MeshRenderer _cubeMesh;

    [SerializeField] private Button _buttonRed;
    [SerializeField] private Button _buttonBlue;
    [SerializeField] private Button _buttonGreen;

    void Start()
    {
        RER.Instance.OnChangeColor += OnChangeColor;

        PhotonNetwork.GameVersion = Application.version;
        Debug.Log("connect");
        PhotonNetwork.ConnectUsingSettings();
    }

    public override void OnConnectedToMaster()
    {
        base.OnConnectedToMaster();
        Debug.Log("join");
        var roomOptions = new RoomOptions();
        PhotonNetwork.JoinOrCreateRoom("room", roomOptions, TypedLobby.Default);
    }

    public override void OnJoinedRoom()
    {
        base.OnJoinedRoom();
        Debug.Log("OnJoinedRoom");
        InitializeButtons();
    }

    private void InitializeButtons()
    {
        _buttonRed.interactable = true;
        _buttonBlue.interactable = true;
        _buttonGreen.interactable = true;

        _buttonRed.onClick.AddListener(() =&gt; RES.ChangeColor(CubeColor.Red));
        _buttonBlue.onClick.AddListener(() =&gt; RES.ChangeColor(CubeColor.Blue));
        _buttonGreen.onClick.AddListener(() =&gt; RES.ChangeColor(CubeColor.Green));
    }


    public enum CubeColor : int
    {
        Red,
        Blue,
        Green
    }

    private void OnChangeColor(CubeColor color)
    {
        Color change;
        switch (color)
        {
            case CubeColor.Red:
                change = Color.red;
                break;
            case CubeColor.Blue:
                change = Color.blue;
                break;
            case CubeColor.Green:
                change = Color.green;
                break;
            default:
                return;
        }

        _cubeMesh.material.color = change;
    }
}

