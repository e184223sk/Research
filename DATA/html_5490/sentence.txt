More than 3 years have passed since last update.①画面上のOBをすべて書き出す
②OBを動かすためのコントローラースクリプトを決める
③OBを自動生成するためのジェネレータースクリプトを決める
④UIを更新するための監督スクリプトを用意する
⑤スクリプトを作る流れを考える＜詳細＞
①：ゲームに出てくるオブジェクトを羅列する。
②：①のなかから動くオブジェクトを探す。動くOBにはコントローラースクリプトが必要。
③：ゲームプレイ時に生成されるOBを探す。プレイヤの移動や時間経過によって出現するものがこれに当てはまる。
④：ゲームのユーザーインターフェイスを操作したり進行状況を判断したりするために、ゲーム全体を見渡せるスクリプトが必要。
⑤：②→③→④の順。※引数に渡すx,y,zは、それぞれx軸、ｙ軸、ｚ軸を示す。つまり、x軸指定はバイクのハンドルを回すときの方向、ｙ軸は右ねじの法則の親指が上のときに動かす方向、ｚ軸は２Dならば左回転になる。※ちなみにGetMouseButtonUpはクリックを離した瞬間で、GetMouseButtonなら押している間、GetMouseButtonDownはクリックした瞬間にtrueを返す。あるスピードで回転してるものを少しずつ減算していくだけだと、一定の速さで減速するので不自然にみえてしまう。そのため、フレームごとにスピードに減衰係数（例えば0.96）を掛けてみると良い。この場合、線形でなく指数関数的に減速するので、自然に減速しているように見える。OBを指定の位置まで移動させたい場合
transform.Translate(x,y,z)を使用する。引数に指定した値は、その場所に移動するのではなく、現在地からの移動ベクトルを表す。難しいスクリプトでも、最初は簡単な動きから初めて徐々に機能を追加していくこと！UIとは、ゲームの状態や進行状況を表示するもの。UnityではuGUIというUI部品のライブラリが提供されているので、簡単に作ることができる。UIの作り方
①UIの部品をシーンビューに配置する。
②UIに書き換える監督スクリプトを作成する。
③監督スクリプトを作り、作成したスクリプトをアタッチする。Uiを使うときは頭に「using UnityEngine.UI; 」が必要だから忘れないように！GOの座標は「GO名.transform.position」で取得できる。ToString関数を使ってある２点間の距離を小数点第２位まで表示できる。数値を文字列に変換する関数。引数には数値を表示するときのフォーマットを指定することができる。自分以外のOBの持つコンポーネントにアクセスする方法
①Find関数でOBを探し出す。
②GetComponent関数でOBのもつコンポーネントを取得する。
③コンポーネントの持つデータにアクセスする。効果音再生
Obにコンポーネントを追加してクリップに再生したい音源をアタッチ。
スクリプトにPlay()関数を呼び出して完成。


