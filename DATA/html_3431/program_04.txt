
    private Vector3 turn; // 追加

    void Start ()
    {
        currentSpeed = GetComponent&lt;Rigidbody&gt;().velocity.z;
        turn = GetComponent&lt;Done_Mover&gt;().turn; // 追加
        StartCoroutine(Evade());
    }

    void FixedUpdate ()
    {
        float newManeuver = Mathf.MoveTowards (GetComponent&lt;Rigidbody&gt;().velocity.x, targetManeuver, smoothing * Time.deltaTime);
        GetComponent&lt;Rigidbody&gt;().velocity = new Vector3 (newManeuver, 0.0f, currentSpeed);
        GetComponent&lt;Rigidbody&gt;().position = new Vector3
        (
            Mathf.Clamp(GetComponent&lt;Rigidbody&gt;().position.x, boundary.xMin, boundary.xMax), 
            0.0f, 
            Mathf.Clamp(GetComponent&lt;Rigidbody&gt;().position.z, boundary.zMin, boundary.zMax)
        );
        float f = (90f &lt; turn.x &amp;&amp; turn.x &lt; 270f ? 1f : -1f) * (90f &lt; turn.y &amp;&amp; turn.y &lt; 270f ? 1f : -1f) * (90f &lt; turn.z &amp;&amp; turn.z &lt; 270f ? 1f : -1f); // 追加
        GetComponent&lt;Rigidbody&gt;().rotation = Quaternion.Euler (turn.x, turn.y, turn.z + GetComponent&lt;Rigidbody&gt;().velocity.x * tilt * f); // 修正
    }

