More than 3 years have passed since last update.for(;;)文はインデックスの指定や配列の長さが必要だったり、
終了条件を間違えたりするのでなるべく使いたくないです。for(;;)を使わずにインデックスにアクセスするとなると、JS の場合、Array.mapやArray.forEachなど配列の反復処理、C# の場合、LINQ が思いつきます。
ただ、（個人的にですが）匿名メソッドのブロック本体に長々書くのもなんかしっくりきません。（C#の場合List&lt;T&gt;.ForEachが非推奨の理由もあるようです。）そこで JS のfor...ofや C# のforeach...inでインデックスにアクセスする方法がないかなと考えてみました。。mapでインデックスと要素を持ったオブジェクトの配列を作り、それを分割代入で受け取ります。ラムダ式の戻り値のオブジェクト{}を囲む丸カッコ()は必須です。
メソッド本体が1ステートメントのラムダ式でオブジェクトを返す場合、
()で{}を囲まないと{}がラムダ式の本体のブロックとみなされます。欠点としてはmapが即時実行のため、mapとfor...ofの間で中間配列ができてしまいます。
極端に長い配列を処理する場合などメモリを圧迫する場合はやめたほうがよさそうです。LINQ のSelectで要素とインデックスのタプルのシーケンスを作り、分割代入で受け取ってます。
LINQ は遅延実行なので、Selectとforeachで中間配列が作られることはありません。Selectで匿名型new { c, i }のシーケンスを作ることもできますが、 JS と違い分割代入できません。foreachブロック中でx.cのようにアクセスしなければならず、普通のfor(;;)のほうがよさそうです。


