
using System;
using System.Collections.Generic;

class Base { }

class A : Base { }
class B : Base { }

class Program
{
    static void Main(string[] args)
    {
        var objects1 = new Base[] { new A(), new B() };
        var objects2 = new int?[] { 1, 2, 100, null, 1000 };

        var hoge = objects1.SelectMany(x =&gt; x as A);
        var huga = objects2.SelectMany(x =&gt; x);
    }
}


public static class FlatMapLikeExtensions
{
    public static IEnumerable&lt;U&gt; SelectMany&lt;T, U&gt;(this IEnumerable&lt;T&gt; source, Func&lt;T, U&gt; selector)
        where U : class
    {
        foreach (var item in source)
        {
            var v = selector(item);
            if (v != null) yield return v;
        }
    }

    public static IEnumerable&lt;U&gt; SelectMany&lt;T, U&gt;(this IEnumerable&lt;T&gt; source, Func&lt;T, U?&gt; selector)
        where U : struct
    {
        foreach (var item in source)
        {
            var v = selector(item);
            if (v.HasValue) yield return v.Value;
        }
    }
}

