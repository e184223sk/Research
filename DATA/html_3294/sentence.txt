More than 1 year has passed since last update.まず、ここでいうデータベースマイグレーションとは、アプリケーションで使うためのデータベーススキーマとデータを
作成するという意味(Ruby on Railsのアレ)としておく。dotnet系プロジェクトでのデータベースマイグレーションというと、真っ先に思いつくのがEntity Framework Core(EFCore)によるものだろう。
実際多くの場合で、EFCoreを使えば問題は無い。
だが、筆者の場合、クエリはほぼDapper経由で出しているため、クエリビルダ等は必要なく、欲しいものはマイグレーションのみとなる。
マイグレーションのみの用途となると、EFCoreは大がかりに見えて、個人的にはちょっと扱いにくいなと思った。そこで、よりマイグレーションのみに特化したライブラリは無いものかと探して、FluentMigratorを見つけた。
自分にとっては丁度良い規模感だったため、今回の記事で紹介する。先にも述べた通り、C#でデータベースマイグレーションを行うためのライブラリとなる。特徴としては、となる。最初のプロジェクトを作成して、実際にデータベースに適用するまでの流れを書く。なお、FluentMigratorは、記事執筆時点での最新版である3.2.1を基準に書く。
FluentMigratorはメジャーバージョンごとの変化が割と大きいので、注意すること。大きく分けると、に分けられる。まず、どのようにデータベースを作成するか(テーブル定義等)、というプロジェクトを作成する。
といっても、中身は通常のC#クラスライブラリプロジェクトである。マイグレーションクラスは以下のように作る。ポイントは、で、どれかが欠けると認識されなくなるので注意。
各マイグレーションは番号で識別され、同じ番号のものは二度実行されないようになっている。FluentMigratorでは、マイグレーション記述においては各RDBMSの違いを吸収できるように作られているが、ある特定のRDBの場合のみ特殊な処理をしたい(ストアドを登録したい等)時は、以下のようにする。ここでIfDatabase()の引数に何を指定できるかというと、公式ドキュメントのサポートデータベース一覧の"Identifier"、または"Alternative identifier"が使える。テーブル列を作成する時、null許可を指定するには以下のようにするここで、 明示的にnull許可を指定しない場合、not null指定がついてしまう ので、必ずnull許可指定は入れること。とりあえず試してみたい場合、FluentMigrator公式のコンソールアプリが存在するので、そちらを使用する。
3.2.1時点では、FluentMigrator.ConsoleとFluentMigrator.DotNet.Cli(dotnet-fm)の2種類が存在している。
前者がnuget.exe installでダウンロードして実行する用で、後者がdotnet global toolとなる。詳しいオプションはそれぞれ公式ドキュメントが存在するのでそちらを参照。ただ、接続文字列の指定の方法など、不便な所も多いため、公式では自分で実行アプリを作成するのが推奨されている。さて、前段では、どのようにマイグレーションが実行されるか定義しただけで、これ単体で実行ができるわけではない。
記述した情報に基づいて、実際にマイグレーションを実行するためのアプリケーションを作成する。中身としては、通常のdotnetアプリとなるが、以下の参照を追加する。対応アセンブリは以下のようになる。プロジェクトの設定が終わったら、実際にコードを書く。
大まかな手順としては、具体的なコードはこの辺り(github)。
また、公式ドキュメントにもサンプルコードがある。マイグレーション時に、何らかのパラメーターに基づいて動作させたい場合は、DIの仕組みを使うことになる。
マイグレーションの性質上、頻繁に使用する機能でもないが、それでも必要な場所では役に立つと思う。
具体的には以下のように行うまず、パラメーターのインターフェイスを定義する次に、マイグレーション側で、コンストラクタにインターフェイスを受け取る処理を追加する通常のDIと同じように、ServiceCollectionに対して設定を行う。以上を行うと、実行時にServiceCollectionで設定したインスタンスが、マイグレーション側のコンストラクタに渡されるので、
マイグレーション側は、それを元に動作を決定することが可能になる。基本的な使い方については以上になるが、FluentMigratorは実は結構細かいところまで設定出来たりする。
ほとんどはあまり調整することのないパラメーターではあるが、知っておいて損は無い。
内容的にボリュームがあるので割愛するが、 FluentMigrator公式コンソールアプリが何をやっているのか見れば、参考になると思う。今回紹介したFluentMigratorは、主流であるEntity Framework Coreを使用している場合にはほとんどの場合不要なものとなる。
しかし、結構細かいところまで制御が可能で、かつ規模感が動作を把握するのにちょうどいい感じなので、気に入った人は使ってみるのも良いかと思う。今回使用した実験コード等は、 https://github.com/itn3000/testfluentmigrator に置いておいた。気が向いたら更新するかもしれない。


