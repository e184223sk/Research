
// AppDataのパスを取得
var appdata = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
// Login Dataのパスを取得
var p = Path.GetFullPath(appdata + "\\..\\Local\\Google\\Chrome\\User Data\\Default\\Login Data");

if (File.Exists(p)) {
    Process[] chromeInstances = Process.GetProcessesByName("chrome");
    foreach (Process proc in chromeInstances)
        // Chromeを強制終了
        // これをやらないと「database is locked」エラーになる
        proc.Kill();

    // Login Dataファイルを読み込む
    using (var conn = new SQLiteConnection($"Data Source={p};")) {
        conn.Open();
        using (var cmd = conn.CreateCommand()) {
            cmd.CommandText = "SELECT action_url, username_value, password_value FROM logins";
            using (var reader = cmd.ExecuteReader()) {
                if (reader.HasRows) {
                    // マスターキーを取得
                    byte[] key = GetKey();

                    while (reader.Read()) {
                        // 空のデータは無視
                        if (reader[0].ToString() == "") continue;
                        // 暗号化されたパスワードをbyte配列で読み込む
                        byte[] encryptedData = GetBytes(reader, 2);
                        // 初期化ベクトルとパスワードデータに分離
                        byte[] nonce, ciphertextTag;
                        Prepare(encryptedData, out nonce, out ciphertextTag);
                        // パスワードの復号化
                        string password = Decrypt(ciphertextTag, key, nonce);

                        var url = reader.GetString(0);
                        var username = reader.GetString(1);

                        Console.WriteLine("Url : " + url);
                        Console.WriteLine("Username : " + username);
                        Console.WriteLine("Password : " + password + "\n");
                    }
                }
            }
        }
    conn.Close();
    Console.ReadKey(true);
    }
} else {
    throw new FileNotFoundException("Login Dataファイルが見つかりません");
}

