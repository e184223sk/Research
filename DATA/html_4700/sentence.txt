More than 3 years have passed since last update.みなさんはReactive Extensions(Rx)って知っていますか？
使ったことはなくても何となく聞いたことはあると思います。
Unityを使っている人ならUniRxというUnity向けのRxが存在するのでそちらのほうがなじみが深いかもしれません。
Rxは使いこなせば便利な機能ですがいったいどのように実装されているかがすぐにはわかりません。(個人の感想です)
今回は備忘録を兼ねて超シンプルなRxを実装していきます。そもそもRxを知らない方は以下の記事が参考になります。
こわくないReactive Extensions超入門Rxの根幹となるインターフェースとしてIObserverとIObservableが存在します。
IObservableはその名の通り観測対象のオブジェクト、IObserverは観測を行うオブジェクトです。これを超シンプルな形でクラスにしたものが以下のものです。
(インターフェースではなく直接クラスにしています。)とてもシンプルですね
Observer、Observableのどちらのクラスも空行を除けば実質3行しか存在しません。実際にこのObserverとObservableを使用してみましょうなにかよくわからないコードになりました
やってることはルートとなるObservableを作っていくつかObservableを繋げています。
これを実際に実行すると以下のような結果となります。うまくいっているような気がします前のセクションのサンプルだと何かよくわからない状態になっていますが、Rxの本番はここからです。
このObservableを拡張メソッドを使って拡張していきましょう。拡張メソッドについて:拡張メソッド - C# によるプログラミング入門Observableから流れてくる値を観測するためにいちいちObserverを作成するのは面倒です。
ラムダ式を渡せばいいように拡張しましょう。たったの一行ですこれを使うとこうなります。Observableから流れてくる値を加工できるようにしましょう。ジェネリクスとラムダ式が多く出てきて難しくなってきました
とにかくこれを使ってみましょう。劇的な改善ですObservableから流れてくる値をフィルタできるようにしましょう。これも難しいですがSelectとほぼ同じです。
同様に使ってみます。最初のサンプルを拡張メソッドバージョンで書き直してみましょう。いつものRxです
さらに余分なConsole.WriteLineを消してみましょう。(色々表示されなくなりましたが)たったの3行になりました!!!今回実装したものはあまりにもシンプルすぎて本家のRxとはほぼ別物です。
(SubscribeでOnNextしか使えないとかIDisposableではないとか機能が足りなさすぎるとか...)それでもコア部分のイメージは大体つかめると思います。
実際に書いて動かしてみるとより分かりやすいです。今回書いたソースコードは以下にあります。
yaegaki/Simple-Rx


