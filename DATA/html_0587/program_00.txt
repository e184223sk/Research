public static class ArithmeticStringExtension
{
    public static ArithmeticString ToArithmeticString(this string source) =&gt; new ArithmeticString(source);
}

public class ArithmeticString
{
    public static explicit operator string(ArithmeticString source) =&gt; source.ToString();

    public static explicit operator int(ArithmeticString source) =&gt; source.Value;

    public static implicit operator ArithmeticString(string source) =&gt; new ArithmeticString(source);

    public static ArithmeticString operator +(ArithmeticString a) =&gt; new ArithmeticString(a.Template, +a.Value);

    public static ArithmeticString operator -(ArithmeticString a) =&gt; new ArithmeticString(a.Template, -a.Value);

    public static ArithmeticString operator ~(ArithmeticString a) =&gt; new ArithmeticString(a.Template, ~a.Value);

    public static ArithmeticString operator ++(ArithmeticString a) =&gt; new ArithmeticString(a.Template, a.Value + 1);

    public static ArithmeticString operator --(ArithmeticString a) =&gt; new ArithmeticString(a.Template, a.Value - 1);

    public static ArithmeticString operator +(ArithmeticString a, int i) =&gt; new ArithmeticString(a.Template, a.Value + i);

    public static ArithmeticString operator +(int i, ArithmeticString a) =&gt; new ArithmeticString(a.Template, i + a.Value);

    public static ArithmeticString operator -(ArithmeticString a, int i) =&gt; new ArithmeticString(a.Template, a.Value - i);

    public static ArithmeticString operator -(int i, ArithmeticString a) =&gt; new ArithmeticString(a.Template, i - a.Value);

    public static ArithmeticString operator *(ArithmeticString a, int i) =&gt; new ArithmeticString(a.Template, a.Value * i);

    public static ArithmeticString operator *(int i, ArithmeticString a) =&gt; new ArithmeticString(a.Template, i * a.Value);

    public static ArithmeticString operator /(ArithmeticString a, int i) =&gt; new ArithmeticString(a.Template, a.Value / i);

    public static ArithmeticString operator /(int i, ArithmeticString a) =&gt; new ArithmeticString(a.Template, i / a.Value);

    public static ArithmeticString operator %(ArithmeticString a, int i) =&gt; new ArithmeticString(a.Template, a.Value % i);

    public static ArithmeticString operator %(int i, ArithmeticString a) =&gt; new ArithmeticString(a.Template, i % a.Value);

    public static ArithmeticString operator &amp;(ArithmeticString a, int i) =&gt; new ArithmeticString(a.Template, a.Value &amp; i);

    public static ArithmeticString operator &amp;(int i, ArithmeticString a) =&gt; new ArithmeticString(a.Template, i &amp; a.Value);

    public static ArithmeticString operator |(ArithmeticString a, int i) =&gt; new ArithmeticString(a.Template, a.Value | i);

    public static ArithmeticString operator |(int i, ArithmeticString a) =&gt; new ArithmeticString(a.Template, i | a.Value);

    public static ArithmeticString operator ^(ArithmeticString a, int i) =&gt; new ArithmeticString(a.Template, a.Value ^ i);

    public static ArithmeticString operator ^(int i, ArithmeticString a) =&gt; new ArithmeticString(a.Template, i ^ a.Value);

    public static ArithmeticString operator &lt;&lt;(ArithmeticString a, int i) =&gt; new ArithmeticString(a.Template, a.Value &lt;&lt; i);

    public static ArithmeticString operator &gt;&gt;(ArithmeticString a, int i) =&gt; new ArithmeticString(a.Template, a.Value &gt;&gt; i);

    public ArithmeticString(string source)
    {
        var s = Regex.Replace(source, @"[{}]", a =&gt; a.Value + a.Value);
        var match = Regex.Match(s, @"(.*?)(\d+)(.*)");
        if (match.Success)
        {
            Value = int.Parse(match.Groups[2].Value);
            Template = $"{match.Groups[1].Value}{{0:{new string('0', match.Groups[2].Length)}}}{match.Groups[3].Value}";
        }
        else
        {
            Value = 0;
            Template = s + "{0}";
        }
    }

    public ArithmeticString(string template, int value)
    {
        (Template, Value) = (template, value);
    }

    public string Template { get; private set; }
    public int Value { get; private set; }

    private string text;

    public override string ToString() =&gt; text ??= string.Format(Template, Value);
}

