More than 1 year has passed since last update.前回に引き続きASP.NET Coreを学習メモです。今回はASP.NET Core MVC の規定ビューエンジンのRazorの基礎について学んでいきます。ASP.NET Core MVCのRazor（ビューエンジン）はHTML形式のテンプレートを表現するために使用されるマークアップ言語です。
RazorはView関数の呼び出しによって起動され、拡張子cshtmlファイルが最終的にHTMLレイアウトで表示されるデータを含んだビューモデルオブジェクトを返します。Razorの中でC#でコードを記述でき、.NET開発者にとって親和性が高いです。JavaのSpringで例えるならThymeleaf, FreemarkerASP.NET Coreプロジェクトには通常Viewsというフォルダがあり、Razorのテンプレートはその配下に配置します。各テンプレートの配置先は使用するコントローラーの名前が付いたフォルダでなければなりません。
Controllerでreturn View(); を指定した場合、MVCフレームワークは以下の順序でテンプレートエンジンを検索します。暗黙指定ViewNameを何も指定しない場合、ActionName="Index"でcshtmlを検索します。ViewNameを指定ViewNameを"ABC"で指定した場合、Views/Home/ABC.cshtmlでcshtmlを検索します。明確指定この場合、指定したファイルパスで検索します。Razorビューにデータ渡すには3つの方法があり、2つの組込ディクショナリ(ViewData, ViewBag)、もしくは強く型指定されたViewModelを使用します。@injectディレクティブという方法もありますが、あんまり一般的ではないのでここで特段扱いません。3つの方法いずれもデータバインディングの機能を実現できますし、パフォーマンスに関してもごくわずかな差です。
しかし、設計、保守性観点ではViewModelを使用するほうがMicrosoftから強く推奨されています。Controllersフォルダ配下でRenderDataControllerを作成します。Viewsの配下にRenderDataのフォルダを作成します。ViewDataは典型的な名前と値のペアからなるディクショナリです。RenderDataControllerでViewDataDemoアクションメソッドを作成します。Viewsの配下にRenderDataのフォルダの配下にViewDataDemo.cshtmlを作成します。F5でアプリ起動し、/renderdata/viewdatademo へアクセスを行うと、下記の画面が表示されます。ViewBagもController基底クラスで定義され、その内容がビュークラスに自動的に書き込まれるプロパティです。RenderDataControllerでViewBagDemoアクションメソッドを作成します。Viewsの配下にRenderDataのフォルダの配下にViewBagdemo.cshtmlを作成します。F5でアプリ起動し、/renderdata/viewbagdemo へアクセスを行うと、下記の画面が表示されます。ViewData, ViewBagより厳密に型指定されるのがViewModelです。Razorの中で@modelでクラスをし、Modelのキーワード使うことでデータ表示できます。Microsoftがもっとも推奨されるやり方です。（大事なことなので、2回言います）Modelsフォルダ配下のPersonクラスを下記のように修正します。RenderDataControllerでViewModelDemoアクションメソッドを作成します。Viewsの配下にRenderDataのフォルダの配下にViewModeldemo.cshtmlを作成します。F5でアプリ起動し、/renderdata/viewmodeldemo へアクセスを行うと、下記の画面が表示されます。今回作成したソースコードです。GitHubリポジトリでは！！( ｀ー´)ノ


