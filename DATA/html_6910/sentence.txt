More than 3 years have passed since last update.Gmail APIを触る際にBase64urlのエンコード・デコードを行う必要があったため、C#(.Net Framework)でBase64urlのエンコード・デコードについて調べました。Visual Studio 2015 Community
.NET Framework 4.5.2Base64urlは64種類の英数字を用いた形式であるBase64エンコード方式に対してURLが含まれていても問題がないように(URL safe)、以下の変換を行うエンコード方式です。RFC4648にて定められています。
 * 「+」を「-」に置き換える。
 * 「/」を「_」に置き換える。
 * パディング(=)を入れない(ただし、暗黙的にデータ長がわかっている場合に可能)参考：
https://en.wikipedia.org/wiki/Base64
https://tools.ietf.org/html/rfc4648#section-5パディングは規格等によりますが、入れないとしている場合が多いようです。参考：
https://tools.ietf.org/html/rfc6920#section-3
https://tools.ietf.org/html/rfc7636#section-3
https://tools.ietf.org/html/draft-ietf-jose-json-web-signature-40#section-2パディングを入れない場合で実装してみます。.Net Frameworkにbase64エンコード・デコードするメソッドが存在するので、エンコード後及びデコード前にbase64urlの対応を行う事でbase64urlエンコード・デコードを行うことができます。上記サンプルコードを実行すると以下の出力結果となります。エンコード・デコードについての解説です。現在の文字コード(サンプルコードではUTF-8)に合わせてデコードしたbyte配列をConvert.ToBase64Stringメソッドに渡すことでbase64にエンコードします。更にbase64urlに変換するため「+」を「-」に、「/」を「_」に置換します。また、base64に変換した直後はパディング(=)が存在するため、パディングを除去します。参考：
https://msdn.microsoft.com/ja-jp/library/dhx0d524(v=vs.110).aspxエンコードで行ったことの逆処理を行います。
「-」を「+」に、「_」を「/」に置換します。また、文字列長が4の倍数となるようにパディング(=)を追加します。その後変換した文字列をConvert.FromBase64Stringメソッドに渡す事でデコードされるので、任意の文字コード(サンプルコードではUTF-8)にエンコードします。参考：
https://www.facebook.com/notes/たまておどり本舗/cでfacebookページのいいね判定をおこなう方法-base64url-decodehmac-sha-256/204921202914775/
https://msdn.microsoft.com/ja-jp/library/system.convert.frombase64string(v=vs.110).aspxMicrosoft.Owin.SecurityにBase64urlエンコード・デコードを行うメソッドがあるのでこれらを使用することでもbase64urlエンコード・デコードを行うことができます。ライセンスはMICROSOFT SOFTWARE LICENSE TERMSです。参考：
https://msdn.microsoft.com/en-us/library/microsoft.owin.security.datahandler.encoder.textencodings.base64url(v=vs.113).aspxあらかじめ、パッケージマネージャーでInstall-Package Microsoft.Owin.Securityを実行してnugetからパッケージを取得する必要があります。パッケージマネージャはメニューから[ツール]⇒[NuGetパッケージマネージャー]⇒[パッケージマネージャーコンソール]で表示されます。上記サンプルコードを実行すると最初のサンプルコードと同じように以下の出力結果となります。エンコード・デコードについての解説です。現在の文字コード(サンプルコードではUTF-8)に合わせてデコードしたbyte配列をBase64UrlTextEncoderクラスのインスタンスのEncodeメソッドに渡すことでエンコードします。Base64UrlTextEncoderクラスのインスタンスのDecodeメソッドに文字列を渡すことでデコードされるので、任意の文字コード(サンプルコードではUTF-8)にエンコードします。C#でBase64urlエンコード・デコードについて記載しました。RFC4648の記載が条件付きでパディング外すというのが厄介ですね。
それために言語サポートする場合に議論が起きているみたいです。
パディング必須な例が見つからなかったのでなんとも言えませんが。https://github.com/golang/go/issues/4237
https://bugs.ruby-lang.org/issues/10740また、パディング無しがメジャーなみたいなのでパディングについて記載が無い場合にBase64url変換してますという記載がある場合はパディング無しと見なした方がいいかもしれません(Gmail APIもパディング無しでした)。


