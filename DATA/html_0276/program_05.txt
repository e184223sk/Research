
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Text;
using ConsoleApp6;

public class Person : IEquatable&lt;Person&gt;
{
    protected virtual Type EqualityContract
    {
        [System.Runtime.CompilerServices.NullableContext(1)]
        [CompilerGenerated]
        get
        {
            return typeof(Person);
        }
    }

    public string FirstName { get; init; }
    public string LastName { get; init; }

    public override string ToString()
    {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.Append("Person");
        stringBuilder.Append(" { ");
        if (PrintMembers(stringBuilder))
        {
            stringBuilder.Append(" ");
        }
        stringBuilder.Append("}");
        return stringBuilder.ToString();
    }

    protected virtual bool PrintMembers(StringBuilder builder)
    {
        builder.Append("FirstName");
        builder.Append(" = ");
        builder.Append((object?)FirstName);
        builder.Append(", ");
        builder.Append("LastName");
        builder.Append(" = ");
        builder.Append((object?)LastName);
        return true;
    }

    [System.Runtime.CompilerServices.NullableContext(2)]
    public static bool operator !=(Person? r1, Person? r2)
    {
        return !(r1 == r2);
    }

    [System.Runtime.CompilerServices.NullableContext(2)]
    public static bool operator ==(Person? r1, Person? r2)
    {
        return (object)r1 == r2 || (r1?.Equals(r2) ?? false);
    }

    public override int GetHashCode()
    {
        return (EqualityComparer&lt;Type&gt;.Default.GetHashCode(EqualityContract) * -1521134295 + EqualityComparer&lt;string&gt;.Default.GetHashCode(FirstName)) * -1521134295 + EqualityComparer&lt;string&gt;.Default.GetHashCode(LastName);
    }

    public override bool Equals(object? obj)
    {
        return Equals(obj as Person);
    }

    public virtual bool Equals(Person? other)
    {
        return (object)other != null &amp;&amp; EqualityContract == other!.EqualityContract &amp;&amp; EqualityComparer&lt;string&gt;.Default.Equals(FirstName, other!.FirstName) &amp;&amp; EqualityComparer&lt;string&gt;.Default.Equals(LastName, other!.LastName);
    }

    public virtual Person &lt;Clone&gt;$()
    {
        return new Person(this);
    }

    protected Person(Person original)
    {
        FirstName = original.FirstName;
        LastName = original.LastName;
    }

    public Person() { }
}

