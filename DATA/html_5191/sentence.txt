More than 3 years have passed since last update.2018.05.10 皆様、いろいろとコメントいただきありがとうございます。
アドバイスの結果できあがったより最適な実装をコメント欄で書いております。
経緯がわかるように元記事はそのまま残していますが、正しい実装としてはコメント欄のほうをご参考ください。下記、@tobigitsuneさんの記事を参考に、1行ずつCSVファイルを取り込む場合を想定した実装についてまとめてました。https://qiita.com/tobigitsune/items/10d6ef4a1f0682c01889当方、プログラミング初級者の上、Qiita初投稿となりますのでお見苦しい点多々あるかと思いますが、色々とご意見いただけますと幸いです。EntityFrameworkを用いたWebアプリケーションにて、アップロードされるCSVファイルの行数が非常に多いため、一行ずつDBに取り込むという状況を想定します。
また、アップロードされるCSVファイルはいくつか異なる種類があるため（日々の売り上げデータ、顧客のアクセス情報、在庫管理etc...)、できるだけ再利用性の高い実装を目指すという前提です。コントローラからMoveNext()メソッドを実行コントローラーからCurrentを読み込む4,5をMoveNext()がfalseになるまで繰り返す行末まで読み込んだらUploadのViewを表示する (Views/Upload.cshtml)ここは@tobigitsuneさんの実装をそのまま使わせていただきました。
まずはLineDataという抽象クラスを定義します。次に、このLineDataを継承し、CSVデータをどのようにバインドするかを実装したクラスを作ります。今回はDBにADDRESS_MASTERというテーブルが存在し、そのテーブルと同じデータの並びになっているCSVファイルを取り込むという状況を想定しています。ちなみにこのAddressMasterLineDataのフィールド名は、EntityFrameworkによって自動生成されるModelクラスのフィールド名と同じにしておいてください。後述するバインドの際に必要となります。今回の本題と言える部分です。コンストラクタでStreamを引き取り、MoveNext()というメソッドが呼ばれると1行読み込んだデータをジェネリックに従ってバインドします。途中、LineDataからModelへ力技でバインドしています（両者のフィールド名を順番に見ていき、一致したら代入）。もっとシンプルな実装の仕方をご存知のかたがいらっしゃいましたら、教えていただけますと幸いです。。。データをIOする状況が整ったので、全体を動かすコントローラを実装します。以上となります。(Viewは割愛)職場の先輩から「大量のCSVデータを取り込むと想定して、1行ずつ読み込むときにどう実装したらいいいか考えながらやってみて」という指示を受けて実装してみました。自分としては下記がその答えになったかなと思っています。
- ジェネリックで指定できる
- CSVに合わせて、LineDataの継承クラスを用意する以外は大きな実装の必要がない
- 変更があった際も↑の継承を変更するだけでよい逆に、データのフォーマットがもっとシンプル（カラムが2列しかない）だったり、種類もさほど多くないという想定であれば、上記のような実装は大げさすぎるかなとも思います。参考にさせていただいた@tobigitsuneさんに、改めて御礼申し上げます。ありがとうございました。
今後ともよろしくお願いいたします。


