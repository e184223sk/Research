More than 1 year has passed since last update.Unityなどでクオータニオンを目にする機会は多いと思いますが、なんで使うのかはわからないけど便利だから使うみたいなことはよくあると思います.そこで少しでもクオータニオンを使うメリットをかければいいなと思っています！
さっそくクオータニオンを使う大切な事実として任意の回転は１つの軸で表現できるということがあります.いまいち、ぴんとは来ないかも知れませんが、これがクオータニオンを使う最大のメリットであり理由なのではないかなと思っています.例えば、空にいる飛行機を見るとします、そのときオイラー角を用いた回転ではx、y、z、の基本軸に対して何度回転させるかということが必要になってくると思いますが、それは意外とめんど臭いことなんです.このめんど臭く感じる感覚はクオータニオンについてなんとなくわかってきたら理解できるはずです.ではクオータニオンを用いたらどのようになるかというと、目的へのベクトルがわかれば回転できてしまうということです.クオータニオンによる回転は原点中心なので回転させたいオブジェクトの座標から引いてから回転させ、最後にもう一回足してあげてます.
もう１つ大切なこととしてクオータニオンの回転度数は度数法を用いています.またベクトルとクオータニオンの積で回転を示していますが、実際の計算ではこのようになっています.LookRotation関数は目的のベクトルへ回転させるためのクオータニオンを取得します.その回転を表すクオータニオンを随時更新して、Slerp関数（球面補完してくれる関数）を用いて回転させています.
またLookRotation関数の第1引数は正面方向のZ軸、第2引数はY軸に相当します。それらの外積を求めてX軸を求め、Z軸ともとまったX軸の外積を求めることで正確にY軸を求めることでその座標系への回転を表すクオータニオンを算出しているみたいです.よくクオータニオンについて書いてあるサイトを眺めているとこんなことが書いてあります.『クオータニオンを使うことでジンバルロックの影響を受けない』 ....急にこんなことを言われても困りますよね.そのためこれから自分が理解している範囲でジンバルロックがどんなものかということを書いて行こうと思います.ジンバル（ジンバル自体がよくわからない場合は下の参考の動画を！）の軸には親子関係があり、Z軸周りに回転するとY軸が、Y軸周りに回転するとX軸が回転します、X軸周りに回転しても、他の軸は回転しません。またそれぞれの回転角度はオイラー角における回転の順番（ヨー・ピッチ・ロール）と対応しています。（Z軸周りをヨー、Y軸周りをピッチ、X軸周りをロール）そして本題のジンバルロックの時の状態ですが、それはY軸に関して90度回転させ、X軸に関する回転軸がZ軸と被ってしまった時、回転順序の最後のX軸回転による制御ができなくなってしまことをジンバルロックというらしいです.参考：https://www.youtube.com/watch?v=zc8b2Jo7mnoオイラー回転は３軸を使って回転するのでこのジンバルロックがおこってしまいますが、クオータニオンは４元数なのでこの問題を解決してくれます.（４元数とは、4つの実数を組み合わせたもので、4つの要素のうち、ひとつは実部、残り３つは虚部）
冒頭で書いた任意の回転は１つの軸で表現できるということを思い出すとクオータニオンでは回転軸と回転角度がわかれば回転を表現することができる.つまりこれは二次元平面での回転に帰着するためジンバルロックがおきないのであると考えています.自分も数学的な部分で理解していない部分はありますが、この記事が何かの役に立てたらなと思います.また間違いなどがありましたらコメントください.


