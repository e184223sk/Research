More than 1 year has passed since last update.PLCでステージ動作を制御し、ラインカメラで撮影した画像で外観検査する装置を立ち上げることになりました。ラインカメラで大きな画像を扱うので64ビットでやりたいのですが、PLCは32ビットにしか対応していません。そこで、画像を扱う部分とPLC制御を別々のアプリにし、アプリ間で連携させることにしました。色々調べたところ、WCF(Windows Communication Foundation)というのが割と新しく、良さそうでした。 コメントでご指摘をいただきました。 将来的にサポートされないことが決まっているので、いい方法ではないかもしれません。
どのようにして実現したのかを紹介します。環境はWindows10、C#を使います。WCFは双方向通信もできますが、今回の用途ではクライアント側からサーバー側にリクエストを出す一方向通信で目的は達成できるので、無用にコードが複雑になるのを避けるため、一方向通信でやります。
大雑把な流れは下記のようになります。サーバー側（32ビット）クライアント側（64ビット）正しい説明かどうかは分かりませんが、大雑把なイメージで言うと、WCFではサーバー側とクライアント側で一つの共通のクラスを共有し、このクラスの実際の動作はサーバー側で行われ、クラスのメソッドの呼び出しはクライアント側から行われるもの、ということができると思います。
この「一つのクラスを共有する」の実現のために、サーバー側とクライアント側で共通のインターフェースを持ち、その中身はサーバー側にだけ記述する、というスタイルがとられているのだと思います。System.ServiceModel.dllの参照を追加します。
上述のように、インターフェースはサーバー側、クライアント側の両方で同じものを記述します。下記の例ではサーバー側で通信確立済みのPLCをつかむためにgrabPlc(), ステージ位置への移動と、現在位置の問い合わせのメソッドがあります。サービスコントラクトの各メソッドはクライアント側で呼び出されますが、中身が実行されるのはサーバー側です。インターフェースの中身はサーバー側にだけ記述します。grabPlc()以外のメソッドはdevPlcのメソッドをラップしているだけです。サーバー側ではPLCとの通信を確立した後、サービスホストをスタートしてクライアントからのリクエスト待ちの状態で待機します。devPlcをstaticにすることで上記のgrabPlc()が通信確立済みのPLCをつかむことができています。クライアントからのリクエストがしばらくない状態が続くとエラーが発生します。デフォルトでは10分間になっていてちょっと短いので、下記の例ではReceiveTimeoutを10日間に設定しています。クライアント側ではサーバー側と同じ名前付きパイプのバインディングを作り、これを使ってチャネルファクトリを作ってサービスコントラクトhostを作っています。
これ以降hostはローカルなクラスと同じ感覚で使用できます。以下のサイトを参考にさせて頂きました。ありがとうございました。


