本家動画はこちら
EP01～05はこちら
EP06～09はこちらEP10でREST API扱うんだけど、API叩くにもちょうどいいのがないので、この人の別動画
　ASP.NET Core Web API + Entity Framework Core
の基本を番外でまとめていくよ。(あとはこの人が公開してるサンプル(CuriousDrive/BookStores - GitHubの「SalesController.cs」)見たほうが早いかも )
(↑のサンプルよく見ずにVisualStudioが作るテンプレベースにしてたらハマった・・・)
(VisualStudioが作るテンプレだとAPIの戻り値がIEnumerable&lt;WeatherForecast&gt;になってるけど、これだとGetFromJsonAsyncで戻り値が取れん。APIの定義側も非同期に対応するためにTask&lt;ActionResult&lt;IEnumerable&lt;WeatherForecast&gt;&gt;ってせんとあかんかった)
(EntityFrameworkCoreと組み合わせたらもっと簡単な方法があった…(´・ω・`))
(DBコンテキスト継承したクラス作ってEntityFrameworkCoreで読み書きできる状態にした上で、プロジェクト内の任意のフォルダ右クリック→追加→コントーローラー→共通→API→Entity Frameworkを使用したアクションがあるAPIコントローラー、で一発で参照/追加/削除のWeb APIが生成された…)
(↑で生成したコントローラー、なんかうまく動かん…)
(「Startup.cs」の public void ConfigureServices(IServiceCollection services) の中に services.AddScoped&lt;AuthorContext&gt;(); を追加する必要があったわ。)
(クラスにバリデーションつけとけば勝手に文字列長とかチェックしてエラー返してくれるのイイね)
(ただやっぱり勉強用コードとは言え、DBエラーとか例外はちゃんとcatchしてエラーメッセージ返さないとエラー発生時が大変だわ)(動画は長いしSQLServer立てる必要もあるからSQLite使って今までの書き方みたく書いていこう。参考にしたのは
　Entity FrameworkでSQLiteを利用する方法とは とか
　Database.EnsureCreatedおよびDatabase.Migrateを呼び出す方法と場所 とか
　 Creating a Model for an Existing Database in Entity Framework Core とか
　VSCodeでRESTクライアントを使って効率的にAPIを呼び出す。 とか
　C# EntityFrameworkでIDENTITY属性を無効化する とか。)(動画ではGetJsonAsyncとPostJsonAsyncとPutJsonAsyncやったけど、.NET5でやってたらGetFromJsonAsyncとPostAsJsonAsyncとPutAsJsonAsyncやった。名前変わったんかな？)
(あと日本語とか含んでると文字のエンコード処理がうまくいかないからPostJsonAsyncとPutJsonAsyncは使えんかった。)(「_Imports.razor」に@using System.Net.Http.Json追加せな「GetFromJsonAsyncとか知らんで」って言われた。)
(無料の天気予報REST APIで試そうかとも思ったけど、これ用で作った方がシンプルかなぁ)
(→番外作成。地味にハマった・・・)(自分で試したときは一々別プロジェクト立ち上げるのが面倒だったので、同じプロジェクトにコントローラー追加した。なので呼び出しは↓みたいな感じに。)次は削除と更新をしてみよう。
(動画じゃ分けてるけどPUTとDELETEの違い程度なので一緒で。)まずは表の各行に「更新」と「削除」ボタンを付けるよ。
(動画じゃHTMLタグにスタイル直書きしてるけどイマイチだなぁ…せっかくだしSCSS試してみるか。それより先にBootstrap覚えよ)
とほほのBootstrap 4入門
(杜甫々さんのページ、HP作るのにHTML覚えた(1998年頃)以来に見るけどすごいコンテンツ増えてるなぁ)
(Bootstrap使うのはテーブルとボタンかなぁ。動画だとハイパーリンクだけどボタンにしとこ)(動画じゃSaveAuthorにif文追加してPOSTとPut分岐してるな。しかも動作は「Edit」押したらフォームに値設定→Saveで更新　か、上記だとフォームに入力→Edit押したら更新になるな。けどまぁRESTの動き見るだけだからまぁいっか)　　参考：AAD B2C使ってみた - slideshare　(業務アプリ作るならAzure AD使う方式が重宝しそう。SAMLとかOpenID Connectにも対応してくれたらうれしいんだけどなぁ)(パスワード要件(6文字以上、大文字小文字記号必須)がデフォルトで設定されてるのいいね)　(動画ではSQLServerって言ってるけど面倒だしSQLiteかなぁ)
　(SQL Serverって言ってもVisual Studioと一緒にインストールしたような気がするLocalDBだから別途インストールする必要ない(※)のか)
　※Visual Studioのインストールの時にオプション選んだかもしれないけど覚えてない　参考：
MicrosoftSQL Server 2016 Express LocalDB で気軽に DB を試す
(Visual Studio 2017からSQL Server Express 2016 LocalDBを使ってみる)[https://qiita.com/akabei/items/7f62056e44dd2d44f703](ブラウザ翻訳便利。そういえば１から作るのにMigrations(=移住/移行)ってなんか違和感あるよね。コードからDBへの移行ってこと？)
(うちの環境じゃ「Register confirmation(登録確認)」画面で「メール送れんかったよ、設定してね」みたいな表示になった。微妙なバージョンの違いかな？登録はできてるみたいでログインはできる)(何回かやってたらログイン失敗するようになった。ググってみたら「Startup.cs」のConfigureServices内の以下のoptions.SignIn.RequireConfirmedAccountをfalseに設定してメールによる確認を無効にする必要があるとか)↓(SQL Serverオブジェクトエクスプローラーじゃなくて汎用性を考えてサーバーエクスプローラーを使うんやね)(このGUIDって↓と関係してるっぽいな。ソリューション内Grepかけたらcsprojのファイルの中の「UserSecretsId」ってやつと一致した)
ASP.NET Core での開発におけるアプリシークレットの安全な保存(暗号化って言ってるけどハッシュやんな？復号化出来たら危ないんやけど…)(詳しくは書いてないけど、「Identity」フォルダ右クリック→追加→新規スキャフォールディングアイテム→ID、で登録できるみたい)(この辺の説明、自動翻訳だとメソッド名まで翻訳するから訳見ても意味が通らん…。この辺りは飛ばして、細かい仕組みの面は↓見てまた今度勉強しよ)
(CascadingAuthenticationState(数珠繋ぎの認証状態)って何やろ？)(ASP.NET Core Blazor の認証と承認)[https://docs.microsoft.com/ja-jp/aspnet/core/blazor/security/?view=aspnetcore-5.0]


