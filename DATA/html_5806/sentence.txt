後輩から、Javaのクラス継承について質問されたのですが、そらで即答できず、いろいろ調べてみました。旧＠IT会議室:変数の継承について読みにくいので抜粋同名変数がスーパークラスに存在する時に、スーパークラスのメソッドを 
実行したら同名変数はスーパークラスを参照しました。 
自クラスの同名変数を参照させるにはどのようにすればよいでしょうか? 以下サンプルソースです。 
「私は子供です。」と返ってくると思っていたものが「私は親です。」と返ってきました。 ※ １ファイルでコンパイルできるようにアクセス修飾子とクラス名を変更。こちらをみて、説明読んでもよくわからないとのことでした。見た瞬間思ったのが、JIBUNがprivateになっているので他のクラスからは参照できずParentとChildでは別ものだよ？ということでした。しかし、じゃあ、protected(public)だったらどうなの？という疑問が出てきたので、ちゃんと調べてみました。以下、テストに利用したソースです。
piza.io実行結果結果をまとめると以下になります。実は、もともとC#でオブジェクト指向を覚えたので、こちらのほうが書きやすかったです。piza.io今回は、メソッドのオーバーライドと隠ぺいがあるため、print2（オーバーライド）,print3（隠ぺい）があります。出力結果コンパイルエラー（ワーニング）結果をまとめると以下になります。まあ、その感覚はC#で養われたものなので、個人の感想です。C++についてはまじめにコーディングしたことがないため、ググりながら見よう見まねです。こちらも、print2,print3があります。paiza.io実行結果コンパイルエラー（ワーニング）は特にありませんでした。結果をまとめると以下になります。LL言語についてもこの際だから調査。
クラスが後付けっぽい感じのpythonです。いろいろと前提が異なるため、結構意味が違うソースになってしまいました。
ごめんなさい。
（JIBUN1,JIBUN2はクラスフィールドだったりとか）こちらも、print2,print3がありますが、書き分けられないので同じです。paiza.io実行結果結果をまとめると以下になります。まあ、感覚的にはわかりやすい気がしますね。LL言語でも、rubyはクラスを最初から設計したそうなので参考まで。
rubyちょこっとかじっただけです。こちらも結構意味が違うソースになっています。paiza.io実行結果結果をまとめると以下になります。クラスありきで設計したそうですが、クラス変数、クラスインスタンス変数がどうしてこうなったのか謎です。


