More than 3 years have passed since last update.　私はC#+WPFでよくアプリを作成していますが、ある時、「アプリの使用言語を切り替えられるようにしたい」といったことを考えました。
　少なくとも.NETの世界では、「表示データを配列で持っておいて選択肢毎に表示を切り替える」といったゴリ押しは 下策 らしく、WPFの場合はResources.resxを使用するのが定石とされています。
　じゃあそれでいいじゃん……と思いましたが、そこそこ手間取ったので備忘録としてこの記事にまとめることにしました。※使用したソースコードのリポジトリ→https://github.com/YSRKEN/MultiLanguageSample
※以下の記述は、ぐらばくさんの次の記事を相当参考にしています。文章も私の記事より遥かに精緻ですので、最初からこちらを読んでもいいかもしれません。
　WPF アプリの国際化 (多言語対応) と、実行中の動的な言語切り替え | grabacr.nét　ここでは下敷きとして、次のようなデータを用意しました。
　ごく普通のWPFアプリケーションですが、「コンボボックスで複数言語を切り替え」までを実装します。
　多言語対応するには、まずその文字データを用意しないことには始まりません。
　ソリューションエクスプローラーでPropertiesを開くと、「Resources.resx」があるかと思います(無ければ右クリックから追加可能)。これは言わば「デフォルトの表示言語」ですので、多言語対応アプリならとりあえず英語用にしておくことを推奨します。　また、「Properties」を右クリック→「追加」から、リソースファイル(*.resx)を追加することができます。上記サンプルでは日本語(ja-JP)・アメリカ英語(en-US)・中国語(zh-CN)に対応予定ですので、それぞれのファイルを追加します。　更に、表示メッセージをVisual Studio上から入力していきます。いずれもアクセス修飾子をPublicにする必要があることと、「名前―値」の対応における"名前"は各ファイル同じにする必要があることに注意が必要です。　当然ですが、文字データだけあってもそれが読み込めなければ意味ありません。
　そこで、XAMLに数行追加して、上記リソースファイルの中身にアクセスするようにします。　すると、起動するOSの言語設定に応じて、「x:Static properties:Resources.云々」と書かれた箇所が変化します。つまり、英語設定なら英語、中国語設定なら中国語を表示するようにできるわけです。
　なお、リソースファイルで設定していなかった国・言語を選択していた場合、デフォルトのResources.resxに記述した表示メッセージが参照されます。　ここまででもとりあえず多言語対応できていますが、どうせなら切り替え機能を付けたいですよね？
　そこで、次のような作戦を取ります。　まず、上記機能を実現する自作クラスはこんな感じです。　このコードのポイントとしては次の通りです。　次に、XAMLを書き換えます。　最後に、切り替え用のコードを記述します。　上記のようにリソースファイルを追加してビルドすると、ビルド先に次のようにフォルダが作成されます。
(「デフォルトの表示言語」の分のフォルダ・ファイルは作成されません)
　それぞれのフォルダ内には「(exe名).resources.dll」といったファイルが生成されていると思いますが、その中身は上記のリソースファイルだと考えて下さい。つまり、例えば次の画像から「zh-CN」フォルダを削除すると、中国語部分の表示ができなくなります。　上記のようなコードを追加するだけで、アプリを多言語対応にすることができました。
　冒頭にも書きましたが、実際に動くコードの全体は次のリポジトリに置いてあります。
　　https://github.com/YSRKEN/MultiLanguageSample


