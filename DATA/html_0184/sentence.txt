スマートプラグは、検索するといろいろなメーカーからでていますが、安心して使えそうなメーカーは、SwitchBotかTP-link社のスマートプラグと思います。SwitchBot社はスマホから簡単に制御でき、Amazonアレクサにも簡単に連携できる優れものです。また、同社は赤外線ハブで、おおよその家電も制御できます。プログラムを書けない人が使うスマート機器としては優秀ですが、プログラマーとしては、やはり自分のコードで、しかもローカルなネットワーク環境で使いたくなります。TP-link社のHS105は、ローカルなネットワーク環境でプログラマーが自分のコード実行することができます。今回は、このスマートプラグをC#で、しかも、発表されたばかりの.net5で動作検証をしたと思います。購入先：Amazonから容易に購入できます。注意事項：コンセントのプラグ幅が左右で大きさが異なります。中国製で騙されたと思いましたが、よくよく調べると日本工業規格 JIS C 8303で規定されているまっとうなコンセント形状ということが分かりました。日本の電気の仕様的にはコンセントに差し込む向きを気にしない無極性プラグが普通だと思っていたので、この事実を知ると、世の中に出回っているコンセントのプラグ幅が同じであるほうがよくない気がしてきました。
海外では、3プラグ方式で、向きとアースが規定されているので、そのような環境でモノづくりしているメーカーは、日本市場用でも正しくプラグに極があるようにしているのかなと想像しました。

自宅の備え付けコンセントをみると確かに左右でプラグ幅が異なります。HS105は、Wifi経由で制御でき、通信仕様は非公開。ただGoogle先生で、「TP-link HS105 python」等の検索キーワードで調べると多数の文献がでてきます。
.net関連でもいくつかのライブラリが公開されていますが、いずれも.net frameworkを対象としたものです。
今回はGithubに公開されている「TPLinkSmartDevices」を使ってみたいと思います。OS:Windows10 Pro 20H2
開発:Visual studio2019
言語１：C# .net Framework 4.5
言語２：C# .net 5.0
試用コード：TPLinkSmartDevices
https://github.com/anthturner/TPLinkSmartDevicesまずは、ダウンロードし、そのままビルドしたいと思います。
このプログラムは、Newtonsoft.Jsonを使っているので、まずはNugetを使ってインストールする必要があります。
Visual Studio2019であれば、画面下に復元ボタンが表示されますので、このボタンでインストールします。

プロジェクトのプロパティをみると、.net Framework 4.5で構成されていることがわかります。これは、今回そのままにしておきます。
実際にビルドしてみます。正常終了しました。
正常にDLLが出力されています。
では、このプログラムを使ってテストプログラムを作成してみたいと思います。
まずは新規プロジェクトで、.net Frameworkのコンソールアプリを作ります。
次に参照の追加で、先程作成したDLLを登録します。
次に下記コードを記載し実行すると、ネットワークに接続されているTP-linkスマートプラグ関連を調べて、Hostname（IPアドレス）がコンソールに書き込まれます。次に、入手した、Hostname（IPアドレス）を使ってスマートプラグのスイッチをON/OFFします。
補足
下記コードの"XXX.XXX.XXX.XXX"をご自分の環境に合わせて修正してください。スマートプラグがリレースイッチがカチカチと音がすれば通信成功です。ではこの調子で.net5のコンソールアプリのテストをしてみたいと思います。
.net Coreのコンソールアプリの初期画面です。右側のソリューションエクスプローラの様子が、いままでと異なります。参照ではなく依存関係となっています。あと、このままでは、表題の.net5で試すことにはなりません。それはデフォルトでは.net Core3.1だからです。ここを、.net5に変更します。
次に依存関係を右クリックしてDLLを追加したいと思います。ただ、参照マネージャーを立ち上げたいだけなので、とりあえず、プロジェクト参照の追加を選択します。
参照ボタンを選択し、前項で作成したTPLinkSmartDevices.dllを読み込みます。
無事登録されていることを確認。
では、前項同様、まずはスマートプラグを探し出すコードを実行してみます。
ここで、.net5と.net Frameworkの間に壁が存在することがわかりましたが、正直このエラーを解決する手段がgoogle先生からは容易に見つかりません。.net Framework4からの.net Framework2 or .net Framework3-DLL参照とはわけが違います。
これの解決には、もう少し調べていく必要があるので、今回はTPLinkSmartDevices.dllの内容も含めて.net Coreでビルドする作戦に切り替えます。
先程参照設定したTPLinkSmartDevices.dllを削除します。
次にTPLinkSmartDevices.dllのソースコードをフォルダごと.net5のプロジェクトにコピーします。
ここからがびっくりしたのですが、Visual Studio2019の.net Coreアプリプロジェクトでは、上記のコピーをしただけで、プロジェクトのコンパイル対象に登録されています。便利なのですが、意図しない取り込みもされそうで・・・今後注意すべき仕様ですね。
次に下記エラーをつぶしていく必要があります。Newtonsoft.Jsonがないためのエラーと思われるので、これをインストールします。
Newtonsoft.JsonのインストールにはNugetを使います。

Install-Package Newtonsoft.Json


無事インストールが完了しましたら、エラーが消えたことを確認し、下記コードを実行します。
using TPLinkSmartDevices;を追加することがポイントです。最後に実行してみると、私の環境では無事実行できました。.net Frameworkと.net5は、ソースコードレベルでは互換性があるようで、どららのフレームワークにもあるライブラリを呼び出したものであれば、.net Frameworkのコードを.net5でビルドし直すだけで問題は解決することがわかりました。前回のWindows10 .net Core時代のGPIB制御　初級編でCOM参照、今回のビルドするフレームワークの変更で.net5がハードウェア制御にも使えることがわかりました。


