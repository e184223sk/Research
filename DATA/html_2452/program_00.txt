    public static class MappingExtension
    {
        public static IMapper CreateMapperWithoutNavigation&lt;TSource, TDestination&gt;() =&gt; new MapperConfiguration(expression =&gt; {
            expression.CreateMap&lt;TSource, TDestination&gt;()
            .IgnoreNavigation();
        }).CreateMapper();

        public static AutoMapper.IMappingExpression&lt;TSource, TDestination&gt; IgnoreNavigation&lt;TSource,TDestination&gt;(this IMappingExpression&lt;TSource, TDestination&gt; expression)
        {

            var type = typeof(TDestination);
            var properties = type.GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.SetProperty);
            foreach (var property in properties)
            {
                if (property.PropertyType.IsValueType)
                {
                    continue;
                }
                if (property.PropertyType == typeof(string))
                {
                    continue;
                }
                var nullable = property.PropertyType.IsGenericType &amp;&amp; property.PropertyType.GetGenericTypeDefinition() == typeof(Nullable&lt;&gt;);
                if (nullable)
                {
                    var baseType = Nullable.GetUnderlyingType(property.PropertyType);
                    if (baseType.IsValueType)
                    {
                        continue;
                    }
                    if (baseType == typeof(string))
                    {
                        continue;
                    }
                }
                expression.ForMember(property.Name, x =&gt; x.Ignore());
            }

            return expression;
        }
    }

