        /// &lt;summary&gt;
        /// &lt;para&gt;囲み文字内の文字列を取得します。&lt;/para&gt;
        /// &lt;para&gt;囲み文字の開始、終了がひもづかない場合は取得できません。&lt;/para&gt;
        /// &lt;/summary&gt;
        /// &lt;param name="value"&gt;文字列。&lt;/param&gt;
        /// &lt;param name="startBracket"&gt;囲み文字の開始文字。&lt;/param&gt;
        /// &lt;param name="endBracket"&gt;囲み文字の終了文字。&lt;/param&gt;
        /// &lt;param name="includeBracket"&gt;結果に囲み文字を含めるかどうか。&lt;/param&gt;
        /// &lt;returns&gt;囲み文字内の文字列。取得できない場合は空。&lt;/returns&gt;
        public string GetEnclosedText(string value, string startBracket, string endBracket, bool includeBracket = false)
        {
            var started = false;
            var openCount = 0;
            var startIndex = -1;

            // 指定ブラケットに一致するかどうか
            var sb = new StringBuilder();
            Func&lt;int, string, bool&gt; IsMatchBracket = delegate (int index, string targetBracket)
            {
                sb.Clear();
                for (var i = 0; i &lt; targetBracket.Length; i++)
                {
                    sb.Append(value[index + i]);
                }
                var bracket = sb.ToString();

                if (bracket == targetBracket)
                {
                    return true;
                }
                return false;
            };

            // 開始ブラケット処理
            Action&lt;int&gt; startBracketAction = delegate (int index)
            {
                // 文字長を超えるならブラケット処理なし
                if (value.Length - 1 &lt; index + startBracket.Length - 1)
                {
                    return;
                }

                // ブラケットに合致しなければ処理なし
                if (!IsMatchBracket(index, startBracket))
                {
                    return;
                }

                openCount++;
                if (!started)
                {
                    startIndex = index;
                }
                started = true;
            };

            // 終了ブラケット処理
            Action&lt;int&gt; endBracketAction = delegate (int index)
            {
                // 文字長を超えるならブラケット処理なし
                if (value.Length - 1 &lt; index + endBracket.Length - 1)
                {
                    return;
                }

                // ブラケットに合致しなければ処理なし
                if (!IsMatchBracket(index, endBracket))
                {
                    return;
                }
                openCount--;
            };

            for (var index = 0; index &lt; value.Length; index++)
            {
                startBracketAction(index);
                endBracketAction(index);

                if (!started || openCount &gt; 0)
                {
                    continue;
                }

                index += endBracket.Length - 1;
                if (!includeBracket)
                {
                    startIndex += startBracket.Length;
                    index -= endBracket.Length;
                }
                return value.Substring(startIndex, index + 1 - startIndex);
            }
            return value;
        }

        /// &lt;summary&gt;
        /// &lt;para&gt;囲み文字内の文字列を取得します。&lt;/para&gt;
        /// &lt;para&gt;囲み文字の開始、終了がひもづかない場合は取得できません。&lt;/para&gt;
        /// &lt;/summary&gt;
        /// &lt;param name="value"&gt;文字列。&lt;/param&gt;
        /// &lt;param name="includeBracket"&gt;結果に囲み文字を含めるかどうか。&lt;/param&gt;
        /// &lt;param name="startBracket"&gt;囲み文字の開始文字。&lt;/param&gt;
        /// &lt;param name="endBracket"&gt;囲み文字の終了文字。&lt;/param&gt;
        /// &lt;returns&gt;囲み文字内の文字列。取得できない場合は空。&lt;/returns&gt;
        public string GetEnclosedText(string value, bool includeBracket = false, char startBracket = '(', char endBracket = ')')
        {
            return GetEnclosedText(value, startBracket.ToString(), endBracket.ToString(), includeBracket);
        }

