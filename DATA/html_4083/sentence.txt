More than 1 year has passed since last update.本記事はimplicitとexplicitの違いと使い方に対して解説したものとなります。また本記事は一度昔に個人ブログにあげていたものに修正を加えて再掲したものとなります。 
ユーザー定義型を組み込み型(int等)にキャストできるようにしたい時に使用します。逆に組み込み型をユーザー定義型にキャストすることも可能にできます。C#には暗黙の型変換を可能にするimplicitキーワードと、明示的な型変換を可能にするexplicitキーワードが存在します。注意として、これらのキーワードを使用する際は、すべてstatic宣言が必要となります。(++C++; // 未確認飛行C　様サイトより)組み込み型自作のクラスから別のクラスへの変換機能を使用する必要があった場合、自前でstaticメソッドを追加するのがひとつの方法ですが、変換する必要がある度にメソッド呼び出しを書かなければなりません。そこでint -&gt; doubleへ自動的に型変換が行えるように、自作クラスと別クラスが相互に代入できればもっとコードを簡潔に書くことができるようになります。以上のことから、implicitとexplicitの扱いには充分注意してください。暗黙的なユーザー定義型変換演算子を定義するのに使用するキーワードです。そのため、メソッドにオブジェクトを引数として渡したり、定義した型に代入する時、ある型を別の型として扱う必要がある場合に常に呼ばれます。便利ではありますが、変換時に情報が失われず(丸め誤差、オーバーフロー等)、例外が発生しない場合に限り使用しましょう。implicitキーワードを用いることで、不要なキャストを省けるのでコードが読みやすくなります。以下使用例： 明示的なユーザー定義型変換演算子を定義します。暗黙的変換演算子であるimplicitとは異なり、キャストが明示的に指定された場合以外は呼び出されることはありません。そのため、コードを読む全ての人に明確にキャストを示すことができます。キャストを省くとコンパイルエラー CS0266となるのでエラー個所もわかりやすいです。以下使用例：


