More than 1 year has passed since last update.「C#の多倍長整数型(BigInteger)の数学メソッドをちょびっと書きました」の最大公約数算出メソッド再帰メソッドは一度呼ぶだけで内部的に何度も実行されるため、ちょっとした効率化にけっこう効果があったりします。
上に挙げたメソッドもこれはこれでまったく問題ないんですが、いくつか無駄があるので段階を踏んでだんだん効率アップしていきます。この短いコードに最適化できるネタが複数入っているので興味を引いただけで、ここに書かれるコードに実用的価値はありません。再帰やループの高速化の基本は「終了条件はなるべく先に、他の処理をやる前に書く」
この場合の終了条件は「y == 0ならxを返しこれ以上再帰しない」の部分。その前に「小さい方の数をyにする」という処理があるけど、これは「x == 0ならyを返し、y == 0ならxを返す」とすればメソッドの先頭に移動できる。とはいってもこの場合後半の処理をすっ飛ばせるのは「最初にxまたはyが0のときか、最大公約数が見つかった場合だけ」なのであまり速度に違いはないです。の部分がやろうとしてることは「大きい方の数と小さい方の数の組み合わせが欲しい」というだけで、それを入れる変数がxとyである必要はない。
だってその後やってることはGCDの引数として使うだけだから。
それならこう書いた方がメソッド呼び出しが減って速度が速くなる。このコードは最大公約数を得るためのものということもあって、xとyに負の数が入ることは想定されていない(と思う)。
そして最後の行で再帰のために渡しているパラメータはとなると、再帰呼び出しされている場合は「xが0」と「xがyより小さい」を考慮する必要がないことになる。
だったら「メソッドとして公開する部分」と「最大公約数を探す部分」を分けると比較と条件分岐を減らせる。三項演算子を使ってもっとコンパクトにしてみよう。こんなに短くなったよ！それにたぶん速くなったよ！
でもちょっとわかりにくいので、わかりやすさではstep2くらいがちょうどいいかもね。
そして上の方で書いたように、BigIntegerの標準メソッドがあるのでまったくの無駄だよ！まあ再帰関数は「外部から呼ばれたときにだけ必要な処理」と「本当に再帰する必要がある処理」に分けることで効率がよくなるケースは割とあるので参考までに。「あ、ローカル関数ってまさにこういうときに使うやつだった」と思い出したので、innerGCDをローカル関数化してひとつのメソッドにまとめました。


