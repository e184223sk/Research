
using System.Linq;
using System.Runtime.CompilerServices;
using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Running;

namespace ConsoleApp10
{
    public class PropertyVsField
    {
        public int AggressiveInlining
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            set;
        }

        public int NoInlining
        {
            [MethodImpl(MethodImplOptions.NoInlining)]
            get;

            [MethodImpl(MethodImplOptions.NoInlining)]
            set;
        }

        public int Default
        {
            get;
            set;
        }

        public int Field;
    }

    public class PropBenchmark
    {
        public PropertyVsField propVsField = new PropertyVsField()
        {
            AggressiveInlining = 42,
            NoInlining = 42,
            Default = 42,
            Field = 42
        };

        [Benchmark]
        public int AggressiveInlining()
        {
            int v = 0;
            foreach (var _ in Enumerable.Range(1, 10))
            {
                v += this.propVsField.AggressiveInlining;
            }

            return v;
        }

        [Benchmark]
        public int NoInlining()
        {
            int v = 0;
            foreach (var _ in Enumerable.Range(1, 10))
            {
                v += this.propVsField.NoInlining;
            }

            return v;
        }

        [Benchmark]
        public int Default()
        {
            int v = 0;
            foreach (var _ in Enumerable.Range(1, 10))
            {
                v += this.propVsField.AggressiveInlining;
            }

            return v;
        }

        [Benchmark]
        public int Field()
        {
            int v = 0;
            foreach (var _ in Enumerable.Range(1, 10))
            {
                v += this.propVsField.AggressiveInlining;
            }

            return v;
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            var summary = BenchmarkRunner.Run&lt;PropBenchmark&gt;();
        }
    }
}

