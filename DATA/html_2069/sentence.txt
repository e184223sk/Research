More than 1 year has passed since last update.こんにちは。
C#で.NETアプリケーションを書いています。
テストメソッドを作ったときにそのメソッドへデータを渡す方法が2種類あります。
この2種類をテストケースの大きさとその視認性で使い分けるアイディアを紹介します。DataRow形式は、属性(Attribute)にテストケースを書くことでテストメソッドにデータを渡す方法です。TestMethod()のすぐ上に、[DataRow()]という形でテストケースを書いています。DynamicData形式は、テストケースを変数に入れておいて、その変数を属性で指定することでテストメソッドにデータを渡す方法です。TestMethod()のすぐ上に、[DynamicData(nameof())]という形でHogeVariableという変数を指定しています。
別途、HogeVariableを以下のように用意します。HogeVariableはobject[]のリストとなっており、各object[]が1つのテストケースになっています。実例として、不動産の管理委託契約の消費税計算を取り上げます。
不動産の世界では、オーナーと管理会社との間で「管理委託契約」を結びます。
契約には契約金が付き物で、消費税の計算も必要となります。そこで、契約金額(税抜)と消費税率から税込額を返す消費税計算メソッドCalcShohizei()のテストコードを例とします。
契約金額(税抜)と消費税率は、KanriitakuKeiyakuというクラスで持っているものとします。[DataRow(100, 8, 108)]という形で、テストメソッドのそれぞれの引数の値を指定しています。
この例ではDataRowが2行ありますが、テストケースを増やすときはDataRowを1行追加するだけです。
テストメソッドのすぐ上にDataRowがずらーっと並び、各行が1つのテストケースとなるため、テストケースを手っ取り早く確認できるようにしたいときにDataRow形式で書くと良いでしょう。KanriitakuKeiyakuTestDataという変数を用意し、[DynamicData(nameof(KanriitakuKeiyakuTestData))]という形でテストデータを渡しています。
各テストケースはobject[]型となっておりいろいろ入るので、各テストケースで用意するデータが多い場合や大きいクラスを渡す必要があるときにDynamicData形式で書くと良いでしょう。属性でテストケースも書いてしまうのがDataRow形式、変数を用意して属性では変数名を指定するのがDynamicData形式です。
DataRow形式もDynamicData形式も、テストケースが同じならテスト結果は同じですので、各テストケースの視認性とテストケースの大きさを天秤にかけて使い分けると良いのではないでしょうか。今回は契約データを例に挙げましたが、実際の契約データでは契約金以外にも契約開始日・終了日などの値を持ち、これら日付等は税込金額算出時に使う消費税率の決定に関わってきます。
契約によっては、2019年10月1日以降も消費税率を10%とはしない「経過措置」が適用される、なんてこともあります。
これら諸々を考慮すると、テストケース1つ取っても契約金、契約開始日、...などたくさんの値の準備が必要で、DataRow形式だと1行がとても長くなるかやむなく複数行で書くことになり、視認性が悪いです。
こうなってくると、DynamicData形式で書くのが良いですね。本記事では不動産の世界で用いられるKanriitakuKeiyaku(管理委託契約)を例に取り上げました。
なぜ不動産の世界を例に挙げたかというと、本記事の著者は不動産テックの会社に所属しているからです。
株式会社いい生活の.NETアプリケーションチームでは、一緒に働くメンバーを募集しています！！皆様のお手元でもテストを実行できるように、テスト環境についてと書いたコードを置いておきます。以下環境にて動かしました。テストフレームワークはMSTestを使用しました。
ソリューションを右クリック＞ソリューションのNuGetパッケージの管理 からMSTest.TestFrameworkとMSTest.TestAdapterを入れると良いです。
テストを書いたら、テストエクスプローラーを表示して、テストクラスまたはメソッドを右クリック＞実行 です。



