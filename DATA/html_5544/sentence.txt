More than 3 years have passed since last update.CSVやtxtファイル等の外部ファイルに入っているテキストファイルを読み込むことをやってみる。キャラの名前とそのキャラのしゃべる文章を1行として、IDで管理することを想定。テキストは下記のようなものをタブ区切りで用意。これらを分解して2次配列にして管理するまでの内容です。Text[0,0] == 1
Text[0,1] == やすし
Text[0,2] == こんにちは！このようにしたかった訳です。上記のテキストファイルをいれるフォルダを作る。"Resources"というフォルダを作成してやると、ソースコード上からリソースのロードができるようになる特別なフォルダになります。この中に上記のテキストファイルを入れます。処理の流れは下記のように実行。以下コード。テキストを入れ込む段階で一時的に使う1次配列と、最終的に管理したい2次配列を用意。あとは2次配列を作る際に必要なサイズを決めるのに使う行数と列数を取得する変数を用意します。テキストファイルをまるっと丸ごと入れ込む箱はTextAsset型のインスタンスを作成。その中にResourceフォルダ内にあるテキストファイルを読み込んで入れ込みました。このままではどうやらまだTextAssetの状態(?)ならしく、これをデータとしてきちんと扱えるようにsrting型に直してやる必要があるようです。なのでそのstring型のデータを入れる変数を用意しtextasst.textでこれまたまるっとstring型の中へ入れました。Splitを使用します。今はテキストファイル全体がstring型で収納されているので、それをエスケープ文字を基準に分割します。textMessageは最初に用意してあげた1次的に使用する1次配列です。このSplitでの行ごとの分割ですが、特に配列側で添え字で指定してあげなくても勝手に配列を作ってくれます。一番上のテキストの例ですと5行あるので、textMessage[0]～textMessage[4]まで自動で作られます。ですが、2次配列で同じようなことをやるとなぜかエラーが出てできませんでしたので、きちんと2次配列のサイズを決めてあげる必要がありました。それが次。分割したものの数を数えていれています。(rowLength = TextLines.Split('\n').Length;となっていたものをrowLength = textMessage.Length;に修正!@sh_akiraさんご指摘ありがとうございます！)2次配列のサイズを定義してあげて、あとはよくあるforの入れ子でデータを入れ込み。Debug.Logでコンソールに書き出してチェックします。無事読み込まれていることが確認できました！


