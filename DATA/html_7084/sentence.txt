More than 3 years have passed since last update.Wikipedia を見るとカプレカ数には定義１と定義2の２つの定義があります。カプレカ数（カプレカすう、Kaprekar Number）とは、次のいずれかで定義される整数である。
 1. 2乗して前の部分と後ろの部分に分けて和を取ったとき、元の値に等しくなるもの
 2. 桁を並べ替えて最大にしたものから最小にしたものの差を取ったとき、元の値に等しくなるものここでは、定義１のカプレカ数を求めています。 
例えば、 297という整数は、  $297^2 = 88209 =&gt; 88 + 209 = 297$となるので、297はカプレカ数ということになります。 なお、この定義１にも２つのバージョンがあるらしく、その定義が微妙に異なっています。 4879はカプレカ数かどうかについて考えてみます。$4879^2 = 23804641$ で、 238 + 04641 = 4879 となるので、これはカプレカ数と判断できるのですが、Wikipedia(日本語)のページの定義１には、正の整数を2乗し、それが偶数桁 2n 桁である場合は先頭 n 桁と末尾 n 桁に分け、奇数桁 2n + 1 桁である場合は先頭 n 桁と末尾 n + 1 桁に分けて和を取る。この操作によって元の値に等しくなる数をカプレカ数と呼ぶ。とあり、この通りに考えると、2380 + 4641 != 4879 だから、カプレカ数ではない、ということになります。それにも関わらず、同じページにカプレカ数として、1, 9, 45, 55, 99, 297, 703, 999, 2223, 2728, 4879, 4950, 5050, 5292, …（オンライン整数列大辞典の数列 A006886）と載っているんですよね。
つまり、定義１でも、２つの解釈があるということみたいです。「The On-Line Encyclopedia of Integer Sequences: A006886」(Kaprekar numbers)「The On-Line Encyclopedia of Integer Sequences: A053816」(Another version of the Kaprekar numbers)で、ここでは、英語のWikipediaの定義（base == 10 の時のカプレカ数、以下の定義で b = 10）を採用しています。 $X^2 = Ab^n + B, where 0 &lt; B &lt; b^n$
$X = A + B$whereの条件を考慮しないと、10 もカプレカ数と判断してしまうので注意です。ところで、あの 巡回数である 142857 もカプレカ数なんですね。面白いですね。
巡回数(http://gushwell.ldblog.jp/archives/51949651.html) 最初に書いたカプレカ数を求めるC#のコードです。使い方はこんな感じ。どうも、Substringを使っているのが気に入らないし、Take(50)とかすると結構時間がかかります。
ということで、少し改良してみました。
数学の問題らしくSubstring()やToString()などの文字列操作を使わず使わずに書いてみました。僕の手元のPCでは、約4倍弱の速度アップが認められました。GitHubでコードを公開しています。前述のコードを使い、最初の50個のカプレカ数を求めるコード書いてみました。以下の通りです。この記事は、Gushwell's C# Programming Pageで公開したものを加筆・修正したものです。


