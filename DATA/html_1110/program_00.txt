public class Vector3Node : PropertyNode
{
    private Vector3Field vec3Field;

    public Vector3 Value { get { return vec3Field.value; } set { vec3Field.value = value; } }
    public Vector3Node() : base()
    {
        CreateOutputPort&lt;Vector3&gt;(Port.Capacity.Multi, "Vector3");
        vec3Field = new Vector3Field();
        mainContainer.Add(vec3Field);
    }
    public override string SerializeProperty()
    {
        return Value.ToString();
    }
    public override void DeserializeProperty(string _propertyValue)
    {
        var elements = _propertyValue.Trim('(', ')').Split(',');

        if(elements.Length &lt;= 3)
        {
            var vec = Vector3.zero;
            vec.x = float.Parse(elements[0]);
            vec.y = float.Parse(elements[1]);
            vec.z = float.Parse(elements[2]);
            Value = vec;
        }
    }
}

