

    public GameObject hole;

    Vector3 holeParentPosition;

    int[] patternNumber = { 0, 1, 2, 3 };
    int patternArray;


    float randomX_A;
    float randomZ_A;

    float randomX_B;
    float randomZ_B;

    float randomX_C;
    float randomZ_C;

    float randomX_D;
    float randomZ_D;

    void Start()
    {
        holeParentPosition = this.gameObject.transform.localPosition;
    }


 void Update()
    {
        patternArray = Random.Range(0, patternNumber.Length);

        randomX_A = Random.Range(0.5f, 4.0f);
        randomZ_A = Random.Range(-5f, -1.5f);

        randomX_B = Random.Range(0.5f, 4.0f);
        randomZ_B = Random.Range(-9f, -5.5f);

        randomX_C = Random.Range(-4.0f, -0.5f);
        randomZ_C = Random.Range(-9f, -5.5f);

        randomX_D = Random.Range(-4.0f, -0.5f);
        randomZ_D = Random.Range(-5f, -1.5f);

        //コルーチン開始(一回で抜ける)
        if (ThisProjectSingleton.Instance.isGameStart)
        {
            StartCoroutine(HoleRandomCoroutine());
            ThisProjectSingleton.Instance.isGameStart = false;
        }


    }

    int? RandomArea(int patternNum)
    {
        if (patternNum == 0)
        {
            holeParentPosition = new Vector3(randomX_A, holeParentPosition.y, randomZ_A);
            this.gameObject.transform.localPosition = holeParentPosition;

            return 0;
        }

        if (patternNum == 1)
        {
            holeParentPosition = new Vector3(randomX_B, holeParentPosition.y, randomZ_B);
            this.gameObject.transform.localPosition = holeParentPosition;

            return 1;
        }

        if (patternNum == 2)
        {
            holeParentPosition = new Vector3(randomX_C, holeParentPosition.y, randomZ_C);
            this.gameObject.transform.localPosition = holeParentPosition;

            return 2;
        }

        if (patternNum == 3)
        {
            holeParentPosition = new Vector3(randomX_D, holeParentPosition.y, randomZ_D);
            this.gameObject.transform.localPosition = holeParentPosition;

            return 3;
        }

        return null;

    }

    IEnumerator HoleRandomCoroutine()
    {
        int? tmpNum = 0;
        int? memoryNum = 0;
        while (/*ゲームオーバーの条件を記述*/)
        {
            yield return new WaitForSeconds(0.5f);
            tmpNum= RandomArea(patternNumber[patternArray]);

            //もしランダムな数字( tmpNum)が前回(memoryNum)と一致したら通過。別の数字をtmpNumに代入して抜ける
            while (tmpNum == memoryNum)
            {
                yield return new WaitForEndOfFrame();
                tmpNum = RandomArea(patternNumber[patternArray]);
            }
            memoryNum = tmpNum;
            hole.SetActive(true);


            //ホールにボールが入るまで待つ
            yield return new WaitUntil(() =&gt; ThisProjectSingleton.Instance.isHoleEnter);
            ScoreText.ScoreAdd();

            //ホールが消える
            yield return new WaitForSeconds(0.5f);
            hole.SetActive(false);
            ThisProjectSingleton.Instance.isHoleEnter = false;
        }
    }

