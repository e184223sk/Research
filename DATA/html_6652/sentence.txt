More than 3 years have passed since last update.Wallpaper Engineでは、Unityで作成したプログラムも使用できるらしいので試してみました。
まだ大したことはしていませんが、デスクトップ画面でカーソル操作に反応するユニティちゃんのプログラムを作成してみました。サンプルはこちらにあります。
　→　GitHubクリックするとYou Tubeへ飛びます。

デスクトップの背景でカーソルに対応して動作するものを作るデスクトップの背景に動画を設定できるソフトみたいです。
有料（400円くらい）ですが、so coolなので是非購入をオススメいたします。Steamからダウンロード可能です。
→Wallpaper EngineこのページではWallpaper Engineについては詳しく触れませんが、Wallpaper Engineでは動画の代わりにUnityでビルドしたプログラムも動作させることができるみたいなのでやってみました。カーソルを動かすと追従し、クリックするとジャンプしてくれるユニティちゃんを作りたいと思います。まずSDユニティちゃんのデータをダウンロードし、Assetsの中へインポートしておきます。地面や背景は好きなものにしていただければ大丈夫です。
僕は真っ白なPlaneの上にUnityちゃん（humanoidの方）をぽつんとおいたシンプルなシーンにしました。
背景はMain CameraのClear FlagsをSolid Colorに変更し、Background(色)をPlaneと同じ色にしました。ここから、Unityちゃんの動きを設定していきます。
次のような行動を取らせたいと思います。1.　基本その場待機で、カーソルがｘ軸方向に一定量離れたら追いかける
2.　体の全体が常にカーソルの方を向く
3.　左クリックでジャンプまず、ユニティちゃんにカーソルを追いかけさせるための目標物（target）を作成します。
今回は、目に見えないくらいのサイズのsphere(CursorにRenameしました)にスクリプトを設定して、常にディスプレイのカーソルの位置に来てもらうような仕組みにしました。（他にいい方法がすぐに思いつかなかったため）
スクリプトは次のようにしました。このスクリプトを先程の極小CursorにAddしておき、ユニティちゃんのスクリプトのtargetにこいつを指定することで追従させよう！って感じですね。あんまりスマートじゃない気はしますが。
ユニティちゃんとCursorの初期位置関係はこんな感じに、Z軸方向に約１ｍずらして設置しました。X,Y方向は適当でも大丈夫です。　次にユニティちゃんの設定です。
まずAnimatorですが、次のように設定しました。（顔の設定はまた後日やります…）StandingとWalking間の遷移は、Bool型のWalkがtrueかどうかで判断します。
また、Triggerで設定したJumpがtrueになると、どのstateからでもjump状態に遷移します。
Standing～Walking間のTransitionのHas Exit Timeのチェックはどちらも外しておいてください。次に、ユニティちゃん（humanoid）に予めアタッチされているIK Look At(Script)のIK Activeにチェックを入れ、Look At Obj に先程作ったCursorを設定します。これでユニティちゃんの顔が常にカーソルの方を向いてくれるようになります。最後に、動きを制御するスクリプトを書いて終了です。
元からアタッチされているIdleChangerを書き換えましょう。このスクリプトのlookAtObjにCursorをアタッチすることをお忘れなく。
しきい値や掛け算されている定数は、お好みで微調整してください。
こうすることで、カーソルがx軸方向に離れたら追ってきてくれるようになると思います。
またクリックするとジャンプしてくれます。かわいい。カーソルの軌跡みたいなのを表現したかったので、パーティクルでやってみました。
パーティクルを使うのは初めてなので色々勉強しながら調整しました。特にこちらのサイトを参考にさせて頂きました。テクスチャも使用させて頂きました…ありがとうございます。
【Unity】ﾊﾞﾄﾙｶﾞｰﾙﾊｲｽｸｰﾙの星ｴﾌｪｸﾄっぽいものを作る～Part1～本当はCursorにParticle Systemをアタッチしたかったのですが何故かできませんでした（パーティクルが生成されなかった…泣）
なので、空のGameObjectを作成し、Particle Systemをアタッチし、Cursorの子にする、という手段を取りました。パーティクルに使用するTextureとMaterialの設定は以下の通りです。特にShaderの種類をParticle/Additiveにすると、RGB値が(1,1,1,1)になってしまう（恐らく）ため、白背景と区別がつかず全然見えなかったので、乗算（しかもdouble）にしてみました。続いてパーティクル自体の設定はこんな感じです。まだ挙動を理解してない箇所も少しあるので、設定が変なところもあるかもしれません。（特に色関連のところ）
ですがとりあえずこれでキラキラする軌跡を表現できるようにはなりました。お試しで作ったものなのでクオリティはまずまずですが、とりあえずデスクトップでユニティちゃんが動いてくれたので今回は目的達成です。
Wallpaper Engineではキーボード入力は受け付けないとの噂ですが、それも近々試してみたいと思っています。
あとは、音に反応するものとか…


