using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.DurableTask;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.Azure.WebJobs.Host;
using Microsoft.Extensions.Logging;

namespace FunctionApp1
{
    public static class TaskOrch
    {
        [FunctionName("Function2")]
        public static async Task&lt;int&gt; RunOrchestrator(
            [OrchestrationTrigger] IDurableOrchestrationContext context)
        {
            var tasks = new Task&lt;int&gt;[10];
            var errorMessageList = new List&lt;string&gt;();

            for (int index = 0; index &lt; 10; index++)
            {
                // アクティビティ関数を並列で10回呼び出す
                tasks[index] = context.CallActivityAsync&lt;int&gt;("TaskActivity", index);
            }

            try
            {
                // 10個のタスクが終わるまで待つ
                await Task.WhenAll(tasks);
            }
            catch
            {
                // エラーが発生したことをキャッチする
                Console.WriteLine("Error has occured.");
            }
            // 成功の結果だけ集めてくる
            int total = tasks.Where(t =&gt; t.Status == TaskStatus.RanToCompletion).Sum(t =&gt; t.Result);
            // エラー結果だけを取得する
            var errors = tasks.Where(t =&gt; t.Status == TaskStatus.Faulted).ToList();
            foreach (var item in errors)
            {
                Console.WriteLine(item.Exception.InnerException.InnerException.Message);
            }

            return total;
        }

        [FunctionName("Function2_HttpStart")]
        public static async Task&lt;HttpResponseMessage&gt; HttpStart(
            [HttpTrigger(AuthorizationLevel.Anonymous, "get", "post")] HttpRequestMessage req,
            [DurableClient] IDurableOrchestrationClient starter,
            ILogger log)
        {
            // Function input comes from the request content.
            string instanceId = await starter.StartNewAsync("Function2", null);

            log.LogInformation($"Started orchestration with ID = '{instanceId}'.");

            return starter.CreateCheckStatusResponse(req, instanceId);
        }
    }
}

