
private static void KeySchedule(byte[] bytes, int currentRound)
{
    byte[,] bytes2d = Bytes16To2DBytes4(bytes);
    byte[,] round_key = new byte[4, 4];
    byte[] r = new byte[16];
    byte[] r_ = new byte[16];

    //Rot Word
    //一旦値を格納
    r[ 3]  = CURRENT_CHIPHER_KEY[ 3]; //09
    r[ 7]  = CURRENT_CHIPHER_KEY[ 7]; //cf
    r[11]  = CURRENT_CHIPHER_KEY[11]; //4f
    r[15]  = CURRENT_CHIPHER_KEY[15]; //3c
    //↓ 一番下を一番上に持ってくる
    r_[ 3] = CURRENT_CHIPHER_KEY[ 7]; //cf
    r_[ 7] = CURRENT_CHIPHER_KEY[11]; //4f
    r_[11] = CURRENT_CHIPHER_KEY[15]; //3c
    r_[15] = CURRENT_CHIPHER_KEY[ 3]; //09
    //↓ s-box変換
    r_[ 3] = SBOX.Convert(r_[ 3]); //8a
    r_[ 7] = SBOX.Convert(r_[ 7]); //84
    r_[11] = SBOX.Convert(r_[11]); //eb
    r_[15] = SBOX.Convert(r_[15]); //01

    r[ 0]  = CURRENT_CHIPHER_KEY[ 0];
    r[ 4]  = CURRENT_CHIPHER_KEY[ 4];
    r[ 8]  = CURRENT_CHIPHER_KEY[ 8];
    r[12]  = CURRENT_CHIPHER_KEY[12];

    round_key[0, 0] = (byte)(CURRENT_CHIPHER_KEY[ 0] ^ r_[ 3] ^ RCON[currentRound]);
    round_key[1, 0] = (byte)(CURRENT_CHIPHER_KEY[ 4] ^ r_[ 7] ^ RCON[0]);
    round_key[2, 0] = (byte)(CURRENT_CHIPHER_KEY[ 8] ^ r_[11] ^ RCON[0]);
    round_key[3, 0] = (byte)(CURRENT_CHIPHER_KEY[12] ^ r_[15] ^ RCON[0]);

    for (int x = 0; x &lt;= 3; x++) //0,1,2 (3)
    {
        //0は除きたい（横インデックス1から埋め込んでいく）ので x は 1 2 3 のみに絞る
        if (x == 0) continue;
        round_key[0, x] = (byte)(CURRENT_CHIPHER_KEY[ 0 + (1 * x)] ^ round_key[0, x - 1]);
        round_key[1, x] = (byte)(CURRENT_CHIPHER_KEY[ 4 + (1 * x)] ^ round_key[1, x - 1]);
        round_key[2, x] = (byte)(CURRENT_CHIPHER_KEY[ 8 + (1 * x)] ^ round_key[2, x - 1]);
        round_key[3, x] = (byte)(CURRENT_CHIPHER_KEY[12 + (1 * x)] ^ round_key[3, x - 1]);
    }

    CURRENT_CHIPHER_KEY = Bytes2D4ToBytes16(round_key);
}

