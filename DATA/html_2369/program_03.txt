
private static byte[] MixColumns(byte[] bytes)
{
    byte[] result = new byte[bytes.Length];
    byte[,] bytes2d = new byte[4, 4];

    bytes2d = Bytes16To2DBytes4(bytes);

    byte[] matrix = 
    { 
        0x02, 0x03, 0x01, 0x01,
        0x01, 0x02, 0x03, 0x01,
        0x01, 0x01, 0x02, 0x03,
        0x03, 0x01, 0x01, 0x02
    };

    byte[,] matrix2d = new byte[4, 4];
    matrix2d = Bytes16To2DBytes4(matrix);

    byte[,] resultBytes2d = new byte[4, 4];
    for (int c = 0; c &lt;= 3; c++)
    {
        resultBytes2d[0, c] = (byte)((GMul(0x02, bytes2d[0, c])) ^ (GMul(0x03, bytes2d[1, c])) ^ (GMul(0x01, bytes2d[2, c])) ^ (GMul(0x01, bytes2d[3, c])));
        resultBytes2d[1, c] = (byte)((GMul(0x01, bytes2d[0, c])) ^ (GMul(0x02, bytes2d[1, c])) ^ (GMul(0x03, bytes2d[2, c])) ^ (GMul(0x01, bytes2d[3, c])));
        resultBytes2d[2, c] = (byte)((GMul(0x01, bytes2d[0, c])) ^ (GMul(0x01, bytes2d[1, c])) ^ (GMul(0x02, bytes2d[2, c])) ^ (GMul(0x03, bytes2d[3, c])));
        resultBytes2d[3, c] = (byte)((GMul(0x03, bytes2d[0, c])) ^ (GMul(0x01, bytes2d[1, c])) ^ (GMul(0x01, bytes2d[2, c])) ^ (GMul(0x02, bytes2d[3, c])));
    }

    result = Bytes2D4ToBytes16(resultBytes2d);

    return result;
}

