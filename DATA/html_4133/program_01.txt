
using System;
using IceMilkTea.Core;
using UnityEngine;

// 状態を定義しているだけの何もしないクラス
public class Hoge : MonoBehaviour
{
    // この Hoge クラスのステートマシン
    private ImtStateMachine&lt;Hoge&gt; stateMachine;

    // この Hoge クラスのアイドリング状態クラス
    private class IdleState : ImtStateMachine&lt;Hoge&gt;.State
    {
        // 何もしない状態クラスなら何も書かなくても良い（むしろ無駄なoverrideは避ける）
    }

    // この Hoge クラスのなにかを処理している状態クラス
    private class ProcessState : ImtStateMachine&lt;Hoge&gt;.State
    {
        // 状態へ突入時の処理はこのEnterで行う
        protected internal override void Enter()
        {
        }

        // 状態の更新はこのUpdateで行う
        protected internal override void Update()
        {
        }

        // 状態から脱出する時の処理はこのExitで行う
        protected internal override void Exit()
        {
        }

        // 状態で発生した未処理の例外がキャッチされた時の処理はこのErrorで行う
        protected internal override bool Error(Exception exception)
        {
            // 未処理の例外をハンドリングしたのなら true を返すことで、ステートマシンはエラーから復帰します
            return true;
        }

        // ステートマシンが状態の遷移をする前にステートマシンのイベント入力を処理するならこのGuardEventで行う
        protected internal override bool GuardEvent(int eventId)
        {
            // 特定のタイミングで遷移を拒否（ガード）するなら true を返せばステートマシンは遷移を諦めます
            if (!Context.isActiveAndEnabled)
            {
                return true;
            }

            // 遷移を許可するなら false を返せばステートマシンは状態の遷移をします
            return false;
        }

        // ステートマシンが前回のプッシュした状態に復帰する時の処理をするならこのGuardPopで行う
        protected internal override bool GuardPop()
        {
            // 復帰を拒否（ガード）するなら true を返せばステートマシンは復帰を諦めます
            if (!Context.isActiveAndEnabled)
            {
                return true;
            }

            // 復帰を許可するなら false を返せばステートマシンは復帰します
            return false;
        }
    }
}

