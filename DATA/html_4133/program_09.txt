
using IceMilkTea.Core;
using UnityEngine;

[RequireComponent(typeof(Rigidbody))]
[RequireComponent(typeof(MeshFilter))]
[RequireComponent(typeof(Transform))]
public class Player : MonoBehaviour
{
    // ステートマシンのイベントID列挙型
    private enum StateEventId
    {
        Enable,
        Disable,
    }

// 中略...

    // ステートマシン変数の定義、もちろんコンテキストは Player クラス
    private ImtStateMachine&lt;Player&gt; stateMachine;
// 中略...

    // コンポーネントの初期化
    private void Awake()
    {
// 中略...
        // ステートマシンの遷移テーブルを構築（コンテキストのインスタンスはもちろん自分自身）
        stateMachine = new ImtStateMachine&lt;Player&gt;(this);
        stateMachine.AddTransition&lt;DisabledState, EnabledState&gt;((int)StateEventId.Enable);
        stateMachine.AddTransition&lt;EnabledState, DisabledState&gt;((int)StateEventId.Disable);

        // 起動状態はDisabled
        stateMachine.SetStartState&lt;EnabledState&gt;();
    }

    private void Start()
    {
// 中略...
        // ステートマシンを起動
        stateMachine.Update();
    }

    // Playerクラスと言っておきながら移動コンポーネントなのでFixedUpdateでステートマシンを回す
    private void FixedUpdate()
    {
        // ステートマシンの更新
        stateMachine.Update();
    }

    // プレイヤーの操作を有効にします
    public void EnableMove()
    {
        // ステートマシンに有効イベントを叩きつける
        stateMachine.SendEvent((int)StateEventId.Enable);
    }

    // プレイヤーの操作を無効にします
    public void DisableMove()
    {
        // ステートマシンに無効イベントを叩きつける
        stateMachine.SendEvent((int)StateEventId.Disable);
    }

    // プレイヤーの移動も何も出来ない哀れな状態クラス
    private class DisabledState : ImtStateMachine&lt;Player&gt;.State
    {
    }

    // プレイヤーの移動が許された状態クラス
    private class EnabledState : ImtStateMachine&lt;Player&gt;.State
    {
        // 状態の更新を行います
        protected override void Update()
        {
// 中略...
        }
    }
}

