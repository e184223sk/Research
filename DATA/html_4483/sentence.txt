More than 1 year has passed since last update.ASP.NETの WebForm は経験があるけども、そろそろ卒業してASP.NET MVC やASP.NET Core に移ろうと思い、書籍やサイトにて情報を集めていますが、どこへ行っても応用ばかりで基本的な部分が紹介されているところというのが少ない。そして、書籍やサイトを参考にサンプルを書いてみても、基礎がわからないのでやりたいことを実現しようとしても実現できない。
そして、そのような情報を探そうとしても、グーグルの検索が難しくなっていて、なかなかヒットしない（探そうとしているキーワードを考えるのも難しい）。ならば、自ら、１つ１つ解析しながら進むしかない！環境もあるんだし。ということで、１つ１つ確認しながら進むことにしてみました。１から無知な状態で始めると、いろいろ課題や問題点も出てくるので、それを一つ一つ片付けながらやっていこうと思います。2018年10月時点最新の、.NET Core 2.1 を利用します。
なお、開発環境はとりあえずVisual Studio 2017 Community(15.8.8)で行います。
進むにつれ、バージョンはアップしていくかもしれません。0から始めるため、「ASP.NET Core Web アプリケーション」より「空」のプロジェクトで行います。なお、SSLとDockerは今回設定するとややこしいことと、目的が異なるので外しておきます。空のプロジェクトで作るとだけのコードができます。実行すると、Hello World! が表示されるというのはわかったのと、context 自身は、ASP.NET のWebFormでも出てきたので、パス。Razor のページでの書きこができるよう、MVCを有効にします。これで実行すると、当然404エラーが返ってきます。次に、ソリューションのルート階層に「Pages」フォルダーを作り、そこにメニューから「追加＞Razorページ」が選択できるので、そこから追加します。「Razorページ名」を、とりあえず「Index」で作成、「PageModelクラスの生成」のみチェックをつけ、それ以外のチェックは外し、追加を押します。「Pages」フォルダに以下のファイルが出来上がりますIndex.cshtmlファイルは、というのができています。Index.cshtml.cs にはができています。
とりあえず、最初は cshtml.cs は無視して、cshtml で遊びます。Razor の書き方などはここでは説明しませんので、Microsoftのサイトや書籍などで確認して欲しいです。とりあえず、@ { ... } の中にコードが書けるということが分かったので、情報を表示させてみます。「デバッグ＞デバッグの実行」より起動させると、無事にの文字が!!やったね!!!...ってちょっとまって。
出力されたHTMLコードを見てみると、出力文字列がHTMLエンティティに変換されて出力されているのですが、これは...1
もしかして、はろーわーるどが悪いんだろうと思い、もう一つサンプルを。結果、うん、何か気持ち悪いので、これを直す方法を次回までに、この問題の対処する方法を調査する...ということで、続きます上記、HTMLエンティティ問題は、別途記事にて回答いただき、解決しました。上記コードでHTMLエンティティ問題を解決できることを確認しています。Firefox 63 での確認結果です ↩


