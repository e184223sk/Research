More than 1 year has passed since last update.C#歴1年未満の私が実装していてハマった例外や問題を自分への戒めを込めてごった煮でまとめてみました。LINQは遅延評価されるためforeach文が実行される時にはまだ計算されておらず、エラーが生じてしまいます。RemoveAllメソッドを使う。
引数にラムダ式を書くことが出来るので、かなりコードがすっきりします。「コレクションが変更されました。列挙操作が実行されないことがあります。」と言われてしまいます。もしコレクションを操作したい場合は、対象のコレクションのコピーを作成しforeach文に使用します。
RemoveAllメソッドだと、さらに簡単に書けます。StreamWriter.WriteLineメソッドを使っていてHDD内のファイルを確認すると内容が書き込まれていないといった問題が起こりました。上記の段階でファイルを確認すると書き込まれていないことが分かります。
これは、Colseメソッドを呼んでいないことが原因です。
WriteLineメソッドはCloseメソッドが呼ばれて初めてHDD内のファイルへ書き込みます。
そのため上記のコードだけでは、書き込まれていないことになります。
（usingを使っていればまず会うことのない現象ですが…）ただし、ファイルへ書き込みたいがStreamを使い続けたいといった場合があります(私はその1人でした)。
その場合は、Flushメソッドを使うことで解決します。
ただし、Streamの解放は忘れないようにしましょう。usingを使う。Colseメソッドを呼ぶ。
Streamを使い続けたい場合は、Flushメソッドを使う。下記のようにStreamWriterをCloseしたときにFileStreamもCloseしていることに気づかず、System.ObjectDisposedExceptionが発生することがあります。Streamを使い続けるときは、不要になったタイミングでStreamをCloseする。albireoさん、コメントありがとうございます。ParseExactメソッドの場合、Parse出来なかったときSystem.FormatExceptionが発生します。TryParseExactメソッドを用いる。
Parse出来なかったときこれで例外は発生しなくなります。
ただ、なぜ例外が発生したかはわかりにくいですね。
ParseExactメソッドでもSystem.FormatExceptionが発生すると「文字列は有効な DateTime ではありませんでした。」と言われるだけなので、どこが間違っているか分かりにくいです。
(例だとDateTimeStyles.AllowInnerWhiteを指定すればよいのですが)https://dobon.net/vb/dotnet/string/datetimeparse.html
いつも迷うのでカスタム日時書式指定文字列Enumerable.Repeatを使って初期化すると同じ参照値を示しているため別の要素の値まで置き換わってしまいます。LINQのSelectを使って初期化するとジャグ配列を正しく生成できます。http://emkcsharp.hatenablog.com/entry/2013/Advent
http://shirakamisauto.hatenablog.com/entry/2016/03/04/143710
https://qiita.com/yosizo@github/items/1adcff1fc974cde5256a文字列の比較にEqualsを使っていたのですが==の方がよいと聞いたのでまとめてみました。System.String.Equalsの中身はReference Sourceから引用するとこれを見ると、Equalsの引数の型が異なってもいい感じにStringにキャストされてしまうためコンパイルエラーが起こらないことが分かる。
また、Equalsは型によって比較の挙動が変わり、System.Object.Equalsは参照の比較になる。
C#8でnull安全が導入されると聞きましたし、文字列の比較は==を使っていった方がいいかもしれませんね。さらにEnumも==での比較が良いです。
型チェックが行われるため別のEnumで同じ名前が使われていても異なる型になるためコンパイルエラーになるためです。http://sonic64.com/2006-02-02.html
http://publisher-plus.sakura.ne.jp/wordpress/?p=751
http://etc9.hatenablog.com/entry/2013/10/03/092927
(2019/3/23追記)LINQの遅延効果はうっかり忘れがちなので気を付けたいです。
恐らくそのうち増えます。


