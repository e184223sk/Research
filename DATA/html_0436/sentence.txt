本家動画はこちら
EP06～09はこちら
番外×2 + EP10～はこちらBlazorを勉強するのになんかいい教材ないかなぁと探してたらYoutubeにチュートリアル動画(英語)が上がっていたので自動翻訳字幕見ながらまとめてみました。
https://www.youtube.com/watch?v=xr56fmgLl74&amp;list=PL4WEkbdagHIR0RBe_P4bai64UDqZEbQap★★★★注意★★★★
翻訳ではなく
「そんな感じのこと言ってるなぁ」
「全然違うこと言ってるけどつまりはそういうことか」
ということをまとめてます。　(Task.FromResultってなんやろう？)
　タスク ベースの非同期プログラミング
　https://docs.microsoft.com/ja-jp/dotnet/standard/parallel-programming/task-based-asynchronous-programming
　C# 並行・並列プログラミング パターン集
　https://qiita.com/takutoy/items/c384fcb439d345a9a0d3
　→そうか、このメソッドが非同期処理で、戻り値がTask&lt;WeatherForecast[]&gt;やからこれを使うんやな。
　
+ (「Enumerable.Range(1, 5).Select」…？)
　[C#] 連番の作成 (Enumerable.Rangeの利用）
　https://qiita.com/koara-local/items/534376eabd11c64d31af
　→連番作成のメソッドとLINQの組み合わせかぁ
　
　(アロー演算子もよう知らんねんなぁ…)
　デリゲート - C# によるプログラミング入門 | ++C++; // 未確認飛行 C
　https://ufcpp.net/study/csharp/sp_delegate.html
　→関数ポインタの考えを発展させたみたいな感じやな。
　
　古典的に書き換えるとこんな感じか。
　LINQもアロー演算子も確かにコード量は減るけど、初学者には厳しいなぁ…　(ちょっとまて、ForecastServiceの実体はどこやねん)
　→EP04で解説されてた。「Startup.cs」のConfigureServicesメソッド内で
　　「services.AddSingleton&lt;WeatherForecastService&gt;();」
　　って感じでシングルトンつくって@injectで使ってるんか。(とりあえずEP10まで見たけど、まとめると結構時間かかる)　(うあぁ、むっちゃラムダ式やん。詳しく見て言ってたらこれだけで1～2週間かかりそう)
　(とりあえず定義だけ追いかけとこうか)
　static IHostBuilder CreateDefaultBuilder(string[] args);
　static IHostBuilder ConfigureWebHostDefaults(this IHostBuilder builder, Action&lt;IWebHostBuilder&gt; configure);
　(thisってなんやろう？C++のthisポインタとは違うと思うけど)
　→C# 3.0の拡張メソッドっていうんか。
　https://ufcpp.net/study/csharp/oo_static.htmlって書くとって書ける。便利やん。　(bool,datetime,decimal,double,float,guid,int,long の8つが使えるみたいやね。)
+ では次に「ボタンを押してページ遷移」を実装してみよう。
+ とりあえず「Counter.razor」から&lt;button class="btn btn-primary" @onclick="IncrementCount"&gt;Click me&lt;/button&gt;とprivate void IncrementCount()を「Authors.razor」へコピーして関数名をNavigateに変えよう。
+ 「Authors.razor」の頭に@inject NavigationManager NavigationManagerを追加しよう。
+ Navigate関数の処理にNavigationManager.NavigateTo("/authors/authordata/22");を追加しよう。
+ あとリンクの方も"/authors/authordata/11"に変えておこう。
+ 動かしてみよう。思った通りに動くね。
+ これ以外にもいろいろやり方があるよ。
+ 「App.razor」がルーティングの起点になってるって覚えておいてね。　(依存性注入の概念はwikipediaとか見たほうが良さそう)
　依存性の注入 - wikipedia)
　(「依存性の注入」って言葉だといまいちピンとこないけど、依存してるクラスのオブジェクトを後から注入する、ってことか)やり方は簡単で「Startup.cs」のConfigureメソッドにservices.AddTransient&lt;クラス名&gt;();またはservices.AddSingleton&lt;クラス名&gt;();またはservices.AddScoped&lt;クラス名&gt;();と書いて利用するrazorコンポーネントの頭に@inject クラス名 オブジェクト名って書くだけ。
　(動画ではservices.AddTransient&lt;IAuthorService,AuthorService&gt;();みたいにインターフェースを分けて「後でバージョンアップしたのと入れ替えれ得るよ」とか言ってるけど、ビルドしなおすようじゃメリット無いよなぁ…)
　(そもそも最近じゃ「バージョンアップはコンテナごと入れ替え」みたいなことが多いしなぁ…)
　(まぁメリットが見えてきたらインターフェースを作るパターンを使ってみよう)AddTransient と AddSingleton と AddScoped の違いを確認してみよう。AddTransientだとページ遷移の度に時間が更新されてるね。挙動としてはOnInitialized()でAuthorServiceクラスのオブジェクトを生成してた時と同じだね。AddSingletonだとページを遷移してもリロードしても時間が変わらないね。つまりアプリケーションで一回だけ生成されるようになるよ。AddScopedはAddSingletonとほぼ同じだけど、AddScopedはリロードしたら時間が変わるよ。つまりリロードの際にオブジェクトが再生成されるよ
　
(インターフェースそのままで実装クラス変えてバージョンアップの話は読み飛ばしていいか)　(関係ないけどMicrosoftDocの日本語ページ見るより、英語ページをEdgeかChromeでブラウザの翻訳機能で訳したほうがきれいな翻訳になるな。コードまで翻訳されるけど)　(この動画じゃ「Clear」ボタンも&lt;EditForm&gt;に&lt;input type="submit"&gt;で書いてるけど、シンプルに実装するなら「Clear」は&lt;button&gt;で実装して決定時のメソッドと分けたほうが良さそう)
→あかんかった。結局&lt;button&gt;も&lt;input type="submit"&gt;になるっぽくてOnValidSubmitで指定したメソッドが走る。
→&lt;input type="reset"&gt;とするのが正解か。　(あとGitHubでこの人が公開してるプロジェクト見て知ったんだけど、razorコンポーネントのコメントって@* ～～ *@なのな。(丁度&lt;DataAnnotationsValidator&gt;がコメントアウトされてた))[EmailAddress]: 電子メール形式であること
[Phone]: 電話番号であること
[RegularExpression]: 指定した正規表現に一致すること
[Url]: URL 形式であること(長くなったんで5刻みで分けようと思います)


