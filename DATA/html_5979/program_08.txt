
public static IEnumerable&lt;IEnumerable&lt;T&gt;&gt; Buffer&lt;T&gt;(this IEnumerable&lt;T&gt; source, int count)
{
    if (source == null)
        throw new ArgumentNullException(nameof(source));
    if (count &lt;= 0)
        throw new ArgumentOutOfRangeException(nameof(count));

    return source.BufferImpl(count, count);
}

private static IEnumerable&lt;IEnumerable&lt;T&gt;&gt; BufferImpl&lt;T&gt;(this IEnumerable&lt;T&gt; source, int count, int skip)
{
    var buffers = new Queue&lt;IList&lt;T&gt;&gt;(Math.Max(1, count-skip) + 1);

    var i = 0;
    foreach (var item in source)
    {
        if (i % skip == 0)
            buffers.Enqueue(new List&lt;T&gt;(count));

        foreach (var buffer in buffers)
            buffer.Add(item);

        if (buffers.Count &gt; 0 &amp;&amp; buffers.Peek().Count == count)
            yield return buffers.Dequeue();

        i++;
    }

    while (buffers.Count &gt; 0)
        yield return buffers.Dequeue();
}

