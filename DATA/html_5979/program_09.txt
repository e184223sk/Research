
public static IEnumerable&lt;IEnumerable&lt;T&gt;&gt; Buffer&lt;T&gt;(this IEnumerable&lt;T&gt; source, int count)
{
    if (source == null)
        throw new ArgumentNullException(nameof(source));
    if (count &lt;= 0)
        throw new ArgumentOutOfRangeException(nameof(count));

    return source.BufferImpl(count);
}

private static IEnumerable&lt;IEnumerable&lt;T&gt;&gt; BufferImpl&lt;T&gt;(this IEnumerable&lt;T&gt; source, int count)
{
    var buffer = new List&lt;T&gt;(count);

    foreach (var item in source)
    {
        buffer.Add(item);

        if (buffer.Count == count)
        {
            yield return buffer;
            buffer = new List&lt;T&gt;(count);
        }
    }

    if (buffer.Count &gt; 0)
        yield return buffer;
}

