
class FooClass
{
    private sealed class FooEnumerable : IEnumerable&lt;long&gt;, IEnumerator&lt;long&gt;
    {

        private int _state;

        private long _current;

        private int _initialThreadId;

        private int _a;

        public int A
        {
            get =&gt; _a;
            set =&gt; _a = value;
        }

        public FooClass _this;

        long IEnumerator&lt;long&gt;.Current =&gt; _current;

        object IEnumerator.Current =&gt; _current;



        public FooEnumerable(int state)
        {
            _state = state;
            _initialThreadId = Environment.CurrentManagedThreadId;
        }



        void IDisposable.Dispose() { }



        bool IEnumerator.MoveNext()
        {
            switch (_state)
            {
                    case 0:
                        _state = -1;
                        _current = 0;
                        _state = 1;
                        return true;
                    case 1:
                        _state = -1;
                        _current = _a;
                        _state = 2;
                        return true;
                    case 2:
                        _state = -1;
                        _current = 2 * _a;
                        _state = 3;
                        return true;
                    case 3:
                        _state = -1;
                        return false;
                    default:
                        return false;
            }
        }



        void IEnumerator.Reset()
            =&gt; throw new NotSupportedException();



        IEnumerator&lt;long&gt; IEnumerable&lt;long&gt;.GetEnumerator()
        {
            FooEnumerable retval;
            if ( _state == -2 &amp;&amp;  _initialThreadId == Environment.CurrentManagedThreadId)
            {
                _state = 0;
                retval = this;
            }
            else
            {
                retval = new FooEnumerable(0) { _this = _this };
            }

            retval._a =  A;
            return retval;
        }



        IEnumerator IEnumerable.GetEnumerator()
            =&gt; (this as IEnumerable&lt;long&gt;).GetEnumerator();

    }



    public IEnumerable&lt;long&gt; GetFooEnumerable(int a)
    {
        var retval = new FooEnumerable(-2)
        {
            _this = this,
            A = a
        };
        return retval;
    }

}

