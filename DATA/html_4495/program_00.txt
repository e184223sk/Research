using System.Collections;
using System.Collections.Generic;
using UnityEngine;

[RequireComponent(typeof(Rigidbody2D))]
public class Player : MonoBehaviour 
{
    Rigidbody2D rigid;

    /// 何段階ジャンプできるか
    [SerializeField]
    uint maxJumpSteps = 1;

    /// 現在何段階目のジャンプか
    uint jumpCount = 0;

    void Start()
    {
        rigid = GetComponent&lt;Rigidbody2D&gt; ();
    }

    void Update()
    {
        Move ();

        if (Input.GetKeyDown (KeyCode.Space))
            Jump ();
    }

    //テスト用に書いた移動処理なので参考にしないほうが良い
    void Move()
    {
        if (Input.GetKey (KeyCode.RightArrow))
            rigid.AddForce (Vector2.right * 3.0f);
        else if (Input.GetKey (KeyCode.LeftArrow))
            rigid.AddForce (Vector2.left * 3.0f);
        else
            rigid.velocity = new Vector2 (0.0f,rigid.velocity.y);
    }

    //ジャンプ処理
    void Jump()
    {
        //最大の段階のジャンプを超えてたらジャンプしない
        if (jumpCount &gt;= maxJumpSteps)
            return;

        //ジャンプの力を加える
        rigid.AddForce (Vector2.up * 5.0f, ForceMode2D.Impulse);

        //ジャンプの段階を１段階あげる
        jumpCount++;
    }

    /// &lt;summary&gt;
    /// 自分が何かと接触した時に自動的に呼ばれる関数
    /// &lt;/summary&gt;
    /// &lt;param name="other"&gt;接触しているオブジェクトの情報&lt;/param&gt;
    void OnCollisionEnter2D(Collision2D other)
    {
        //自分があるオブジェクトと接触しているポイントを一つづつ調べる
        foreach (var contact in other.contacts) 
        {
            //自分から接触ポイントへのベクトル
            Vector2 dir = contact.point - (Vector2)transform.position;

            //接触しているゲームオブジェクトの下向きのベクトル
            Vector2 contactObjectDown = -contact.collider.gameObject.transform.up;

            //接触しているオブジェクトの下向きのベクトルと自身から接触しているポイントへのベクトルの
            //角度が１０度未満であった場合にジャンプの段階数のリセットする
            if (Vector2.Angle (contactObjectDown, dir) &lt; 10.0f)
                jumpCount = 0;

            break;
        }
    }
}


