More than 1 year has passed since last update.今回作成したサンプルはこちら からダウンロードできます。今回使用したUnityのバージョンは2017.4.1f1です。スペースキー:ジャンプ
左、右の矢印キー：左右の移動プレイヤーがジャンプするゲームを作る際に以下のような問題に遭遇すると思います。私もゲームを作り始めたばかりの頃は上の問題に悩まされていました。
Unityの接地判定のとり方を聞かれ、
せっかくの機会だと思ったので記事にしようと思い書きました。
技術的な記事を書くのが初めてで分かりにくいところもあると思いますが、
この問題で悩んでいる方の手助けになることができれば幸いです。今回は接地判定についての記事なので移動処理については解説しません。
移動処理は適当に書いているので...まずJumpメソッドです多段階ジャンプにも対応できるようにmaxJumpStepsで何段階ジャンプできるかを定義しています。
そして、１回ジャンプするごとにjumpCountをカウントアップしていきます。
jumpCountがmaxJumpSteps以上になったら処理を打ち切ってジャンプしないようにしています。余談ですがAddForceメソッドの第二引数のForceMode2D.Impulseは一度に力を加える時に指定し、
継続的に力を加える場合はForceMode2D.Forceを使用します。(第二引数を省略するとデフォルトでForceMode2D.Forceになります)今回一番重要になってくる部分がOnCollisionEnterの部分ですforeach(var contact in other.contacts)はotherと接触している場所の数だけ繰り返します。
other.contactsの情報を一つづつ取り出しcontactに入れてループを回します。
基本的に接触する場所は一箇所しかないと思いますが一応確認していきます。コードだけだと分かりにくいので、変数との関係を図にしてみました。
床の上むきのベクトルを反対にして、dirとの角度が0に近いかどうかで着地しているか判定しています。
着地していると判定されると、jumpCountが0にリセットされて再び多段階ジャンプができるようになります。この判定のとり方だと床の側面に接触した時は着地していると判定されなくなります。
(ステージに床を配置するときSceneビューでY軸が上を向くように配置してください)
また、床を斜めにおいた場合でも着地しているかの判定を取ることができます。今回は2Dでサンプルを作成しましたが、3Dでも同じ方法で判定を取れると思います。分かりずらいことがあったらコメントください！初めて記事を書いてみて、このくらいの内容でも結構まとめるのに時間がかかる事にびっくりしました。
普段、記事に助けられているので記事を書いてくださっている方にはとても感謝しています。宣伝になりますがAppStoreにCocos2d-x,Unity,OpenGLESで作ったゲームをリリースしているのでぜひ遊んでみてください！
→AppStore


