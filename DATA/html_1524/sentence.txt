More than 1 year has passed since last update.要件は以下の通り。(Visual Studio 2019・.NET Framework4.7.2)作るだけ。できた。確認のため、とりあえず普通に、KeyDownを検知してみる。これでよし。なんでやねん。英語入力しか検知できないようです。Enterキーが物理的に押されているかどうか確認する。CtrlキーやShiftキーが押されていた場合の動作は別途用意すれば良い。これでよし。なんでやねん。先ほどの結果と合わせて考えると、IME確定も改行もKeyDownイベントとして認識されていないっぽい。検知するイベントを変えます。いけそう。完璧です。PreviewKeyDownイベントで、e.Key.ToString() == "Return"を判定してやればよい。ちなみになぜこれを備忘録として残す事になったかというと、ネットで調べるとTextChangedイベントで、テキストボックスの行数が変わったら改行するというコードが先に出てきて、謎実装しかけるはめになったから。
ちなみに、TextChangedイベントを使うと、最後のEnterが改行として使われてからイベントが発火することになるため、それを許さない要件の場合そもそも使えない。(つまり、「あいうえお」の「い」と「う」の間にカーソルがある状態で、イベントを発火させようとしてEnterすると、先に改行が入るため、「あい\r\nうえお」を処理する羽目になる。)
その点、PreviewKeyDownイベントを使えば、e.Handled = true;としてやることで、キーイベントの処理を明示的に終了できるので、その心配も無い。さらにちなみに、KeyEventArgs.ImeProcessedKeyというのもあるみたいだが、これは英語圏で使われる文字を打ったときは全部Noneを返してくるので、今回のように改行を検知したいなら、Keyboard.IsKeyDown(Key.Return) &amp;&amp; e.ImeProcessedKey.ToString() == "None"とすれば使えないこともない。
そうではなく、IME確定を検知したいなら、e.ImeProcessedKey.ToString() == "Return"となるので、強い味方となりそうだ。


