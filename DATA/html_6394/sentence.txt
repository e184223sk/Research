More than 3 years have passed since last update.ある数が素数か素数以外かを判定するプログラムです。（C#、Java、C++対応）
CodeIQなどのプログラミングコンテストで問題としてよく出てくるので作ってみました。なるべくなら自分が理解できる範囲のコードにしておきたいなぁというのがあるので、今はこれを最速版としています。（簡単でしょ？）
でも、問題を解くだけならこれぐらいの速さで十分な気がします。
これで不十分な場面が出てきたらまた考えましょう。「ええぃサービスだ、JavaとC++の実装も持っていきやがれ！」（ほぼ同じ）Java版動かしてないけどたぶん大丈夫だと思います。。私が分からなかった用語をざっくり説明します。実装してるアルゴリズムは主にこちらのサイトの内容を参考にしました。
素数判定 | アルゴリズムとデータ構造 | Aizu Online Judgeこのサイトに、
素数判定では、「合成数xはp≦√xを満たす素因子pをもつ」という性質を利用することができます。
という記載がありますが、
「合成数xはp≦√xを満たす素因子pをもつ」＝「xが合成数ならば、√x以下の約数を持つ」
と言い換えることが出来ますので、ループの終了条件がMath.Sqrt(num)までになっている訳です。
単純にnumまで剰余演算をするのに比べると、ループ回数が減って処理速度が大幅に短縮されます。素数判定アルゴリズムは大きく分けて２種類があるようです。
- 決定的素数判定法
- 確率的素数判定法決定的判定法とは、確実に誤りが出ない方法で素数判定を行うというもの。
確率的判定法とは、たまに誤りが出るかもしれないけど判定速度が劇的に速くなる方法。決定的素数判定法の代表格は、「AKS素数判定法」
確率的素数判定法の代表格は、「ミラーラビン素数判定法(Miller-Rabin primality test)」より速い実装が必要な人はこちらも検討してみてください。大多数の方は、上記の最速アルゴリズムが分かればこんなページに用は無いと思います。
最速アルゴリズムに至るまでの実装の過程を見たいという方のみ以降をお読み下さい。割る数を1ずつ増やしていきながら、実際に割り切れるか確認する力技。
この方法は自分でも思いつきましたが、処理速度が遅すぎました。単純な実装に少し工夫をするだけで、処理速度が半分ほどになります。
簡単に言うと、偶数は2で割り切れるのが分かりきっているので、あらかじめ除きましょうということです。
同様に3の倍数、5の倍数をあらかじめ除くこともできる様ですが、それ程劇的には速くならないようです。素数判定 - Wikipedia
素数判定 | アルゴリズムとデータ構造 | Aizu Online Judge


