More than 3 years have passed since last update.C#もついに7.0まで来ました。仕様がだいぶ固まってきたのでライブコーディングを見ている風に解説したいと思います。主な機能は
・リテラルの改良
・タプル
・分解構文（Destruction）
・Deconstructor
・型スイッチ（定数、型、変数とのマッチング）
・ローカル関数
・Out Variables
・戻り値にRefこの記事ではDeconstructorまで解説します。空のProgram.csから始めていきます。started...と表示して止まるだけのコンソールアプリケーションです。using staticを使用するとstaticメソッドの呼び出し時にクラス名を省略できるようになります。ちょっと楽になりました。メソッドの名前解決に多少注意を払う必要があります。例えば上記のProgramクラスにReadLineメソッドが定義されてるとそっちが優先されたりするので少し注意が必要です。この機能はRazorとかで利用するとかなり楽になると思われます。今はみたいに書いてると思いますがこれらのHtmlが全部省略できるようになるとだいぶコードがすっきりしそうです。（できるようになるのかな？ちょっと不明ですが）次はリテラルの改良についてです。int[]を宣言します。リテラルにアンダーバーを混ぜて見やすく書けるようになりました。どうやらQiitaのエディターが対応していないようです（笑）色がうまくつきません。アンダーバーの位置はどこでも大丈夫です。カラーコードや3桁区切りで上記の感じに書いても大丈夫です。だいぶ見やすくなります。さてコードに戻ります。次はこれらの数字の合計と個数を計算してみます。今までは2つの値を返すにはクラスを作る必要がありました。こういったシーンでの問題は２つあって
1.クラスの定義の作業コスト
2.クラスの名前を考えるコスト
という問題があります。作業コストはもちろん面倒ですし、いろいろないくつかの値をグルーピングして持つ似て非なるクラスの適切な名前を毎回考えるのはなかなかに面倒です。タプルの登場で上記の問題が綺麗に解決されます。クラスの定義がで済むようになり大幅に簡単になります。この記述でコンパイラが内部的にValueTupleクラスに変換してくれてItem1,Item2という形でアクセス可能になります。しかしItem1はなんか嫌ですね。やっぱりプロパティに名前を付けたいという話になるのでその場合は以下のように書きます。これでプロパティに自分の好きな名前をつけることができました。タプルは実際にはValueTuple構造体にコンパイラが変換するため、スタックメモリを使用します。ヒープメモリは使用しないためGCの負荷を減らすことができます。これによりゲームなどでマイフレームごとに画面上のオブジェクトの次の場所の計算処理をするとかの場合には劇的なパフォーマンスの向上が見込めるでしょう。タプルの解説で「適切なクラス名が思いつかない」というのがありましたが、適切なクラス名が思いつかないということはその値を代入する適切な変数名を考えるのも面倒だということになります。この例だとsummaryという変数名です。今回は計算処理が1か所しかないですが、これが例えば5か所あると変数名を考えるのが大変です。クラスと同様に変数名も省略可能にできたらいいのにと思うのは必然の流れとも言えます。これを実現するのが分解構文（Deconstruction）という機能です。この書き方でtotalOfNumberに合計値、numberCountに個数が代入されます。summaryという微妙な名前の変数名が消えているのがわかると思います。代入は引数の順番でマッチングされます。プロパティ名は全く考慮にいれません。この場合は
■戻り値 -&gt; (int Total, int Count)
■宣言 -&gt; (int totalOfNumber, int numberCount)
となっているのでTotalがtotalOfNumberに、CountがnumberCountにそれぞれ代入されます。
順番しか考慮しないということは、もし例えば以下のように
■戻り値 -&gt; (int Total, int Count)
■宣言 -&gt; (int Count, int numberCount)
となった場合、TotalがCountに、CountがnumberCountにそれぞれ代入されます。さてこんな便利な分解構文ができたならば自分のクラスも分解してほしいという話になります。
例えばPersonクラスを作りそのプロパティを分解可能にするにはというようにstaticなDeconstructメソッドを定義します。これによりPersonクラスは分解構文で利用可能になります。
何故Deconstructorがタプルによる戻り値ではなくてoutパラメータなのかというと、オーバーロードができるようにとのことです。これによりいろんなパターンでの分解処理を実装することができます。以上その1でした。検証はしてないので間違いがあったらコメント頂けると助かります。
そのうち気が向いたらその2を書きます。


