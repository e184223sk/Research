TwilioをAzure FunctionsとC#で、使用するためのまとめです。
備忘録的な内容なので細かな部分において、説明が雑なところがありますがご了承ください。TwilioやAzureのアカウント登録、VSCodeの拡張機能のインストール方法はここでご説明致しませんのでQiita等でお調べください。Azure Functionsの拡張機能を使用して、Azure Functionsのプロジェクトを作成します。まずはAzureのタブを選び、稲妻マークをクリックします。
「Create new project」を選択し、保存先のパスを指定します。
プロジェクトの設定を行います。今回はC#を使用したいので、C#を選びます。
C#のランタイムをしています。今回は、.NET Core 3 LTSを選んでいます。
Twilioから　呼び出してもらうため、HTTP triggerを選びます。
APIの名前を指定します。今回は、twiliosampleを入力しています。
namespaceを指定します。今回は、masaya3.twilioを入力しています。
関数のアクセスの制約を指定します。今回は、初期値であるFunctionを選んでいます。
最後に、新しいウィンドウでプロジェクトを開くかを選びます。今回は、現在のウィンドウをそのまま使用しています。
問題がなければ、Azure Functionsのプロジェクト作成されます。
作成したプロジェクトが動くか確認してみます。
F5を押すことで、ビルドされ、問題がなければローカルのサーバが起動します。
※ローカルで動かすには、Azure Functions Core Tools が必要です。もしインストールされていない場合は、エラーがでるので、エラー内容にそって設定してください。起動すると、TERMINALにローカルサーバのURLが表示されます。TERMINALに表示されているURLにCtrlを押しながらクリックするか、URLをブラウザで入力しアクセスすると動きを見ることができます。正常に実行されると以下のような文字が表示されます。
Azure Functionsのベースができましたので、次はTwilioのライブラリをインストールします。使用するライブラリはこちらVSCodeでF1を押して、メニューからNuget:Open Nuget Galleryを選択します。
メニューから、Microsoft.Azure.WebJobs.Extensions.Twilioを探し、　右のプロジェクト名にチェックをつけて、「Install」をクリックしてインストールします。
※Twilioだけだといっぱい検索に引っかかるので、Microsoft Twilio等で検索してみてください。
ライブラリもインストールできたので、実際のコードを記述していきます。今回説明しているサンプルコードはこちらで公開しています。API呼び出し時にTwilioから渡されるデータを取得します。
以下は、電話番号を取得しています。データは、Form-Dataに格納されていますので、そこから必要となるデータを取得してください。どのようなデータが取れるかは、以下のリファレンスを参照してください（これいつも忘れる・・）電話の応答などは、TwiMLを使って記述します。
直接、XMLを作っても良いですが、インストールしたTwilio SDKのVoiceResponseで簡単に作成することができます。VoiceResponseのSayメソッドで、応答時に話すメッセージを文字が設定できます。
今回は、発話のパラメータとして、日本語音声であるlanguage: "ja-jp"や、音声の種類のvoice: "alice"を指定しています。
発話で登録可能な各種パラメータは、以下のリファレンスを参照してください。VoiceResponse.ToString()でTwiMLが作成されます。
このTwiMLをAPIの返り値として返します。返り値の返却方法として、ContentResultを使用し、必ずContentType = "application/xml"を指定します。
これを指定しないとTwilio側で認識されません。日本語のVoiceで使用できるパラメータは、alice、Polly.Mizuki、Polly.Takumiです。
manとwomanは指定できないため、aliceと同じになってます。今回は動かしていませんが、ボタンによる入力方法もまとめます。
ボタンの入力は、Gatherを使用します。
これを使用することで、よくある電話を使った入力を実現することができます。
入力後は、Actionパラメータで指定されたURLが呼び出されます。詳しいパラメータは、以下のリファレンスを参照してください。タイムアウト後に、発話をさせたい場合は、Gather後に発話のSayを登録します。Azureに登録する前に、ローカル環境で動作を検証します。
今回もF5を押して、ローカルサーバを起動します。curlなどを使用(私はPostman)して、form-dataにFrom:+8109012345678を入力して、POSTします。正常に動作すれば、戻り値として、「入力された電番番号ら着信がありました」というメッセージが入ったTwiMLが表示されます。
ローカルで動きが確認できたら、Azureに登録します。
VSCodeからAzureへサインインが必要となりますが、サインイン方法は、こちらを参照くださいまずは、Azureタブを開き、FUNCTIONSから以下のマークをクリックします。
登録先として、ここではすでに作成済みの関数アプリ（higedaruma）を指定しています。
関数アプリから作成する場合は、こちらの記事を参照ください
問題なければ「Deploy」ボタンをクリックします。
デプロイが成功すれば、Azureの関数アプリにtwiliosampleが追加されます。
関数からtwiliosampleを開き、「コードとテスト」を選択、「テストと実行」をクリックすると、入出力の確認が確認ができます。
事前に動きを見てると、問題が発生したときの切り分けがしやすくなので一度は動作確認をしましょう。
Azureに登録した関数アプリをTwilioに登録します。Azure Functionsのtwiliosampleから、関数のURLの取得を選択し、APIのURLを取得します。
TwilioのWebhookに先ほどコピーしたURLを登録します。
あとは、電話番号に電話をすれば動作を確認できます。
半年ぐらいすると、この流れを忘れそうだったので、メモとして作成しました。
サーバを意識せず、デバッグ含めてローカルでできるのはかなり便利です。


