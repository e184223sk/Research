More than 1 year has passed since last update.業務で ASP.Net Core MVC を使っていたのですが、RazorPage でウェブアプリを作ったことはなかったので、勉強かねて仮想的なECサイトを作っていました。その中で、いくつかハマった事をまとめておこうと思います。
今回は、アクセス制限のかけ方についてまとめます。デジタル作品をアップロードして、販売できるECサイトを想定して解説します。以下は、ソリューション内のフォルダ構成で、カッコ内はURLです。
解説に必要な部分だけ示しています。なお、フォルダ構成と URL は一致しているわけではありません。
例えば、カートページは Purchase フォルダ内のページですが、 /Cart でアクセスできるような状況を想定しています。ここでは、StartUp.cs 内で設定する方法を解説します。
以下のコードは、すべて ConfigureService 内に記述します。Seller エリアにあるすべてのページは、ログインしていて、なおかつロールに"Seller"が設定されているユーザーのみアクセスできるように設定します。事前に、ポリシーを追加しておきます。このアクセスポリシーを、Seller エリアに適用します。
エリアに承認規則を設定するには、AuthorizeAreaFolder を使います。
フォルダーパスは、エリアフォルダを基準にした相対パスを設定します。実際のコードは以下のようになります。以下のような承認規則を設定します。『購入関連のページは、ログインユーザー以外アクセスできないようにしたいが、カートページだけはログインしていないユーザーもアクセスできるようにする』この場合、規則を設定する順番が重要になります。
まず始めに、Purchase フォルダーに対してログインユーザー以外アクセスできないように設定します。
その後、カートページに対して、AllowAnonymousToPage を使って、だれでもアクセスできるように設定をしすます。実際のコードは以下のようになります。Authorize~ よりも AllowAnonymous~ の方が強いので、先に .AllowAnonymousToFolder("/Purchase") とした後、.AuthorizePage("/Purchase/カード以外のページ") とやっても Purchase 以下のページはだれでもアクセスできてしまいます。ユーザー関連ページの購入作品一覧ページのみ、ログインしているユーザー本人がアクセスできるように設定します。特定のページにのみ承認規則を設定するには、AuthorizePage を使います。実際のコードは以下のようになります。他にもアクセス制限のかけ方はあります。詳しく知りたい方は、公式ページを参照してください。公式 - Razor Pages authorization conventions in ASP.NET Core未完成ですが、デジタルデータを販売できるECサイトを想定したプロジェクトを用意したので、該当するファイルへのリンクも貼っておきます。GitHub - EStalls StartUp.cs


