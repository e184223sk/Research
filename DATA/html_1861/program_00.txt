
    /// &lt;summary&gt;
    /// シリアライズ・デシリアライズをするクラス
    /// &lt;/summary&gt;
    /// &lt;typeparam name="T"&gt;対象クラス&lt;/typeparam&gt;
    class Serializer&lt;T&gt;
    {
        /// &lt;summary&gt;
        /// オブジェクトをUTF-8のjsonファイルにシリアライズする。
        /// &lt;/summary&gt;
        /// &lt;param name="obj"&gt;対象オブジェクト。要件1=POCOであること。要件2=シリアライズ対象メンバがpublicでgetter/setterがついていること&lt;/param&gt;
        /// &lt;param name="filePath"&gt;シリアライズ先のファイルパス。既存の場合は上書きされる。&lt;/param&gt;
        public static void jsonSerializeUtf8(T obj, string filePath)
        {
            var options = new System.Text.Json.JsonSerializerOptions
            {
                // trueだと出力を整形する
                WriteIndented = true,
                // UNICODEエスケープシーケンスにしない対象を指定。やらないと、ASCII文字以外すべてが　あ → \u3042　みたいな感じでエスケープされる。
                Encoder = System.Text.Encodings.Web.JavaScriptEncoder.Create(System.Text.Unicode.UnicodeRanges.All),
            };
            byte[] jsonOutput = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(obj, options);
            System.IO.File.WriteAllText(filePath, System.Text.Encoding.UTF8.GetString(jsonOutput));
        }

        /// &lt;summary&gt;
        /// シリアライズされたUTF-8のjsonファイルから、オブジェクトを復元する。
        /// &lt;/summary&gt;
        /// &lt;param name="filePath"&gt;シリアライズされたファイルのパス。&lt;/param&gt;
        /// &lt;returns&gt;復元されたオブジェクト&lt;/returns&gt;
        public static T jsonDeserializeUtf8(string filePath)
        {
            byte[] jsonInput = System.IO.File.ReadAllBytes(filePath);
            var utf8Reader = new System.Text.Json.Utf8JsonReader(jsonInput);
            return System.Text.Json.JsonSerializer.Deserialize&lt;T&gt;(ref utf8Reader);
        }
    }


