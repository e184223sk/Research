More than 1 year has passed since last update..NET Core 3.0が9月23日にリリースされ、様々な新機能が追加されています。
この中でも個人的に気になったのがWindowsデスクトップアプリケーションのサポートです。
今回はこれについて詳しく調べてみました。
.NET Core 3.0の新機能については以下のページが参考になります。.NET Core 3.0 (プレビュー 9) の新機能
Microsoft、「.NET Core 3.0」を正式リリース ～オープンソース化されたWPF/WinForms開発をサポート - 窓の杜Windowsデスクトップアプリケーションの作成は以下のコマンドで作成することができます。作成できるプロジェクトはdotnet newで確認することができます。試しにwpfプロジェクトを作成してみます。通常の.NET Frameworkでwpfプロジェクトを作成したときとほぼ同じ内容のファイルが作成されています。
このプロジェクトは通常の.NET Coreのプロジェクトと同様にdotnet runコマンドで実行できます。
実行すると何もないウィンドウが表示されます。Windowsデスクトップアプリケーションがサポートされる前でもWin32APIを使用すればウィンドウを持ったアプリケーションを作成することはできました。
ではWindowsデスクトップアプリケーションとはwinformsやwpfことを指すのでしょうか。
従来のアプリケーションの決定的な違いはpublishしたときに現れます。試しに先ほど作成したプロジェクトをpublishしてみます。dotnet-wpf-test.exeをエクスプローラからダブルクリックします。
するとMainWindowのみが表示されます。
従来のプロジェクトでは必ずコンソールウィンドウが同時に表示されていましたがWindows Desktopアプリケーションでは表示されません。
これがWindows Desktopアプリケーションと従来のアプリケーションの違いです。Windowsがサポートしている.exeファイルはPEフォーマットと呼ばれるフォーマットになっています。
PEフォーマットにはSubsystemと呼ばれるフィールドがあり、Windowsはこのフィールドを見てWindowsアプリケーションかコンソールアプリケーションかを判断しています。
WindowsデスクトップアプリケーションをpublishするとこのフィールドがWindowsアプリケーションの値になるためコンソールウィンドウが表示されなくなります。参考:PE(Portable Executable)ファイルフォーマットの概要作成したプロジェクトの.csprojは以下のようになっています。注目すべきはOutputTypeがWinExeになっていること、SdkがMicrosoft.NET.Sdk.WindowsDesktopになっていることでしょうか。
プロジェクトを展開してWinExeで調べてみます。いくつか引っ掛かりますが興味深いのは以下の場所です。OutputTypeがWinExeのとき、CreateAppHostタスクのWindowsGraphicalUserInterfaceがtrueになることがわかります。CreateAppHostのソースは以下にあります。HostWriterのCreateAppHost関数にisGUI (WindowsGraphicalUserInterface)を渡しています。HostWriterのソースは以下にありますBinaryUtils.SetWindowsGraphicalUserInterfaceBitがそれっぽい処理みたいです。これでようやくOutputTypeをWinExeにするとWindowsアプリケーションとして作成されることがわかりました。今回の記事はほぼ何の役にもたたないことばかり書いてますが.NET Coreでデスクトップアプリケーションが作成できるようになったというのは感動的です。
他にもC#8.0が使えたり.NET Standard 2.1がサポートされていたりするので.NET Core3.0をぜひ試してみましょう😊


