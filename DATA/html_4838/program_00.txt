
using System;

namespace Hoge
{

    /// &lt;summary&gt;
    /// Enumに文字列を付加するためのAttributeクラス
    /// &lt;/summary&gt;
    public class StringValueAttribute : Attribute
    {
        /// &lt;summary&gt;
        /// Holds the stringvalue for a value in an enum.
        /// &lt;/summary&gt;
        public string StringValue { get; protected set; }

        /// &lt;summary&gt;
        /// Constructor used to init a StringValue Attribute
        /// &lt;/summary&gt;
        /// &lt;param name="value"&gt;&lt;/param&gt;
        public StringValueAttribute(string value)
        {
            this.StringValue = value;
        }
    }



    public static class CommonAttribute
    {

        /// &lt;summary&gt;
        /// Will get the string value for a given enums value, this will
        /// only work if you assign the StringValue attribute to
        /// the items in your enum.
        /// &lt;/summary&gt;
        /// &lt;param name="value"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static string GetStringValue(this Enum value)
        {
            // Get the type
            Type type = value.GetType();

            // Get fieldinfo for this type
            System.Reflection.FieldInfo fieldInfo = type.GetField(value.ToString());

            //範囲外の値チェック
            if (fieldInfo == null) return null;

            StringValueAttribute[] attribs = fieldInfo.GetCustomAttributes(typeof(StringValueAttribute), false) as StringValueAttribute[];

            // Return the first if there was a match.
            return attribs.Length &gt; 0 ? attribs[0].StringValue : null;

        }
    }
}


