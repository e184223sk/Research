More than 1 year has passed since last update.ASP.NETの非同期処理についての個人的なメモです。
間違いがあったらコメント欄でご指摘いただけると嬉しいです。*1 ライブラリやフレームワークの仕様により async/await が使用できず、.Resultを使用しないといけないこともある。c.f.
- .NET で非同期 (Async) がなぜ重要なのか同期処理をラップするだけのTaskを書く場面が多くなり、そのときのTaskのオーバーヘッドが問題視されていた。それを解決するための手段。以下 xin9le.net さんの記事からの引用。ValueTask は内部で Task を抱える実装をしているのですが、内包する Task を使うケースと使わないケースがあります。ValueTask にすることで効果が発揮されるのは、このうちの Task を使わないケースです。たとえば、以下のように await を通るか通らないかで変わります。また、neue.cc さんの記事によればTaskのことは忘れて全部ValueTaskで良いのですー、とのこと。非常に解りやすかったのでこちらから引用。ASP.NET の SynchronizationContext は何をするのかと言うと、HttpContext.Current を適切に設定するものらしいです。
HttpContext.Current は、リクエスト スレッドが現在処理中のリクエストに関する情報を持っています。
リクエスト スレッドから非同期処理が呼ばれてワーカー スレッドが作られても、ワーカー スレッドも同じリクエストを処理していると言えるわけですから、リクエスト情報をスレッド間で共有しているわけです。An async/await example that causes a deadlock （デッドロックを引き起こす非同期/待機の例）のコードをお借りします。Result でスレッドをロックする場合は、それ以降の処理で同期コンテキストを保持しているとデッドロックが発生する。こういった状態の回避方法はアクションメソッドなど、リクエストの受け口から async/await を使用すること。だがライブラリやフレームワークの仕様によりどうしても Result で待機する必要がある場合もある。
その場合は適切に ConfigureAwait を設定することによりデッドロックを回避することができる。c.f.
- 小ネタ 同期コンテキストを拾わないTask型
- async/awaitと同時実行制御
- asyncの落とし穴Part2, SynchronizationContextの向こう側*1 DBアクセスやファイルI/O、APIリクエストなど、メインスレッドをスレッドプールに返却する処理のこと。c.f.
- Should I expose asynchronous wrappers for synchronous methods?


