More than 1 year has passed since last update.VRで視線判定をけっこう使うのでメモしときます。Rayを使用した視線の判定も十分簡単にできます。
"目(カメラ)からビーム出してビームがターゲットに衝突したら処理を行う"
ただこれだけです。ただし、障害物があるとLayerやTagで衝突を避ける設定をする必要があります。今回は会社の上司に教えてもらった
LayerやTagを一切気にしなくてもいい方法で実装してみようと思います。まずは内積とは何かを一言で説明したいのですが、
一言で表すとなると全く思いつきませんでした。私の理解もその程度だということなので、複数のリンクを貼っておきます。
個人的に動画の解説が一番しっくりきました。Qiita記事 :【数学】「内積」の意味をグラフィカルに理解すると色々見えてくる その１Youtube : 喋り方の癖だけ耐えればめちゃめちゃわかりやすい動画Youtube : シンプルにわかりやすい動画たったこれだけです。ベクトルを正規化してくれます。
問答無用で値を1にしてくれるってことです。(ただし小さすぎると0になるので注意)normarizedを利用することで、2点の位置から算出したベクトルを
常に一定の大きさで取得することができます。二つのベクトルを渡してあげるだけで内積を返してくれます。(参考リンク)
lhs,rhsはLeft(Right) hand sideの略らしいです。今回はVector3.Dotを利用して内積が-0.9(約cos155°)以下になると見たという判定にしています。人間の有効視野の上限は20~30度だといわれている1ので
完全に視線が一致(内積が-1(cos180°))するまで判定させないより
だいたいこの辺りを見たと判断させる方が良い方法だと思います。・ターゲットの位置からカメラの位置へ向けたベクトル
・カメラの正面方向(Z軸正の向き)のベクトル
↑これらのベクトルから内積を計算してます。視線判定の範囲内に入ると赤色に変わるようにしたデモです。-0.9を-0.95のように-1に近づけてあげるともっと厳格な視線判定もできます。
　　大学はおろか高校ですら ろくに数学をやってこなかったので間違いがあれば
遠慮なくご指摘ください。2019/11/08　追記興味深い記事を見つけたので関連として貼っておきます。
【Unity】【数学】視錐台（Frustum）について（第2回）視錐台の内判定 = 見えている範囲 = Unityのカメラの描画範囲 ≠ VR(HMD越し)の視界
なので、VRへの応用は許容誤差が範囲内であれば、、、といった感じでしょうか。参考リンク ① ② ↩


