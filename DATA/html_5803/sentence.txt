More than 3 years have passed since last update.Adapter パターンと Dependency Injection (DI) を適用して、テストしづらいクラスをユニットテストできるようにするまでの流れを、HTTP通信を使うクラスを例に説明する。下記のような外部モジュールと連携するプログラムを作ったけどテストに苦労している人オブジェクト指向をそこそこ理解している人。クラス、インタフェース、オブジェクト、継承、委譲 あたりを知ってればたぶん大丈夫。この記事では「テスト」と「ユニットテスト」を下記のように区別する。サンプルプログラムは C# だが、他のオブジェクト指向型プログラミング言語でも同じように適用可能。あと Adapter パターンとか DI そのものの説明はあまり書かないので別途調べてね。架空のサービス HogeService にメッセージを投稿する機能を持つクラス HogeServiceClient がある。このクラスをテストするにはどうすればよいか？どんなテストが必要？どうやってテストする？この HogeServiceClient をテストするに少なくとも2つのテストケースが必要。しかしこのクラスをテストするには下記のような問題があり、自動化どころか手動テストも困難。このテストしづらいクラス HogeServiceClient をユニットテストできるようにしよう！HogeServiceClient のテストを困難にしているのは WebClient クラスへの依存。（WebClient クラスは変更できない！）Adapter パターンは、既存のクラスを変更することなくインタフェースを変更したいときに使うデザインパターン。（ラッパーとかプロキシとかの一種）Adapter パターンを適用して WebClient クラスへの依存を切り離す。Adapterパターンの適用は下記のように実施する元のクラス図
Adapterパターン適用後のクラス図
なお HogeServiceClient, IWebUploader, WebUploader, WebClient を、Adapterパターンではそれぞれ Client, Target, Adapter, Adaptee と呼ぶ。これで HogeServiceClient は WebClient との依存を断ち切ることができた。HogeServiceClient は IWebUploader を実装するクラスなら何でも使えるので、IWebUploader を実装するモックに置き換えればユニットテストできるようになる。とはいえテストのために new WebUploader(); を new MockWebUploader(); に置き換えるのはどうかと思う。それをなんとかするために、次に Dependency Injection を適用する。HogeServiceClient の問題は、WebUploader オブジェクトを自ら生成しているため、MockWebUploader への指し替えが難しいことにある。Dependency Injection (DI:依存オブジェクトの注入)では、自らオブジェクトを生成する代わりに、予め生成されたオブジェクトを受け取って使う。本番用コードでは WebUploader オブジェクト、テストコードでは MockWebUploader オブジェクトをコンストラクタに渡せばよい。これで HogeServiceClient は変更することなく、本番・テスト、両方で使えるコードになった。Adapter と DI を適用した場合のコード全体。元のコードからだいぶ膨れた（約2倍！）代わりに、HogeServiceClient のユニットテストができるようになった。HTTP 通信を使うテストしづらいクラスに Adapter パターンと Dependency Injection を適用し、ユニットテストできるようにした。AdapterパターンとDependency Injection を適用してユニットテストできるようにするには、Adapter パターンと Dependency Injection を適用すると、下記のようなメリットとデメリットが生まれる。プロジェクトの特性に合わせてメリット・デメリットを比較して、やるやらないを検討すればいいと思う。


