More than 3 years have passed since last update.例外の取り扱いについて考えてみる。
通常、共通処理で想定外例外をキャッチするような仕組みを作るので、プログラマが意識する場面は少ない。一方、意識しなければならない場面での取り扱いに問題が発生することが多い。
これまで見てきた例を挙げてみる。例外発生時に何よりも知りたいのは例外のスタックトレースである。その上で、各パターンについて考える。
パターン1では、スタックトレースが取得できないので、論外。例外キャッチをして何もしないのであれば、キャッチするべきではない。
パターン2の場合、スタックトレースが取得できないだけでなく、戻り値がnullの場合はフォーマットエラーであるという暗黙の了解が発生する。その上、本当にフォーマットエラーかは不明である。フォーマットエラーが想定できるのであれば、フォーマットチェック処理を作成するべきである。
パターン３はキャッチすることの是非はともかく、スタックトレースの情報が書き換わってしまうのが問題である。throw;とすれば元の情報をそのままスロー可能。例外を握りつぶしてはいけないし、手を抜くための手段にしてもいけない。あえてキャッチする場合、再スローの方法はよく考えること。
尚、例外キャッチは、パフォーマンス低下につながることも心にとどめておきたい。
参考前の記事(画面の表示値を利用することの問題点)次の記事(条件分岐は早期リターンを使用するか、無難に条件網羅で書くか)目次


