
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;

public class RandCircle : MonoBehaviour
{
    [SerializeField]
    double baseX = 20.0;
    [SerializeField]
    double baseY = 20.0;
    [SerializeField]
    double renderArea = 50;
    TerrainData terrainData;
    float t = 0;

    // Use this for initialization
    void Start()
    {
        terrainData = GetComponent&lt;Terrain&gt;().terrainData;
        StartCoroutine(UpdateTerrainCoroutine());
    }
    // Update is called once per frame
    void Update()
    {
        terrainData = GetComponent&lt;Terrain&gt;().terrainData;
        StartCoroutine(UpdateTerrainCoroutine());
        //Debug.Log(terrainData.heightmapHeight);
        renderArea = 50;
        t += 1;
    }
    float Calculate(double X, double Y)
    {
        float s= (float)Math.Sin((X+Y-0.1*t)*0.8);
        float s1 = 1 + (float)0.05 *UnityEngine.Random.value + (float)0.1 *(float)s;
        //float s1 = UnityEngine.Random.value;
        return s1;
    }
    IEnumerator UpdateTerrainCoroutine()
    {
        var heights = new float[terrainData.heightmapWidth, terrainData.heightmapHeight];
        //renderArea *= 0.98;
        var startX = baseX - renderArea / 2.0;
        var startY = baseY - renderArea / 2.0;
        var renderAreaPerWidth = renderArea / terrainData.heightmapWidth;
        var renderAreaPerHeight = renderArea / terrainData.heightmapHeight;
        for (int x = 0; x &lt; terrainData.heightmapWidth; x++)
        {
            for (int y = 0; y &lt; terrainData.heightmapHeight; y++)
            {
                heights[x, y] = Calculate(
                    startX + x * renderAreaPerWidth,
                    startY + y * renderAreaPerHeight);
                heights[x, y] = heights[x, y]/ 2;
            }
        }
        terrainData.SetHeights(0, 0, heights);
        yield return null;
    }
}

