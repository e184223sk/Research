More than 3 years have passed since last update.デスクトップアプリの機能をコマンドとして利用したい時に、そのアプリがコマンド用の起動引数を提供しているのならいいのですが、そんなものは無いって時に苦肉の策として2gis/Winium.Cruciatusを使ってコマンドとして利用出来るようにしてみます。今回はWindowsの標準アクセサリである「電卓」を、コマンドとして利用してみます。作成物はこちら(GitHub)コマンドの実行Pythonからコマンドとして実行.Netに付属しているGUIコンポーネントを操作できるUI Automationライブラリのラッパーライブラリになっています。
UI AutomationはGUIをブログラムから利用する支援の他に、GUIの自動テストに利用される事を目指しており、Winium.Cruciatusを使うとコードの記述量を減らす事が出来ます。C#で作成しています。
ソースコードは短いので全文載せておきます。起動引数から与えられた計算式に対応したボタンを押して、最後に結果を標準出力へと表示しています。各ボタンコンポーネントのAutomation IdはInspectを使って調査しています。
開発中はInspectでアプリのコンポーネント情報とのにらみ合いがメインです、普段の開発とは勝手が違ってきます。2gis/Winium.Cruciatusは、初期設定ではコンポーネント操作ログを標準出力へ表示します、このままだとコマンド化しても利用に困るので、操作時の異常系ログのみを標準エラー出力へ表示するように変更しています。
その処理はinitializeLoggingRule関数で行っています。また、電卓を多重起動していると、ボタンの操作がおかしくなったため、既に起動済みの時に実行出来ないようにしています。Microsoft純正です、しかしまだBeta版なので動作が不安定でした、僕の環境でもコンポーネントの値が取得出来なかったり(バグ？)したので見送り。同じ開発元です、Selenium WebDriverで動作するSelenium派生になっています。
こちらでも問題なかったのですが1、Winium.Desktop.Driverを別途起動しておく必要があったため、ちょっと面倒かな、って事で保留。コマンド化したら便利ではあるんですが、あくまでもGUI上の操作結果を取得しているに過ぎないため、GUIアプリケーション側がバージョンアップした際にコマンドが上手く動かない場合があります。
また、キーボードやマウス操作をコマンド実行に使用するため、コマンド実行中は何もしないようにしましょう、結果がバグります。
あとは動作が遅いです、これはCruciatusが内部で250msのSleep処理を入れているのも一因なんですが、それを改善したとしても遅いと思います。なので、コマンド版や、コマンド用の起動引数がある場合はそちらを利用しましょう、今回のような方法はあくまでも苦肉の策です。むしろ対応プラットフォームが充実 ↩


