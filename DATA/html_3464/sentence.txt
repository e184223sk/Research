2019/5/9 改訂：クラス名をGradationXXXからGradientXXXに変更しました。前回の記事にて、Xamarin.Formsでスマホアプリを開発するための初期設定を行いました。
本記事では、Xamarin標準のコントロールでは実現できない「グラデーションの描画」について、SkiaSharpを用いたコントロールの作成方法を紹介します。SkiaSharp は Skia Graphics Library という Google のオープンソースのグラフィックエンジンを利用した2D グラフィックスシステムです。Microsoftの公式サイトで紹介しているライブラリです。基本的に、共通プロジェクトでコードを記載することで、Android、iOS、UWPのすべてで同じ描画ができます。
背景色をグラデーションで描画する方法は他にもありますが、SkiaSharpは描画全般に対応しており、画像変換やパス(曲線や多角形など)の描画にも利用できて活用範囲が広いため、SkiaSharpの利用をお勧めします(厳密には、今回紹介するのはSkiaSharp.Formsですが)。
SkiaSharpの詳細は以下を参照ください。
Xamarin.Forms での SkiaSharp グラフィックスSkiaSharp.Views.Forms を nuget からインストールしてください。
(本記事執筆時点でのバージョンは1.68.0)チュートリアルとして、基本的な使い方は下記の記事を参照ください。
SkiaSharp の単純な円を描画以下にポイントなるソースコードにコメントを付けて解説します。上記は以下のような円を描画します。
グラデーションを描画する方法の詳細は以下を参照ください。
SkiaSharp の線形グラデーション
ポイントは、以下のように、SKPaintのShaderプロパティに、グラデーションの始点、終点、色を設定することです。それ以外は、チュートリアルとだいたい同じです。では、グラデーション表示できるコントロールを作成していきます。
私の経験として、アプリで利用するグラデーションは、あらかじめ定義しておいた数十パターンから選択して使うことが多いと思います。そのため、今回作成するコントロールは、グラデーションのenum値(GradientColor)をプロパティに持ち、そのenum値で定義されたグラデーションを表示する構成とします。
また、今回はシンプルに線形グラデーションのみを紹介します(放射状グラデーションは次回)。まずは、そのenum値(GradientColor)と、グラデーションの設定(GradientModel)と、それを作成するクラス(GradientModelFactory)を以下のように作成します。上記のGradientModelを用いて背景を描画するコントロール GradientRect クラスを作成します。xamal部分は以下です。GradientRect クラスのコードビハインドは以下です。上記のコントロールは、利用時にBackGradientColorを設定すれば、定義したグラデーションの矩形を描画します。使い方は以下のような感じになります。上記を実行すると、以下のようになります(画像はAndroidで実行した場合)。
上記のGradientRectコントロールは、あるオブジェクトをステータスごとに異なる背景色にしたい場合などに活用できます。BackGradientColorプロパティをバインドすれば、バインド先の値に合わせて背景色を変更できます。それができるように、BackGradientColorは依存関係プロパティとして定義した上で、値が変わった時のハンドラ(BackGradientColorPropertyChangedメソッド)で再描画を実行しています。
実際に、ItemクラスのStatusとバインドさせる例を以下に挙げます。上記でバインドさせる準備は完了です。あとは、ItemクラスをGradientRectのBindingContextプロパティに設定して、BackGradientColorに Statusプロパティをバインドさせれば、ItemクラスのStatusに合わせて背景色をを変更させることができます。バインドの書き方の例は以下です。 本記事で紹介したコードを用いて、実際にItemクラスのStatusプロパティを変更させてグラデーションを切り替えるソースコード一式をGitHubにアップしています(まとめ参照)。ステータスとバインドさせて背景色を変更させられるグラデーションコントロールを作成しました。
本記事で紹介したコードはGitHubの以下にアップしています。よろしければ自由に改変してご利用ください。
使う場合は、GradientColorとGradientFactoryにグラデーションの定義を自由に追加してもらうことを想定しています。
GitHubのソースコードはこちら次回は、線形グラデーションと放射状グラデーションを使い分けて、矩形と円を描画するコントロールを紹介します。
次回の記事はこちら


