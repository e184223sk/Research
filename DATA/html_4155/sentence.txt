More than 1 year has passed since last update.Open Location Codeというジオコーディングの仕組みをご存知でしょうか。
ジオコーディングとは地名や住所に地理座標を与えることであり、典型的には経緯度がそれにあたります。
様々な地理サービスやGPSで位置情報を示す値として使われています。この経緯度とは別のジオコーディングの仕組みがOpen Location Code（OLC）です。
これは以下のような表記によって地球上の位置を表すことができます。このコードは以下のようにそれぞれの桁に意味があり、地球上を格子状に段階的に分割していき、それぞれの格子にコードを割り当てることで任意の地点を一意のコードで表現するようになっています。
詳しくはこちら。
これによるとコードの各桁は以下のような意味を持ちます。8Q : 2200Km四方の範囲指定
9W : 110Km四方の範囲指定
CV : 5.5Km四方の範囲指定
W2 : 275m四方の範囲指定
JF : 14m四方の範囲指定
J  : 3.5m四方の範囲指定これはGoogleが作った仕組みで、このコードをGoogleで検索すればその位置が表示されます。
前述のコードは長岡市役所の位置でした。
3.5mってかなりピンポイントに指定できますね。また、このOpen Location Codeを使ったジオコーディングのWebサービスが「plus+codes」です。Googleが作ったサービスです。
このサイトではOpen Location Codeに関する情報と、コードや地名から地理的な位置を検索し、指定された範囲を示してくれたりします。
例えば、plus+codesのページに移動して、下のほうにある検索ボックスに「Niigata,Nagaoka」（日本語も可）と入力してボタンを押すと、以下のように表示されます。これからの説明において、いくつかOpen Location Codeの記述例が出てきますが、plus+codesで試したりするとわかりやすいかなと思います。位置を指す方法として経緯度や住所があるわけですが、それらと比べて何が便利なのか、というと以下の点が挙げられます。3つ目と4つ目が非常に大事です。
例えば、住所や地名、店名から経緯度を求める場合はGoogle Geocoding APIなどを使う必要があります。
ある程度は無料ですが、それを超えると従量課金になると思います。
そういったサービスを介することなく、コードがわかれば経緯度を求めることができます。
個人にとって無料は正義です。
そしてもう一つ、モバイルGoogleマップアプリでは位置情報がコードとして表示されるので、Googleマップで検索して、その検索結果を自作のアプリケーションで利用する、ということがやりやすくなっています。
ということで今回は、ゆくゆくはモバイルアプリケーションで使うことを目標にして、まずはC#でこのOpen Location Code（OLC）を使う方法について説明したいと思います。今回はシンプルにVisual Studioでコンソールアプリの作って、試してみましょう。OLCを扱う実装は多くの言語で用意されていて、このGitHubリポジトリから取得できます。
CからJavaScript、Go、Ruby、Pythonなどなど、大体の言語で使えるようになっています。すごいですね。そしてみんな大好きC#の実装もありますので、リンクをたどっていくとこちらのリポジトリにたどり着きますので、感謝しつつ自分のPCにダウンロードします。ダウンロード（またはgit clone）したら、それを下の画像のようにフォルダをたどっていくと、OpenLocationCode.dllというファイルがあるので、これを自分のプロジェクトに「参照の追加」をします。
参照の追加は以下のようにします。
毎度おなじみ、ソリューションエクスプローラー上で依存関係を右クリックして参照の追加をクリックして、ダイアログが開いたら「参照」ボタンを押してOpenLocationCode.dllを指定すればOKです。
コードから経緯度を求めるには、以下のようにします。グローバルコードという言葉がでてきますが、とりあえずそれはスルーしてください。
1行目でGoogle.OpenLocationCodeという名前空間をusingで追加しています。
使い方は簡単で、これだけです。
ブレークポイントを張ってDecodeメソッドの返り値の中身をみてみます。
これが指定したコードが表す格子の経緯度情報です。その格子の北端、南端の緯度と、西端、東端の経度、そして格子の中心の経緯度、格子の幅、高さをプロパティに持つシンプルなオブジェクトです。今回は格子の中心の経緯度を表示しています。OLCの書き方にはいくつかのバリエーションがあります。
大きく分けてグローバルコードとローカルコードです。今回の例では一番詳細なコードの書き方（8Q9WCVW2+JFJ）を使いました。
これはグローバルコードといいます。
グローバルコードは後で説明するローカルコードとは異なり、単独で位置を示すことができます。もっとざっくりした範囲を指定したいのであれば、下の桁から削っていくことで格子の大きさを変えることができます。
例えば、大体14m四方ぐらいの精度でいいや、ということであれば、8Q9WCVW2+JFのように下1桁を消します。
さらには、大体275m四方ぐらいの精度でいいや、ということであれば、8Q9WCVW2+のように下3桁を消します。
それではさらに削れるかというと、今度は削るのではなく、「0」で埋めていきます。
例えば、以下のようにすると、大体110km四方の範囲を指定することになります。ローカルコードはグローバルコード比べて桁数が少なくなります。グローバルコードの先頭4桁がなくなり、「4桁+2桁」の形になります。
しかし、ローカルコードは単独では位置を示すことはできません。
ローカルコードは基準となる地名とセットで使うことで位置を示すことができます。これはつまり、消えた4桁の代わりになる程度の情報を地名で補うことができなければならないということでしょう。
ですので、この「基準となる地名」は指定したい地域の近くである必要があります。遠すぎてはいけません。
ちなみに、以下のように「Niigata」ではなく「Tokyo」と指定すると、アクアライン近くの海の上を指すことになります。これもグローバルコードと同じく、「+」記号以下のコードを削ることで格子の広さを変えることができます。グローバルコードについては上で書きました。
ではローカルコードはどうやってプログラムで使うのでしょうか。まずはグローバルコードと同じようにやってみると、ローカルコードは地名から得られる位置情報と組み合わせて、特定の位置を指すことができるものなので、地名から位置情報を求める必要がありますが、それにはGoogle Geocoding APIなどのサービスを使わなければなりません。ローカルコードをC#で使う場合は、地名ではなく経緯度を使うことになります。ですので、Google Geocoding APIなどを使って基準となる地名の経緯度を取得して、それを使うか、端末のGPS情報から経緯度を取得することになります。どちらの手段をとるかは置いておいて、まずはローカルコードと基準となる経緯度を使う方法を説明します。OpenLocationCodeのインスタンス化のときにローカルコードをコンストラクタに渡します。
次にRecoverメソッドで基準となる経緯度を使用してグローバルコードを計算します。
Recoverメソッドの返り値として得られるOpenLocationCodeオブジェクトのDecodeメソッドを使えば、めでたく目的の経緯度を得ることができます。位置情報を使ったアプリケーションであれば、基準となる経緯度として端末のGPS情報を使えば、外部のWebAPIを使わずにすみます。Open Location Code、便利ですね。
しかもローカルだけで扱うこともできるというのは「オンラインであること」という制限を受けずにすむのが良いです。さて、冒頭でも紹介しましたが、モバイルのGoogleマップアプリは、お店やピンを立てた位置の詳細情報の中にOpen Location Codeが記載されています。
しかし、残念ながらグローバルコードではなくてローカルコードで記述されています。
そのため、Google MapのAPIを使うか、端末のGPS情報を基準にしてRecoverメソッドを使って目的地の位置情報を求める必要があります。APIを使わない場合は端末のGPS情報を使うことになりますが、もちろんAPIを使えるのであればより正確に便利に位置情報を扱うことができるのは言うまでもありません。その場合はplus+codesが提供しているWebAPIを使うことができるので、HttpClientクラスを使ってリクエスト（JSON）を送ってレスポンス（JSON）を得たりしてください。詳しくは公式の説明を読んでください。
もしかしたら、記事人書くかもしれませんが。


