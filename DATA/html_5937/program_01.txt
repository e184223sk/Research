
    public static class Reflection
    {
        /// &lt;summary&gt;
        /// (type).GetProperty().GetValue の式木版
        /// &lt;/summary&gt;
        /// &lt;typeparam name="T"&gt;対象の型&lt;/typeparam&gt;
        /// &lt;typeparam name="T1"&gt;返す型&lt;/typeparam&gt;
        /// &lt;param name="property_name"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static Func&lt;T, T1&gt; GetValueFunc&lt;T, T1&gt;(string property_name)
        {
            var p = Expression.Parameter(typeof(T));
            var lambda = Expression.Lambda(Expression.Property(p, property_name), p);
            return (Func&lt;T, T1&gt;)lambda.Compile();
        }
    }

