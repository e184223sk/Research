More than 1 year has passed since last update.構造体は違う型のデータをひとまとめにして扱うことができるようにしたものです．構造体の話に入る前にまずは次の問題を解いてみてください．問題上の表は英語のテストを受けた5人の得点です．この5人の名前を点数が昇順(低い順)になるように画面に出力してください．とりあえず点数を入れるint型の配列を用意して，ソートはこんな感じの関数を作って配列を入れればあっという間に...はい！違いますね！
名前を出さないといけないので，点数だけ並べ替えても意味がありません．名前と点数をまとめて扱って一緒に並べ替える必要がありそうです．そこで構造体を使います．こういう形式で書くことで，型として使える構造体を定義できます．ちなみに，構造体の中に定義された変数(static修飾子が付いたものを除く)をメンバ変数やフィールドと呼びます．変数にpublic修飾子が付いたものは構造体の外部からアクセスできます．nameやscoreという変数がScoreDataの中に元々あるわけではなく，andoのように実際の変数(インスタンスという)を作ると，その変数の中にname，scoreが入っている状態になります．
とりあえずScoreData型の変数andoに名前と得点のデータを持たせることができました．これをScoreData型の配列に入れて，配列をソートする関数を作って渡してやればよさそうです．面倒ですね．後で配列に入れてしまってインデックスで管理するのにわざわざ変数を作ってそれぞれメンバ変数に代入するのがちょっと手間に感じてしまいます．もっと簡潔に書けるようにしましょう．追加した関数のようなものはコンストラクタと呼ばれ，new ScoreData()されたときに一度だけ実行されるものです．コンストラクタは戻り値を持たず，引数はnewしたときに渡すことができます．コンストラクタに引数を渡してメンバ変数を初期化してみましょう．これで値を初期化できることはわかりました．言ってみればnew ScoreData("安藤", 83)はScoreData型のリテラルのようなものなので，変数に代入せずに配列に入れることができます．ではソート関数を作って点数が昇順になるように並べ替えましょう．できました．構造体は違う型のデータを複数扱うことができるので使えるようになるととても便利です．自分で作って使うことができるようにしておきましょう．以前にも紹介したLINQを使って解く場合を載せておきます．詳しい説明はしないので興味のある人は調べてみてください．コレクション.OrderBy()で昇順ソートしています．e =&gt; e.scoreはラムダ式という関数のようなものです．
次回はオブジェクト指向について説明します．上の表は英語と数学のテストを受けた5人の得点です．この5人の中で，英語の点数，数学の点数，合計の点数が最も高い人をそれぞれ画面に出力してください．解答例

コレクション.OrderByDescending()で降順ソートしてます．


StructureSample.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace StructureSample
{
    struct ScoreData
    {
        public string name;
        public int englishScore;
        public int mathScore;

        public ScoreData(string name, int englishScore, int mathScore)
        {
            this.name = name;
            this.englishScore = englishScore;
            this.mathScore = mathScore;
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            ScoreData[] scoreDatas = new ScoreData[5]
            {
                new ScoreData("安藤", 83, 75),
                new ScoreData("小林", 59, 90),
                new ScoreData("戸田", 72, 79),
                new ScoreData("中野", 96, 61),
                new ScoreData("渡辺", 81, 86)
            };

            Console.WriteLine("英語 : " + scoreDatas.OrderByDescending(e=&gt;e.englishScore).ToArray()[0].name);
            Console.WriteLine("数学 : " + scoreDatas.OrderByDescending(e =&gt; e.mathScore).ToArray()[0].name);
            Console.WriteLine("合計 : " + scoreDatas.OrderByDescending(e =&gt; e.englishScore + e.mathScore).ToArray()[0].name);
        }
    }
}






