Unityでのゲーム開発では、多くのGameObjectやPrefabそしてAssetが必要で、それらは他のGameObjectやAssetへの参照を持っています。その参照関係を正しく管理・運用するのは大規模なゲーム・長期間のプロジェクトではとても難しいです。「間違って使っているAssetを削除してしまい、それを参照している部分が原因で不具合が発生した」という経験はありませんか。このような不具合を、どうやったら防げるでしょうか？自分のおすすめは、Odin Validatorを用いたプロジェクト全体の自動検証です。Odi Validatorを用いれば「ここは必ず何かしらのAssetを参照しないといけないと設定する。もし参照していない場合は、エラーを表示する」という設定が実現できます。「間違って使っているAssetを削除してしまい、それを参照している部分が原因で不具合が発生した」という不具合を検知し、事前に防ぐことができます。この投稿では、Odin Validatorを用いた、プロジェクトの自動検証を紹介します。Unityでのゲーム開発では、多くのGameObjectやPrefabそしてAssetが必要で、それらは他のGameObjectやAssetへの参照を持っています。その参照関係を正しく管理・運用するのはとても難しいです。特に、大規模なゲームで長期間のプロジェクトとなれば、なおさらでしょう。たとえば、次のようなScriptableObjectのクラスがあるとします。次のようにEnemy000というScriptableObjectを作成し、Inspectorから参照を設定したとしましょう。さて、プロジェクトがすすみ、Assetも多くなってきて管理が難しくなってきたとします。本当は必要だったAsset（EnemySprite0）を誰かがうっかりプロジェクトから消してしまいました。その場合、次のようにSpriteの参照が「None」という状態になってしまいます。もしこの状態で、ビルド・実行したらおそらく表示すべきSpriteが表示されない不具合が発生してしまいます。このような「間違って使っているAssetを削除してしまい、それを参照している部分が原因で不具合が発生した」という不具合を経験した方も多いのではないでしょうか？ここで紹介した例は「Spriteが表示されない」でしたが、ゲームが進行不可能になったり、課金関連の不具合が発生したりと、もっと大きは不具合が発生してしまうことも考えられます。このような不具合に、対応するために自分は、Odin Validatorを用いたプロジェクト全体の自動検証を導入することをおすすめします。Odin Validatorの前に、まずOdinを紹介します。Odin（Odin - Inspector and Serializer）はUnity向けのツール・ユーティリティカテゴリのライブラリです。非常に強力で豊富な機能を持っている人気のライブラリです。主な機能は次のとおりです。Inspectorの強化をはじめ、エディター拡張のユーティリティの提供します。Odin - Inspector and Serializerは、Asset Store・もしくはOdinの公式ページから購入が可能です。自分の、Odinのおすすめ機能は「Required属性」です。Required属性がついたSerialize対象のフィールドは、「必ず参照や値を設定する必要がある」という条件が追加されます。もし参照や値を設定していない場合、次のようにInspectorに設定されていないことをわかりやすく表示してくれます。Odin - Inspector and Serializerでは、多くの属性とそれに対応するValidatorを提供しています。これらの属性が付与されたフィールドは、ValidatorによりInspectorからの入力に条件や制約を加えることができます。Odin Project Validatorでは、これらの属性を用いて付与された条件や制約を検証できます。この節では、Odin - Inspector and Serializerで提供されている属性とValidatorの使い方の一部を紹介します。Required属性をつけることで、参照の設定・値の入力を必須にできます。次のようなScriptableObjectのクラスがあります。このScriptableObjectのInspectorは次のようになります。stringValue、gameObjectReference、transformReferenceの上部に「stringValue is Required」などのエラーメッセージが表示されていることに注目してください。Required属性を付与することで、そのフィールドの参照・値を設定していない箇所をエラー表示できます。stringValueなどに参照・値を設定すると次のようにエラー表示が解消されます。intやdoubleなどのフィールドには、Requiredをつけてもエラーメッセージが表示されないことに注意してください。ValidateInput属性をつけることで、指定したstaticメソッドを用いて検証できます。たとえば、次のコードは「ListなtargetAssetsが要素を1つ以上持っているか」を検証します。このScriptableObjectのInspectorは次のようになります。targetAssetsは要素を1つも持っていないので、上部に「List is empty.」というエラーメッセージが表示されています。targetAssetsが要素を1つ以上もつようになると、エラーメッセージが消えます。このようにValidateInputを使うと、自分で指定したstaticメソッドにより、独自の検証を行うことができます。AssetsOnly、SceneObjectsOnly、ChildGameObjectsOnly属性をつけることで、参照の設定を次のように条件づけできます。AssetsOnlyを指定しているフィールドに、シーン上のGameObjectやComponentは参照設定できません。SceneObjectsOnlyを指定しているフィールドに、プロジェクト上のAssetは参照設定できません。ChildGameObjectsOnlyはIncludeSelfという引数があり、自身も許可するかどうかを指定できます。次のコードのtargetは、プロジェクト中のPrefabもシーン上のGameObjectも、どちらも参照設定できてしまいます。本来はどちらかしか設定できるべきではありません。プロジェクト中のAsset（Prefab）を指定すべき場合はAssetsOnlyを、シーン上のGameObjectを指定すべき場合はSceneObjectsOnlyをつけることをおすすめします。RequiredやValidateInput、AssetsOnlyなどOdin - Inspector and Serializerの属性を使うことで、入力に条件や制約を加えそれを満たさなかった場合、Inspectorにエラー表示できます。しかしそのエラー表示に気がつかなかったとしたら、結局不具合が発生してしまいます。しかし、せっかくのわかりやすいエラー表示も、みのがしてしまったら意味がありませんね。そこでOdin Validatorの出番です。Odin Validatorは、Odin - Inspector and SerializerのAddonです。Odin Validatorを用いると、Required属性などの条件を満たしていないAsestやPrefab、GameObjectが存在しないか検証し、その結果を次のようにわかりやすく確認できます。Odin Validatorは、公式サイトから購入することができます。検証する範囲も、「今開いてるシーン」や「プロジェクト全体」など指定できます。また、その検証のタイミングをゲームプレイ実行時、ビルド実行時など指定できます。Odin Validatorを用いることで、「間違って使っているAssetを削除してしまい、それを参照している部分がきっかけでシーンが壊れてしまった」という不具合を回避できます。Odin ValidatorはOdin公式ページから購入が可能です。この投稿の執筆時点では、2019年5月28日より前にOdinを購入したユーザーはOdi Validatorを無料でダウンロードできるようです。価格・購入については、最新の公式情報を参照してください。変更を加えるたびに、いちいちプロジェクトにあるSceneやPrefab、ScriptableObjectすべてにエラー表示がないかを確認することは、現実的ではありません。Requiredなどを使っていたとしても、「使っていないと思ったAssetを削除したら、最近まったく更新していないシーンで使っていて、それが原因で不具合が発生してしまった」ということは起きてしまいます。先に説明した通り、このような不具合は、Odin Validator使うことで回避できます。
@{Odin Project Validator}を使えば、RequiredやValidateInput、AssetsOnlyなどの属性がついている部分を自動で検証し、満たしていない箇所をわかりやすく表示してくれます。
いちいちプロジェクト全体を目視で確認する必要はありません。OdinとOdin Validatorをプロジェクトに導入し、メニューの「Tools &gt; Odin Project Validator」を選択すると次のようなウィンドウが開きます。一番上の「Scan Entire Project」を押すと次のような状態に遷移します。このウィンドウの右上にある「Run Scan Entire Project」というボタンを押下します。もしプロジェクトにRequiredやValidateInput、AssetsOnlyを満たさないものがあった場合、次のようにそれを一覧表示できます。検証した内容を一覧できます。また、条件を満たしていなかったAssetやGameObjectをこのウィンドウから直接編集できます。もしプロジェクトにRequiredやValidateInput、AssetsOnlyを満たさないものがなければ、次のようになります。「Scan Entire Project」はプロジェクト全体を検証します。Odin Project Validatorでは、これ以外にも次のような設定も提供しています。自分で設定を作ることも、既存の設定を変更することもできます。必要に応じて自分のプロジェクト運用にあった設定を試してみてください。Odin Validatorでプロジェクトの検証を行えば、参照や値の設定の間違いに気が付くことができます。しかし、ビルドする前にOdin Validatorでの検証を忘れてしまったら、結局不具合が発生してしまう可能性があります。Odin Validatorによる検証を忘れないために、Automate Validationを設定することをお勧めします。メニューの「Tools &gt; Odin Project Validator」からウィンドウを開き、右上部にある「Automate Validator」ボタンを押すと次のようなAutomate Validationウィンドウが開きます。ウィンドウ内のチェックボックスにチェックをつけて、Automate Validationを有効にするとそれぞれのタイミングで、指定した検証を実行できます。また、ビルド実行時に検証を行うように設定し、もし設定した条件を満たさない箇所をみつけたら、ビルドを失敗させる、ということも可能です。こうすることで、ゲーム出荷・リリースする前に必ず条件を満たすことを保証することができます。この章では、Odin Validatorを紹介しました。間違って使っているAssetを削除してしまい、それを参照している部分が原因で不具合が発生した」という不具合の経験がある人は多いのではないでしょうか。
こういう不具合を防ぐために、ぜひOdin Validatorを導入してみてください！各種バージョン


