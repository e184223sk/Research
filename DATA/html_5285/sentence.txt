More than 3 years have passed since last update.簡単にいうと引数に型を指定できるクラス(メソッド)。よく使うListやDictionaryもジェネリッククラスです。ここではジェネリッククラスについて説明します。メソッドも似たような感じです。例えばこんなクラス(プッシュだけできる整数のスタック)があったとする。こんな感じで実行する。「このクラス(IntPushStack)をdoubleもstringも使えるようにしたい」としたときに、
似たようにDoublePushStackやStringPushStackをコピペするのは冗長で無駄だ。そんなときにジェネリッククラスを使う。
こんな感じ(&lt;T&gt;)で書くと、型を引数にし、クラスの記述内で型として使える。こんな感じで実行する。便利便利。ただし、型が不定なので、どのようなメソッドを使えるかかわからない。
そんな時につけるのが型パラメータの制約。詳しくは型パラメーターの制約 (C# プログラミング ガイド) | Microsoft DocsLINQ(読み方は「リンク」)は、foreachのすごい版みたいな解釈でいいらしいです。
はじめての LINQ - Qiitaがとても良記事なので参照ください。
LINQの実行タイミングとかを把握してると、後で痛い目見なくて済むと思います。(小学生並の感想)百聞は一見に如かずということで、実例です。
ラムダ式はインラインコードを簡潔に書くためのものらしい。
まだよく理解していないので、参考にしたページを載せておきます。「?」とか「??」とか出てきたら、だいたいこいつです。
値がNullとかになるときにif文とか型検査とかいちいちやらなくても簡潔に書けるようになります。以下のサイトがわかりやすいです。
【ワテのC#講座】 int?はNull許容型、ナンチャラ?はNull条件演算子、??はNull合体演算子【ヌル三兄弟】随時、追加予定


