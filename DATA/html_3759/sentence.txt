More than 1 year has passed since last update.単体テストと副作用 - 第1話 はじまり
単体テストと副作用 - 第2話 オブジェクト指向
単体テストと副作用 - 第3話 DIとモック
単体テストと副作用 - 第4話 副作用の回避
単体テストと副作用 - 第5話 オブジェクト指向への反乱テストフレームワークについては、前回も使ったお(・ω・)
C#においては、私は「xUnit.net」が好き。
基本的な使い方に関しては、以下の記事を参照されたし。xUnit.net でユニットテストを始める私がいつも便利に使っているのは、前回も紹介した MemberData 属性だお。
前回のテストコードを再掲する。この属性に指定するメソッドが返す値は、対象のテストメソッドへ引数として順次渡される。
上記の例では、2つの引数でできた object 配列を9個渡すことにより、テストが9回走ることになる。『…xUnit.netには他にも便利な特徴がありますが…まあいいでしょう…。これを駆使してテストコードを書くのです…』テストダブルは、テスト対象以外のオブジェクトを代替し、単体テストを可能にするもの。
テストダブルには、色々な種類があるみたい。これらは独立していない場合もある（テストスタブ機能を持ったモックオブジェクトなど）。実際にテストを書いてゆくとどれも使うことになるようだけど、特にモックオブジェクトは恩恵が大きい。
でも、自分で実装するのは面倒だね…。
他の言語ではテストフレームワークに組み込まれていたりするけど、C#の場合、「Moq」というライブラリを導入すれば、便利なモックオブジェクトが使えるようになる。
使い方については、この記事で大体把握できる。Moq : Mocking Framework for .NET使用例を示すお。「Moq」が提供するスタブとモックの機能により、テストで使用される代替オブジェクトを簡単に作成できるね(・ω・)『…スタブとモックによって…オブジェクトを切り離すことが可能になります…。そのことが…副作用の回避に直接関係してきます…』依存性の注入（DI : Dependency Injection）とは、あるオブジェクトが依存しているオブジェクトを、クラス内で生成するのではなく、クラス外から注入することにより、型に関する依存性を消し去る手法だお。
注入の方法にはいくつかある。ライブラリ無しでも簡単にできるけど、ライブラリを使うと色々便利みたい。
以下は、「Unity」というDIライブラリを使用した例。
「Unity」というとゲームエンジンが思い起こされるが、全くの別物だ(´・ω・｀)Dependency 属性のついたプロパティに、あらかじめ設定したクラスのインスタンスが自動的に渡される。
Fuga クラスを見ると、Hoge クラスに全く依存していないことが分かる。
IHoge インターフェイスに外部から注入されるからだね。『…Fuga クラスは Hoge クラスに全く依存していないので…Fuga クラスをテストする際…Hoge クラスをテストダブルで置き換えることが可能になります…』『…これらが"3種の神器"です…。ポイントは…DIコンテナを使用して…テスト時にモックオブジェクトを注入することができるという点です…』そうか(・ω・)！
副作用を隔離し、インターフェイスの裏に隠してしまえば、DIによってモックオブジェクトにすり替えることが可能だお！
テスト時にはモックを、本番時には本物のコードを注入することで、テストの時だけ副作用を回避できる。『…そうです…。あとはそれを形にするだけです…。論よりコード…。手を動かすのです…』～ 次回へ続く ～単体テストと副作用 - 第1話 はじまり
単体テストと副作用 - 第2話 オブジェクト指向
単体テストと副作用 - 第3話 DIとモック
単体テストと副作用 - 第4話 副作用の回避
単体テストと副作用 - 第5話 オブジェクト指向への反乱


