
using System;
using System.Linq;
using System.Reflection;


public static class GenericSpecializationBenchmarkCore
{
    public const int Iteration = 10000;


    static GenericSpecializationBenchmarkCore()
    {
        var results = typeof(GenericSpecializationBenchmarkCore)
            .GetMethods(BindingFlags.Public | BindingFlags.Static)
            .Select(mi =&gt; (double)mi.Invoke(null, null))
            .ToList();
        foreach(var res in results)
            if(results[0] != res)
                throw new Exception("Invalid add method impl");
    }


    public static double AddByStaticStrategy_Primitive()
    {
        var result = 0.0;
        {
            var x = new Container&lt;int&gt;(1);
            var y = new Container&lt;int&gt;(1);
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container&lt;int&gt;.AddByStaticStrategy(x, y);
            result += x.Value;
        }
        {
            var x = new Container&lt;double&gt;(1);
            var y = new Container&lt;double&gt;(1);
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container&lt;double&gt;.AddByStaticStrategy(x, y);
            result += x.Value;
        }
        return result;
    }


    public static double AddByContainerTypeSwitch_Primitive()
    {
        var result = 0.0;
        {
            var x = new Container&lt;int&gt;(1);
            var y = new Container&lt;int&gt;(1);
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container&lt;int&gt;.AddByContainerTypeSwitch(x, y);
            result += x.Value;
        }
        {
            var x = new Container&lt;double&gt;(1);
            var y = new Container&lt;double&gt;(1);
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container&lt;double&gt;.AddByContainerTypeSwitch(x, y);
            result += x.Value;
        }
        return result;
    }


    public static double AddByValueTypeSwitch_Primitive()
    {
        var result = 0.0;
        {
            var x = new Container&lt;int&gt;(1);
            var y = new Container&lt;int&gt;(1);
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container&lt;int&gt;.AddByValueTypeSwitch(x, y);
            result += x.Value;
        }
        {
            var x = new Container&lt;double&gt;(1);
            var y = new Container&lt;double&gt;(1);
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container&lt;double&gt;.AddByValueTypeSwitch(x, y);
            result += x.Value;
        }
        return result;
    }


    public static double AddByTypeOf_Primitive()
    {
        var result = 0.0;
        {
            var x = new Container&lt;int&gt;(1);
            var y = new Container&lt;int&gt;(1);
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container&lt;int&gt;.AddByTypeOf(x, y);
            result += x.Value;
        }
        {
            var x = new Container&lt;double&gt;(1);
            var y = new Container&lt;double&gt;(1);
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container&lt;double&gt;.AddByTypeOf(x, y);
            result += x.Value;
        }
        return result;
    }


    public static double AddByLdftnAndCalli_Primitive()
    {
        var result = 0.0;
        {
            var x = new Container&lt;int&gt;(1);
            var y = new Container&lt;int&gt;(1);
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container&lt;int&gt;.AddByLdftnAndCalli(x, y);
            result += x.Value;
        }
        {
            var x = new Container&lt;double&gt;(1);
            var y = new Container&lt;double&gt;(1);
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container&lt;double&gt;.AddByLdftnAndCalli(x, y);
            result += x.Value;
        }
        return result;
    }


    public static double AddByOverload_Primitive()
    {
        var result = 0.0;
        {
            var x = new Container&lt;int&gt;(1);
            var y = new Container&lt;int&gt;(1);
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container.AddByOverload(x, y);
            result += x.Value;
        }
        {
            var x = new Container&lt;double&gt;(1);
            var y = new Container&lt;double&gt;(1);
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container.AddByOverload(x, y);
            result += x.Value;
        }
        return result;
    }


    public static double AddByStaticStrategy_Struct()
    {
        var result = 0.0;
        {
            var x = new Container&lt;IntStruct&gt;(new IntStruct(1));
            var y = new Container&lt;IntStruct&gt;(new IntStruct(1));
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container&lt;IntStruct&gt;.AddByStaticStrategy(x, y);
            result += x.Value.Value;
        }
        {
            var x = new Container&lt;DoubleStruct&gt;(new DoubleStruct(1));
            var y = new Container&lt;DoubleStruct&gt;(new DoubleStruct(1));
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container&lt;DoubleStruct&gt;.AddByStaticStrategy(x, y);
            result += x.Value.Value;
        }
        return result;
    }


    public static double AddByContainerTypeSwitch_Struct()
    {
        var result = 0.0;
        {
            var x = new Container&lt;IntStruct&gt;(new IntStruct(1));
            var y = new Container&lt;IntStruct&gt;(new IntStruct(1));
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container&lt;IntStruct&gt;.AddByContainerTypeSwitch(x, y);
            result += x.Value.Value;
        }
        {
            var x = new Container&lt;DoubleStruct&gt;(new DoubleStruct(1));
            var y = new Container&lt;DoubleStruct&gt;(new DoubleStruct(1));
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container&lt;DoubleStruct&gt;.AddByContainerTypeSwitch(x, y);
            result += x.Value.Value;
        }
        return result;
    }


    public static double AddByValueTypeSwitch_Struct()
    {
        var result = 0.0;
        {
            var x = new Container&lt;IntStruct&gt;(new IntStruct(1));
            var y = new Container&lt;IntStruct&gt;(new IntStruct(1));
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container&lt;IntStruct&gt;.AddByValueTypeSwitch(x, y);
            result += x.Value.Value;
        }
        {
            var x = new Container&lt;DoubleStruct&gt;(new DoubleStruct(1));
            var y = new Container&lt;DoubleStruct&gt;(new DoubleStruct(1));
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container&lt;DoubleStruct&gt;.AddByValueTypeSwitch(x, y);
            result += x.Value.Value;
        }
        return result;
    }


    public static double AddByTypeOf_Struct()
    {
        var result = 0.0;
        {
            var x = new Container&lt;IntStruct&gt;(new IntStruct(1));
            var y = new Container&lt;IntStruct&gt;(new IntStruct(1));
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container&lt;IntStruct&gt;.AddByTypeOf(x, y);
            result += x.Value.Value;
        }
        {
            var x = new Container&lt;DoubleStruct&gt;(new DoubleStruct(1));
            var y = new Container&lt;DoubleStruct&gt;(new DoubleStruct(1));
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container&lt;DoubleStruct&gt;.AddByTypeOf(x, y);
            result += x.Value.Value;
        }
        return result;
    }


    public static double AddByLdftnAndCalli_Struct()
    {
        var result = 0.0;
        {
            var x = new Container&lt;IntStruct&gt;(new IntStruct(1));
            var y = new Container&lt;IntStruct&gt;(new IntStruct(1));
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container&lt;IntStruct&gt;.AddByLdftnAndCalli(x, y);
            result += x.Value.Value;
        }
        {
            var x = new Container&lt;DoubleStruct&gt;(new DoubleStruct(1));
            var y = new Container&lt;DoubleStruct&gt;(new DoubleStruct(1));
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container&lt;DoubleStruct&gt;.AddByLdftnAndCalli(x, y);
            result += x.Value.Value;
        }
        return result;
    }


    public static double AddByOverload_Struct()
    {
        var result = 0.0;
        {
            var x = new Container&lt;IntStruct&gt;(new IntStruct(1));
            var y = new Container&lt;IntStruct&gt;(new IntStruct(1));
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container.AddByOverload(x, y);
            result += x.Value.Value;
        }
        {
            var x = new Container&lt;DoubleStruct&gt;(new DoubleStruct(1));
            var y = new Container&lt;DoubleStruct&gt;(new DoubleStruct(1));
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container.AddByOverload(x, y);
            result += x.Value.Value;
        }
        return result;
    }


    public static double AddByStaticStrategy_Class()
    {
        var result = 0.0;
        {
            var x = new Container&lt;IntClass&gt;(new IntClass(1)    );
            var y = new Container&lt;IntClass&gt;(new IntClass(1)    );
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container&lt;IntClass&gt;.AddByStaticStrategy(x, y);
            result += x.Value.Value;
        }
        {
            var x = new Container&lt;DoubleClass&gt;(new DoubleClass(1));
            var y = new Container&lt;DoubleClass&gt;(new DoubleClass(1));
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container&lt;DoubleClass&gt;.AddByStaticStrategy(x, y);
            result += x.Value.Value;
        }
        return result;
    }


    public static double AddByContainerTypeSwitch_Class()
    {
        var result = 0.0;
        {
            var x = new Container&lt;IntClass&gt;(new IntClass(1)    );
            var y = new Container&lt;IntClass&gt;(new IntClass(1)    );
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container&lt;IntClass&gt;.AddByContainerTypeSwitch(x, y);
            result += x.Value.Value;
        }
        {
            var x = new Container&lt;DoubleClass&gt;(new DoubleClass(1));
            var y = new Container&lt;DoubleClass&gt;(new DoubleClass(1));
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container&lt;DoubleClass&gt;.AddByContainerTypeSwitch(x, y);
            result += x.Value.Value;
        }
        return result;
    }


    public static double AddByValueTypeSwitch_Class()
    {
        var result = 0.0;
        {
            var x = new Container&lt;IntClass&gt;(new IntClass(1)    );
            var y = new Container&lt;IntClass&gt;(new IntClass(1)    );
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container&lt;IntClass&gt;.AddByValueTypeSwitch(x, y);
            result += x.Value.Value;
        }
        {
            var x = new Container&lt;DoubleClass&gt;(new DoubleClass(1));
            var y = new Container&lt;DoubleClass&gt;(new DoubleClass(1));
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container&lt;DoubleClass&gt;.AddByValueTypeSwitch(x, y);
            result += x.Value.Value;
        }
        return result;
    }


    public static double AddByTypeOf_Class()
    {
        var result = 0.0;
        {
            var x = new Container&lt;IntClass&gt;(new IntClass(1)    );
            var y = new Container&lt;IntClass&gt;(new IntClass(1)    );
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container&lt;IntClass&gt;.AddByTypeOf(x, y);
            result += x.Value.Value;
        }
        {
            var x = new Container&lt;DoubleClass&gt;(new DoubleClass(1));
            var y = new Container&lt;DoubleClass&gt;(new DoubleClass(1));
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container&lt;DoubleClass&gt;.AddByTypeOf(x, y);
            result += x.Value.Value;
        }
        return result;
    }


    public static double AddByLdftnAndCalli_Class()
    {
        var result = 0.0;
        {
            var x = new Container&lt;IntClass&gt;(new IntClass(1)    );
            var y = new Container&lt;IntClass&gt;(new IntClass(1)    );
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container&lt;IntClass&gt;.AddByLdftnAndCalli(x, y);
            result += x.Value.Value;
        }
        {
            var x = new Container&lt;DoubleClass&gt;(new DoubleClass(1));
            var y = new Container&lt;DoubleClass&gt;(new DoubleClass(1));
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container&lt;DoubleClass&gt;.AddByLdftnAndCalli(x, y);
            result += x.Value.Value;
        }
        return result;
    }


    public static double AddByOverload_Class()
    {
        var result = 0.0;
        {
            var x = new Container&lt;IntClass&gt;(new IntClass(1)    );
            var y = new Container&lt;IntClass&gt;(new IntClass(1)    );
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container.AddByOverload(x, y);
            result += x.Value.Value;
        }
        {
            var x = new Container&lt;DoubleClass&gt;(new DoubleClass(1));
            var y = new Container&lt;DoubleClass&gt;(new DoubleClass(1));
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container.AddByOverload(x, y);
            result += x.Value.Value;
        }
        return result;
    }
}


