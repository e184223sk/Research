
using System;
using System.Linq;
using System.Reflection;

public static class GenericSpecializationBenchmarkCore
{
    public const int Iteration = 10000;


    static GenericSpecializationBenchmarkCore()
    {
        var results = typeof(GenericSpecializationBenchmarkCore)
            .GetMethods(BindingFlags.Public | BindingFlags.Static)
            .Select(mi =&gt; (double)mi.Invoke(null, null))
            .ToList();
        foreach(var res in results)
            if(results[0] != res)
                throw new Exception("Invalid add method impl");
    }

    // こんな感じのメソッドをPrimitive/Struct/Class、および各特殊化手法ごとに定義していく
    public static double AddByStaticStrategy_Primitive()
    {
        var result = 0.0;
        {
            var x = new Container&lt;int&gt;(1);
            var y = new Container&lt;int&gt;(1);
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container&lt;int&gt;.AddByStaticStrategy(x, y);
            result += x.Value;
        }
        {
            var x = new Container&lt;double&gt;(1);
            var y = new Container&lt;double&gt;(1);
            for(var i = 0; i &lt; Iteration; ++i)
                x = Container&lt;double&gt;.AddByStaticStrategy(x, y);
            result += x.Value;
        }
        return result;
    }
}

