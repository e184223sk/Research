
public partial class Container&lt;T&gt;
{
    public static Container&lt;T&gt; AddByContainerTypeSwitch(Container&lt;T&gt; lhs, Container&lt;T&gt; rhs)
    {
        switch(lhs)
        {
        case Container&lt;int&gt; intL:
            {
                var r = rhs as Container&lt;int&gt;;
                return new Container&lt;int&gt;(intL.Value + r.Value) as Container&lt;T&gt;;
            }
        case Container&lt;double&gt; doubleL:
            {
                var r = rhs as Container&lt;double&gt;;
                return new Container&lt;double&gt;(doubleL.Value + r.Value) as Container&lt;T&gt;;
            }
        case Container&lt;IntStruct&gt; intStructL:
            {
                var r = rhs as Container&lt;IntStruct&gt;;
                return new Container&lt;IntStruct&gt;(intStructL.Value + r.Value) as Container&lt;T&gt;;
            }
        case Container&lt;DoubleStruct&gt; doubleStructL:
            {
                var r = rhs as Container&lt;DoubleStruct&gt;;
                return new Container&lt;DoubleStruct&gt;(doubleStructL.Value + r.Value) as Container&lt;T&gt;;
            }
        case Container&lt;IntClass&gt; intClassL:
            {
                var r = rhs as Container&lt;IntClass&gt;;
                return new Container&lt;IntClass&gt;(intClassL.Value + r.Value) as Container&lt;T&gt;;
            }
        case Container&lt;DoubleClass&gt; doubleClassL:
            {
                var r = rhs as Container&lt;DoubleClass&gt;;
                return new Container&lt;DoubleClass&gt;(doubleClassL.Value + r.Value) as Container&lt;T&gt;;
            }
        }
        throw new Exception();
    }
}

