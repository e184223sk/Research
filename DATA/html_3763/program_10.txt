
public partial class Container&lt;T&gt;
{    public static Container&lt;T&gt; AddByTypeOf(Container&lt;T&gt; lhs, Container&lt;T&gt; rhs)
    {
        if(typeof(T) == typeof(int))
        {
            var l = lhs as Container&lt;int&gt;;
            var r = rhs as Container&lt;int&gt;;
            return new Container&lt;int&gt;(l.Value + r.Value) as Container&lt;T&gt;;
        }

        if(typeof(T) == typeof(double))
        {
            var l = lhs as Container&lt;double&gt;;
            var r = rhs as Container&lt;double&gt;;
            return new Container&lt;double&gt;(l.Value + r.Value) as Container&lt;T&gt;;
        }

        if(typeof(T) == typeof(IntStruct))
        {
            var l = lhs as Container&lt;IntStruct&gt;;
            var r = rhs as Container&lt;IntStruct&gt;;
            return new Container&lt;IntStruct&gt;(l.Value + r.Value) as Container&lt;T&gt;;
        }

        if(typeof(T) == typeof(DoubleStruct))
        {
            var l = lhs as Container&lt;DoubleStruct&gt;;
            var r = rhs as Container&lt;DoubleStruct&gt;;
            return new Container&lt;DoubleStruct&gt;(l.Value + r.Value) as Container&lt;T&gt;;
        }

        if(typeof(T) == typeof(IntClass))
        {
            var l = lhs as Container&lt;IntClass&gt;;
            var r = rhs as Container&lt;IntClass&gt;;
            return new Container&lt;IntClass&gt;(l.Value + r.Value) as Container&lt;T&gt;;
        }

        if(typeof(T) == typeof(DoubleClass))
        {
            var l = lhs as Container&lt;DoubleClass&gt;;
            var r = rhs as Container&lt;DoubleClass&gt;;
            return new Container&lt;DoubleClass&gt;(l.Value + r.Value) as Container&lt;T&gt;;
        }

        throw new Exception();
    }
}

