
public partial class Container&lt;T&gt;
{    public static Container&lt;T&gt; AddByValueTypeSwitch(Container&lt;T&gt; lhs, Container&lt;T&gt; rhs)
    {
        switch(lhs.Value)
        {
        case int intL:
            {
                if(rhs.Value is int r)
                    return new Container&lt;int&gt;(intL + r) as Container&lt;T&gt;;
                break;
            }
        case double doubleL:
            {
                if(rhs.Value is double r)
                    return new Container&lt;double&gt;(doubleL + r) as Container&lt;T&gt;;
                break;
            }
        case IntStruct intStructL:
            {
                if(rhs.Value is IntStruct r)
                    return new Container&lt;IntStruct&gt;(intStructL + r) as Container&lt;T&gt;;
                break;
            }
        case DoubleStruct doubleStructL:
            {
                if(rhs.Value is DoubleStruct r)
                    return new Container&lt;DoubleStruct&gt;(doubleStructL + r) as Container&lt;T&gt;;
                break;
            }
        case IntClass intClassL:
            {
                if(rhs.Value is IntClass r)
                    return new Container&lt;IntClass&gt;(intClassL + r) as Container&lt;T&gt;;
                break;
            }
        case DoubleClass doubleClassL:
            {
                if(rhs.Value is DoubleClass r)
                    return new Container&lt;DoubleClass&gt;(doubleClassL + r) as Container&lt;T&gt;;
                break;
            }
        }
        throw new Exception();
    }
}

