
public interface  IArithmetic&lt;T&gt;
{
    T Add(T lhs, T rhs);
}

public class Arithmetic
    : IArithmetic&lt;int&gt;
    , IArithmetic&lt;double&gt;
    , IArithmetic&lt;IntStruct&gt;
    , IArithmetic&lt;DoubleStruct&gt;
    , IArithmetic&lt;IntClass&gt;
    , IArithmetic&lt;DoubleClass&gt;
{
    static Arithmetic()
    {
        var instance = new Arithmetic();
        Arithmetic&lt;int&gt;         .Default = instance;
        Arithmetic&lt;double&gt;      .Default = instance;
        Arithmetic&lt;IntStruct&gt;   .Default = instance;
        Arithmetic&lt;DoubleStruct&gt;.Default = instance;
        Arithmetic&lt;IntClass&gt;    .Default = instance;
        Arithmetic&lt;DoubleClass&gt; .Default = instance;
    }

    internal static void Initialize() {}

    public int          Add(int          lhs, int          rhs) =&gt; lhs + rhs;
    public double       Add(double       lhs, double       rhs) =&gt; lhs + rhs;
    public IntStruct    Add(IntStruct    lhs, IntStruct    rhs) =&gt; lhs + rhs;
    public DoubleStruct Add(DoubleStruct lhs, DoubleStruct rhs) =&gt; lhs + rhs;
    public IntClass     Add(IntClass     lhs, IntClass     rhs) =&gt; lhs + rhs;
    public DoubleClass  Add(DoubleClass  lhs, DoubleClass  rhs) =&gt; lhs + rhs;
}

public static class Arithmetic&lt;T&gt;
{
    public static IArithmetic&lt;T&gt; Default { get; internal set; }

    static Arithmetic() =&gt; Arithmetic.Initialize();
}

