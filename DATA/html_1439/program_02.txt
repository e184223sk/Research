
using System;
using UnityEngine;
using UniRx;
using UnityEngine.UI;

public class UniRxUITest : MonoBehaviour
{
    [SerializeField] private Button button;
    [SerializeField] private InputField inputField;
    [SerializeField] private Text countText;
    [SerializeField] private Text greetText;

    private int count = 0;

    // ここが重要！！
    // SubjectはIObservableとIObserverの2つを実装しており，「値を発行する」「値を購読できる」という2つの機能を持ったクラスである
    private Subject&lt;string&gt; _onClickButton = new Subject&lt;string&gt;();
    // IObservableはイベントメッセージを購読できる」というふるまいを定義したインターフェース
    public IObservable&lt;string&gt; OnClickButton
    {
        get { return _onClickButton; }
    }

    void Start()
    {
        countText.text = count.ToString();
        Setup();
    }

    private void Setup()
    {
        button.OnClickAsObservable()
            .Subscribe(_ =&gt; CountUp())
            .AddTo(this);

        // インプットフィールドの入力が終わったらイベント発火
        inputField.OnEndEditAsObservable()
            .Subscribe(text =&gt; _onClickButton.OnNext(text))
            .AddTo(this);

        // 作成した_onClickButtonの値が変わったらイベント発火
        OnClickButton
            .Subscribe(text =&gt; Greet(text))
            .AddTo(this);
    }

    // カウントアップのメソッド
    private void CountUp()
    {
        count++;
        countText.text = count.ToString();
    }

    // 挨拶のメソッド
    private void Greet(string name)
    {
        greetText.text = "おはようございます" + name + "さん";
    }
}


