More than 1 year has passed since last update.今日はテキスト検索サービスAzure Searchを導入してみます。Azure Search は、あらゆる種類の情報を拡充して関連コンテンツを簡単に特定し、大規模に検索する人工知能 (AI) 機能が組み込まれた唯一のクラウド検索サービスです。Bing と Office にも 10 年以上にわたって利用されている Microsoft の自然言語スタック、および視覚、言語、音声の事前構築済み AI API が使用されます。イノベーションに費やす時間を増やし、複雑なクラウド検索ソリューションの保守に費やす時間を減らすことができます。とのことです。　正直Bingのシェアは低いのですが、Azure Searchに関しては Readヘビーなサービスには必要不可欠なサービスとなっています。サンプルコードはこちらを参照https://github.com/Azure-Samples/search-dotnet-getting-startedC#で利用する場合は下記のライブラリーを利用します。https://docs.microsoft.com/en-us/dotnet/api/overview/azure/search?view=azure-dotnetサーチのサービス単位はIndexという単位になります。下記がIndexの取得方法です。appsettings.jsonに必要な情報を入力。appsettings.jsonの使い方はこちらを参照。
https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-2.1&amp;tabs=basicconfiguration必要なAPI情報はポータルより入手してください。Searchに使うモデルを構築します。それでは早速Indexの作成、削除、検索データの挿入をしてみます。フルコードは下記を参照
https://github.com/Azure-Samples/search-dotnet-getting-started/blob/master/DotNetHowTo/DotNetHowTo/Program.csコードを抜粋して説明していきます。まず主となるSearchServiceClientを生成します。そしてIndexの名前を指定する値を設定いきなり消すのかい、と思いながらもこれから先、生成するときにすでにあるIndexだと問題があるので一旦同じIndex名をもつIndexがある場合はまず削除します。DeleteIndexIfExistsというプライベートファンクションが下記のように定義されています。シンプルに、あるなら削除というコマンドです。次にIndexを生成します。CreateIndexというプライベートファンクションが下記のように定義されています。Fields = FieldBuilder.BuildForType&lt;Hotel&gt;() ここでフィールドの指定をしています。先ほどあったHotelクラスをベースにIndexのフィールドを生成します。あとはserviceClient.Indexes.Create(definition)で生成を実行します。次に指定したIndexを更新します。SearchIndexClient indexClient = serviceClient.Indexes.GetClient(indexName)　でindexClientを生成し、更新する対象とします。Azure Searchでは1つのデータをDocumentと呼んでいます。UploadDocumentsというプライベートファンクションが下記のように定義されています。　hotelsというデータの中にRoomという複数のデータが存在しています。hotelsという変数を指定し、batch処理指定をします。そしてそのbactch処理を下記で実行します。これで指定した3つのホテルはAzure SearchにIndexされました。本コードでは下記の部分で検索を実行しています。ここに定義されているRunQueriesファンクションは下記の通り。　下記のコードでは複数の検索を実行しています。今回使っているSDKのSearchメソッドは下記です詳しくは下記を参照ください。
https://docs.microsoft.com/en-us/dotnet/api/microsoft.azure.search.documentsoperationsextensions.search?view=azure-dotnet#Microsoft_Azure_Search_DocumentsOperationsExtensions_Search__1_Microsoft_Azure_Search_IDocumentsOperations_System_String_Microsoft_Azure_Search_Models_SearchParameters_Microsoft_Azure_Search_Models_SearchRequestOptions_下記は motelというキーワードでホテル名だけを返す検索です。ここではまずSearchParametersを生成しています。その際に選択するフィールドHotelNameに指定しています。Searchメソッドでmotelをキーワードに指定し、先ほど生成したSearchParametersを渡しています。下記は一泊100ドル以下のホテルのみ、hotelId と descriptionを返す検索になります。ここでも同じく、SearchParametersを生成します。その際にFilterプロパティをつあって一泊100ドル以下というフィルターを設定しています。ここで使われるフィルターはODataで指定をします。 ODataに関してはこちらを参照してください。
https://docs.microsoft.com/en-us/azure/search/query-odata-filter-orderby-syntax下記はLastRenovationDate順に並べ、上位２個の検索結果のみを返す検索になります。ここでも同じくSearchParametersの中でOrderByフィールドを指定することによって検索結果の順番を指定しています。そしてTopフィールドで検索結果の上位２個だけを返すように指定しています。今回の例を見てもわかるように、SearchParametersを使うと様々な検索を指定することができます。SearchParametersの詳細は下記を参照してください。
https://docs.microsoft.com/en-us/dotnet/api/microsoft.azure.search.models.searchparameters?view=azure-dotnet次回は今回作ったIndexにデータを流し込みするIndexerの生成を見てみます。
[Azure Search] Indexerを作る そして、さらに複雑な検索パターンも見てみたいと思います。　TypeAheadを使った検索スジャストなども見ていきたいと思います。


