More than 1 year has passed since last update.最初の記事はこちら今回はページング機能について紹介します。
(「全115件中11～20件目を表示」とかの機能を実現するためのものです。)公式ドキュメントだとこちらに記載されています。データベースはPostgreSQLを使用しました。前回と同じものを流用生SQLを使わない自動生成クエリの場合、終端操作でToPage メソッドを呼ぶことでページングを実現できます。以下のクエリが実行されます。全件数取得のクエリと、現在のページ部分のデータを取得するクエリの2つが実行されます。ToPage の第１引数はページ番号(1スタート, 0じゃないよ)
第２引数は1ページあたりの件数です。上記の引数だと「1ページ当たり10件で2ページ目を取得」なので
LIMIT 10 OFFSET 10 というクエリが生成されています。またOrderBy で常に同じ並び順になるように注意してください。ソースはこちら以下のプロパティが定義されています。Limit メソッドを使っても 似たようなことが可能です。以下のクエリが実行されます。ただしこちらは、第１引数はスキップするレコード数となっており、戻り値もList&lt;&gt; となっています。生SQLを使う場合Page メソッドを呼ぶことでページングを実現できます。以下のクエリが実行されます。クエリ自動生成の場合と同じく全件数取得のクエリと、現在のページ部分のデータを取得するクエリの2つが実行されます。また同様に Page の第１引数はページ番号、第２引数は1ページあたりの件数です。このページングについては
- Database.BuildPageQueries
- PagingHelper
- DatabaseType.BuildPageQuery (データベース別のオーバーライドあり)によって実現されています。クエリには必ずORDER BYの記述を忘れないようにしてください。実は Fetchメソッドもオーバーライドされており、ページングのクエリを発行できます。
ただしこちらの戻り値は List&lt;&gt; であり、件数取得は行われません。以下のクエリが実行されます。Page と同じく第１引数はページ番号です。SkipTake メソッドでもFetchメソッドと似たようなことは可能です。
ただしこちらの第１引数は「スキップする件数」です。以下のクエリが実行されます。非常に便利なページングの機能ですが注意点があります。生SQLを使う場合 with 句を使うことができません。
(クエリ加工を正規表現で行っており、対応していない)なのでwith を使わないクエリを書くか、with を使う場合は自前のページングをする、ビューを作成する などの対応が必要となります。


