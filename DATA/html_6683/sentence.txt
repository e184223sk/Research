More than 3 years have passed since last update.ASP.NET Identityを利用する際の基本的なメモ。
私のバカな頭では全体像がつかめなかったので、とりあえず簡単なユーザー登録、認証、Role等をテストしてみます。なお、以下のコードは可動性重視？のためawait等は使わず同期処理で記述しています。
また、ASP.NET MVC 5を前提としています（Coreはまた別の機会に）。まず、ASP.NET Identityを利用した認証がとっつきにくいのはlocaldbに対して勝手にcode firstでテーブルが作られてしまうとこかなと。これはWeb.configのDefaultConnectionで設定されています。本番だと普通はSQL Server使うと思うので変更します。変え方は、の2つかと思います。Web.configを書き換える場合は、例えば下記の様に変更します。各パラメータは環境に合わせて適宜読み替えお願いします。新しく接続文字列を定義した場合はModels/IdentityModels.csのApplicationDbContext内のbase:を変更します。Code Firstで実行時に生成されるのはデモとしてはいいのですけど、実務では開発者の意図するタイミングで生成しておきたいこともあります。その場合は、Migrationしてやればいいようです。ツール -&gt; NuGetパッケージマネージャー -&gt; パッケージマネジャーコンソールを開き、で生成されます。migration_filenameのところは適宜書き換えて下さい。上記実行後、変化が発生した際は、再度、Add-Migration, Update-Databaseを実行します。生成されるデータベースはです。最低限必要なテーブルはAspNetUsersです。自動生成される登録画面を使う方法がよく紹介されていますが、汎用性が無いためコードで登録してみます。
なお、標準の認証機構を利用する場合、最低限、の設定が必要となるようです。SecurityStampはApp_Start/Auth.csのapp.UseCookieAuthentication()にて検証させるように設定されているようです。なお、ここでは標準で用意されているHomeControllerに、上記の3つのActionを実装してみたいと思います。必要な名前空間をusingします。必要な名前空間をusingします。Modelsは環境に合わせて変更して下さい。普通にEntityFrameworkのINSERTと同じです。が、認証時のパスワードの突き合わせはハッシュ化されたパスワードを前提として行われるのでPasswordはHash化しておきます。またSecurityStampが無いと認証時に「オブジェクトがnullです！」的なエラーが出るのでとりあえず、Guidでも書き込んでおきます。ユーザーの生成と同時にログインさせていますが、必須ではありません。なお、生成の部分は、userManagerのCreateを利用することもできます（自動生成のregister actionは下記の様になっています）。なお、ApplicationUserManager, ApplicationSignInManager, ApplicationRoleManagerはApp_Start/IdentityConfig.cs内で定義されている。ユーザーが登録できたらログインしてみます。
userManagerにより対象にユーザーの存在をチェックし、ユーザーがいたなら引き続き認証を行います。AccountControllerを利用している場合はAuthenticationManager.SignOut()を呼び出すだけですが、別途実装すする場合は、IAuthenticationManagerを返すヘルパー関数？を用意してあげます（AccountControllerでそうなっているので）。ASP.NET Identiryの基本的な部分はこんな感じです。ここではRoleを利用するために、上記の3つのActionを追加していきます。ロールを使うためにはまず、Models/IdentityModel.csに下記を追加します。次に、App_Start/IdentityConfig.csにApplicationRoleManagerクラスを追加します。さらに、App_Start/Startup.Auth.csに下記を追加します。ロールを追加します。これによりAspNetRolesにadminが追加されます。次にユーザーにRoleを紐付けます。ここでは既に登録したユーザーにadminを紐付けます。
これによりAspNetUserRolesテーブルにuserIdとroleIdが登録され紐付けられます。では、Roleを利用して表示やアクセスを制御してみます。ViweではIsInRole("rolename")を利用して表示の切り替え等を行うことができます。その他の情報は下記のように取得できます。Controllerではアノテーションを[Authorize(Roles ="rolename")]とすることでアクセスを制御することができます。


