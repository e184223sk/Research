More than 1 year has passed since last update.参考文献に書いたのですが@k7aさんの「AssetBundleのキャッシュを完全に理解する」という記事でそもそものCachedAssetBundleというのは、AssetBundleのキャッシュに用いるためのキー名とバージョンチェック用のハッシュ値をペアにした構造体です。（定義）ということなのでCacheの名前をCaching.currentCacheForwriting.pathで取得したディレクトリにしたらええんか、と思いやってみました。下記はサンプルコードだけど絶対に使わないでください！（クラッシュしてキャッシュシステムがつかえなくなるかもしれない）とやってみたのですが、UnityEditorがクラッシュしてしまい、その後何度やっても何をやってもクラッシュ
クラッシュするタイミングがどこかというと
UnityWebRequest.GetAssetBundleの部分で第二引数にAssetBundleCacheを指定すると必ずクラッシュが発生しました。
逆にそのキャッシュを指定しなければダウンロード自体は素直に動きました。
でも結局キャッシュできない問題は何も解決していない...
キャッシュの保存場所を変えても無駄無駄。とりあえずteratailやstackoverflowなど様々なサイトで質問や検索を繰り返しましたが、なしのつぶて。恐らく本来のキャッシュシステムとなんか違う気がしますが、動くからヨシ！
ほんとはもっとパフォーマンスとかMonoメモリを使用しないやり方とかあるんでしょうけど知ったこっちゃない。
というか知らないので教えてほしいぐらい。結論から言いますと、Resources.Loadと同じ考え方で、アプリケーション内にAssetBundleダウンロードし、必要な時にそれを解凍して使用する
というやり方です。
以下はコードまだ勉強し始めたばっかで右も左もわかりません。なのでいろいろ改善点があると思うのでいろいろお教えください。自分の感覚としては「キャッシュサーバーに保存できないんならアプリそのものに保存すればええやん」ということで前述のとおり、アプリ内に専用のフォルダを作成しました。処理手順としては１、古いmanifestが存在するなら削除
２、manifestファイルをダウンロード
３、アセットがあるアセットバンドルファイルを一時フォルダにダウンロード
４、アセットバンドル名とhash値を取得
５、hash値を記録するxmlを作成、既にあるなら書き換え
６、一時フォルダにあるファイルをすべて削除なんと6手順！面倒時間があるならAutoyaの勉強をしてもいいんですが、時間がないため突貫工事これを作りました。ダウンロード→hash値確認→キャッシュだけなので分かりやすい
アセットバンドルのアップデートにも対応（これがないなら抑々AssetBundle使う必要ない気もする）
とりあえず動くcrcの確認をしていないので破損してもわからない
本来WebRequestAssetBundleで一発キャッシュできるはずが6手順もかかって面倒
最後のあたり多分動かないもしご使用される場合は最後のwhile文辺り消して使ってくださいなぜキャッシュシステムが使えなくなったのか、わかる方お教えくださいさんざんリファレンスやqiita見まくっても間違えたことですが、
マニフェストファイルとはAssetBundleのhash値を取得するために必要なファイルであり、
AssetBundleファイルを作成する際に使ったBuildPipeLineで生まれたフォルダーと同じ名前のAssetBundleファイルのことであり、
拡張子manifestのファイルは全く関係がありません!!全く関係がないというと語弊がありますが、あれはアセットバンドル内部に何があるかを人間の目にわかりやすくしたものであり、
AssetBundleManifestって書いてあるから拡張子がmanifestのファイルを使うと思ったらドツボにはまります。
実際それで2週間ははまりました。@k7aさんの「アセットバンドルを完全に理解する」
@neon-izmさんの「アセットバンドルが全く分からない人のためのメンタルモデル」


