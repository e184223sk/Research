using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Automation;
using System.Windows.Forms;

namespace ConsoleApp1
{
    // UI Automation関連の処理で使う関数を集めてみました
    // 個別に抜き出して使うことも鑑み、各関数の独立を意図的に高める記述をしています。
    public class UIAutomationLib
    {

        readonly string ModuleName = "UIAutomationLib";

        // UI automation系以外に、Win32APIも使いますのでその宣言。 
        [DllImport("USER32.dll", CallingConvention = CallingConvention.StdCall)]
        static extern void SetCursorPos(int X, int Y);
        [DllImport("USER32.dll", CallingConvention = CallingConvention.StdCall)]
        static extern void mouse_event(int dwFlags, int dx, int dy, int cButtons, int dwExtraInfo);

        //　マウスイベント
        //　定義は以下に
        //  https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-mouse_event
        //
        private const int MOUSEEVENTF_LEFTDOWN = 0x2;
        private const int MOUSEEVENTF_LEFTUP = 0x4;


        //指定したタイトルの文字列が含まれているプロセスを取得
        //一個目を戻すだけなので、複数対応はしていません。
        public Process UpdateTargetProcess(string title)
        {
            Process process = null;
            foreach (Process p in Process.GetProcesses())
            {
                if (p.MainWindowTitle.Contains(title))
                {
                    process = p;
                    break;
                }
            }
            if (process == null)
            {
                MessageBox.Show(title + "のプロセスが見つかりません。", ModuleName);
            }
            return process;
        }

        //指定されたプロセスのMainFramに関するAutomationElementを取得
        public AutomationElement GetMainFrameElement(Process p)
        {
            return AutomationElement.FromHandle(p.MainWindowHandle);
        }

        //指定された名前のButtonをクリックします
        //（例外対策はしていませんので注意）
        public void PushButtonByName(AutomationElement element, string name)
        {
            InvokePattern button = FindElementsByName(element, name).First()
                .GetCurrentPattern(InvokePattern.Pattern) as InvokePattern;
            button.Invoke();
        }

        //指定されたAutomationIdのButtonをクリックします
        //（例外対策はしていませんので注意）
        public void PushButtonById(AutomationElement element, string AutomationId)
        {
            InvokePattern button = FindElementById(element, AutomationId)
                .GetCurrentPattern(InvokePattern.Pattern) as InvokePattern;
            button.Invoke();
        }

        //指定されたAutomationIdのパーツをクリックします
        //（例外対策はしていませんので注意。clockableじゃないパーツ叩くと多分落ちるw）
        public void ClickElement(AutomationElement element, string AutomationId)
        {
            AutomationElement target = FindElementById(element, AutomationId);
            System.Windows.Point p = target.GetClickablePoint();
            SetCursorPos((int)p.X, (int)p.Y);

            mouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0);
            mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
        }

        //指定されたAutomationElementにキーボード叩いた体で文字列を送り込みます
        //（対象はTextBoxなどを想定）
        //
        //focusはキー叩く前に該当パーツにマウスを移動するかどうか 
        // 　制御コードなどは以下を参考に
        // 
        // https://docs.microsoft.com/ja-jp/dotnet/api/system.windows.forms.sendkeys?view=netframework-4.8
        // 
        public void Keyin(bool focus, AutomationElement element, string text)
        {
            if (focus)
            {
                element.SetFocus();
            }
            Thread.Sleep(200);
            SendKeys.SendWait(text);
            Thread.Sleep(200);
        }


        // 指定されたautomationIdに一致するAutomationElementを取得
        public AutomationElement FindElementById(AutomationElement rootElement, string automationId)
        {
            return rootElement.FindFirst(
                TreeScope.Element | TreeScope.Descendants,
                new PropertyCondition(AutomationElement.AutomationIdProperty, automationId));
        }

        // 指定された名前に一致するAutomationElement達をIEnumerableで戻します、
        public IEnumerable&lt;AutomationElement&gt; FindElementsByName(AutomationElement rootElement, string name)
        {
            return rootElement.FindAll(
                TreeScope.Element | TreeScope.Descendants,
                new PropertyCondition(AutomationElement.NameProperty, name))
                .Cast&lt;AutomationElement&gt;();
        }
    }
}


