

public class Bootstrap : MonoBehaviour
{
    public static Bootstrap Instance { get; private set; }
    public static Param Param {  get { return Instance.param; } }

    [SerializeField] public float boidScale = 1.0f;
    [SerializeField] public Param param;

    [SerializeField] GameObject prefab_obj;
    private Entity prefab_entity;

    private int n_boid;
    private Unity.Mathematics.Random random;

    /* 略 */

    void UpdateBoidNum(int n_tgt)
    {
        if (n_tgt &lt; 0) return;

        var manager = World.DefaultGameObjectInjectionWorld.EntityManager;

        int n_diff = n_tgt - n_boid;

        if (n_diff &gt; 0)
        {
            Debug.Log($"update boids num: add {n_diff} boids.");

            var scale = this.boidScale;
            var initSpeed = this.param.initSpeed;

            for (int i = 0; i &lt; n_diff; i++)
            {
                var entity = manager.Instantiate(prefab_entity);

                // BoidPrefabType を BoidType に付け替え
                manager.RemoveComponent&lt;BoidPrefabType&gt;(entity);
                manager.AddComponent&lt;BoidType&gt;(entity);

                // 適当に値を設定
                manager.SetComponentData(entity, new Translation { Value = this.random.NextFloat3(1f) });
                manager.SetComponentData(entity, new Rotation { Value = quaternion.identity });
                manager.SetComponentData(entity, new Scale { Value = scale });
                manager.SetComponentData(entity, new Velocity { Value = this.random.NextFloat3Direction() * initSpeed });
                manager.SetComponentData(entity, new Acceleration { Value = float3.zero });
            }
        }
        if (n_diff &lt; 0)
        {
            int n_delete = -n_diff;

            Debug.Log($"update boids num: remove {n_delete} boids.");

            var entity_query = manager.CreateEntityQuery(new EntityQueryDesc
            {
                All = new[]
                {
                    ComponentType.ReadOnly&lt;BoidType&gt;()
                }
            });
            var entities = entity_query.ToEntityArray(Allocator.Temp);
            manager.DestroyEntity(new NativeSlice&lt;Entity&gt;(entities, n_tgt));

            entities.Dispose();
        }

        n_boid = n_tgt;
    }
}

