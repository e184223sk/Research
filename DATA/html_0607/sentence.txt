C#における条件分岐についてまとめていきます。
どの言語でも使えるように "if" と "switch" があります。本文は以下の記事の内容を前提に記述しています。C#_変数宣言と型・キャストC#_単項・二項・三項演算子ある処理Aと処理Bのどちらを実行するか、その時の条件によって分岐させたい場合、if文を使用していきます。
また、同時にその条件を満たさなかった場合の処理をelseによって記述することもできます。さらに、else以降に重ねてif文を繋げることで連続して条件分岐を行うことが可能です。if文の( )の中に入る式を "条件式（評価式）" と呼び、条件式はbool値（論理値）を返す必要があります。条件式はOR演算やAND演算によって複数の式を結合することが可能です。C#に限らずですが、実はOR演算やAND演算では "短絡評価" という評価法が採用されています。どういう方法かというと、ORやANDによって複数の条件式が結合された時、
1つずつ式を評価していき、途中で結果が確定した段階で以降の評価をスキップする動きになります。次の例を見てみましょうインクリメントを多用していますが、まず最初のif文から見ていきます。if (a == 0 || b++ == 10)このif文ではまず最初に左側の"a == 0"を評価し、これがtrueであることが分かります。その次にOR演算が来ますが、OR演算は被演算子（||の両端にある式）の内
「少なくとも一方が真であれば全体の結果も真」だと言えるので
以降の評価"b++ == 10"を実行せず、if文の中に入って"a++"を実行します。さて次のif文を見ていきましょう。if (a &lt; 0 &amp;&amp; b++ == 1)これも先ほどと同様にまず左側から見ていき、"a &lt; 0"を評価したところa = 1なので"a &lt; 0 → false"であることが分かります。AND演算では「被演算子の少なくとも一方が偽であれば全体が偽」だと言えるので、
この場合にも、以降の評価"b++ == 1"は実行されません。if文の結果は偽でしたのでその中に入らず処理を終了します。
最終的にaは一度だけインクリメントされて1に。bは一度も値を変更されることなく0のままであることが確認できます。今回は例としてインクリメントを使用していますが、可読性の考慮すると評価式中に変数の値を更新するのは非推奨です。
その式が実行されたかどうかがパッと見で分かりづらいので、できるだけ分かりやすい書き方を心掛けましょうさて、if文以外にも条件によって実行内容を分岐させる方法が "switch-case文" になります。
実際に動きを見てみましょう。動きを見ればわかる通り、aの値によって処理が変わる点についてはif-else文と同じです。switch-case文は選択肢が系統的に列挙できる場合、if-else文よりも可読性を上げることができます。
例えばaの値が1~10まで全てについて異なる処理をしたい場合、switch-case文の方が有用です。反対に、a &lt; 5の様な範囲指定をする評価をする場合にはif-elseが必要になるので、
その時々によってうまく使い分けられるようにしましょう今回はここまで。


