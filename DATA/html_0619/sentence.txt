C#の基本的な知識からおさらいしていきます。全くプログラミングしたことない人でも分かる内容にすることができるかどうか自分なりの読解力の確認も兼ねて本文は以下の記事の内容を前提に記述しています。"dotnet new console -o HelloWorld"によって新たにプロジェクトを作成した場合、
Program.csファイルに下記のようなプログラムが書かれています。コンパイラ言語であるC#には"エントリポイント"という、「プログラムが開始するスタート地点」が存在します。
※1. インタプリタ言語は基本的にファイルの先頭から開始します
※2. コンパイラ言語とインタプリタ言語の違いについてはここでは深く触れません。参考URLだけ貼っておきます。C#のエントリポイントは下記の通りMainと書かれている部分になるので、その中に書かれているコードがプログラム実行時に処理されていきます今、この中に記述されている「Console.WriteLine("Hello World!")」とは、コンソールに"Hello World!"と表示するという命令文になります。
ここでは、コンソールへの表示のことを"標準出力"と呼びます。
※詳しくは下記サイトなどを参照ください文字列以外にも数値や論理値を表示することも可能です。さて、コンソールに表示する内容をただただ直書きしていくのはツラいので変数を使っていきましょうさて、出力は全く同じですがa~dの変数に値を入れて、変数を使用してコンソールへの表示を行っています。
変数を定義する部分を "宣言" と呼び、変数へ値を入れることを "代入" と呼びます。変数宣言時に出てきたstring, int, double, boolなどがそれぞれの変数の "型" といい、変数を使う場合には必ず"型"とセットにしなければいけません。C#の型は「値型」と「参照型」に分かれており、次表に示す型を "値型" と呼び、型名と表現できる値の範囲は表の通りです。
宣言した型の表現可能な範囲を超えた値を入れようとするとエラーが起きてしまいます。値型だけでも数が多いですが、実際のところそこまで厳密に値の範囲を制限したい場面は少ないので、
整数表現にはintを、実数表現にはdoubleを使うということを覚えられれば十分です。上記、値型以外の型を "参照型" と呼び、多種多様な型が存在しますが、"string"=文字列型も参照型の一種となります。
また、参照型は自分で新たに作り出すことも可能です。さて、ただ単に直書きを変数にしただけではまだ特にメリットが分からないので計算もさせてみます。おかしなことに気づいたでしょうか？「14 / 5 = 2」になってしまっています。
これはC#に限らずですが、プログラミングでは基本的に整数型による計算の結果は整数型になるという決まりがある為です。理論的には14 / 5 = 2.8になりますが、これを"整数"で表現するために小数部分を切り捨てし、2となります。（四捨五入ではなく切り捨てです）
試しに実数型であるdouble型で同じ計算をしてみるととなることが確認できると思います。別々の値型でも、ある一定の条件を満たせば型を変換することができます。これを "キャスト" と呼びます。(int)を付けることでdouble型である a をint型に変換して b とすることができました。これを "明示的キャスト" と呼びます。
一方で int型である b をそのままdouble型である c に代入しています。これを "暗黙的キャスト" と呼びます。最初に"一定の条件を満たせば"と言いましたが、その条件とは下記のとおりです。※暗黙的キャスト可能な場合に明示的にキャストを書いても問題ありません。上記の例では、「intの範囲32bit」＜「doubleの範囲64bit」なのでint→doubleへは暗黙的キャストが可能ですが、その逆では明示的キャストが必要になります。
型の範囲が狭まるということは、元々の変数では表現できていた情報を失ってしまったり、変換時に許容範囲外の値を入れようとしてエラーが起きてしまったりする可能性があります。また、明示的キャストが必要な場合にキャストを付けなかった場合には、コンパイルエラーが発生して警告されます。まずは変数宣言と型、キャストについてここまで。


