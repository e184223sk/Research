
using System;
using System.Reflection;
using System.Reflection.Emit;
using System.Collections.Generic;

public static class StaticDelegateHelper
{
    public static readonly Func&lt;Delegate, IntPtr&gt; GetFuncPtr;
    static StaticDelegateHelper()
    {
        DynamicMethod method = new DynamicMethod("GetFuncPtr", MethodAttributes.Public | MethodAttributes.Static, CallingConventions.Standard, typeof(IntPtr), new Type[] { typeof(Delegate) }, typeof(Delegate), true);
        ILGenerator ilgen = method.GetILGenerator();
        ilgen.Emit(OpCodes.Ldarg_0); // 第０引数について
        ilgen.Emit(OpCodes.Ldfld, typeof(Delegate).GetField("_methodPtr", BindingFlags.NonPublic | BindingFlags.Instance));
        ilgen.Emit(OpCodes.Ret); // 戻り値とせよ
        GetFuncPtr = (Func&lt;Delegate, IntPtr&gt;)method.CreateDelegate(typeof(Func&lt;Delegate, IntPtr&gt;));
    }
}

