// Buildalyzerの起点
AnalyzerManager manager = new AnalyzerManager();
// C#プロジェクトのオープン
ProjectAnalyzer analyzer = manager.GetProject(@"C:\MyCode\MyProject.csproj");
// プロジェクト情報からRoslynで使うWorkspace(プロジェクトやソリューションをまとめたもの)を生成する。
// Buildalyzer.Workspacesが必要
Microsoft.CodeAnalysis.AdhocWorkspace workspace = analyzer.GetWorkspace();
// 以後Microsoft.CodeAnalysis.AdhocWorkspaceを使用する
foreach(var project in workspace.CurrentSolution.Projects)
{
    // 個々のプロジェクト処理
    // プロジェクトのコンパイル(シンボル情報構築)
    // 型がAssemblyではなく、Microsoft.CodeAnalysis.Compilationなので注意
    var compilation = await project.GetCompilationAsync();
    foreach(var diag in compilation.GetDiagnostics())
    {
        // コンパイルエラー等がある場合、
        // 完了後にGetDiagnostics()を使用してエラー情報を取得する
    }
    // compilation.GetSymbolsWithNameでクラス定義等が取得可能
    // キャストしないとISymbolで取得されるため、情報が非常に限定される
    foreach(var clsSymbol in compilation.GetSymbolsWithName(_ =&gt; true, SymbolFilter.Type).OfType&lt;ITypeSymbol&gt;())
    {
        // メンバーの取得
        // (メソッドやインナークラス等も入るため、ISymbol.Kindで場合分けを行う事)
        foreach(var memberSymbol in clsSymbol.GetMembers())
        {
        }
    }
}

