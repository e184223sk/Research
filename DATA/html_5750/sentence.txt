More than 1 year has passed since last update.これは、C#でソースコード生成を実現するための記事となります。
コード生成というとコンパイラーとか低レベルなイメージがありますが、今回行うのは.csの生成となるので、そんなに難しいことはないと思います。注意: この文書はBuildalyzer-0.4.0を基準に書かれています。現在の最新版は2.1.0ですが、仕様が変更されているので、そのうち更新する予定です。例えば、デバッグ用にあるクラスの全てのパブリックフィールドを文字列として生成する実装を書きたい、となったとします。ぱっと思いつく方法としては、があります。
手で書く場合、それが小規模なうちはいいですが、管理するクラスが増えてくると、抜けがないように実装するのが大変になります。
リフレクションを使用する場合、愚直に毎回Typeからメンバーを取り出して...とすると、オーバーヘッドが割と大きく、かといってキャッシュしようとすると、キャッシュをどこに置くのか、オーバーヘッドは無いか、そもそもリフレクションが使えない場合もあるのではないか等、こちらも多少問題があります。
また、リフレクションで解析する場合、実際に処理を走らせないとエラーが見つけにくい、見つかっても問題個所がわかり辛いという欠点もあります。そこで、事前にコード解析を行い、コンパイル時点(または以前)に予め静的に特化処理を作っておく、という方法を使うことにより、
上記の問題を解決することが可能になります。今回紹介するBuildalyzerを使用した方法の他に、以下のようなものもあります。それぞれ個性はあるので、色々試してみるのがいいかと思います。
個人的にはVisual Studioを使うことができるなら、T4あるいはRoslyn Analyzerで事足りる場合が多いです。
しかし、これらの方法は依存関係に制限が入ることが多く、たまに要件に合わない場合もあったりするので、そういう場合は今回の記事の方法が役に立つのではないかなと思っています。以下、この記事内の想定環境について記載します。詳しくは公式のREADMEを読むことになりますが、とりあえず取っ掛かりとして必要な部分を説明します。ライブラリの機能自体はcsprojの解析とワークスペース作成が主で、解析後はroslynの各種APIを駆使して解析を行うことになります。以下二つのnugetパッケージをプロジェクトに追加します。以下二つの名前空間をusingします。最初にAnalyzerManagerをnewして、次にAnalyzerManager.GetProject(path_to_proj)を実行して、プロジェクト情報を取得することになります。具体的には以下のようなコードになります。コード生成部分の実装を終えた後は、それを実際に動かす必要があります。
.NET Core CLI ツールの拡張モデルによると、
いくつかの方法がありますが、今回は各プロジェクト ベースの拡張機能の方法を使用するのが、PATH環境変数も汚さずに済み、カスタムタスクに比べても作りが素直なのでいいのではないかと思います。
MSBuildのカスタムタスクを実装する方法が最も応用が効く方法なのですが、どうもRoslyn関連のDLLが読み込めなかったので、この記事では深入りはしません。具体的には以下のようにします。これで、DotNetCliToolReferenceを追加したcsprojをカレントディレクトリにして、dotnet [サブコマンド]とすると、作成したコンソールプロジェクトが実行されます。注意点としては、dotnetサブコマンドのプロジェクトが更新された場合、パッケージ作成プロジェクトと参照プロジェクト両方のパッケージバージョンを上げないと更新が反映されないという点でしょうか。この辺りはnugetのキャッシュシステムが関係しているので、わかっている人ならば該当パッケージのキャッシュをクリアした上で、restoreするという手もあります。実装例として、テストプロジェクトを作成しました。pack.ps1でnupkgを作成し、dotnet restoreでBuildalyzerTest.LibUserのrestoreを行うと、以後dotnet buildalyzer-testというコマンドでコード生成を行うことができます。このプロジェクトでは、-p [csprojのファイルパス]オプションを指定して、クラスの解析と、
メンバーをToStringでつなげたpublic static string MemberwiseToString(this T obj)という拡張メソッドを作成し、標準出力に出しています。もう少し手を加えれば、csファイルの出力も十分可能です。Buildalyzerが依存しているMicrosoft.Buildと、dotnet-sdkのバージョンの食い違いにより、
解析時に例外が発生したり、正しくドキュメント一覧が取れなくなる場合がある。そのような場合は、コード解析を行うプロジェクトのPackageReferenceに、以下のパッケージを
直接追加すれば、大体の場合現象は回避できる。また、回避方法として、Buildalyzerが使用するMicrosoft.Buildのバージョンに対応するSDKを入れた上で、
解析対象のプロジェクトにglobal.jsonを置いて、sdk/versionの値をそのSDKのバージョンに指定する方法もある。
(Buildalyzer-0.2.1はMicrosoft.Build-15.3.409を参照しているので、sdkバージョンは2.0.xを指定すればOK)特に前準備が手間というのは、大きいと思います。大体の場合、時間対効果を考えるならば、リフレクション等で済ませた方が楽です。しかし、ソースコード生成はハマるところにはハマるので、選択肢の一つとして持っておくのもいいのではないかと思います。


