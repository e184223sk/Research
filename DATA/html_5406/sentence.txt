More than 3 years have passed since last update.ミニゲームを作ってUnityを学ぶ！[タンクウォーズ編]今回は上下の移動ができるようになった戦車について、以下のように砲台を制御する機能を実装していきます。最初に、砲台部分のTransformをインスペクタから設定できるようにします。インスペクタに表示されたmTurretTransフィールドには「PlayerTank/Turret_Base」をドラッグ&amp;ドロップで設定しておきます。砲台をマウスポインタの位置に向けるためにはまずマウスポインタの座標を取得しなければなりません。マウスポインタの現在位置はInput.mousePositionで取得することができますが、ここで取得できる値は2D座標のため、3Dであるタンクウォーズでは2Dから3Dへの座標変換が必要になります。今回はその変換処理をUnityのRaycastで実現します。右の画像は実際のマウスポインタの位置を緑色の丸で示していて、左がカメラの位置(x=0, y=32, z=0)を原点として、カメラから見たマウスポインタの位置に向かってRayを飛ばしている状態を横から見たものです。左をみるとわかりやすいですが、このときRayがGroundと接触した交点の座標がマウスポインタの位置を3D座標に変換した値となります。上記はRayを使ってマウスポインタの3D空間上の座標を取得するシンプルなコードですが、これはRayがコライダーに接触しなかった場合や、Ground以外の例えば戦車のコライダーに接触した場合の処置が十分ではありません。それらの想定しうる問題を解消するためにPlaneを利用したコードがこちらです。ここで利用しているPlaneはシーン上に配置するオブジェクトとしてのそれではなく、実体のない（目には見えない）平面です。
このPlaneは目に見えないことと同時に、Scaleの概念がなく無限の大きさを持っていることが特徴です。この特徴によりGroundオブジェクトと同じ場所にPlaneを配置することで、マウスポインタがどの位置にあったとしても必ずPlaneに接触するRayを飛ばすことができます。また、GetMousePosition3d()で使用しているmTempPlane.RaycastではRayのmTempPlane以外との接触は無視されますので、コライダーが戦車（PlayerTank）なのか地面（Ground）なのかといった判定をする必要がありません。3D空間でのマウスポインタの座標が取得できましたので、次はその座標に砲台を向けるための角度を計算します。ベクトルの引き算やクォータニオンについての説明は割愛させていただきますが、この修正で砲台の正面がマウスポインタの方向を向いたときの角度が計算できました。（角度を制限する）
上記コードではQuaternion.FromToRotation()で取得したquternionをVector3に変換して数値の制限を行っていますが、これはquternionがx,y,zの3点軸全てについての回転角度であるのに対して、砲台の回転をY軸のみに制限するためです。
この軸の制限を行っていない場合は砲台が裏返ってしまうような挙動をしてしまいます。（コメントアウトについて）
コメントアウトされている部分は砲台のY軸回転を時計の短針でいう1時～5時までに制限しています。
これは今回のゲームのルールを「左手に配置されたプレイヤーが右手にいる相手戦車を倒す」にしたときに、左に砲台を回転する必要がないためです。
こちらはPlayerTankを左に配置するタイミングで外してみてください。では、最終的な角度を実際に砲台のRotationに適用します。続けて、前回TankMovementで行ったようにTankModelからTurretControllerに対して指示を送るようにコードを修正します。最後にプロジェクトを実行して、砲台が常にマウスポインタの位置に向かって回転することを確認します。次のページに進む
イントロダクションに戻る



