byte配列 から 固定サイズの配列を含む構造体 に変換（デシリアライズ）したいです。固定サイズの配列を含む構造体 は、『他の言語またはプラットフォームのデータ ソースと相互運用する』のような場面で有用かと思います。（MS公式 の文言を拝借）今回は以下のデータ構造を想定しています。先頭に 4Byte の単一データがあり、以降に 3Byte のデータが隙間なく 128個 並んでいます。直観的には以下のように書きたいですが、C#8.0 ではビルドできません。構造体内に固定サイズ配列を定義する手段として、固定サイズバッファ（fixed T[]）が用意されています。これを使えば良いのですが、制約が多く扱い難い印象です…投稿時のサンプルコード

// 固定サイズバッファ
[StructLayout(LayoutKind.Sequential)]
unsafe struct DeserializedData          // unsafe必須 / readonly不可
{
    public readonly int Param;
    public fixed byte FixedBuffer[3 * 128];  // 組み込み型限定 / readonly不可
}


@albireo さんのコメントありがとうございました！固定サイズの配列を分解して1行ずつべたで書けば、固定サイズバッファ を使用せずに同じデータ構造を定義できます。固定サイズバッファの制約（組み込み型 / readonly / unsafe）がなく自由度は高いですが、想像するだけで げんなり します。（宣言だけでなくgetterも必要ですし…）良い方法ありましたら教えて下さい！T4 テキスト テンプレート を使ってべた書きしました。 力こそパワー💪詳細は MS公式 で確認して下さい。（私は全部読まずに雰囲気で使っちゃっています…）ポイントは以下と思っています。プロジェクトにファイルを追加します。
追加 → 新しい項目 → テキストテンプレート(.tt) テンプレートを書きます。
C# と同じノリで書けて、また変換テキストをすぐに確認できるので雰囲気で使えます。
今回は対応していませんが、GetEnumerator() や インデクサ も書いておくと便利そうです。テンプレートコード内で、ローカル関数 や 文字列補間($"")  を使うと、VSにシンタックスエラーを指摘されました。（コードは生成されますが、エラーが取れないので気持ち悪い…）今回は以下でお茶を濁しました。固定サイズの配列を持つ構造体 の実装で、T4 を使ってフィールドをべた書きしてみました。固定サイズバッファ（fixed T[]）を使用しないことで、奇数サイズの配列 や readonly属性 に対応することができます。よりスマートな実装がありましたらコメントで教えて頂きたいです。Visual Studio Community 2019 16.7.4.NET Core 3.1C# 8.0固定サイズ バッファー (C# プログラミング ガイド)コード生成と T4 テキスト テンプレート.NET Core時代のT4によるC#のテキストテンプレート術T4テキストテンプレート入門 - デザイン時T4テキストテンプレート編


