
&lt;#@ template debug="false" hostspecific="false" language="C#" #&gt;
&lt;#@ assembly name="System.Core" #&gt;
&lt;#@ import namespace="System.Linq" #&gt;
&lt;#@ import namespace="System.Text" #&gt;
&lt;#@ import namespace="System.Collections.Generic" #&gt;
&lt;#@ output extension=".cs" #&gt;  //★出力するファイルの拡張子を指定（デフォは .txt）
&lt;#  //★ソース生成に使用されるコード
    Func&lt;int, int, string&gt; CreateDeclarationFields = (start, count) =&gt;
    {
        return string.Join(Environment.NewLine, Enumerable.Range(start, count)
            .Select(i =&gt; "public readonly My3Bytes FixedBuffer" + i.ToString() + ";"));
    };
    Func&lt;int, int, string&gt; CreateSwitchFields = (start, count) =&gt;
    {
        return string.Join(Environment.NewLine, Enumerable.Range(start, count)
            .Select(i =&gt; i.ToString() + " =&gt; FixedBuffer" + i.ToString() + ","));
    };
#&gt;  //★以降がテキストファイルとして生成される
// &lt;auto-generated&gt;
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// &lt;/auto-generated&gt;

using System;
using System.Runtime.InteropServices;

namespace CSharpT4Samples
{
    [StructLayout(LayoutKind.Sequential, Size = 3)]
    readonly struct My3Bytes
    {
        public readonly byte b0, b1, b2;
    }

&lt;# {
    int count = 128;    //★固定配列のサイズ
#&gt;
    //★&lt;#= #&gt; 内がソースコードに展開される
    [StructLayout(LayoutKind.Sequential, Size = 4 + (3 * &lt;#= count #&gt;))]
    readonly struct DeserializedData
    {
        public readonly int Param;
        &lt;#= CreateDeclarationFields(0, count) #&gt;     //★固定配列分フィールドを定義

        public readonly My3Bytes GetFixedBuffer(int index) =&gt;
            index switch
            {
                &lt;#= CreateSwitchFields(0, count) #&gt;  //★Indexのフィールドを参照
                _ =&gt; throw new IndexOutOfRangeException()
            };
    }
&lt;# } #&gt;
}

