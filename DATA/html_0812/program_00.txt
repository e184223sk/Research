using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Unity.MLAgents;
using Unity.MLAgents.Sensors;

public class RollerAgent : Agent {

    [SerializeField] private Transform target = default; // ターゲット
    [SerializeField] private float forceMultiplier = 10; // 作用力係数
    private Rigidbody rBody; // エージェントの剛体
    private const float reachMargin = 1.42f; // 許容する接触誤差

    /// &lt;summary&gt;オブジェクトの初期化&lt;/summary&gt;
    private void Awake () {
        rBody = GetComponent&lt;Rigidbody&gt;();
    }

    /// &lt;summary&gt;エージェントの初期化とリセット&lt;/summary&gt;
    public override void OnEpisodeBegin () {
        if (transform.localPosition.y &lt; 0) {
            // エージェントが落ちていたら初期化
            rBody.angularVelocity = Vector3.zero;
            rBody.velocity = Vector3.zero;
            transform.localPosition = new Vector3 (0, 0.5f, 0);
        }
        // ターゲットを新しい無作為な位置へ移動
        target.localPosition = new Vector3 (Random.value * 8 - 4, 0.5f, Random.value * 8 - 4);
    }

    /// &lt;summary&gt;環境の観察&lt;/summary&gt;
    public override void CollectObservations (VectorSensor sensor) {
        // ターゲットとエージェントの位置
        sensor.AddObservation (target.localPosition);
        sensor.AddObservation (transform.localPosition);
        // エージェントの速度
        sensor.AddObservation (rBody.velocity.x);
        sensor.AddObservation (rBody.velocity.z);
    }

    /// &lt;summary&gt;行動と報酬の割り当て&lt;/summary&gt;
    public override void OnActionReceived (float [] vectorAction) {
        // 行動, size = 2
        var controlSignal = Vector3.zero;
        controlSignal.x = vectorAction [0];
        controlSignal.z = vectorAction [1];
        rBody.AddForce (controlSignal * forceMultiplier);
        // 報酬
        var distanceToTarget = Vector3.Distance (transform.localPosition, target.localPosition);
        // ターゲットへの到達
        if (distanceToTarget &lt; reachMargin) {
            SetReward (1.0f);
            EndEpisode ();
        }
        // プラットフォームからの落下
        if (transform.localPosition.y &lt; 0) {
            EndEpisode ();
        }
    }

    /// &lt;summary&gt;環境のテスト&lt;/summary&gt;
    public override void Heuristic (float [] actionsOut) {
        actionsOut [0] = Input.GetAxis ("Horizontal");
        actionsOut [1] = Input.GetAxis ("Vertical");
    }

}

