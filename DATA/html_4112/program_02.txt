
    class Program
    {
        private static List&lt;Student&gt; StudentList;

        static void Main(string[] args)
        {
            SetStudentsData();
            var query1 = StudentList.AsQueryable().Where(GetWhereContainsExpression("Name","A"));

            Console.WriteLine("Studentのフィルター結果(Name)");

            foreach (var item in query1)
            {
                Console.WriteLine(item.Name.ToString());
            }

            var query2 = query1.AsQueryable().Where(GetWhereContainsExpression("Floor", "B")); ;

            Console.WriteLine("Studentのフィルター結果(Floor)");

            foreach (var item in query2)
            {
                Console.WriteLine("Name:{0},Floor:{1}",item.Name.ToString(),item.Floor.ToString());
            }

            Console.ReadLine();
        }

        public static Expression&lt;Func&lt;Student, bool&gt;&gt; GetWhereContainsExpression(string columnName, string keyword)
        {
            var type = typeof(Student);
            var property = type.GetProperty(columnName);
            var parameter = Expression.Parameter(type, "p");

            // 文字列を指定してメソッドの情報を取得する
            MethodInfo Contains = typeof(string).GetMethod("Contains");

            //例)p.Nameの形式を作成
            var propertyAccess = Expression.MakeMemberAccess(parameter, property);

            //例)null != p.Nameの形式を作成
            var body0 = Expression.NotEqual(Expression.Constant(null), propertyAccess);

            //p.Name.Contains(keyword)の形式を作成
            var body1 = Expression.Call(propertyAccess,
                 Contains, Expression.Constant(keyword));

            //例)null != p.Name &amp;&amp; p.Name.Contains(keyword)の形式を作成
            var newBody = Expression.AndAlso(body0, body1);

            //例)p =&gt; null != p.Name &amp;&amp; p.Name.Contains(keyword)の形式を作成
            return Expression.Lambda&lt;Func&lt;Student, bool&gt;&gt;(newBody, parameter);

        }

    }

