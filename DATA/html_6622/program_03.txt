
namespace Rein.Functions.Layer{
    public class Linear: UnaryFunction{
        public Tensor Weight, Bias;

        public Linear(int inputSize, int outputSize, bool bias = true): base("Linear"){
            this.Weight = new Tensor(new int[]{inputSize, outputSize});

            if (bias){
                this.Bias = new Tensor(new int[]{outputSize});
            }

            this.Params = new Tensor[]{Weight, Bias};
        }

        public override Tensor[] Forward(Tensor[] tensors)
        {
            Tensor outTensor = F.Dot(tensor[0], this.Weight);

            if (this.Bias != null){
                if (outTensor.Shape.Count == 0){
                    outTensor += this.Bias;
                }else{
                    outTensor += this.Bias.Repeat(0, outTensor.Size / outTensor.Shape.Last());
                }
            }

            return outTensor;
        }

        public override void Backward()
        {
            // 何もしない
        }
    }
}

