More than 1 year has passed since last update.日本だけで使うプログラムなら、多言語対応の書き方は　一切　目にすることもないと思う。
見なくていいものは目に触れさせない、
そこらへん、Visual Studio / C#、　はたまた　オブジェクト指向プログラミング　というやつ は
よく出来てある……。ここは東京。　フランス人と　インド人と　日本人が　働いているとするぜ。私の書いたプログラムが　運悪く　ファイル書き込み時に　ファイルのロックに引っかかって　何度リトライしてもダメ、
諦めて　タイムアウトさせて　異常終了することにするとしよう。
SendMail の機能を使って フランスチーム、インドチーム、日本チームに　異常通知メールを飛ばすという状況を想像してくれだぜ。こんな感じで　ベタ書き　すれば　その場の用は足りるが、何と言ったらいいのだろう。
ソースコードが　１文字　でも増えるのは労力だ。
定時に帰りたいマンは　こんなことはしない。
というのも、テキスト は人類にとって便利だが、 テキストを扱う のはきっと人類が得意なものではない……。例えば、以下のようにする。文化を配列に入れておいてループで回し、
ループの中では　文化を切り替えて使う。翻訳の文章は、別のところに表を持っておく。別の表は、以下のような形になっているとしよう。Resources.ja-JP.resxResources.fr-FR.resxResources.resxここで、
Resources.ja-JP.resx には日本向けの、
Resources.fr-FR.resx にはフランス向けの、
Resources.resx にはアメリカ向けの言葉が入っているとするぜ。インド人はどこに行ったのかというと、英語でいいらしい。とりあえず、　英語（米国）　を共通言語としておこう。 Key 列は　英語（米国）　で書く。
あとは ja-JP を指定すれば 日本語テーブルの Value 列が、
fr-FR を指定すれば フランス語テーブルの Value 列が出てくる仕組みと考えれば　すっきりしてるだろ。en-US 、これは英語（米国）だが、を指定すれば　デフォルトのテーブルが出てくると思えだぜ。で、あとから言語を増やしたり減らしたりしたければ、 Resources.zh-CN.resx ファイルを追加したり、
Resources.fr-FR.resx ファイルを消したりすれば、文化を書いていた配列を修正する程度の手間で
対応でき……るという夢を　ひとまず見ておこう。Visual Studio 2017 という開発統合環境（IDE）があるが、機能拡張しなければ　便利ではない。
例えば ResXManager といった感じのフリーソフトをインストールするとしよう。すると、横一列に 文化 が並び、翻訳作業、あるいは　抜けチェック　が楽になるかもしれない。
モデル／ビュー／コントローラー　という言葉を聞いたことがあるなら、これは　ビュー　に当たる。
しかも、 [Translation] ボタンを押すと グーグル翻訳 と連携して １列を埋めてくれるかもしれない。「だろう」とか「しれない」というのは　サーバーからアクセス制限を食らったりといった　実践問題　が
いろいろ　あるから　期待を下げているわけだが、「ベタ書き」よりは　はるかにマシになるだろう。次に、ソースコードを改造している間に、ソースコードで使っていないリソース　が出てきて、
不要だから Resources.resx ファイルから消したい、ということも出てくるかもしれない。
自動でやってくれれば……、と思うものの Visual Studio 2017 に期待しすぎてはいけない。
NuGet とか Marketplace とか、プラグインをダウンロードする仕組みを使って
欲しいものは自分で探して勝手に導入するのが　流行りだぜ。例えば RESX-Unused-Finder を使って、使っていないリソースは消してしまおう。
ぼーっとしているときに　ファイルパスを間違えて　どこかで何かが消えているヒューマンミスも起こりえるが、
人気が出れば　誰かが　GUI　を改善してくれるだろう。これで多言語対応は　ばっちりだ……、と思うと　そうでもない。フリーソフトは　バグを避けながら使うものだぜ。
便利ではない Visual Studio 2017 にデフォルトで付いている「リソース」とかいうエディターを使う場面が出てくる。
それが Keyの変更 だぜ。Resources.resx ファイルを　フリーソフトでいじっても、C# のソースコードの方はリファクタリング（プロパティ名の変更）してくれない。
理屈は分かる。
.resx とかいう XML ファイルをいじるのは簡単でも、C# のソースコードのリファクタリングまでやってくれるかというと、
その作業は 全く別物なのかもしれない。（あるいは　欲しければ自分で作らなければならない）ところで　C# のソースを貼っておく。だいたいの 基本 を紹介した。変えたカルチャーを元に戻すために　Old 変数に古いのを一時退避しておいて後で使う　スワップ　とか使いこなして、
ログは英語、通知メールは自分の言語に切り替えるとか、そういうのやり始めるのは 応用 なんで説明しない。データベースに 通知メール受け取りユーザーや、そのユーザーの言語を覚えさせといて
ユーザーの追加に対応するとか 発展 なんで、要件を満たした後で　勝手に遊べだぜ。じゃあ、など、いろいろな　実践問題が出てくるので　１つ１つ　解決していって欲しい。
多分、フリーソフトの人気が上がって　利用者が儲かれば　コミュニティの誰かが直してくれると思うが……。また、 12, FEB と書いてあっても　わたしには　何かわからないし、 2019/02/12 と書いていても　何月か分からないし、
データベースに 年月日を 20190212 と 8桁で入れている日本企業があるとしても　何月か分からない。日付の 書式 をハードコーディングしていては　定時には帰れないだろう。
そんなときにも CultureInfo を使う。書式はハードコーディングせず、文化を指定すれば 勝手に変換されるように書いておく。参考。しかし、見た目だけ対応していても、日本はアメリカより９時間早い。
時差に対応する必要がある。　これも　ハードコーディングしていては　定時には帰れないだろう。そこで、日本時間を　いったん世界標準時に戻して、そこから　タイムゾーンを指定して　ずらす。
夏時間とか、　アメリカといっても東部と西部のどっちなのかとか、いっさい考えない。その結果、と時差も考慮してくれる。
アメリカの東なのか西なのかは　聞いておくといいのかもしれないが、めんどくさいんで　イギリスのタイムゾーンにしている。+09:00 というのは、グリニッジ天文台の時計から＋９時間ですよ、という意味なので、９を引けば　グリニッジ標準時に戻せる。
日本で　朝８時にメールが届く、ということは　グリニッジから見れば　昨日の２３時　にメールが届いている。
フランスから見れば　０時に届いていると分かる。　これで時差は　だいたい配慮できた。／／　ヒマがあれば　もっと書く。


