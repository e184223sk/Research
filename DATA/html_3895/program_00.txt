        /// &lt;summary&gt;
        /// The content of the child window to display as part of the popup.
        /// &lt;/summary&gt;
        public static readonly DependencyProperty WindowContentProperty =
            DependencyProperty.Register(
                "WindowContent",
                typeof(FrameworkElement),
                typeof(PopupWindowAction),
                new PropertyMetadata(null));

        /// &lt;summary&gt;
        /// The type of content of the child window to display as part of the popup.
        /// &lt;/summary&gt;
        public static readonly DependencyProperty WindowContentTypeProperty =
            DependencyProperty.Register(
                "WindowContentType",
                typeof(Type),
                typeof(PopupWindowAction),
                new PropertyMetadata(null));

        /// &lt;summary&gt;
        /// Checks if the WindowContent or its DataContext implements &lt;see cref="IInteractionRequestAware"/&gt;.
        /// If so, it sets the corresponding values.
        /// &lt;/summary&gt;
        /// &lt;param name="notification"&gt;The notification to be set as a DataContext in the HostWindow.&lt;/param&gt;
        /// &lt;param name="wrapperWindow"&gt;The HostWindow&lt;/param&gt;
        protected virtual void PrepareContentForWindow(INotification notification, Window wrapperWindow)
        {
            if (this.WindowContent != null)
            {
                // We set the WindowContent as the content of the window. 
                wrapperWindow.Content = this.WindowContent;
            }
            else if (this.WindowContentType != null)
            {
                wrapperWindow.Content = ServiceLocator.Current.GetInstance(this.WindowContentType);
            }
            else
            {
                return;
            }

            Action&lt;IInteractionRequestAware&gt; setNotificationAndClose = (iira) =&gt;
            {
                iira.Notification = notification;
                iira.FinishInteraction = () =&gt; wrapperWindow.Close();
            };

            MvvmHelpers.ViewAndViewModelAction(wrapperWindow.Content, setNotificationAndClose);
        }

