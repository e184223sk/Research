More than 3 years have passed since last update.先日学んだ Moq を使って、外部呼出しバリバリのコードを TDD するべく実装してみました。これは実際の PoC のプロジェクトで書いてみた簡単なコードです。まだ私は C# に練度がないので、TDD で回すことができていません。Moqをマスターして、TDDでないと体が受け付けなくするぞ！これが最初のコードです。いろいろ「不吉なにおい」がしますが、まずはテスタビリティを高めるための戦略を考えてみます。Mock の対象となりそうなのは、KeyVauleClient です。この中身をテストしても仕方がないし、実際 Azure 上にある KeyVault へのアクセスも避けたいところです。あと、KeyVaultClient のセットアップ部分は定型コードですし、ここを苦労してテストを書いてもあまり実りがないでしょう。私が考えたのは２つの方法で、という感じ。先日やった Autofac となんとなく相性がよさそうだし、シンプルなので、コンストラクタをチョイス。実際にコードを書いてみよう。Visual Studio を使ったテストコードは、プロジェクトを作って、プロジェクトを右クリックして、Build Dependencies -&gt; Project Dependencies で、プロジェクト間の依存を設定します。
その後、References &gt; Add References で同様に、依存関係を設定します。ついでに Live UnitTests &gt; Include を設定して、準備完了。今回は非同期のライブラリをモックします。基本は、KeyVaultClient のモックと、KeyVaultClient の戻り値の、Mock です。ここでは、SecretBundle というクラスのバンドル。このコードを書くのも結構いろいろ格闘しましたので、そのポイントを解説したいと思います。わたしは、GetSecretAsync のメソッドには一つしか引数を渡していませんが、ここでは、CancellationTokenを渡しています。Moq を使用する場合は、オプションの引数も渡してあげる必要があります。通常、async / await のメソッドを書いていると、勝手に Task にくるんで返してくれるみたいですが、Moq を使っているときは、Task で返すことを意識する必要があります。ここでは、Task.FromResultに目標のオブジェクトをくるんで返しています。Mock オブジェクトは、モック元のオブジェクトと型が異なるので、Object プロパティを呼んで、Mock 化したオブジェクトを渡すようにします。secretMock.Object がそれに該当します。Async Programming : Unit Testing Asynchronous Code を参考にしました。このテストでは、下記の部分で await をつけています。そうでないと、テストが終了する前に、メソッドが終了してしまうかもしれないからです。この部分ですが、public Task async TestGetSecret() だと、[TestMethod]が認識されなくなります。この順番で。俺カッケー！完璧にモックしちゃったよ。しかも、コンパイルもできるしな。じゃあテストすっか。ん、何よこのエラー！検索すっか。[Invalid setup on a non-virtual (overridable in VB) memberc# - Invalid setup on a non-virtual (overridable in VB) member - Stack Overflow
ん、解決策はって、「メソッドに virtual つけなさい」詰んだ、完全に詰んだ。せっかくここまでやったのに、、、orz たまたまテストのためのクラス設計について師匠に問い合わせていた。詰んだので詰んだことを師匠に報告しようとしたらこんな答えが返ってきた。KeyVaultHelperくらいのロジックだとテスト諦めると思いますねーえー、確かに労力に割が合わない！そのかわりKeyVaultHelperはインターフェース実装するようにして、こいつを使うクラスをテストするようにすると思いますあああああ！なるほど！！！師匠素晴らしすぎる、、、たしかに、このクラスを薄くして、Mock して、本体（ここでは、Azure Functions ）をしっかりテストすればいいんだ。労力的にそっちのほうが絶対いいな。というわけで、最終系。このクラスのテストはあきらめた。おわり。というわけで、私はこのクラスのテストはあきらめたわけですが、テスト駆動クラスタの皆様。もし、よりよい解決策やテストをうまく書く方法があれば是非コメントいただければと思います。


