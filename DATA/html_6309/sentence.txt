More than 3 years have passed since last update.AutofacとAutofac.Configurationを使用してASP.NET Coreで設定ファイルを使用したDIの設定を行います。設定ファイルを使用することでProduction、Developmentといった環境毎に使用するコンポーネントの変更が容易となります。また、設定ファイルでコンポーネントのコンストラクタ引数やプロパティの値を指定する際に、標準ではサポートされない型についての対応方法も記述します。このサンプルでは環境変数ASPNETCORE_ENVIRONMENTに応じてcomponents.jsonまたはcomponents.Development.jsonからコンポーネントの構築を行っています。Development環境ではIService実装としてDevelopmentServiceが使用され、それ以外ではProductionServiceが使用される設定となっており、どちらの実装が使用されているかはホーム画面で確認できるサンプルとなっています。Autofac.Configurationを使用すると以下のようなコードでJSONファイルを使用したコンテナへのコンポーネント登録が行えます。設定ファイルの例は以下の様になります。これはコードで書くと以下の内容と同じです。設定ファイルを使用したAutofacの設定方法詳細についてはJSON/XML Configurationを参照してください。ASP.NET CoreでのIServiceProviderの置換方法については以前の記事で解説しています。Autofac.Extensions.DependencyInjectionにはIServiceProviderとしてAutofacを使用するための拡張が用意されており、それを使用したコードは以下の様になります。ASP.NET Coreアプリケーションのテンプレートは、設定ファイルappsettings.jsonを環境に応じて変更する構成になっているかと思います。これと同様のことを行えばAutofacの設定ファイルについて環境に応じた物が使用できます。環境に応じた設定ファイルでのAutofacの構築とIServiceProviderの置換を組み合わせたコードは以下のようになります。設定ファイルを使用してコンポーネントの定義ではコンストラクタ引数やプロパティの値を指定することが可能です。ただし、Autofac.Configurationが標準ではサポートしていない型の項目への設定は例外となります。例えば、以下の様にbyte配列をコンストラクタ引数とするクラスの定義を行いたい場合、設定ファイルで「"token": [1, 2, 3]」の用に記述しても例外となります。Autofac.Configurationがサポートしていない型の設定を行いたい場合、TypeConverterを用意することで型変換を行っての設定が可能となります。例えばbyte配列を16進文字列で設定するようにしたければ、以下の様なTypeConverterを実装して適用先で宣言します。また、この時の設定ファイルの記述は以下のようになります。.NETでのDIというとGuice型のもので、コードを使ってコンテナの構築をするケースが多かったりするんじゃないかと思います(・ω・)ただ、設定ファイルを使って環境によって使用するコンポーネントを切り替えたいみたいなニーズも当然あるわけで、AutofacとAutofac.Configurationを使うと簡単にできるよ、っというのが今回のお話でした。そもそも、コードベースでのコンポーネントの構築も、規約ベースでのコンポーネントスキャンによる自動登録も、設定ファイルによるコンポーネントの登録も、用途に応じて組み合わせて使い分けるべきもので、どれかがあれば他はいらないとかそういう種のものじゃないと思いますのだ(´・ω・`)


