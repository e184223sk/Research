More than 3 years have passed since last update.DateTime を使用するコードをテスト可能なイイ感じにします。DateTime が挙動にかかわるとユニットテストがしにくくなります。
時刻に応じて挨拶を返すサービスクラスを例に考えてみます。現在時刻に応じて正しく文字列が返るかテストがしたいけど、できない...
これでは幸せになれません...。dependency injection（依存性注入）はとても大雑把に説明すると、依存するオブジェクトをクラスの外から注入することです。
外から注入することで、動的に動作を変えられるようになります。今回の場合、 DateTime が GreetingService の外から変えられればいいわけですね。まず、IDateTime インタフェースを定義します。
DI の詳細の記事ではないので省略しますが、実装を隠ぺいするためです。
GreetingService が具体的な実装ではなく、 IDateTime インタフェースのみに依存するようにします。次に IDateTime を実装したクラスを作成します。
今回はサーバーシステムの現在時刻を返すクラスを作成します。最後に GreetingService をリファクタします。
IDateTime を実装したクラスをコンストラクターの引数を通じて受け取るだけです。インターフェースを使用したことで、実装を簡単に差し替えることができます。
IDateTime を実装したクラスなら DB 時刻を返す DatabaseDateTime でもなんでも DI できます。
後述する ASP.NET Core のビルトイン DI コンテナーやモックライブラリ Moq もインターフェースを使用します。xUnit でテストを行いました。
Moq でモックを用意しましたが、IDateTime が単純なのでフェイククラスを作成してもＯＫかと。時刻を簡単に変更してテストでき、幸せになれましたDI できるようになったので ASP.NET Core のビルトイン DI コンテナーで使用してみます。
GreetingService も DI できるようにインターフェースを実装し、 API の Controller クラスで利用します。Startup.cs の ConfigureServices メソッドで DI コンテナに登録します。それでは実際に Web API で使ってみます。バッチリ動きました！


