More than 3 years have passed since last update.C# とASP.NET Core でつくります。ASP.NET Core Web APIのプロジェクトをつくります。
Visual C# &gt; Web &gt; .NET Core &gt; ASP.NET Core Web アプリケーション &gt; APIソリューションにXUnitのプロジェクトを追加します。
Visual C# &gt; Web &gt; .NET Core &gt; xUnitテスト プロジェクトFizzBuzzServiceを作成します。
あとからWeb APIのコントローラーにDIします。まず、FizzBuzzApiにインターフェースを作成します。
拡張が強くになる、Moqでモックアップが簡単といったメリットがあります。インターフェースを実装したFizzBuzzServiceクラスを作成します。
public class FizzBuzzService : IFizzBuzz { }まで書きCtrl+.を押すと以下のようなスケルトンが自動実装されます。テスト駆動開発では テストを書く &gt; テストをパスする最小限のコードを書く &gt; リファクタリングする を繰り返します。FizzBuzzApiTestの参照にFizzBuzzApiを追加します。
Servicesフォルダを作成し、FizzBuzzServiceTest.csを作成します。過程を省略しますが、以下のようになりました。テストはすべてパスしています。ASP.NET Core には DI コンテナーがビルトインされています。
Startup.cs の ConfigureServicesメソッドを編集します。
FizzBuzzServiceに依存するクラスのコンストラクターの引数にFizzBuzzServiceのインスタンスが渡されます。HTTP要求を受け付けるコントローラーを実装します。アプリを起動したらPostmanでリクエストを送って動確します。
powershell でも。（powershell がいつの間にか Linux や mac 対応のクロスプラットフォームになっていました。PowerShell Core というそうです。変数などはすべて .NET のオブジェクトであり、またコードネームがモナドというように関数型プログラミングが可能とモダンです。さすが名前に "power" がついていたり次世代 shell とか呼ばれるだけある。。。）NSwag と Swashbuckle を使った方法がありますが、NSwag を選択します。
Visual Studio のパッケージマネージャーコンソールで以下のコマンドを入力します。Startup.cs の Configure メソッドに UseSwaggerUi を追加します。アプリを起動し http://localhost:&lt;port&gt;/swagger に移動すると、Swagger UI が表示されます。 
http://localhost:&lt;port&gt;/swagger/v1/swagger.json に移動すると、Swagger 仕様が表示されます。以下の目標をすべて達成することができました。


