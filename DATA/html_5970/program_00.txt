private Vector3 Calc()
{
    Quaternion r = transform.rotation;
    float x = r.x;
    float y = r.y;
    float z = r.z;
    float w = r.w;

    float x2 = x * x;
    float y2 = y * y;
    float z2 = z * z;

    float xy = x * y;
    float xz = x * z;
    float yz = y * z;
    float wx = w * x;
    float wy = w * y;
    float wz = w * z;

    // 1 - 2y^2 - 2z^2
    float m00 = 1f - (2f * y2) - (2f * z2);

    // 2xy + 2wz
    float m01 = (2f * xy) + (2f * wz);

    // 2xy - 2wz
    float m10 = (2f * xy) - (2f * wz);

    // 1 - 2x^2 - 2z^2
    float m11 = 1f - (2f * x2) - (2f * z2);

    // 2xz + 2wy
    float m20 = (2f * xz) + (2f * wy);

    // 2yz+2wx
    float m21 = (2f * yz) - (2f * wx);

    // 1 - 2x^2 - 2y^2
    float m22 = 1f - (2f * x2) - (2f * y2);


    float tx, ty, tz;

    if (Mathf.Approximately(m21, 1f))
    {
        tx = Mathf.PI / 2f;
        ty = 0;
        tz = Mathf.Atan2(m10, m00);
    }
    else if (Mathf.Approximately(m21, -1f))
    {
        tx = -Mathf.PI / 2f;
        ty = 0;
        tz = Mathf.Atan2(m10, m00);
    }
    else
    {
        tx = Mathf.Asin(-m21);
        ty = Mathf.Atan2(m20, m22);
        tz = Mathf.Atan2(m01, m11);
    }

    tx *= Mathf.Rad2Deg;
    ty *= Mathf.Rad2Deg;
    tz *= Mathf.Rad2Deg;

    return new Vector3(tx, ty, tz);
}

