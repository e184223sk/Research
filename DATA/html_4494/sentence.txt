More than 1 year has passed since last update.Entity Frameworkで、DBの検索をLINQではなくSQLを使用する方法についてのメモです。LINQ文とSQL文を両方使用する際の、LINQ文に似た方法でSQLを発行させるメモです。
またSELECT文のみの記載です。
間違いや勘違いに関しましてはご指摘いただけると幸いです。Entity Frameworkを使用するSQL発行方法について記載します。
DBファーストで「ADO.NET Entity Data Model」で既に作成されているDBを取り込み、DbContextを継承したDefaultConnectionクラスからDBを使用します。まず全体を記載します。次に上から記載します。DBに接続するDefaultConnectionクラスを呼び出し、ログをとるようにします。
これは書籍『ASP.NET MVC 5 実践プログラミング』に載っていた方法です。発行したいSQLをStringBuilder型で記載しています。
StringBuilder型を使用している理由は、SQLは文字の量が多くなりやすいため、StringBuilder型で文字列処理を速くさせるためです。2018/10/24追記
コメントにてご指摘いただきました通り、記載したようなSQL文の一発書きの場合、StringBuilder型を使用せず、string型で使用するほうが早くなります。
StringBuilder型は文字列操作を行うことに特化したクラスですので、ベースとなるSQLに、条件に応じてSQL文の追加や挿入が発生するという想定で使用したのですが、ここらへんはまだ勉強不足で申し訳ないです。この時、SQL文にある@personIDのように、@パラメータ名と記載した箇所に入るパラメーターを用意します。
可変の値をSQL文に追加する方法はいくつかありますが、ここではSqlParameterクラスを使用して、当てはめるパラメーター名を指定し、使用する値をセットしています。使用したSqlParameterクラスのメソッドの公式ドキュメントは以下です。
SqlParameter(string parameterName, object value)Database.SqlQuery&lt;TElement&gt;メソッドを使用してDbRawSqlQuery&lt;TElement&gt;を取得します。DbRawSqlQuery&lt;TElement&gt;ではまだSQLは発行されていません。LINQでいうところのIQueryable&lt;T&gt;を想像していただくとわかりやすいかもしれません。IQueryable&lt;T&gt;と同じくToList()やforeach文を使用することでSQLが発行されます。
ただIQueryable&lt;T&gt;とは異なり、SQLの発行は一度のみで、遅延評価は行われません。また一度発行したDbRawSqlQuery&lt;TElement&gt;を再度発行することはできません。SQLを発行させる方法はいくつかありますが、ログを取りたいためにEntity Frameworkを使用した形です。もっと良い方法があれば教えていただけると助かります。


