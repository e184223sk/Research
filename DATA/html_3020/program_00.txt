using System;
using System.Linq;
using System.Collections.Generic;

namespace StalinSort
{
    static class StalinSortExtension
    {
        public static IOrderedEnumerable&lt;TSource&gt; StalinSortBy&lt;TSource, TKey&gt;(
            this IEnumerable&lt;TSource&gt; source,
            Func&lt;TSource, TKey&gt; keySelector)
        {
            return source
                .StalinSort(keySelector, null, false)
                .OrderBy(keySelector);
        }

        public static IOrderedEnumerable&lt;TSource&gt; StalinSortBy&lt;TSource, TKey&gt;(
            this IEnumerable&lt;TSource&gt; source,
            Func&lt;TSource, TKey&gt; keySelector,
            IComparer&lt;TKey&gt; comparer)
        {
            return source
                .StalinSort(keySelector, comparer, false)
                .OrderBy(keySelector, comparer);
        }

        public static IOrderedEnumerable&lt;TSource&gt; StalinSortByDescending&lt;TSource, TKey&gt;(
            this IEnumerable&lt;TSource&gt; source,
            Func&lt;TSource, TKey&gt; keySelector)
        {
            return source
                .StalinSort(keySelector, null, true)
                .OrderByDescending(keySelector);
        }

        public static IOrderedEnumerable&lt;TSource&gt; StalinSortByDescending&lt;TSource, TKey&gt;(
            this IEnumerable&lt;TSource&gt; source,
            Func&lt;TSource, TKey&gt; keySelector,
            IComparer&lt;TKey&gt; comparer)
        {
            return source
                .StalinSort(keySelector, comparer, true)
                .OrderByDescending(keySelector, comparer);
        }

        private static IEnumerable&lt;TSource&gt; StalinSort&lt;TSource, TKey&gt;(
            this IEnumerable&lt;TSource&gt; source,
            Func&lt;TSource, TKey&gt; keySelector,
            IComparer&lt;TKey&gt; comparer,
            bool descending)
        {
            using var iterator = source.GetEnumerator();
            if (iterator.MoveNext())
            {
                var c = comparer ?? Comparer&lt;TKey&gt;.Default;
                TKey last = keySelector(iterator.Current);
                yield return iterator.Current;
                while (iterator.MoveNext())
                {
                    TKey current = keySelector(iterator.Current);
                    bool condition = descending ? c.Compare(last, current) &gt;= 0 : c.Compare(last, current) &lt;= 0;
                    if (condition)
                    {
                        last = current;
                        yield return iterator.Current;
                    }
                }
            }
        }
    }
}

