using System.Threading;
using System.Threading.Tasks;
using System.IO;

public class TimeoutIOUtils
{
  //タイムアウト秒
  public static int TimeoutSeconds{ get; set; } = 3;

  //ファイル有無
  public static bool FileExists(string path)
  {
    return TimeoutCore(() =&gt; File.Exists(path));
  }

  //ディレクトリ有無
  public static bool DirectoryExists(string path)
  {
    return TimeoutCore(() =&gt; Directory.Exists(path));
  }

  //タイムアウト処理部分
  private static bool TimeoutCore(Func&lt;bool&gt; existFunction)
  {
    try
    {
      var source = new CancellationTokenSource();
      source.CancelAfter(TimeoutSeconds * 1000);
      var task = Task.Factory.StartNew(() =&gt; existFunction(), source.Token);
      task.Wait(source.Token);
      return task.Result;
    }
    catch (OperationCanceledException ex)
    {
      return false;
    }
    catch (Exception ex)
    {
      throw;
    }
  }
}


