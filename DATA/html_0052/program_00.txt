using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using SalaryManagementSystem.Data;

namespace SalaryManagementSystem.Models
{
    public class SMSUserStore : IUserPasswordStore&lt;SMSUser&gt;
    {
        private ApplicationDbContext _context;
        private static List&lt;SMSUser&gt; Users = new List&lt;SMSUser&gt;();

        public SMSUserStore(ApplicationDbContext context)
        {
            _context = context;
        }
        public Task&lt;IdentityResult&gt; CreateAsync(SMSUser user, CancellationToken cancellationToken)
        {
            _context.SMSUsers.Add(user);
            _context.SaveChangesAsync();
            return (Task&lt;IdentityResult&gt;)Task.Delay(0);
        }

        public Task&lt;IdentityResult&gt; DeleteAsync(SMSUser user, CancellationToken cancellationToken)
        {
            _context.SMSUsers.Remove(user);
            _context.SaveChangesAsync();
            return (Task&lt;IdentityResult&gt;)Task.Delay(0);
        }

        public void Dispose()
        {
            // 何もしない
        }

        public Task&lt;SMSUser&gt; FindByIdAsync(string userId, CancellationToken cancellationToken)
        {
            return _context.SMSUsers.FirstOrDefaultAsync(u =&gt; u.SMSUserId == userId, cancellationToken);
        }

        public Task&lt;SMSUser&gt; FindByNameAsync(string normalizedUserName, CancellationToken cancellationToken)
        {
            return _context.SMSUsers.FirstOrDefaultAsync(u =&gt; u.SMSUserName.ToUpper() == normalizedUserName, cancellationToken);
        }

        public Task&lt;string&gt; GetNormalizedUserNameAsync(SMSUser user, CancellationToken cancellationToken)
        {
            return Task.Run(() =&gt; user.SMSUserName.ToUpper(), cancellationToken);
        }

        public Task&lt;string&gt; GetPasswordHashAsync(SMSUser user, CancellationToken cancellationToken)
        {
            return Task.Run(() =&gt; user.Password, cancellationToken);
        }

        public Task&lt;string&gt; GetUserIdAsync(SMSUser user, CancellationToken cancellationToken)
        {
            return Task.Run(() =&gt; user.SMSUserId, cancellationToken);
        }

        public Task&lt;string&gt; GetUserNameAsync(SMSUser user, CancellationToken cancellationToken)
        {
            return Task.Run(() =&gt; user.SMSUserName, cancellationToken);
        }

        public Task&lt;bool&gt; HasPasswordAsync(SMSUser user, CancellationToken cancellationToken)
        {
            return Task.Run(() =&gt; string.IsNullOrEmpty(user?.Password), cancellationToken);
        }

        public Task SetNormalizedUserNameAsync(SMSUser user, string normalizedName, CancellationToken cancellationToken)
        {
            throw new NotSupportedException("NormalizedUserName is not supported.");
        }

        public Task SetPasswordHashAsync(SMSUser user, string passwordHash, CancellationToken cancellationToken)
        {
            user.Password = passwordHash;
            return (Task&lt;IdentityResult&gt;)Task.Delay(0);
        }

        public Task SetUserNameAsync(SMSUser user, string userName, CancellationToken cancellationToken)
        {
            user.SMSUserName = userName;
            return (Task&lt;IdentityResult&gt;)Task.Delay(0);
        }

        public Task&lt;IdentityResult&gt; UpdateAsync(SMSUser user, CancellationToken cancellationToken)
        {
            _context.SMSUsers.Update(user);
            _context.SaveChangesAsync();
            return (Task&lt;IdentityResult&gt;)Task.Delay(0);
        }
    }
}

