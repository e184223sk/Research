アカウント認証を実装します。既存のプロジェクトにASP.NET Identityを導入する方法はないようです。。。
ダミーで認証ありのプロジェクトを作って、そこから必要なものをコピーして編集して…みたいな方法しかなかったです。
さすがに面倒くさすぎるので、最初から作り直すことにしました。認証を「個別のユーザアカウント」で作成します。
NuGetでNpgsqlをインストールします。
上記で作成したプロジェクトともともとのプロジェクトの差分を取り込みます。（第2回参照）appsettings.jsonのDefaultConnectionをPostgresに戻します。Startup.csのConfigureServicesのUseSqlServerをUseNpgsqlに戻します。自分で作ったファイルたちをコピーします。
コントローラ、モデル、ビュー等。（WinMergeで差分を見つけていきました）次に自前のDbContextからApplicationDbContextに一部記述を移植して、自前のDbContextを削除、自前のDbContextを参照している個所をApplicationDbContextに書き換えます。最後に、2つあるMigrationsフォルダを丸ごと削除します。
Data配下とプロジェクト直下にあります。パッケージマネージャコンソールから、Add-MigrationとUpdate-DataBaseコマンドを実行します。
認証用のテーブルを作るためのマイグレーションが必要なのですが、上記コマンドを実行するためには一度既存のマイグレーションによる生成ファイルは削除する必要がありました。
そのため、Migrationsフォルダを削除しています。
また、DbContextは1つに統合できたので統合しました。マイグレーションのコマンドで、モデルに対応するテーブル（Salaryテーブル）は既にあるので警告が出ます。
このテーブルだけでなく全部のテーブル作成がロールバックされてしまうので、Salaryテーブルは削除して、実行します。
実行できると、認証機能用のテーブルができます。
右上にRegisterとLoginが表示されるようになりました。
例によって日本語化しておきます。ログイン周りの定義は_Layout.cshtmlから呼び出している_LoginPartical.cshtmlに定義されています。まずアカウント登録の画面に遷移すると下記のような画面になります。
メールアドレスを入力するようになっていますが、面倒なのでユーザIDにしたいです。
あと右側の文言は「外部サービス連携は使えませんよ」的なメッセージなので消したいです。
適当に入力しRegisterを押します。
…先に言ってほしいやつですね。この辺を右側に書きましょうか。
登録が完了しました。
ログインしましょう。
ログイン失敗しました。どうやらメール認証しないとダメみたいですね。
メール認証…いったんオフにしたいですね…
今回はテーブルデータを更新して、認証したことにします。
AspNetUsersテーブルのEmailConfirmedをtrueにします。
もう一度ログイン。ログインできました。メールアドレス＝ユーザIDはちょっと気に入らないですね。
・メールアドレスとパスワードではなく、IDとパスワードにしたい。（あと表示名）
　→つまり独自のユーザー情報モデルを作る
・登録画面の右のペインはパスワードのルールに書き換えるこちらを参考にします。
https://kiyokura.hateblo.jp/entry/2014/06/23/010749ユーザ情報モデルはSMSUserというクラスにします。ASP.NET CoreだとIUserではなくIdentityUserというインターフェースになります。ユーザストアクラスを作ります。雰囲気で実装しました。よくわかっていません…。これに伴い、DBContextも修正しています。
継承クラスをIdentityDbContext→DbContextに変更し、
SMSUsersを追加しました。最後にStartUp.csを修正します。テーブル（SMSUser）がないので、作ります。
なぜかスキャフォールディングでモデルクラスとして選べなかったので、手動で作りました。
長くなってきたので次回に持ち越します。
「あっこいつ間違っとるな…」と思ったらコメントで教えていただけるととても助かります…。


