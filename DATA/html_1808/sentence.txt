More than 1 year has passed since last update.ASP.NET MVC で多言語対応をこころみてみます。多言語対応だけシンプルにこころみます。デモはこちら。オライリー本を読んだので、前回より若干洗練されています。(だといいな)前回は Accept-Language に応じた言語切り替えを扱いましたが、今回は URL によって切り替わるパターンも扱います。興味のあるパターンだけ見てもらえればいいと思います。完成品のプロジェクトはここ↓においてあります。デモはこちら。(デモは予告なく閉じることがあります。)/Home/Index についてはこう。/Home/About と /Home/Contact についてはこう。今回使うプロジェクトは次のように New しました。リソースファイルは拡張子 resx のファイルですね。ここに言語ごとにテキストを書いておきます。リソースファイルはという名称でつくります。デフォルトの言語リソースと、多言語のリソースは同じ階層に並べましょう。リソースファイルのアクセス修飾子は忘れず Public にします。(だいじ)場所は?場所はどこでもよさそうです。私はたとえば /Home/Index 用のリソースは Resources/Home/Index/I18n.resx みたいなフォルダ階層をつくって置きます。実際に Razor ファイル(cshtml ファイル)で使うときの表記が @I18n.PageTitle みたいになって見やすいからです。 I18n は internationalization の略です。カルチャ?カルチャというのは、 http リクエストヘッダ Accept-Language の値のことみたいです。サイトの閲覧者さんが、何語を求めているかということですね。 C# 的には、 CurrentCulture と CurrentUICulture にそれをセットすれば、上で作った各リソースが自動で呼び出されます。ふたつ挙げましたが、今回はリソースの切り替えしか扱わないので CurrentUICulture しか関係ないです。resx なくない?ないですね。ないときもあるみたいです。そういうときはリストにとらわれず resx の拡張子を手打ちしてファイルを作成すれば OK です。(えぇー?!
あるいはすでにある resx ファイルをどこかから見つけてきて、 Add Existing Item から追加することもできます。リソースに書いたテキストを使うには?String1 というテキストを用意したなら……こういうふうに呼び出します。/Home/Index を Accept-Language によってリソースが切り替わるページにします。まず /Home/Index の View(cshtml) がリソースを使うようになっていないと話になりません。こう書けばとりあえずデフォルトのリソースを使ってくれます。 Accept-Language に応じたリソースを使って欲しいときはトップディレクトリの Web.config の system.web タグ内に &lt;globalization culture="auto" uiCulture="auto" /&gt; を記述します。リクエスト・ヘッダの Accept-Language に応じて、自動で CurrentUICulture が変わるようになります。 CurrentUICulture に応じたリソースが呼び出されるので、これで /Home/Index は完成です。Accept-Language はどう変更する?/Home/About を URL によってリソースが切り替わるページにします。 /Home/About の View(cshtml) を次のようにしておきます。リソースはあらかじめ用意してください。そもそも ASP.NET MVC はデフォルトではそんな URL を受け付けません。 RouteConfig.cs を見ればわかるように、受け付けるのは {controller}/{action} という形式だけです。 {culture}/{controller}/{action} も受け付けるように、設定します。/en/Home/About みたいな URL でアクセスされたら、コントローラで culture = "en" を受け取れるようになりました。受け取った culture を CurrentUICulture にセットすれば、それに応じたリソースが呼ばれます。ヨシ!で、どこでセットするかなんですが、コントローラの各アクションメソッド内ではやりたくないので、アクション実行前に呼び出されるメソッド OnActionExecuting にその処理を追加しましょう。そしてこの OnActionExecuting を /Home/About に適用するには、アクションメソッドにこんなふうにくっつければ OK です。これで /Home/About も完成です。デモページでは /Home/Contact も同様の実装にしてあります。実際のところ、アクションメソッド実行前にやってほしいことはもっとあります。そのへんを盛り込んでおきます。次のように Html.ActionLink を書くことで、現在の URL に /ja や /en を付与したページへ遷移するリンクを作れます。もともとある Index, About, Contact へのリンクはそのままで OK です。new { culture = "ja" } とかをつけなくても自動で /ja/Home/About みたいなリンクになります。 ASP.NET MVC は現在の MapRoute 情報とアクションパラメータの値を保持するためです。ASP.NET Core が気になります。 Mac や Visual Studio Code で C# が書けるなんて素敵すぎる。


