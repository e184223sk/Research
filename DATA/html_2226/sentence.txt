More than 1 year has passed since last update.コメント欄にてalbireoさんにシングルトンの実装の仕方などについてご指摘いただきましたので、
そちらも一緒にお読みいただければと思います。シングルトンクラスを作り、そのインスタンスを外部のクラスから取得しようとしたら、下記の画像のような例外が発生した。
原因はシングルトンクラスに書いていたlog4netのロガーインスタンスを取得するコード(GetLoggerメソッド)にあった。
色々すっ飛ばしてこの話の結論を先に述べると、「ロガーインスタンス取得コードはフィールドの一番最初に書きましょう」。
もし同じ問題ではまっている方がいればとの思いで記事を書いた（いるかな・・・）。
※シングルトンパターンについて正しくない説明があるかもしれませんので、その点はご了承いただいたうえでお読みください。
・IDEはVisual Studio 2017を使用このサイト(.NET TIPS：シングルトンパターンを実現するには？［C#／VB］)を参考にして、シングルトンクラスを作成し、ログ出力するためロガーインスタンス取得コードを書いた。下記がそのシングルトンクラス。　
そして、シングルトンクラスを利用する側のクラスで、シングルトンインスタンス取得コードを書いた。　実行したら、落ちた。
問題のコードは下図の矢印の順序で処理が行われている。
まずGetInstanceメソッドを呼び出すと、シングルトンクラス内部ではシングルトンインスタンスを取得しようとする。
その際にシングルトンインスタンスがnewされ、したがってシングルトンクラスのコンストラクタに処理が移る。
ここからが問題。
今回はコンストラクタでロガーを使ったログ出力を行おうとした。
しかしこの時点でロガーインスタンスの取得は実行されていないため_loggerはNullの状態だったのだ。
まだ取得してないはずの_loggerを使おうとしたから、「オブジェクト参照がオブジェクトインスタンスに設定されていません」と怒られたのであった・・・。シングルトンクラスにおいて、ロガーインスタンス取得コードを自身のインスタンス初期化コードより先に書いてあげ、無事に動いた。


