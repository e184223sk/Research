仕事でOKボタンを押したらシャットダウンする自作windowを作る機会があったのですが、
「windowが表示されたときにEnterキー押したら、OKボタンのクリックイベントが実行されるようにしてね」と言われました。
言われるまではクリックでok等のボタンイベントが正常か確認していましたが、キーイベントでの挙動は見ていなかったのでこの機会に少しまとめてみました。IsDefaultとIsCancelという便利なプロパティがwpfのボタンには存在するようなので、それを使ってみます。テキストボックスを1つと、ボタンを5つ並べました。default(okCancel)と書かれたボタンにIsDefault=Trueを割り当て、escape(ync)と書かれたボタンにIsCancel=Trueを割り当てています。各ボタンにはクリックイベントを割り当てていて、show NodDefWin以外はメッセージボックスを表示させています。default(okCancel) と書かれたボタンの IsDefault=True にしているので、アプリ起動時にEnterを押すとこのボタンのClickイベントが実行されて、MessageBoxButton.OKCancelのメッセージボックスが表示されます。MessageBoxButton.OKCancelのメッセージボックスは OKボタンがIsDefault=Trueで キャンセルボタンがIsCancel=Trueになっています。
ですので、Enterを押すとテキストブロックにOKが表示され、Escapeを押すとCancelが表示されます。テキストブロックの文字がCancelになっていますね。escapeキーを押すと IsCancel=trueにしているescape(ync)を表示しているボタンのclickイベントが実行されます。MessageBoxButton.YesNoCancel  で表示しているメッセージボックスも デフォルトでYes、EscapeでCancelが選択されるようです。MessageBoxButton.OKのメッセージボックスは デフォルト・Escape共にtrueのようで、Enter・escapeどちらでもokが選択されます。MessageBoxButton.YesNoのメッセージボックスは デフォルトでyesが選択されるようですが、Escapeでは反応がありません。IsCancelというプロパティ名なので、キャンセルボタンがない場合は基本的にはtrueにしないほうがいいようです。escapeを押してもcloseしてくれないメッセージボックス。show NodefWinボタンで表示する自作windowはボタンを2つ並べているwindowです。Button_Closeイベントはthis.Close()のみです。IsDefaultもIsCancelもtrueにしていないので、Enter・Escapeキーを押しても反応がありません。まぁ、当然ですね。ということで自作windowでOK・キャンセルボタンを設置するときはIsDefaultとIsCancelプロパティを使ってあげようというお話でした。windowsの仕様に倣うのであれば、okタイプのボタンならDefault=Trueにして、キャンセルのボタンならIsCancel=Trueにしたほうがいいと改めて感じました。・・・評価仕様でこういう確認見たことないな。


