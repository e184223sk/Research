using System;
using System.Diagnostics;
using System.Linq;
using System.Reflection;

namespace PlayGround
{
    using MyReflection;

    class Program
    {
        static void Main(string[] args)
        {
            var sw = new Stopwatch();
            var N = 1;


            sw.Restart();
            // Reflection
            for (var i = 0; i &lt; N; i++)
            {
                var str = "";
                // MyReflection名前空間のNameGettableを実装しているクラスすべてを取る
                var instances = from type in Assembly.GetExecutingAssembly().GetTypes()
                                where type.Namespace == nameof(MyReflection) &amp;&amp; type.IsClass &amp;&amp; type.GetInterfaces().Contains(typeof(NameGettable))
                                select Activator.CreateInstance(type) as NameGettable;
                foreach (var instance in instances)
                {
                    str = instance.Name; // なにかさせる
                }
            }
            Console.WriteLine(sw.Elapsed);

            sw.Restart();
            // not Reflection
            for (var i = 0; i &lt; N; i++)
            {
                var str = "";
                var instances = new NameGettable[] { new HogeA(), new HogeB() };
                foreach (var instance in instances)
                {
                    str = instance.Name; // なにかさせる
                }
            }
            Console.WriteLine(sw.Elapsed);

            Console.Read();
        }
    }
}

namespace MyReflection
{
    interface NameGettable
    {
        string Name { get; }
    }

    class HogeA : NameGettable
    {
        public string Name { get { return nameof(HogeA); } }
    }

    class HogeB : NameGettable
    {
        public string Name { get { return nameof(HogeB); } }
    }
}

