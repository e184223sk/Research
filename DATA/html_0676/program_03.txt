
public enum OneEventEnumAttribute
{
    Dami = 0,
    Fire = 1,
    Water = 2,
    Wind = 3,
    FireWater = 4,
    WaterWind = 5,
    WindFire = 6,
    FireWaterWind = 7,
}

public static partial class OneEventEnumAttributeExtend
{
    public static bool Contains(this OneEventEnumAttribute param, OneEventEnumAttribute target)
    {
        var thisAttributes = param.ConvertSingleAttributeArray();
        var targetAttributes = target.ConvertSingleAttributeArray();

        foreach (var targetAttribute in targetAttributes)
        {
            foreach (var thisAttribute in thisAttributes)
            {
                if (targetAttribute == thisAttribute)
                {
                    return true;
                }
            }
        }

        return false;
    }

    public static float GetDamageRate(this OneEventEnumAttribute param, OneEventEnumAttribute target)
    {
        var thisAttributes = param.ConvertSingleAttributeArray();
        var targetAttributes = target.ConvertSingleAttributeArray();

        int counta = 0;
        float sumRate = 0;
        foreach (var targetAttribute in targetAttributes)
        {
            foreach (var thisAttribute in thisAttributes)
            {
                sumRate += GetSingleDamageRate(thisAttribute, targetAttribute);
                counta++;
            }
        }

        return sumRate / counta;
    }

    private static float GetSingleDamageRate(this OneEventEnumAttribute param, OneEventEnumAttribute target)
    {
        if (param == target)
        {
            return 1f;
        }

        if (param.IsStrongFor(target))
        {
            return 1.5f;
        }

        return 0.5f;
    }

    private static bool IsStrongFor(this OneEventEnumAttribute param, OneEventEnumAttribute target)
    {
        if (param == target)
        {
            return false;
        }

        switch (param)
        {
            case OneEventEnumAttribute.Fire:
                return target == OneEventEnumAttribute.Wind;
            case OneEventEnumAttribute.Water:
                return target == OneEventEnumAttribute.Fire;
            case OneEventEnumAttribute.Wind:
                return target == OneEventEnumAttribute.Water;
            default:
                throw new ArgumentOutOfRangeException(nameof(param), param, null);
        }
    }

    private static OneEventEnumAttribute[] ConvertSingleAttributeArray(this OneEventEnumAttribute param)
    {
        switch (param)
        {
            case OneEventEnumAttribute.Dami:
                return new OneEventEnumAttribute[0];
            case OneEventEnumAttribute.Fire:
                return new OneEventEnumAttribute[1] {OneEventEnumAttribute.Fire};
            case OneEventEnumAttribute.Water:
                return new OneEventEnumAttribute[1] {OneEventEnumAttribute.Water};
            case OneEventEnumAttribute.Wind:
                return new OneEventEnumAttribute[1] {OneEventEnumAttribute.Wind};
            case OneEventEnumAttribute.FireWater:
                return new OneEventEnumAttribute[2] {OneEventEnumAttribute.Fire, OneEventEnumAttribute.Water};
            case OneEventEnumAttribute.WaterWind:
                return new OneEventEnumAttribute[2] {OneEventEnumAttribute.Water, OneEventEnumAttribute.Wind};
            case OneEventEnumAttribute.WindFire:
                return new OneEventEnumAttribute[2] {OneEventEnumAttribute.Wind, OneEventEnumAttribute.Fire};
            case OneEventEnumAttribute.FireWaterWind:
                return new OneEventEnumAttribute[3]
                    {OneEventEnumAttribute.Fire, OneEventEnumAttribute.Water, OneEventEnumAttribute.Wind};
            default:
                throw new ArgumentOutOfRangeException(nameof(param), param, null);
        }
    }
}

