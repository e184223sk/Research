
using NUnit.Framework;


public class OneEventEnumAttributeTest
{
    [Test]
    public void TestGetDamageRate()
    {
        OneEventEnumAttribute[] attackerAttributes = new OneEventEnumAttribute[7]
        {
            OneEventEnumAttribute.Fire, OneEventEnumAttribute.Water, OneEventEnumAttribute.Wind,
            OneEventEnumAttribute.FireWater, OneEventEnumAttribute.WaterWind, OneEventEnumAttribute.WindFire,
            OneEventEnumAttribute.FireWaterWind
        };
        OneEventEnumAttribute[] targetAttributes = new OneEventEnumAttribute[7]
        {
            OneEventEnumAttribute.Fire, OneEventEnumAttribute.Water, OneEventEnumAttribute.Wind,
            OneEventEnumAttribute.FireWater, OneEventEnumAttribute.WaterWind, OneEventEnumAttribute.WindFire,
            OneEventEnumAttribute.FireWaterWind
        };

        foreach (var attackerAttribute in attackerAttributes)
        {
            foreach (var targetAttribute in targetAttributes)
            {
                var expectedResult = new OneEventAttributeDamageLogic().Caluculate(attackerAttribute, targetAttribute);
                var damageRate = attackerAttribute.GetDamageRate(targetAttribute);
                Assert.AreEqual(expectedResult, damageRate, "from:" + attackerAttribute + " to:" + targetAttribute);
            }
        }
    }

    [Test]
    public void TestContains()
    {
        OneEventEnumAttribute[] attackerAttributes = new OneEventEnumAttribute[7]
        {
            OneEventEnumAttribute.Fire, OneEventEnumAttribute.Water, OneEventEnumAttribute.Wind,
            OneEventEnumAttribute.FireWater, OneEventEnumAttribute.WaterWind, OneEventEnumAttribute.WindFire,
            OneEventEnumAttribute.FireWaterWind
        };
        OneEventEnumAttribute[] targetAttributes = new OneEventEnumAttribute[7]
        {
            OneEventEnumAttribute.Fire, OneEventEnumAttribute.Water, OneEventEnumAttribute.Wind,
            OneEventEnumAttribute.FireWater, OneEventEnumAttribute.WaterWind, OneEventEnumAttribute.WindFire,
            OneEventEnumAttribute.FireWaterWind
        };

        foreach (var attackerAttribute in attackerAttributes)
        {
            foreach (var targetAttribute in targetAttributes)
            {
                var expectedResult = new OneEventAttributeLogic().CanAttack(attackerAttribute, targetAttribute);
                var nowResult = attackerAttribute.Contains(targetAttribute);
                Assert.AreEqual(expectedResult, nowResult, "from:" + attackerAttribute + " to:" + targetAttribute);
            }
        }
    }
}

