
class Program
{
static void Main(string[] args)
{
    var size = new Size(1280, 720);

    using (var ctx = new Context())
    {

        var devices = ctx.QueryDevices();

        Console.WriteLine("There are {0} connected RealSense devices.", devices.Count);
        if (devices.Count == 0) return;
        var dev = devices[0];

        Console.WriteLine("\nUsing device 0, an {0}", dev.Info[CameraInfo.Name]);
        Console.WriteLine("    Serial number: {0}", dev.Info[CameraInfo.SerialNumber]);
        Console.WriteLine("    Firmware version: {0}", dev.Info[CameraInfo.FirmwareVersion]);

        var depthSensor = dev.QuerySensors&lt;Sensor&gt;()[0];
        var candidate = depthSensor.StreamProfiles
                            .Where(p =&gt; p.Stream == Stream.Depth)
                            .OrderBy(p =&gt; p.Framerate)
                            .Select(p =&gt; p.As&lt;VideoStreamProfile&gt;());
        var sp = candidate
                            .First(p =&gt; p.Width == size.Width &amp;&amp; p.Height == size.Height);
        depthSensor.Options[Option.DepthUnits].Value = 0.00001f;


        int one_meter = (int)(1f / depthSensor.DepthScale);
        ushort[] depth = new ushort[(int)(size.Width * size.Height)];
        char[] buffer = new char[(int)((size.Width / 10 + 1) * (size.Height / 20))];
        int[] coverage = new int[64];

        depthSensor.Open(sp);

        depthSensor.Start(f =&gt;
        {

            using (var vf = f.As&lt;VideoFrame&gt;())
                vf.CopyTo(depth);

            int b = 0;
            for (int y = 0; y &lt; size.Height; ++y)
            {
                for (int x = 0; x &lt; size.Width; ++x)
                {
                    ushort d = depth[(int)(x + y * size.Width)];

                    if (d &gt; 0 &amp;&amp; d &lt; one_meter)
                        ++coverage[x / (int)(size.Width / coverage.Length) ];
                }

                if (y % 20 == 19)
                {
                    for (int i = 0; i &lt; coverage.Length; i++)
                    {
                        int c = coverage[i];
                        buffer[b++] = " .:nhBXWW"[c / 100];
                        coverage[i] = 0;
                    }
                    buffer[b++] = '\n';
                }
            }

            Console.SetCursorPosition(0, 0);
            Console.WriteLine();
            Console.Write(buffer);
            Console.WriteLine();

            using (var depthFrame = f.As&lt;DepthFrame&gt;())
            {
                if (depthFrame != null)
                {
                    Console.WriteLine("The camera is pointing at an object " +
                        depthFrame.GetDistance(depthFrame.Width / 2, depthFrame.Height / 2).ToString("F7") + " meters away\t");

                    Console.SetCursorPosition(0, 0);
                }
            }


        });

        AutoResetEvent stop = new AutoResetEvent(false);
        Console.CancelKeyPress += (s, e) =&gt;
        {
            e.Cancel = true;
            stop.Set();
        };
        stop.WaitOne();

        depthSensor.Stop();
        depthSensor.Close();
    }
}
}


