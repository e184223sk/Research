More than 3 years have passed since last update.本記事はulgeek Advent Calendar 2017、ラスト25日目のエントリです！私は近頃C#で、Microsoft Azureの「Azure Search」と「Azure Cosmos DB」を併用したWEBアプリケーションを開発しています。よい使い方を探り探り試行していたところ、日時の情報を含むデータを取り扱った際にいくつか不可解な挙動が見受けられました。挙動を把握してその対応を考えるために調査・検証をおこないましたので、この記事ではその結果をご紹介します。
どちらか一方のサービスであっても、使用していて日時データの扱いに困っている方の理解の助けになればと思います。なおDateTime型の性質など重要な点については触れますが、それぞれのサービス自体の説明を含む基本的な要素の説明については省略しています。
また、各検証の結果は実行する環境によって違いが出る可能性があることをご留意ください。C#において日時を扱うデータ型といえば、DateTime型とDateTimeOffset型が挙げられます。
それぞれの型の仕様について改めて確認したのち、Azure Search、Cosmos DBのドキュメントから今回の検証に関係ありそうな要素を洗い出します。まずはDateTime型ですが、これは日時の値だけでなく、「その日時がどのロケールの日時を表すか」の情報を限定的に保持することが可能です。それがKindプロパティです。
これにはDateTimeKind列挙型に定義された3種類の値を持たせることができ、それぞれ以下の意味を表します。このKindプロパティの設定値の違いは、挙動の検証の際に重要になりそうですね。ちなみにこのKindプロパティですが、あくまでそのインスタンスに対してToLocalTime / ToUniversalTimeメソッドを実行するときに参照されるだけで、インスタンス同士の差を計算する際には参照されない（してくれない）ようです。
具体例はこちら


せっかくなので、ToLocalTime / ToUniversalTimeメソッドの呼び出しやインスタンス間の差計算がどういう結果になるか示しておきます。
KindプロパティがUnspecifiedのインスタンスは、扱いに特に注意が必要そうな様子も見て取れます。

var local = new DateTime(2017, 12, 25, 20, 0, 0, DateTimeKind.Local);    // JST
var utc = new DateTime(2017, 12, 25, 20, 0, 0, DateTimeKind.Utc);    // UTC
var unspec = new DateTime(2017, 12, 25, 20, 0, 0);     // 未指定なので、DateTimeKind.Unspecified

// Kindがローカルのものを変換
var localToLocal = local.ToLocalTime();    // 2017-12-25 20:00:00 &lt;- JSTのまま
var localToUtc = local.ToUniversalTime();  // 2017-12-25 11:00:00 &lt;- UTCに

// KindがUTCのものを変換
var utcToLocal = utc.ToLocalTime();        // 2017-12-26 05:00:00 &lt;- JSTに
var utcToUtc = utc.ToUniversalTime();      // 2017-12-25 20:00:00 &lt;- UTCのまま

// Kindを明示しなかったものを変換
var unsToUtc = unspec.ToUniversalTime();   // 2017-12-25 11:00:00 &lt;- Unspecified = Localだと判断されてUTCに
var unsToLocal = unspec.ToLocalTime();     // 2017-12-26 05:00:00 &lt;- Unspecified = Utcだと判断されてJSTに

// インスタンス間の差を計算。9時間の時差はあるが、差は0という結果。
TimeSpan sub = local.Subtract(utc);    // local - utc も可。 sub.TotalSeconds == 0


続いてDateTimeOffset型ですが、これは型名の通り、日時の情報とともに、そのタイムゾーンの値をTimeSpan構造体で持つことができます。DateTime型がロケールについて3パターンの情報しか持てないのに対して、こちらはUTCとの時差を明示することでいろいろなロケールの日時を表すことができる特徴があります。今回の検証にあたって、特別意識すべき仕様もないように見受けられました。Azure Searchにおける、日時を扱うデータ型はEdm.DateTimeOffset型です。DateTimeOffsetと聞くとタイムゾーンの情報もうまく保持してくれそうなものですが、公式ドキュメントの説明にはこうあります。When you upload DateTimeOffset values with time zone information to your index, Azure Search normalizes these values to UTC.
For example, 2017-01-13T14:03:00-08:00 will be stored as 2017-01-13T22:03:00Z.
If you need to store time zone information, you will need to add an extra column to your index.要はタイムゾーンの情報からUTCを算出できればそれに変換してしまい、その後は値が表していたタイムゾーンの情報は保持しない、保持したければもう1つ項目を用意しなさいということですね。
この変換が不可解な挙動に影響を与えている1つであることはこの時点で既に確実ですが、その条件は不明確なため、DateTime型のKindプロパティ、DateTimeOffset型のタイムゾーン情報と紐づけて検証します。Cosmos DBはドキュメントDBなのでDB上でのデータ型はありませんが、日時に関してはISO 8601に則ったシリアライズをおこなって保持するということが公式ドキュメントに記載されています。特に日時の変換に触れた内容は見つかりませんでしたが、とはいえ登録したデータと取得したデータに違いが出るケースを検証の発端として目にしているため、Azure Searchと同様の観点で検証をおこないます。今回は、次のような日時の値を持ったドキュメントをAzure Search、Cosmos DB双方にプログラムから登録し、以下の2点を確認します。仕様の調査を総合してみると、まずAzure Searchについての3つを仮説として立てられます。反面、Cosmos DBについては情報が不足しておりという弱い仮説が立てられるにすぎません。以上の仮説を念頭に確認をしていきます。上で示したドキュメントを挿入してポータルから確認してみました。
以下のようになっています。仮説の通り、UTCからの時差があることを明示したJst、JstOffsetの値がUTCに変換されて登録されました。明示しなかったUnspecの値は、(ToUniversalTimeメソッドの結果とは異なり)UTCであると見なされて変換はされないようですね。さて、続いてこれをプログラムから取得してみます。結果は以下の通りです。
※元のドキュメントとの比較が目的のため、文法上はおかしなコードです。UTCに変換されて登録された、そのままの値をもったインスタンスを取得できました。Cosmos DBについても、Azure Searchと同じドキュメントを登録して結果を確認してみます。今回用意したパターンの範囲ではいずれも変換は起こらず、登録しようとしたデータがそのまま登録されているようです。
さて、続いてこれをプログラムから取得します。
※文法については同上DateTime型については登録したままの値で取得できましたが、DateTimeOffset型についてはUTCの13時を示していた値がJST(ローカルの時間)の22時に変換されてしまいました。日時として同じ値ではありますが、DateTimeOffset型を使うとタイムゾーンをローカルの日時に合わせるように値が変換されるようです。最後に簡単に、こういった検証を踏まえた上で、私が今どういった方針で日時データを取り扱っているかとその理由を紹介します。方針としては、DateTime型を「値としてはローカルの（扱いたいままの）日時の値としつつ、KindプロパティはUtcにセットする」というものです。この方針は以下2つの利点から採用を決定しました。あくまで「KindプロパティはUtcにセットする」のは様々な変化を抑制するためのおまじないのようなもので、実態としてはローカルの日時を表しているということに注意が必要ですね。DateTimeOffset型については、以下の理由から使用しないこととしました。複数のタイムゾーンを扱う必要がある場合は追加の考慮が必要でしょう。ただしその場合もDateTime型を同じように使用して、加えて公式ドキュメントを参考に「それが表現する日時とUTCとの時差を表す項目を追加する」という対応が考えられると思います。今回はAzure SearchとCosmos DBを対象に、検証を通して日時データを扱う際の留意点を確認しました。併せて実装方針も紹介させていただきましたが、自分のところで試すとこうなったよ、自分たちはこんな方針で実装しているよ、などありましたらぜひコメントください。皆さんの情報をもとに、精度を高めていければ幸いです。


