More than 3 years have passed since last update.Azure Functionsを使ったアプリの開発時にAzureのストレージテーブルを用いることになりました。その際に参考にする記事が少なくやや苦戦したので、基本的なCRUD処理を扱うまでの手順を示す記事を作成しました。本記事ではAzure Functions内で利用するTable Storageに対するCRUD処理方法をTable Storage作成から順を追って示します。本記事に記述したAzure Functionsのソースコードは以下のリンクにあります。また、本記事ではAzureのTable StorageへのCRUDを示しますが、Table Storageの仕様自体には言及しません。仕様自体は以下のリンクの公式ドキュメント等を確認してください。【Microsoft公式ドキュメント】Azure ストレージ テーブルの設計ガイド: スケーラブルな設計とハイパフォーマンスなテーブルAzure FunctionsにてStorageテーブルを利用するには下記の内容を行う必要があります。① Azure Portal画面から"Storage Accounts"を選択② 生成済みのAzure Functionsのアプリと紐付いているStorage Accountを選択する③ "Tables"を選択し、"+Table"ボタンから作成したい名前のテーブルを作成する現状(2017年11月時点)では、Azure Portal上から上記で作成したようなAzure Storage上のコンテンツを参照・変更することはできないようです。作成したテーブルのコンテンツへアクセスするには、Microsoft Azure Storage Explore(無料)というMicrosoftが提供する、専用のクライアントアプリを利用する必要があります。(Windows, Mac, Linux3つともアプリ有り)① アプリをダウンロードする② Azureのアカウントでログインする③ テーブルを作成したStorage Accountにて作成したテーブルが存在することを確認する事前準備が完了したらAzure Functionsにて作成したテーブルへのCRUD処理(テーブルへの登録(C)・参照(R)・更新(U)・削除(D))の方法を1つずつ以下に示します。本記事ではAzure Functionsにおけるテーブルバインディング処理方法に着目するため、実装では"TimerTrigger"形式のFunctionを扱います。Azure Functionsのテーブルはコードファーストでテーブル設計・実装を行うことができます。Azure PortalのGUIから設定する場合は下記図のように、対象FunctionのIntegrate設定の"Outputs"にて、作成したテーブル名を指定しバインディング設定をします。上記設定を行うと、対象Functionのfunction.jsonファイルにて以下のような設定に更新されます。また、逆にfunction.jsonファイルから先に修正することでバインディング設定をすることもできます。登録時にはICollector型インターフェースをFunctionの引数に指定しAddメソッドでテーブル登録します。"Run"でFunctionを実行し、Microsoft Azure Storage Exploreでテーブルの状態を確認します。上図のように、コード内のSampleTableの設計にもとづいてテーブルにEntityが追加されていることが確認できました。コードファーストです。下記図のように、対象FunctionのIntegrate設定の"Inputs"にて、作成したテーブル名とパラメータ名(任意の文字)とその他項目を指定し設定します。(※)※ Partition Key、Row KeyはAzureのStorage Tableにおける必須の複合キーであり、設定することで、フィルターがかかったクエリが実行される。Query Filterはより詳細なフィルター設定であり、この設定画面上の"Document"にその詳細が記載されている。function.jsonは以下のような設定となります。前述の登録処理はコードファーストとしてコード内のクラスを登録しましたが、参照・更新・削除では既に存在するEntityを引っ張る必要があるため、Microsoft.WindowsAzure.Storage.Table名前空間内のTableEntityクラスを継承したクラスでテーブル定義する必要があります。上述のコードのように #r "Microsoft.WindowsAzure.Storage" とロードすることで参照することができます。参照のときはIQueryableインターフェース型をFunctionの引数に取りそれに対してクエリを発行します。更新処理と削除処理は共に、参照処理によって得られたEntityに対して処理を実行するかたちです。参照処理での"Inputs"設定に加えて、登録処理と同様に"Outputs"の設定をFunctionのIntegrateに対して行います。更新・削除処理の際には、TableEntityクラスと同じくMicrosoft.WindowsAzure.Storage.Table名前空間内にあるCloudTableクラス、TableOperationクラスを利用します。上記のコードでは、同一Entityに対して更新後に削除をしているので、結果として対象Entityは削除されていますが、Update処理だけならばUserNameカラムの値が更新される結果となります。Azure FunctionsでのTable StorageのテーブルバインディングによるCRUD処理の実装方法を示しました。"C"・"R"・"UD"の3つの処理でそれぞれ利用するクラスが異なるので留意が必要です。本記事ではこの3処理を分けたFunctionで実装しましたが、組み合わせることももちろん可能です。


