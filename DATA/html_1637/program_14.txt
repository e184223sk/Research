
static class GraphUtil
{
    public static int[] 強連結成分分解(this Node[] graph)
    {
        var sumi = new bool[graph.Length];
        Span&lt;int&gt; Dfs1(int index, Span&lt;int&gt; jun)
        {
            if (sumi[index])
                return jun;
            sumi[index] = true;
            foreach (var child in graph[index].children)
            {
                jun = Dfs1(child, jun);
            }
            jun[jun.Length - 1] = index;
            jun = jun.Slice(0, jun.Length - 1);
            return jun;
        }

        var jun = new int[graph.Length];
        var junsp = jun.AsSpan();
        for (int i = 0; i &lt; graph.Length; i++)
            junsp = Dfs1(i, junsp);

        var res = NewArray(graph.Length, -1);
        bool Dfs2(int index, int group)
        {
            if (res[index] &gt;= 0)
                return false;
            res[index] = group;
            foreach (var r in graph[index].roots)
                Dfs2(r, group);
            return true;
        }

        var g = 0;
        foreach (var i in jun)
            if (Dfs2(i, g))
                g++;
        return res;
    }
}

