More than 1 year has passed since last update.【テストコンテスト】本日午後９時からの一時間の開催です。新しいジャッジシステムの負荷テストを兼ねたコンテストです。ABC-Dクラスまでの優しい問題のみのコンテストとなります。ぜひご協力ください。Judge System Update Test Contest 202004 - AtCoder https://t.co/FrH9qcXkjTということで使用できる言語がアップデートされるそうですので、C#での変化をまとめておきます。旧環境新環境旧環境のバージョンアップに相当するのは、「Mono (mcs) 6.8.0.105」です。
「Mono (csc) 3.5.0」はMicrosoft製のRoslynコンパイラを使用します。「.NET Core 3.1.201」はMicrosoft純正の環境です。Monoと.NET Coreは全く別の実行環境なので動作に違いが出ることがあります。また、mcsとcscでもコンパイラの最適化の度合いが異なることもありえます。コードテストでHello Worldを実行してみます。Hello World

using System;

class Program
{
  static void Main()
  {
    Console.WriteLine("hello world!");
  }
}


Hello Worldにかかる時間は.NET Coreが一番長くなりました。実際に出力にかかる時間は0msとみなせるので、起動にかかる時間がそれぞれ60msと23msといえます。D問題を解いてみます。コード

using System;
using System.Linq;

class Program
{
    static void Main()
    {
        var line = Console.ReadLine().Split(' ');
        var N = int.Parse(line[0]);
        var Q = int.Parse(line[1]);
        var arr = Console.ReadLine().Split(' ').Select(str =&gt; int.Parse(str)).ToArray();
        var ss = Console.ReadLine().Split(' ').Select(str =&gt; int.Parse(str)).ToArray();
        var gcds = new int[N];
        gcds[0] = arr[0];
        for (int i = 1; i &lt; gcds.Length; i++)
            gcds[i] = Gcd(gcds[i - 1], arr[i]);

        var res = new int[Q];
        for (int i = 0; i &lt; Q; i++)
        {
            var s = ss[i];
            var last = Gcd(gcds[gcds.Length - 1], s);
            if (last != 1)
                res[i] = last;
            else
            {
                int l = 0;
                int r = gcds.Length - 1;
                while (l &lt; r)
                {
                    var m = (l + r) &gt;&gt; 1;
                    if (Gcd(gcds[m], s) != 1) l = m + 1;
                    else r = m;
                }
                res[i] = l + 1;
            }
        }

        foreach (var item in res)
        {
            Console.WriteLine(item);
        }
    }
    static int Gcd(int a, int b) =&gt; b &gt; a ? Gcd(b, a) : (b == 0 ? a : Gcd(b, a % b));
}


実行時間はとなりました。起動は遅いもののループの回数が大きくなると.NET Coreが高速になることが多いです。以降は言語バージョンも最新の.NET Core環境について記載します。新環境で使えるようになった機能のうち、AtCoderで有用なものをまとめます。C# 7の目玉機能のValueTuple構造体が使用できるようになります。基本的にはTupleクラスと同様の機能ですが、各要素にエイリアスがつけられるValueTupleになって扱いやすくなりました。GetHashCode, Equals, CompareToも実装されているのでDictionaryのKeyとして使ったりSortしたりすることもできます。CompareToする場合はItem1で比較→同じならItem2で比較→...という直感的な比較がされます。ValueTupleを使用して複数戻り値も実装できます。値の入れ替えも簡潔に記述できます。ValueTupleのGetHashCodeで使用されるHashCode構造体は自作の型でも使用できます。
複数の値から生成してくれるので、便利に使えそうです。is演算子やout演算子と変数宣言をセットで使えます。
out演算子との組み合わせは便利に使えることも多そうです。C# 6だと式形式で書なかった箇所です。0bから書くと2進数で書けます。
また、_で区切ることができます。switchが式で使えます。いろいろ機能が多いので詳しくは割愛。Span&lt;T&gt;構造体, ReadOnlySpan&lt;T&gt;構造体が追加されました。
簡単に言うと配列の一部だけを切り出して使用できる構造体です。ライブラリの高速化に活用できそうです。ローカル関数が使えます。コンテスト中に使うというよりはライブラリのなかの記述をスッキリさせるために使用するのが主になるかと思います。C# 6でもラムダ式で同様のことはできましたが、再帰を記述する場合は一旦nullで初期化しておくなどの本質でない記述が必要でした。範囲アクセスによって配列やSpanの切り出しが簡単になります(Spanの方が効率が良いらしい)。また、^1とすると配列やListの最後から1番目の要素というようにアクセスできます。自作の型でも使えるので、たとえば下記のような累積和クラスで使用可能です。Fillメソッドが追加されました。言語的な新機能ではないですが、unsafeが使えるようになっています。Unsafeクラスも使えるようになっています。コンテスト中にunsafeコードをとっさに書くのは難しそうですが、自作ライブラリの高速化で有効活用できるかもしれません。


