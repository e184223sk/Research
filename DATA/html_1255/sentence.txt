More than 1 year has passed since last update.この記事では、Microsoft 社が公開している Build an app using SQL Server の内容に従い、SQL Server を使用した C# アプリを作成します。なお、本記事執筆時点において、WSL(Windows Subsystem for Linux) 上の SUSE Enterprise Linux Server に対するインストールはサポートされていません。
※参考 - Microsoft Docsウェブ上では、ホスト OS に SQL Server 2017 をインストール とありますが、ここでは SQL Server 2019 をインストールしていきます。
また、SQL Server の最適なパフォーマンスを確保するために、マシンには少なくとも 4GB 以上のメモリが必要との記載があります。(システムの前提条件としてのメモリの最低要件は、2 GBです。)最初に、Microsoft SQL Server 2019 SLES リポジトリ構成ファイルをダウンロードします。リポジトリ構成ファイルをダウンロードしたら、リポジトリを最新化します。SQL Server をインストールします。インストール途中で、署名された公開鍵がないために、署名の検証に失敗した旨のログが出力される場合があります。
その際は-yオプションを外し、sudo zypper install mssql-serverで実行してください。署名の検証について確認された際は、"i"(無視) を選択して、インストールを続行してください。今回のアプリ開発の内容に限っては、公開鍵がなくても問題ありません。最後に、mssql-conf setupを実行して、SA パスワードの設定とエディションの選択を行います。
なお、SA パスワードには必ず強力なパスワードを指定する必要があります。(大文字と小文字、10真数の数字、英数字以外の記号を含む、最小 8 文字の長さが必要です。)構成が完了したら、サービスが実行されていることを確認します。すでに .NET Core 3.1 LTS がインストールされている場合は、このステップをスキップしてください。コマンドを実行して、.NET Core 3.1 LTS をインストールしていきます。
最初に、Microsoft リポジトリキーとフィードを追加します。Microsoft リポジトリキーとフィードを追加したら、.NET Core 3.1 をインストールします。ここでも、SQL Server 2019 インストール時同様、署名の検証エラーが出る場合があります。署名の検証について確認された際は、"i"(無視) を選択して、インストールを続行してください。今回のアプリ開発の内容に限っては、公開鍵がなくても問題ありません。ここでは、以下、2 つのシンプルな C# アプリを作成します。開発を行うワークディレクトリに移動し、新しい .NET Core プロジェクトを作成します。
基本的な .NET Core の Program.cs と csproj ファイルを含むプロジェクトディレクトリが作成されます。SqlServerSample.csproj というファイルが SqlServerSample ディレクトリ以下に作成されます。
任意のテキストエディタで SqlServerSample.csproj ファイルを開き、コードを以下の通りに書き換え、System.Data.SqlClient をプロジェクトに追加します。保存してファイルを閉じます。SqlServerSample ディレクトリ以下にある Program.cs ファイルを開き、コードを以下の通りに書き換え、保存してファイルを閉じます。
ユーザー名とパスワードを自分のものに置き換えることを忘れないでください。SqlServerSample ディレクトリに戻り、以下のコマンドを実行して csproj 内の依存関係を復元します。完了したら、ビルド実行を行います。これで、SQL Server に接続を行うコンソールアプリができました。ただし、このアプリでは単にデータベースへの接続だけを行っているだけで、クエリは実行していません。
次に、Program.cs 内にコードを追加して、データベースやテーブルの作成、INSERT/UPDATE/DELETE/SELECT などのクエリを実行するように変更します。
ユーザー名とパスワードは自分のものに置き換えることを忘れないでください。
書き換えた後、ファイルを保存し、プロジェクトをビルドして実行します。これで、Ubuntu 上の .NET Core を使って、初めて C# + SQL Server アプリを作成できました。次は、ORM を使って C# アプリを作成します。ワークディレクトリに戻り、新しい.NET Coreプロジェクトを作成します。SqlServerEFSample.csproj というファイルが SqlServerEFSample ディレクトリ以下に作成されます。
任意のテキストエディタで SqlServerEFSample.csproj ファイルを開き、コードを以下の通りに書き換え、Entity Framework Core をプロジェクトに追加します。保存してファイルを閉じます。このサンプルでは、2つのテーブルを作成します。1つ目は「ユーザー」に関するデータを保持し、もう1つは「タスク」に関するデータを保持するものです。User.cs を作成します。User クラスを定義します。SqlServerEFSample ディレクトリ以下に User.cs ファイルを作成します。
このクラスは、User テーブルに紐づくモデルのクラスです。書き換えた後、ファイルを保存して閉じます。
この時点では、Task クラスがないためコンパイルエラーとなりますが、問題ありません。Task.cs を作成します。Task クラスを定義します。SqlServerEFSample ディレクトリ以下に Task.cs ファイルを作成します。
このクラスは、Task テーブルに紐づくモデルのクラスです。書き換えた後、ファイルを保存して閉じます。EFSampleContext.cs を作成します。EFSampleContext クラスを定義します。SqlServerEFSample ディレクトリ以下に EFSampleContext.cs ファイルを作成します。
このクラスは、Entity Framework Core を使用し、.NET オブジェクトを利用してデータのクエリ、挿入、更新、および削除を行うためのクラスです。User クラスと Task クラスを使用しています。
書き換えた後、ファイルを保存して閉じます。最後に Program.cs を更新します。これまで作成したクラスを使用するための設定を行います。
ユーザー名とパスワードを自分のものに更新することを忘れないでください。
保存してファイルを閉じます。SqlServerSampleEF ディレクトリに戻り、以下のコマンドを実行して csproj 内の依存関係を復元します。完了したら、ビルド実行を行います。これで、2つ目の C# アプリの作成が終わりました。最後に、SQL Server の カラムストア機能を使って C# アプリを高速化する方法について学びます。これまでで基本的なことは理解できたと思います。最後は、SQL Server を使用してアプリをより良くする方法を見てみます。このモジュールでは、カラムストアインデックスの簡単な例と、カラムストアインデックスがどのようにデータ処理速度を向上させるかを確認します。カラムストアインデックスは、従来の列ストアインデックスに比べて、分析ワークロードでは最大 100 倍のパフォーマンス向上、データ圧縮では最大 10 倍のパフォーマンス向上を実現できます。カラムストアインデックスの機能を確認するために、500 万行のサンプルデータベースとサンプルテーブルを作成し、カラムストアインデックスを追加する前と後の簡単なクエリを実行する C# アプリケーションを作成します。ワークディレクトリに戻り、新しい.NET Coreプロジェクトを作成します。SqlServerColumnstoreSample.csproj というファイルが SqlServerColumnstoreSample ディレクトリ以下に作成されます。
任意のテキストエディタで SqlServerColumnstoreSample.csproj ファイルを開き、コードを以下の通りに書き換え、System.Data.SqlClient をプロジェクトに追加します。保存してファイルを閉じます。Program.cs の内容を書き換えます。
ユーザー名とパスワードは自分のものに置き換えることを忘れないでください。
保存してファイルを閉じます。SqlServerColumnstoreSample ディレクトリに戻り、以下のコマンドを実行して csproj 内の依存関係を復元します。完了したら、ビルド実行を行います。おめでとうございます。カラムストアインデックスを使って C# アプリを高速化しました！以上で、「Ubuntu上でSQL Serverを使用してC#アプリを作成する」は終了です。Build an app using SQL Server には、他言語での SQL Server アプリを作成するチュートリアルがあります。ぜひ、他の言語でも試してみてください。また、記事内で説明していたインストール時におけるパッケージの証明書に関する署名検証エラーについては、それぞれ関係各所へフィードバックを実施しました。
特に問題がなければ、近日中には問題が修正されることと思います。


