業務ではC#を使ってましたが、オブジェクト指向がどういうものか理解していない部分もあるので、調べたことや学習したことをまとめてみました。まずはざっくりオブジェクト指向がどういうものか例を挙げてみます。ここでは、手続き型と対比させてみます。
単語を調べると以下のような意味です。オブジェクト指向:モノごとにまとめて動作する
手続き型:上から下という順番で動作する手続き型はニュアンス的にはわかりますが、オブジェクト指向はイマイチピンときません。
ここで、「ステーキを作る」というプログラムを例にしてみます。手続き型プログラミングは定義と呼び出しによってプログラムを構造化してますが、オブジェクト指向ではテータと操作手続きのブロックを1つのオブジェクトとして考えます。サンプルプログラムを使ってオブジェクト指向について説明します。
以下の処理は主人公がスライムを倒す処理です。このサンプルプログラムは3つのクラスにわかれています。
Program.cs:メイン処理
Character.cs:RPGキャラクターのプロパティ、メソッドの設定している
PlayerCharacter.cs:Character.csを継承したクラス。まずはCharacter.csを使ってクラス、メソッド、プロパティを解説していこうと思います。
キャラクターの情報（名前、レベル、HP、攻撃力）のやりとりをするクラスです。抽象化したオブジェクト（メソッド）をコード化したものです。Character.csでは、Characterクラスになります。メソッドとプロパティの塊です。オブジェクトが持っている処理のことです。Character.csではsetIntroduction()やgetDamege()、calcDamege()など値を計算したり、受け渡す部分になります。クラスが持つ、オブジェクトを説明するデータのことです。Character.csでは名前、レベル、HP、攻撃力が該当します。プレイヤー（主人公）の年齢、性別、経験値、職業を決めるクラスです。
このクラスを使って継承の説明をします。子クラスが親クラスの特性を受け継ぐことです。
PlayerCharacter.csの名前、レベル、HPはCharacter.csにあるプロパティと共通しています。
また、calcDamege()やgetDamege()などメソッドもCharacter.csと同じものを使いたいです。このような場合に出てくるのが継承です。
Character.csのように継承元になるクラスを親クラス（スーパークラス）、PlayerCharacter.csのように引き継ぐクラスを子クラス（サブクラス）と呼びます。プログラムの処理はここで書かれています。
このクラスを使って、インスタンス化の説明をします。クラスから生成される実体のことです。同じ名前のメソッドを使っていてもインスタンスごとに内容が違います。
setIntroduction（）は一番最初のキャラクターの情報を取得するメソッドです。今回でてきた用語の一覧です。
クラス:抽象化したオブジェクトのブロックをコード化したもの
プロパティ:クラスが持つ、オブジェクトを説明するデータ
継承:クラスが親クラスの特性を受け継ぐこと
メソッド:オブジェクトが持っている処理
インスタンス:クラスから生成された実体のことオブジェクト指向はなかなか理解するのは難しいと感じました。
自分でコードを書いたり、文章にするとわかりやすいと感じました。初心者向けに徹底解説！オブジェクト指向とは？
https://eng-entrance.com/what-oop
オブジェクト指向とは？誰でもわかるようにやさしく解説
https://www.sejuku.net/blog/5973
【初心者必見】オブジェクト指向を分かりやすく解説
https://blog.codecamp.jp/object-orientation-explanation


