More than 1 year has passed since last update.普通にコーディングに問題無い人でも、Getter、Setterを逆にするコードを見かける。取得すべきデータを戻り値としていればGetter、内部変数を変更したり、引数を更新する場合はSetterを使用すれば間違うことは無いと思うのだが、そう単純でもないのかもしれない。サンプルコードをみて考えてみる。サンプルコードはいずれも、実際のプロジェクトで見たことがあるコードを簡略化している。
なお、NG1～NG3までの処理に関連はなく、一連の処理ではない。
java


    public void main() {
        // NG1 戻り値がなく、引数を更新しているのにGetメソッド
        List&lt;Dto&gt; dtoes = new ArrayList&lt;Dto&gt;();
        getData(dtoes);

        // NG2 戻り値があるのにSetメソッド
        dtoes = setData();

        // NG3 正しいSetterが混在していて読みにくい
        Dto2 dto2 = setDto2();
        dto2.setDtoes(setData());
    }

    private void getData(List&lt;Dto&gt; dtoes) {
        // DBから取得する想定。
        dtoes.add(new Dto());
    }

    private List&lt;Dto&gt; setData() {
        // DBから取得する想定。
        List&lt;Dto&gt; dtoes = new ArrayList&lt;Dto&gt;();
        return new ArrayList&lt;Dto&gt;();
    }

    private Dto2 setDto2() {
        Dto2 dto2 = new Dto2();
        return dto2;
    }

    /** テーブルのDTO **/
    private class Dto {

    }

    /** Dtoをメンバーに持つ親DTO **/
    private class Dto2 {
        public List&lt;Dto&gt; _dtoes;

        public void setDtoes(List&lt;Dto&gt; dtoes) {
            _dtoes = dtoes;
        }
    }



上記サンプルコードのようになった理由を考えてみる。
GetData:DBからデータを取得しているのでGetter
SetData:DBから取得したデータを設定して返しているのでSetter
SetDto2:インスタンスを設定して返しているのでSetter
SetDtoes:Dtoを設定しているのでSetter
というところだろうか。
統一感がなくで、コードが読みにくい。
取得するデータを戻り値とするならGet, 内部変数の更新や引数の更新をSetというルールで書き直してみた。
java


    public void main() {

        // OK 引数更新
        List&lt;Dto&gt; dtoes = new ArrayList&lt;Dto&gt;();
        setData(dtoes);

        // OK 戻り値が取得データになっている。
        dtoes = getData();

        // OK GetterとSetterが統一されて読みやすくなった。
        Dto2 dto2 = getDto2();
        dto2.setDtoes(getData());
    }

    private void setData(List&lt;Dto&gt; dtoes) {
        // DBから取得する想定。
        dtoes.add(new Dto());
    }

    private List&lt;Dto&gt; getData() {
        // DBから取得する想定。
        List&lt;Dto&gt; dtoes = new ArrayList&lt;Dto&gt;();
        return new ArrayList&lt;Dto&gt;();
    }

    private Dto2 getDto2() {
        Dto2 dto2 = new Dto2();
        return dto2;
    }

    /** テーブルのDTO **/
    private class Dto {

    }

    /** Dtoをメンバーに持つ親DTO **/
    private class Dto2 {
        public List&lt;Dto&gt; _dtoes;

        public void setDtoes(List&lt;Dto&gt; dtoes) {
            _dtoes = dtoes;
        }
    }



GetなのかSetなのか迷ったら、取得するデータを戻り値とするか否かで決めればよい。前の記事(関数呼び出しと条件分岐を分離できないか)次の記事(なんでもかんでも配列)目次


