
using System;
using System.Collections.Generic;

namespace test
{
    /// &lt;summary&gt;
    /// CSVバイト操作メソッドクラス
    /// &lt;/summary&gt;
    class CSVByteOperation_Method : CSVByteOperation_Base
    {
        private string _FilePath;
        public List&lt;List&lt;byte&gt;&gt; _ByteList;

        /// &lt;summary&gt;
        /// コンストラクタ　CSVデータのByte変換とライン区切り
        /// &lt;/summary&gt;
        /// &lt;param name="FilePath"&gt;&lt;/param&gt;
        public CSVByteOperation_Method(string FilePath)
        {
            try
            {
                _FilePath = FilePath;

                GetCSV();
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// &lt;summary&gt;
        /// CSVデータのByte変換とライン区切り
        /// &lt;/summary&gt;
        public void GetCSV()
        {
            try
            {
                _ByteList = new List&lt;List&lt;byte&gt;&gt;();

                var BinaryData = GetBinaryData(_FilePath);
                _ByteList = DivideLine(BinaryData);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// &lt;summary&gt;
        /// 読み込んだバイナリーデータリストの行数を取得
        /// &lt;/summary&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public int GetDataCount()
        {
            try
            {
                if (_ByteList == null)
                    return 0;

                return _ByteList.Count;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// &lt;summary&gt;
        /// 読み込んだバイナリーデータリストのi番目のラインを取得
        /// &lt;/summary&gt;
        /// &lt;param name="index"&gt;取得したいインデックス&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public List&lt;byte&gt; GetLineData(int index)
        {
            try
            {
                if (_ByteList == null)
                    return null;

                if (index &gt;= _ByteList.Count)
                    return null;

                return _ByteList[index];
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// &lt;summary&gt;
        /// 読み込んだバイナリーデータリストのi番目のラインを文字列で取得
        /// &lt;/summary&gt;
        /// &lt;param name="index"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public string GetLineDataConvertString(int index)
        {
            try
            {
                if (_ByteList == null)
                    return null;

                if (index &gt;= _ByteList.Count)
                    return null;

                var ByteArray = new byte[_ByteList[index].Count];

                for (int i = 0; i &lt; _ByteList[index].Count; i++)
                {
                    ByteArray[i] = _ByteList[index][i];
                }

                return System.Text.Encoding.Default.GetString(ByteArray);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
    }
}

