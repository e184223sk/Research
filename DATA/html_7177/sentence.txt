More than 5 years have passed since last update.[C#] Edge.js を触ってみた で C# 側から Node.js を使うのをメモしましたので、今回は javascript 側から C# を使うところを少しメモしておこうと思います。Edge.js についての詳細は以下を参照してください。npm を使って Edge.js をインストールします。Hello World してみます。edge.func() を使って C# のスクリプトを文字列として引数に渡してあげると、 javascript で使えるようになります。また、引数で与える C# のラムダには async をつける必要があります。 匿名型を受け取ってみます。javascript 側から 配列を引数で渡して、C# 側でごにょごにょしてから匿名型にして返してます。
上の例では System.Collections.Generic 名前空間と System.Linq 名前区間を使っているので先頭で using しています。クラスを定義する必要がある場合は以下のように記述します。Startup クラスの Invoke() メソッドが javascript で edge.func() したときに呼ばれる部分となります。また、ラムダで記述する場合は System と System.Threading.Tasks はデフォルトで using されているようですが、クラスを定義して使用する場合は上の例のように自分で using する必要があります。クラスを定義して受取ってみます。Sample クラスを作成して返してます。それ以外は匿名型の時と同じです。C# のコードは別ファイルにすることもできます。javascript 側で呼び出すときは以下のようにします。呼べるらしいので試します。kernel32.dll にあるBeep関数を呼び出して音を鳴らしています。Beep関数は音の高さと長さを指定することができるので javascript 側で高さと長さを指定してあげるために連想配列にして渡しています。javascript 側から引数で連想配列を渡すときなど、 Invoke() メソッドの引数の型を object 型 の代わりに dynamic 型にすることも可能です。XMLファイルの内容をC# 側でオブジェクトにデシリアライズしてみます。members 要素をルートとして person 要素がずらずらと並ぶ感じです。XMLドキュメントの内容に合うようにモデルを用意してデシリアライズしています。
デシリアライズした結果から person 要素にあたる部分のコレクションを返しています。C# 側で System.Xml.Serialization 名前空間を使っているので System.Xml.dll への参照を references に追加しています。 .NET を使うと jQuery とは一味違った感じでXML操作ができそうです。公式のサイトでは System.Drawing を使って画像ファイルの形式を変えて保存したり、Zipファイルを生成したり、 ADO.NET を使ってデータベースに接続したりする方法などいろいろ紹介されています。Edge.js を利用すれば Node.js で .NET のライブラリや Windows であれば Win32 API が使えます。また、今回は C# でやりましたが、 F# や Python (IronPython) など .NET 上で動く言語であれば利用できます。簡単なメモ書きですが Edge.js に興味を持っていただけたら幸いです。Edge.js
http://tjanczuk.github.io/edge/#/GitHub - tjanczuk/edge: Run .NET and Node.js code in-process on Windows, MacOS, and Linux
https://github.com/tjanczuk/edge/tree/master


