        /// &lt;summary&gt;
        /// レーダーチャートを描画する
        /// &lt;/summary&gt;
        /// &lt;param name="graphics"&gt;XGraphics&lt;/param&gt;
        /// &lt;param name="x"&gt;描画領域のX開始位置&lt;/param&gt;
        /// &lt;param name="y"&gt;描画領域のY開始位置&lt;/param&gt;
        /// &lt;param name="perfect"&gt;満点&lt;/param&gt;
        /// &lt;param name="score"&gt;各点数の配列(配列の個数だけ梯子を作成)&lt;/param&gt;
        private void CrateRader(XGraphics graphics, double x, double y,double perfect, double[] score)
        {
            //ベースになる領域
            const double base_width = 200;//描画領域の幅
            const double base_hight = 200;//描画領域の高さ
            const double radius = 100;//半径
            const double ellipse = 10;//枠線カド丸サイズ

            double tick = radius / perfect;//目盛の幅
            double[,] pos = new double[2,score.GetLength(0)];//点数の位置

            XPen pen = new XPen(XColors.Gray, 1);//梯子
            XPen pen_tick = new XPen(XColors.Gray, 2);//目盛
            XPen pen_score = new XPen(XColors.Red, 4);//点数(頂点)
            XPen pen_bridge = new XPen(XColors.Red, 1);//点数と点数を結ぶ線

            XPen pen_frame = new XPen(XColors.Black, 1);//レーダーチャートを囲む枠

            //枠
            graphics.DrawRoundedRectangle(pen_frame, x, y, base_width, base_hight, ellipse, ellipse);

            //レーダーチャート
            double dec = 360 / score.GetLength(0);//角度の増分=360÷scoreの個数
            double deg = 0;//梯子を伸ばす角度
            for (int line = 0; line &lt; score.GetLength(0); line++)
            {
                double x1 = x + radius + (get_sin(deg) * radius);//斜辺xSinθ
                double y1 = y + radius - (get_cos(deg) * radius);//Cosθ
                double x2 = x + base_width / 2;//中心位置は固定
                double y2 = y + base_hight / 2;//中心位置は固定
                graphics.DrawLine(pen, x1, y1, x2, y2);//放射状の線

                //点数の位置の初期化
                pos[0, line] = 0;
                pos[1, line] = 0;

                for (int j=1; j &lt;= perfect; j++)//目盛
                {
                    double tickx = x + radius + (get_sin(deg) * (tick * j));
                    double ticky = y + radius - (get_cos(deg) * (tick * j));
                    graphics.DrawRectangle(pen_tick, tickx, ticky, 0, 0);

                    //点数
                    if (j == score[line])
                    {
                        pos[0, line] = tickx;//点数のx軸を保存
                        pos[1, line] = ticky;//点数のy軸を保存
                    }
                }//目盛
                deg += dec;//次の描画角度
            }//line

            //点数を線で結ぶ
            for (int line = 0; line &lt; score.GetLength(0); line++)
            {
                if(line == score.GetLength(0) - 1)//最後の頂点と先頭の頂点を結ぶ
                {
                    graphics.DrawLine(pen_bridge, pos[0, line], pos[1, line], pos[0, 0], pos[1, 0]);
                }
                else//頂点と次の頂点を結ぶ
                {
                    graphics.DrawLine(pen_bridge, pos[0, line], pos[1, line], pos[0, line + 1], pos[1, line + 1]);
                }
                graphics.DrawEllipse(pen_score, pos[0, line], pos[1, line], 0, 0);//点数(頂点)
            }//点数を線で結ぶ
        }

        /// &lt;summary&gt;
        /// sin
        /// &lt;/summary&gt;
        /// &lt;param name="deg"&gt;角度&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        private double get_sin(double deg)
        {
            double rad = System.Math.PI * deg / 180.0;//ラジアンに変換
            return System.Math.Sin(rad);
        }

        /// &lt;summary&gt;
        /// cos
        /// &lt;/summary&gt;
        /// &lt;param name="deg"&gt;角度&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        private double get_cos(double deg)
        {
            double rad = System.Math.PI * deg / 180.0;//ラジアンに変換
            return System.Math.Cos(rad);
        }
    }


