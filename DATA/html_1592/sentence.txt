More than 1 year has passed since last update.WPFを触り始めて一番最初にピンとこなかったのは
ViewとViewModelとの間でどのようにイベントやデータを連携しているのか？ ということでした。
そのあたりについて学習したので、理解の整理のためにアウトプットします。WPF実践
この資料をベースに学習を進めましたが、わかりやすくまとまっておりとても参考になりました。MVVMは Mode-View-ViewModel Pattern と呼ばれるデザインパターンの1つ。
ソフトウェアをModel、View、ViewModelの3種類に分類し設計・実装していきます。
MVC(Model-View-Controller)が派生したものらしく、考え方に共有したものが多いです。今回はこの中のViewとViewModelにフォーカスした内容になっています。.xamlファイルはViewで、.xaml.csファイルがViewModelだと思っていたが 全然違うらしい 。
Visual StudioでWPFのプロジェクトを作成した際にデフォルトで用意されているファイル構成は
そもそもでMVVMを意識したものになっておらずViewModelが存在しない状態になっている。
なので、まずはViewModelを作成することから始める。.xaml.csがViewModelでないのなら、じゃぁ何者なのか。
正解は .xamlと.xaml.csの2ファイルを合わせてView となる。
.xaml.csは コードビハインド 呼ばれ、本来Viewに関する裏処理を担当するのだが
MVVMの考え方からは逸脱してしまうため、原則何も記載しないのがよいとされているようだ。ViewModelで保持している情報をView上に表示するためには Binding を使用する。
やることは2つ。DataContextは、かなり咀嚼するとViewのデータ保管領域...でいいのだろうか。
ここに対してViewModelのオブジェクトをセットすることで、View側から参照することが可能となる。
DataContextへの設定方法は色々あるが、ViewのXAMLに記載するのがよい。どこで使用するかはBindingを使用するさて、ここからが少しややこしい。
ViewModelで保持している情報が変化したとき、その変化をViewに伝え何かしらの動作をさせたいケースなどは多いと思う。
例えば、テキストボックスに文字が入力されたときに〇〇したい、などだ。
そういったことをやりたい場合は INotifyPropertyChanged インターフェースを実装することで実現できる。プロパティのSetterで値の変更がある時に、 PropertyChangedEventHandler イベントを発火させることで
Viewにプロパティの変化を伝搬させることができます。逆にViewからViewModelへ、UIの操作イベントなどを伝えたい場合もある。
そういうった時は ICommond インターフェースを実装する。どのUIから通知するかはView側に記載する。


