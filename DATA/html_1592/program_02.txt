
namespace MVVMPractice
{
  internal class DelegateCommand : ICommand
  {
    private Action&lt;object&gt; _Execute;
    private Func&lt;object, bool&gt; _CanExecute;

    public DelegateCommand(Action&lt;object&gt; Execute)
      : this(Execute, null)
    {
    }

    public DelegateCommand(Action&lt;object&gt; Execute, Func&lt;object, bool&gt; CanExecute)
    {
      this._Execute = Execute;
      this._CanExecute = CanExecute;
    }

    #region ICommandの実装
    public event EventHandler CanExecuteChanged;

    public void RaiseCanExecuteChanged()
      =&gt; CanExecuteChanged?.Invoke(this, EventArgs.Empty);

    public bool CanExecute(object parameter)
      =&gt; (this._CanExecute != null) ? this._CanExecute(parameter) : true;

    public void Execute(object parameter)
    {
      if (this._Execute != null)
      {
        this._Execute(parameter);
      }
    }
    #endregion
  }
}

