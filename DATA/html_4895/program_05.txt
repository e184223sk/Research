
    public class SequenceValue : AsnValue
    {
        public const byte TAGTYPE = 0x30;

        private byte tag;

        public List&lt;AsnValue&gt; AsnValues { get; set; }

        public SequenceValue()
        {
            AsnValues = new List&lt;AsnValue&gt;();
            this.tag = TAGTYPE;
        }
        public SequenceValue(byte tag)
        {
            AsnValues = new List&lt;AsnValue&gt;();
            this.tag = tag;

        }

        public override List&lt;byte&gt; GetBytes()
        {
            List&lt;byte&gt; result = new List&lt;byte&gt;();

            foreach (AsnValue value in AsnValues)
            {
                result.AddRange(value.GetBytes());
            }
            result.InsertRange(0, GetFieldLengthByte(result.Count()));
            result.Insert(0, GetTag());

            return result;

        }

        public override byte GetTag()
        {
            return tag;
        }

        public void SetTag(byte tag)
        {
            this.tag = tag;
        }

        public static AsnValue Parse(byte[] valueByteData, byte tag)
        {
            SequenceValue result = new SequenceValue(tag);

            int index = 0;
            for(; ; )
            {
                AsnValue value = AsnValue.Parse(valueByteData, ref index);
                if (value == null)
                {
                    break;
                }
                result.AsnValues.Add(value);
            }
            return result;
        }

    }

