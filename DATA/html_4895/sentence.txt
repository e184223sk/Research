More than 3 years have passed since last update.C#でSNMPメッセージのデコーディングの実装のためのSNMP受信メッセージの見える化を行うまでの一連の記事でSNMPメッセージのエンコード処理とUDP送信処理、SNMPメッセージの受信処理までの実装を行いました。
今回は受信したSNMPメッセージをのデコードを行います。受信したSNMPメッセージもASN.1のBERでエンコードされていますので、BERのルールに従って受信したバイト配列のデータをデコードしていきます。
なお、ここでは「1.3.6.1.2.1.1.5」(sysName)を取得するGetNextメッセージのレスポンスのデコードをするのに必要最低限のデコードメソッドのみを作成しています。前回までに作成しているAsnValueクラスに静的メソッドとしてParseメソッドを追加します。
引数は解析対象のデータ１バイト目のTAG値を取得してTAG値に応じて、型に応じた値クラスのParse処理を起動しています。
各値クラスのParse処理にはデータ部分のバイトのみを引数として渡しています。
なるべく分岐処理とループ処理を書かないように心がけていますが、TAG値に応じた分岐処理だけは残りました。GetLengthは、TLVのL（Length）の部分、データのバイト数の取得をしています。またLengthを表すデータは1バイトを超える場合もありますので、Lengthデータ自体の長さを呼び出し元に返しています。
これにより、データ部分が何バイト目から開始されるかが分かります。これまでに実装済のIntegerValueクラスにParseメソッドを追加しました。
バイトオーダーが受信メッセージはBigEndianになっているためLittleEndianに反転後に、BigIntegerで一気に整数に変換しています。エンコードど逆にASCIIエンコーディングでデコードしています。
なお、OCTET STRINGは必ずしもASCIIエンコードでデコードできるとは限りませんが、今回はsysNameの取得のみ実施していますので、ASCIIエンコードを実施しています。sysName以外ではバイナリデータとしてデコードする必要がある場合もあります。Object Identifierのデコードが一番難しいのですが、前回までの記事でObject Identifierのエンコードの説明をしているので、その逆を実施するだけです。まずは各バイトの8ビット目の値が1の場合は8ビット目が0になるバイトまでで1つの整数を表しています。
各バイトの8ビット目を0とする7ビットで128進数の各位の数字を表しています。
また、1バイト目は特別なルールがあり、Object Identifierの1つ目 x 40 + 2つ目の値となっているため分解しています。子要素をループでデコードしてじリストに格納していきます。下記のような画面を作成して受信メッセージのデコードをしていきます。
送信メッセージの作成は前回までで実施済ですので、そちらの解説を参考にしてください。受信メッセージの処理部分を変更しています。
受信したメッセージをAsnValue.Parse処理を起動してでコートしています。
デコード済のメッセージをShowReceiveValueで画面のテキストボックスに表示します。SNMPのメッセージの階層構造に従って、子要素をたどっていってます。SNMPの階層構造はWiresharkなどでのパケットキャプチャを見ると分かりやすいです。下記のような階層構造になっています。()内の数字は子要素内のインデックス番号です。実行結果は下記の画面となります。
Windows10 のSNMPのエージェント機能を有効にしています。
その方法は前回までの記事に記載していますので参照お願いします。デコードしたAsnValueの階層構造がどのようになっているかは、Visual Studioのデバッグモードでデコードされた変数をウォッチして確認が可能ですので、ここまでの解説で実際に実装して試すことが出来た方は是非デバッグモードでデコード結果を確認することをおすすめします。自分の目で確かめることにより、さらに他の型のデコード処理を自分で追加することもできるようになるかと思います。


