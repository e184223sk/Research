More than 3 years have passed since last update.今日は、Azure Search と一日格闘したので、その成果を記録しておきたい。現在パーソナルプロジェクトを開発中なのだが、CosmosDB で前方一致のクエリをする必要がある場面があった。当初考えたソリューションでは、該当の項目の先頭文字をインデックスとして保存して、文字の長さ別にそこをサーチするという作戦を考えた。ところが周りの人は Azure Search をすすめていたので素直に従ってみました。確かにロジックでごねごねやるよりも、ずっときれいだし、何より、Query を発行すればするほど、RUの制限が近づきますが、Search を併用すると、そこを防ぐことも出来て一石二鳥です。ついでにいうと、前方一致どころか、全文検索もできますし、ほかのカラムも検索できますし、自分が作っているプロダクトの要素からするとそちらのほうが１００倍フィットしそうです。導入時の課題としては、むかしちょろっと触ったことがあるぐらいで、あまりちゃんと使ったことがなかったところ、いきなり本番でガチで運用するシステムに導入するので、がっつり勉強が必要でした。勉強以外の点では次の点が疑問でした。ちなみに、最後の SDK ですが、私が公式ドキュメントのページ Create an Azure Search index using the .NET SDKを見ると近くにサンプルのページがありますが、私がたまたま見たプロジェクトが、GAのものではなく、PreRelease の Fluent API のもので、ドキュメントは、Microsoft.Azure.Search なのだけど、あまりAPIの説明もなかったので（実際はGetting Started with Azure Search using .NETにサンプルがあったｗ)自分でReSharperを使ってデコンパイルしまくりながら、動作を確認していきました。上記のことについて整理しておきたいと思います。今回は Terraform でサクッと作成残念ながらここは手段がなく、まだ実装していません。REST API があります。これをたたけばadmin key が取得できます。Terraform にはないので貢献しようかな、、、他には Azure CLI を使う手もあります。Cosmos DB に対してインデックスをかけたい場合は CosmosDB に対してインデックスとデータソースを作って、インデクサーというもので、スケジューリングする必要があります。まずはインデックス。この３つをやれば、ポータル上で操作するのとほぼ同じような設定ができます。Cosmos DB のテーブルのうち、検索対象にしたいものにアノテーションをつけます。ちなみに、元のはこんなのだったのですが、このままではうまくいきませんでした。Release[] というのがあるので、実際にIndexを作ると、Release が見つからないとエラーになります。悔しいですが、Search の項目を表すオブジェクトを作りました。SearchPackage.cs[SerializePropertyNameAsCamelCase] をつけておくと、Public のプロパティをCamelCase でサーチの項目とみなしてくれます。ちなみに、[JsonProperty()] が指定しているときは、そちらが優先されます。ほかには、Data.Annotation.Key としてキーの値を、[IsSearchable] や [IsFilterable] は、検索したい方法について書いてあります。 これらは、Request Body Syntaxを参照してみてください。アトリビュートによって、どの項目に対してサーチをかけたかを設定できます。ポイントの一つとしては、インデックス側からすると、CosmosDB のデータを物理削除しても、Search が知りえないので、論理削除する必要があります。IsDeleted がその項目です。論理削除の項目は後で指定します。これに対しての、index の作成についてはこんな感じです。BuilderForType のところで、先ほどのインデックス対象のモデルを指定します。CreateOrUpdateWithHttpMessageAsync は無ければ作るし、あったらアップデートするので便利な感じです。ちなみに、インデックスの名前は、小文字で、字数制限もある様子です。インデックスが上記のでできますが、次はデータソース、つまり、インデックスを作る元です。CosmosDB に接続します。若干ややこしいですが、CosmosDB に接続するコネクションストリングを渡します。HighWaterMarkChangeDetectionPolicy は、_ts つまり最終更新の時間を見て、前にインデックスを作成したときより新しければ、インデックスを作成します。また、先ほど説明した、論理削除の項目も指定しています。これで、データソースも完成。最後にこれらを合わせて、Indexer を作成します。次のコードでは、30分おきにインデックスを更新するように、インデクサーを設定しています。今まで作ったデータソースやインデックスの値、スケジュールを入れておしまい！これも、あったら更新するので気軽に使えます。参考までにサーチはこんな感じちなみに、サーチのクエリですが、目標だった全文検索は、ポータルだとこんな感じで実行できました。ポイントとしては、前方一致だけでよくても、IsSearchable が必要という感じです。このようにすれば C# の世界でポータルでやったのと同じような設定ができて、自動でリソースをデプロイして、コンフィグして環境を作れます。最近は、C# は、.Net Core だったら Linux でも動作するので、私は、.Net Core でこのプログラムを作っておいて、Environment Variables 経由で、値を引き渡してこのプログラムを実行して、自動でコンフィグみたいなことをよくやっています。 CosmosDB の初期データセットアップみたいなもの同じ方法でやっています。ちなみに、今回のコードですが、私のプロジェクトの一部ですが、シェアしておきます。参考


