More than 1 year has passed since last update.NuGetを検索するとAzure Table Storage用のTargetをいくつか見かけますが、.NET Coreへの対応状況や依存ライブラリの最新化状況などの制約があって微妙です。
また、Azure Table StorageまわりのSDKはCosmosDBに切り出されたりしてややこしいので、たかがEntityの追加のみで依存関係を増やしたくありません。
そんなわけで、NLog標準のWebServiceTargetを使った書き込みを試したら結構ハマりどころがあったので共有します。ターゲットフレームワークはNLogがサポートするものであれば何でも良いですが、.NET Core 2.0〜3.0までで動作確認をしました。NuGetからインストールします。この記事では4.6.8の利用を前提としていますが、多少前後しても問題ないと思います。SASとはShared Access Signatureの略で、あらかじめリソースやそれに対するアクション（参照、書き込みなど）、利用可能期間を制限したトークンです。これを含むURLを使うことで、リクエスト都度署名をするといった手間も省けるためWebServiceTargetで利用する上では好都合というわけです。作成は簡単で、Azure Portalで対象ストレージアカウントを選択し、メニューの「Shared Access Signature」に移動します。対象リソースなどを選んで「SASと接続文字列を作成する」ボタンを押下後、表示された「Table service の SAS URL」を控えておいてください。
まずは以下の通りWebServiceTargetを設定します。名前は何でもいいですが、ここではAZTBLTargetとしてみました。簡単に説明すると、ターゲットの種類としてWebServiceのものを定義していて、その通信手続きとしてJSONデータのPOST、そのJSONのパラメータとしてPartitionKeyやRowKeyを含む7項目を送信するようにしています。なおPartitionKeyとRowKeyはTable Storageとして必須の項目です。さて、説明の中でurlアトリビュートの説明を飛ばしていましたが、ここがハマりポイントです。コピペしてurlに貼り付けるだけではうまくいきません。先の手順で取得したSAS URLを、以下の通り修正する必要があります。修正内容は以下の通り。それでは実際に書き込んでみましょう。本記事のポイントは設定方法ですので、書き込み自体は一般的な手順に従えばOKかと思います。ちょっとハマるかもしれないポイントとしては、最終行のLogManager.Shutdown();を実行しないと、ログ送信前にプロセスが終了してしまいTable Storgeに書き込まれない場合があるところでしょうか。NLogには便利な非同期処理の仕組みAsyncWrapperターゲットがあります。ログメッセージをキューに貯めてバッチ的に別スレッドで処理してくれるといった便利なものです。
使い方は超簡単で、targetsのasyncアトリビュートにtrueを設定するだけで全てのターゲットへの書き込みが非同期に行われます。一部の書き込みのみを非同期にしたい場合は、ラッパーの名の通り非同期にしたいターゲットをAsyncWrapperで囲みます。このとき、ruleに設定するnameもラッパーのものにすることに注意です。詳細は公式Wikiを読んでみてください。
https://github.com/nlog/NLog/wiki/AsyncWrapper-targetそもそも何でAzure Table Storageにログを書き込もうと思ったかというと、Gateboxというデバイス向けのアプリ開発をはじめたことがきっかけです。実機デバッグする際にコンソール出力やファイルファイルを選択できないことから、リモートにログ出力をする方法を探ることにしました。ログのためにサーバーを用意するのもアレなのでAzureに・・・という経緯です。UnityのConsoleへのログ出力用ターゲットも同梱したファクトリーぽいものを作りましたのでよかったら使ってみてください。NLogFactoryForUnity
https://github.com/uezo/NLogFactoryForUnity


