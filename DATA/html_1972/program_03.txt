
/// &lt;summary&gt;
/// Invoked in RenderPreview() to define colors of AudioClip preview curves
/// &lt;/summary&gt;
/// &lt;param name="channel"&gt;&lt;/param&gt;
/// &lt;param name="t"&gt;Time (x value) between 0f(left-end), 1f(right-end)&lt;/param&gt;
/// &lt;param name="min"&gt;Minimum y value of the curve at the time&lt;/param&gt;
/// &lt;param name="max"&gt;Maximum y value of the curve at the time&lt;/param&gt;
/// &lt;param name="minOfAll"&gt;Minimum y value of the curve&lt;/param&gt;
/// &lt;param name="maxOfAll"&gt;Maximum y value of the curve&lt;/param&gt;
/// &lt;returns&gt;Color of the curve at the time&lt;/returns&gt;
public delegate Color AudioCurveColorSetter(int channel, float t, float min, float max, float minOfAll, float maxOfAll);

/// &lt;summary&gt;
/// Render waveform preview of the clip in given rect. If clip is null, do nothing.
/// &lt;/summary&gt;
/// &lt;param name="rect"&gt;Rect in which the wave will be rendered&lt;/param&gt;
/// &lt;param name="clip"&gt;AudioClip source&lt;/param&gt;
/// &lt;param name="colorSetter"&gt;Delegate for coloring the wave. Default: Color(1,0.54902,0)&lt;/param&gt;
/// &lt;param name="amplitudeScale"&gt;Y-scale amplification of the wave&lt;/param&gt;
public static void RenderPreview(Rect rect, AudioClip clip, AudioCurveColorSetter colorSetter = null, float amplitudeScale = 1)
{
    if (!clip) return;

    //公式実装に倣って補正
    amplitudeScale *= 0.95f;

    //データ取得
    var audioImporter = InternalAudioUtil.GetImporterFromClip(clip);
    float[] minMaxData = (audioImporter == null) ? null : InternalAudioUtil.GetMinMaxData(audioImporter);

    //全体の最大値・最小値を計算
    float minOfAll = 0;
    float maxOfAll = 0;
    for(int i=0; i&lt;minMaxData.Length; i++)
    {
        minOfAll = Mathf.Min(minMaxData[i], minOfAll);
        maxOfAll = Mathf.Max(minMaxData[i], maxOfAll);
    }
    minOfAll *= amplitudeScale;
    maxOfAll *= amplitudeScale;

    //チャンネル数・サンプル数
    int numChannels = clip.channels;
    int numSamples = (minMaxData == null) ? 0 : (minMaxData.Length / (2 * numChannels));
    //１チャンネルごとの専有height
    float h = rect.height / numChannels;

    //各チャンネルについて波形描画
    for (int channel = 0; channel &lt; numChannels; channel++)
    {
        //描画範囲計算
        Rect channelRect = new Rect(rect.x, rect.y + h * channel, rect.width, h);

        //描画内容定義
        AudioCurveRendering.AudioMinMaxCurveAndColorEvaluator dlg = delegate (float x, out Color col, out float minValue, out float maxValue)
        {
            if (numSamples &lt;= 0)
            {
                minValue = 0.0f;
                maxValue = 0.0f;
            }
            else
            {
                //minMaxDataの現在のx座標に対応する値を取得
                float p = Mathf.Clamp(x * (numSamples - 2), 0.0f, numSamples - 2);
                int i = (int)Mathf.Floor(p);
                int offset1 = (i * numChannels + channel) * 2;
                int offset2 = offset1 + numChannels * 2;
                minValue = Mathf.Min(minMaxData[offset1 + 1], minMaxData[offset2 + 1]) * amplitudeScale;
                maxValue = Mathf.Max(minMaxData[offset1 + 0], minMaxData[offset2 + 0]) * amplitudeScale;
                if (minValue &gt; maxValue) { float tmp = minValue; minValue = maxValue; maxValue = tmp; }
            }
            //色を指定
            col = colorSetter?.Invoke(channel, x, minValue, maxValue, minOfAll, maxOfAll) ?? new Color(1, 0.54902f, 0, 1);
        };

        //描画
        AudioCurveRendering.DrawMinMaxFilledCurve(channelRect, dlg);
    }
}

//単色指定ver
public static void RenderPreview(Rect rect, AudioClip clip, Color color, float amplitudeScale = 1)
{
    RenderPreview(rect, clip, (_, __, ___, ____, _____, ______) =&gt; color, amplitudeScale);
}

//時間経過でグラデーションver
public static void RenderTimeAwarePreview(Rect rect, AudioClip clip, Color start, Color finish, float amplitudeScale = 1)
{
    RenderPreview(rect, clip, (_, t, ___, ____, _____, ______) =&gt; Color.Lerp(start, finish, t), amplitudeScale);
}

//振幅の大小でグラデーションver
public static void RenderAmplitudeAwarePreview(Rect rect, AudioClip clip, Color lowAmp, Color highAmp, float amplitudeScale = 1)
{
    RenderPreview(rect, clip, (channel, _, min, max, minOfAll, maxOfAll) =&gt;
        Color.Lerp(lowAmp, highAmp, Mathf.Clamp01((max - min) / (maxOfAll - minOfAll))), amplitudeScale);
}

