VisualStudio のプロジェクトテンプレートに「gRPCサービス」が追加され、gRPC を使ったアプリケーションの開発がしやすくなりましたが、このテンプレートはサービスアプリケーション用のものであるため、ライブラリを作成したい場合には無駄な実装が含まれてしまいます。ライブラリ用のテンプレートで proto ファイルからソースコードを生成する方法を説明します。加えて、proto-gen-doc を利用してAPI仕様書を出力する方法も説明します。使用した環境は次の通りです。
Microsoft Visual Studio Community 2019
Version 16.8.2Grpc.AspNetCore のバージョンは 2.36.0 です。テンプレート「クラスライブラリ(.NET Core)」を選択して新規プロジェクトを作成します。プロジェクトのプロパティを開き、対象のフレームワークを次の中から選択します。Grpc.AspNetCore は .NET Standard  や .NET Framework をサポートしていません。NuGet で Grpc.AspNetCore をインストールします。プロジェクト内に proto ファイルを配置するフォルダを作成します。フォルダを作成するのは管理しやすくするためだけであり、フォルダ名に規約はありません。proto ファイルを追加します。アイテムテンプレートに proto はないようです。「テキストファイル」でよいと思います。拡張子を proto とするとソリューションエクスプローラー上のアイコンが変わりますので、ファイルの種類を認識しているとは考えられます。ファイルのビルドアクションを「Protobuf compiler」に変更します。リストアップされるプロパティ群が Protobuf に対応したものに変わります。proto ファイルに IDL を記述します。プロジェクトをビルドまたはリビルドすると IDL からソースコードが生成されます。cs ファイルはプロジェクトには追加されず、プロジェクトの obj フォルダ配下に出力されます。「カスタムツールの実行」では生成されませんでした。ライブラリを使用するアプリケーションの参照アセンブリに dll ファイルを追加します。生成されたクラスに対して partial メンバーを追加するには、いったんビルドした後で partial クラスを追加します。全てのデータ型に対して確認してはいませんが、生成されるソースコードの実装は同じであるようです。
Grpc.AspNetCore は Grpc.Core には依存していませんが、Grpc.Core.Api と Grpc.Tools を利用しています。ある proto ファイルの中で別のファイルに定義された型を参照するには、そのファイルをインポートする必要があります。Nuget でインストールされた Grpc.Tools (2.36.1) のパッケージフォルダ内には以下のファイルが組み込まれています。これらのファイルをインポートするには import を記述すればよいです。Grpc.Tools のパッケージフォルダに上記以外のファイルを配置してインポートすると、IDL 上のエラーにはならないものの生成されたソースコード内でコンパイルエラーが発生します。次の GuidValue.proto を Grpc.Tools のパッケージフォルダに配置してインポートすると、次のような SampleMessage クラスのソースコードが生成されますが、Example.Protobuf.GuidValue クラスや Example.Protobuf.GuidValueReflection クラスが生成されず、コンパイルエラーになります。GuidValue.proto がプロジェクトに含まれていないためです。前述の GuidValue.proto をプロジェクト内に配置します。GuidValue.proto をインポートする場合、フォルダ名/ファイル名 で指定します。ソースコードが生成され、ビルドも成功します。前述の GuidValue のような汎用的な型は、複数のプロジェクトで共用できると便利です。
各プロジェクトに GuidValue.proto を含めると、それぞれのアセンブリに GuidValue 型が定義されます。それらのアセンブリを一つのプロジェクトから参照しようとすると、型の重複が発生してしまいます。
共用したい型を定義したプロジェクトを作り、アセンブリを参照させることで型を共用できます。共用したい型を定義するプロジェクトを作成します。CommonLibrary.csproj とします。CommonLibrary.csproj に GuidValue.proto を追加します。CommonLibrary.csproj をビルドします。GuidValue 型を使用するプロジェクトを作成します。SampleLibrary.csproj とします。SampleLibrary.csproj の参照に CommonLibrary.dll を追加します。SampleLibrary.csproj に GuidValue.proto を追加します。GuidValue 型を生成対象から除外するため、GuidValue.proto のプロパティを変更します。SampleLibrary.csproj をビルドします。なお、上記の手順では各プロジェクトに GuidValue.proto ファイルがコピーされます。リンクファイルとしてプロジェクトに追加できるとよいのですが、リンクファイルは Grpc.Tools から読み取ることができないようで「ファイルが見つからない」エラーが発生してしまいます。proto ファイルで定義した内容をドキュメントに出力できると便利です。proto-gen-doc を利用することが多いと思いますが、これをビルド時に呼び出す方法を紹介します。proto-gen-doc に対応していそうなライブラリを Nuget で探してみましたが見つかりませんでしたので、プロジェクトのビルド後イベントを利用することにしました。proto-gen-doc を GitHub から入手し、適当なフォルダに展開します。バッチファイル proto-gen-doc.bat を作成し、プロジェクトのビルド後イベントに次のコマンドを記述します。任意のプロジェクトテンプレートからも proto ファイルからのソースコードを生成することができることを確認しました。
コマンドラインツールを使わずに Visual Studio 上の操作だけで処理できるのは便利ですが、できることは制限されるようです。


