More than 1 year has passed since last update.こんちわす。はじめまして、Souと申します。
遅かれながら初めて記事を書くわけですが、悩んだ挙句、自分がPGする上で一番とっつきにくかった
interfaceについて書こうと思います。そもそも明確な利点がわからなかった経験があり、同じ悩みを抱えたエンジニアはいると思います。。
では実際にコードを見ながらアプローチしていきましょう。言語はc#で書きますが、スキル的に読むのは難しくないと思いますので一緒に頑張りましょう!よく聞くやつですね。最初は「それだけ？？」と思うかもしれません。僕も最初はそうでした。
具体的には、"あらゆる変更に強くなる"という風に置き換えれます。例えば商品情報をデータベースから取得するという想定で考えましょう。
商品を識別できるユニークな値「id」を引数にし、それを条件に商品情報を取得するといったモノを想定してください。インターフェース具象クラス実行クラス※使用するフレームワークであったりアーキテクチャによって実行クラスの名前は様々だと思うので今回は「Main」クラスにさせてください。とします。
だが、ここでパフォーマンスなどの問題があってデータベースからではなくキャッシュサーバーから取得するように変更が必要になりました。
リファクタリングを行う上で大事なのは既存の処理を出来るだけ変えないことです。変更に強くなくてはなりません。では、さっそくキャッシュから取得するクラスを作りましょう。SearchItemQuaryFromDataBaseクラスと同じインターフェースISearchItemQuaryを使用します。
これによりExecuteメソッドを強要できます。
この時点でDBとCacheで同じメソッド名を持っていることを念頭に置いてください。これでリファクタリングは終わりです。同じインターフェースを噛ませているので、実行クラスで変える箇所はありません。※Mainメソッドのコンストラクタの具象クラス(DBかCache)はDIコンテナで結びつけてると想定してください。
簡単に言うとインターフェースと具象クラスをアプリ起動時紐付けれるやつ。初学者の方はあまり気にしなくていいです。もう既に①の例で証明できてるのですが、もう一度確認してみましょう。①でDBとCacheの2つのクラスを作成しましたが、前回も述べたようにクラスが増えたからといってMainクラスは何の変更もしていません。
理由はコンストラクタの引数がインターフェースで定義しているためです。
ISearchItemQuary を使用しているクラスであればこのMainクラスは誰でも使用することが出来ます。
まさに柔軟性が垣間見えた瞬間です！TDD(テスト駆動開発)を行う上で、interfaceを作成してテストを実施してから、具象クラスを作成するのが定石だと思います。
モックを使用した例で見てみましょう。
↓先程のinterfaceです。↓テストクラスこの時、ISearchItemQuaryの具象クラスは未作成だと考えてください。DBにもキャッシュサーバーにも接続する処理がないという状況です。
モックの概念は個別で調べてください。まあ簡単に言うとDBなどがなくても値をあたかも取得したかのように振舞えます。このようにinterfaceを使用することで実際の処理がなくてもモックに振舞いを行わさせることで、テストを容易にし、品質を担保できるのです。まだまだ、factory method、SOLID原則など
参考になるモノはあるので、初学者の方はこの辺からアプローチしてみてはいかがでしょうか?


