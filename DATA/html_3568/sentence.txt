More than 1 year has passed since last update.目次
→https://qiita.com/tera1707/items/4fda73d86eded283ec4fTaskを使って、重くて時間がかかる処理があっても、UIを固めずに済ませたい。こちらで、非常にわかりやすい説明をして頂いている。
ので、詳しい内容はそちらを参考として、理解を確かめる際に作ったサンプルを備忘録代わりに挙げておく。Task.Run()で、処理をスタートしつつ、Taskの戻り値を受け、それをTask.WhenAllで使って処理が終わるまで待つ。どうなるのか？と思って試したコード。
Task.Run()で開始したタスクが、Task.WhenAll()の前に終わっていたらどうなる？
⇒結果、Task.WhenAll()を即通過した。Taskの処理から、戻り値を受け取ることができる。
WhenAll()に渡したTaskすべてから受け取れる。WhenAllで待つTaskが別々の戻り値の型を持つ場合でも、戻り値を受け取れる。
Taskが完了した後に、Resultプロパティを見る。処理が終わる前にResultを見ると、task1.Wait()と同じ動きをする。(ここでブロックがかかるため、UIも固まるので注意)↓↓↓↓↓↓こちらに書かれている通り、Waitをするときは注意。
Task内でawaitした後、Taskを呼んだ側でそのTaskをWaitしてしまうと、デッドロックする。どうしてそうなるか？は、こちらの解説が分かりやすい。
Task.Run()したとき、awaitしたときのスレッドの動きが図解されている。Taskを極めろ！async/await完全攻略
https://qiita.com/acple@github/items/8f63aacb13de9954c5daC# 今更ですが、await / async
https://qiita.com/rawr/items/5d49960a4e4d3823722f#%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88%EF%BC%94%E3%81%A9%E3%81%AE%E3%82%B9%E3%83%AC%E3%83%83%E3%83%89%E3%81%A7%E5%87%A6%E7%90%86%E3%81%8C%E5%AE%9F%E8%A1%8C%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%E3%81%AE%E3%81%8B++C++; // 未確認飛行 C
https://ufcpp.net/study/csharp/sp_thread.html


