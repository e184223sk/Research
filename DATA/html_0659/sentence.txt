初投稿になります
C#信者のQAエンジニアです
以後お見知りおきを…さてさて学生の味方ともいえるサイゼリヤ
自分も学生の頃は部活の打ち上げやテスト勉強にてドリンクバーとドリアで何時間も粘ったものですそんな時一度は見たことのある間違い探し今回はこれを自動で解くアプリをC#で作成してみようと思いますC#とOpenCVSharpを使用し
サイゼリアの間違い探しを右の画像と左の画像として撮影
その差分を画像としてわかりやすく出力するプログラムの流れとしては
・画像の変換(撮影することを考慮して左右の画像のサイズを合わせる)
・画像の差分抽出(R,G,Bごとに差分を出す)
・差分と元画像を合成して表示テスト用にサイゼリヤ公式サイトの画像を変形させたものを用意
アプリ画面

最終生成画像(result.jpg)

取り除ききれなかったごま塩ノイズが少しありますが多めに見てください…
ちなみに変形していない画像を使うと

きれいに取れますね
（変換によるビットの抜け？が原因でごま塩になっているものと思われます）C#
.Net Framework 4.7.2
OpenCvSharp3-AnyCPU Ver4.0.0Windows 10 Home 64Bit
Intel Core i7 9700
RAM 16GB
GPU NVIDIA GeForce GTX 1660以下に大まかな流れを紹介していきます
GitHubにソース類をおいてあるので参考にしてみてください
https://github.com/uechan16/SaizeriyaMachigaisagashi画像は机にあるサイゼリアのメニューを撮影することを考えると上からとっても多少のゆがみが発生すると思います
そんなゆがみを射影変換である程度同じ角度、大きさに整えていきます変換の手法は特徴点マッチングです
画像の特徴を割り出し、その特徴同士を比較する方法ですこの辺は特徴量マッチングで調べるとよく出てくるコード丸パクリです
こうして出てくる画像がこちら
LeftToku.jpg

RightToku.jpg

丸がついているところが画像の特徴を表していますそしてこの特徴同士をマッチングoutput.jpg

線で結ばれているところがマッチした特徴ですこれらの情報をもとに変形WarpedSrcMat.jpg

綺麗に変形できました
この時点で射影変換した画像はだいぶ画質が劣化しているのがわかります
これが前述のごま塩ノイズの原因です今回はMatのデータをRGBごとに抽出してそれぞれのチャンネルごとに差分を出し、
どこか一つのチャンネルでも差分があった部分は差分ありとしてマークするようにしました
射影変換した画像の劣化によりだいぶ関係ない部分も白くなっていますが
これは別の工程で緩和していきます各チャンネルを統合し、どこかのチャンネルで差分がある場所は
すべて差分ありとしてCv2.BitwiseOr()でマスク画像を生成しますwiseMat.jpg

だいぶ汚いですねここから汚いノイズを緩和していきますオープニング処理と二値化処理にて画像の汚い部分を消していきます
dilationMat.jpg
ここからは画像の合成に入りますCv2.AddWeighted()を使えば合成する画像の割合を変えることができるので便利です
今回は差分画像を多めに加算することで差分をわかりやすくしました実際に行って画像を撮影してきました
左の画像

右の画像
ん～～～～～～～～～？？
ダメっすね以下のことが失敗のようです
(先人たちと同じ過ちをしてしまいました)
・3次元のゆがみ(紙のそり)を変換できていない

赤枠で囲った部分が顕著に歪んでいますねこの辺のゆがみが2次元ワープやら弾性マッチングが有効みたいですが計算量が果てしないみたいですねちなみに今回のアプリ。
最後の撮影データを使った実験では体感で10秒ほど処理に時間がかかっていました
一番時間がかかっていたのは射影変換ですね
特徴量を総当たりするので
画素数が多くなる
↓
特徴も多くなる
↓
総当たりする計算量も多くなる
なので当たり前ですが…今回はサイゼリヤの間違い探しをOpenCVを使って解いてみました
仕事でOpenCVを使う機会があったのでその知識を応用＆コピペな部分が多いですが
皆さんの参考になると嬉しいですとても参考にしました
本当にありがとうございますサイゼリヤの間違い探しをロバストな画像処理で解く
サイゼリヤの間違い探しを解く（ヒントになる）プログラムを作ってみた


