More than 1 year has passed since last update.こんにちは。私は社会人2年目C#er。初心者です。EntityFrameworkなどが用意するデータモデルはIQueryable&lt;T&gt;型を返しますが、同様にコレクションを扱うIEnumerable&lt;T&gt;型とどう異なっているのかよくわかっていませんでした。このStackOverFlowの回答やこちらの記事を読むことで違いの概要は把握することができたのですが、.NETの実装も踏まえた詳細を理解したかったのでコードを書きながら調査しました。本記事に関連するサンプルコードは私のGitHub上のこちらにあがっています。IQueryableはIEnumerableのインターフェースを継承していて、foreach時やToListしたときの"振る舞い"は同じ。そもそもIQueryableは外部データソース上を扱うLinqプロバイダのために用意されている。IEnumerable&lt;T&gt;はクエリ発行がプログラム内部のインメモリ上。一方で、IQueryable&lt;T&gt;のクエリ発行は外部リソースのプログラム上(RDBMSやAPIサーバ)。この違いは.NET実装上ではWhereなどのLinqメソッドにて確認することができる。動作を比較するためにIEnumerable&lt;T&gt;とIQueryable&lt;T&gt;を実装してみます。本記事では両者のLinqメソッド実行時の様子を比較するので直接関係の無い部分は作り込んでいません。本サンプルコードではIEnumerable&lt;int&gt;を対象としイテレータ(IEnumerator)もint型対応です。
yield returnを持つメソッドをイテレータとしています。こちらの記事を参考に実装しました。以下のクラスQueryはIQueryable&lt;T&gt;を直接実装するクラスです。[ポイント1]
IQueryableを実装するには下記メンバーを用意する必要がある。[ポイント2] 
IQueryableはIEnumerableを継承するのでこのクラスもGetEnumeratorを実装する必要がある。実装上はIQueryProviderが持つExecuteメソッドを呼ぶことでイテレータが返る。本記事の煩雑を避けるため、IQueryProviderを実装したコードの記載は割愛します。
対象コードのリンクは以下になります。
=&gt; QueryProvider
=&gt; MyQueryProviderIQueryableは与えたれたLinq式から式木(IQueryable.Expression)を用意し、その式木を使ってIQueryable.Providerがデータソースに対するクエリを生成し発行します。以下のコードを使って上記で作成したIEnumerable&lt;T&gt;とIQueryable&lt;T&gt;の実装クラスを比較してみます。IQueryable&lt;T&gt;はLinqメソッドが呼ばれるたびに式木(Expression)が更新されています。コード上のコメントにもあるように、本記事でのIQueryable&lt;T&gt;実装クラスのIQueryProviderのExecuteメソッドはnullしか返さないのでforeach時にはNullReferenceのランタイムエラーが発生します。上記の比較用コードをデバッグして内部を見てみます。こちらのスクショの赤枠からわかるように、IEnumerable&lt;T&gt;ではWhereのLinqメソッド実行時には実態のコレクションがインメモリ上に展開されます。
IEnumerable&lt;T&gt;は処理自体は遅延実行であり利用者側のメモリには直ちに評価され展開されませんが、元のコレクションは内部的にはLinqメソッド実行時には保持されます。IQueryable&lt;T&gt;はLinqメソッド実行時はあくまでクエリが構築されるだけのようです。
foreachなどの評価で初めてクエリが外部ソースに発行され結果が取得されるので、IQueryable&lt;T&gt;は遅延"読み込み"(lazy loading)の特徴があると説明されます。EnumerableのWhereに対応するメソッドのソースコードからわかるように、インメモリ上に自身が持つ反復子を取り出しています。一方でIQueryableのWhereメソッドのソースコードを見る限り、IQeuryProvider.CreateQueryを使って式木を更新しているだけのようです。IQueryable&lt;T&gt;は外部リソースを扱うLinqプロバイダのために提供されているもので、IEnumerable&lt;T&gt;とIQueryable&lt;T&gt;は、クエリ発行がプログラムのインメモリ上か外部リソースのプログラム上かという点で異なっていました。そして、.NETの実装としてその違いは、Where句などのLinqメソッドで確認することができました。


