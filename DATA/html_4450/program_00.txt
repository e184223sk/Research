    public List&lt;Vector2&gt; DirectionList; // Vector2(-1,1)は左上, Vector2(0,1)は上、Vector(1,0)は右上… Scene内で定義している
    OthelloCell[,] OthelloCells; // 8x8のOthelloCell.csの配列参照 (Start()で生成している)
    //中略

    //押下された位置が反転可能かの判定
    internal bool CanPlaceHere(Vector2 location)
    {
        //押下された位置は、そもそも空いているか
        if (OthelloCells[(int)location.x, (int)location.y].OwnerID != -1)
            return false;
        //全方向に対して、挟めるか方角があるかを判定
        for (int direction = 0; direction &lt; DirectionList.Count; direction++)
        {
            Vector2 directionVector = DirectionList[direction];
            //指定された方角に対して、挟む自分のコマが存在しているか？
            if (FindAllyChipOnOtherSide(directionVector, location, false) != null)
            {
                //一つの方向でも見つかればそれで終わり
                return true;
            }
        }
        return false;
    }
    //指定された方角に対して、挟む事ができるかを判定する再帰メソッド
    private OthelloCell FindAllyChipOnOtherSide(Vector2 directionVector, Vector2 fromV, bool EnemyFound)
    {
        Vector2 to = fromV + directionVector;
        //ボードの外に出ていないか、空マスでないか
        if (IsInRangeOfBoard(to) &amp;&amp; OthelloCells[(int)to.x, (int)to.y].OwnerID != -1)
        {
            //見つかったマスのオセロは自分のオセロか
            if (OthelloCells[(int)to.x, (int)to.y].OwnerID == OthelloBoard.Instance.CurrentTurn)
            {
               //既に間に一回敵オセロを見つけているか(つまり挟んだか)
                if (EnemyFound)
                    return OthelloCells[(int)to.x, (int)to.y];
                return null;
            }
            else
               //見つかったのは敵オセロなので、EnemyFoundを真にし、自分のオセロを見つけるまで再帰的に同メソッドを呼ぶ
                return FindAllyChipOnOtherSide(directionVector, to, true);
        }
        //ここまでにreturnされない場合nullを返す
        return null;
    }

