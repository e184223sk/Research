　今回は集合演算(Max, Sumなど)を実装していきますが、基本的には前回実装した抽象クラスUnaryFunctionを継承して付け加えるだけです。今回実装するSumは以下のように軸を指定して、軸方向の総和を計算できるようにします。　Shapeが$N_0\times N_1\times \cdots \times N_i \times \cdots \times N_{s - 1}$のTensorを考える。
　この場合にaxis=$i$として総和を計算するとき、Shapeを$(N_0\cdot N_1 \cdot \, 
...\, \cdot N_{i-1})\times N_i \times (N_{i+1}\cdot\, ...\, \cdot N_{s-1})$として以下の計算を行う。　勾配については$A.Grad[n, 1, m]=A.Grad[n, 2, m]=...=A.Grad[n, N_i, m]=B.Grad[n, m]$なのでそのまま実装できる。　勾配計算の際にはArray.Copyを使用する。　Mean関数はSum関数の出力を個数で割ればいいので、代入の際に工夫するだけで計算できます。　Max関数も基本はMeanやSumと同じですが、勾配処理のためにForwardの際に取り出した値のインデックスを保存しておく処理を追加します。Min関数は比較演算子を逆にするだけなので省略します。ここまでの実装はこちらに置いています。　今回は集合演算を実装しました。正直前回のように、集合演算の抽象クラスを作った方が良いのではないかと思ったのですが、Sum, Mean, Max, Minの四つしか使用しないのとどう抽象クラスを定義したら良いか分からなかったので実装しませんでした。
　次回はいよいよ機械学習らしいLinear層の実装をしたいと思います。


