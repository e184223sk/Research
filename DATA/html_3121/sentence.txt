More than 1 year has passed since last update.C#でジャンケンを作っていきたいと思います。
具体的な仕様をまずは考えていきます。まあ、だいたいこんな感じでしょうか。アーキテクチャとしては、レイヤードアーキテクチャを意識しつつやってみます。早速開発！っと行きたい所ですが、まずはジャンケンについて深く分析しておきます。ここで、ジャンケンに存在するオブジェクトを抽出していきましょう。ですね。
この三つがあればジャンケンの純粋なロジック部分を実装できそうです。早速これらをコードに落とし込んでいきましょう。まずは勝敗の種類です。
勝敗の種類は勝ち、負け、引き分けでしたのでそれを表現していきましょう。次は手です。
手はグー、チョキ、パーの種類を持つオブジェクトですのでそれを表現していきましょう。次にジャンケンのルールです。
ジャンケンのルールとは、手の組み合わせから勝敗の判定をするものです。
ジャンケンのルールはローカルルールなどで、複数ある可能性があります。
そこも考慮しつつ、コードに落とし込んでみましょう。次に実際のジャンケンのルールを1つ定義しておきましょうか。
もっとも一般的なジャンケンのルールを定義したいと思います。最後に人間を表現していきましょう。人間は、ジャンケンのルールを人間全員が共通理解した上でジャンケンは行われる。人間はグー、チョキ、パーいずれかの手を出し、他の人間達の出した手と見比べ、自身の勝敗の種類をジャンケンのルールに基づいて知ることができる。でした。ポイントはです。コツは、Human&lt;Rule&gt;という風にジェネリクスを使い、同じルールの人間としかジャンケンができなくした点です。ひと通り、重要なロジックの実装は完成したので、次は入出力の処理を実装していきましょう。・「ジャンケンの手を選んでください（1=グー,2=チョキ,3=パー）」と表示させる。
・ユーザーは1,2,3のいずれかを入力する。（それ以外を入力されたら、再度入力するよう要求）。
です。依存を分離しておきたいので、先に入出力のインターフェイスを定義します。これを元にコンソールの入出力を実装したクラスを作成します。これで、入出力とジャンケンゲームのロジックは完成しました。
でもこれだけでは、まだ足りないところがあります。
最後に、入出力とロジックを上手くつなぎ合わせるコードを書いていきましょう。入出力では文字でやりとりしていますが、
ジャンケンロジックの方では、Enumを使って値をやり取りしています。
そのため、両者には値の変換作業が必要です。
まずはそれをするクラスを作ります。次にユーザーと対戦する、ランダムな手を出す人間を生成するクラスを作っておきます。これで、最後です。
今までの全てをつなぎ合わせ、ジャンケンゲームをするクラスを作ります。後は、Main関数から呼び出します。今回のプログラムの全体図を載せておきます。これは、私が設計の練習として思考したものを記事にしたものです。
未熟ですので、「もっとこうした方が良いよ」などのマサカリは歓迎します。
少しでも設計の参考になることを願います。


