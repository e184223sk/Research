本記事はLife is Tech！Advent Calendar 6日目の記事です！
ぜひ最後まで目を通していってください〜よろしくお願いします！&gt;&lt;さて、タイトルにもある通り今回はUnityの便利ライブラリ、UniRxについての入門解説記事を書いていこうと思います。ですが、僕自身もUniRxを初めて知った頃は、などなど何度も挫折しました。
ただやはりそんな中でも、無理やりでも書いていくと何となく分かるようになったので、今回はなどの人でも読み進めていけて、書き方が何となくでも身につくことを目指す記事にしたいなと思います。
(事前にLINQなどの知識があるとより学びやすいです。)ということで今回は簡単なミニゲームを作りながら、UniRxを使用しない記法・使用した記法を並べ、主にUniRxでの書き方を身につけていきましょう。
細かい部分まで詳しく説明していくとキリがないので、本記事で詳しく触れていないよく分からない部分に関しては、自分でも随時調べながら進めていくと尚良しです！UniRxは使えるようになるととても便利だと思うので、初心者や学びたての方でも、後々のために存在だけでも知っておいて欲しいなと思います。
それではいってみましょう。アドベントカレンダーっぽくサンタを登場させたかったので、
サンタがプレゼントを集めたらクリアのシンプルなゲームにしましょう。サンタがプレゼントを集める……非常に謎ですがそこは触れないでください。もし今回の記事を自分でも書きながら進めたい人がいましたら、下のリンクからまずプロジェクトをダウンロードしてください。
サンタやステージのアセット(無料)は事前に入れてある &amp; 今回触れないコードは少しですがすでに事前に書いてあります。
Unityのバージョンは 2019.1.14f を使用しています！プロジェクトURL : https://github.com/kaku710/unirx_learn_projectScenes/Mainを開いて、画像のようになっていたら大丈夫です！
ここから実際に機能をつけていきます！それではまずはサンタを動かしていきましょう。
Create→C# Scriptから、SantaController.csを作ります。UniRx無しでシンプルに実装すると以下の感じでしょうか。これをUniRxを用いて実装すると以下のように実装することができます。ここやっていることとしては
1. UnityのUpdate関数をStart内でUpdateAsObservable()を利用してストリーム (一連の処理の流れのようなもの) というものに変換
 ( ストリームについて詳しく知りたい人はこちら )
2. Select()を利用して入力の値を取得
3. SubScribe()で関数を登録するというような流れです。この実装だけでは何でストリームに変換する必要があるの？など、メリットがパッとしない人も多いと思いますが、これをしておくことで例えば今後などの時には、Where()を利用してこんな感じで簡単に記述できたり、更に条件としてよくあるようななどの時には、もう1度Where()を利用してこのようにフィルタリングすることで実装することができます。
Where()はif()のような役割ですね。ちなみにこのようなフィルタリングはUniRxにはとても便利なものが多く用意されています。ちなみに後でもいくつか出てくる。先に色々見たい方はこちら↓
逆引き記事 : UniRx オペレータ逆引き メッセージのフィルタ 個人的に感じる、UpdateAsObservable()を使用するメリットとしては、こんなところです。
メリットなどについてもっと詳しく知りたい！という方は、こちらの記事にもより詳しく書いてあるので、興味のある方はぜひ読んでみてください。ここら辺はよく分からない方というも、今はとりあえずこんな感じで書き換える方法もあるんだ！くらいに思ってもらえればOKです。どんどん使ってけば慣れていくはず！(コードが書けたらサンタにアタッチするのを忘れずに)

ゲームを再生するとサンタが無事動いてくれました！（進行方向に向くコードは事前にSantaRotator.csに書いてあります。）
それでは次いきましょう。サンタがプレゼントに当たったら、プレゼントを削除 → カウント用の変数を増やす、の流れでいきましょう。Prefabsフォルダ配下に"Present"のプレハブがあるので、3つ程ステージ上に適当に配置してください。
また、タグを事前に"Present"に設定しています。そしたら先ほど作成したSantaController.csにコードを追加していきます。まずUniRx無しだと以下のような感じでしょうか。(追記分のみ記載)これをUniRxを用いて以下のように実装します。こちらもStart内でOnTriggerEnter関数をOnTriggerEnterAsObservable()を利用してストリームに変換しています。
このようにUniRx.Triggersを使うとUnityが用意しているコールバックをストリームにし、全てをAwake/Start内にまとめて記述することが可能になります。ちなみにUnityで用意されているコールバックイベントはほぼ全て用意されているそう。すごい。
Wiki : https://github.com/neuecc/UniRx/wiki/UniRx.Triggers例えばこの衝突関係のストリームをゲームの途中で停止したい時があったとします。
そんな時は以下のように実装することで終了することができます。このような感じでいつでも停止することもできます。めっちゃ便利。補足でした。それではゲームがきちんと動くか確かめましょう！

このようにサンタが当たったらプレゼントが消えていればOKです！続いては、ここで用意した変数 presentCount を用いてゲームクリア条件をつけていきましょう。サンタがプレゼントを一定数（今回は3つ）集めたらクリアにしたいのですが、
UniRx無しで愚直に書くとこんな感じでしょうか。Clearシーンは事前に用意しています。上記のクリア条件をUniRxを用いて実装したいのですが、UniRxを用いると、変数の監視→値の変更を検知してActionを実行といったようなことが簡単に行えるようになります。例えば、HPを監視して変更を検知したらHPバーに反映させたりとか。
それを実現してくれるのがUniRxのReactivePropertyです。
これは本当に便利なので、使えるようになるとよりレベルアップできると思います。とりあえず手を動かして動くことを確認してみましょう。まず先ほどint型で宣言したpresentCountをReactiveProperty&lt;int&gt;型で宣言しなおします。またそれに伴って、presentCount++の部分がエラーになると思うので、以下のように書き換えてあげます。これで変数が監視できるようになったので、Start内で値の変更を監視するようにします！以下が実装例です。こんな感じで実装することができます！とても便利ですね。これも色々あるかとは思いますが、個人的にはが1番のメリットかなと思います。(あくまで個人的意見です)
MVPパターンとはデザインパターンの1つで、この設計はゲームの設計 (だけじゃ無く他のプロダクトでも) をしていく上でとても便利なのでぜひ知っておくと良いと思います。
この記事内では長くなるので解説しませんが、もしUnityでのMVPパターンについて詳しく知りたい方は以下の神記事を読むと良いです。(マジで僕もめちゃくちゃ読んだ)MVPパターンに関して今はあまり分からなくても、ReactivePropertyに関しては非常に便利なので、少しずつでも慣れていくと良いと思います。それではゲームを確かめてみましょう！

このようにプレゼントを3つ集めたらClearシーンに遷移すればOKです！最後はボタンを押した時のイベントについて。ゲーム的にもせっかくなのでClearシーンからMainシーンに戻れるようにしましょう。
ボタンは事前に置いていますが、クリックした時のイベントの設定はしていませんのでそれをUniRxを用いて行ってみましょう。UniRx無しの実装は
- publicで関数を定義してUGUIで紐付け
- onClick.AddListner()を使用
このあたりかなと。こちらの実装例は省略します。適当にc#ファイルを新規で作成して、こんな感じで書いてあげれば実装できます。UniRxを用いてボタンのイベントを実装すると色々と便利で、例えば、1回押したら1秒は入力を受け付けないボタン、などもこんな感じで1行追加してあげるだけで実装することができます！UniRx使わないとなると結構めんどくさそうなので、とても便利ですね。他にも色々あるので気になる人は調べてみてください。では最後にゲームが動くかの確認をしましょう！

このようにボタンを押してMainシーンに戻ることができていたらOKです！最後に念のため、実装した最低限のSantaController.csの全文も載せておきます。UniRxについて初めて記事を書いてみましたが、いかがだったでしょうか。
今回紹介したUniRxの機能は本当にほんの一部で、まだまだ便利な機能がいっぱいあります！自分もまだまだ勉強中です。もっとUniRxについて詳しく知りたい・学びたい方は、などなど読んでみると良いと思います。ちなみに本記事の参考もここです。(toRisouP様様ですね。)ぜひ今後のゲーム開発に少しでも取り入れるきっかけになれば幸いです。ではでは明日以降のLife is Tech！Advent Calendarもお楽しみに！ありがとうございました〜！


