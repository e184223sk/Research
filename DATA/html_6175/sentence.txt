More than 3 years have passed since last update.指定した要素数を、指定した数のブロックに分割するBlockクラスと、
それを利用してコレクションにランダム（なインデックス）でアクセスする為のRandomizerクラスです。簡単に言うと、コレクションからランダムで指定した数の要素を抜き出して来るものです。あるシステム開発で、「クライアントから送られてきたデータファイル（結構多い）から、適当に一部抽出してテストデータとして使いたい」と言う要件が出て来ので。
（他にも「大量のデータの中からランダムで少数抜き出したい」みたいな話は、頻繁ではないくせに「忘れた時にやって来る」くらいの絶妙な頻度で発生する、、、と思う）簡単に要件をまとめるとこんな感じ。「コレクションからランダムに任意の個数の要素を取得する（但し、重複して取り出してはいけない）」と言う要件があった場合、多分みんな以下のようなコードを書くと思う。特に制約がない場合、多分こんなコードを書く事になると思う。普通こう実装しますよね。
誰だってそーする、僕だってそーする。「元の並び順を維持する」という要件は珍しいと思いますが、これを要求されるとかなり難しい話になってしまいます。
特に、元の並び順が データ内の何かでソートされている訳ではない とか 元の並びに戻すのが難しい と言う場合はキツいです。
そもそも、「ランダムに並び替える→抜き出す→元の順番に並び替える」と 並び替えを二度もやるのはバカっぽくてイケてない です。この実装は以下のようなアルゴリズムで擬似的なランダム抽出を行っています。1.　まず要素全体を指定された個数（抽出したい数）のブロックに等分割する。
2.　各ブロックから一つだけ要素を取り出す。
3.　取り出した要素を返す。（yield return 列挙）この処理によって、擬似的にランダム抽出を行っている為、どうしても 等分割する事による規則性 が発生してしまいます。例えば、1～10の10個の要素からランダムに2個抜き出す場合。
このアルゴリズムを使うと「1～5の中から一つ」と「6～10の中から一つ」という規則性が発生します。
つまり、ランダムに抜き出した結果からは「1と2」とか「6と10」という組み合わせが得られないと言う事になります。ただ、逆に言うとこの特性は 乱数が偏る事を防げる（ある一定の均等さで分布してくれる） というメリットとも言えますね。vs-git クローンURL：
https://ellnore-git.visualstudio.com/_git/RandomizeUtilityGitHubリポジトリURL：
https://github.com/sugaryo/CS-RandomizeUtility動作検証画面（実装サンプル）：
※まぁ本当の事言うと、別にこれそんなに必要性が高かったワケじゃなくて、ただロジックが面白そうだからコーディングしたいなって思ったから勢いで作っただけなんですけどね。


