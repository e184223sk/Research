More than 3 years have passed since last update.UnityでiOS向けの開発とかやってると、容量の都合などでコンテンツの追加配信などでAssetBundleは避けられない道です。
ただ、AssetBundle化したいファイル全てにいちいちInspectorからAssetBundleとnameとか設定するのは正直めんどくさい...
今ではAssetBundleManagerやら、AssetBundleBrowserとか色々公式から便利なツールが出てきているので、そっちを使ってもいいのですが、暗号化処理とかを挟むために自前で実装する必要があるようなこともあるので、その際に役立つやり方を忘れないように残しておきます。AssetBundle周りは改善が繰り返されていて、バージョンによってまるっきりやり方が違ったり(これからもどんどん変更されていったり)するみたいなのですが、自分の環境はUnity 2017.3とmacOS high Sierraでやっていくので、Windowsの方はBuildTargetなどは適宜変更してください。ProjectのAssets内に"Resources"というフォルダとその中に"PlaceFileHere"みたいなパッとわかる適当な名前のフォルダを作ります。そして、Editerの拡張を書くので、Assets以下に"Editor"というフォルダも作っておきます。
最終的にはAssets/Resources/PlaceFileHere/とAssets/Editor/って感じ。Editorフォルダの中にC#スクリプトを作成、名前をCreateAssetBundles.csみたいな感じにします。
そしてこのScriptの中にiOSとAndroidとUnityEditer向けにビルドするコードを書いていきます。基本的には、Directory.GetFileSystemEntries(string path)でフォルダ内のすべてのファイルやフォルダを取得して、AssetImporterのSetAssetBundleNameAndVariant(stiring name,string Variant)でAssetBundleの対象にし、あとはBuildPipeline.BuildAssetBundles()で各OS向けのAssetBundleを生成していく感じです。
最後にAssetBundle対象化の解除を行なっています。
余計なファイルがAssetBundleの対象にされることのないようやっておくといいかなと。Assets &gt; Build AssetBundlesを実行すれば、ビルドされてフォルダに出力されるはずです。
Buildする際に各プラットフォームにSwitchするからか、クソほど時間がかかるのでじっくり待ちましょう。
そんなに大変ってわけでもないですし、AssetBundle間の依存関係がややこしいようなものを変換したい方以外の人にはオススメです。
チーム開発で非プログラマの方にAssetBundle化してもらうとこまでやってもらう場合なんかも役にたつかもしれませんね。
各プラットフォームに向けてビルドしてるので当たり前ですが、iOS向けをEditorとかで読み込もうとすると表示がおかしくなったりするのでプラットフォームにあったものを使いましょう。
BuildPipeline.BuildAssetBundles()の返戻値のManifestを使うと変換後のファイルにさらなる変更(暗号化とか)を行えます。気が向いたらそういうのも含めた記事も書くかも。


