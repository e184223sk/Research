using System;
using static System.Console;

namespace ProgressBar{
    class Progress{
        //最大の桁数
        public int columns;
        //プログレスバーの長さ
        public int width;
        //進捗度
        public int par=0;
        //目標進捗度
        public int parMax;
        //最後に出力したカーソルの行
        protected int rowLate=CursorTop;

        //モノクロ版プログレスバー
        public Progress(int width,int parMax){
            this.columns=WindowWidth;
            this.width=width;
            this.parMax=parMax;
        }

        //プログレスバーの更新
        public virtual void update(string message){
            int row0=CursorTop;

            float parcent=(float)par/parMax;
            int widthNow=(int)Math.Floor(width*parcent);

            string gauge=new string('&gt;',widthNow)+new string(' ',width-widthNow);
            string status=$"({(parcent*100).ToString("f1")}%&lt;-{par}/{parMax})";

            Error.WriteLine($"#[{gauge}]#{status}");
            clearScreenDown();

            Error.WriteLine(message);
            rowLate=CursorTop;
            SetCursorPosition(0,row0);
            par++;
        }

        //プログレスバーの完了
        public virtual void done(string doneAlert){
            int sideLen=(int)Math.Floor((float)(width-doneAlert.Length)/2);

            string gauge=new string('=',sideLen)+doneAlert;
            gauge+=new string('=',width-gauge.Length);
            string status=$"(100%&lt;-{parMax}/{parMax})";

            clearScreenDown();
            Error.WriteLine($"#[{gauge}]#{status}");
        }

        //コンソール表示の掃除
        protected void clearScreenDown(){
            int clearRange=rowLate-(CursorTop-1);
            Error.Write(new string(' ',columns*clearRange));
            SetCursorPosition(CursorLeft,CursorTop-clearRange);
        }
    }

    //カラー版プログレスバー
    class ProgressColor:Progress{
        public ProgressColor(int width,int parMax):base(width,parMax){}

        //プログレスバーの更新
        public override void update(string message){
            int row0=CursorTop;
            float parcent=(float)par/parMax;
            int widthNow=(int)Math.Floor(width*parcent);

            string status=$"({(parcent*100).ToString("f1")}%&lt;-{par}/{parMax})";

            BackgroundColor=ConsoleColor.Yellow;
            ForegroundColor=ConsoleColor.DarkYellow;
            Error.Write("{");
            BackgroundColor=ConsoleColor.Cyan;
            Error.Write(new string(' ',widthNow));
            BackgroundColor=ConsoleColor.DarkCyan;
            Error.Write(new string(' ',width-widthNow));
            BackgroundColor=ConsoleColor.Yellow;
            Error.Write("}");
            ResetColor();
            Error.WriteLine(status);
            clearScreenDown();

            Error.WriteLine(message);
            rowLate=CursorTop;
            SetCursorPosition(0,row0);
            par++;
        }

        //プログレスバーの完了
        public override void done(string doneAlert){
            int sideLen=(int)Math.Floor((float)(width-doneAlert.Length)/2);

            string gauge=new string(' ',sideLen)+doneAlert;
            gauge+=new string(' ',width-gauge.Length);
            string status=$"(100%&lt;-{parMax}/{parMax})";

            clearScreenDown();

            BackgroundColor=ConsoleColor.Yellow;
            ForegroundColor=ConsoleColor.DarkYellow;
            Error.Write("{");
            BackgroundColor=ConsoleColor.Green;
            ForegroundColor=ConsoleColor.Red;
            Error.Write(gauge);
            BackgroundColor=ConsoleColor.Yellow;
            ForegroundColor=ConsoleColor.DarkYellow;
            Error.Write("}");
            ResetColor();
            Error.WriteLine(status);
        }
    }
}

