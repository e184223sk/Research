More than 1 year has passed since last update.Telloを買ったらプログラムで操作したくなることに異論の余地はないと思います。この記事ではC#でTelloを操作する方法について書きます。Telloを操作する方法といっても、TelloにUDP通信でコマンドをbyte配列で送るなんてことをゴリゴリ書くのはチョットムズカシイため、あくまでそういったところをマルっとやってくれるライブラリを使って、ということになります。強い人がTelloをそうさするためのC#のライブラリをGitHubで公開してくれています。
それがTelloLibです。
これを使うととても簡単にC#でTelloを操作することができます。こちらにTelloLibとサンプルを含むVisual Studioのソリューションが公開されているので、git cloneするかzipファイルをダウンロードしてください。簡単なコンソールアプリやAndroidアプリのサンプルプロジェクトがあるので、それを動かしたりしてもよいですが、今回用があるのはこの中のTelloLibプロジェクトです。まずはTelloLibをコンパイルして、後で自分のプロジェクトから参照できるようにdllを生成しましょう。
Visual StudioでaTello.slnファイルを開きます。ソリューションエクスプローラーのTelloLibプロジェクト上で右クリックして、メニューからビルドを実行してください。dllファイルの出力先は、以下のようなソリューション構成であれば、以下のフォルダ内にTelloLib.dllという名前であります。このTelloLib.dllをこれから作る自分のプロジェクトで参照することで、このライブラリを利用できるようになります。これからTelloを操作するアプリケーションを作っていきます。
今回はシンプルなコンソールアプリケーションから離陸と着陸だけを行うプログラムを作成します。Visual Studioを起動し、コンソールアプリ（.NET Core） Visual C#プロジェクトを作成します。
プロジェクト名はここではMyTelloConsoleとします。
もちろん何でもよいです。プロジェクトに先ほど生成したTelloLib.dllファイルへの参照を追加します。
ソリューションエクスプローラーの依存関係を右クリックして参照の追加を選択します。
参照するファイルの選択ダイアログが開くので、先ほど生成したTelloLib.dllファイルを選択して追加ボタンを押します。
これでライブラリを利用する準備が整いました。Mainメソッドに直接書いていくことにします。
今回のプログラムの流れは以下のとおりです。Telloを操作するために使用するクラスはTelloクラスです。
このクラスには以下の3つのイベントがあります。このうち今回必要なのはonConnectionイベントだけですが、これら3つのイベントはTelloLib内ではイベントハンドラが設定されていない場合（つまりnullだった場合）の対処がされていないので、イベントハンドラを設定せずに実行すると、これらのイベントが発火されたときにnull参照で例外が発生することになります。それらの例外はcatchされてコンソールにエラーメッセージが表示されてアプリケーション自体は動き続けるのですが、エラーメッセージが延々と出力され続けるのは困ります。これを解決するにはライブラリ利用側で各イベントにイベントハンドラを設定するか、TelloLib側を修正して、それぞれのイベントが発火される箇所でnull条件演算子?.を使ってnull参照を回避する、という方法が考えられます。こんな感じで。今回はすべてのイベントにイベントハンドラを設定することにします。
するとこんな感じになります。この中で今回必要なのはonConnectionイベントのイベントハンドラ（ここではTello_onConnection）だけです。
このイベントハンドラはTelloとの通信のステータスが変化したときに実行されます。
このイベントの重要な役割は、Telloとの通信が開始されたらTelloの初期設定を行うことです。このイベントハンドラは変化後のステータスが引数(newState)として渡されて実行されるので、このnewStateがConnectedになったらTelloの初期設定が行われるようにします。このコードについてはサンプルプログラムのTelloConsole内のMainメソッドを参照してください。
setMaxHeightメソッドはわかります。可能最大高度を指定するのでしょう。メートル単位で。
しかしqueryAttAngleメソッドがわかりません。わかりませんがきっと必要と思われるので、ここではおまじないとしておきます。Telloとの通信は以下の1行で開始されます。
シンプルでよろしいですね。
これをMainメソッド内に追加します。詳しいことはおいといて、この接続処理によって前述の通信ステータスがConnectedになったときにonConnectionイベントが発火されて、設定したイベントハンドラによってTelloの初期設定が行われることになります。この時点でMainメソッドは以下のとおりです。whileループでユーザーからのコマンド入力を受け付け、それに応じてTelloを操作するようにします。
基本的な形は以下のとおりです。今回は以下の3つのコマンドを受け付けるようにします離陸と着陸についてはTelloLibにそれぞれtakeOffメソッドとlandメソッドが用意されていて、これらを呼び出すだけでよくなっています。ユーザーからの入力に加えて、Telloとの通信ステータス、そして飛行中か否かのステータスを条件としてそれぞれのメソッドを実行するようにします。
加えて、exitと入力されたときにループから抜けてアプリケーションが終了するようにします。以上で、離陸と着陸だけするプログラムが完成しました。
完成したMainメソッドは以下のようになります。では実際にTelloを操作してみましょう。ここでいう接続とはTelloとPCをWifi接続するということです。まず、Telloの電源を入れます。
しばらく待つと、LEDが黄色く速く点滅を繰り返すようになります。
Telloが起動しましたが、端末との接続がない状態です。次にPC側です。
PCが拾っているWifiのアクセスポイントのリストに「TELLO-****」という名前のアクセスポイントが現れるので、それを選択して接続します。「接続済み」となればOKです。この時点ではTelloは相変わらずLEDが黄色く速く点滅していて何の変化もみられませんが大丈夫です。いよいよコンソールからTelloを操作してみましょう。
といっても離着陸だけですが。実行してみてください。コンソールが表示され、Connected!と表示されたら、takeoffと入力してエンターキーを勢いよく押しましょう。
離陸しましたか？
結構、おおー、って思っちゃいますよね。続けてlandと入力してこれまた勢いよくエンターキーを押しましょう。スターン！
着陸しましたか。今回は離着陸のみの簡単なものでしたが、これじゃなんだか物足りませんよね。次は前進、後退、左回転、右回転について書きたいと思います。


