More than 3 years have passed since last update.P#とは、Microsoftが開発中のプログラミング言語です。非同期＆イベント駆動型という特徴を持ち、非同期処理のテストを容易にすることに重点を置いているようです。
Machine（オートマトン）、State（状態）、Event（状態遷移トリガ）を記述することによりプログラムを構築するのですが、注目すべきはこの言語、文法がC#の拡張であり、.NET Framework上で動作するのです。
つまり、「C#コードはP#コードである」という論理が成り立ちます。
夢がひろがりんぐですね。公式Githubはこちら。執筆時点でのP#のバージョンは1.2.4です。2017/9/2追記 バージョン1.3.2で検証済みです。公式Githubには色々と文書があるので、環境構築は簡単かなーと思いきや、文書は古い内容なのか、それ通りにやってハマったのでメモします。公式から任意のフォルダにクローンします。これでPSharpフォルダ以下にソリューションが生成されます。公式にはdotnet restoreを使えとか、build.ps1でビルドしろとか書かれていますが、うまく行きませんでした。
しかし、Visual Studio Community 2017 でPSharp.slnを開き、単純にビルドすれば通ります。
これで、PSharp/bin/net46/以下にDLLやコンパイラなどが生成されます。P#をコンパイルするにはプロジェクトが必要です。
C#コンソールアプリのプロジェクトを作りましょう。
このとき、ターゲットフレームワークは「.NET Framework 4.6」を指定してください。プロジェクトを作成したら、参照設定が必要です。
PSharp/bin/net46以下のこのDLLを参照してください。そして、以下の2ファイルを用意します。以上の2ファイルが用意できたら、Machines.psharpのプロパティをいじりましょう。Machines.psharp -&gt; プロパティ -&gt; ビルドアクション -&gt; コンパイルに設定します。
これをしないと次のコンパイルが通りません。以上ができたら、Visual Studioのウィンドウを一旦閉じます。Developer Command Prompt for VS 2017を開いてください。
そうしたら、PSharp/bin/net46へ移動しましょう。
そして、以下のコマンドを実行します。上記の${SOLUTION_PATH}には、先程準備したプロジェクトのソリューションを指定してください。
これでコンパイルが通るはずです。
EXEができているので、実行してみてください。2017/9/2追記 本節の内容を変更しました。Visual Studio上でビルドを行なうには、まずテキストエディタを使ってプロジェクトの.csprojファイルを開きます。
以下のようなXMLファイルですね。これにImportタグを2つ追加します。上記の$(PSharpBinaries)には、PSharp\bin\net46の絶対パスを記述します。これができたら、再度プロジェクトを開いてください。
もう一度ビルドアクションの設定をします。
今度は、Machines.psharp -&gt; プロパティ -&gt; ビルドアクション -&gt; PSharpが選択できるようになっているので、これに設定します。
あとはVisual Studioによるビルドが通るようになっているので、開発が容易になります。公式サイトには、IntelliSenseなどの記述もあるのですが、私の環境ではどうもうまくいきませんでした。ここで紹介させていただいた内容はすぐに変更される恐れがありますので、ご注意願います。ともあれ、これでP#の開発が可能になりました。
Git内にはサンプルも含まれていますので、是非試してみてください。


