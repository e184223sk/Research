More than 1 year has passed since last update.Flutterはとても素晴らしいのですが、C#で書けたらもっといいのになと思っていたら、それが実現できる夢のようなツールがリリースされたので試してみました。Flutnetは、XamarinとFlutterを簡単に相互利用できるようにしたフレームワークです。Flutnetを使えば、Flutterで美麗なUIを構築をしつつも、ロジック部分はDartではなく、使い慣れたC#でということが可能になります。有料なのですが、一意のアプリケーションID（バンドルID）しか使えないなどの制限付きのトライアルバージョンがあるので、試す分には無料でできます。Flutnetには、GUIツールが用意されていて、簡単にプロジェクトの構築ができます。ここからツールをダウンロードできます。使うには、FlutterやAndroidのSDKのパスを通しておく必要があります。設定例（macOS）Visual StudioやFlutterなどの環境構築がまだの方は、Windowsの場合は、こちら、macOSの場合は、こちらを参考に行ってください。FlutnetはサポートしているFlutterのバージョンが決まっています。作成したプロジェクトに追加されるFlutnet.Interop.Android、Flutnet.Interop.iOSパッケージのバージョンがサポートするFlutterのバージョンとなっているので、必ずそのバージョンのFlutterをインストールするようにしてください。（現在の最新（Flutnet 1.0.1 [BETA]）では、1.２０.2となります。）インストールしたFlutnetのプログラムを起動して、[Next]、[Create]とボタンをクリックしていくとプロジェクトが作成されます。
以下のようなフォルダ構成で作成されます。Flutterフォルダ以下がFlutterプロジェクトで、それ以外が、Xamarinのプロジェクトです。MyApp.slnをVisual Studioで、my_appをFlutterのプラグインを入れた、Visual Studio Code、もしくは、Android Studioで開きます。my_app_bridgeには、C#のコードから自動生成されるDartのコードが入っています。ビルドは、Xmarinプロジェクト、Flutterプロジェクトの両方で行う必要があります。ひとまず、Visual Studio開いたMyApp.Android、もしくは、MyApp.iOSをビルドして、実行してみます。以下のデフォルトのFlutterの画面が表示されたら成功です。もし表示されない様なら、Flutterのバージョンが異なっている可能性があります。
次にFlutterのプロジェクトのビルドを行います。Flutterのコードを変更した場合は都度ビルドが必要になります。ターミナルで、以下のコマンドを実行します。（Visual Studio Codeの場合は、コマンドパレットから、Flutter: Get Packagesでflutterパッケージを予め取得しておきます）AndroidiOSさらに、Xamarinに変更を反映させるには、Xamarin側のMyApp.ServiceLibraryプロジェクトのリビルドが必要になります。加えて、Androidでは、前に入れたアプリの削除もしないと反映が行われないようです。MyApp.ServiceLibraryプロジェクトにService1と言うクラスが作られています。これをFlutterから呼び出すようにします。PlatformService属性をつけたクラス内の、PlatformOperation属性をつけたメソッドが、Flutterから呼び出される対象になります。MyApp.ServiceLibraryプロジェクトをビルドすると、この処理を呼び出すためのDartのクラスが自動作成されます。さらに、呼び出すためには、各プラットフォームでインスタンスの登録も必要です。Androidでは、MainApplicationのOnCreate()、iOSでは、ViewControllerのViewDidLoad()で行います。登録はプロットフォーム毎なので、MyApp.ServiceLibraryプロジェクトにはインターフェースのみ追加して、実際の処理は、プロットフォーム毎に書いて登録するということも可能です。
では、Flutterプロジェクトに移り、実際に呼び出してみます。自動生成されたクラスは、my_app_bridge/my_app/service_library/service_1.dartにあります。インスタンスを作成する際には、RegisterPlatformServiceの第２引数で与えた名前を設定します。メソッドの戻り値はFutureなので、awaitを使って値を取得します。以下がコードの全体です。メソッド呼び出しだけではなく、XamarinとFlutterで共通に扱えるデータクラスを定義したり、Xamarin側のイベントをFlutter側で購読することも可能です。XamarinDartただし、現在のバージョン（Flutnet.Android:1.0.2、Flutnet.iOS:1.0.2）では、PlatformEventを設定すると、RegisterPlatformService時にArgumentNullExceptionが発生する様です。おそらくバグなのでその内修正されると思いますが、一応回避策を後述します。
1.0.3で修正されました。Flutnetでもホットリロードは可能です。Xamarinプロジェクトで実行した後、Flutterのプロジェクトの方で、Visual Studio Code では、コマンドパレットから、Debug:Attach to Flutter processを、Android Studioでは、[Run]メニューの[Flutter Attach]を選択します。アタッチされたら、一度再起動を行なった方が良さそうです。これでもでききるのですが、一度デバッグを終了して、再度開始すると、変更が戻ってしまいます。これは先述した通り、Flutterのコードを変更した場合には、再度ビルドを行う必要があるためです。毎回ビルドするのは少々面倒なので、Flutnetには、ロジックの処理を行うXamarinのアプリと画面の確認を行うためのFlutterのアプリ２つ同時に起動して、ローカル通信でデータのやり取りを行うモードが用意されています。
このモード（WebSocketモード）にするためにはAndroid、iOS、Flutterでそれぞれ以下の様に設定します。デバッグを行う際は、Xamarinで実行した後、Flutterの方でも通常のデバッグ実行を行います。通信で行なっているので、少々データの取得まで時間がかかりますが、いちいちビルドする手間が省けるので、画面レイアウトの開発を行う際にはこちらのモードの方が良さそうです。Flutnet 1.0.1 [BETA]以降は、以下の対応は不要です。先述しましたが、現状では、PlatformEventを設定できません。どうも内部でリフレクションを使ってメソッドを取得しているのですが、そのメソッドが存在していない様です。おそらくデバッグビルドでは大丈夫だったけど、リリースビルドでリンカーによって削除されたのではないかと思います。やってることが、イベントの登録の様なので、リフレクションで無理やりアクセスして登録する様にしてみました。一応これで動いたので大丈夫だと思います。リリースされたばかりで、まだ不安定ではありますが、大きな可能性は感じられます。特にXamarin.Formsで作ったアプリをFlutterで作り直そうとなったときに、ロジック部分はそのまま使えるので、選択肢として大いにありなのではないでしょうか。


