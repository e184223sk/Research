
var eventService = new EventService();
var name = "event_service";
try
{
    FlutnetRuntime.RegisterPlatformService(eventService, name);
}
catch
{
    var request = typeof(FlutnetRuntime).GetField("request", BindingFlags.NonPublic | BindingFlags.Static).GetValue(null);
    var creatorListener = request.GetType().GetProperty("Item", BindingFlags.Public | BindingFlags.Instance).GetValue(request, new[] { "" });
    var interpreter = creatorListener.GetType().GetField("_Interpreter", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(creatorListener);
    var utilsContainerAuth = interpreter.GetType().GetProperty("Item", BindingFlags.Public | BindingFlags.Instance).GetValue(interpreter, new[] { name });
    var m_Service = utilsContainerAuth.GetType().GetField("m_Service", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(utilsContainerAuth);

    var testPublisherMethod = typeof(FlutnetRuntime).GetMethod("TestPublisher", BindingFlags.NonPublic | BindingFlags.Static);

    EventHandler&lt;ValueChangedEventArgs&gt; handler = (object sender, ValueChangedEventArgs e) =&gt; testPublisherMethod.Invoke(null, new[]
    {
        name,
        nameof(EventService.ValueChanged),
        sender,
        e
    });
    eventService.ValueChanged += handler;
    m_Service.GetType().GetProperty("Item", BindingFlags.Public | BindingFlags.Instance).SetValue(m_Service, handler, new[] { nameof(EventService.ValueChanged) });
}

