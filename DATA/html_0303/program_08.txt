
    public static class IntExtention
    {
        /// &lt;summary&gt;
        /// int値からEnumのDescription取得
        /// &lt;/summary&gt;
        /// &lt;typeparam name="T"&gt;&lt;/typeparam&gt;
        /// &lt;param name="value"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static string GetEnumDescriptionFromInt&lt;T&gt;(this int value) where T : Enum
        {
            var enumValue = (T)Enum.ToObject(typeof(T), value);

            return enumValue.GetDescriptionFromValue();
        }

        /// &lt;summary&gt;
        /// int値からEnumのValueを取得
        /// &lt;/summary&gt;
        /// &lt;typeparam name="T"&gt;&lt;/typeparam&gt;
        /// &lt;param name="value"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static T GetEnumValueFromInt&lt;T&gt;(this int value) where T : Enum
        {
            return (T)Enum.ToObject(typeof(T), value);
        }
    }

