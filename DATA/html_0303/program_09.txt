
    public static class TypeExtention
    {
        /// &lt;summary&gt;
        /// enumの値リストを取得
        /// &lt;/summary&gt;
        /// &lt;typeparam name="T"&gt;&lt;/typeparam&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static List&lt;T&gt; GetEnumList&lt;T&gt;(this Type type) where T : Enum
        {
            return Enum.GetValues(typeof(T)).Cast&lt;T&gt;().ToList();
        }

        /// &lt;summary&gt;
        /// enumのDescripntionリストを取得
        /// &lt;/summary&gt;
        /// &lt;typeparam name="T"&gt;&lt;/typeparam&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static IEnumerable&lt;string&gt; GetEnumDescriptionEnumerable&lt;T&gt;(this Type type) where T : Enum
        {
            foreach (T value in Enum.GetValues(typeof(T)))
                yield return value.GetDescriptionFromValue();
        }

        /// &lt;summary&gt;
        /// enumのDescripntionリストを取得
        /// &lt;/summary&gt;
        /// &lt;typeparam name="T"&gt;&lt;/typeparam&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static List&lt;string&gt; GetEnumDescriptionList&lt;T&gt;(this Type type) where T : Enum
        {
            List&lt;string&gt; descriptionList = new List&lt;string&gt;();
            foreach (T value in Enum.GetValues(typeof(T)))
                descriptionList.Add(value.GetDescriptionFromValue());

            return descriptionList;
        }
    }


