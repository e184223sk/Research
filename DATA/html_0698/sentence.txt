DBが絡むテストをするときにテストデータの投入やデータの検証を
テストコードをなるべく書かずにやりたいことがある。
特にテストコードを書きなれていないメンバがいる場合や
そこそこたくさんのテストデータを用意しなければいけない場合など。テストデータと期待値を外部ファイルに作成してそれを読み込む形で
テストデータ投入と検証を行いたい、JavaだったらDBUnitがある、C#では？
NDbUnitなるプロダクトがあったりするのだけど、
データをXMLではなくCSVファイルまたはExcelファイルで作成したかったのと
スキーマ定義ファイル（？）なるものを作るのがめんどい、
ので実装してみることにした。データセットはこんな感じでプロジェクトのルートや
ソリューションのルートに置いておく。データセットのディレクトリ名規約: T__{テストID}__{コメント}
テストデータのファイル名規約: R__{テーブル名}
期待値データのファイル名規約: E__{テーブル名 or クエリ名}GitHubで公開してるDumbAssert.csをプロジェクトに追加して使う例えばこんなテーブルがDBにあるとする（SQLite想定）データセットを用意する前提データ、NULLは&lt;NULL&gt;で表現する（設定で変えられるようになってる ※後述）。期待値データ、記述していないカラムは検証対象外になる。
ソート順は記述されたカラムの昇順になる。
この場合ORDER BY article_id asc, name asc, content asc, published asc, tag ascになる期待値データ、任意のクエリの実行結果を検証することもできる。
ストアドファンクションやビューの検証にも使える。テストコード、Prepareで前提データを投入、
Prepare時に読み込んだデータセットの期待値データがAssertで検証される既存のトランザクションを与えて前提データの投入と検証をすることができるので、
テスト後にロールバックしてデータを元に戻すということができる。前提データだけのデータセットを作って共通の前提データとして利用することもできる。特定のデータセットの期待値のみを検証することも可能。可能な限り依存を減らしたかったので.NETの標準機能だけでつくることにした。基本的にデータをADO.NETで取得してCSVの期待値と比較しているだけなのだけど、
文字列ならいいけど数値や日時、ブール型などをどう扱うかという問題については
全部文字列化して比較するという少々雑な方法をとっている。
シリアライザを設定してどのように文字列化するかを変更できるようになっている。
文字列と数値、日時以外はテストしてないので動くか微妙。。。
そのうちテストする。


