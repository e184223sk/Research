More than 1 year has passed since last update.LINQをつかってサクサク集計処理が書けるC#ですが、標準にあるLINQでは、集計できるのですが、うまく表示してくれないものに、クロス表があります。クロス表とはこういうものね。縦と横の要素を掛け合わせた値が入るやつです。
エクセルではピポットテーブルをつかってやる、あれです。
二つの変数間の関係を見るうえで、基本かつ最強であるものです。こういうクロス集計は、クエリ的には簡単です。二つの要素をGroupByのKeyにすればいいだけです。でも、上のクエリでの出力(JSON)は、という形で、二つの値のペアと、カウントという形になります。
これは、可読性が良くありません。クロス表がほしい。以降、昔に書いた記事、
TestProjectはC#のスクリプト実行環境
で書いたように、テストプロジェクトで使うことを前提としています。テストプロジェクトは、メソッド一つを簡単に実行できるわ、時間計測もしてくれるわ、デバッグもできるわで、超便利です。そして、このような拡張メソッドを定義しています。実行結果で、コンソール出力をみれるので、テストプロジェクトは便利です。また、拡張メソッドで、Nullチェックを本来しないとだめですが、記事の可読性のため飛ばしています。こういう拡張メソッドを作りました。TSV形式のテキストに変換します。タプル構文を使います。
タプル構文とDictionaryの相性はとてもいいです。これで、クロス表がコンソール出力できます。
TSVなので、結果をエクセルに張り付ければ、エクセルで見れます。初めは、これで充分とか思っていたのですが、
文字列のソートでは、10以上の数値を含むと適切にソートをしてくれない問題がありました。文字列あるあるです。そのため、という形で、ソート可能な数値で、GroupByをしてから、文字列をあとから作る、というモードも用意しました。
これで、さくっと、クロス表が作れます。Dictionary&lt;(row,col),T&gt; の形を作れば、クロス表を作れるのが分かりました。
つまり、Dictionary&lt;(row,col),T&gt; の形に変形すれば、なんでもクロス表が作れるということです。こういう形で、一つの変数でまずGroupByをして、そのあとで、対象を変えながら、GroupByをするということはよくやります。
形式的には、オブジェクトの中に、Dictionaryがあるパターンです。これも、クロス表にしたいですよね。
このような拡張メソッドを定義しておきます。SelectManyの中で、ペアのDicを展開することで、Dictionary&lt;(T1,T2),T3&gt;を作ります。
これは、SelectManyの使い方のちょいテクですが、毎回考えるのが面倒なので、拡張メソッド化しておくと便利です。使い方はこんな感じです。楽々クロス表出力。オブジェクトの中に、Dictionaryがある形でもクロス表が作れることが分かりました。
Dictionaryさえ作ってしまえば、クロス表が作れるということです。このような形で、オブジェクトをDictionaryに変換する拡張メソッドを作ると、このような形でクロス表が作れます。実数を見るより、割合を見た方が分かりやすいことはあります。
こういう拡張メソッドをサクッと定義しましょう。使い方とToRateを入れるだけで、割合に変換できます。クロス表ではないのですが、この拡張メソッドもとても便利です。使い方楽ちん出力。オブジェクト内オブジェクトがなければ、なんでも出力できます。
オブジェクト内オブジェクトがあるものだと、ToJSON() を定義して使うといいです。テストプロジェクトは、スクリプト実行環境で、とても便利。
メソッドチェーン楽しい。
さくさくクロス表が作れてデータ集計、超はかどる。


