More than 5 years have passed since last update.2016/07/26は雨が降って､自転車に乗れなかったのでむしゃくしゃしてやった｡後悔はしていない｡
System.Collections.Immutableを簡単にまとめていこうかなって｡System.Collections.Immutable
このあたりから落としてくれば良いかと｡ただ､VisualStudio使ってるなら､Nugetでさくっと落としてきた方が楽です､えぇ｡普段､一般的に使っているList&lt;T&gt;や､配列はImmutableでは無いので､以下のような操作をした結果､操作したインスタンスの状態が変化する｡このように､Add､RemoveAt､インデクサで値を追加･削除･変更すれば当然､listの内容は変更される｡この辺は､いつも通りなので､流す程度で｡じゃあ､Immutableってばなによ?ってなると､文字通り不変であると言うことになりまして､まぁ､その辺は見て頂いた方が早いかなってコトデ､以下サンプルこのように､構築方法は若干違うけど､普通のList&lt;T&gt;とかとまぁだいたい同じようなことが出来る｡まぁ､のっけから矛盾するようなこと言ってますが､実際可能です｡ただ､『不変である』と言う部分と喧嘩しないような手を考えないとまずいわけですが｡コレも実際サンプル見て頂ければけど､結果は以下の通りになって､多分想定通りに動かない｡まぁ､不変なのだし､変わっちゃ困る反面､じゃ､なんで､Addやら､RemoveAtみたいな操作系のメソッドが有るのかと言うことになる｡じゃあ､操作して変化した後の状態はどこから取得できるかというと､戻り値として取得可能となっている｡以下サンプルこのように､操作した結果は戻り値として取得可能で有り､元の構造には不変なまま｡なので､不変を担保しつつ操作することを許容していることになる｡これが､Immutalbeなモノたちの基本的な考え方になる｡じゃあ､既存の値をインデクサ経由で変更可能かというと､残念ながら不可能｡但し方法はある｡SetItemを使うことで､操作ができる｡ToBuilderメソッドでビルダーこさえて､そいつを操作することでも諸々の操作は可能｡元のImmutableなモノをMutableにして､操作して､またToImmutableでImmutableにするので､イメージとして､System.StringとSystem.Text.StringBuilderみたいな関係になるかなって｡当然､ToBuilderでこさえた､ImmutableList&lt;T&gt;.BuilderオブジェクトはMutableなので､その辺はご注意の程｡以下はその辺のサンプル｡今回は､Immutableなコレクションがどんなモノなのか､簡単にまとめてみました｡System.Collections.Immutableの中には､結構いろんなモノが詰まっているので､折を見てそのあたりだとか､ロックフリーな操作をして同時実行したときのスルプットを稼ぐ方法なんかもまとめていきたいと思います｡


