これは Maya Advent Calendar 2020 16日目の記事です。小ネタかつ既知かもしれませんが、MeshSyncの導入や紹介の手引きをする上で気になっていた箇所がありましたのでまとめてみました。文中はかなりUnity色が強いです。ご了承ください。雑にまとめるとアーティスト作業にフォーカスしたプロセス間通信のUnity版です。アセットのクオリティはイテレーション回数に比例しますが、最近のスマホアプリ製作はUnity側で調整しながらアセット編集を行わずしてクオリティを上げることが出来ない要素が多分に増えたため、MeshSyncのようなリアルタイムプレビュー機能は必須です。MeshSyncを用いた作業の導線を考えた時、
1. PlayMode中に修正したいオブジェクトを見つける
2. PrefabにあるFBXのパスを調べる
3. Mayaで上記のFBX(ma)を開いて、MeshSync関連コマンドの実行
の３ステップを踏む必要がアセット毎に毎回発生するので、これを1つにまとめたいと考えました。MayaのuserSetup.pyのような下準備を不要にしつつ、C#スクリプト1ファイルに機能をまとめてみます。一部ハードコードしている部分がありますので、ご自身の環境に読み替えてください。ポイントとして以下の条件で処理を分岐させています。余談として、MeshSyncコンポーネントのプロパティをMayaに送りたいのですが、それらメンバーはinternalです。アクセスする方法がなくもないのですが、それらを含めるとアドカレ内容の範囲を逸脱してUnityの方に書かないといけなくなりそうなので、ここでは省略します。普段はデュアルディスプレイで作業されている方も多いと思いますが、キャプチャの都合上1画面で収録しました。SceneView上での拡張に関しては完全に個人的な好みです。UnityMeshSync_~ コマンドはpluginがロードされた後になるので、evalDeferredで遅延実行します。viewPlaceコマンドはUnity側の画角を再現してみるために、おまけ程度に使ってみました。Prefabから直接FBXのパスを参照したりしていますが、実際のところ各社各プロジェクトによって対象を書き換える必要があるかと思います。内製エンジン環境だと（気の利く社内の開発者が作り込んでくれているので）あまり気にしていなかったことも、商用エンジンはそういう痒いところを自分で作って便利にするか、札束で叩いたアセットで解決するしかないです。細かい処理でもめんどくさがらずにやっておくと、時間短縮になって後が楽になりますね。


