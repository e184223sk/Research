public class ObjectPool : MonoBehaviour
{
    [SerializeField] private GameObject prefab;

    private readonly Queue&lt;GameObject&gt; _cache = new Queue&lt;GameObject&gt;();

    /// &lt;summary&gt;
    /// オブジェクトのインスタンスを取得します。
    /// キャッシュが無い場合、新しく生成します。
    /// &lt;/summary&gt;
    /// &lt;typeparam name="T"&gt;&lt;/typeparam&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public T GetOrCreate&lt;T&gt;() where T : Component
    {
        GameObject result;
        if (_cache.Count &gt; 0)
        {
            result = _cache.Dequeue();
        }
        else
        {
            result = Instantiate(prefab);
            var ret = result.AddComponent&lt;ObjectPoolReturn&gt;();
            ret.ObjectPool = this;
        }
        result.SetActive(true);

        return result.GetComponent&lt;T&gt;();
    }

    public void ReturnToPool(GameObject go)
    {
        _cache.Enqueue(go);
    }
}

