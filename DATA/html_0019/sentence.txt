私自身はフロントエンドなにそれ？なWindowsFormアプリケーションと運命を共にする世界線で仕事してますので非同期操作を要求される場面が殆どありません。皆無かと言われるとそうでもないんですけどExcelのデカいシート(数十万セル)の読み込みとかは確かに重たい処理でしょうが結局それを読み込まないと先に進めないのであまり非同期にする意味がない。そんなこんなでTaskを使い始めたのはつい最近のことなので多くの方の記事があるのは承知の上で学習メモも兼ねて。Task自体がいつから実装されているのかは知らないんですがasync/awaitキーワードが使えるようになったのはVS2012かららしいので何を今さら感全開ですね1。簡単な例でいきましょう。WindowsFormにボタンが一つだけあってボタンをクリックすると５秒後にメッセージボックスを表示します。重たい処理の例としてよくSleep()が出てきますが具体的には何かダウンロードしたりDBから検索したり数百ファイルからgrepするとかの数秒から数分行ったっきりになるような処理をイメージしてください。動かしてみるとわかりますが、この重たい処理をやっている間はフォームの移動もできませんし、他のコントロールが載っていたとしても一切操作できません。ロック状態というやつです。殆どの場合何か重たい処理の結果を見てから次に何かするわけで支障が無いと言えば無いのですが、邪魔だから最小化しておこうとか中断のためのキャンセルボタンを設置しても操作することができません。てなわけで少々具合が悪いです。やり方はいくつかありますが敷居が低いと思われる2BackgroundWorkerを使った例を挙げます。BackgroundWorkerは名前から推測できるように裏(=バックグランド)で動きます。上記コードでは「重たい処理を別スレッドで行わせる」「終わったことを知る」しかしていませんが、もう少し書き足せば進捗通知とキャンセル処理を行うことができます。BackgroundWorkerで事足りないこともないのですがいちいちイベントハンドラを書くのが面倒。DoWorkやRunWorkerCompletedの中身が上記のようにちょっとしか無いのであればこのように匿名メソッドにしてしまってイベントハンドラは書かないのもアリです。どうでしょう。一番最初の同期処理のコードにちょっと書き足すだけで非同期処理になりました。BakgroundWorkerを使った時と同様に５秒待ちしている間もフォームの操作が可能です。Taskに重たい処理をお任せした後はメインスレッドがそのまま走り続けますのでロック状態になりません。といったところで今回はほんのさわりだけ。var(型推論)を許容するかどうかを2019年に議論するような職場です ↩個人の感想です ↩


