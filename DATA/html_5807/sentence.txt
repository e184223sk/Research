More than 3 years have passed since last update.この辺は公式ドキュメントでもわかる内容なので簡単に。
Getting Started引数にElasticsearchのエンドポイントとか接続設定とかを渡すことができるので、接続編に初期化を入れています。passwordは平文を渡す必要があるので、工夫しましょう。Documentを登録するときのログとして、Debugレベルのログを残したい場合に重宝します。
Request BodyとResponse Bodyを見ることができます。
このメソッド名だとイマイチわからないですね。。。Elasticsearchを利用されたことのあるかたなら、誰もが叩いたことのあるだろうCat APIです。
こちらはマニュアルが無くとも使い方はわかりやすいです。Recordsで/_cat/healthの結果がKVP配列で返ってくると考えていただければ大丈夫です。
単一ホストのクラスタであれば1行しか返ってきませんのでSingleOrDefault()しましょう。
その後health.StatusしてやればGreenやらYellowやらが取得できます。こちらも/_cat/indicesの結果がKVP配列で返ってきます。
ラムダ式が使えるので楽ちんですね。Indexの作成やら、ドキュメントの作成／更新ができる万能APIですね。
ドキュメントは1つずつしか作成できませんが。
私はIndexの作成だけで利用しました。
CatIndices()で存在確認して、無ければ作る、みたいな。これだけです。
これのプロパティであるAcknowledgedに真偽値が入っています。
エラー処理等で使えますね。Index Name以外にも引数を渡せたような気がします。ドキュメントの作成／更新はBulk APIの方が処理が早いし、大量なドキュメントでも対応できるので、実質これ以外使わないと思います。
そして、私が今回一番ハマったところでもあります。こうしてみると「なんだ、簡単じゃん」と思うかも知れません。
私のハマりポイントをご紹介します。上述のBulk()メソッドですが、引数にIndex()、Type()、IndexMany()の3つを渡していますね。
＃IndexMany()はドキュメント配列を全部Index(登録／更新)しますよ、というものです。他にもいくつか渡せるのですが、その中にId()とかこれに類するものがありませんでした。
ElasticsearchにおいてID指定は重複排除を行う上でとても大事です。当プログラムでは、ドキュメントとして渡す文字列やオブジェクトのハッシュ値を求めて、それをIDとしていました。
1つのドキュメントだけを登録／更新する場合のIndex()メソッドであれば、Id()メソッドが用意されていて、ここにハッシュ値を渡せるのです。
このままIDを指定せずに実行すると、整数が順番に振られます。重複排除なんてできませんね。このBulk()メソッドにおけるID管理ってどうするんだ・・・？ってところでハマりました。結論としては、こうなります。ドキュメントとして登録する際の型として用意したクラスに、[ElasticsearchType(IdProperty = "DocumentId")]を宣言してあげる必要があります。
ここで指定しているDocumentIdはクラス内で宣言しているプロパティのどれでも構いません。Bulk()に渡すドキュメント配列を作る際に、この例でいうDocumentIdにハッシュ値を渡してあげれば、ドキュメントごとに異なるIDが振られ、重複していればUpdate、無ければCreateしてくれます。foreachでドキュメントの文字列配列やオブジェクト配列を回して、個々のドキュメントのハッシュ値を計算して(CreateSHA256Hash()というメソッドを別途作っています)、DocumentIdに突っ込む、ということをしてあげれば、ドキュメントごとに異なるIDが振られる、というロジックです。ここに至るまで調べに調べました。。。Stack Overflowにヒントがありました。
そのページをブックマークしておけば良かったのですが、解決した喜びでページを閉じてしまったので紹介できず。。。申し訳ない。。。


