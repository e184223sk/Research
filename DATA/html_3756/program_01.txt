
// 配列のindexを引数で受け取る
ParameterExpression ind = Expression.Parameter(typeof(int), "ind");

// 配列自体への参照
ParameterExpression arr = Expression.Parameter(typeof(float[]), "arr");

// 合計結果を計算し、リターンするための引数
ParameterExpression res = Expression.Parameter(typeof(float), "res");

// 配列へのアクセス `arr[ind]` 相当。
var left = Expression.ArrayIndex(arr, ind);

// 引数の現在の合計結果を右辺にするために分かりやすく名前をつける
var right = res;

// 配列要素と引数の値を加算する命令
BinaryExpression body = Expression.Add(left, right);

// func(float[] array, int index, float result) を実現するラムダ式を生成、コンパイル
var func = Expression.Lambda&lt;Func&lt;float[], int, float, float&gt;&gt;(body, arr, ind, res).Compile();

// 計算をテストするための配列
float[] data = new [] { 1f, 2f, 3f, 4f, 5f, };

// 結果格納変数
float result = 0;
for (int i = 0; i &lt; data.Length; i++)
{
    var d = data[i];
    // ここで実際に計算を行う
    result = func(data, i, result);
}

Console.WriteLine(result);

