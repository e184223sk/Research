
// 生成するインスタンスの型
Type ctorType = typeof(HogeClass);

// 引数で受け取る値のパラメータ
ParameterExpression propParam = Expression.Parameter(typeof(int), "propParam");

// インスタンス生成式
NewExpression ctor = Expression.New(ctorType);

// 生成したインスタンスを参照するローカル変数
ParameterExpression local = Expression.Parameter(ctorType, "instance");

// インスタンスのプロパティアクセス
MemberExpression prop = Expression.Property(local, "AnyProperty");

// 戻り値の型
LabelTarget returnTarget = Expression.Label(ctorType);

// 戻り値の設定
GotoExpression returnExpr = Expression.Return(returnTarget, local, ctorType);

// ちょっとこれの理由は不明・・・
LabelExpression returnLabel = Expression.Label(returnTarget, Expression.Default(ctorType));

// 上記処理を行うブロック文
BlockExpression body = Expression.Block(
    new[] { local },
    Expression.Assign(local, ctor),
    Expression.Assign(prop, propParam),
    returnExpr,
    returnLabel
);

// ラムダ式の生成
LambdaExpression lambda = Expression.Lambda&lt;Func&lt;int, HogeClass&gt;&gt;(body, propParam);
var func = (Func&lt;int, HogeClass&gt;)lambda.Compile();

// 結果を受け取る
var result = func(33);

Console.WriteLine(result);
Console.WriteLine(result.AnyProperty);

