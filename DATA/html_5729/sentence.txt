More than 3 years have passed since last update.ビンパッキング問題は、与えられた荷物をできるだけ少ない箱（ビンやコンテナ）に詰める問題です。例えば、荷物を詰めるコンテナがあり、そのコンテナには一定の重さまでしか荷物を詰め込めないとします。
この時、重さの異なる複数の荷物をどうやってコンテナに詰めれば、コンテナの数を少なくできるかを求めるのが、ビンパッキング問題です。Wikipedia「ビンパッキング問題」を参照してください。以下のようなプログラムを作成してみたいと思います。
項目に荷物の重さ（カンマ区切りで複数指定）を入力し、容量にビンに詰め込める最大の重さを入力すると、どのように詰め込んだら良いかを表示させるというものです。表示される結果ですが、１行が一つのビンを表しています。[ ] に表示されるのがビンに入る荷物の重さ、: の左側はその合計の重さとなります。この問題を解く万能なアルゴリズムはないということらしいです。まずは、Wikipedia「ビンパッキング問題」に載っている２つのアルゴリズムを実装してみます。なお、この２つのアルゴリズムは、荷物の全体像が分からないという前提のアルゴリズムです。一つずつ荷物を渡され、どのビンに詰めていったらよいかを判断しながら、荷物を詰めていくというアルゴリズムになっています。
これを頭に入れて読んでいただければと思います。一つ目は、最も空きが多いビンに荷物を入れてゆく解法です。以下に示す方法で荷物を詰めていきます。アルゴリズムAのソースコードです。もう一つのアルゴリズムも実装する予定なので、インターフェース　IBinPackingを定義しました。
アルゴリズムAを実現するクラスは、このこのインターフェースを実装します。それでは、このクラスを使って、問題を解くプログラムを書いてみます。C#の新しい機能であるタプルを使ってみました。
なんか、思いのほか長いコードになってしまいましたが、それほど複雑なことはしていないので、順に読んでいけば理解できると思います。それと面倒なので、入力値の検証はやっていません。では、実行してみます。wikipediaの例に載っている値をそのまま使ってみました。
同じ結果がでましたが、最後の２つは、ずいぶんと空きがあるので、あまり良い結果とは言えませんね。では、２つめのアルゴリズムで解いてみます。アルゴリズムAとの違いは、「最大」が「最小」になっただけですね。これでどんな違いがでるのか興味深いですね。アルゴリズムBは、BinPackingSolver2という名前でSolverクラスを作成しました。２つのコード(BinPackingSolver1,BinPackingSolver2)を比べてみると、ほとんど同じです。
OrderByDescendingしているか、OrderByしているかだけの違いです。言葉で表した時も「最大」が「最小」になっただけでしたから、当たり前といえば当たり前ですね。それでは、ProgramクラスのExecuteメソッドで、BinPackingSolver1をnewしているところをBinPackingSolver2に書き換えて実行してみます。これも、Wikipediaの記事と同じ結果となりました。今回の例だと、アルゴリズムBがより良い解答を導き出しましたが、これはたまたまであって、いつもアルゴリズムBが良い解答を出してくれるとは限りません。実際にいくつかの例でやってみれば、わかると思います。もっと賢いアルゴリズムはないものでしょうか？　最初に触れたように、この２つのアルゴリズムは、荷物の全体像が分からないという前提のアルゴリズムです。もし全体像が把握できるのなら、もっと賢いやり方がありそうです。ということで、別のアルゴリズムも考えてみたいと思います。続く...この記事は、Gushwell's C# Programming Pageで公開したものを大幅に加筆・修正したものです。


