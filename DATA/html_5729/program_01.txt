
// 解法A：最も空きが多いビンに入れていく解法
class BinPackingSolver1 : IBinPacking {

    public int BinSize { get; set; }

    public BinPackingSolver1(int size) {
        this.BinSize = size;
    }

    public ICollection&lt;ICollection&lt;int&gt;&gt; Solve(int[] items) {
        // 最初に一つのビンを用意する
        var binList = new List&lt;ICollection&lt;int&gt;&gt;();
        binList.Add(new List&lt;int&gt;());
        // 各項目をビンに入れてゆく
        foreach (var n in items) {
            // nが入るビンを見つける （空きが最大のビン）
            var target = binList.Select(b =&gt; new { Bin = b, Space = BinSize - b.Sum(t =&gt; t) })
                             .Where(x =&gt; x.Space &gt;= n)
                             .OrderByDescending(x =&gt; x.Space)
                             .Select(x =&gt; x.Bin);
            var bin = target.FirstOrDefault();
            if (bin != null) {
                // nが入るビンが見つかったので、そこに入れる
                bin.Add(n);
            } else {
                // 見つからなかったので、新しいビンを用意する
                List&lt;int&gt; bin2 = new List&lt;int&gt;() { n };
                binList.Add(bin2);
            }
        }
        return binList;
    }
}

