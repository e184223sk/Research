
public class MainViewModel : ViewModelBase
{
    private IMainModel Model { get; }

    private Property&lt;string&gt; paramA = new Property&lt;string&gt;("0",
        (value) =&gt;
        {
            if (value.Length == 0)
                return "未入力エラー";
            else if (!int.TryParse(value, out int _))
                return "フォーマットエラー";
            else
                return null;
        });

    private Property&lt;string&gt; paramB = new Property&lt;string&gt;("0",
        (value) =&gt;
        {
            if (value.Length == 0)
                return "未入力エラー";
            else if (!int.TryParse(value, out int _))
                return "フォーマットエラー";
            else
                return null;
        });

    private Property&lt;int&gt; ans = new Property&lt;int&gt;();

    public string ParamA
    {
        get =&gt; this.paramA;
        set
        {
            // 入力エラーがなければModelに設定
            if (this.paramA.SetValue(value, this))
                this.Model.ParamA = int.Parse(this.ParamA);
        }
    }

    public string ParamB
    {
        get =&gt; this.paramB;
        set
        {
            // 入力エラーがなければModelに設定
            if (this.paramB.SetValue(value, this))
                this.Model.ParamB = int.Parse(this.ParamB);
        }
    }

    public int Answer
    {
        get =&gt; this.ans;
        set =&gt; this.ans.SetValue(value, this);
    }

    public ICommand SumCommand { get; }

    public MainViewModel()
    {
        // TODO: 本来ならDIコンテナから取得
        this.Model = new MainModel();
        this.Model.PropertyChanged += Model_PropertyChanged;

        // Sumボタン
        this.SumCommand = new Command(() =&gt;
        {
            // 実行
            this.Model.Sum();
        }, paramA, paramB);
    }

    private void Model_PropertyChanged(object sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(this.Model.Answer))
            this.Answer = this.Model.Answer;
    }
}

