using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.XR;
public class VR_Input : MonoBehaviour
{
    public enum InputVRBool { Primary, Secondary, Trigger, Grip, Menu, PrimaryAxis };
    public enum InputVRFloat { Trigger, Grip };
    public static bool GetPresseButton(XRNode node, InputVRBool inputVRBool)
    {
        bool value = false;
        var inputdevice = new List&lt;InputDevice&gt;();
        InputDevices.GetDevicesAtXRNode(node, inputdevice);
        if (0 &lt; inputdevice.Count)
        {
            foreach (var device in inputdevice)
            {
                switch (inputVRBool)
                {
                    case InputVRBool.Trigger: device.TryGetFeatureValue(CommonUsages.triggerButton, out value); break;
                    case InputVRBool.Grip: device.TryGetFeatureValue(CommonUsages.gripButton, out value); break;
                    case InputVRBool.Primary: device.TryGetFeatureValue(CommonUsages.primaryButton, out value); break;
                    case InputVRBool.Secondary: device.TryGetFeatureValue(CommonUsages.secondaryButton, out value); break;
                    case InputVRBool.PrimaryAxis: device.TryGetFeatureValue(CommonUsages.primary2DAxisClick, out value); break; 
                    case InputVRBool.Menu:
                        if (node == XRNode.LeftHand)
                        {
                            device.TryGetFeatureValue(CommonUsages.menuButton, out value);
                        }
                        break;
                }
            }
        }
        return value;
    }
    public static float GetAxis1D(XRNode node, InputVRFloat inputVRFloat)
    {
        float value = 0;
        var inputdevice = new List&lt;InputDevice&gt;();
        InputDevices.GetDevicesAtXRNode(node, inputdevice);
        if (0 &lt; inputdevice.Count)
        {
            foreach (var device in inputdevice)
            {
                switch (inputVRFloat)
                {
                    case InputVRFloat.Trigger: device.TryGetFeatureValue(CommonUsages.trigger, out value); break;
                    case InputVRFloat.Grip: device.TryGetFeatureValue(CommonUsages.grip, out value); break;
                }
            }
        }
        return value;
    }
    public static Vector2 GetAxis2D(XRNode node)
    {
        Vector2 value = Vector2.zero;
        var inputdevice = new List&lt;InputDevice&gt;();
        InputDevices.GetDevicesAtXRNode(node, inputdevice);
        if (0 &lt; inputdevice.Count)
        {
            foreach (var device in inputdevice)
            {
                device.TryGetFeatureValue(CommonUsages.primary2DAxis, out value);
            }
        }
        return value;
    }
    public static void Recenter()
    {
        var inputdevice = new List&lt;InputDevice&gt;();
        InputDevices.GetDevicesAtXRNode(XRNode.CenterEye, inputdevice);
        if (0 &lt; inputdevice.Count)
        {
            foreach (var device in inputdevice)
            {
                device.subsystem.TryRecenter();
            }
        }
    } 
}


