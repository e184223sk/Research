More than 1 year has passed since last update..Net Core で、特定のインターフェイス実装を探して、実行するというプログラムを書きたいと思って調査した。実際のユースケースは、プロバイダを拡張可能にしたくて、Azure Functions の　DIを一か所ではなく、プロバイダごとに書くようにしたかったのだが、Azure Functions ではどうやら、Startupクラスは１つまでしか認識しないっぽいので、自分で委譲するプログラムを書くことにした。別の　namespace にインターフェイス実装したクラスを作成する。インターフェイスは、パラメータありのパターンと無しのパターンを用意した。どちらも同一のプロジェクトにいるので、同じアセンブリになる。ITalkable interface and Hello classworld class上記のインターフェイスを実装したクラスを探索する。現在のコードが書かれたデフォルトのアセンブリでよければMicrosoft.Extensions.DependencyModelをnugetで取得して、DependencyContext.Default.RuntimeLibrariesの名前が一致するものを調べる。参考にしたコードでは、そのDependencyがアセンブリ名で始まるものも対象としている。（なぜそうしているのか？はまだ理解できていません。）このコードを使うと、assemblyName で指定したアセンブリが取得できるようになります。AssemblyのGetExportedTypeメソッドで、public のクラスの型が取れますので、それが、ターゲットのインターフェイスを実装しているかを調査したら完了。多分Linqで書いたらもっとすっきりすると思います。あとは、リフレクションで取得した対象のクラスのインスタンスを生成して実行すれば終了。先ほどのループの中身のみ抜き出します。Activator.CreateInstanceでインスタンスを生成したのち、method.Invokeで単純にメソッドを実行します。リフレクションであっても、参照渡しになるので、List であるresultに値が入って表示されます。resultの中身を見てみると、しっかり値が入っています。.NetFramework と .NetCore でやり方が違う様子ですが、これで無事取得でしました。DependencyContext.Loadなどのメソッドを使うと、現在のライブラリ以外も検索できるので、拡張性を持ったライブラリなどを作るときには使えそうですね。


