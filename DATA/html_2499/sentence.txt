More than 1 year has passed since last update.前回：ASP.NET Core MVCであみだくじを作ってみる 2 (ビュー,コントローラーの追加)
今回は、モデルを追加してビューと紐付けます。
モデルのデータを表示、編集し、別コントローラーへ移るところも作ります。ソリューションエクスプローラーの「Models」を選択します。
右クリックでメニューを表示し、追加⇒クラスを選択します。
名前を「KujiModel.cs」にして追加します。あみだくじには「タイトル」「くじ数」「結果(あたり、はずれ等)」があります。
それぞれ、データアノテーションの属性を付けて入力時に検証を行えるようにしておきます。
選択したくじ番号も作っておきます。コードは以下の通りです。Homeビューで上記モデルのデータを入力しようと思います。
Homeコントローラーでモデルのインスタンスを生成し、ビューに渡すように変更します。ビューにデータを表示させてみます。
Home\Index.cshtmlを以下のように変更します。
ここでは、グリッドレイアウトを使ってみました。1行目の「＠model Amidakuji.Models.KujiModel」で、
このビューはKujiModelを使いますよ、という宣言になります。
KujiModelのプロパティに「＠Model.ｘｘｘ」でアクセスできるようになります。
詳しくは、ASP.NET Core の Razor 構文リファレンスに書かれています。途中で、＠forと書かれた行があります。
このように、Razorでは@記号によってC#のコードを埋め込むことができます。ボタンを押した時にPOSTしたいので、formタグを使います。
formタグは、Webサーバーに情報を送信するための送信ボタンなどを含める区間です。
htmlタグについてはこちらformタグのasp-controller、asp-actionは、ASP.NETのタグヘルパーです。
タグヘルパーについてはこちら
上記コードの場合、POSTでHomeControllerのIndexアクションを呼び出しますよ、という意味になります。
asp-controllerは、xxxControllerのxxxだけを指定します。inputタグのasp-forは、入力タグヘルパーです。input要素をモデルにバインドします。入力エラー表示欄のasp-validation-summaryは、検証タグヘルパーです。
モデルのプロパティに付けたデータアノテーション属性で入力値の検証を行い、エラーがあればメッセージを表示します。上記のHomeコントローラーでは、POSTした時もIndex()が呼ばれます。
Index()はGET用として、新しくPOSTした時のIndexアクションを追加します。
HomeコントローラーのIndexを以下のように変更します。元々のIndex()には[HttpGet]を付け、GET用としました。
[HttpPost]を付けたIndexがPOSTで呼ばれるアクションになります。パラメータの「string name」ですが、Home\Index.cshtmlのボタンにあるタグヘルパー「asp-route-name」で設定した"set"や"create"が渡されます。
パラメータ名とasp-route-xxxのxxx部分は同じである必要があります。xxx部分は自分で決めた文字列が使えます。
詳しくはこちら 
また、パラメータの「KujiModel model」には、ビューで入力したデータを反映したモデルが渡されます。最後に戻り値をRedirectToActionとしたのは、別コントローラー(くじコントローラー)のアクションに移りたいためです。
ViewとRedirectToActionの違いは、こちらの質問の回答を参考にしました。(自動翻訳なので少し変)Homeを表示したところです。

モデルとビューの紐付けが出来ています。くじの数に範囲外の数字を入力し、結果を設定するボタンを押下してみます。

データアノテーション検証が出来てます。くじの数に範囲内の数字を入力し、結果を設定するボタンを押下してみます。

[HttpPost]を付けたIndexアクション内の処理が行われました。くじを作るボタンを押下してみます。

Kujiビューに移りました。今回は、モデルを追加してビューと紐付けるところまでを行いました。
次回は、cssを使ってビューのレイアウトを作成します。
次回分はこちら⇒ASP.NET Core MVCであみだくじを作ってみる 4 (cssの作成)


