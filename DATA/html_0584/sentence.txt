どの言語でもあるように、C#でも複数のデータを扱う為の方法が存在します。これを "コレクション" と呼びます。
今回はコレクションについて述べていきます。コレクションにはいくつか種類があります。
どれも複数のデータを扱えるという点で同じではありますが、細かく使い方が違います。これらについて一つずつ見ていきましょう最も基本的なコレクションです。
簡単に扱うことができますが、固定長なので必要なデータの要素数が最初から分かっている場合に使うことができます。C#ではコレクションのインデックス（要素番号）は0から始まるので、要素数3の配列を作成した場合、アクセスできるインデックスは0~2の3つになります。
また、要素外のインデックスにアクセスした場合、実行時エラーが発生します。配列は次のように最初から要素を指定して初期化することも可能です。配列とは違い、リストは要素数が可変なのでAddメソッドを使うことで要素を追加していくことが可能です。ただし、リストにおいても要素外のインデックスへのアクセスは実行時エラーになります。
※言語によっては初期値で自動追加される場合もありますが、C#のリストはプログラマの想定外の挙動を抑制するためエラーとされています。また、それを回避するためにある要素がリストに含まれているかどうかを判定するContainsメソッドも持っています。キーと値を紐づけた情報を複数持つことができます。他の言語ではハッシュマップなどとも呼ばれます。ディクショナリは配列やリストの様な"何番目"という考え方ではなく追加された"キー"を基準に値にアクセスしていきます。
キーと値のペアはリストと同じくAddメソッドによる追加、ContainsKeyメソッドによるキーの確認ができます。追加されていない要素へアクセスしたり、既に追加されている要素と同じキーを再度追加しようとするとエラーが発生します。
追加されているかどうかの管理を厳密に行うことにより、キーの一意性を保つことができます。スタックとキューに関しては対比しながら同時に紹介します。上記の通り、スタックやキューは今までのコレクションとは違い、アクセスするときに番号やキーを指定しません。
Push/Enqueueメソッドで要素を追加し、Pop/Dequeueメソッドによって要素を取り出します。注意しなければならないのはPop/Dequeueメソッドによって取り出した要素はスタックやキュー本体からも消えているということです。また、スタックとキューで何が最も違うかと言えばその取り出す順番にあります。
スタックは一般にFILO(First In Last Out)方式であり、「最初に入れた要素が最後に出てくる」ことになります。
Popメソッドによって取り出されるのは、要素の中で一番最後にPushされたものです。反対にキューは一般にFIFO(First In First Out)方式であり、「最初に入れた要素が最初に出てくる」ことになります。
Dequeueメソッドによって取り出されるのは、要素の中で一番最初にEnqueueされたものです。IEnumerableという概念を知ってからだとコレクションについてのさらに詳しい内容を知ることができますが、このページではここまで。


