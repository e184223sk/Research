using QuickGraph;
using QuickGraph.Algorithms.Observers;
using QuickGraph.Algorithms.ShortestPath;
using System;
using System.Collections.Generic;

namespace ConsoleApplication1
{
    class Program
    {
        class Graph : AdjacencyGraph&lt;string, Edge&gt; { }
        class Edge : IEdge&lt;string&gt;
        {
            public Edge(string n, string s, string t, int w)
            {
                Name = n;
                Source = s;
                Target = t;
                Weight = w;
            }
            public string Name { get; set; }
            public string Source { get; set; }
            public string Target { get; set; }
            public int Weight { get; set; }
        }

        static void Main(string[] args)
        {
            Graph g = new Graph();

            // create start / finish vertex
            g.AddVertex("s"); // start
            g.AddVertex("f"); // finish

            // create edge / vertex
            g.AddVertex("sa");
            g.AddVertex("ea");
            g.AddEdge(new Edge("A", "sa", "ea", -6));
            g.AddVertex("sb");
            g.AddVertex("eb");
            g.AddEdge(new Edge("B", "sb", "eb", -5));
            g.AddVertex("sc");
            g.AddVertex("ec");
            g.AddEdge(new Edge("C", "sc", "ec", -8));
            g.AddVertex("sd");
            g.AddVertex("ed");
            g.AddEdge(new Edge("D", "sd", "ed", -2));
            g.AddVertex("se");
            g.AddVertex("ee");
            g.AddEdge(new Edge("E", "se", "ee", -10));

            // create dummy edge
            g.AddEdge(new Edge("d1", "s", "sa", 0)); // start -&gt; A
            g.AddEdge(new Edge("d2", "s", "sb", 0)); // start -&gt; B
            g.AddEdge(new Edge("d3", "ea", "sc", 0)); // A -&gt; C
            g.AddEdge(new Edge("d4", "eb", "sc", 0)); // B -&gt; C
            g.AddEdge(new Edge("d5", "eb", "sd", 0)); // B -&gt; D
            g.AddEdge(new Edge("d6", "ec", "se", 0)); // C -&gt; E
            g.AddEdge(new Edge("d7", "ed", "se", 0)); // D -&gt; E
            g.AddEdge(new Edge("d8", "ee", "f", 0)); // E -&gt; finish

            BellmanFordShortestPathAlgorithm&lt;string, Edge&gt; algo =
                new BellmanFordShortestPathAlgorithm&lt;string, Edge&gt;(g, e =&gt; e.Weight);
            VertexPredecessorRecorderObserver&lt;string, Edge&gt; pred =
                new VertexPredecessorRecorderObserver&lt;string, Edge&gt;();
            pred.Attach(algo);
            algo.Compute("s");
            IEnumerable&lt;Edge&gt; path;
            pred.TryGetPath("f", out path);
            int cost = 0;
            foreach (Edge e in path)
            {
                cost += e.Weight;
                Console.WriteLine("Name={0}, weight={1}, cost={2}", e.Name, e.Weight, cost);
            }
            Console.Read();
        }
    }
}

