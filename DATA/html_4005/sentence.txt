More than 1 year has passed since last update.変数の命名規則から型の種類, リテラルと渡って今回.二章を終わらせて演算子の章へと入っていく.暗黙な型変換と明示的な型変換(キャスト)がするみたい数値リテラルにおいては暗黙てな型変換が対応している様子.
暗黙的変換の対応表はこちらほか言語にもあるように, 浮動小数点&lt;-&gt;整数の間で情報落ちももちろん発生する.暗黙てな変換は別称で"拡大解釈"といわれるらしい.
扱える値のキャパが狭い型から広いキャパに対して変換をするからだとか対して明示的な変換は縮小変換...というのだとか. これは, キャパが広い物から狭い物への変換.
明示的型変換対応表(データ型) 変数で行えるみたいちなみに, 本では変数と書いてあったけどダイレクトに値を指定してあげてもできた. (byte)123みたいなのでも可能みたい.
前回, サフィックスを扱ったけれどこっちの方が見やすい気がする...開発者が値の範囲を保障する必要があるので注意が必要数値型のクラスからParseメソッドを使う.
10進数以外の進数を扱う場合は例外的な扱いが必要.逆に数値を文字列にする場合は, 数値型のToStringメソッドを使用する調べてみると, Conver.ToXXXの第二引数は2進数以外にも任意の進数にできるみたい.参照型を分類するとここではclass, array, 補足としてnullを扱うオブジェクト指向の説明は割愛.
クラスに用意されたデータの入れ物のことをフィールド, それを操作するための関数をメソッド, というらしい.フィールドとはプロパティの事かなと思って調べてみるとどうも違うらしい.
フィールドはカプセル化されたデータのこと, プロパティはフィールドのsetterとgetter...みたいなことかな?データメンバー, 関数メンバーのそれぞれの代表例がフィールド, メソッドという認識にして先へ進む.インスタンスとはオブジェクトをかっこつけた言い方...ってどっかのイベントで言われたというのを風のうわさで聞いた.
デザインパターンの勉強もいずれしたいなインスタンス化ではクラスを複製してメモリを確保する, と書いてある.
ただし, 確保されるのはフィールド用のメモリ(メソッドはオブジェクトがここに持つ必要がないからクラスをインスタンス化するにnewを用いる.
メンバに対するアクセスは"."の後にフィールド名もしくはメソッド名を入れるクラスに対して静的なフィールド, メソッドの呼び出し.nullってわりと怖いイメージ. nilが存在してたり何かと敬遠したくなる.
よくトイレットペーパーでundefined, null, 0を表すやつを思い出した.参照型はallocしただけの場合, nullが初期値になる. また, 値として参照型にnullを入れることも可能.
ただし, nullの場合はフィールド, メソッドにアクセスすると, NullReferenceExceptionが発生する.null参照エラーを極力避けるためにも, 初期値は入れておいたほうが良いと確かほんの最初の方にも書いてあった.
実際, pythonやJuliaで配列生成するときも, zeros(n,m)とかうつし, C#でもそれは同じなのだろう.objが非nullならばアクセスしたい, それ以外ならnullを返したい, という場合, null条件演算子(?.)を用いることでそれが可能らしい.これは, 値の存在確認ができるということと同じなのかな(c.f. XX==null, はc#ではできる様子)標準的な参照型じゃない値型の物では, "どの値をも参照してない"意味のnullは使えないが, それを可能にする型
有効な値と, 値として無効な状態を区別するために使う様子. minimumを設定することで表してた時代もあったとかtype?というように, typeの後に?を付けることでできる様子全てが参照型の言語を使っていた自分からすると珍しい記法だプロパティとして, HasValue(値保持の確認), Value(値を戻す)の二つを持つちなみに暗黙的/明示的と同じルール.nullを扱えるという点で広いキャパを持つtype?からtypeへはキャストが必要, 逆はいわゆる"拡大解釈"ただし個人的には, 上記のnumに対して, num.Valueとした方が同じキャパなのであれば楽に見える....勝手にC#の配列はコレクションだと思っていましたが普通に配列もあったのか....初期値指定の方法では, 要素の列挙は複数行にわたっていても ", " で行が区切られている限りokらしい.
また, 初期値を指定する宣言方法の時, 宣言と初期化を分けるのであればという形で, new[]の記述が必要になる様子ほか言語と同じ. data[n] | nは任意の要素番号(0始まり)要素の書き換えも同様に可能だけれど, out of rangeの例外投げられないようにねブラケットに","を入れる. 上記は行列になるけれど, テンソルなど作る場合は[,,]となるみたい.アクセスにしても, ブラケットを分けて記述せずに,  d[m,n]という風に書く行列としてではなくて, aryを格納するためのaryのようなaryを作ろうとすると, ジャギーな配列, ジャグ配列を作りたくなる場合もある.宣言方法初期値を与えたかった場合は, new[]{a,b,c}という風にも書ける.Length/Rank propertyを利用.
ただしジャグ配列は多次元に見えるけれど, 配列を格納している一次元配列の扱いのようだ次回から三章, 演算子に入ります.


