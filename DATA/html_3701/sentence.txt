More than 1 year has passed since last update.リモートAPI である gRPC では通信系の障害対策は必須と言えます。Polly を使った Interceptor を考えてみます。Polly は、フロー制御ライブラリです。複雑になりがちな次のフローを簡潔に実装することができます。【しばやん雑記】C# と Polly を使って回復力の高いアプリケーションを書く
【Microsoft Docs】サーキット ブレーカー パターンを実装するポリシーの生成をインターセプター本体から分離するため、ポリシーを返すインターフェースを定義しました。Polly によるフロー制御を行うインターセプターです。コンストラクタで IRpcPollyProvider インスタンスを受け取ります。取得したポリシーの Execute メソッドを介して RPC メソッドを実行します。RpcException がスローされたときにリトライを行うポリシーを返す IRpcPollyProvider 実装クラスです。
リトライを行うたびにリトライまでの待機時間を 1 秒ずつのばしています。クライアントサイドで生成した CallInvoker に対してインターセプターを設定します。gRPC には 5 種類の RPC メソッドがあります。このうち 1 を除く 2 ～ 4 のメソッドは、サーバーと接続していない状態でも呼び出し自体は成功します。その後、メソッドの戻り値の Call オブジェクトを通じて通信を伴う処理が行われた時点で例外が発生します。そのため、インターセプターに定義されているインターセプトメソッドに対して Polly による制御を行っても、トリガーとしたい例外自体が発生しないため何も行われません。例外の発生をトリガーとしない場合のみ制御可能です。つまり、通信系の障害対策を行いたければ、C# gRPC ストリーム入出力に対してインターセプトする方法 のようにストリーム操作に対しても Polly による制御を行うように実装する必要があります。今回はここまでとします。


