
public class RpcRetryPolicy : IRpcPollyProvider
{
    /// &lt;summary&gt;
    /// 
    /// &lt;/summary&gt;
    /// &lt;param name="maxRetryCount"&gt;最大リトライ回数&lt;/param&gt;
    public RpcRetryPolicy(int maxRetryCount)
    {
        m_SyncPolicy = Policy.Handle&lt;RpcException&gt;().Retry(
            maxRetryCount
            , (ex, count) =&gt; { Thread.Sleep(count * 1000); }
        );
        m_AsyncPolicy = Policy.Handle&lt;RpcException&gt;().RetryAsync(
            maxRetryCount
            , (ex, count) =&gt; { return Task.Delay(count * 1000); }
        );
    }

    private readonly ISyncPolicy m_SyncPolicy;
    private readonly IAsyncPolicy m_AsyncPolicy;

    public ISyncPolicy GetClientSyncPolicy&lt;TRequest, TResponse&gt;(ClientInterceptorContext&lt;TRequest, TResponse&gt; context)
        where TRequest : class
        where TResponse : class
    {
        return m_SyncPolicy;
    }

    public IAsyncPolicy GetClientAsyncPolicy&lt;TRequest, TResponse&gt;(ClientInterceptorContext&lt;TRequest, TResponse&gt; context)
        where TRequest : class
        where TResponse : class
    {
        return m_AsyncPolicy;
    }

    public ISyncPolicy GetServerSyncPolicy(ServerCallContext context)
    {
        return m_SyncPolicy;
    }

    public IAsyncPolicy GetServerAsyncPolicy(ServerCallContext context)
    {
        return m_AsyncPolicy;
    }
}

