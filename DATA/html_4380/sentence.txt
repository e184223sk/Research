More than 1 year has passed since last update.Tech Summit2018に行ってきました。
そこでAzure Bot ServiceがSDK v4になっていたので、ハンズオンにて体験。
v3と変更箇所がけっこうありました。
加えて、これまでSlackを使っていたのですが、Teamsへ移行が決定。。
そこで、docomoAPIの自然対話を盛り込んだBotをTeamsにあげるまでを備忘録的に残します。こちらではSDK v3を使って作っているのですが、
まず作成方法・作成後の画面が大きく変わっていました。
１から作り方を備忘録。Azureポータル画面のリソースの追加にて「Web App Bot」で検索
Web App ということで、今回は、Web Apps上にBotを乗せるイメージです。そのため常時稼働しているという感じになります。
一方、Bot作成方法としてもうひとつファンクションを使って作成する方法があると思います。
こちらは、アクションがあってから動くので、返答までに少々時間がかかってしまいます。
作成をクリックし、基本情報を入力していきます。大きな変更点としてはボットテンプレートが下記のように変更されました。

Echo Botは簡単なオウム返しBotであり、コードも追いやすいということで今回はこちらを選択します。作成が完了しましたら、Web アプリ ボットを確認してみます。
Web アプリ ボットの"Webチャットでテスト"から、チャットの確認ができます。
ここで表示される概要画面も大きく変更されている点だと思います。
docomoAPIの取得方法は私の過去記事を参照してみてください。
Slackbot備忘録(2)　～docomoAPIを使ったbot～すると、次のような画面がでると思うので、zipファイルをダウンロードをクリックします。
こちらもv3にはなかった機能で、ここからファイルをダウンロードすれば、
自動的にBot作成に必要なファイルを用意してくれます。
ダウンロードされたファイルの中身はこんな感じ

EchoBotWithCounter.slnをダブルクリックすればすぐにプロジェクトを始められます。C#は普段かかないため、他サイトを参考にしながら作成しています。
文法的におかしい部分があるかもしれませんが、ご了承ください。。今回追加したusingは以下の通りです。まずはAPIで送るjson部分のモデルクラスを作成します。続いてAPI処理部分をかいていきます。APIの処理部分は関数に切り出した方がスマートですが、
今回はひとまずOnTurnAsyncの中に書いています。
後日ちゃんと書き直したものをUPしたいと思います。
すみません。コードをデバックしながら見ると流れを追いやすいと思いますが、
メッセージを受け取って、返答を処理をしているのは基本的にこの部分です。
なので、自分なりの処理を追加したい場合は、EchoWithCounteBot.csにかくのがいいのかなと思います。作成したBotを発行してTeamsで動かす準備をします。発行プロファイルの取得をクリックして、発行プロファイルをダウンロードします。
ダウンロードしたプロファイルをメモ帳なりサクラエディタなりで開きます。
開くと"userPWD"という部分があるので、そこをコピーしておきます。Visual Studioに戻り、ソリューションを右クリックして発行を選びます。構成をクリックすると、パスワードを入力する部分が表示されるので、そちらに先ほど取得した"userPWD"を入力します。
接続の検証をしてみて、正常に検証出来たら保存。そして発行ボタンをクリックします。
以上で発行は終了です。私はすでに登録しているため、上にMicrosoft Teams実行中となっていますが、
実際は接続したいチャンネルをクリックして、保存ボタンを押せば追加できます。
設定をクリックします。Microsoft App IDという画面があるので、このIDをコピーします。
Teamsを立ち上げて、チャットから新しいチャットをクリックします。メンバーの入力欄に先ほどのMicrosoft App IDを入力すると、ボットの表示名が現れると思います。会話してみます。

相変わらずなんともいえない会話ができました。普段C#書かないので、コード調べるのに苦労しました…
pythonも早く導入されるといいなぁ…
オウム返しBotを作成するまではほんと一瞬です。
チームで会話させたかったのですが、なかなかうまくいっていないので、
出来次第投稿予定。
ぜんぜん関係ないですが、Tech Summitで聞いたちょまどさんの、
スマートスピーカのセッションが面白かったです。


