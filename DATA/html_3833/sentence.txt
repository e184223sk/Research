C#の拡張メソッドの存在意義が文法だけでは分かりにくいと感じ、調査を行いました。端的に言うと「本来メソッドが追加できないようなクラス・インターフェイスなどにメソッドを追加したい」状況です「特定のデータに関連するコードが重複してしまうので、解決したい」という状況はよくあると思います。通常、特定の重複部分をメソッドへの抽出して、新しいクラスを定義することで解決ができます。
しかし、コードの変更・追加ができない場合もあります。具体例をいくつか挙げます。サードパーティー製のコード
素晴らしい機能を提供してくれるライブラリでも、自分の欲しい機能を持つメソッドだけが、不運にも提供されていないことがまれによくあります。列挙型
そもそもメソッドが持てませんインターフェイス
そもそも実装を追加することができません
なお、ここで想定しているのは、インターフェイスを実装するクラスの内部実装ではなく、インターフェイスに対する利用者側のコードの重複です。基本的には、インターフェイスの内部実装はクラスごとに異なります。
(※C#8.0からはインターフェイスもデフォルト実装を持てますが、新しめの機能であることもあり、例えばUnityでは、Unity2020.1以前では使えないなど、完全な普及にはもうしばらくかかりそうです。)​ これらに対していつも同じような処理をしている場合には、オブジェクト指向的な解決が難しくなります。以下では、サードパーティー製のクラスThirdPartyClassに、とある機能DoSomething()を追加したくなったという設定で、その解決策を考えます。重複したコードを生み出す手間を省くことはできますが、重複自体をなくすことはできません。いろいろな場所で言われることですが、コピペはやめましょう。サードパーティー製のコードに独自で変更を入れるのは、不可能ではないとしても、かなり辛いことになります。そのライブラリがバージョンアップするたびに自分で書いたコードの保守も必要になるからです。また、string型に対する処理など、クラス自体の動作に変更を加えられない場合もあります。以上のようなコードを重複が発生しているクラスに書くことで重複を削除できます。この方法だと、コードの見通しが悪くなってしまいます。なぜなら、この処理が書かれているのは、DoSomething()で処理するデータとは別のデータに関するメソッドを集めたクラスであり、単に内部的に重複したサードパーティー製のクラスへの処理を書くには、論理的に自然な場所とは言い難いからです。この問題は、別のクラスに静的メソッドを追加することで緩和できます。問題となっているクラスを継承し、欲しい機能をメソッドとして追加することで、オブジェクト指向的に自然に機能を拡張することができます。
  この方法をとる場合、既存のコードのすべてのサードパーティー製のクラス名を探して継承したものに置き換えなければならず、多少の面倒を伴います。重複が発生している部分以外に、newしている部分全てで新しいクラスのインスタンスを生成しなければならないからです。問題となっているクラスをprivateフィールドとして持ち、欲しい機能を実装したラッパーを作成することで、処理が書かれている場所を論理的に正しくできます。この方法では、継承によって解決した場合に比べてnewしているすべての場所を探す必要はありません。しかし、元クラスで公開されているメソッドとフィールドすべてについて、委譲するメソッドとプロパティを生成しなければならず非常に面倒です。また、既存のコードをラッパーを使うように変更する必要が生まれます。基本的な文法をコードで説明します。今回の記事の趣旨から外れるので詳しい説明は省きます。拡張メソッドは、あたかもインスタンスメソッドであるかのように静的メソッドを呼び出すことができる機能です。
したがって、すでに紹介した静的メソッドによる解決を適用した後、それを拡張メソッドに書き換えるだけ解決できます。ラッパーによる解決や継承による解決は自分の今まで書いたコードに変更を加えてしまいます。
  対して拡張メソッドは、既存のコードに変更を加えずとも、重複が発生している部分だけを改善すれば十分です。ラッパーによる解決はラッパー自体の作成による手間が多く、書くのが面倒ですが、拡張メソッドの場合は本質的なロジック以外のコードは最小限に抑えられています。これは拡張メソッドが静的メソッドによる解決よりも優れている点です。C#において拡張メソッドが使われている代表的な存在であるLINQでは、以下のようなメソッドチェーンが書けるように定義されており、処理の流れが分かりやすくなります。Sum()やSelect()は、「IEnumerableインターフェースに対していつも同様の処理をしていることが多いのに、インターフェースにコードが書けない」という、まさに今回の記事の課題を解決するものになります。これを静的メソッドで行うと以下のようになり、かっこの対応が非常に読みにくいです。利用者からすると、静的メソッドによる解決をした場合、どうしてもThirdPartyHealperなどといった本来知らなくていいクラスにアクセスしなければなりません。しかし、拡張メソッドを使えば、(usingなどの必要はあるにせよ、ロジックを書く段階では)拡張メソッドがどこで定義されているかわからなくとも特定の機能を使うことができます。拡張メソッドは、その名前の通り、「本来プログラマが変更することが難しいクラスに、あたかもインスタンスメソッドを追加したような拡張をする」機能だと言えます。これは今回の趣旨である、重複するコードの排除からは外れるかもしれませんが、単純なfor文に対して拡張メソッドを適用することで、以下のようなコードも書くことができ、可読性の向上に貢献します。


