More than 3 years have passed since last update.日本古来からある碁石を使ったパズル「碁石拾い」を解くプログラムをC#(コンソールアプリ)で書いてみました。ルールは、1.縦・横に進みながら碁石を拾ってゆく。
2.途中の石は必ず取らなければならない。 
3.どこから拾い始めてもよい。
4.碁石のない場所で曲がることは出来ない。また、元の方向へ引き返すことは出来ない。です。詳しくは、WEBニコリ 碁石ひろい
パズル遊びへの招待 - 碁石拾いなどを参照してください。どこから拾い始めても良いということなので、石が置いてあるすべての場所に対して、その位置を開始位置として、深さ優先の探索で解を求めています。
n個の石が置いてある場合は、最大でn回探索を行います。解が見つかった時点で探索は終了しています。主要なクラスは、Solverクラスと、Boardクラスです。Solverクラスはパズルを解くクラス。Boardクラスは碁盤を表すクラスです。
Solverクラスでは、コンストラクタで盤面の初期状態を渡してもらっていますので、どのようなパターンでも解くことができます。以下に、作成したC#のコードを簡単な説明とともに載せています。Stoneクラスは、碁盤に置く碁石を表すクラスです。Boardクラスは碁盤を表します。BoardBaseクラスを継承しています。BoardBaseクラスは最後に示します。Solverクラスは問題を解くクラスです。盤面操作の面倒なところはBoardクラスに隠蔽されているので、Solveerクラスはとてもすっきりしたものになっています。SolveInnerが、引数pを開始位置とした時の解を求めるメソッドです。その骨格はとても単純なものです。再帰処理の威力ですね。なお、解が求まったところで探索を終了しています（すべてのパターンを探索していない）。
つまり、最適解が見つかる保証はありません。最適解を求めようとすると、膨大な探索を行うことになり、碁石のパターンによっては現実的な時間で探索が終わらない可能性もあったため、このようなロジックにしています。碁盤に石を置き、Solverクラスを使い解を求めています。結果はListでどの順番で石を取ったかを表しています。このintの値は、Boardを1次元配列としてみた時のインデックスです。この値を使い、視覚的にわかるように石を順に取っていくのが、Printメソッドです。石を'X'、取りさった後は'='で表示しています。Enterキーを押すごとに、石を取っていきます。
このとき、Console.SetCursorPosition()メソッドを使って、画面が流れないように工夫しています。データはテキストファイルから取得しています。なお、Boardのサイズに制約はないので、大きなサイズのデータを与えることもできます。入力データファイルとして、以下のようなデータを用意します。全ての行が同じ長さかどうかが見てわかるように、データには前後に"をつけるようにしています。前述のBoardクラスの基底クラスです。X × Y の盤面を表し、基本的な操作を定義しています。これは似たようなパズルでも再利用できるような汎用的な機能に絞っています。このBoardBaseクラスは、コンソールアプリに依存しない作りにしています。UWP、WinFormsでもそのまま使えると思います。このBoardBaseを継承して、当パズル専用のBoardクラスを定義します。内部では1次元配列を使っていますが、インデクサを定義して、1次元配列、2次元配列としても扱えるようにしています。
ただし、すべてのメソッドで１次元対応と２次元対応のものを用意するのは面倒なので、どちらか一方にしています。まあこれは好み以外の何物でもありません。１次元のインデックスによるアクセスができるようにしている理由は、一重ループで処理が書けるので、コードが簡潔になるからです。LINQのコードも書きやすくなります。2次元配列として見た場合の、X座標、Y座標は、0 からではなく、1から始まります。
つまり、board[1,1] は、いちばん左上を示し、8×8の盤ならば、board[8,8]が右下を示すことになります。なお、盤の周りには番兵用の領域を用意しています。これにより範囲外かどうかの判断を簡単に出来るようにしています。これが成功したがどうかは微妙ですが...上の図は 4×4の盤を表していますが、グレー部分が番兵が置いてある盤の周囲で、水色部分が実際の盤です。
盤面上の数値は、１次元配列のインデックスを表しています。BoardBaseクラスはジェネリッククラスにしていて、そのパラメータの型は、盤面上に置けるクラスの型です。このBoardBaseクラスは、他のパズルでも利用していく予定です。実行途中の画面です。Enterキーを押すごとに、ひとつ石を拾います。
Oが碁石、=が石を取った後を示しています。この記事は、Gushwell's C# Programming Pageで公開したものを大幅に加筆・修正したものです。


