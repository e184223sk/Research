More than 3 years have passed since last update.ZenjectとUniRx.MessageBrokerの相性が抜群
C#6.0時代のUnityUnity 2017.3.1
.NET 4.6(c#6.0)かなり短めに伝えると、起：Code: Transcendence by reminisce
こういうものが作りたい。
MessageBrokerを使って、一定周期毎に発行するストリームを用いて音楽の同期を取れば良いのではないか？承：フレーム単位よりも細かく、ms単位の精度でMessageBrokerを一定間隔でPublishしたい転：MessageBrokerは良くないらしいのでSubjectで作成・ms単位は無理っぽいのでframe単位で安定性を重視
↑いまここ結：完成してGitHubにあげる。
　　ということで、ms単位の精度を求めること自体が間違いなのではないかという結論に達するまでの試行錯誤の記事です。今回はUniRxとZenjectを用いることが前提であり、まずObservable.Intervalでmsを指定してやれば簡単に行けるんじゃないかなと思ってました。これでいけると思っていたのですが、実際に動かしてみると

10ms毎に発行するのではなく、frame単位(1/60秒)で動作していました。
その他色々な方法・Coroutine・Taskについても実施しましたが、これらもframe単位の動作であり、msレベルの待機や発行が実施できるものではありませんでした。
Coroutineだと1frameずつ動く感じ。
Taskだと基本1frameで、貯まると2frame待つ感じになるのかな。
5frameで16.6ms分貯まるってのが良く分からないけれども。結局の所、ms単位で実施は無理っぽいので、だったら確からしさを重視して作成……となるとFixedUpdateが一番良いのかなというのが今の所の結論です。
MonoBehaviour.FixedUpdate()MonoBehaviour が有効の場合、この関数は毎回、固定フレームレートで呼び出されます。固定フレームレートで呼ばれるという点ですが、これは少し注意が必要です。
固定フレームレートというのは、例えばFixedUpdateが1秒に50回実施する場合はラグ等で1秒48回になったとしても次の1秒を52回実施することで補填するというぐらいの意味で認識しておいてください。
また、このFixedupdateの実施タイミングはUpdateの方の実行タイミングに依存します。
簡単に言うと、例えばfixedUpdateが50fpsでUpdateが60fpsだったら、fixedUpdateの実行タイミングは下記画像のようなIntervalになります。
今回はFixedUpdateを使用していますが、より精度を高めるためにFixedTimestepをデフォルトの0.02ではなく0.01で実施しています。
BPM120で4分の4拍子なので、1小節あたり2秒間隔で購読できているとOK。
これでOKだと考えています。


