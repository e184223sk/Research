More than 1 year has passed since last update.例えばこのようなクラスの List を画面上に表示し、一覧画面を作成したいというようなケースは多々あるかと思います。
言語によってはView上で for を使用しListをループすることで実現可能だったりしますが
残念ながらWPFではそのような方法では実現できません。そこで登場するのがItemControlクラスです。
ItemsControlクラスはコレクションを並べて表示することができ、上記のようなことを実現するにはもってこいのクラスです。
また派生クラスにはListBoxクラスやComboBoxクラスなどがあり、UIのカスタマイズなどを行うことができるようになっています。
非常に柔軟性が高く、お世話になる機会も多いだろうと思い、ItemsControlクラス（とその派生クラス）の基本的な使い方を整理していきます。今回はMVVMでいうところのViewModelは以下を使用します。またModelとして前述のStoreクラスを使用しています。ItemsControlでは4つのプロパティが用意されており、それらを設定することでカスタマイズしています。それぞれの持ち場を図にするとこんな感じです。
ではそれぞれ見ていきます。ControlTemplate を指定することで、コントロール全体の設定を行うことが多いです。表示するとこんな感じ。
見るとわかる通り、表示されているのはListに格納されているオブジェクトの名前になっています。
これはそのオブジェクト（今回の場合は Store クラス）に toString() が実装されていないためです。
なので toString() を実装してあげればこのままでもデータを表示することは可能です。ItemsPanelTemplate でコレクションをどう並べるかを指定します。
指定できるのはPanelクラスの派生クラスである以下の3つです。
なお、デフォルトで StackPanel が指定されているので、何も指定されていない場合は要素が縦に並びます。表示するとこんな感じ。
ちなみにGridで表示すると以下のようにすべての要素が重なります。
これ、どういうときに使うんだろうか...
DataTemplate でコレクションの項目をどのように表示するかを指定します。
要は、各要素単位での表示設定です。表示するとこんな感じ。
Style を指定します。
ItemTemplate と同じく要素ごとの表示方法を指定するプロパティです。
要は、WebページでいうところのCSSです。表示するとこんな感じ。
Trigger では、特定の動作に連動させてStyleを変更することができます。
上記コードだとという2点を対応しています。ここまで整理してきた4つのプロパティをすべて合わせたものがこちらです。
※見栄えを整えるために ItemContainerStyle に一部Styleを追加していますItemsControlでコントロールの外見を変更する方法を整理しました。
変更のためには4つのパラメーターを変更していきます。
一覧系の画面や選択肢を列挙など、使用用途は幅広くお世話になることも多いかと思います。なお、今回はListBoxを使用しましたが、基本的な考え方はComboBoxも同じなので流用できるはずです。WPF 実践
ItemsControl 攻略 ～ 外観のカスタマイズ


