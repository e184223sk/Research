More than 3 years have passed since last update.この記事は、VisualStudioCodeを使用してC#開発を行うための環境整備を目的としています。環境についてUbuntu17.10を使用しています。「Ctrl+Alt＋＠」キーでコンソールを表示できます。
図のように、「ターミナル」タブではWindowsではコマンドプロンプト、Linuxではシェルが使用できます。どのような定義がされているか定義箇所のソースコードを表示中のタブ上で確認できます。確認したいシンボルにカーソル位置を合わせて、shift+F12キーを入力すると、
下記図のように参照元と定義元のソースコードが表示されます。カレントディレクトリに「Study」フォルダを作成し、その中にStudy01プロジェクトを作成します。
コンソールアプリケーション用のプロジェクトを作成するため、「console」を指定します。テンプレートから作成したプロジェクトには、下記のソースが含まれています。
まずは、そのままビルドを行い実行ファイルの作成とアプリの実行を行います。プロジェクトがNuGetパッケージを使う場合は、csprojファイルに使用するパッケージの情報を記載します。今回はNewtonsoft.Jsonを使用します。下記のようにItemGroup要素内にPackageReference要素を追加し使用するライブラリを記載します。csprojファイルに記述したライブラリを取得するには、csprojファイルと同じフォルダ内で、dotnet restoreコマンドを実行します。このコマンドは、プロジェクト内に対象のライブラリを取得していない場合に使用するコマンドで、例えばgitなどでcsprojプロジェクトをクローンしてきた場合でも、このコマンドを実行してNuGetパッケージの取得を行います。csprojファイルの依存ライブラリを編集するたびに、このコマンドを実行しネットワークからパッケージをダウンロードします。VisualStudioでは、複数のプロジェクトをまとめたソリューションという概念があり、複数のアセンブリをまとめる役割を担います。VisualStudioCodeにおいても同様の概念を持つソリューションを作成することができます。大抵のプロジェクトチームでは、ソースツリー構成でソリューションファイルはすべてのプロジェクトの1つ上のフォルダ階層に配置することが多いです。この例では、下記のような位置関係とするソリューションを作成します。VisualStudioCodeのコンソールで、カレントフォルダをStudy01.csprojがあるフォルダへ移動し、コマンドを実行します。VisualStudioCodeの画面左側に表示されている
アイコンをクリックすると、デバッグ用の表示に切り替わります。
をクリックしデバッグを開始します。Microsoft公式の拡張機能で、VisualStudioCodeでC#開発向けの環境を提供している。マーケットプレイスから、「csharp☆Microsoft」(注：☆は半角スペース)現バージョン（1.17.2）には、表示中のソースコードのアウトラインを表示する機能はありませんので、拡張機能を使用してアウトラインを表示します。この拡張機能を導入すると、図のようにエクスプローラーペインに「CODE OUTLINE」が表示されます。
CODE OUTLINEでは現在アクティブなタブのソースコードについてアウトラインを表示します。VisualStudioのように、クラス定義やインターフェース定義、メソッド定義にXMLDocumentのテンプレートを自動的に挿入できる拡張機能です。各定義の上の行で、「///」を入力すると自動的にXMLDocumentのテンプレートが挿入される。
メソッドの場合は、自動的に引数を解析しXMLDocumentを追加します。C#開発において便利な機能を提供します。
機能が多いので、現在まとめています。ソースコード中の「ToDo」コメントを検索し、出力ウィンドウに表示します。この拡張機能の便利な点として、ToDo出力コマンドがマウスで実行できる点にあります。
ステータスバーに、ToDo表示コマンドアイコンが表示されており、このアイコンをクリックするだけで出力ウィンドウが表示され、ToDo一覧が出力されます。


