
namespace FractionLib {
    public static class Fraction {
        /// &lt;summary&gt;
        ///     Which is it larger number.
        /// &lt;/summary&gt;
        /// &lt;param name="s"&gt;(string)Integer or fraction&lt;/param&gt;
        /// &lt;param name="t"&gt;(string)Integer or fraction&lt;/param&gt;
        public static string Compare(string s, string t) {
            int numerator_s = 0;
            int numerator_t = 0;
            int denominator_s = 0;
            int denominator_t = 0;

            if (s.Contains("/")) {
                numerator_s = int.Parse(s.Split('/')[0]);
                denominator_s = int.Parse(s.Split('/')[1]);
            } else {
                numerator_s = int.Parse(s);
                denominator_s = 1;
            }

            if (t.Contains("/")) {
                numerator_t = int.Parse(t.Split('/')[0]);
                denominator_t = int.Parse(t.Split('/')[1]);
            } else {
                numerator_t = int.Parse(t);
                denominator_t = 1;
            }

            string result;

            if (((float)numerator_s / denominator_s) &gt;= ((float)numerator_t / denominator_t)) {
                result = $"{numerator_s}/{denominator_s}";
            } else {
                result = $"{numerator_t}/{denominator_t}";
            }



            return result;
        }

        /// &lt;summary&gt;
        ///     Add number to number.
        /// &lt;/summary&gt;
        /// &lt;param name="s"&gt;(string)Integer or fraction&lt;/param&gt;
        /// &lt;param name="t"&gt;(string)Integer or fraction&lt;/param&gt;
        public static string Add(string s, string t) {
            int numerator_s = 0;
            int numerator_t = 0;
            int denominator_s = 0;
            int denominator_t = 0;
            if (s.Contains("/")) {
                numerator_s = int.Parse(s.Split('/')[0]);
                denominator_s = int.Parse(s.Split('/')[1]);
            } else {
                numerator_s = int.Parse(s);
                denominator_s = 1;
            }

            if (t.Contains("/")) {
                numerator_t = int.Parse(t.Split('/')[0]);
                denominator_t = int.Parse(t.Split('/')[1]);
            } else {
                numerator_t = int.Parse(t);
                denominator_t = 1;
            }

            int lcm = CalcLcm.Lcm(denominator_s, denominator_t);
            string result = $"{(numerator_s * (lcm / denominator_s)) + (numerator_t * (lcm / denominator_t))}/{lcm}";

            return (result);
        }

        /// &lt;summary&gt;
        ///     Multiply number to number.
        /// &lt;/summary&gt;
        /// &lt;param name="s"&gt;(string)Integer or fraction&lt;/param&gt;
        /// &lt;param name="t"&gt;(string)Integer or fraction&lt;/param&gt;
        public static string Times(string s, string t) {
            int numerator_s = 0;
            int numerator_t = 0;
            int denominator_s = 0;
            int denominator_t = 0;
            if (s.Contains("/")) {
                numerator_s = int.Parse(s.Split('/')[0]);
                denominator_s = int.Parse(s.Split('/')[1]);
            } else {
                numerator_s = int.Parse(s);
                denominator_s = 1;
            }

            if (t.Contains("/")) {
                numerator_t = int.Parse(t.Split('/')[0]);
                denominator_t = int.Parse(t.Split('/')[1]);
            } else {
                numerator_t = int.Parse(t);
                denominator_t = 1;
            }
            string result = $"{numerator_s * numerator_t}/{(denominator_s * denominator_t)}";
            return (result);
        }

        /// &lt;summary&gt;
        ///     Invert numeric and denominator.
        /// &lt;/summary&gt;
        /// &lt;param name="s"&gt;(string)Integer or fraction&lt;/param&gt;
        public static string Invert(string s) {
            int numerator = 0;
            int denominator = 0;
            if (s.Contains("/")) {
                numerator = int.Parse(s.Split('/')[0]);
                denominator = int.Parse(s.Split('/')[1]);
            } else {
                numerator = int.Parse(s);
                denominator = 1;
            }

            string result = $"{denominator}/{numerator}";

            if(numerator == 0) {
                result = "None.";
            }
            return (result);
        }

        /// &lt;summary&gt;
        ///     Shape to irreducible fraction.
        /// &lt;/summary&gt;
        /// &lt;param name="s"&gt;(string)Integer or fraction&lt;/param&gt;
        public static string Shape(string s) {
            int numerator = 0;
            int denominator = 0;
            if (s.Contains("/")) {
                numerator = int.Parse(s.Split('/')[0]);
                denominator = int.Parse(s.Split('/')[1]);
            } else {
                numerator = int.Parse(s);
                denominator = 1;
            }

            int gcd = CalcGcd.Gcd(numerator, denominator);
            numerator /= gcd;
            denominator /= gcd;

            string result;

            if (denominator &lt; 0) {
                numerator *= -1;
                denominator *= -1;
            }

            if (denominator == 1) {
                result = numerator.ToString();
            } else {
                result = $"{numerator}/{denominator}";
            }

            return result;
        }

        /// &lt;summary&gt;
        ///     Convert to fraction.
        /// &lt;/summary&gt;
        /// &lt;param name="n"&gt;(int)Numerator&lt;/param&gt;
        /// &lt;param name="d"&gt;(int)Denominator&lt;/param&gt;
        public static string ToFraction(int n, int d) {
            if(d == 0) {
                return "Zero divided";
            }
            string result = $"{n}/{d}";
            return result;
        }
    }

    public static class CalcGcd {
        /// &lt;summary&gt;
        ///     Calculate greatest common divisor.
        /// &lt;/summary&gt;
        /// &lt;param name="i"&gt;(int)number&lt;/param&gt;
        public static int Gcd(int i, int j) {
            if (i &lt; j) {
                Gcd(j, i);
            }

            while (j != 0) {
                int surplus = i % j;
                i = j;
                j = surplus;
            }

            return i;
        }
    }

    /// &lt;summary&gt;
    ///     Calculate least common multiple.
    /// &lt;/summary&gt;
    /// &lt;param name="i"&gt;(int)number&lt;/param&gt;
    public static class CalcLcm {
        public static int Lcm(int i, int j) {
            int gcd = CalcGcd.Gcd(i, j);
            return i * j / gcd;
        }
    }
}

