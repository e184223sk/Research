
using System;
using System.Linq;
using System.Threading.Tasks;

// dotnet add package AWSSDK.DynamoDBv2
using Amazon;
using Amazon.Util;
using Amazon.DynamoDBv2;
using Amazon.DynamoDBv2.DataModel;

class Program
{
    static async Task Main()
    {
        var client = new AmazonDynamoDBClient();
        var context = new DynamoDBContext(client);
        AWSConfigsDynamoDB.Context.AddMapping(new TypeMapping(typeof(SampleTableData), "SampleTable"));

        //
        // データの追加 (PutItem処理)
        //
        var item = new SampleTableData
        {
            PartitionKey = 0,
            SortKey = "SK0",
            Property1 = DateTime.Now
        };
        await context.SaveAsync(item);

        //
        // 複数データの追加 (BatchWriteItem処理)
        //
        var batchWrite = context.CreateBatchWrite&lt;SampleTableData&gt;();
        var items = Enumerable.Range(1, 9).Select(i =&gt; new SampleTableData
        {
            PartitionKey = 0,
            SortKey = "SK" + i,
            Property1 = DateTime.Now
        });
        batchWrite.AddPutItems(items);
        await batchWrite.ExecuteAsync();

        //
        // データの取得 (Query処理)
        //
        const int scanPartitionKey = 0;
        var queriedItems = await context.QueryAsync&lt;SampleTableData&gt;(scanPartitionKey).GetRemainingAsync();

        //
        // データの削除 (DeleteItem処理)
        //
        await context.DeleteAsync(queriedItems.First());

        //
        // 複数データの削除 (DeleteItem処理)
        //
        var batchDelete = context.CreateBatchWrite&lt;SampleTableData&gt;();
        batchDelete.AddDeleteItems(queriedItems.Skip(1).Take(4));
        await batchDelete.ExecuteAsync();
    }

    class SampleTableData
    {
        [DynamoDBHashKey("PK")]
        public int PartitionKey { get; set; }

        [DynamoDBRangeKey("SK")]
        public string SortKey { get; set; }

        [DynamoDBProperty("Property1")]
        public DateTime Property1 { get; set; }
    }
}

