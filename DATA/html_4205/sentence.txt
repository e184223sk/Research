More than 1 year has passed since last update.Oculus Rift Advent Calendar 2018の15日目です。以前から作っていたUnityC#用のTwitter API ライブラリに、先日、認可周りのアップデートを入れました。
https://github.com/toofusan/Twity自分もこれまでOauthのことはよくわかっておらず、アップデートによっていろいろ勉強になったのでそのへんのことを書きつつ、OculusGoでの実装例を書いていきます。UnityからTwitter APIを利用する際、認証の方法は大きくわけて2つあります。それぞれできることが違い、かつ認証時のユーザー体験も異なるため、適宜どちらにするか選びます。主体となるユーザーの特定が必要な場合に利用します。
例：ツイートする、ホームタイムラインを見る、DMを見たり送信したりする
後者のApplication-only authenticationに比べてできることが多い一方、一度ブラウザを通してTwitterの画面を表示し、ユーザーの認可を得る必要があります。また、Streaming APIについてもこちらを使う必要があります。主体となるユーザーが特定されない場合に利用します。
例：特定ユーザーのツイートを取得する、ツイートを検索する、トレンドを見る
できることは限られますが、ユーザーの認可を必要としないため、サクッと認証を終わらせることができます。OculusGoでやってみた感じはこんなのです。
Oculus GoでもTwitter認証できるようになったーブラウザからアプリへ一発で戻れるようになったらさらに快適だな pic.twitter.com/B9WsBkV5Gt体験として最適かと言われるとそうではない…数字覚えなきゃいけないし単純にめんどくさいし…
本当は認可時にそのままアプリに戻ってこれるといいんですが、AndroidのIntentとかがよくわかっておらず後回しにしています。まず consumer_keyと consumer_secret を使い、 request_tokenとrequest_tokenを手に入れます。https://api.twitter.com/oauth/authorize?oauth_token={手に入れたrequest_token} がユーザーに認可を行ってもらうためのURLとなるため、そこにブラウザで遷移してもらう必要があります。Oculus Goでは Application.OpenURL(url) でブラウザを起動することができるので、それを使います。で、ユーザーがブラウザ上で認可してくれたら数字が表示されるので、その数字を入力するUIを作ります（省略）。その数字を使ってaccess_tokenを取得します。これで認可が完了しました。が、このままだとアプリを起動するたびに毎回認可しなおさないといけないので、必要な情報を端末に保存しておくなどの処理を入れます（access_tokenには期限がありません）こちらはrequest_tokenなどは必要なく、consumer_keyとconsumer_secretをもとにbearer_tokenを取得したら、それをもとにAPIへリクエストを送ることができます。という感じで、特にユーザーに特別な操作をしてもらう必要もなく、サクッと認証が完了します。ツイッタークライアントと言えるほどの機能はつけられませんが、ちょっとツイッターの情報をアプリ内に表示したい、といった場合には十分使えるのではないでしょうか。
（自分はこれで「ツイートが流れるVRChatのワールドが作れるのでは？」とか考えていたのですが、調べたところVRChatはそもそもカスタムスクリプトが使えないので不可能そう）


