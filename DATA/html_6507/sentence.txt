More than 1 year has passed since last update.この記事は前回の「はじめての LINQ」の補足的な内容になっています。まだ前回の記事を読んでいない人は、先にそちらから読むことをおすすめします。前回の「はじめての LINQ」では紹介しきれなかったメソッドをいくつか見ていきましょう。[コンソール出力結果][コンソール出力結果]LINQ は遅延評価されます。
と、いきなりそう言われてもよく分からないと思いますので、まずは以下のコードを実行してみてください。
また、参考までに私の実行環境でのコンソール出力結果も載せておきます。[コンソール出力結果]このコードでは 「LINQ 処理」と「コンソール出力処理」の ２ つのブロックに分けて、それぞれの処理に掛かった時間を計測しています。「LINQ 処理」では、処理の重い HeavyFunc メソッドを 100 回実行しています。
また、「コンソール出力処理」では、その「LINQ 処理」の結果をコンソールに出力しているだけです。ここで注目してほしいのは、処理が重いはずの「LINQ 処理」が僅か 0.002 秒しか掛かっていないのに、単純な処理しかしていないはずの「コンソール出力処理」には 10 秒も掛かっています。なぜこのような結果になっているかというと LINQ は結果が必要になるまで処理を保留しているからです。
LINQ は、このようにして無駄な処理は行わないようになっています。この処理が最適化されるということは遅延評価の大きなメリットです。
しかし、慣れていないと、いつ処理が実行されているのか分かりづらく、デバッグがやりづらいというデメリットもあります。LINQ を並列実行できる PLINQ という機能があります。使い方は LINQ のメソッドチェーンの中に AsParallel メソッドを追加するだけです。
簡単ですね。[コンソール出力結果]このコードは、先ほどの遅延評価のサンプルコードを並列化したものですが、処理に掛かった時間は先ほどの 3 分の 1 以下になっています。ただし、並列化したからといって、いつも速くなるとは限りませんので注意してください。今まで紹介してきた配列やコレクションに対して処理を行う LINQ は「LINQ to Objects」と呼ばれています。それ以外にもいろいろなデータソースに対して処理行う LINQ ライブラリがあります。LINQ to Objects
LINQ to XML
LINQ to JSON
LINQ to DataSet
LINQ to SQL
LINQ to Entities
LINQ to GameObject
LINQ to BigQueryRX（Reactive Extensions）は一言で言うと LINQ に「非同期」と「イベント」の要素を加えて拡張したライブラリです。この記事では詳しく紹介しませんので、以下のリンクを参考にしてください。＠IT＞連載：Reactive Extensions（Rx）入門
http://www.atmarkit.co.jp/fdotnet/introrx/index/index.htmlかずきのBlog@hatena＞Reactive Extensionsのはじめかた
http://blog.okazuki.jp/entry/2015/03/23/203825xin9le.net＞Rx入門
http://blog.xin9le.net/entry/rx-intro


