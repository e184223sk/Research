More than 1 year has passed since last update.私はこれまでUnityで隙間なく配置していく際にはShift + Vで頂点を合わせてました。
しかし、何度も繰り返してたのでなんとか自動化できないかと思い試みました。結果的にはこのような形です。
XYZそれぞれの方向に連ねて配置ができます。ぴったりくっつける必要はないが、何個も配置する必要のあるオブジェクトもあるかと思います。
そんなときのために等間隔で配置できる形も用意しました。
Boundsを利用することで、Renderer及びColliderの3次元空間での範囲を取得することができます。
平たく言うとオブジェクトの大きさがわかるってことです。先ほどの例で示した、
隙間なく配置する場合においてはRendererを
一定の間隔ごとに配置する場合においてはColliderを利用してオブジェクトの大きさを取得しています特に後者のColliderを利用した場合なんかはおもしろくて、
椅子のColliderは画像のようになっています。

コライダーを利用しているという意味が伝わったかと思います。それぞれのコードを見ていきます。RendererのBoundsは下記のように取得します。取得したBoundsを使う際は、objBounds.size.xのようにXYZ方向の大きさを個別に利用できます。
sizeは直径が得られると考えてしまっていいと思います。厳密な考え方は違いますのでしっかりと叩き込みたい方は公式リファレンスをご覧ください。ColliderのBoundsは下記のように取得します。
取得の仕方も使い方もRendererと全く一緒です。実はMeshから取得する方法もあるのですが、
World座標でBoundsを返すので注意が必要です。公式リファレンスより引用This is the axis-aligned bounding box of the mesh in its local space (that is, not affected by the transform). Note that the Renderer.bounds property is similar but returns the bounds in world space.実際にコードに落とし込んだものがこちらです。正直、作ってから別にいらないなこれってなったんですが、
せっかく覚えたので書いときます。なにをやっているかというと、生成されたオブジェクトに連番をつけてリネームしています。
Regex.Replace(指定した文字列, 置換したい文字, 置換後の文字);という使い方です。"指定した文字列内の置換機能"を利用して、一度0～9以外の文字を空文字にしてnum_InObjName_Stringにつっこんでます。
string num_InObjName_String = Regex.Replace(chainObj.name, @"[^0-9]", "");あとは、空文字かどうか判定して連番を追加するだけです。もっと他に用途がありそうな機能なので見つかったら、また まとめようと思います。完全なる自己満足ですが、HelpBoxもつけてます。
string hoge = @"文字列";で改行できるらしい
たぶんみんな知っている...・利用したアセット：昭和の椅子


