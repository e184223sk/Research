
private class DoSomethingStrategy&lt;T&gt;
{
    // Activatorによるインスタンス生成をすることで型制約を回避する
    public static DoSomethingStrategy&lt;T&gt; Instance { get; }
        = typeof(T).IsValueType
          ? (DoSomethingStrategy&lt;T&gt;)Activator
                .CreateInstance(typeof(DoSomethingStrategy_struct&lt;&gt;)
                .MakeGenericType(typeof(T)))
          : new DoSomethingStrategy&lt;T&gt;();

    public virtual T Invoke(T value)
    {
        Console.WriteLine($"{value} -&gt; default");
        return value;
    }
}

private class DoSomethingStrategy_struct&lt;T&gt; : DoSomethingStrategy&lt;T&gt;
    where T : struct
{
    public override T Invoke(T value)
    {
        Console.WriteLine($"{value} -&gt; specialized on struct");
        return value;
    }
}

