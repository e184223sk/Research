using System;
using System.Runtime.CompilerServices;

public static class Program
{
    public static void Main(string[] args)
    {
        DoSomething(123);
        DoSomething(0.123);
        DoSomething(new Bar());
        DoSomething("hogehoge");
    }

    public static T DoSomething&lt;T&gt;(T value)
    {
        // 1. typeof &amp; Unsafe.As
        if(typeof(T) == typeof(int))
        {
            var value_int = Unsafe.As&lt;T, int&gt;(ref value);
            var return_int = DoSomething_int(value_int);
            return Unsafe.As&lt;int, T&gt;(ref return_int);
        }

        // 2. is operator
        if(value is Foo value_Foo)
        {
            return DoSomething_Foo(value_Foo) is T return_Foo
                   ? return_Foo
                   : throw new InvalidOperationException();
        }

        // 3. Generic type cached strategy
        return DoSomethingStrategy&lt;T&gt;.Instance.Invoke(value);
    }

    public static int DoSomething_int(int value)
    {
        Console.WriteLine($"{value} -&gt; specialized on int");
        return value;
    }

    public static Foo DoSomething_Foo(Foo value)
    {
        Console.WriteLine($"{value} -&gt; specialized on Foo");
        return value;
    }


    private class DoSomethingStrategy&lt;T&gt;
    {
        // 3'. strategy pattern &amp; Activator
        public static DoSomethingStrategy&lt;T&gt; Instance { get; }
            = typeof(T).IsValueType
              ? (DoSomethingStrategy&lt;T&gt;)Activator
                    .CreateInstance(typeof(DoSomethingStrategy_struct&lt;&gt;)
                    .MakeGenericType(typeof(T)))
              : new DoSomethingStrategy&lt;T&gt;();

        public virtual T Invoke(T value)
        {
            Console.WriteLine($"{value} -&gt; default");
            return value;
        }
    }

    private class DoSomethingStrategy_struct&lt;T&gt; : DoSomethingStrategy&lt;T&gt;
        where T : struct
    {
        public override T Invoke(T value)
        {
            Console.WriteLine($"{value} -&gt; specialized on struct");
            return value;
        }
    }
}

public class Foo {}
public class Bar : Foo {}


