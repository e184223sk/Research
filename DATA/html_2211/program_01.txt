
using Microsoft.Xaml.Behaviors;
using System.Collections;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;

namespace WPF.Behaviors
{
    public class SelectedItemsBehavior : Behavior&lt;Selector&gt;
    {
        public IList SelectedItems
        {
            get { return (IList)GetValue(SelectedItemsProperty); }
            set { SetValue(SelectedItemsProperty, value); }
        }

        // Using a DependencyProperty as the backing store for SelectedItemsProxy.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty SelectedItemsProperty =
            DependencyProperty.Register("SelectedItems",
                typeof(IList),
                typeof(SelectedItemsBehavior),
                new FrameworkPropertyMetadata(null, FrameworkPropertyMetadataOptions.BindsTwoWayByDefault));

        protected override void OnAttached()
        {
            base.OnAttached();
            this.AssociatedObject.SelectionChanged += OnSelectionChanged;
        }

        protected override void OnDetaching()
        {
            base.OnDetaching();
            this.AssociatedObject.SelectionChanged -= OnSelectionChanged;
        }

        private void OnSelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (sender == null) return;

            var selector = AssociatedObject;

            if(e.AddedItems != null &amp;&amp; e.AddedItems.Count &gt; 0 &amp;&amp; this.SelectedItems != null)
            {
                foreach(var item in e.AddedItems)
                {
                    this.SelectedItems.Add(item);
                }
            }

            if(e.RemovedItems != null &amp;&amp; e.RemovedItems.Count &gt; 0 &amp;&amp; this.SelectedItems != null)
            {
                foreach(var item in e.RemovedItems)
                {
                    this.SelectedItems.Remove(item);
                }
            }
        }
    }
}

