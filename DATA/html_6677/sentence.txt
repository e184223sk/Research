More than 3 years have passed since last update.EntityFrameworkCoreのScaffold機能を利用して、データベースの内容から
データを操作するCRUD Webアプリケーションを自動生成します。「Scaffold」とは「足場」という意味で、データベースの基本操作に
必要な機能の骨組みを自動生成する機能のことを指します。データベースの基本操作（CRUD）とは、のことを指し、DB上のエンティティに対する操作を行うWebアプリケーションを、
自動的に生成することが出来ます。SqlServerで適当なデータベースを作成します。
ここでは、データベース名を「ScaffoldDB」とします。作成したDBにテーブルを追加します。
ここでは、「社員」を管理するpersonテーブルと、
「所属」を管理する「department」テーブルの２つを作成します。
SQLの細かい内容についてはここでは触れません。作成した２つのテーブルにリレーションを結びます。
personテーブルのdep_idから、depertmentテーブルのidを参照できるようにします。SqlServer Management Studioからデータベースダイアグラムを確認し、
２つのテーブルが正しいリレーションで結ばれていることを確認します。
作成したテーブルにテストデータを挿入します。プロジェクトの作成には、コマンドラインから作成するパターンと、
VisualStudio2015からウィザードを用いて作成するパターンの２つがありますが、
今回はVisualStudio2015からウィザードを用いて作成します。コマンドラインを用いて作成するパターンは、こちらの記事を参考にして下さい。【ASP.NET Core】PowerShellからScaffoldする【MVC】
http://qiita.com/logikuma/items/95af749cd387cb71a4a0VisualStudio2015を起動し、「ファイル」＞「新規」＞「新しいプロジェクト」から、
「ASP.NET Core Web Application (.NET Core)」を選択します。
名前は「ScaffoldTest」とします。
テンプレート選択画面となるので、Webアプリケーションを選択し、
「認証の変更」ボタンから「個別のユーザーアカウント」を選択します。
これにより、ローカルデータベースへのアクセスに必要なプロジェクト情報を、
VisualStudioが自動的に作成してくれます。
モデルの作成には、Windows Powershellからdotnet efコマンドを発行します。ソリューションエクスプローラ上のプロジェクトルート（ScaffoldTest）をクリックし、
下部ウィンドウ内にある「プロパティ」からフォルダパスを取得します。取得したフォルダパスをエクスプローラで開き、エクスプローラ上から
Powershellを起動します。
エクスプローラのディレクトリ表示部分に「powershell」と入力すると、
そのディレクトリ上でPowershellが起動されます。Powershellから下記コマンドを実行します。EntityFrameworkのscaffold機能を用いて、DIクラスとなるdbContextを自動的に生成し、
そのデータベース内にあるテーブルをモデルクラスとしてC#のコードに自動生成します。
新しく生成されたModelsパッケージの中を見てみると、Person.cs、Depatment.cs、
ScaffoldDBContext.csが生成されています。作成したモデルを用いて、コントローラ・ビューも自動生成することが出来ます。
これにより、データのみ作成するだけでCRUDアプリケーションを作成することが出来ます。ソリューションエクスプローラからControllersを右クリックし、
「追加」＞「新規スキャフォールディングアイテム」を選択します。
「MVC Controller with views, using Entity Framework」を選択し、
追加ボタンをクリックします。コントローラの追加ダイアログが表示されるので、モデルクラスにPerson、
データコンテキストクラスにScaffoldDBContextを指定、
コントローラ名は複数形にする決まりがあるので、PeopleControllerにして追加をクリックします。
Startup.csを修正します。Startup.cs &gt; ConfigureServiceメソッド内に一行追加します。アプリケーションを実行します。
上部メニューからIIS Expressを選択し、IIS上でWebアプリケーションを実行します。ブラウザが起動したら、アドレスバーに/Peopleを追記し、移動します。
すると、先程入力したデータが一覧で表示されます。CreateNew と書かれたリンクをクリックし、情報を入力します。
情報入力の際、データベース内で作成した関連により、DepIdがコンボボックスで表示されます。
Int型であるAgeは数値入力のみが許可され、エラーが発生しないようになっています。
Createをクリックすると、データが作成されます。
Detailsをクリックします。
Personテーブルの各行詳細が表示されます。Editをクリックします。
各行を編集し、Saveをクリックすると、データが更新されます。
Deleteをクリックします。
確認画面が表示され、Deleteをクリックすると、データが削除されます。
.NET Core すごい！Ruby on Rails、Play Frameworkなど、他にもScaffold機能を利用できるフレームワークは
多くありますが、.NET Coreは手軽にサクサク生成できるので、非常に楽でした。複雑なビジネスロジックや、複雑なSQLを発行しなければいけないシステムは
星の数ほどあると思いますが、ベーシックなWeb-CRUDアプリケーションであれば、
一から手で書いていくよりもよっぽど効率よく書けるように感じます。ASP.NET Coreは他にもたくさん優れた点がありますので、
これからもっと学習して、使いこなしていきたいと思いました。


