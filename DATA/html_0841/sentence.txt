More than 1 year has passed since last update.CodeProjectへ投稿した英語の記事を日本語に訳してQiitaでも共有します。
https://www.codeproject.com/Articles/5275388/HigLabo-Mapper-Creating-Fastest-Object-Mapper-in-tHigLaboMapperというオブジェクトマッパーを作ってみました。せっかく作るならということで世界最速を目標に作ってみました。
ExpressionTreeを使用して既存のマッパーライブラリであるAutoMapper,ExpressMapper,AgileMapper,FastMapper,Mapsterよりもはるかに高速な実装になっています。その結果、BenchmarkDotNetによるテスト結果で現在世界最速です。
また初期設定が不要で利用できるので無駄な設定コードを書く必要がありません。マッピングルールのカスタマイズも直感的な方法で自由にできるようになっています。4年前にオブジェクトマッパーをilコードにて作成しました。7月に思い立って実装しなおしてみようと思い、HigLabo.MapperをExpression Treeで書き直してみました。その結果、パフォーマンスを大幅に向上できました。パフォーマンステストの結果、2020年8月現在、世界最速です。作成はだいたい10日間くらいでできました。10日間のコミットログは
https://github.com/higty/higlabo.netstandard/tree/master/HigLabo.Mapper.
にあります。せっかく作って埋もれさせておくのもアレなので共有してC#と.NETコミュニティに貢献しようかと思います。ソースコードは
https://github.com/higty/higlabo/tree/master/NetStandard/HigLabo.Mapper.
にあります。またNugetからHigLabo.Mapperで取得できます。HigLabo.MapperをNugetからインストールします。バージョン3.0以降をインストールしてください。名前空間をインポートします。これでMap拡張メソッドが利用可能になります。HigLabo.MapperはDictionary to Objectのマッピングもサポートしています。Object to Dictionaryのマッピングも同様にサポートしています。HigLabo.Mapperは直感的に使いやすいようにデザインされています。このセクションでは他のマッパーとの違いを解説していきます。目次は以下になります。
1. パフォーマンス
2. 初期設定
3. カスタマイズ
4. 複数の設定マッパーライブラリではパフォーマンスが非常に重要です。マッピング処理はループの内部などホットコードパスで実行されることが多いのでパフォーマンスへの影響が大きくなりがちな傾向があります。パフォーマンステスト結果のサマリーは以下になります。
・AutoMapperよりも3倍―4倍高速（コレクションプロパティの無いPOCOオブジェクト）
・Mapsterよりも10%-20%高速（コレクションプロパティの無いPOCOオブジェクト）
・AgileMapper, FastMapper, TinyMapperよりも7倍―10倍高速（コレクションプロパティの無いPOCOオブジェクト）
・AutoMapperよりも3倍高速（コレクションプロパティのあるPOCOオブジェクト）
・Mapsterよりも10倍高速（コレクションプロパティのあるPOCOオブジェクト）
・AgileMapper, FastMapper, TinyMapperよりも10倍―20倍高速（コレクションプロパティのあるPOCOオブジェクト）テスト結果は以下のようになります。HigLaboObjectMapper_XXXが新しく作ったバージョン、HigLaboObjectMapConfig_XXXが古いバージョンになります。
テストに使用したPOCOクラスは以下のようなクラスです。4つのパターンでテストをしてみました。添付した画像の結果のとおり全ての場合でHigLabo.Mapperが最速です。
テストコードはこちらになります。
https://github.com/higty/higlabo/tree/master/NetStandard/HigLabo.Test/HigLabo.Mapper.PerformanceTestいくつかのマッパーは使用前に初期設定が必要だったりします。これはAutoMapperの設定コードです。もしマッピングするクラスが1000とかになってくるとこの作業は非常に退屈な作業で工数がかかります。同様にTinyMapperも以下のような設定用のコードが必要です。HigLabo.Mapperでは上記の設定コードは不要です。設定コードを記述する工数をゼロにできます。マッパーライブラリでは時々マッピングのルールをカスタマイズしたい時があります。AutoMapperのカスタマイズは非常に複雑で分かりずらい記述が必要です。
例えばこのページのマッピングルールで比較をしてみます。
https://stackoverflow.com/questions/50964757/delegating-member-mapping-to-child-object-with-automapper
AutoMapperではという感じで書く必要があり、AutoMapperのルール（Mapper.Initialize, ForMember, CreateMap, AfterMapなど）に精通する必要があります。HigLabo.Mapperでのカスタマイズは非常に簡単です。HigLabo.Mapperではこのラムダ式がデフォルトのマップ処理が終わった後に呼ばれます。これにより既定のマッピングを上書きすることが可能です。マッピング処理を完全に置き換えたい場合、ReplaceMapメソッドを利用します。この方式はとてもシンプルで直感的に理解しやすいです。C#のラムダの知識があれば使用できます。C#をある程度使用しているならばラムダ式の知識は既にあるので追加の知識が必要とされることもありません。コンバート処理も簡単に追加することが可能です。条件分岐によるマッピングも簡単です。もう一つ便利な点としてはデバッグが非常に容易という事が挙げられます。AddPostAction,ReplaceMapメソッドに渡したラムダ式の内部にブレイクポイントをセットしてデバッグが可能です。プロパティのマッピングをカスタマイズすることも可能です。HigLabo.MapperではObjectMapperクラスのインスタンスを複数作成することが可能です。ObjectMapperExtensionsクラスで宣言されているMap拡張メソッドは実際にはObjectMapper.Defaultプロパティのインスタンスを使用しています。複数のインスタンスを作成し、それぞれでマッピングのルールを設定して利用できます。アプリケーションのマッピングのルールをカプセル化することも可能です。マッピングのテストケースは以下にあります。
https://github.com/higty/higlabo/tree/master/NetStandard/HigLabo.Test/HigLabo.Mapper.Test
1つのテストケースを除き、以前のバージョンの全てのテストケースをパスしてあります。
（※Dictionaryのカスタムマッピングは新しいバージョンでは未対応）テストケースは以下にあります。
https://github.com/higty/higlabo/tree/master/NetStandard/HigLabo.Test/HigLabo.Mapper.Test
この中でObjectMapper_Map_ValueType_ValueTypeのテストケースで生成されるエクスプレッションツリーのコードは以下のような形になります。AddressからAddressDTOへのマッピングでは以下のようなMapActionのFuncが生成されます。ほぼ無駄のないコードが生成されているのがわかると思います。コードを見てもわかる通りHigLabo.Mapperよりも最速なコードは生成しづらいでしょう。Spanなどを利用すればもっと早くなる可能性はあるかもしれません。これらのエクスプレッションツリーのコードブロックはコンパイルされてFuncに変換され、プライベートな_MapActionListフィールドに保存されます。2回目以降はコンパイル済みのFuncが使用されるのでコンパイルのオーバーヘッドはありません。AddPostActionで渡したラムダはこのFunc後に呼び出されるように新しいFuncが生成されます。ReplaceMapメソッドを使用するとこのFuncを置き換えることになります。C#でマッピング処理を高速化したい、設定用のコードを削減したい、もっと簡単にカスタマイズしたいという人にこのライブラリが役に立つと嬉しいです。不具合などあれば気軽にGitHubにコメントください。ハイパフォーマンスなアプリケーション作成に興味がある人は以下の記事も参考になると思います。
タスク管理を作ってみた　～初級からレベルアップするためのツールとサービスたち～
パフォーマンス向上で知っておくべきコンピューターサイエンスの基礎知識とその実践
WEBアプリケーションのパフォーマンスをUPするために知っておくべき技術と知識
C#で世界最速のMapperライブラリを作ってみた（AutoMapperなどよりも3倍-10倍ほど高速）
プログラマのための機能のUIデザイン
世界で通用するエンジニアになるための高度な技術記事（英語）
Azure アプリケーション アーキテクチャ ガイド元記事です↓
パフォーマンス向上で知っておくべきコンピューターサイエンスの基礎知識とその実践またこういった知識を使ってSaasアプリを作る方法をこちらの記事で紹介しています。


