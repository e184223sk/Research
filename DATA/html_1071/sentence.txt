More than 1 year has passed since last update.C#の構文を動的に生成できる機能です。メソッドでの生成とラムダ式での生成がサポートされています。T型の引数からIComparable&lt;K&gt;であるKを返すようなラムダ式を元にIComparer&lt;T&gt;を下記のように作れます。例えば、コンストラクタに(string s) =&gt; -s.Lengthを渡すと文字列の長さの降順となるような結果が得られます。以下、ポイントごとに解説しますComparison&lt;T&gt;は引数を2つ持つので、それに対応するparamAとparamBを用意します。片方は元のParameterExpressionをそのまま流用でOKです。引数の式木のパラメータを新たに生成したparamBで置き換える役割です。ここでCompareToの呼び出しを構築します。expressionをp =&gt; -pだったときというようになります。expression.Bodyとexp2.Bodyの順番を間違えるとになるので注意CompileメソッドでLambdaExpressionをdelegateに変換します。あとは普通のdelegateとして扱えます。上記のようにexpressionのパラメータがaとなっている場合に、生成される式木が(a,a) = a.Length.CompareTo(a.Length)となりますが問題ありません。ParameterExpressionはNameプロパティが同一でもインスタンスが別(object.ReferenceEqualsでの比較がfalse)の場合は別の変数として扱われるためです。逆にいうと、のような式木はa =&gt; a.Lengthとなりますが不正です。ラムダの引数のaとa.Lengthのaが別の変数として扱われるためです。


