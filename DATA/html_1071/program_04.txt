
Expression&lt;Func&lt;string, int&gt;&gt; expression = a =&gt; a.Length;

var paramA = expression.Parameters[0];
var paramB = Expression.Parameter(typeof(string), "a");
var exp2 = (Expression&lt;Func&lt;string, int&gt;&gt;)new ParameterReplaceVisitor(paramA, paramB).Visit(expression);
var compExp = Expression.Lambda&lt;Comparison&lt;string&gt;&gt;(Expression.Call(
        expression.Body,
        typeof(int).GetMethod(nameof(IComparable&lt;int&gt;.CompareTo), new[] { typeof(int) }),
        exp2.Body),
        paramA, paramB);
var func = compExp.Compile();
Console.WriteLine(compExp); // -&gt; (a,a) = a.Length.CompareTo(a.Length)

