
    /// &lt;summary&gt;
    /// Postをjsonに変換
    /// &lt;/summary&gt;
    public class PostConverter : JsonConverter
    {
        public override bool CanConvert(Type objectType) =&gt; objectType == typeof(Post);

        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            var post = new Post();

            while (reader.Read())
            {
                if (reader.TokenType == JsonToken.EndObject) break;
                if (reader.TokenType == JsonToken.PropertyName)
                {
                    var prop = reader.Value?.ToString();
                    reader.Read();

                    switch (prop)
                    {
                        case "tags":
                            post.Tags = new JsonSerializer().Deserialize&lt;IList&lt;Tag&gt;&gt;(reader);
                            break;
                        case "comments":
                            post.Comments = new JsonSerializer().Deserialize&lt;IList&lt;Comment&gt;&gt;(reader);
                            break;
                        case "title":
                            post.Title = reader.Value.ToString();
                            break;
                        case "content":
                            post.Content = reader.Value.ToString();
                            break;
                    }
                }
            }

            return post;
        }

        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            var post = value as Post;
            if (post == null) return;

            writer.WriteStartObject();

            writer.WritePropertyName("title");
            writer.WriteValue(post.Title);
            writer.WritePropertyName("content");
            writer.WriteValue(post.Content);
            writer.WritePropertyName("tags");
            JToken.FromObject(post.Tags).WriteTo(writer);
            writer.WritePropertyName("comments");
            JToken.FromObject(post.Comments).WriteTo(writer);

            writer.WriteEndObject();
        }
    }

    /// &lt;summary&gt;
    /// Tagをjsonに変換
    /// &lt;/summary&gt;
    public class TagConverter : JsonConverter
    {
        public override bool CanConvert(Type objectType) =&gt; objectType == typeof(Tag);

        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            var tag = new Tag();

            tag.Name = reader.Value.ToString();

            return tag;
        }

        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            var tag = value as Tag;
            if (tag == null) return;

            writer.WriteValue(tag.Name);
        }
    }

    /// &lt;summary&gt;
    /// Commentをjsonに変換
    /// &lt;/summary&gt;
    public class CommentConverter : JsonConverter
    {
        public override bool CanConvert(Type objectType) =&gt; objectType == typeof(Comment);

        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            var props = new string[] { "author", "content" };
            var comment = new Comment();

            while (reader.Read())
            {
                if (reader.TokenType == JsonToken.EndObject) break;
                if (reader.TokenType == JsonToken.PropertyName)
                {
                    var prop = reader.Value.ToString();
                    reader.Read();

                    switch (prop)
                    {
                        case "author":
                            comment.Author = reader.Value.ToString();
                            break;
                        case "content":
                            comment.Content = reader.Value.ToString();
                            break;
                    }
                }
            }

            return comment;
        }

        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            var comment = value as Comment;
            if (comment == null) return;

            writer.WriteStartObject();

            writer.WritePropertyName("author");
            writer.WriteValue(comment.Author);
            writer.WritePropertyName("content");
            writer.WriteValue(comment.Content);

            writer.WriteEndObject();
        }
    }

