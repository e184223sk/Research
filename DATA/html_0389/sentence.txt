この投稿では、C# 9.0で加わったC# Source Generatorとそれを使って開発したValueObjectGeneratorを紹介します。コードはこちら！次のProductクラスは、2つのint型のプロパティProductIdとProductCategoryIdを持っています。この型のインスタンスの利用シーンにおいて、いくつかの場所ではProductIdが必要で、他の場所ではProductCategoryIdが必要でしょう。どちらもint型で名前が似ているので、うっかりとProductIdとProductCategoryIdを取り違えてしまうかもしれません.この取り違え型を防ぐにはどうしたらいいでしょうか？一つの方法としては、次のようなProductId型とCategoryId型を作り、それらを利用することです。これらの型を利用することで、コンパイラはProductIdプロパティとProductCategoryIdプロパティの取り違えを検出し、プログラム上のミスを防ぐことができます。このようにValueObjectクラス(もしくは、Wrapperクラス)を作成し利用することで、int型やstring型のプロパティの取り違えやミスを防ぐことができます。ProductId型とCategoryId型は次のような感じになります。このProductId型とCategoryId型を使った、Product型はこんな感じ。このようにValueObjectクラス(もしくは、Wrapperクラス)を作成し利用することでコンパイルエラーを防ぐことができます。よかった、よかった！けれど、これらのコードは非常に大量のボイラープレートで溢れていますね。長いですね！ProductId型とCategoryId型。長すぎます！これらのボイラープレートコードは、他の大切な意味のあるコードを読む際にとても邪魔です。さて、こんなふうなボイラープレートコードには、C# 9.0から加わったC# Source Generatorが大活躍します。C# Source Generatorは、ビルド時にC#のソースコードを生成する仕組みです。このC# Source Generatorを使うことで、プログラマティカルにコード生成をすることができます。C# Source Generatorをつかうことで、ボイラープレートのコードは非常に簡単になります。他、参考。さてそんなC# Source Generatorを使って、私が開発した、ValueObjectGeneratorを紹介します。次のように IntValueObject 属性をクラスに付与します。そうすると次のようなコードが生成されます。ProductIdは、ValueObjectクラス(もしくは、Wrapperクラス)です。次のように、ValueObjectクラス(もしくは、Wrapperクラス)を定義するためにあった、大量のボイラープレートコードはなくなりました。こんなふうに、ValueObjectGeneratorを使えば、 ValueObjectクラス(もしくは、Wrapperクラス)の生成に必要な大量のボイラープレートコードを排除することが可能です。ValueObjectGeneratorの機能の紹介をします。ValueObjectGeneratorは、int型以外のValueObjectクラス(もしくは、Wrapperクラス)をサポートしています。次のテープルは、提供している属性とそれに対応する型を示しています。ValueObjectGeneratorは、クラスと構造体、両方の生成のサポートをします。まずは、クラス利用例。クラスの場合、次のようなコードが生成されます。次に、構造体の利用例。構造体の場合、次のようなコードが生成されます。生成するValueObjectクラス(もしくは、Wrapperクラス)が持つ、プロパティの名前も指定することができます。次のようにすることで、次のような型が生成されます。やりたいなと思っているのは、などです。あと以前、ufcppさんのYoutube配信に、お邪魔した時に、ufcppとゲストのxin9leさんに、このValueObjectGeneratorを紹介した時に、いろいろご指摘をいただきました。その番組の指摘のおかげでも入れたほうがいいことがわかりました。ufcppさん、xin9leさん、ありがとうございます。先に紹介した、ufcppさんのYoutube配信番組で、「1要素Recordとそんなに変わらない」という指摘もいただきました。いや、もうその通りなんですよね。ただ、Recordではできないものがあります。それは、「オーバーライドを認めないという」ものです。Recordではできないのでそれがメリットになります。と、ufcppさんとxin9leさんにご指摘いただきました！ありがとうございます！この投稿では、C# 9.0で加わったC# Source Generatorとそれを使って開発したValueObjectGeneratorを紹介しました。現在、ValueObjectGeneratorは開発・改善途中です。「便利じゃん！」「使いたい！」という方は、ぜひGitHubでStarをください！励ましになります！ご意見、ご要望があれば、GitHubのissueか、Twitterの@RyotaMurohoshiまで！


