
public sealed partial class IntClassSample : System.IEquatable&lt;IntClassSample&gt;
{
    public int Value { get; }
    public IntClassSample(int value)
    {
        Value = value;
    }
    public override bool Equals(object obj) =&gt; ReferenceEquals(this, obj) || obj is IntClassSample other &amp;&amp; Equals(other);
    public override int GetHashCode() =&gt; Value.GetHashCode();
    public override string ToString() =&gt; Value.ToString();
    public static bool operator ==(IntClassSample left, IntClassSample right) =&gt; Equals(left, right);
    public static bool operator !=(IntClassSample left, IntClassSample right) =&gt; !Equals(left, right);
    public bool Equals(IntClassSample other)
    {
        if (ReferenceEquals(null, other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return Value == other.Value;
    }
    public static explicit operator IntClassSample(int value) =&gt; new IntClassSample(value);
    public static explicit operator int(IntClassSample value) =&gt; value.Value;
}

