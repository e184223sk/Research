
    /// &lt;summary&gt;
    /// 普通クラス
    /// &lt;/summary&gt;
    public class CommonClass
    {
        /// &lt;summary&gt;
        /// ユーザー定義enum型
        /// &lt;/summary&gt;

        enum MyEnum
        {
            enum1,
            enum2
        }
        /// &lt;summary&gt;
        /// ユーザー定義delegate型
        /// &lt;/summary&gt;
        public delegate void MyDeleaget();
        /// &lt;summary&gt;
        /// コンストラクタ
        /// &lt;/summary&gt;
        public CommonClass()
        {
            _arr = new double[10];
        }
        /// &lt;summary&gt;
        /// フィールド
        /// &lt;/summary&gt;
        private string _myField;
        /// &lt;summary&gt;
        /// プロパティ
        /// &lt;/summary&gt;
        public string MyProperty { get; set; }
        /// &lt;summary&gt;
        /// メソッド
        /// &lt;/summary&gt;
        public void MyMethod()
        { }
        /// &lt;summary&gt;
        /// イベント
        /// &lt;/summary&gt;
        public event MyDeleaget MyEvent;
        /// &lt;summary&gt;
        /// 演算子オーバーロード
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;&lt;/param&gt;
        /// &lt;param name="b"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static CommonClass operator +(CommonClass a, CommonClass b)
        {
            return new CommonClass() { MyProperty = a.MyProperty + b.MyProperty };
        }
        /// &lt;summary&gt;
        /// インデクサコレクション
        /// &lt;/summary&gt;
        double[] _arr;
        /// &lt;summary&gt;
        /// インデクサ
        /// &lt;/summary&gt;
        /// &lt;param name="index"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public double this[int index]
        {
            get
            {
                return _arr[index];
            }
            set
            {
                _arr[index] = value;
            }
        }
    }

    /// &lt;summary&gt;
    /// 静的クラス
    /// &lt;/summary&gt;
    public static class StaticClass
    {
        /// &lt;summary&gt;
        /// 静的コンストラクタ
        /// &lt;/summary&gt;
        static StaticClass()
        {
            Console.WriteLine("静的コンストラクタ");
        }
        /// &lt;summary&gt;
        /// 静的メソッド
        /// &lt;/summary&gt;
        public static void StaticMethod()
        {
            Console.WriteLine("静的クラスの静的メソッド");
        }
        /// &lt;summary&gt;
        /// 静的プロパティ
        /// &lt;/summary&gt;
        public static string StaticProperty { get; set; }

        /// &lt;summary&gt;
        /// ユーザー定義delegate型
        /// &lt;/summary&gt;
        public delegate void MyDeleaget();

        /// &lt;summary&gt;
        /// フィールド
        /// &lt;/summary&gt;
        private static string _myField;

        /// &lt;summary&gt;
        /// イベント
        /// &lt;/summary&gt;
        public static event MyDeleaget MyEvent;
    }


    /// &lt;summary&gt;
    /// 抽象クラス
    /// &lt;/summary&gt;
    public abstract class AbstractClass
    {
        public AbstractClass()
        {
            Console.WriteLine("抽象クラスのコンストラクタ");
        }
        /// &lt;summary&gt;
        /// ユーザー定義delegate型
        /// &lt;/summary&gt;
        public delegate void MyDeleaget();

        /// &lt;summary&gt;
        /// プロパティ
        /// &lt;/summary&gt;
        public string MyProperty { get; set; }
        /// &lt;summary&gt;
        /// メソッド
        /// &lt;/summary&gt;
        public abstract void MyMethod();

        /// &lt;summary&gt;
        /// イベント
        /// &lt;/summary&gt;
        public abstract event MyDeleaget MyEvent;


        /// &lt;summary&gt;
        /// インデクサ
        /// &lt;/summary&gt;
        /// &lt;param name="index"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public abstract double this[int index] { get; set; }
    }

    /// &lt;summary&gt;
    /// シールクラス
    /// &lt;/summary&gt;
    public sealed class SealedClass
    {
        /// &lt;summary&gt;
        /// コンストラクタ
        /// &lt;/summary&gt;
        public SealedClass()
        {
            Console.WriteLine("シールクラスコンストラクタ");
        }
        /// &lt;summary&gt;
        /// ユーザー定義delegate型
        /// &lt;/summary&gt;
        public delegate void MyDeleaget();

        /// &lt;summary&gt;
        /// フィールド
        /// &lt;/summary&gt;
        private string _myField;
        /// &lt;summary&gt;
        /// プロパティ
        /// &lt;/summary&gt;
        public string MyProperty { get; set; }
        /// &lt;summary&gt;
        /// メソッド
        /// &lt;/summary&gt;
        public void MyMethod()
        { }
        /// &lt;summary&gt;
        /// イベント
        /// &lt;/summary&gt;
        public event MyDeleaget MyEvent;
        /// &lt;summary&gt;
        /// オペレーターのオーバーロード
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;&lt;/param&gt;
        /// &lt;param name="b"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static SealedClass operator +(SealedClass a, SealedClass b)
        {
            return new SealedClass() { MyProperty = a.MyProperty + b.MyProperty };
        }
        /// &lt;summary&gt;
        /// インデクサコレクション
        /// &lt;/summary&gt;
        double[] _arr;
        /// &lt;summary&gt;
        /// インデクサ
        /// &lt;/summary&gt;
        /// &lt;param name="index"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public double this[int index]
        {
            get
            {
                return _arr[index];
            }
            set
            {
                _arr[index] = value;
            }
        }
    }

    /// &lt;summary&gt;
    /// 部分クラス1
    /// &lt;/summary&gt;
    public partial class PartialClass
    {
        public PartialClass()
        {
            Console.WriteLine("部分クラスコンストラクタ");
        }

        /// &lt;summary&gt;
        /// ユーザー定義delegate型
        /// &lt;/summary&gt;
        public delegate void MyDeleaget();

        /// &lt;summary&gt;
        /// フィールド
        /// &lt;/summary&gt;
        private string _myField;
        /// &lt;summary&gt;
        /// プロパティ
        /// &lt;/summary&gt;
        public string MyProperty { get; set; }
        /// &lt;summary&gt;
        /// メソッド
        /// &lt;/summary&gt;
        public void MyMethod()
        { }

        /// &lt;summary&gt;
        /// オペレーターオーバーロード
        /// &lt;/summary&gt;
        /// &lt;param name="a"&gt;&lt;/param&gt;
        /// &lt;param name="b"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static PartialClass operator +(PartialClass a, PartialClass b)
        {
            return new PartialClass() { MyProperty = a.MyProperty + b.MyProperty };
        }
        /// &lt;summary&gt;
        /// インデクサコレクション
        /// &lt;/summary&gt;
        double[] _arr;
    }

    /// &lt;summary&gt;
    /// 部分クラス1
    /// &lt;/summary&gt;
    public partial class PartialClass
    {
        /// &lt;summary&gt;
        /// イベント
        /// &lt;/summary&gt;
        public event MyDeleaget MyEvent;

        /// &lt;summary&gt;
        /// インデクサ
        /// &lt;/summary&gt;
        /// &lt;param name="index"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public double this[int index]
        {
            get
            {
                return _arr[index];
            }
            set
            {
                _arr[index] = value;
            }
        }
    }


