More than 3 years have passed since last update.
音楽を再生すると同時に、その音声波形を表示します。WPF(Windows Presentation Foundation)によりアプリケーションを作成しました。MSDNでは、以下のように説明されています。
Windows Presentation Foundation (WPF) は、デスクトップクライアントアプリケーションを作成する UI フレームワークです。WPF の開発プラットフォームは、アプリケーション モデル、リソース、コントロール、グラフィックス、レイアウト、データバインディング、ドキュメント、セキュリティなどのさまざまなアプリケーション開発機能の一式をサポートします。
(https://docs.microsoft.com/ja-jp/visualstudio/designers/getting-started-with-wpf)WPFでは、XAMLで記述したGUIに対して、C#などのプログラミング言語を用いてイベント処理を記述することができます。このように、デザイン部分とコーディング部分を別々のファイルに分けることをコードビハインドといいます。C#では、一般的に、Main()メソッドがエントリポイントとなり、アプリケーション起動時に呼ばれます。しかし、Visual Studioで作成したWPFアプリケーションではこのMain()メソッドがありません。
実は、WPFアプリケーションでは、Application.xaml(またはApp.xaml)ファイルをプロジェクトに含めている場合、ビルド時に、Main()メソッドが自動生成されます。
簡単に言えば、そのMain()メソッド内に、MainWindow.xamlを実行するように書いてあるため、MainWindow.xamlが自動で実行されるわけです。NAudioライブラリとは、主に音声データを扱うために設計されたライブラリです。GitHub - NAudioソリューション エクスプローラーで対象のプロジェクトの[参照]を右クリックし、[NuGet パッケージの管理]を選択します。そして[参照]を選択し、NAudioと検索します。メニューの【ツール → NuGet パッケージ マネージャー → パッケージ マネージャー コンソール】からコンソールを開き、
PM&gt; Install-Package NAudio
とすると、インストールできます。まず、要所の説明をし、そのあとでコード全体を示します。
一応、MainWindow.xamlも載せておきます。
コードにコメントとして説明を書いているため、詳細の説明は省略させていただきます。WPFでは、イベントとイベントハンドラを頻繁に使うので、コードの説明に入る前に、ここで、イベントへのイベントハンドラの登録の仕方の説明をします。
イベントハンドラとは、イベントが発生したときに実行される処理のことをいいます。
詳細の説明を知りたい方は、イベントハンドラ、デリゲート、ラムダ式などでググってみてください。
イベントハンドラは、以下の様に登録します。Nugetなどで取得します。タイマーの機能は、System.Timers.Timerクラスで実装されています。しかし、System.Timers.TimerクラスはUIスレッドとは独立したスレッドで実行されるため、イベントハンドラからUIを操作することができません。スレッド上のタスク管理のためにDispatcherというクラスが用意されており、WPFのUIにはDispatcherクラスのオブジェクトが関連づけられています。このDispatcherオブジェクトと連携してUIを操作できるようにしたタイマーがDispatcherTimerクラスです。ここでは、オブジェクトを作成する際に、タイマーの優先順位として、Dispatcher.Normalを指定し、イベントハンドラとしてtimer_Tick()メソッドを登録しています。再生は現在のストリームの位置から開始されるため、Play()メソッドで必ずしも最初から再生されるわけではありません。コンストラクタにより、オブジェクトを生成した際、Positionはストリームの終端に移動したため、audioStream.Position = 0;というように位置を先頭に戻す必要があります。
また、このPlay()メソッドは、非同期処理であるため、Play()メソッドを呼び出した後も、すぐに次のコードが実行されます。つまり、音楽を再生しながら別の処理を行うことができます。ハミング窓(Hamming Window)のについての詳しい説明は、ここでは省きます。簡単に言えば、要するに信号の一部を切り出すために、もとの関数にかける両端がなめらかに絞られた関数です。次に、高速フーリエ変換(Fast Fourier Transform:FFT)の説明です。
高速フーリエ変換とは、離散フーリエ変換(Discreate Fourier Transform:DFT)を計算機上で高速に計算するアルゴリズムです。
つまり、計算の結果は普通の離散フーリエ変換と変わりません。よって、ここでは、本筋からずれることを避けるため、離散フーリエ変換の式のみを紹介します。高速フーリエ変換の詳細を知りたい方は、ぜひググってみてください。
複素関数f(x)の(N次)離散フーリエ変換である複素関数F(t)は以下で定義されます。高速フーリエ変換は、NAudio.Dsp.FastFourierTransform.FFT ()メソッドを使えばできます。NAudio、とても優秀ですね！
次に、引数について説明します。
FastFourierTransform.FFT (bool forward, int m, Complex[] data)
が成り立ち、その要素は、周波数成分fの情報を持ちます。
ただし、標本化定理(サンプリング定理)より、標本化周波数(サンプリング周波数)がf_sampleのとき、f_sample / 2(ナイキスト周波数)以下の原信号が復元可能なので、k &lt; N / 2となります。
また、その複素数の大きさは振幅の半分に相当します。
その計算のあとはデシベルの値を計算し、大きさを百分率で表します。計算方法は上記のコードの通りなので、説明は省略します。描画済みのバーがある場合はそれを削除し、高速フーリエ変換後の配列のデータのうち、drawPositionの要素を描画します。最後に、MainWindow.xamlも載せておきます。レイヤードウィンドウとは、非矩形ウィンドウ、アルファブレンド効果を使用するウィンドウのことです。要するにウィンドウを透明、もしくは半透明にする機能です。この記述を追加することで、描画がレイヤードウィンドウ上で行われます。
さらに、というようにARGBの順番でBackgroundの値を指定することで、半透明、とすることで透明にすることができます。(デバッグ中は半透明にするのが良いと思います。)AviUtlという無料の動画編集ソフトで、音声波形表示のスクリプト(言語はlua)を遊びで作ったことが、Windowsアプリケーションとして、音声波形表示のアプリケーションを作ることのきっかけになりました。
実は、私は、C#でコードを書くのはこれが初めてで、なので当然WPFも初めてでした。そんな中、NAudioという日本語で説明されたサイトが少ないライブラリを用いらなければならなかったので、最初は不安でしたが、C++ではよくコードを書いていることもあり、なんとかここまで来ることができました。
次は音声波形の表示方法をアレンジしたいと思います。余談ですが、これが初投稿で、記事を書く大変さも知ることができました(+o+)笑
では、最後までご覧くださりありがとうございました。


