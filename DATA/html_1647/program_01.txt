
using System;
using System.Text;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using static System.Console;
using static System.Math;

namespace AtCoder
{
    public class Program
    {
        public static void Main(string[] args)
        {
            new Program().Solve(new ConsoleInput(Console.In, ' '));
        }

        public void Solve(ConsoleInput cin)
        {
            var K = cin.ReadInt;
            var LunLunNumber = new Queue&lt;long&gt;();

            //キューに１～９を追加
            for (int i = 1; i &lt; 10; i++)
            {
                LunLunNumber.Enqueue(i);
            }

            var count = 0;
            long ans = 0;
            while (true) 
            {
                count++;
                if (count &gt;= K)
                {
                    ans = LunLunNumber.Dequeue();
                    break;
                }

                //次のルンルン数をキューに追加する
                var num = LunLunNumber.Dequeue();
                var numMod10 = num % 10;
                if (numMod10 != 0) LunLunNumber.Enqueue(num * 10 + numMod10 - 1);
                LunLunNumber.Enqueue(num * 10 + d);
                if (numMod10 != 9) LunLunNumber.Enqueue(num * 10 + numMod10 + 1);
                //WriteLine(num);
            }

            WriteLine(ans);
        }
    }

    public class ConsoleInput
    {
        private readonly System.IO.TextReader _stream;
        private char _separator = ' ';
        private Queue&lt;string&gt; inputStream;
        public ConsoleInput(System.IO.TextReader stream, char separator = ' ')
        {
            this._separator = separator;
            this._stream = stream;
            inputStream = new Queue&lt;string&gt;();
        }

        public string Read
        {
            get
            {
                if (inputStream.Count != 0) return inputStream.Dequeue();
                string[] tmp = _stream.ReadLine().Split(_separator);
                for (int i = 0; i &lt; tmp.Length; i++)
                    inputStream.Enqueue(tmp[i]);
                return inputStream.Dequeue();
            }
        }

        public string ReadLine { get { return _stream.ReadLine(); } }
        public int ReadInt { get { return int.Parse(Read); } }
        public long ReadLong { get { return long.Parse(Read); } }
        public double ReadDouble { get { return double.Parse(Read); } }
        public string[] ReadStrArray(long N) { var ret = new string[N]; for (long i = 0; i &lt; N; ++i) ret[i] = Read; return ret; }
        public int[] ReadIntArray(long N) { var ret = new int[N]; for (long i = 0; i &lt; N; ++i) ret[i] = ReadInt; return ret; }
        public long[] ReadLongArray(long N) { var ret = new long[N]; for (long i = 0; i &lt; N; ++i) ret[i] = ReadLong; return ret; }
    }
}

