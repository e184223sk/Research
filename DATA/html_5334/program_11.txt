
        /// &lt;summary&gt;
        /// アイテムが、ReportItemの場合&lt;/para&gt;
        /// 【期待結果】Recipientsを取得できる
        /// TypeがReportになる
        /// &lt;/summary&gt;
        [Test]
        public void ReportItemRecipientsTest()
        {
            // モックでつかうデータを用意
            string[] testRecNames = { "testemailaddress1@example.com", "testemailaddress2@example.com" };
            bool[] testRecSendable = { true, true };
            int[] testRecType = { (int)OlMailRecipientType.olTo, (int)OlMailRecipientType.olCC };

            // 期待結果を入れるリスト
            List&lt;Recipient&gt; expectedRecList = new List&lt;Recipient&gt;();
            expectedRecList.Add(expectedRec1);
            expectedRecList.Add(expectedRec2);

            testReport.CopyHon().Returns(testReport);

            // モックのReturn値と、期待結果のリストの値を設定
            MyTestNs myTestNs = Substitute.For&lt;MyTestNs&gt;();
            testApp.Session.Returns(myTestNs);
            myTestNs.GetItemFromIDHon(Arg.Any&lt;string&gt;()).Returns(testMail);

            // テストするメソッドにアクセスし、実際の結果を取得
            var objArray = new object[] { testReport, Utility.OutlookItemType.Mail, false };
            object actualObj = mi.Invoke(obj, objArray);

            // テスト対象メソッドの返り値をList&lt;Recipient&gt;型にする
            List&lt;Recipient&gt; actualRecList = new List&lt;Recipient&gt;();
            IEnumerable&lt;Recipient&gt; actualEnumList = (IEnumerable&lt;Recipient&gt;)actualObj;
            foreach (var actual in actualEnumList)
            {
                actualRecList.Add(actual);
            }

            SetExpectedValues(testRecNames, testRecSendable, testRecType, expectedRecList);

            // actualとexpectedのリストを比較
            Assert.AreEqual(actualRecList.Count, expectedRecList.Count);
            CompareLists(actualRecList, expectedRecList);

            // ref引数のtypeが正しいことを確認
            Assert.That(objArray[1], Is.EqualTo(Utility.OutlookItemType.Report));
        }

        /// &lt;summary&gt;
        /// 期待する結果リストの値を設定するメソッド
        /// &lt;/summary&gt;
        /// &lt;param name="testRecNames"&gt;Recipientのアドレス&lt;/param&gt;
        /// &lt;param name="testRecSendable"&gt;RecipientのSendableプロパティ&lt;/param&gt;
        /// &lt;param name="testRecType"&gt;RecipientのType&lt;/param&gt;
        /// &lt;param name="expectedRecList"&gt;期待結果のRecipient型リスト&lt;/param&gt;
        private void SetExpectedValues(string[] testRecNames, bool[] testRecSendable, int[] testRecType, List&lt;Recipient&gt; expectedRecList)
        {
            int i = 0;
            foreach (string testRec in testRecNames)
            {
                expectedRecList[i].Address.Returns(testRecNames[i]);
                expectedRecList[i].Sendable = testRecSendable[i];
                expectedRecList[i].Type = testRecType[i];
                i++;
            }
        }

        /// &lt;summary&gt;
        /// 実際の値と、期待する値を比較するメソッド
        /// &lt;/summary&gt;
        /// &lt;param name="actualList"&gt;メソッドからもどってきたRecipient型リスト&lt;/param&gt;
        /// &lt;param name="expectedList"&gt;期待する結果を入れたRecipient型リスト&lt;/param&gt;
        private void CompareLists(List&lt;Recipient&gt; actualList, List&lt;Recipient&gt; expectedList)
        {
            for (int i = 0; i &lt; expectedList.Count; i++)
            {
                Assert.That(actualList[i].Address, Is.EqualTo(expectedList[i].Address));
                Assert.That(actualList[i].Sendable, Is.EqualTo(expectedList[i].Sendable));
                Assert.That(actualList[i].Type, Is.EqualTo(expectedList[i].Type));
            }
        }

