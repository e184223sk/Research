この記事を読んで、UniRxの Observable.FromCoroutine() でコルーチンを起動した場合は大丈夫だったような気がしたので調べました。Observable.Unity.cs のソースコードを読んだら IEnumerator を IDisposable にキャストして Dispose() を呼んでいました。以下ソースコード抜粋：念のため次のようなコンポーネントで実験してみましたが、コルーチンが終わる前に GameObject を消すとちゃんと disposed とログが出ました。IEnumerator&lt;T&gt; はpublic interface IEnumerator : IDisposable, System.Collections.IEnumeratorなので必ず IDisposable なのですが、 IEnumerator はpublic interface IEnumeratorなので IDisposable であるとは限りません。その点はドキュメントによると列挙子オブジェクトには、次の特性があります。
・IEnumerator と IEnumeratorを実装します。 T は反復子の yield 型です。
・このクラスは、System.IDisposable を実装します。とのことで、イテレータブロックで生成された IEnumerator は必ず IDisposable を実装しているようです。StopCoroutine() は IEnumerator を IDisposable にキャストして Dispose() を呼ぶとか気の利いたことはしてくれないので、自分でやります。IEnumerator をフィールドに保存・止めるときにキャストして Dispose() を呼ぶ手間を考えると Observable.FromCoroutine() で起動したほうが楽そう。


