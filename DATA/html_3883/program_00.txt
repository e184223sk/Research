
    public static class EnumUtils
    {
        /// &lt;summary&gt;2進数文字列(例："1001")をFlags付きEnumに変換する&lt;/summary&gt;
        /// &lt;typeparam name="TEnum"&gt;Enumの型&lt;/typeparam&gt;
        /// &lt;param name="self"&gt;2進数文字列&lt;/param&gt;
        /// &lt;param name="defaultValue"&gt;変換失敗時のデフォルト値&lt;/param&gt;
        /// &lt;returns&gt;Flags付きEnum&lt;/returns&gt;
        public static TEnum ParseToEnumFlags&lt;TEnum&gt;(this string self, TEnum defaultValue = default(TEnum))
            where TEnum : struct
        {
            try
            {
                var binInt = Convert.ToInt32(self, 2);
                return Enum.TryParse&lt;TEnum&gt;(binInt.ToString(), out var ret) ? ret : defaultValue;
            }
            catch
            {
                return defaultValue;
            }
        }

        /// &lt;summary&gt;Enum =&amp;gt; ２進数文字列(例："1010")&lt;/summary&gt;
        /// &lt;param name="self"&gt;The self.&lt;/param&gt;
        /// &lt;param name="digits"&gt;桁数:nullの時AsIs&lt;/param&gt;
        /// &lt;returns&gt;２進数文字列&lt;/returns&gt;
        public static string ToBinaryString(this Enum self, int? digits = null)
        {
            var ret = Convert.ToString(Convert.ToInt32(self), 2);
            if (digits == null)
            {
                return ret;
            }

            if( ret.Length &gt; digits.Value)
            {
                // 間引き 例：(ret, digits) = ("1010", 3) =&gt; "010"
                return ret.Substring(ret.Length - digits.Value, digits.Value);
            }

            if (ret.Length &lt; digits.Value)
            {
                // 0埋め 例：(ret, digits) = ("101", 5) =&gt; "00101"
                return ret.PadLeft(digits.Value, '0');
            }

            return ret;
        }
    }

