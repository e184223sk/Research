More than 1 year has passed since last update.表題の通り
Visual Studio 2019のC#にて、直接バイナリを叩いて指定した画像中に任意のファイル情報を埋め込む。
ステガノグラフィーに関する。コードのサンプルでございます。特段、NuGetなどで他のプラグインや
別途外部dllを必要としないようにしています。また、VB.NETにて以下の内容を書き直した、
Visual Studio 2019のVisual Basic・Windows10環境にて、指定した画像中に任意のファイルを埋め込む。コードのサンプルです。
記事もございます。
そして、出力されるも画像も、互換がございます。任意のファイルを、画像に埋め込む際に
バイナリを以下のように、直接叩いています。1.指定した画像をRGB565形式に変換後、バイナリを一旦すべて読み込む。
2.埋め込む任意のファイルのバイナリも、すべて読み込む。
3.画像の1ドット(=2バイト)分の各バイナリを16桁の2進数にして、1111 1111 1111 1111とのようにする。
4-1.16桁の2進数の内、各色の下位ビットを切り捨てて111- -111 ---1 1---とのようにする。
4-1.16桁の2進数の内、R部分下位2桁をバッサリと切り捨て、111--とのようにする。
4-2.同様に、G下位3桁をバッサリと切り捨て、111---とのようにする。
4-3.同様に、B下位3桁をバッサリと切り捨て、11---とのようにする。
5.埋め込むファイルの各バイナリを8桁の2進数にして、00000000とのようにする。
6.8桁の2進数の内、2桁、3桁、3桁に分割して、00/000/000とのようにする。
7.画像の各色のバイナリ上位の2進数に、　　埋め込むファイルの2進数を下位に結合して、　　1110 0111 0001 1000とのようにする。
8.上記のように、画像の1ドット(=2バイト)につき、埋め込むファイル1バイトが埋まっていく。
9.埋め込みが終わった画像バイナリから、画像に戻す。
10.可逆圧縮であるpng形式で、出力する。そして、埋め込んだファイルを取り出す際は、
この逆をしています。今回は、RGB565形式の画像に埋め込んでいます。
今回の方法なら　(幅x高さ) バイトの情報が入ります。以前は、ARGB888形式の画像に、4ビットの深度で埋め込んでいましたが
4ビット深度なら、(幅x高さx4)/2 バイトの情報が入る。はずなのですが
650kBを超えてくると、ARGB888のコードでは
0xA91D3あたりの番地以降のアドレスで復元したファイルに
元のファイルと異なるバイナリが生じる問題があったので辞めました。
pngの可逆圧縮がうまくいっていないようです。そして、
復元の際も、埋め込みと同じく
BitmapをRGB565形式で読み込み、直接Byte配列に変換する方式を採ろうとしましたが、
画像読み込みの際に、特にAndroid9.0環境にて誤差が生じるようで
復元したファイルの色に変化が生じて、復元がうまくいきませんでしたので
Visual Studio 2019のVisual Basic・Windows10環境にて、指定した画像中に任意のファイルを埋め込む。コードのサンプルです。
の時と同じく、
ARGB888で、一旦画像を読み込んで、自力でRGB565の領域を読むようにしました。このため、
手動で各ピクセルのRGB値を取って、
RGB565領域を取り出して、さらに、そこから復元する方法となっています。
尚、今回の方法以外で、好みのビット深度で情報が埋め込めます。
深度が浅いほど、容量が減る半面、画像が荒くならないです。
1ビット深度なら、荒さが目立たず、何かの情報が画像に入っているとは、気づきにくいです。また、今回は、サンプルなので
RGBすべてのビットに対して埋め込んでいますが、
必要に応じて、必要な色だけ選択して埋め込むことも可能です。また、この方法により、
画像しか送受信できない環境や、
exeなど直接メールに添付できないような環境でも、
画像に一旦、埋め込むことで、やり取りすることが可能になります。※ただし、やり取りの過程で画像が加工されたりしてしまうと、
内部の情報が壊れるため、
画像が加工されずに、そのままやり取りできる環境が必要になります。※この記事でのコードは、
最低限の記述にとどめているため、解放など不十分な部分や、
記述を省略している箇所があります。
また、逆に不必要なコードも記述しています。※コード中のURLは、参考にさせていただきましたサイト様のものでございます。
勝手ながら、参考にさせていただいたサイト様には、この場にて厚く御礼致します。記事本題のC#のコードを使用するために、
下記のxmlレイアウトを使用しています。要は、埋め込み用のボタンと
取り出し用のボタン２つを
下図のように用意致したレイアウトとしております。
また、今回の動作に必要な権限を
以下のように与えています。標題にある機能のための
Visual Studio 2019 C#での
Android開発環境でのコードは、以下の通りでございます。なお、埋め込んだファイルが確実に復号できているかを確認するために
CRC-32等のハッシュ値を併せて埋め込んでおくと、より確実に思います。上記のコードで、
画像に、私作成であり
Vector様のサイトで公開している
『オフタイマー弐式』という、
Windowsソフトを
埋め込んでおります。
exeファイルは、直接だったり
zipに圧縮してメールでやり取りしようとしても、
セキュリティにて、止められたりしますが画像に埋め込んであるので
途中で加工さえされなければ、
そこは、すり抜けます。人に見られたくないファイルの
保存にも向きますが、消えると困る大切なファイルの埋め込みには向かないと
私は感じております。本題のコードの。data_umekomiプロシージャを
以下のコードに差し替えると
画像の四隅の場所と、色の確認をすることが出来ます。差し替えたコードの動作例

画像の四隅が、黒、赤、緑、青となっています復元の際に、埋め込みの場合と同じく、
RGB565形式で復元しようとしたコードの残骸です。
復元部分だけ示します。


