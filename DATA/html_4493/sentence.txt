More than 1 year has passed since last update.協力最短詰めオセロとは、黒と白のプレイヤーが二人で協力して、番面の石を黒か白一色にする最短の手順を求めるパズルです。石の初期状態と石を裏返すルールはオセロのルールをそのまま採用します。ここでは、解を探索するのに幅優先探索のアルゴリズムを採用し、盤面の石がすべて同じ色になるまで、すべての手を試していきます。幅優先探索なので、最短手を見つけた時点で探索を終わらせることができます。深さ優先だと全ての探索をしないと最適解がわからないですからね。クラスは、以下の６つです。Program : プログラムを制御するクラス。結果表示も担当。Solver : 問題を解くクラス。これがこのプログラムの中心的クラスStone : 石を表すクラスMove : 手(どこに何色の石を置いたか)を表すクラスOthBoard :  オセロ盤クラス（BoardBase&lt;T&gt;から派生）BoardBase&lt;T&gt; : 盤面クラス（汎用の基底クラス）-- ページ最後に掲載ちょっと苦労したのは、このパズルはプレイヤーが２人いること。最初はPlayerクラスを作ろうかとも思ったのですが、そうせずに、Solverクラスで両方の石の手を置くようにしています。盤面を扱うOthBoardクラスの中に、石を置くPutメソッドがあるのですが、その中で次に置く石の色(白か黒か)を求めています。求めた石の色はTurnプロパティの値として設定しています。もうすこししっかりと分析すれば、クラス設計が変わってきそうなきがします。そもそも「二人で協力して」という問題の趣旨とは完全に実装が違ってますからね。具体的に何をやっているかは、コードに書いてあるコメントを読んでいただければと思います。プログラムのエントリポイントであるMainが定義してあります。Solverクラスで解を求め、結果（棋譜）を表示した後に、その棋譜を画面上で再現しています。幅優先探索で解を求めています。盤面の状態をスタックに記憶しているのです。幅優先探索を書いていつも思うのが、状態をスタックに積んでいくという操作が面倒たということ、もっと簡単な方法がないのかなー。Stone, Move, OthBoardの3つのクラスを定義オセロの盤面を表すクラスOthBoardは、BrardBase&lt;T&gt;クラス(ページ最後に掲載)を継承して作成しています。僕のコンピュータ(MacBook Pro)で約20秒ほどで解が求まりました。
ちなみに、このプログラムは、.NET Core2.1で動かしています。ソースコードは、.NET Framework + Windowsでもそのまま動くはずです。Xが黒、Oが白を表しています。これが棋譜です。合わせて9手で盤面を一色にできることがわかります。この後、Enterキーを押すことで、盤面の状態をひとつずつ再現します。Console.SetCursorPosition() メソッドを使っているので、画面はスクロールせずに、最初に表示した盤面を上書きするようになっています。以下、その一部です。最後は、黒一色になりました。このBoardBaseクラスは、「騎士巡回問題」「ナイト(騎士)の最適配置問題」などで利用したものと同じものです。前述のBoardクラスの基底クラスです。X × Y の盤面を表し、基本的な操作を定義しています。これは似たようなパズルでも再利用できるような汎用的な機能に絞っています。このBoardBaseクラスは、コンソールアプリに依存しない作りにしています。UWP、WinFormsでもそのまま使えると思います。このBoardBaseを継承して、当パズル専用のBoardクラスを定義します。内部では1次元配列を使っていますが、インデクサを定義して、1次元配列、2次元配列としても扱えるようにしています。
ただし、すべてのメソッドで１次元対応と２次元対応のものを用意するのは面倒なので、どちらか一方にしています。まあこれは好み以外の何物でもありません。１次元のインデックスによるアクセスができるようにしている理由は、一重ループで処理が書けるので、コードが簡潔になるからです。LINQのコードも書きやすくなります。2次元配列として見た場合の、X座標、Y座標は、0 からではなく、1から始まります。
つまり、board[1,1] は、いちばん左上を示し、8×8の盤ならば、board[8,8]が右下を示すことになります。なお、盤の周りには番兵用の領域を用意しています。これにより範囲外かどうかの判断を簡単に出来るようにしています。チェスのナイト(騎士)の動きにも対応できるよう、番兵は二重にしています。上の図は 4×4の盤を表していますが、グレー部分が番兵が置いてある盤の周囲で、水色部分が実際の盤です。
盤面上の数値は、１次元配列のインデックスを表しています。なお、派生クラスや派生クラスを利用するクラスが、この番兵の存在に依存しないように、ToDirectionという関数を定義し、X方向、Y方向のペアで表す移動方向(ベクトル)をインデックスで表す方向に変換するようにしています。BoardBaseクラスはジェネリッククラスにしていて、そのパラメータの型は、盤面上に置けるクラスの型です。この記事は、Gushwell's C# Programming Pageで公開したものを大幅に加筆・修正したものです。


