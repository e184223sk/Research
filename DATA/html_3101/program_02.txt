
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DesignPatternLearn.AdapterLearn
{
    class AdapterTest2_2
    {
        public static void Main(string[] args)
        {
            FileIO f = new FileProperties();
            try
            {
                f.ReadFromFile("file.txt");
                f.SetValue("year", "2004");
                f.SetValue("month", "4");
                f.SetValue("day", "21");
                f.WriteToFile("newfile.txt");
            }
            catch (InvalidOperationException e)
            {
                Console.WriteLine(e.StackTrace);
            }
        }

        public interface FileIO
        {
            void ReadFromFile(string filename);
            void WriteToFile(string filename);
            void SetValue(string key, string value);
            string GetValue(string key);
        }

        public class FileProperties : FileIO
        {
            Dictionary&lt;string, string&gt; properties;

            public FileProperties()
            {
                properties = new Dictionary&lt;string, string&gt;();
            }

            public void ReadFromFile(string filename)
            {
                var properties = new Dictionary&lt;string, string&gt;();
                using (TextReader reader = new StreamReader(filename))
                {
                    // プロパティクラスが手元の環境にないため以下
                    string line;
                    while (string.IsNullOrEmpty(line = reader.ReadLine()))
                    {
                        string[] keyvalue = line.Split('=');
                        properties.Add(keyvalue[0], keyvalue[1]);
                    }
                }
            }

            public void WriteToFile(string filename)
            {
                foreach (string k in properties.Keys)
                {
                    File.AppendAllText(filename, k + "=" + properties[k]);
                }
            }

            public void SetValue(string key, string value)
            {
                if (properties.ContainsKey(key))
                {
                    properties[key] = value;
                }
            }

            public string GetValue(string key)
            {
                if (properties.ContainsKey(key))
                {
                    return properties[key];
                }
                return "";
            }
        }
    }
}

