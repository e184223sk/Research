public override void OnCreate( ISurfaceHolder holder ) {

    // ウォッチフェイスのスタイルを設定します。
    SetWatchFaceStyle(
        new WatchFaceStyle.Builder( owner )
            // ユーザーからのタップイベントを有効にするかどうか設定します。
            //   true  : 有効
            //   false : 無効（デフォルト）
            //.SetAcceptsTapEvents( true ) 
            // 通知が来た時の通知カードの高さを設定します。
            .SetCardPeekMode( WatchFaceStyle.PeekModeShort )
            // 通知カード（small cardの表示時）の背景の表示方法を設定します。
            //   WatchFaceStyle.BackgroundVisibilityInterruptive : 一部の重要な通知に限り、表示します。（デフォルト）
            //   WatchFaceStyle.BackgroundVisibilityPersistent   : 通知カードの種類にかかわらず、表示します。
            .SetBackgroundVisibility( WatchFaceStyle.BackgroundVisibilityInterruptive )
            // システムUIのデジタル時計を表示するするかどうかを設定します。（使用している例として、デフォルトで用意されている「シンプル」があります。）
            //   true  : 表示
            //   false : 非表示（デフォルト）
            .SetShowSystemUiTime( false )
            // 設定したスタイル情報をビルドします。このメソッドは最後に呼び出します。
            .Build()
    );

    base.OnCreate( holder );

    var resources = owner.Resources;

    // 背景用のグラフィックスオブジェクトを生成します。
    backgroundPaint = new Paint();
    // リソースから背景色を読み込みます。
    backgroundPaint.Color = resources.GetColor( Resource.Color.background );

    // 時針用のPaintグラフィックスオブジェクトを生成します。
    hourHandPaint = new Paint();
    hourHandPaint.Color = resources.GetColor( Resource.Color.analog_hands );
    // 時針の幅を設定します。
    hourHandPaint.StrokeWidth = resources.GetDimension( Resource.Dimension.hour_hand_stroke );
    // アンチエイリアスを有効にします。
    hourHandPaint.AntiAlias = true;
    // 線端の形は丸形を指定します。
    hourHandPaint.StrokeCap = Paint.Cap.Round;

    // 分針用のPaintグラフィックスオブジェクトを生成します。
    minuteHandPaint = new Paint();
    minuteHandPaint.Color = hourHandPaint.Color;
    minuteHandPaint.StrokeWidth = resources.GetDimension( Resource.Dimension.minute_hand_stroke );
    minuteHandPaint.AntiAlias = true;
    minuteHandPaint.StrokeCap = Paint.Cap.Round;

    // 秒針用のPaintグラフィックスオブジェクトを生成します。
    secondHandPaint = new Paint();
    secondHandPaint.Color = resources.GetColor( Resource.Color.analog_second_hand );
    secondHandPaint.StrokeWidth = resources.GetDimension( Resource.Dimension.second_hand_stroke );
    secondHandPaint.AntiAlias = true;
    secondHandPaint.StrokeCap = Paint.Cap.Round;

    // 時刻を格納するオブジェクトを生成します。
    nowTime = Java.Util.Calendar.GetInstance( Java.Util.TimeZone.Default );
}

