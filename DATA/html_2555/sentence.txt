More than 1 year has passed since last update.ゲーム「フォートナイト」の重要な要素である"建築"を、完全にではありませんがUnityで再現してみました。再現したのは壁・床・階段の建築のみで、編集は再現していません。この記事では、プレイヤーを三人称視点で見ながらXboxコントローラーで操作していく前提で話を進めていきます(Xboxコントローラーを持っていない方も、実装で参考になるところはあると思うので読んでいただけたら嬉しいです)。"Unityでフォートナイトの建築を再現してみる"の進捗です#Unity #Fortnite pic.twitter.com/27e4eTidiLシーンに置いているのは、プレイヤー・カメラ・光源・地面のみです。また、シーンには置いてありませんが、プレハブとして建築の材料である壁・床・階段を作ってあります。
プレイヤーにはユニティちゃんを使いました。ユニティちゃんにつけているコンポーネントは以下になります。です。変更点に何も書いていないコンポーネントはデフォルトの値のままでOKです。このうち、unitychanAvatarはこちらから、ThirdPersonUserControl.csとThirdPersonCharacter.csはこちらからダウンロードする必要があります。また、ObjectCamera.csは以下のスクリプトになります。これは以前どこかのサイトから引用させていただいたものなのですが、どのサイトから引用したか忘れました。申し訳ありません。
建築物は壁(Wall)・床(Floor)・階段(Stair)の3種類作りました。3つの建築はすべて3D ObjectのPlaneから作っており、さらに"Brown"という茶色のマテリアルで色付けしてあります。各建築のScaleは以下のようになっています。Stairは斜めに設置される建築なので、Scaleの値が中途半端になっています。PositionとRotationの値は後からスクリプトで定めるので、今はデフォルト値のままでOKです。
Main Cameraにはデフォルトでついているコンポーネントに加えてTPSCamera.csとBuild.csというスクリプトを付ける必要があります。TPSCamera.csは以下になります。TPSCamera.csもほぼ引用させていただいたものなのですが、引用先のページを忘れてしまいました。申し訳ありません。TPSCamera.csをカメラにアタッチすると、Xboxコントローラーの右スティックでカメラの角度の変更、LT, RTボタンでシーンの拡大、縮小ができます。続いてBuild.csです。NewBuild.csでは実際にXboxコントローラの対応するボタンを押したら建築が現れるように実装しています。このスクリプトに含まれるメソッドについて説明していきます。これは24個の点の座標を求めるメソッドです。

空間中にあらかじめx軸方向, y軸方向, z軸方向の辺の長さがそれぞれ6, 4, 6の見えない直方体が隙間なく敷き詰められていると想像してください。プレイヤーがいる座標は、空間中のいずれかの直方体の内部に必ず入っています(直方体の辺の上にちょうど乗っかることはまずあり得ないでしょう)。プレイヤーが入っている直方体を中央に考えて、その周りにx軸方向とz軸方向に隣接する4個の直方体を考えます。この計5個の直方体の24個の頂点の座標を使えば、建築をどこに建てればいいかが決まります。例えば床だったら0, 1, 2, 3の4点を頂点とする正方形を作ればよいですし、壁だったら0, 1, 13, 12の4点を頂点とする長方形、階段だったら0, 1, 14, 15の4点を頂点とする長方形を作ればよいです。プレイヤーが入っている直方体だけでなく、その周りにも4つ直方体を配置するのは、階段や床が視線の先の方まで建築されるようにするためです。さて、このメソッドではまずsmaller_x, smaller_y, smaller_zの3つの値を求めています。これらの値は、プレイヤーが入っている直方体の小さな方のx座標, y座標, z座標の値を表しています。直方体の各辺の長さはあらかじめxLength(=6), yLength(=4), zLength(=6)という3つの値で決めてあるので、smaller_x, smaller_y, smaller_zの値が求められます。24個の点の座標のうち"0"の座標を最初に求めて、あとは辺の長さを足していけばすべての点の座標が分かります。
このメソッドは、3点vec1, vec2, vec3を通る平面の法線ベクトルを求めます。このメソッドは3点vec1, vec2, vec3を通る平面の方程式を求めます。詳しい説明はこちらの記事を参考にしてください。カメラの視線と方程式が分かっている平面との交点を求めるメソッドです。詳しい説明はこちらの記事を参考にしてください。これは、建築がカメラの正面の方向にのみ作られるようにするためのメソッドです。このメソッド内で定義している"parameter"という変数はCalculateCoordinateOfIntersectionメソッドの中で定義している"parameter"と全く同じものです。parameter&gt;0のときカメラの正面にあり、parameter&lt;0のときカメラの背後にあるので、このメソッドがないと建築がカメラの後ろ側にもできてしまうことがあります。カメラとプレイヤーとの間に建築ができないようにするメソッドです。(カメラから建築物までの距離)&gt;(カメラからプレイヤーまでの距離)だったらtrueを返すようにしています。このメソッドはこちらのサイトから、ほぼ完全に引用させていただきました。座標がintersectionで表される点がverticesで囲まれる多角形の内側にあればtrueを返します。引数にとっているvertex0~vertex3の4点を頂点とする壁と階段が建築できるかどうかを判定します。ここまでに説明してきたメソッドを連結しているだけです。
vec0~vec3の4点を頂点とする床が建築できるかどうかを判定しています。カメラの視線を表すベクトルとカメラから床の中央に向かうベクトルとの内積が0.97より大きい、すなわちカメラの視線を表すベクトルとカメラから床の中央に向かうベクトルとのなす角が約14°未満のときに建築可能というように実装しています。床の建築可能な条件を壁や階段の建築可能な条件と同じにすると床に建築がしづらくなるように感じたので、実装を変えました。このメソッドでは、コントローラーの対応するボタンを押すと実際に建築ができるように実装してあります。床の建築では、カメラが水平よりも上を向いているのか下を向いているのかを取得する必要があります。なぜなら、水平よりも上を向いているならプレイヤーより上に位置する床しか建築されず、またその逆も然りにするためです。カメラが真上を向いているときのxの値が90、真下を向いているときのxの値が270になるので、差の絶対値をとって判定しています。CanBuildWallAndStairメソッドを使って簡潔に実装しています。カメラがある程度下を向いているときは、カメラの視界に入るのはプレイヤーが入っている直方体の内部の階段のみですが、カメラがある程度水平方向を向いていれば、さらにその奥に隣接している直方体の内部にある階段も視界に入ります。つまり、カメラがある程度水平を向いていると1度に2つの階段ができてしまうというわけです。

これだと意図しない場所に階段が出来かねないので修正しなければなりません。そこで、カメラの視線に2つの階段が入っているときはより遠くの方の階段だけが建築されるように実装しました。手前の階段を建築したいときは視線を下に向けた状態で建築すればOKです。まずカメラが前後左右のどこを向いているのかを"y"という変数に入れておきます。yの値によって階段の向きを指定していきます。if文の中にさらにif文が入っていますが、ここでカメラの視線に2つの階段が入っているかどうかを判定しています。現在のところ、ここまでしかフォートナイトの建築の実装は進めていませんが、これからも実装を進めていきたいと考えているので、その都度Qiitaで記事を書いていきたいと思います。本記事を読んでいただきありがとうございました。


