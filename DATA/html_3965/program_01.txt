
using UnityEngine;
using System;
using Moments;
using System.Collections;
public class Rec : MonoBehaviour
{
    bool isRec;
    bool isSave;

    int countTryRec;

    Recorder rec;

    Coroutine runCoroutine;

    void Start()
    {
        print("Rで録画開始");
        rec = GetComponent&lt;Recorder&gt;();
        rec.OnPreProcessingDone = OnProcessingDone;
        rec.OnFileSaveProgress = OnFileSaveProgress;
        rec.OnFileSaved = OnFileSaved;

        //BufferSizeがfloatだとめんどうなのでエラーメッセージで忠告する
        if (rec.ReturnBufferSize() - (int)rec.ReturnBufferSize() != 0)
        {
            Debug.LogError("BufferSizeを自然数にしろ");
        }
    }

    //保存開始時
    void OnProcessingDone()
    {
        print("保存開始");
    }

    //保存中　idという引数はよくわからん
    void OnFileSaveProgress(int id, float percent)
    {
        print("保存中:" + Math.Truncate(percent * 100.0) + "/" + "100％");
    }

    //保存終了時　idという引数はよくわからん
    void OnFileSaved(int id, string filepath)
    {
        print("保存完了:" + "100" + "/" + "100％" + filepath);
        isSave = false;
    }

    void Update()
    {
        //録画 -&gt;　録画中、セーブ中は押せない
        if (Input.GetKeyDown(KeyCode.R) &amp;&amp; isRec == false)
        {
            runCoroutine = StartCoroutine(RecCountDown());
        }
    }

    //録画開始～終了まで
    IEnumerator RecCountDown()
    {
        isRec = true;

        float second = 1f;
        int count = 0;

        //録画カウントダウン
        print("録画開始まで");
        yield return new WaitForSeconds(second);
        print("3");
        yield return new WaitForSeconds(second);
        print("2");
        yield return new WaitForSeconds(second);
        print("1");
        yield return new WaitForSeconds(second);
        print("開始");
        rec.Record();

        //残り秒数の表示
        for (int i = 0; i &lt; rec.ReturnBufferSize(); i++)
        {
            yield return new WaitForSeconds(second);
            count++;
            print("録画時間" + ":" + count + "/" + rec.ReturnBufferSize()+"秒");
        }

        //録画終了
        print("録画終了");

        //保存開始
        rec.Save();


        yield return new WaitForSeconds(second);
        isRec = false;

        StopCoroutine(runCoroutine);

    }


}

