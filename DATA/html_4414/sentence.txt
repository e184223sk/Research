More than 1 year has passed since last update.Visual Studio を使って初めての Durable Functions を書いてみましょう。下記のリンクに、Visual Studio を用いて開発を行うための前提条件が書かれています。内容がたまにアップデートされるので、ここで詳細は書かず、リンクにとどめておきます。丁寧にかいてありますので、この前提条件に従うと問題ないとおもいます。ポイントだけを説明しておきますとの三点がそろっていれば大丈夫かと思います。Azure Functions は、V1 と V2 が存在します。詳しくはAzure Functions ランタイム バージョンの概要をご参照ください。今後は V2 の使用をお勧めしますので、この手順は V2 について書かせていただきます。a. Visual Studio で、[ファイル] メニューから [新規] &gt; [プロジェクト] の順に選択します。
b. [新しいプロジェクト] ダイアログで、[インストール済み] を選択し、[Visual C#] &gt; [クラウド] の順に展開して [Azure Functions] を選択します。プロジェクトの名前を入力して、[OK] をクリックします。 関数アプリ名は、C# 名前空間として有効である必要があります。そのため、アンダースコア、ハイフン、その他の英数字以外の文字は使用しないでください。
c. 図の下の表に示した設定を使用してください。
  d. [OK] をクリックして、関数プロジェクトを作成します。a. ソリューション エクスプローラーで、プロジェクト ノードを右クリックし、[追加] &gt; [新しいアイテム] の順に選択します。 [Azure 関数] を選択します。次のような画面がでてきますので、Durable Functions Orchestration を選択して、[追加] を選択します。Durable Functions のテンプレートが作成され、Microsoft.Azure.WebJobs.Extensions.DurableTask nuget パッケージがインストールされます。デフォルトでは、nuget パッケージのバージョンが古くなっています。ソリューション エクスプローラーで、プロジェクト ノードを右クリックし、[Nuget パッケージの管理] を選択します。[更新] タブに数字がでている場合は、[更新]タブをクリックします。インストール済みの nuget パッケージのうち更新が必要なものが表示されます。この例では、Microsoft.NET.Sdk.Functions が古いバージョンになっていますので、右のパネルの [更新] をクリックしてバージョンを更新します。Durable Functions のコードができたので実行することができます。Azure Functions Core Tools](https://docs.microsoft.com/ja-jp/azure/azure-functions/functions-run-local)をつかうとローカルの開発用コンピューター上で Azure Functions プロジェクトを実行できます。 Visual Studio から初めて関数を開始すると、これらのツールをインストールするよう求めるメッセージが表示されます。
関数をテストするには、F5 キーを押します。 メッセージが表示されたら、Visual Studio からの要求に同意し、Azure Functions Core (CLI) ツールをダウンロードしてインストールします。 また、ツールで HTTP 要求を処理できるようにファイアウォールの例外を有効にすることが必要になる場合もあります。
Azure Functions のランタイムの出力から、関数の URL をコピーします。Durable Functions が起動し、リクエストを受け付ける準備がなされました。Durable Functions のオーケストレーションを開始します。生成されたコードを読んでみます。この関数は、Httpリクエストを受け付ける HttpTrigger とともに、DurableOrchestrationClient のインスタンスを受け取っています。この DurableOrchestrationClient の StartNewAsync("関数名", null) メソッドを呼び出すことで、オーケストレーションが開始されます。オーケストレーションのinstanceIdが自動的に生成され、FunctionName アトリビュートHelloWorld の関数が開始されます。StartNewAsync の開始をうけて、オーケストレーションが開始されます。DurableOrchestrationContext のインスタンスが引き渡されます。context オブジェクトには、先行する関数から引き渡された引数(この例では、null)等が格納されています。context.CallActivityAsync&lt;T&gt;("Activity 関数名", "引数") を呼び出すことで、本オーケストレータ関数から、アクティビティ関数を呼び出して、処理を実行させることができます。引数の型を&lt;T&gt; で指定する必要があります。本実行は一件普通のメソッド呼び出しに見えますが、実際は、Queue を介してメッセージ送信が行われています。オーケストレータ関数には、[OrchestrationTrigger] アトリビュートが必要になります。本関数の戻り値がオーケストレーションの結果として引き渡されます。オーケストレータから呼び出された 関数です。Azure Functions のバインディング も使用することができます。本関数がオーケストレータのCallActivityAsync&lt;T&gt;() から呼び出されて実行された際のパラメータが、[ActivityTrigger] アトリビュートで引き渡される引数になります。戻り値はCallActivityAsync&lt;T&gt;()関数の戻り値になります。Durable Functions をローカルでテストする で Durable Fucntions が起動しています。Postmanをダウンロードして、先ほどのURLにリクエストを送信します。Durable Functions をローカルでテストする の章でコピーした、URL をテキストボックスに張り付けて、[Send] を選択します。
バックグラウンドでは、Durable Functions が非同期に実行されています。しばらくすると、Postman に結果が返ってきます。これは、処理が終了したという意味ではなく、リクエストの受付が終了したという意味で、バックグラウンドで、オーケストレーションが実行されています。statusQueryGetUri のリンクをクリックして、[Send] を選択します。このリンクにより、実行されたオーケストレーションのステータスを確認することができます。オーケストレーションの実行結果が output に表示されます。Durable Functions のコーディングの詳細は、Durable Functions の概要 をご参照ください。ローカルで作成した関数のデバッグや、Azure へのデプロイ方法は Visual Studio を使用する Azure Functions の開発をごらんください。


