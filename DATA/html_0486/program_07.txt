
using NUnit.Framework;
using UnityEngine;
using System;
using Cysharp.Threading.Tasks;
using System.Collections;
using UnityEngine.TestTools;
using Zenject;
using MessagePipe;
using System.Threading;

namespace XXXX
{
    /// &lt;summary&gt;
    /// Asyncテスト
    /// &lt;/summary&gt;
    public class AsyncTest
    {
        #region 定数, class, enum

        // イベント送る方
        public class Publisher
        {
            [Inject] private IAsyncPublisher&lt;MyEvent&gt; _asyncPublisher;

            public async UniTask SendAsync(MyEvent ev)
            {
                // Subscriberの購読処理が終わるまで待つ
                await _asyncPublisher.PublishAsync(ev);

                Debug.Log("イベント送信完了");
            }
        }

        // イベント受け取る方
        public class Subscriber
        {
            [Inject] private IAsyncSubscriber&lt;MyEvent&gt; _asyncSubscriber;
            [Inject] private ISubscriber&lt;MyEvent&gt; _subscriber;

            private CancellationTokenSource _cts = new CancellationTokenSource();
            private IDisposable _disposable;

            public void Subscribe()
            {
                var bag = DisposableBag.CreateBuilder();

                // イベントが来たら反応する
                _subscriber
                    .Subscribe(ev =&gt;
                    {
                        Debug.Log($"イベント受信完了: {ev.Message}");

                    }).AddTo(bag);

                _disposable = bag.Build();
            }

            /// &lt;summary&gt;
            /// 最初のイベントが来るまで待機
            /// &lt;/summary&gt;
            public async UniTask FirstAsync()
            {
                var ev = await _asyncSubscriber.FirstAsync(_cts.Token);

                Debug.Log($"イベント受信完了: {ev.Message}");
            }

            /// &lt;summary&gt;
            /// Subscribe内で待機
            /// &lt;/summary&gt;
            public void SubscribeAsync(System.Action onFinished)
            {
                var bag = DisposableBag.CreateBuilder();

                _asyncSubscriber
                    .Subscribe(async (x, ctr) =&gt;
                    {
                        var time = Time.realtimeSinceStartup;

                        // ここで非同期処理が可能
                        // 大体1秒待機
                        await UniTask.Delay(TimeSpan.FromSeconds(1), cancellationToken: ctr);

                        time = Time.realtimeSinceStartup - time;
                        Debug.Log($"イベント受信完了: {x.Message} 待機秒数: {time}秒");

                        // 終わったらよびだし
                        onFinished?.Invoke();
                    }).AddTo(bag);

                _disposable = bag.Build();
            }

            public void Close()
            {
                _disposable?.Dispose();
            }
        }

        // 送るイベント
        public class MyEvent
        {
            public string Message;
        }

        #endregion


        #region public, protected 変数

        #endregion


        #region private 変数

        private DiContainer _container;

        #endregion


        #region プロパティ

        #endregion


        #region コンストラクタ, デストラクタ

        #endregion


        #region public, protected 関数

        [SetUp]
        public void Setup()
        {
            _container = new DiContainer();
            _container.BindMessageBroker&lt;MyEvent&gt;(_container.BindMessagePipe());
        }

        [TearDown]
        public void TearDown()
        {
            _container.UnbindAll();
        }

        [UnityTest]
        public IEnumerator 非同期送信テスト()
        {
            Debug.Log("イベント受信");

            // イベントを受ける方
            var subscriber = _container.Instantiate&lt;Subscriber&gt;();
            subscriber.Subscribe();

            var task2 = UniTask.Create(async () =&gt;
                {
                    Debug.Log("イベント送信");

                    // イベントを投げる方
                    var publisher = _container.Instantiate&lt;Publisher&gt;();
                    await publisher.SendAsync(new MyEvent { Message = "イベント" });
                });

            return UniTask.ToCoroutine(async () =&gt; await UniTask.WhenAll(task2));
        }

        [UnityTest]
        public IEnumerator 非同期送受信テスト()
        {
            var task1 = UniTask.Create(async () =&gt;
                {
                    bool isFinished = false;
                    Debug.Log("イベント受信");

                    // イベントを受ける方
                    var subscriber = _container.Instantiate&lt;Subscriber&gt;();
                    subscriber
                        .SubscribeAsync(() =&gt;
                        {
                            // 終わったらフラグをtrueにして終了させる
                            isFinished = true;
                        });

                    return UniTask.WaitUntil(() =&gt; isFinished);
                });

            var task2 = UniTask.Create(async () =&gt;
                {
                    Debug.Log("イベント送信");

                    // イベントを投げる方
                    var publisher = _container.Instantiate&lt;Publisher&gt;();
                    await publisher.SendAsync(new MyEvent { Message = "イベント" });
                });

            return UniTask.ToCoroutine(async () =&gt; await UniTask.WhenAll(task1, task2));
        }


        [UnityTest]
        public IEnumerator 非同期送受信テスト_FirstAsync()
        {
            var task1 = UniTask.Create(async () =&gt;
                {
                    Debug.Log("イベント受信");

                    // イベントを受ける方
                    var subscriber = _container.Instantiate&lt;Subscriber&gt;();
                    await subscriber.FirstAsync();
                });

            var task2 = UniTask.Create(async () =&gt;
                {
                    Debug.Log("イベント送信");

                    // イベントを投げる方
                    var publisher = _container.Instantiate&lt;Publisher&gt;();
                    await publisher.SendAsync(new MyEvent { Message = "イベント" });
                });

            return UniTask.ToCoroutine(async () =&gt; await UniTask.WhenAll(task1, task2));
        }


        [UnityTest]
        public IEnumerator 非同期送受信テスト_GlobalMessagePipe()
        {
            // GlobalMessagePipeを使用する前にSetProviderに設定する必要がある
            GlobalMessagePipe.SetProvider(_container.AsServiceProvider());

            // 非同期用のPublisher/Subscriberを生成する
            var asyncSubscriber = GlobalMessagePipe.GetAsyncSubscriber&lt;MyEvent&gt;();
            var asyncPublisher = GlobalMessagePipe.GetAsyncPublisher&lt;MyEvent&gt;();

            var cts = new CancellationTokenSource();

            var task1 = UniTask.Create(async () =&gt;
                {
                    Debug.Log("イベント受信");

                    // イベントを受ける方
                    var ev = await asyncSubscriber.FirstAsync(cts.Token);

                    Debug.Log($"イベント受信完了 : {ev.Message}");
                });

            var task2 = UniTask.Create(async () =&gt;
                {
                    Debug.Log("イベント送信");

                    // イベントを投げる方
                    await asyncPublisher.PublishAsync(new MyEvent { Message = "イベント" }, cts.Token);

                    Debug.Log("イベント送信完了");
                });

            return UniTask.ToCoroutine(async () =&gt; await UniTask.WhenAll(task1, task2));
        }

        #endregion


        #region private 関数

        #endregion
    }
}

