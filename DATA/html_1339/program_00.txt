using System.Linq;

using System.Collections.Immutable;
using System.Collections.Generic;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace SemSymbols {
    public enum TypeVerCategory {
        Unknown,
        Constructor,
        Properties,
        Fields,
    }

    public struct TypeVar&lt;TSymbol&gt; 
        where TSymbol: ISymbol
    {
        public TypeVerCategory Category { get; private set; }
        public ImmutableArray&lt;TSymbol&gt; Symbols { get; private set; } 

        public TypeVar(TypeVerCategory inCategory, ImmutableArray&lt;TSymbol&gt; inSymbols) {
            this.Category = inCategory;
            this.Symbols = inSymbols;
        }
    }

    public static class TypeVar {
        public static TypeVar&lt;IParameterSymbol&gt; OfConstructor(ImmutableArray&lt;IParameterSymbol&gt; inSymbols) {
            return new TypeVar&lt;IParameterSymbol&gt;(TypeVerCategory.Constructor, inSymbols);
        }
        public static TypeVar&lt;IPropertySymbol&gt; OfProperties(ImmutableArray&lt;IPropertySymbol&gt; inSymbols) {
            return new TypeVar&lt;IPropertySymbol&gt;(TypeVerCategory.Properties, inSymbols);
        }
        public static TypeVar&lt;IFieldSymbol&gt; OfFields(ImmutableArray&lt;IFieldSymbol&gt; inSymbols) {
            return new TypeVar&lt;IFieldSymbol&gt;(TypeVerCategory.Fields, inSymbols);
        }
    }

    public struct MethodParamTypeVar {
        IParameterSymbol[] Parameters { get; set; }
    }

    public struct EntitiyContext {
        public SpecialType ContainerType { get; set; }
        public INamedTypeSymbol NamedType { get; set; }
        public TypeVar&lt;IParameterSymbol&gt;[] Constructors { get; set; }
        public TypeVar&lt;IPropertySymbol&gt; PropertyTypeVars { get; set; }
        public TypeVar&lt;IFieldSymbol&gt; FieldTypeVars { get; set; }
    }
}

