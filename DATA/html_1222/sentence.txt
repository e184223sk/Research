More than 1 year has passed since last update.最初の記事はこちら今回はクエリ自動生成によるデータ操作をします。データベースはPostgreSQLを使用しました。今回は以下のような単純なテーブルを用意しました。属性を用いて上記の emp テーブルに対応するクラスを作成します。Fluent Mappingsによる定義も可能なようですテーブル名に対応する属性です。主キーを表す属性です。少し複雑なので解説します。ソースはこちらNPocoは複合主キーに対応しており、複合主キーの場合は カンマ区切り文字列 または 文字列の配列を渡します。またデフォルトではAutoIncrement プロパティがtrue となっているため、主キーの値が自動生成ではない場合はこのプロパティをfalse にしておく必要があります。シーケンスによる自動採番にも対応しており SequenceName にシーケンス名を渡すことにより、Oracle などのシーケンスによる自動採番にも対応しています。
(PostgreSQL の場合は シーケンスによる自動採番はデフォルトでは対応していないので自分でPostgreSQLDatabaseType を継承した新たなものを用意する必要があります。
SQL Server でシーケンスを使う場合はUseOutputClause をtrue にする必要があります。)列名に対応する属性です。最低限上記の属性で足りますが、それ以外の属性についてはこちらを参照してください。以下のクエリが実行されます。以下のクエリが実行されます。2項目しか変更していないにも関わらず、set では全ての列を更新していることが確認できます。Update時に更新対象の列を限定したいときは次に説明する更新対象列指定のUpdateメソッドを使います。
またsnapshot の機能を使うことで、差分更新を自動ですることができます。第2引数に更新対象列の一覧を渡すことで、列を限定することができます。以下のクエリが実行されます。変更対象の2列のみがset で指定されていることが確認できます。またスナップショットの機能を使っている場合はと直接スナップショットを引数で渡すことも可能です。このほか更新系にはUpdateMany というものも存在しますが、こちらは省略します。以下のクエリが実行されます。主キーによる削除が行われます。単純な条件指定の削除であれば、SQLを書かなくても可能です。以下のクエリが実行されます。linqのような感じでクエリを組み立てることができます。主キーによる検索を行います。SingleById は結果が存在しなければ例外をスローします。以下のクエリが実行されます。(２つとも同じ)複合主キーの場合はこのように使うそうです。（使ったことないです..）このメソッドを使うことで 単純な検索クエリであれば、クエリを書かなくとも検索することが可能です。以下のクエリが実行されます。ソートの操作はOrderBy, OrderByDescending, ThenBy, ThenByDescending で可能です。またLimit によるページング操作も可能です。終端操作は
- ToList
- Single
- SingleOrDefault
- First
- FirstOrDefaultなどが可能です。その他の操作はこちら今回は生のSQLを書かずに操作する方法について紹介しました。


