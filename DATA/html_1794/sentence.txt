More than 1 year has passed since last update.プログラマー初学の人へ61の質問
言語はC#（とC++）を前提に回答していきます。
ちなみに経験１年未満の新人です。どちらもメモリ領域に名前をつけたものです。
変数は再代入が可能。
定数は再代入が不可能。C++だと定数はさらにconstとconstexprに分けられます。
const : 初期化後に値を変更できない変数でRAMのみに配置されます
constexpr : コンパイル時にインライン展開される定数でRAMまたはROMに配置されます
ということでconstは厳密には変数だったりします。あとHaskellなんかは変数が存在しません。後から変更されないものはすべてできるだけ定数で宣言しましょう。
こうすることで値が変化しないことを明示できるので処理を追いやすくなります。
JavaSctiptではconstを積極的に使うみたいな話です。文法的には// コメントと/* コメント */で書けます。
でもマルチラインコメントの方はどこからどこまでがコメント行なのか見難いので忘れていいでしょう。どんなコメントを残すかは宗教戦争。基本方針はリーダブルコードとかに則って書きます。文法的には+-*/
これらは組み込み型へ定義された演算子です。自分で演算子をオーバーロードすることも可能です。また、式木を使うことで演算子を使わずに四則演算ができます。
以下は加算の例。ExpressionクラスにはAdd、Substract、Multiply、Divideメソッドが実装されています。ずるいという記法で書ける条件分岐の記法です。これと同じです。まずJavaの話になりますがint型 != Integer型です。値型とラッパーの参照型という違い。C系列にはないのでint32型とfloat型の違いとして進めます。どちらも値型でintは整数、floatは浮動小数点を格納できます。
確保するメモリサイズは実装次第だけどintが4バイト、floatが8バイト。そしてfloatは基本的に使わずdoubleを使います。大抵のハードウェアはfloatを演算するときに内部でdoubleにキャストしてから計算して後で戻しています。
組み込みの特殊な状況ではfloatを使うこともあるらしいです。
 --20/03/11 追記
AVX命令だとfloat演算はdoubleより数倍速くなるとか。
あとコンパイラが判断してfloatをdoubleに置き換える最適化を行うこともあるようです。
float型とdouble型
いずれにせよシビアなチューニングを行う場面でない限りdoubleを使ってよさそうです。if、switch、三項演算子、null演算子。関数型だとパターンマッチもあります。do-whileは忘れていいでしょう。C#だとLINQというコレクション（IEnumarable）の各要素に対して行うメソッド群があります。これもループ。そしてすべてのループは再帰関数のシンタックスシュガーです。&lt;型&gt;[要素数]またはList&lt;T&gt;。ArrayListは忘れていいでしょう。C#のListは片方向連結リストで実装されており、InsertやRemoveメソッドの計算量はO(N)です。つまり可変長配列です。
List&lt;T&gt; クラス
InsertやRemoveを多用する場合は双方向連結リストのLinkedList&lt;T&gt;を使用する方がパフォーマンスの向上が望めます。
LinkedList&lt;T&gt; クラスKeyValuePair&lt;TKey,TValue&gt;とそのコレクションであるDictionary&lt;TKey,TValue&gt;。C#もmapでいいのに。
Dictionary&lt;TKey,TValue&gt; クラスこれに継承だと:がついたりジェネリックだとWhereでTを指定したり増えていきます。むしろ使用しないデメリットを答えた方が早いというか、使わないとまともなプログラムを組めません。標準出力って結構な闇では？
標準入力・標準出力ってなに？Console.WriteLine("Hello")。まずC#のString型はimmutable。なので+などで結合した場合は新しい文字列オブジェクトが生成されます。そのうえでもしくはStringBuilderを使って違いはStringBuilderはmutableなこと。文字の検索（というか比較）はJavaとC#でちょっと違います。
str.equal("Hello")とstr == "Hello"の違い。
Javaは前者でC#はどっちでもいいです。普通は後者。これはC#の言語仕様でString同士の==がオーバーロードされているため。参照型同士の==比較はオブジェクト自体が同一かを判定します。アクセス修飾子を省略するとinternalになります。オブジェクトのインスタンスに対して定義された変数です。staticおじさんがやってくるぞ。
確保されるメモリ領域が異なります。クラス変数はスタックスタティック領域でインスタンス変数はヒープ領域。というよりヒープ領域にメモリを確保することがインスタンス化。そんなものはない。
あるのはスタック領域。-- 20/03/11 追記
スタック領域（自動記憶域）とスタティック領域（静的記憶域）は別物です。
プログラムの起動時から終了時まで一貫して割り当てられる領域をスタティック領域と呼びます。
グローバル変数やstaticローカル変数、staticクラスやstatic関数を使用すると割り当てられます。
記憶クラスとスコープこの人のブログはハードウェア周りについてだいぶ勉強になります。
ヒープとスタックC++のキャストは闇なので触れません。
C#はint -&gt; longなどデータの情報量が保証される場合は暗黙キャストが可能です。
その他の場合はキャストするメソッドを呼び出します。
int.Parse("1")typeofまたはis演算子。C# の is 演算子と typeof の型判定の挙動の違いちょっと何いってるかわからないですね。
引数の初期値設定ならint Sum(int x = 0, int y = 0)のような記法で可能です。オプション引数・名前付き引数クラスに対して、あるメソッドを実装することを約束するものです。ポリモーフィズムを用いて処理を各クラスに記述したいときなどに使います。具体クラスを継承することはデメリットが大きいです。
基本はインターフェース（抽象）に対して処理を行いましょう。
abstractクラスの継承はインスタンス変数を実装したいときに使います。Go言語なんかはクラスの継承がないですね。モダンな言語だとインターフェースの実装はあってもクラス継承はなくなってきています。this。superは親クラスを指します。
加えるとthisが指すのは自身のインスタンスです。ポリモーフィズムって書いてないとゾワゾワします。
ある要素が複数の型に属することを指します。あらかじめインターフェースを定義せずに多態性を利用するのがダックタイピングです。動的型付け言語の特徴のひとつですね。
ポリモーフィズムを利用する場合は事前にフィールドやメソッドの定義を行う必要があります。複数のデータや操作をひと塊として扱えるようになります。
情報の隠匿とかよりこれが重要です。アクセス修飾子。
カプセル化を実現するための仕組みのひとつで、要素へのアクセスレベルを制限します。
C#ではデフォルトでinternalです。Access Modifiers (C# Reference)値の組です。C#7からは無名タプルがサポートされました。
無名タプル
使うには.NET Framework 4.7以上が必要です。使えない場合はTuple型を使いましょう。
Tupleクラスカプセル化ができます。catch(Exception e)とかcatch{}とかはやめましょう。あとスタックトレースを消さないように気を付けましょう。Gitのこと。SVN？知らない子ですね。ファイルの変更履歴を管理できるシステムです。GitHubとGitBucketを使っています。スクリプト言語は簡単に読み書きできる言語の総称で、コンパイル型言語と比較するならインタプリタ型言語でしょう。あらかじめコンパイラを通して機械語のソースに変換しておくのがコンパイル型言語。
実行時にインタプリタを通して逐次翻訳していくのがインタプリタ型言語。コンパイル型は動作が高速、インタプリタ型は修正が比較的容易です。何かの定義に従って整理された情報の集合のことです。おそらく広くイメージするのはRDBMS。これは複数の属性をセットとして情報を扱う形式のデータベースです。SQL ServerとかMySQLとか。対してKey-Valueのセットで保存しテーブルを持たないNoSQLというものもあります。ただし全部がKVS方式ではないですが。一連の処理をひと塊として扱うことです。処理の単位をトランザクションといいます。
トランザクションの途中で処理に失敗したときに、その一処理だけでなくトランザクションごとロールバックされます。まず実行中のプログラムがプロセスです。プロセスは処理を行うために１個以上のスレッドを内部に持っています。このスレッドがCPUコアに対して命令を送って処理を行います。ということで、スレッドはプロセス内部の命令を実行する部分です。【図解】CPUのコアとスレッドとプロセスの違い・関係性、同時マルチスレッディング、コンテキストスイッチについて組み込み型と参照型のこと。言語仕様として実装しているのが組み込み型。でもStringは組み込み型だけど参照型だって？
値型と組み込み型を混同している説。値型の変数はスタック領域に確保されます。
参照型の変数はヒープ領域に確保されます。例えばintは値型の組み込み型で、Stringは参照型の組み込み型です。構造体は値型のユーザ定義型です。関数名を宣言をせずに使える関数です。ラムダ式は匿名関数です。
C#開発者が「ラムダ式が最初からあれば、匿名メソッド式の構文はC#には不要だった」といっているので、まあラムダ式が使えればいいんじゃないでしょうか。プログラムを扱うプログラムを書くこと。
あるいはコードを生成するコードを書くこと。DB情報を読み取って対応するDTOを自動生成するのなんかがこれなんでしょうか。null安全のお話ですね。
null安全でない言語は、もはやレガシー言語だC#8からnull安全が導入されました。機会があったら使ってみたいですね。クラス名やメソッド名といったメタデータをプログラム実行時に取り出すための機能です。
C#だとAttributeやprivateメソッドのテストなんかで関わってきます。実行時型情報ちなみに果てしなく遅いです。C#では拡張メソッドがあります。拡張メソッドC#ではできません。Javaだと@Overrideとか書きますね。
C#だとAttributeです。
Enum型に付けてメソッド拡張とかで使うこともできますが遅いのでやったことないです。属性まずDependency Injectionから。邦訳するとオブジェクトの注入で、要は移譲では？とか考えています。
ある処理をするためのインスタンスをフィールドに持っておき、処理を行うときはそのインスタンスを通じて実行します。これを実現するためのツール（あるいはフレームワーク）がDIコンテナです。参照されなくなったメモリ領域を解放するための仕組みです。
C++などはメモリを手動で管理していましたが、C#などではメモリの解放を自動で行います。C#ではマーク＆スイープ方式と３世代の世代別GCを行っています。C# のメモリ管理プログラマがメモリを意識することが減ります。
逆にいえばメモリを意識したチューニングをするときにはGCが邪魔になることがあります。Automatic Reference Counting、参照の自動追跡でGCの一種です。
インスタンスへの参照をカウントしておき、0になったらメモリを解放します。ARCARCでカウントする参照は強参照と呼ばれています。これに対してARCでカウントされない参照を弱参照と呼び、Weakを使って変数宣言して使います。強参照同士でインスタンスを結びつけるとメモリが解放されなくなるため、弱参照を使ってGCを行います。スタック領域はOSやコンパイラが割り当てと解放を行い、サイズはコンパイル時に定まります。
ヒープ領域はアプリケーションが割り当てと解放を行い、サイズは動的に指定します。おそらくアスペクト指向プログラミングのことでしょう。
オブジェクトとして分離できないLoggerなどをアスペクトとして扱い、アスペクト記述言語を使って分離することで柔軟なプログラムにすることです。AOP(Aspect Oriented Programming) の解説JavaScriptで出てくるやつ。C#でも使えます。methodがクロージャです。このときのint型変数xをレキシカル変数と呼びます。これはスコープの限定された静的な変数です。
incrementに代入した時点でmethodの変数xに100がバインドされ、その後incrementを呼び出すときはバインドされた変数を参照します。関数型の考え方に踏み込んでいくので、なかなか理解が難しい部分かもしれません。C# のクロージャと部分適用とカリー化関数を引数や戻り値とする関数のことです。
C#ではデリゲート型オブジェクトにメソッドを格納することができ、デリゲート型を引数や戻り値とすることで高階関数を実現しています。LINQも高階関数を使っています。C#での高階関数のすゝめRubyのdo-end構文のことらしいです。こんな感じで使いますね。具体的に何をやってるかはイマイチ分かりませんでした。Rubyをやっていてブロック処理(do 〜 end)がちゃんとわかってない人は、怒らないから見ていきなさいデリゲート型を使ってください。
Func&lt;&gt;が戻り値があるデリゲート型、Action&lt;&gt;が戻り値のないデリゲート型です。どちらもラムダ式の引数を減らすものです。
クロージャに対して仮引数を定めているものが部分適用、減らした後の引数が１個だけのものに対して行うのがカリー化です。つまりカリー化は部分適用の一種です。クロージャの項も参考にしてください。モナドは単なる自己関手の圏におけるモノイド対象です。何も問題ないですね。


