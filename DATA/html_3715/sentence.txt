More than 1 year has passed since last update.C#はラムダ式でコールバックを受け取ることができます。上記のコードと同等のコードを書いてみます。ラムダを使わず、もう少し詳しく書くとこのようになりました。呼び出し側のインスタンスメソッドがコンパイラによって自動生成されます。あるいは、インスタンス変数・メソッド・プロパティを一切使わなかったり、ローカル変数を使っていたりするとそのためのクラスが生成されたりします。実際にはラムダ式が&lt;Run&gt;b__2_0みたいな普通では書けない名前になったりといった違いはありますが、おおよそ同じです。コンパイラによって定義されたメソッドを元にデリゲートが作られて、それが引数として渡されます。複数のクラスが関わる場合にこの仕様が関わってきます。コールバックを保持しない場合はスコープの見た目通りの寿命でデストラクタが走ってますが、コールバックを保持すると保持されてる側(A)の寿命が保持してる側(B)の寿命まで伸びます。これはActionが内部でAの参照を持っているためです。このようにデリゲートを受け取って保持するクラスの寿命がデリゲートの作成元のクラスの寿命を引き伸ばしてしまうことがあります。普通にActionやFuncを使っていてこの仕様が問題になることはあまりないかと思いますが、WPFやWindows Formsなどのイベントハンドラでは気をつけたほうが良いかもしれません。


