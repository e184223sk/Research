More than 3 years have passed since last update.MCP試験 70-483 Programming in C# の学習材料。目次はこちらC#プログラムをデバッグするための前提知識。Visual StudioのC#プロジェクトではDebugとReleaseの2種類のビルドが用意されている。具体的な構成の違いは下記の通り。DebugビルドではDEBUG、TRACEの2つの定数が定義される。ReleaseビルドではTRACE定数のみが定義される。DEBUG定数とTRACE定数は主に下記の用途で使用される。Visual Studioではプロジェクトを右クリック ⇒ プロパティ ⇒ ビルド ⇒ 全般-「DEBUG定数の定義」「TRACE定数の定義」で設定されている。System.Diagnostics.Debug クラスと System.Diagnostics.Traceクラスには、Assert, Fail, Write, Indent, Unindent など、アプリケーションログやテスト(アサーション)に有用なメソッドやプロパティが用意されている。Debugクラスのメソッドは、DEBUG定数が定義されている（Debugビルドの既定）場合のみ実行される。Traceクラスのメソッドは、TRACE定数が定義されている（DebugビルドとReleaseビルドの既定）場合のみ実行される。このコードをDebugビルドとReleaseビルドで実行すると、Debugビルドで実行した場合の出力：Debug, Trace両方のメッセージが出力Releaseビルドで実行した場合の出力：Debugメッセージは出力されない※VisualStudioで実行する場合、Debug, Traceで出力したメッセージは出力ウィンドウの出力先：デバッグに表示される。出力ウィンドウがない場合は、メニューの デバッグ⇒ウィンドウ⇒出力 で表示できる。定数が定義されていないときにメソッドの呼び出しを無視するようコンパイラに指示するための属性。デバッグビルド時にだけ実行したいメソッドを作りたくなった時などに使う。DebugクラスとTraceクラスの各メソッドには ConditionalAttribute が付けられている。ifディレクティブはプリプロセッサディレクティブの一つで、ビルドで定義されている定数によってコンパイルするコードを切り変えることができる。ConditionalAttributeと似ているが、ifディレクティブはメソッド単位ではなくソースコードの任意の行の範囲に適用できる。Debugビルド(DEBUG, TRACE定数が定義)の時は次のコードとしてコンパイルされるReleaseビルド(TRACE定数が定義)の時は次のコードとしてコンパイルされるビルドにはDEBUG, TRACE以外の定数も使用できる。Visual Studioでは、プロジェクトを右クリック ⇒ プロパティ ⇒ ビルド ⇒ 全般-条件付きコンパイルシンボル に好きな定数を定義できる。プリプロセッサディレクティブには、#if以外にも #define, #warning, #error, #region, #pragma などがある。詳細は次のリンク先で。C# プリプロセッサ ディレクティブ#ifディレクティブとConditionalAttributeの違いについては次のページで解説されている。条件付きの呼び出し (ConditionalAttribute) - Programming/.NET Framework - 総武ソフトウェア推進所コードの最適化を有効にすると、コンパイラによって実行されないコードが除外されたりより効率の良い等価なコードに置き換えられたりする。既定ではDebugビルドでは最適化は無効化され、Releaseビルドでは最適化が有効化されている。/optimize (C# コンパイラ オプション)PDB(Program DataBase)ファイルは、ソースコードのステートメントとEXEファイルの実行命令を対応付けるファイルで、シンボルファイルとも言う。このPDBファイルがあると、アプリケーションがクラッシュしたときにどのソースコードファイルの何行目でエラーが発生したかなど、デバッグに有用な情報を得ることができる。PDBファイルがないときのスタックトレース：ソースコードファイルと行番号がわからなくてデバッグに困るPDBファイルがあるときのスタックトレース：ソースコードファイルと行番号がわかってデバッグが捗るちなみにPDBファイルにはソースコードのフルパスが埋め込まれている。なのでうっかりしてると↑のように開発者のユーザ名が漏れたりするので気を付けよう。といってもEXEファイルにもファイルパスは残るので、そもそもパスにユーザ名等が含まれない場所でビルドするのが良い。デバッグ情報のレベルを変えることもできる。既定ではDebugビルドではfull、Releaseビルドではpdb-onlyという設定になっている。Visual Studioでは、プロジェクトを右クリック ⇒ プロパティ ⇒ ビルド ⇒ 出力 ⇒ 詳細設定 ⇒ 「ビルドの詳細設定」 ⇒ 出力-デバッグ情報 で設定を変更できる。ビルドの種類とPDBファイルの有無で、スタックトレースにどのような違いが出るか？実施手順最適化の有効・無効ではどんな違うがでる？LINQPadで最適化の有効・無効を切り替えるには、メニュー ⇒ Edit ⇒ Preferences ⇒ Query ⇒ Query Optimization生成される IL は IL タブで見れるILをVisual Studioで見たい場合は Ildasm.exe (IL 逆アセンブラー) が使える。


