More than 1 year has passed since last update.こちらAmusement Creators Advent Calenderの14日目の記事です。みなさん、初めまして。Amusement CreatorsのGON(ごん)です。
普段は、2D横スクロールゲームを開発しております。(冬コミ間に合うか？？
今回は、ACACということで無い文章力を振り絞って書こうと思います。個人的にゲーム開発には、 システム/リソース/調整 の大きな要素があると思います。
で、ちょっとクオリティの高いゲームを目指すと必ず詰まるのが、リソースの管理、配置の調整では無いでしょうか。(そもそも素材なんてねぇよというのは今回は無しで)
そこで、「ツール開発することで一気にリソース管理・調整の効率をあげましょう!!」というのが今回のお話です。パッと思いつくだけ書いてみました。とてもすごいゲームエンジンです。
ACAC1日目で良い感じに説明してくれてますね。そちらを見ましょう。アドベントカレンダーの有効利用です()そして、Altseedは通常、初期化すると勝手にウィンドウを作ってくれるのですが、外部ウィンドウでAltseedの機能を使うこともできます。
そうすれば、既存のGUIフレームワークと組み合わせて、いろんなことができちゃうってわけですwktkざっとこんな感じです。Bindingマジ便利。
ただAltseedの画面を外部のウィンドウに表示するだけなら、Windows Formsを使った方が楽です。(HWNDに紐つけるため)
しかし、Bindingを使うことで、Altseed側とWPF側でのデータのやり取りが容易になるので、ツールを開発するならWPFが良いと思います。色々説明するより、実際に作ってみた方が早いので、以下そのレシピです。WPFのプロジェクトを作りましょう。

こんな感じにApp.xamlと最初に表示するウィンドウとなるMainWindow.xamlがあると思います。
そして、NuGetなりでAltseedを参照しましょう。通常、メインループはWPF側でよしなにしてくれるので、気にする必要はないのですが、毎フレーム更新処理を行うゲーム特有の性質もあり、メインループは、こちらで実装した方が良さそうです。ということで、エントリポイントとなっているApp.xamlを消去し、Program.csを追加しましょう。ほぼこことやっているとは、変わりません。
要は、ウィンドウが閉じられた時にメインループから抜け出すことと、WPF側のイベントを処理できることを満たしていれば良いです。WPFは、デザインを記述するXAML部分と挙動を記述するC#のソースコード部分に分かれます。ここで重要なのがWindowsFormsHostです。
Altseedの機能を外部ウィンドウで使いたい時、唯一必要なのがHWNDというWindowsAPIのウィンドウを管理するオブジェクトです。
Windows Formsの場合、このHWNDは各コントロールで個別に持っているのですが、WPFはウィンドウにつき一つです。
これが原因となって、WPFのみウィンドウではAltseedをウィンドウのある特定の領域のみに描画させることができません。
しかし、WPFとWindows Formsは相互連携機能を持っています。
つまり、Windows FromsからWPFを呼び出すこともその逆もできるってわけです。
今回は、WindowsFormsHostを使うことで、WPFのウィンドウの中にWindows Formsを召喚させます。そうすることで、ウィンドウの特定領域のみAltseedを適応できます。あと適当にTextBoxを配置しておきましょう。altseed.Child = new System.Windows.Forms.Control();でWindows FormsのコントロールのインスタンスをWindowsFormsHostに登録しておきます。そして、ウィンドウのイベントを処理するためにDoEvents() ExitFrames(object f)関数を作りましょう。
あまり中身は気にしなくて良いと思います。今回は、適当に文字を表示することにしました。
ということで、Program.csのメインループ直前に以下を追加ほぼサンプルそのままです。
正直なんでも良い。ここ重要!! です。って言っても2行加えるだけですが。
めっちゃ簡単。  まず、Program.csでさっき付け足した直後に以下を追加で、MainWindow.xamlのTextBox部分を書き換える。重要なのは、Text="{Binding Text, UpdateSourceTrigger=PropertyChanged}"です。
{Binding Path}でDataContextに登録したオブジェクトのPathプロパティをバインディングできます。
今回は、DataContextにasd.TextObject2Dのobjを代入し、TextBoxのTextプロパティを{Binding Text}とすることで、TextBoxのTextプロパティとobj.textを常に同期することができます。上の工程を一通りやるとこんな感じなると思います。
しっかりと、テキストボックスの内容がAltseed側に反映されてますね。
これを応用すれば、WPF側でデータを入力させてAltseed側で即時反映できます。
また、WPFのBindingには型チェックの機能があります。
例えば、バインディング先がint型だった場合、数値以外が入力されるとテキストボックスが赤くなります。
これで、データの誤入力が減ると思います。なくはないです。まあしょうがないです。まあ、大きな問題にはならないと思います。Altseed + WPFでツール開発(入門編) は、いかがだったでしょうか。
これで、簡単にAltseedが既存のGUIフレームワークと融合できることをわかってもらえたかと思います。また今回は、ツール開発の具体的な導入法をメインで紹介しました。
個人的には、次回以降？でもっと踏み込んだ内容が書けたら良いと思っています。
割とこの周辺技術、ネタには困らないので。ということで次回予告です。書けたら良いですね


