More than 3 years have passed since last update.Cocoa Bindingとは、MacOS独自の変更通知機構を使ったViewとModel/Controller層の同期機能です。Cocoa Binding使うことにより、多くの「Glue code(グルーコード)」を書くことなく、ModelとViewの値を同期させる方法を提供します。ただし、バインドする際、プロパティの型は基底にNSObjectを持たなければいけない制約があります。そんな強力なCocoa Bindingの使用方法について記載します。※本稿の開発環境は下記の通りです。ViewControllerにNameプロパティを作成し、これにTextFieldとバインディングしてみます。まずはMain.StoryBoardをXcodeで開き、ViewにTextField、Push Buttonを追加します。次にボタンを押したときに実行されるメソッドを作成します。Controlキーを押しながら、Push ButtonをViewController.mにドラッグ&amp;ドロップします。Nameに適当な名前をつけ(今回はShowMessageとする)、ConnectボタンをクリックするとActionが作成されます。作成後、ViewController.csにNameプロパティ、ボタンを押した際の処理を記載します。再び、Main.StoryBoardを開き、左上のインスペクタをバインディングインスペクタに切り替えます。Valueを展開し、Bind toにチェックを入れます。バインド先をViewControllerに変更し、Model Key PathでNameを指定します。Xcodeを終了し、アプリケーションを実行します。NSTextFieldのデフォルトでは、TextFieldからフォーカスが外れた時に変更通知が送られるため、TabやReturnキーが押されないと同期しません。文字列が変更されるたびに同期させたい場合はバインディングインスペクタで　Continuously Updates Valueにチェックを入れて実行します。次に自作クラスのオブジェクトをバインディングしてみます。Personというクラスを作成し、NSObjectを継承させ、Nameプロパティを追加します。ViewContoller内に上記のクラスのプロパティを追加します。Main.StoryBoardを開き、バインディングインスペクタに切り替えます。Valueを展開し、Model Key PathをPerson.Nameを指定します。Xcodeを終了し、アプリケーションを実行します。次は、TextFieldに入力されていない場合、Buttonを押せないようにします。PersonクラスにHasNameというプロパティを追加します。Main.StoryBoardを開き、Viewに配置したButtonを選択しバインディングインスペクタに切り替えます。Availabilityを展開し、Model Key PathでPerson.HasNameを指定します。Xcodeを終了し、アプリケーションを実行します。ViewControllerにLanguagesプロパティを作成し、これにComboBoxとバインディングしてみます。まずはMain.StoryBoardをXcodeで開き、ViewにComboBox、 Push Buttonを追加します。上記と同様に次にボタンを押したときに実行されるメソッドを作成します。作成後、ViewController.csにLanguagesプロパティ、選択された値を保持すSelectedLanguage、ボタンを押した際の処理を記載します。Main.StoryBoardを開き、バインディングインスペクタに切り替え、Content Valueを展開し、Bind toにチェックを入れます。バインド先をViewControllerに変更し、Model Key PathでLanguagesを指定します。次にValueを展開し、Bind toにチェックを入れます。バインド先をViewControllerに変更し、Model Key PathでSelectedLanguageを指定します。Xcodeを終了し、アプリケーションを実行します。次に自作クラスのオブジェクトをバインディングしてみます。Programmingというクラスを作成しLanguages、SelectedLanguageプロパティを追加します。TextField同様ProgrammingクラスはNSObjectを継承させます。TextField同様、ViewContoller内に上記のクラスのプロパティを追加します。上記同様、Main.StoryBoardを開き、バインディングインスペクタに切り替え、Content Valueを展開し、Bind toにチェックを入れます。バインド先をViewControllerに変更し、Model Key PathでProgramming.Languagesを指定します。次にValueを展開し、Bind toにチェックを入れます。バインド先をViewControllerに変更し、Model Key PathでProgramming.SelectedLanguageを指定します。Xcodeを終了し、アプリケーションを実行します。ViewControllerにLanguagesプロパティを作成し、これにPopUpButtonとバインディングしてみます。まずはMain.StoryBoardをXcodeで開き、ViewにPopUpButton、 Push Buttonを追加します。上記と同様に次にボタンを押したときに実行されるメソッドを作成します。作成後、ViewController.csにToDoプロパティ、選択された値を保持するSelectedToDo、ボタンを押した際の処理を記載します。Main.StoryBoardを開き、バインディングインスペクタに切り替え、Content Valueを展開し、Bind toにチェックを入れます。バインド先をViewControllerに変更し、Model Key PathをToDoを指定します。次にSelected Valueを展開し、Bind toにチェックを入れます。バインド先をViewControllerに変更し、Model Key PathでSelectedToDoを指定します。Xcodeを終了し、アプリケーションを実行します。次に自作クラスのオブジェクトをバインディングしてみます。ComboBoxと同様にPlanというクラスを作成ます。その後、ViewControllerにPlanプロパティを追加します(ソースコードはComboBoxとほぼ同様のため割愛します。)上記同様、Main.StoryBoardを開き、バインディングインスペクタに切り替え、Content Valueを展開し、Bind toにチェックを入れます。バインド先をViewControllerに変更し、Model Key PathをPlan.ToDoを指定します。次にSelected Valueを展開し、Bind toにチェックを入れます。バインド先をViewControllerに変更し、Model Key PathでPlan.SelectedToDoを指定します。Xcodeを終了し、アプリケーションを実行します。(実行結果は上記同様のため割愛させていただきます。)ViewControllerにPeopleプロパティを作成し、これにTableViewとバインディングしてみます。まずは、 NSObjectを継承した、PersonというModelを作成します。次に、ViewConrrollerにPersonオブジェクトを保持するリストのプロパティを作成します。こちらとバインドするため、NSObjectを継承した、可変配列であるNSMutableArrayを採用しました。また、PopUpButton、TextFieldとバインドするプロパティ、Input、AgeList、SelectedAgeも追加します。次に、Main.StoryBoardをXcodeで開き、ViewにNSTableView、SceneにArrayController、おまけで PopUpButton、 Push Buttonを追加します(今回はTableViewのカラム名をName、Ageとします)。上記同様、ボタンを押したときに実行されるメソッドを作成し(今回はAddPersonとします)、TextFiled、PopUpButtoのバインドを行います。次に、ArrayContollerをViewControllerに配置します。ArrayControllerをViewController.hにContorolキーを押しながらドラッグ&amp;ドロップします。Nameに適当な名前をつけ(今回はPersonArrayControllerとします)、ConnectボタンをクリックするとViewControllerに配置されます。次に、ArrayControllerを選択した状態で、Attributesの設定項目のObject Controllerを編集します。Class Name をPersonにし、KeysにNameとAgeを追加します。バインディングインスペクタに切り替え、Controller Contentを展開し、Bind toにチェックを入れます。バインド先をViewControllerに変更し、Model Key PathでPeopleを指定します。次に、TableViewを選択した状態で、バインディングインスペクタに切り替え、Table Contentを展開し、Bind toにチェックを入れます。バインド先をPerson Array Controllerに変更し、Controller KeyでarrangedPbjectsと指定します。次にNameとTable View Cellを選択した状態でバインディングインスペクタに切り替え、Valueを展開し、Bind toにチェックを入れます。バインド先をTable Cell Viewにし、Model Key PathでそれぞれarrangedPbjects.Nameと指定します。Ageも同様の作業を行います。最後に、AddPersonの処理を書きます。アプリケーションを実行します。強力とまで言われている、データバインディングがCocoaフレームワークに含まれています。MacOS独自の機構ではありますが、これを用いることで、より開発工数を削減できると思われます。Cocoa Bindingを使って素敵なXamarin.Macの開発を行ってみてはいかがでしょうか。


