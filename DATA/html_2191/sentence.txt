More than 1 year has passed since last update.本記事は ドメイン駆動設計#1 Advent Calendar 2019 18 日目の記事です。
元々私が参加登録していたわけではありませんが、空きが出ていたので、僭越ながら記事を書かせていただきます。最近 DDD が盛り上がっていますね。
私も数年前にエヴァンス本読んでちょくちょく勉強してたのですが、今年から色々カンファレンス行くようになって本格的に勉強始めました。
ということで、今回は個人的に DDD を練習してみた結果を書いてみたいと思います。
言語は普段使っている C# で書いています。練習しようと思ったきっかけは、「レガシーをぶっつぶせ。現場でDDD！ 」に参加した際に購入した「もくもくモデリングの森を旅するチビドラゴンの軌跡」という本です。
サンプルのお題として会議室予約が挙げられており、会社の人と勉強やろうと思って話してたら、会社で使ってる備品の予約とかどう？となって、まずは自分でやってみようと思ったところが始まりです。まずは要件を以下のような感じでまとめました。
最初なので、そんなに複雑にはしませんでした。上記の要件から、ドメインオブジェクトを抽出していき、結果としてこんな感じになりました。上記のように予約に備品を紐づけるか、備品に予約をぶら下げるか考えましたけど、予約が中心でしょ！という感じで前者にしました。笑上記のドメインモデルを実装していきます。まずは DLL を以下のように分けました。
アプリケーション層とドメイン層がインフラ層に依存しないように、依存関係を逆転させました。
各層の中身は以下のようになっています。内容を少しづつ紹介していこうと思います。ValueObject のコンストラクタで値のチェックをしています。Entity は各フィールドのプロパティを用意し、private な Setter の中で値のチェックを行います。値を変更するときは SetXXX のような名称ではなく、実際のドメインで使われている名前を付けたメソッドを用意して呼び出せるようにしています。（英語のセンスがなくて微妙かもしれないが。）予約リスト画面や予約詳細画面には、予約のアカウント名や備品名を表示したいが、Entity を利用としようとすると、予約Entity、アカウントEntity、備品Entity のデータを取得しなければならず効率が悪いため、QueryService を利用して SQL で結合した結果を取得するようにします。（SQL の実装自体はインフラ層で行う。）実装は、画面から入力されたデータを、ApplicationService、QueryService のメソッド引数の型に変換して、サービスのメソッドを呼び出す感じです。（投げやり）ということで、最後の方はだいぶ駆け足になりましたが、自分としてはなんとなく各レイヤーでどんな実装をすればよいか感触をつかめました。
モデリングがまだまだだなので、もう少し複雑なドメインを例にまたやってみようと思います。
あとは、Java、Spring を使ったサンプルも作っていきたいと思います。ソースコードは以下に公開しています。
https://github.com/TakashiOnawa/EquipmentReservation


