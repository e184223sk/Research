
public class Reservation : IEntity
{
    public Reservation(
        ReservationId id,
        AccountId accountId,
        EquipmentId equipmentId,
        ReservationDateTime reservationDateTime,
        PurposeOfUse purposeOfUse,
        ReservationStatus reservationStatus)
    {
        Id = id;
        AccountId = accountId;
        EquipmentId = equipmentId;
        ReservationDateTime = reservationDateTime;
        ReservationStatus = ReservationStatus.Reserved;
        PurposeOfUse = purposeOfUse;
        ReservationStatus = reservationStatus;
    }

    private ReservationId _id;
    public ReservationId Id
    {
        get { return _id; }
        private set
        {
            Assertion.ArgumentNotNull(value, nameof(Id));
            _id = value;
        }
    }

    private ReservationDateTime _reservationDateTime;
    public ReservationDateTime ReservationDateTime
    {
        get { return _reservationDateTime; }
        private set
        {
            Assertion.ArgumentNotNull(value, nameof(ReservationDateTime));
            _reservationDateTime = value;
        }
    }

    private PurposeOfUse _purposeOfUse;
    public PurposeOfUse PurposeOfUse
    {
        get { return _purposeOfUse; }
        private set
        {
            Assertion.ArgumentNotNull(value, nameof(PurposeOfUse));
            _purposeOfUse = value;
        }
    }

    ・
    ・
    ・

    public void ChangeReservationDateTime(ReservationDateTime reservationDateTime)
    {
        ReservationDateTime = reservationDateTime;
    }

    public void ChangePurposeOfUse(PurposeOfUse purposeOfUse)
    {
        PurposeOfUse = purposeOfUse;
    }

    public bool IsDupulicated(Reservation other)
    {
        Assertion.ArgumentNotNull(other, nameof(other));
        if (!EquipmentId.Equals(other.EquipmentId)) return false;
        if (!ReservationDateTime.IsRangeOverlapping(other.ReservationDateTime)) return false;
        return true;
    }
    // 以下省略
}

