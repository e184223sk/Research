
public class UnitOfWork : IUnitOfWork
{
    private readonly MyDbContext _dbContext;

    public UnitOfWork(MyDbContext dbContext)
    {
        _dbContext = dbContext ?? throw new ArgumentNullException(nameof(dbContext));
    }

    private IReservationRepository _reservationRepository;
    public IReservationRepository ReservationRepository
    {
        get
        {
            if (_reservationRepository == null) _reservationRepository = new ReservationRepository(_dbContext);
            return _reservationRepository;
        }
    }

    ・
    ・
    ・

    public void Begin()
    {
        _dbContext.Database.BeginTransaction();
    }

    public void Commit()
    {
        _dbContext.Database.CommitTransaction();
    }

    public void Rollback()
    {
        _dbContext.Database.RollbackTransaction();
    }

    private bool disposed = false;

    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
        if (disposed)
            return;

        if (disposing)
        {
            _dbContext.Dispose();
        }

        disposed = true;
    }
}

