前回、NUnitのStringAssertクラスのアサーションメソッドを一通り試したので
今回はCollectionAssertクラスのアサーションメソッドを一通り試してみる。.NET：3.1.401
C#：8.0
NUnit：3.12.0NUnitのClassicModelのアサーションクラスの1つ。
クラス名の通り、コレクション（IEnumerable実装クラス）を検査する。コレクションが保持する要素の型が全て同じかどうかを検査する。
第1引数のコレクションが保持する要素が、第2引数に指定した型か、指定した型のサブクラスのみであればテストOKと判定される。C#のコレクションは、保持する型をジェネリクスで指定するICollection&lt;T&gt;の実装クラスを使用するのが一般的なので
このアサーションを使用する機会はあまり無いだろう。コレクションが保持する要素の中にnullが含まれるかどうかを検査する。
コレクションが空の場合はテストOKとなる。コレクションが保持する要素が全てユニークなものかを検査する。
ユニーク性の判定はEqualsメソッドで判定しているようで、
下記コードの1番下の例のように、参照が異なっていても値として同じものが含まれていればテストNGとなる。AreEqualメソッドは、2つのコレクションが保持する要素が格納順序込みで同じものがどうかを検査する。
AreNotEqualメソッドは、その逆の判定を行う。下記コードの3つ目の例のように、保持する要素が同じでも、格納する順序が異なる場合、テストNGとなる。
順序を無視した検査をしたい場合は、AreEquivalentメソッドを使う。AreEquivalentメソッドは、2つのコレクションが保持する要素が同じものがどうかを検査する。
AreNotEquivalentメソッドは、その逆の判定を行う。AreEqualメソッドとは違い、格納順は異なっていてもテストOKとなる。Containsメソッドは、コレクションに指定した要素が含まれるかどうかを検査する。
DoesNotContainメソッドは、その逆の判定を行う。IsSubsetOfメソッドは、コレクションが部分的に一致するかどうかを検査する。
IsNotSubsetOfメソッドは、その逆の判定を行う。第1引数に部分一致させるコレクションを指定、
第2引数に全体となるコレクションを指定する。IsEmptyメソッドは、コレクションが空であることを検査する。
IsNotEmptyメソッドは、その逆の判定を行う。nullが入っていてもコレクション自体は空ではないのでテスト結果NGとなる。コレクションの順序を検査する。
引数にコレクションオブジェクトのみ指定した場合、自然順で要素が格納されていることを検査する。
検査する順序を指定したい場合は、下記コードの一番下の例のように、第2引数にIComparerインターフェースを実装したクラスのインスタンスを渡す。nullは自然順序的には最も小さい値という扱いらしい。また、型が混在している場合、ArgumentExceptionが発生する。
（ジェネリクスを使用していれば発生しないだろうが）ちなみにIComparer&lt;T&gt;インターフェースはIComparerインターフェースを継承していないので（なぜだろうか・・・）
IComparer&lt;T&gt;インターフェースを実装したクラスを第2引数に渡すことができない。
Comparer&lt;string&gt;クラスはその両方をimplementsしているので、ジェネリクスを使用して無用なキャストを避けたい場合は、Comparerクラスのサブクラスを用意する。NUnit公式：CollectionAssert


