More than 1 year has passed since last update.今度は分岐について書いてみたいと思います。分岐に関しては if 三項演算子 while switch 等が使えますが、自分が良く理解していない部分として、isの構文の書き方、null チェックの方法、合体演算子あたりがあやふやなので試してみたいと思います。switchはパターンマッチ機能強化が大きくあるので、次回以降に譲ります。‘例によって自分のためのブログなので、読みたい人は是非こちらのブログが最強なので、お読みください。本記事もほとんど参照しています。（自分のための学習ノートみたいなものです）
* is, switch の拡張（型スイッチ）変数の型がマッチする場合に、何か処理を行いたいときは次の書き方が可能です。具体的にはこんな感じで使います。型を調べたいとき、大抵はキャストなどを行いますが、クールな書き方はできるでしょうか？ ダウンキャストは推奨されていないので、通常は、as演算子を使います。ただ、Nullチェックは必要になります。C# 7 からは次の構文が使えます。知らんかった。カッコいい。新しく定義した変数から値をとることができます。ちなみに、null が来た場合は、false になります。だから、Nullじゃないときだけ実行したいときはこの方法が使えます。様々な書き方ができますが、各パターンで振る舞いが異なります。is はNullは許容しません。 varパターンでは、Nullを許容します。再帰パターン { } はNullを許容しません。ちなみに、varパターンと再帰パターンは、パターンマッチングの構文です。下記は var パターンの例で、Nullを含めてすべてのパターンにマッチしますが、マッチするときに、変数に値をアサインしてくれます。ちなみに、このマッチは、Deconstruct メソッドを利用して値を取得するようです。他に再帰パターンですが、まさにパターンマッチの構文です。{ } でマッチさせると、Nullは許容しません。このパターンは次のような例で使えます。かなり強力なパターンマッチですね。再帰パターンに関してはこのブログもいい感じです。C#8.0までに再帰パターンに馴染んでおく。かなりパターンマッチングは深い感じなので今回のブログではさっと触れるだけで次回以降に掘り下げていきます。下記のがおなじみですが、スペースでもTrueになるメソッドもあります。しかし大抵の場合は、合体演算子　?? を使うほうがオシャレ度が高くなります。Nullの場合だけデフォルト値が差し込めます。ちなみに、オブジェクトのメソッドを呼びたいとき、こんな書き方もできますね。Nullチェックのifがたくさんあるのは冗長なので、こちらの方がいい感じだと思います。


