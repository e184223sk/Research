
config.DependencyResolver = new MyResolver();

　　public class MyResolver : System.Web.Http.Dependencies.IDependencyResolver
    {
        public IDependencyScope BeginScope() =&gt; this;

        public void Dispose()
        {
        }

        public object GetService(Type serviceType)
        {
            if (typeof(IWebHookManager).Equals(serviceType))
            {
                IWebHookStore store = this.GetStore();
                IWebHookSender sender = this.GetSender();
                ILogger logger = this.GetLogger();
                IWebHookManager instance = new MyWebHookManager(store, sender, logger);

                return instance;
            }

            return null;
        }

        public IEnumerable&lt;object&gt; GetServices(Type serviceType) =&gt; Enumerable.Empty&lt;object&gt;();
    }

　　public class MyWebHookManager : WebHookManager
    {
        public MyWebHookManager(IWebHookStore webHookStore, IWebHookSender webHookSender, ILogger logger)
            : base(webHookStore, webHookSender, logger)
        {
        }

        protected override async Task VerifyEchoAsync(WebHook webHook) =&gt; await Task.FromResult&lt;object&gt;(null);
    }


