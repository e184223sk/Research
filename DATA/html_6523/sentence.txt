More than 1 year has passed since last update.Azure FunctionsからAzure Logic Appsへのトリガーの方法として要求(request)を用いた場合、Azure FunctionsからPOSTする際にそのLogic apps固有のURLを記述する必要がありました。
汎用性を高めるため自前でWebHook(WebAPI向け)を用意し、Azure Logic AppsのトリガーとしてHttp WebHookを使用できたので、実装の一例としてまとめます。
参考
https://docs.microsoft.com/ja-jp/azure/connectors/connectors-native-webhook#a-nameuse-the-webhook-triggerawebhook-トリガーの使用WebHookの登録/解除を行うためのURLとメソッドを指定します。
後述しますが、Microsoft.AspNet.WebHooks.Custom.Apiでは登録や解除をするためのURLは固定です。(api/webhooks/registrations)
サブスクライブの本文はwebhookを満たすjsonを指定します。
WebHookUriだけが必須です。"@listCallbackUrl()"はHttp WebhookのコールバックURLを示す記載です。
Idは指定しなければGuidが割り当てられますが解除の際にIDを指定する必要があるため、固定に設定しています。
以下、Webhook コネクタの概要からの引用サブスクライブ呼び出しは、ロジック アプリが新しい Webhook と共に保存されるか、無効から有効に切り替えられるたびに実行されます。 サブスクライブ解除呼び出しは、ロジック アプリの Webhook トリガーが削除されて保存されるか、有効から無効に切り替えられるたびに実行されます。なおapi/webhooks/registrationsはAuthorize属性が指定されているため、App Serviceの認可を受ける必要があります。今回は動作確認のために認可をごまかしているので、セキュアに設定する際にはヘッダーにトークンを指定するなどが必要かと思われます。ソースは以下に置きました。
githubhttp://qiita.com/soarflat/items/ed970f6dc59b2ab76169
http://kiyokura.hateblo.jp/entry/2015/12/01/000136ここから引用
この図が一番しっくりきました。仕組みは用意されているのでところどころ注入してあげる感じです。今回は入り口はWebApi、送信はコールバックURLにHTTP HOST、保存場所をAzure Storageにします。Microsoft.AspNet.WebHooks.Common
Microsoft.AspNet.WebHooks.Custom
Microsoft.AspNet.WebHooks.Custom.Api
Microsoft.AspNet.WebHooks.Custom.AzureStorageIWebHookStoreを継承したクラスが既に存在しています。
WebHooks.Custom.WebHookStore
WebHooks.Custom.MemoryWebHookStoreWebHooks.Custom.AzureStorage.AzureWebHookStoreWebHooks.Custom.SqlStorage.DbWebHookStore
WebHooks.Custom.SqlStorage.SqlWebHookStoreデフォルトはMemoryWebHookStoreでした。外部に格納せずコードに直接記載するならばこれを使用します。
AzureWebHookStoreはAzure Storageに特化したクラスでした。今回はこれを使用します。
Web.configに以下を追加する必要があります。connectionStringにはAzure Storageへの接続文字列を記載する必要があります。Azure ポータルから取得します。DbWebHookStoreやSqlWebHookStoreは今回あんまり調査していませんが、DbWebHookStoreは抽象クラスなので自分でDB連携を実装する際に継承するのかな、と思います。IWebHookSenderを継承したクラスが既に存在しています。
WebHooks.Custom.WebHookSender
WebHooks.Custom.DataFlowWebHookSenderWebHooks.Custom.AzureStorage.AzureWebHookSenderデフォルトはDataflowWebHookSenderでした。こちらを使います。
AzureWebHookSenderはAzure Storageに特化したクラスでした。Azure Storage Queueに送信する仕組みかも？IWebHookManagerを継承したクラスが既に存在しています。
WebHooks.Custom.WebHookManagerあんまり意識しませんでした。空のプロジェクトにOWINのStartupクラスを追加しました。Startup1は認可のごまかしです。いつものWebApiの初期設定が続きます。この部分はいくつか問題があったため、独自に実装しました。(後述)各メソッドはHttpConfigurationの拡張メソッドで各パッケージに実装されています。参考
https://blogs.msdn.microsoft.com/webdev/2015/09/15/sending-webhooks-with-asp-net-webhooks-preview/図には出てきませんでしたが、WebHookには通知先をフィルタリングするための仕組みが用意されていて、これを実装する必要があります。CustomServicesの通りIWebHookFilterProviderを継承していれば名前は何でも良さそうです。MyWebHookFilterProviderコメントにも書いてあるのですが、ワイルドカードが使えます。今回はフィルタリングする気がないのでワイルドカードだけ指定します。api/webhookに対してPOSTだけのメソッドを用意しました。引数として期待するオブジェクトは{ url: "https://~~~" }です。
Logic Appsに対して通知します。WebhookControllerNotifyAsyncはAPIControllerに対しての拡張メソッドです。
第一引数にアクションを指定します。IWebHookFilterProviderで指定したフィルターと関係あります。今回はワイルドカードです。
第二引数に通知したい内容を記載します。{ url: "https://~~~" }というjsonを期待します。他にNotifyAllAsyncもあります。違いはApiController.User(IPrincipal)で絞るかどうかだと思うんですけどIdで絞るのか役割(Role)で絞るのか、あんまり調査しませんでした。RESTな感じです。webhookを満たしている必要があります。必須項目はWebHookUriだけです。Logic Appsで設定されるコールバックURLをPOSTすると怒られました。WebHookという仕組みの元々の話なのかわかりませんが、登録するURLにたいしてechoというクエリを付与してGetメソッドを送信して正しく返ってくることを確認しているようです。(VerifyEchoAsync)
これを回避するためにはnoechoというクエリをURLにつけなさい、とのことなんですがLogic Appsで設定されるコールバックURLに付与すると認証エラーになってしまいます。
幸いVerifyEchoAsyncはvirtualだったので、WebHookManagerを継承してoverrideして回避することにしました。
WebHookManagerはSystem.Web.Http.Dependencies.IDependencyResolver.GetServiceメソッドから取得されていたので、
HttpConfigurationのDependencyResolverを独自に設定し、IWebHookManager取得時だけ独自のWebHookManagerを与えることにしました。いろいろPOSTしているとIdだけが設定できませんでした。調査したところ、IWebHookIdValidatorなる仕組みがあり、デフォルトではIdをnullに上書きされていました。
HTTP Webhookでのサブスクライブ解除のために固有のIDが必要だったため、初期設定にて上書きしました。デフォルトで用意されている仕組みに乗っかると簡単に実装できました。
DBや送信方法をカスタマイズする場合にもインターフェースに乗っかって実装すれば良いので迷うことは少なそうです。
SenderやStoreを差し替える場合にはWebHooks.Custom.CustomServicesのSetStoreやSetSenderを使用します。MVCのほうにもMicrosoft.AspNet.WebHooks.Custom.Mvcが用意されているので助かります。


