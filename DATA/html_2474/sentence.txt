More than 1 year has passed since last update.今回は、公式チュートリアルのデータベースと ASP.NET Core を使用するをやっていこうと思います。Startup.cs の ConfigureServices メソッドを見てみます。最初に実施したスキャフォールディングの操作で、ConfigureServices メソッドに以下の行が追加されています。このコードにより、データベースコンテキストとして、RazorPagesMovieContext がアプリに組み込まれます。
ここでは、オプションでSQLiteを利用することを指定しています。Configuration.GetConnectionString("MovieContext") で接続文字列を構成ファイル(appsettings.json)から取得しています。これらのコードによって、RazorPagesMovieContextのインスタンスをランタイムが生成してくれます。
自身でインスタンスを生成する必要はありません。各Pageモデルでは、コンストラクタの引数で、このインスタンスを受け取ることができます。例えば、Index.cshtml.csだと、以下のコードのように、コンストラクタで、RazorPagesMovieContextのインスタンスを受け取っています。チュートリアルのページによると、テストサーバーまたは運用サーバーにデプロイされると、環境変数を使用して接続文字列を実際のデータベース サーバーに設定できます。とのことです。この辺りは、ASP.NET MVC5とは異なりますね。
具体的にどうやるのか調べたいところですが、前回、前々回のように脇道にそれていると、なかなか進まないので、必要になった時に、このあたりも調べようと思います。初期データをインサートする処理を作成します。そのため、Modelsフォルダに、SeedDataという名前のクラスを新規作成します。SeedDataクラスのコードは以下のとおりです。ここは、自前でDbContextのインスタンスを生成しています。これで、初期データをMoviesテーブルに挿入するクラスができました。テーブルが空でないなら何も行いません。Program.cs で、次のように Main メソッドを変更します。では、動作するか確認してみます。もし、データを登録してあったならば、https://localhost:5001/Movies ページに遷移し、Deleteリンクをクリックして、テーブル内のすべての行を削除してください。それから、プログラムを停止し、再度アプリを起動します。これで、SeedData.Initializeメソッドが呼び出されて、初期データが挿入されるはずです。想定通り、SeedDataで挿入した初期データが表示されました。最後に、appsettings.jsonをのぞいてみます。チュートリアルのappsettings.json を以下に示します。"ConnectionStrings": が接続文字列を設定している個所です。アプリ独自の設定も このファイルに書くことになるんでしょうね。ASP.NET MVC のweb.configの標準だと、などと、設定情報を書いていたわけですが、json形式なので、柔軟性がかなり高くなっていそうです。どうやってアプリケーション独自の設定値を読み込むのかは、また後で調べようと思います。


