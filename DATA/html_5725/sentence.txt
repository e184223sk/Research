More than 1 year has passed since last update.賛否あるかもしれませんが、
特別な理由がない場合配列やList&lt;T&gt;をメソッドの引数にとってはいけません。じゃあ何をとるのかといえばIEnumerable&lt;T&gt;が大体の場合の正解です。以下でその理由を書いていきます。今回はこの2つのメソッドを見ていきましょう。※型がstringなのは説明用です。配列版とIEnumerable版を見比べてみます。配列版とIEnumerable版どちらもstringの配列を引数にして呼び出すことはできます。
でも、配列版ではList&lt;string&gt;を引数にして呼び出すことができません。つまり、IEnumerable版のほうが受けられる型が多いわけです。更にLINQとの連携を考えましょう。
LINQは基本的にはIEnumerable&lt;T&gt;を戻り値にします。
つまり配列版はもちろんそのままでは呼び出すことができません。
どうしてもやりたいならばToArray()で配列化する必要があります。ここまでで、すでに配列特有の機能例えばランダムアクセスが必要であるとか、そういう理由がなければIEnumerableで引数を宣言したほうが良いことがわかります。より一般化すると、同じ機能でもできるだけ使える範囲を広げておいたほうが便利なわけです。配列というのはもちろんランダムアクセスも可能ですし、もちろん値を入れ替えることができます。
IEnumerableは基本的に（つまりキャストしたりしなければ）値を入れ替えることができません。ということは、配列版では（もしたとえそうでなくても）使う側としてはもしかしたら配列の中身を書き換えられてしまうかもしれないと思うわけですね。ということは書き換えられたくないような配列を安全に使うには毎回ToArrayをしてコピーする必要が出てきますね。より一般化すると、より抽象度の高い型で宣言しておいたほうが、メソッド内でできることが少なくなるので使う側としては安心になるわけです。基本的には、引数はできるだけ抽象度の高い型を指定しておく方がよいと思います。ランダムアクセスやらなんやら他の機能が必要になったとかそうなって初めて引数に配列を入れることを検討しましょう。コメントでそれぞれの型について色々書いてくださってます。因みに、Listは次のinterfaceを実装しています。この中から必要最低限のinterfaceで宣言できるといいと思います。（個人的にはやっぱりIEnumerable推しです。）


