
public static void Main(string[] args)
{
    // 初期化
    var numbers = new Numbers();

    // Numbersインスタンスからランダムで6個の数値を取得(昇順ソート)
    var balls = numbers.GetBalls(6).OrderBy(i =&gt; i).ToArray();

    // 選択された数値をスペース区切りで出力する
    Console.WriteLine(string.Join(" ", balls.Select(i =&gt; i.ToString("00"))));
}

/// &lt;summary&gt;
/// 出力数値管理クラス
/// &lt;/summary&gt;
private class Numbers
{
    /// &lt;summary&gt;
    /// 管理対象の数値リスト
    /// &lt;/summary&gt;
    private readonly List&lt;int&gt; balls;
    /// &lt;summary&gt;
    /// 乱数ジェネレータ
    /// &lt;/summary&gt;
    private readonly Random rands;

    /// &lt;summary&gt;
    /// コンストラクタ
    /// &lt;/summary&gt;
    public Numbers()
    {
        // リストを初期化し 1 ～ 43 を格納する
        this.balls = Enumerable.Range(1, 43).ToList();

        // 乱数ジェネレータの初期化
        this.rands = new Random((int)DateTime.Now.Ticks);
    }

    /// &lt;summary&gt;
    /// 管理されている数値の1つをランダムで取り出す
    /// &lt;/summary&gt;
    public int Ball =&gt; this.GetBall();

    /// &lt;summary&gt;
    /// 管理されている数値の1つをランダムで取り出す
    /// &lt;/summary&gt;
    /// &lt;returns&gt;数値&lt;/returns&gt;
    public int GetBall()
    {
        // 数値を取り出す(リストから除外)
        int takeout(int i)
        {
            var value = this.balls[i];
            this.balls.RemoveAt(i);
            return value;
        }

        // 取得するリスト要素のインデックス値を乱数で作成
        var index = this.rands.Next(this.balls.Count);

        // リストから数値を取り出して返す
        return takeout(index);
    }

    /// &lt;summary&gt;
    /// 管理されている数値をランダムで指定した個数だけ取り出す
    /// &lt;/summary&gt;
    /// &lt;returns&gt;数値&lt;/returns&gt;
    public IEnumerable&lt;int&gt; GetBalls(int count)
    {
        foreach (var _ in Enumerable.Range(0, count))
        {
            yield return this.Ball;
        }
    }
}

