
public static void Main(string[] args)
{
    // 引数チェック
    if (!Validate(args))
    {
        return;
    }

    // 引数をパラメータ化
    var param = ToParam(args);

    // 月ごとの支払額
    var monthlyPayment = param.MonthlyPayment;
    // 支払総額
    var totalPayment = monthlyPayment * param.Periods * 12;

    Console.WriteLine($"支払総額       : {totalPayment,13:#,0}");
    Console.WriteLine($"月ごとの支払額 : {monthlyPayment,13:#,0}");
}

/// &lt;summary&gt;
/// 実行引数のバリデーションを行う
/// &lt;/summary&gt;
/// &lt;param name="args"&gt;実行引数&lt;/param&gt;
/// &lt;returns&gt;問題が無い場合、True&lt;/returns&gt;
private static bool Validate(string[] args)
{
    // 引数が 3個 でない
    if (args.Length != 3)
    {
        Console.WriteLine("引数に 元金 年数 年利率(%) を指定してください。");
        return false;
    }

    // 元金 が 整数に変換できない または 負数
    if (!int.TryParse(args[0], out var principal) || principal &lt;= 0)
    {
        Console.WriteLine("元金 は 正の整数 で入力してください。");
        return false;
    }

    // 年数 が 整数に変換できない または 負数
    if (!int.TryParse(args[1], out var periods) || periods &lt;= 0)
    {
        Console.WriteLine("年数 は 正の整数 で入力してください。");
        return false;
    }

    // 年利率 が 数値に変換できない または 負数
    if (!decimal.TryParse(args[2], out var rate) || rate &lt;= decimal.Zero)
    {
        Console.WriteLine("年利率 は 正の数値 で入力してください。");
        return false;
    }

    return true;
}

/// &lt;summary&gt;
/// 実行引数をパラメータに変換する
/// &lt;/summary&gt;
/// &lt;param name="args"&gt;実行引数&lt;/param&gt;
/// &lt;returns&gt;パラメータ&lt;/returns&gt;
private static Param ToParam(string[] args)
{
    return new Param()
    {
        Principal = Math.Floor(decimal.Parse(args[0])),
        Periods = int.Parse(args[1]),
        Rate = Math.Round(decimal.Parse(args[2]), 2, MidpointRounding.ToEven)
    };
}

/// &lt;summary&gt;
/// パラメータ管理クラス
/// &lt;/summary&gt;
private class Param
{
    /// &lt;summary&gt;
    /// 元金
    /// &lt;/summary&gt;
    public decimal Principal { get; set; }
    /// &lt;summary&gt;
    /// 年数
    /// &lt;/summary&gt;
    public int Periods { get; set; }
    /// &lt;summary&gt;
    /// 年利率
    /// &lt;/summary&gt;
    public decimal Rate { get; set; }

    /// &lt;summary&gt;
    /// 月ごとの支払額
    /// &lt;/summary&gt;
    public decimal MonthlyPayment =&gt; this.CalcMonthlyPayment();

    /// &lt;summary&gt;
    /// 元金、年数、年利率 を元に 月ごとの支払額 を複利で計算する
    /// &lt;/summary&gt;
    /// &lt;returns&gt;月ごとの支払額&lt;/returns&gt;
    private decimal CalcMonthlyPayment()
    {
        // 支払額
        var payment = this.Principal;

        // 年数分だけ 支払額 に 年利 を加算
        foreach (var _ in Enumerable.Range(0, this.Periods))
        {
            payment += Math.Round(payment * this.Rate / 100m, 0, MidpointRounding.ToEven);
        }

        // 月ごとの支払額 を算出
        return Math.Round(payment / this.Periods / 12m, 0, MidpointRounding.ToEven);
    }
}

