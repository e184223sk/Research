
using System;
using System.Collections.Generic;
using System.Data.SqlClient; 

namespace BulkInsertApp
{
    public class MSSqlManager
    {
        private SqlConnection sqlConnection;
        private SqlTransaction sqlTransaction;

        /// &lt;summary&gt;
        /// 接続文字列生成
        /// &lt;/summary&gt;
        /// &lt;returns&gt;接続文字列&lt;/returns&gt;
        private string GetConnectionString()
        {
            string connectionString = null;
            string userId = "&lt;SQL認証のユーザ名&gt;";
            string password = "&lt;SQL認証のパスワード&gt;";
            string dbname = "&lt;DB名&gt;";
            string dbpath = "&lt;DBサーバアドレス&gt;";

            connectionString =
                    "Persist Security Info=False;"
                    + "User ID = " + userId
                    + "; Password = " + password
                    + "; Initial Catalog = " + dbname
                    + "; Data Source = " + dbpath;
            }
            return connectionString;
        }

        public MSSqlManager()
        {
            try
            {
                string connectString = GetConnectionString();
                this.sqlConnection = new SqlConnection(connectString);
                this.sqlConnection.Open();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                throw;
            }
        }

        public void Close()
        {
            try
            {
                this.sqlConnection.Close();
                this.sqlConnection.Dispose();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                throw;
            }
        }

        public void BeginTran()
        {
            try
            {
                this.sqlTransaction = this.sqlConnection.BeginTransaction();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                throw;
            }
        }

        public void CommitTran()
        {
            try
            {
                if (this.sqlTransaction.Connection != null)
                {
                    this.sqlTransaction.Commit();
                    this.sqlTransaction.Dispose();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                throw;
            }
        }

        public void RollBack()
        {
            try
            {
                if (this.sqlTransaction.Connection != null)
                {
                    this.sqlTransaction.Rollback();
                    this.sqlTransaction.Dispose();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                throw;
            }
        }

        public void ExecuteInsert(string query, Dictionary&lt;string, Object&gt; paramDict)
        {
            SqlCommand sqlCom = new SqlCommand();
            try
            {
                //クエリー送信先、トランザクションの指定
                sqlCom.Connection = this.sqlConnection;
                sqlCom.Transaction = this.sqlTransaction;

                sqlCom.CommandText = query;
                foreach (KeyValuePair&lt;string, Object&gt; item in paramDict)
                {
                    sqlCom.Parameters.Add(new SqlParameter(item.Key, item.Value));
                }
                // SQLを実行
                sqlCom.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                throw;
            }
        }

        public void ExecuteQuery(string query)
        {
            try
            {
                SqlCommand sqlCom = new SqlCommand();

                sqlCom.Connection = this.sqlConnection;
                sqlCom.Transaction = this.sqlTransaction;
                sqlCom.CommandText = query;
                sqlCom.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                throw;
            }
        }       
    }
}

