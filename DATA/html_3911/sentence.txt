More than 1 year has passed since last update.gRPCを用いた.NET/Unity間のリアルタイム通信ライブラリです
- https://github.com/Cysharp/MagicOnionREADMEでは、Windows上で動かすことを前提に書かれていたりしますが、
Linux/Macでも問題なく動作します。
(Install-Package コマンドなどが記載されているので)今回はUnityは一切使用しません
MagicOnionとはどういうものかをREADMEに沿って検証するのみとなっていますREADMEに沿って、サーバー/クライアントのコードを動かしてみますサーバー側/クライアント側の両方のConsoleプロジェクトを作成しますこれで準備完了ですhttps://github.com/Cysharp/MagicOnion#quick-start
こちらに記載されている、サーバー側プログラムをそのままコピーします
(Program.csとMyFirstService.cs)軽く動作検証するだけですので、ちょっとだけコードを変更し以下のようにします
また、クラアント側には MyFirstService の実態は不要でインターフェースを定義したファイルだけあれば良いです
(後述しますが、これがIDLとなります)手を加えた箇所は以下のところです
本来はasyncで非同期実行するところですが、GetAwaiter().GetResult() と書くと同期的に処理が終わるまで待機してくれます
(メインスレッドが固まるのでリリース開発版などでの利用はおすすめしません...)まず、サーバー側プログラムを動かします。
単純な検証ですので dotnet run コマンドで実行するだけですサーバーが待機状態で起動しますサーバーからのレスポンスを受けることが確認できます
また、サーバー側のログにも以下のように表示され、リクエストを処理できたことが確認できます

D0204 17:52:40.951573 Received:100, 200
特に苦労することもなくあっさり動いてくれました通信仕様を共有するために、中間言語で書かれたIDLだったり、SwaggerなどでのAPI仕様を共有することが多いですが、MagicOnionでは、C#のインターフェースファイルをクライアントに渡すだけでサクッと通信ができます当たり前ですがすべてC#縛り...コンパイル時に、という警告が出ますが、無視で。作者のサイトでも公式に言及されています
(Generalized async return types (Task-like) は別途勉強しておかないと...)
http://neue.cc/2017/04/06_551.html最近は、BlazorというWebのフロントエンドをC#で書けるものも出てきているので、
MagicOnionはUnity以外でも用途は色々とあるのではとちょっと思いました
https://blazor.net/


