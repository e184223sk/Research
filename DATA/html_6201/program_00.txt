    public static class Derangement {
        // 攪乱順列（完全順列ともいう）を列挙する
        public static IEnumerable&lt;T[]&gt; Enumerate&lt;T&gt;(IEnumerable&lt;T&gt; items) {
            var original = items.ToArray();
            foreach (var element in Permutation.Enumerate(items, items.Count(), false)) {
                bool isComplete = element.Zip(original, (a, b) =&gt; a.Equals(b))
                                         .All(x =&gt; x == false);
                if (isComplete)
                    yield return element;
            }
        }
    }

    public static class Permutation {
        public static IEnumerable&lt;T[]&gt; Enumerate&lt;T&gt;(IEnumerable&lt;T&gt; items, int k, bool withRepetition) {
            if (k == 1) {
                foreach (var item in items) {
                    yield return new T[] { item };
                }
                yield break;
            }
            foreach (var item in items) {
                var leftside = new T[] { item };
                var unused = withRepetition ? items : items.Except(leftside);
                foreach (var rightside in Enumerate(unused, k - 1, withRepetition)) {
                    yield return leftside.Concat(rightside).ToArray();
                }
            }
        }
    }

