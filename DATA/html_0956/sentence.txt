More than 1 year has passed since last update.C#（ASP.Net Core） で dotnet-cli を使用して WebAPIを構築してみます。プロジェクトを新規に作成します。
以下のコマンドでプロジェクトの種類を検索してみます。今回作成したい WebAPIのプロジェクトは　WebAPIということが分かりましたので、以下のコマンドでプロジェクトを作成します。wb.sqlte という SQLite のファイルを元にスキャフォールディングしましたので、以降の内容はプロジェクトフォルダに wb.sqlte というファイルがある前提で記述しています。以下のコマンドでインストーるします。
グローバルにインストールします。既にインストールしている場合は以下のコマンドで最新にします。でという表示がされれば成功です。以下のコマンドでインストールします。既にインストールしている場合は以下のコマンドで最新にします。以下のコマンドでそれぞれインストールします。Microsoft.EntityframeworkCore.Design
この後出てくる dotnet ef コマンドでデータベースからモデルを作成する際に使用します。Microsoft.EntityframeworkCore.Sqlite
今回のプログラムはデータベースにSQLiteを使用します。
他のDBMSを使用する場合はDBMSに合ったパッケージに変更するだけです。Microsoft.VisualStudio.Web.CodeGeneration.Design
この後出てくる dotnet aspnet-codegenerator コマンドでモデルからコントローラーを作成する際に使用します。dotnet add package Microsoft.EntityFrameworkCore.SqlServer
正直なぜ必要なのか分かりませんが、無いと dotnet aspnet-codegenerator コマンドでエラーになったため、インストールしました。以下のコマンドを実行します。-o オプションは出力ディレクトリを指定します。以下のコマンドを実行します。-name コントローラーの名前
-async async
-api api
-m Wb モデルクラス
-dc DBコンテキスト
-outDir 出力ディレクトリStartup.cs の ConfigureServices メソッドに以下を追記します。launchSettings.json の　launchUrl　を今回作成した COntrollerにルーティングされるよう修正します。
具体的には launchUrl の部分です。以上で終了です。
実行するとブラウザで　WebAPI より取得した json が表示されると思います。デバッグ時に出てくる問題について、よく「なんだっけ」ってなってなるので追記します。
あくまでデバッグ時の問題なので運用時にはやっちゃだめです。デフォルトでは Startup.cs でHTTPアクセスしてもHTTPSにリダイレクトされるよう構成されています。
自己証明書を使った暗号化になり、ブラウザによってはエラーになったりするのでHTTPSリダイレクトを削除します。WEBAPIで実装するということはフロントエンドはJavaScriptフレームワークであったり、なにか別のサービスからのアクセスである場合が想定されます。
私の場合、フロントエンドはvue-cliを使ってVue.jsで作成しました。
するとVueで作成したサイトはtcp8080、Webapiはtcp5000とかになったりします。
（一緒にDotNet側のプロジェクトに構成すればいいわけですが、あとでサーバーレスなどで使用することも想定して別で構成したいわけです。）
すると、ポートが違うことによりクロスオリジンになってしまうわけです。
この問題を解決するために Startup.cs を編集します。
注意:以下の実装はどのドメインからでもアクセスできてしまうので運用時には実装しないでください。
参考:ASP.NET Core でのクロスオリジン要求 (CORS) を有効にする今回使用したコマンドをまとめておきます。


