More than 1 year has passed since last update.某有名QAサイトでたまたま見かけたをみて、面白そうだから計算してみた。
「37の95乗を323で除算したあまりを計算する」という話。
やっていたらいろいろ思っていた以上に面白かった。
具体的にはVisual Studio抜きでC#を計算するfor文作って計算したという話。
最後はちょっとだけ整数に関する話。※追記※
皆さんコメントありがと~です。
いったん追記した時に評価を保留した式と、その後にもらったコメントについて、
別記事書くことにしました。
深堀してみたらそれぞれ面白いかったので。少し前にPythonで1000乗とか計算してて、「for文書いて1000回回しちゃダメ!」って書いてあった。
要するに、|log2(n)|回くらいの計算で行けるでしょ、という話。
だったらこれも7回ループすれば行けるよね、とおもっって、作ってみた。95って、2進数だと1011111。
リトルエンディアンとして下のビットから数える。
1回目、2回目、3回目、4回目、5回目、7回目にそれまでに用意した数で得処理して、扱えば行ける・・・かな?
やってみよう、と。Visual Studioなしでコンパイルできるよ。
方法は例によってこれ参照で。■C#手遊び(Compiler w/o Visual Studio)
https://qiita.com/siinai/items/8a325ad4eade1a2f6e9e書いてみたらあっさりいったのでソース全文を。
リアルに「処理」している本文は10行程度。。。全部整数で処理したかったのでSystem.Math.Pow()を使用した。
ただ、戻り値型がdoubleでcastが必要で、何度も何度も出てくるので、いちいちcastするのがめんどくなった。
というわけでラムダ式。ちょっと前から書き始めてみたけど、慣れると面白い。
こういう手遊びでちょこちょこ入れていくと、自分の中にしみこんできている気がするわ。検算にはPythonを使った。冒頭にC#で実質10行でできた、みたいなことを書いたけど、Pythonすごい。10行どころか、10文字。身もふたもない。。。おかげで検算は助かる助かる。■C#の出力■Pythonの出力最後の検算、9343を何乗かして38424で割るパターン。
入力ミスで、13953乗ではなく、133953乗で計算してた。でも答えがあってた。
ちょっと計算してみたら、800乗単位であまりが1でループするみたい。・・・なるほど。確かに最初、書きかけのコードが5ループ目で間違って抜けてしまっていて、37^95ではなく、37^15を計算してたけど、答えはあってたんだよね・・・
出題としてはどうだろうと思ったけど、除余を求めるという性質からすると仕方のないこと、かしら?ちょっとだけC#やPython書きなれたよね、ということ込みでおもしろかった。
次はlambdaとかクラス継承とかのキャッチ-(?)な話題書きたいな。2種類コメントもらったのでそれぞれを追記します。・・・はい。そうですね。
端折ったというか、深く考えてなかったというか・・・
3333^3333 を12345で割った余りを一瞬で返してくれるのでそこまでよくしようと思ってませんでした。
elseでbreak書く感じですよね。
書き足しました。
実行結果はこんな感じ。7回?6回?うーん・・・まあ、いいか。よく考えたら、itrの制限が32bit数値の制限にかかるから30くらいでよかったね・・・そこは大丈夫だと思う。
各イテレーションでもらった数と、ストックしている数とかけて、それを割った余りを保持して処理しているから。
こんな。[1回目]
37*37 % 323 = 1369 % 323 = 77
[2回目]
77*77 % 323 = 5929 % 323 = 115
[3回目]
115*115 % 323 = 13225 % 323 = 305
...なので現れる数は上の例だと 322^2 以下の数しか現れないかな、と。
ホントは、最初の変数保持で、32bit変数の上限のルート(2^7.5くらい?)とかを判断して制限しようかと思ったけど、主目的以外のコードが増えて本題が薄くなるので見送ってしまいました。
(わかりづらかったですね。すみません。)こっちも大丈夫だと思う。
前に、こんなの書いた。
その時、20!を計算して19桁の数だって言ってた。
その時どこまで行くのかと思って数増やしてみたら998!まで計算して999!でエラーになった。
再帰ロジックのiterationの数の制限らしく、どこかにここ変えたら外せるよって書いてあったけど・・・そこまでは試してない。
それとは別に、(998!)^2とか、(998!)^5とか・・・
結局普通に(998!)^100を計算させたら何画面分もの大量の数字を出してた。
すごいね。ここまできたら普通にグラハム数を計算できるんじゃないって気がしてきた。(いや、さすがに嘘ですが)念のため、改めて100!を計算してみた。
末尾に0が24個あるから正しく計算している必要条件を満たすのであってるかな・・・と。
(1~100に5の倍数が20個、25の倍数が4個あるのでプラス4個で24個0が並ぶはず。)■C#手遊び(フォームメニューを再帰ロジックで作る)
https://qiita.com/siinai/items/d2801021d28f77692cbcとはいえお二人ともコメントありがとうございます。
あとで、を試してみます！
(正直、出てくるキーワード、全部知らない。。。)


