
//インデクサの部分
//aaa[start,end]と書けるようにaaa[start:end]の代わり
public PyList&lt;T&gt; this[int start, int end]
{
    get
    {
        start = this.CalcIndexSafe(start);
        end = this.CalcIndexSafe(end);

        if (start &lt; end)
            return new PyList&lt;T&gt;(this.list.Skip(start).Take(end - start + 1));
        else
            return PyList&lt;T&gt;.Empty();
    }
    set{省略下記参照}
}

//クラスの外にenumを定義
//aaa[:1]の表現の代替としてaaa[ListIndex.Empty,1]と書くようのもの
public enum ListIndex { Empty }

//aaa[:1]の表現の代替としてaaa[ListIndex.Empty,1]と書くようのもの
public PyList&lt;T&gt; this[ListIndex start, int end]
{
    get { return new PyList&lt;T&gt;(this.list.Take(this.CalcIndexSafe(end))); }
    set { this[0, end] = value; }
}

//aaa[1:]の表現の代替としてaaa[1,ListIndex.Empty]と書くようのもの
public PyList&lt;T&gt; this[int start, ListIndex end]
{
    get { return new PyList&lt;T&gt;(this.list.Skip(this.CalcIndexSafe(start))); }
    set { this[start, this.list.Count] = value; }
}

//インデックスを計算する関数
//↑のCalcIndexSafeと違い例外を出さないようにしている
//理由はpythonだとそうだったから
private int CalcIndexSafe(int index)
{
     if (index &lt; -this.list.Count)
          return 0;
     else if (index &lt; 0)
          return this.list.Count + index;
     else if (index &lt; this.list.Count)
          return index;
     else
          return this.list.Count;
}



