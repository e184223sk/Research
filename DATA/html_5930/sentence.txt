More than 3 years have passed since last update.環境についてUbuntu17.10を使用しています。「Ctrl+Alt＋＠」キーでコンソールを表示できます。
図のように、「ターミナル」タブではbashシェルが使用できます。カレントディレクトリに「Study」フォルダを作成し、その中にStudy01プロジェクトを作成します。
コンソールアプリケーション用のプロジェクトを作成するため、「console」を指定します。テンプレートから作成したプロジェクトには、下記のソースが含まれています。
まずは、そのままビルドを行い実行ファイルの作成とアプリの実行を行います。プロジェクトがNuGetパッケージを使う場合は、csprojファイルに使用するパッケージの情報を記載します。今回はNewtonsoft.Jsonを使用します。下記のようにItemGroup要素内にPackageReference要素を追加し使用するライブラリを記載します。csprojファイルに記述したライブラリを取得するには、csprojファイルと同じフォルダ内で、dotnet restoreコマンドを実行します。このコマンドは、プロジェクト内に対象のライブラリを取得していない場合に使用するコマンドで、例えばgitなどでcsprojプロジェクトをクローンしてきた場合でも、このコマンドを実行してNuGetパッケージの取得を行います。csprojファイルの依存ライブラリを編集するたびに、このコマンドを実行しネットワークからパッケージをダウンロードします。VisualStudioでは、複数のプロジェクトをまとめたソリューションという概念があり、複数のアセンブリをまとめる役割を担います。VisualStudioCodeにおいても同様の概念を持つソリューションを作成することができます。大抵のプロジェクトチームでは、ソースツリー構成でソリューションファイルはすべてのプロジェクトの1つ上のフォルダ階層に配置することが多いです。この例では、下記のような位置関係とするソリューションを作成します。VisualStudioCodeのコンソールで、カレントフォルダをStudy01.csprojがあるフォルダへ移動し、コマンドを実行します。VisualStudioCodeの画面左側に表示されている
アイコンをクリックすると、デバッグ用の表示に切り替わります。
をクリックしデバッグを開始します。マーケットプレイスから、「csharp☆Microsoft」(注：☆は半角スペース)


