

[SecuritySafeCritical]
private static EqualityComparer&lt;T&gt; CreateComparer()
{
    RuntimeType runtimeType = (RuntimeType)typeof(T);
    if (runtimeType == typeof(byte))
    {
        return (EqualityComparer&lt;T&gt;)new ByteEqualityComparer();
    }
    if (typeof(IEquatable&lt;T&gt;).IsAssignableFrom(runtimeType))
    {
        return (EqualityComparer&lt;T&gt;)RuntimeTypeHandle.CreateInstanceForAnotherGenericParameter((RuntimeType)typeof(GenericEqualityComparer&lt;int&gt;), runtimeType);
    }
    if (runtimeType.IsGenericType &amp;&amp; runtimeType.GetGenericTypeDefinition() == typeof(Nullable&lt;&gt;))
    {
        RuntimeType runtimeType2 = (RuntimeType)runtimeType.GetGenericArguments()[0];
        if (typeof(IEquatable&lt;&gt;).MakeGenericType(runtimeType2).IsAssignableFrom(runtimeType2))
        {
            return (EqualityComparer&lt;T&gt;)RuntimeTypeHandle.CreateInstanceForAnotherGenericParameter((RuntimeType)typeof(NullableEqualityComparer&lt;int&gt;), runtimeType2);
        }
    }
    if (runtimeType.IsEnum)
    {
        switch (Type.GetTypeCode(Enum.GetUnderlyingType(runtimeType)))
        {
        case TypeCode.Int16:
            return (EqualityComparer&lt;T&gt;)RuntimeTypeHandle.CreateInstanceForAnotherGenericParameter((RuntimeType)typeof(ShortEnumEqualityComparer&lt;short&gt;), runtimeType);
        case TypeCode.SByte:
            return (EqualityComparer&lt;T&gt;)RuntimeTypeHandle.CreateInstanceForAnotherGenericParameter((RuntimeType)typeof(SByteEnumEqualityComparer&lt;sbyte&gt;), runtimeType);
        case TypeCode.Byte:
        case TypeCode.UInt16:
        case TypeCode.Int32:
        case TypeCode.UInt32:
            return (EqualityComparer&lt;T&gt;)RuntimeTypeHandle.CreateInstanceForAnotherGenericParameter((RuntimeType)typeof(EnumEqualityComparer&lt;int&gt;), runtimeType);
        case TypeCode.Int64:
        case TypeCode.UInt64:
            return (EqualityComparer&lt;T&gt;)RuntimeTypeHandle.CreateInstanceForAnotherGenericParameter((RuntimeType)typeof(LongEnumEqualityComparer&lt;long&gt;), runtimeType);
        }
    }
    return new ObjectEqualityComparer&lt;T&gt;();
}

