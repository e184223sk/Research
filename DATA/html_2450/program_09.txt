

private void Insert(TKey key, TValue value, bool add)
{
    if (key == null)
    {
        ThrowHelper.ThrowArgumentNullException(ExceptionArgument.key);
    }
    if (buckets == null)
    {
        Initialize(0);
    }
    int num = comparer.GetHashCode(key) &amp; int.MaxValue;
    int num2 = num % buckets.Length;
    int num3 = 0;
    for (int num4 = buckets[num2]; num4 &gt;= 0; num4 = entries[num4].next)
    {
        if (entries[num4].hashCode == num &amp;&amp; comparer.Equals(entries[num4].key, key))
        {
            if (add)
            {
                ThrowHelper.ThrowArgumentException(ExceptionResource.Argument_AddingDuplicate);
            }
            entries[num4].value = value;
            version++;
            return;
        }
        num3++;
    }
    int num5;
    if (freeCount &gt; 0)
    {
        num5 = freeList;
        freeList = entries[num5].next;
        freeCount--;
    }
    else
    {
        if (count == entries.Length)
        {
            Resize();
            num2 = num % buckets.Length;
        }
        num5 = count;
        count++;
    }
    entries[num5].hashCode = num;
    entries[num5].next = buckets[num2];
    entries[num5].key = key;
    entries[num5].value = value;
    buckets[num2] = num5;
    version++;
    if (num3 &gt; 100 &amp;&amp; HashHelpers.IsWellKnownEqualityComparer(comparer))
    {
        comparer = (IEqualityComparer&lt;TKey&gt;)HashHelpers.GetRandomizedEqualityComparer(comparer);
        Resize(entries.Length, forceNewHashCodes: true);
    }
}

private void Initialize(int capacity)
{
    int prime = HashHelpers.GetPrime(capacity);
    buckets = new int[prime];
    for (int i = 0; i &lt; buckets.Length; i++)
    {
        buckets[i] = -1;
    }
    entries = new Entry[prime];
    freeList = -1;
}

