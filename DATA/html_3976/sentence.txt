More than 1 year has passed since last update.この記事は
パーサジェネレーターLIME入門
パーサジェネレーターLIME入門その２(二項演算式にマッチさせる)
の続きになります。今回は「後置デクリメント」「前置デクリメント」「前置マイナス」といった単項演算子にマッチさせる定義と、単項と二項演算の減算が複合する Nnn----Aaa のような式を正確にマッチングさせる方法を解説します。「オペレータ」は演算子、「オペランド」は演算の対象です。例えば810+114514 という二項演算式の場合、
810は「左オペランド」
+が「オペーレータ(演算子)」
114514は「右オペランド」となります。演算子とオペランドが合わさった式を「演算式」と呼ぶ事にします。オペランドになれたり変数に代入できるものが「式」です。
実は整数リテラルも識別子も、オペランドになれたり変数に代入できるので式です。オペランドになれないし変数に代入できないものが「文」です。
そもそも「変数に代入できない」という事は「代入演算のオペランドになれない」という事です。
今回は代入演算文を実装します。順に注意点を解説します。--Aaa を「マイナスのマイナス」と解釈してしまっては前置デクリメントを表現する手段が無くなってしまいます。
++Aaa を「プラスのプラス」と解釈してしまっては前置インクリメントを表現する手段が無くなってしまいます。インクリメントやデクリメントのオペランドは書き込み可能変数・書き込み可能プロパティ・書き込み可能インデクサーである必要があるからです。
-(--Aaa) や +(++Aaa) という解釈なら成り立ちます。…理論上は確かに成り立つのですが、世間に存在するIDEやコンパイラの中には +++Aaa や ---Aaaを受理しないものがあります。Visual Studioも対応していません。
恐らくは構文解析の前段階となる「字句解析(正規表現でソースコードを最小単位に分割する)」の段階で「早い段階で見つかった最長一致」という原則に基づいて ++ +Aaa や -- -Aaa と分割している為と思われます。一方LIMEは正規表現に頼る必要が無いので字句解析の段階はありません。
１文字単位からパターンを構築する事が可能で、かつ、取り得る可能性の全ての状態を同時に保持しながらマッチングを実行します。
取り得る可能性を勝手に切り捨てないので、複数の解釈が成り立つ場合はマッチ結果を複数返すという動作をします。
デクリメント演算式やインクリメント演算式のオペランドとして変数・プロパティ・インデクサのみを指定するパターンを定義する事で --(-Aaa) や ++(+Aaa) と誤解釈する可能性を無くしつつ -(--Aaa) や +(++Aaa) と解釈するマッチングが可能です。まずは ----Aaa を考えます。
括弧を補ってみましょう。
-(-(-(-Aaa))) マイナスのマイナスのマイナスのマイナス。論外です。
--(-(-Aaa)) マイナスのマイナスのデクリメント。論外です。
-(-(--Aaa)) デクリメントのマイナスのマイナス。論外です。--(--Aaa) デクリメントのデクリメント も不可能です。
(--Aaa) の部分はは代入不能な一時変数です。--(代入不能式) は成り立ちません。結局----Aaaはどうやっても成り立ちません。
同様の理由で++++Aaaも成り立たないのはもう説明不要でしょう。- も + も要諦は同じなので今回は-だけを示します。-の連発は６連発まで可能で、７連発以上は不可能となります。３連発と４連発はそれぞれ解釈が２通りあり、それぞれが正しいと言えます。
どちらを採用するかは言語仕様によりますが、今回は３連発なら (Aaa--)-(Bbb) を採用し、４連発なら (Aaa--)-(-Bbb) を採用する事にします。先の述べたようにLIMEは複数のマッチ結果を返す可能性があります。
現時点でのLIMEの実装では「マッチさせない」はできませんが、「一旦マッチさせておいて後で破棄する」は可能です。
要するにパターンマッチングで合致してしまったマッチは別の検査方法で改めてふるい落とす事になります。
ふるい落とす方法は一旦棚上げしてマッチャーの実装に進みます。以上、例外的に対応しなければならない単項演算および単項と二項の複合を挙げました。今回より整数値が複数ケタに対応します。
(5+9)のように丸括弧で括って優先順位を高める式を「括弧式」と命名して導入します。
メンバアクセス式・関数呼び出し式・インデックスアクセス式も導入します。
インクリメント・デクリメント・メンバアクセス式のオペランドとして識別子が必要になります。
代入演算も導入します。今回実装する演算式の優先順位としては下記の通りです。
演算子の優先順位はC# 演算子に従っています。前回解説した二項演算式の場合はオペランドは
「自分と同等以上の優先度の演算式」か「自分を超える優先度の演算式」でした。
今回の表では優先順位3～999に当たります。優先順位2以上は前回までの常識が通じません。同じ優先度の式であっても同一に扱う事はできません。
ですがこのようにキチンと明文化できるならば実装は可能です。今回の場合該当するのは整数値だけですが、実用的な言語のパーサを実装するなら浮動小数点数・文字・文字列に加えて配列リテラルやラムダ式もこれに該当します。先頭はアンダースコアかアルファベット、２文字目以降は数字も使えます。
C#のように日本語でも有効という仕様は今回は考えません。優先順位が最優先の整数値・識別子に並ぶという点が重要です。
代入可能式を括弧で括ったものは代入可能式に含め、括弧式に含めません。
代入可能式を除外しないと優先順位の関係で(6)++のような式を許す事になってしまいます。これは演算ではなく複数の要素をまとめただけです。
インクリメント・デクリメント・代入文のオペランドになれます。
(Aaa)++や(((Aaa)))++のように括弧で括った状態にも対処する為に、括弧で括った代入可能式もまた代入可能式に含めています。Fff(5,8)のように関数型の値に引数を与えて実行して値を得る演算です。
0個以上の引数をカンマで区切る事とします。
Fffの部分がオペランドとなります。
関数型の値になり得ない整数値・インクリメント演算式・デクリメント演算式はオペランドになれません。
引数リストの中身は全ての演算式が許可されます。
関数呼び出し式が関数型を返すならばFff(5,8)(4)のようにいくつでも連結する可能性があります。Aaa[5]のようにインデックスでAaaの内部データにアクセスする演算です。
そもそも「インデックスアクセス式」という名称が正しいのかわかりませんがこう呼んでおく事にします。
1個以上の引数をカンマで区切る事とします。
引数リストの中身は全ての演算式が許可されます。これは関数呼び出し式と共通です。
Aaa[5][8]のようにいくつでも連結する可能性がある事も関数呼び出し式と共通です。Aaa.Lengthのようにメンバを呼び出す式です。
左オペランドは「自分と同等以上の優先度の演算式」という二項演算の普通のルールに則っています。
右オペランドとなるメンバ名は識別子のみとなります。
Swift言語のようにメンバ名として数値を許可する特別な仕様の言語もありますが、今回は考えない事とします。これは演算ではなく優先順位1の式をまとめただけです。前置と後置で優先順位に差があります。
++Aaa.ToString()という式は「前置インクリメントのオペランドが代入不能なのでアウト」です。
優先順位2の前置インクリメントより優先順位1のメンバアクセス式・関数呼び出し式が優先されます。Aaa++.ToString()という式は許されます。後置インクリメントはメンバアクセスのオペランドになり得ます。前置マイナス式を含まない優先順位2以上がオペランドになります。前置プラス式を含まない優先順位2以上がオペランドになります。これも演算ではなく優先順位2以上の式をまとめただけです。
優先順位2以上なので&lt;1&gt;を含む定義となっています。前回解説した二項演算式です。
前回一般化した通り、左オペランドは自分と同等以上の式、右オペランドは自分を超える優先度の式となります。
もしシフト演算や論理和などを表に組み込みたい場合は加減算と代入文の間に挿入する事になります。二項演算で最も優先順位の低いものがこの代入文です。
式ではなく文なのでどの式のオペランドにもなれません。
代入文自体は代入文のオペランドにはなれませんのでAaa=Bbb=1+4のような書き方はできません。変数宣言文・if文・switch文・try文 などといった「文」が該当します。例えばvar Aaa=1+2といった変数宣言文の場合、宣言文は代入文より低い優先順位が必要になります。
「優先順位が低い」という事を言い換えると「自分より優先順位が高い要素を部品として取り込める」です。
この例では変数宣言文の一部として代入文を取り込んでいますし、代入文の一部として加減算式を取り込んでいます。文をゼロ個以上取り込む事で「関数宣言文」が定義可能になります。
関数宣言文も含めた文を取り込んで「クラス宣言文」を定義可能です。
クラス宣言文も含めた文を取り込んで「名前空間宣言文」を定義可能です。
名前空間宣言文も含めた文を取り込んで「●●言語のソースコード」を定義可能です。「●●言語のソースコード」として定義したマッチャーに文字列を入力してマッチすればパースできた事になります。リテラル値式として処理する事になります。そんなふうに考えていた時期が俺にもありました。
結論から言うとできません。確かに133はint型と確定できますし133+986もint型と確定できますが、識別子の型は確定できません。
識別子の型を確定するのは構文解析の先の段階です。
()=&gt;{1+2}++といったトンチンカンなソースコードでも構文解析の段階では一旦受け入れておいて、その先の段階でエラー扱いにする事になります。関数呼び出しやインデックスアクセスでデリミタとしてカンマを指定しています。
MatcherのTimes()や_0Max()や_1Max()がデリミタ指定に対応している仕様は引数リストの定義を簡潔に記述する為です。Matcher と宣言するか RecursionMatcher と宣言するかの使い分けは、宣言した時点で初期化できるか否かです。
実は全ての宣言を RecursionMatcher でまとめて行い、後から中身をまとめて設定する事も可能です。LIMEの動作原理を解説する予定です。続きができました。
パーサジェネレーターLIME入門その４(マッチング動作の原理)


