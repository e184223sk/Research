More than 1 year has passed since last update.ASP.NET Core 3.0 Razor Pagesの公式チュートリアルをやって感じたのは、Startup.cs が一番の鬼門かな、ということ。もう少し、Startup.csの理解を深めておく必要がありそうです。僕もまだわかっていないことが多いので、もし間違い等あれば指摘していただけると嬉しいです。ということで、チュートリアルで作成した Startup.cs を開いてみます。
このクラスでは、アプリの動作を構成するコードを記述するようです。ConfigureServices と Configureの２つのメソッドがあります。呼び出される順番は、ConfigureServices → Configure の順です。コメントを読むと、ランタイムから呼び出されるメソッドで、このメソッド内で、コンテナにサービスを追加するコードを書くということのようです。コンテナとサービスが何かが良くわかってませんが、このWebアプリに必要な機能をここで追加するということだと思います。ASP.NET Coreはプラガブル(といっていいのかな)な構造になっていて、開発者が必要な機能を明示的に組み込むようになっています。最初のでは、Razor pagesの機能を有効にしています。次のでは、チュートリアルで作成した DBアクセスのための RazorPagesMovieContextをアプリケーションから利用できるようにするためにコードです。SQLiteを利用し、その接続文字列は、構成ファイルの "MovieContext" から取得しています。
これによって、各ページモデルで RazorPagesMovieContextのインスタンスを生成する必要はなくなります。チュートリアルのコードでは、と、ページモデルのコンストラクタで、RazorPagesMovieContext のインスタンスを受け取っていましたが、ConfigureServicesメソッドで、サービスを登録していることでこれが実現できていたということですね。AddEntityFrameworkStores といったメソッドも用意されているようです。これら Add で始まるメソッドは、IServiceCollectionインターフェースに対する拡張メソッドとして定義されています。なお、ここで追加したサービスは、依存関係の挿入(DI) または ApplicationServices を利用して利用することができます。Configure メソッドもランタイムから呼び出されます。 
コメントには、このメソッドを使ってHTTPリクエストパイプラインを設定します、とあります。ということは、この順番が意味をも持つってことですね。まだ、完全に理解していないけど、は、httpをhttpsにリダイレクトさせる。は、静的ファイルを提供できるようにする。は、ルーティングを標準設定で構成する。は、認証を構成する。ということをやっているようです。Useで始まるメソッドは、IApplicationBuilder の拡張メソッドとして定義されています。それと、Configureメソッドの最初では、env.IsDevelopmentの値を見て、if文で分岐させている個所があります。envは、引数で渡ってくる IWebHostEnvironment のインスタンスです。開発環境と運用環境で動作を変更するために利用しています。調べたところ、ASP.NET Core はアプリの起動時に環境変数 ASPNETCORE_ENVIRONMENT の値を読み込み、このプロパティの値を設定しているようです。ASPNETCORE_ENVIRONMENT には、"Development"、"Staging"、"Production" という 3 つの値を指定できます。ASPNETCORE_ENVIRONMENT が設定されていない場合、既定で Production になります。Visual Studio Codeの、launch.json を見ると、となっています。なので、VS Codeから起動する場合は、env.IsDevelopmentプロパティは、trueになります。なお、env.IsDevelopmentプロパティが、falseの時には、となっているので、例外発生時は、"/Error"にリダイレクトされるようです。つまり、Error.cshtml, Error.cshtml.cs が利用されるということですね。app.UseHsts() は、 HSTS (Hypertext Strict Transport Security) をブラウザに通知するようにしているコードです。Visual Studio IDEでは、プロジェクトのプロパティページでASPNETCORE_ENVIRONMENT 環境変数の値を設定できます。そういえば、チュートリアルで appsettings.json についてすこし触れましたが、appsettings.Development.json というファイルもプロジェクトには存在していました。開発時(ASPNETCORE_ENVIRONMENT=Development)には、appsettings.jsonの内容に、appsettings.Development.jsonの内容が上書きされて、利用されることになるようです。利用される接続文字列は、appsettings.jsonに書かれているのですが、appsettings.Development.jsonにも書けば、デバッグ時は、appsettings.Development.jsonに書かれているConnectionStringsの値が利用されるということですね。つまり、開発中と運用で接続文字列を簡単に切り替えることができるということです。web.configとweb.debug.config,web.release.configとの関係に似ていますね。
でも、web.debug.config,web.release.configでの特殊な記法が必要ないので、理解しやすいですね。Startコンストラクタは、以下のパラメータを受け取りことができます。IHostingEnvironment  (環境別にサービスを構成するため)。IConfiguration  (スタートアップ時にアプリケーションを構成するため)。ILoggerFactory  （ロギングを構成するため）これらのコンストラクタは省略することもできます。実際、チュートリアルで利用したコンストラクタは、以下のように IConfigurationだけを受け取っています。全てを受け取る場合は、以下のように書きます。これまで見てきた Startupクラスは、Program.csのMainメソッドから呼び出されるCreateWebHostBuilderメソッドで指定されています。チュートリアルで作成した Program.cs は、以下の通り。ドキュメントによると、Mainメソッドで、ホスト といわれるものを組み立てています。ホストとは、以下をカプセル化するオブジェクトです。上記のコードでは、というオプションとともにホストを構成しています。なお、サービスの追加とリクエストパイプラインの構成以外の初期化が必要ならば、Program.cs で行うってことですね。Mainメソッドでは、DIが利用できないので、やのように IServiceProvider のインスタンスを使って、サービスにアクセスしているってことですね。デバッグで確かめたところMain → CreateHostBuilder →  Startup.ConfigureServices →  SeedData.Initialize →  host.Run() → Startup.Configureの順で呼び出されていました。Startup クラスがすこし理解できたように思います。


