More than 1 year has passed since last update.最近ReactivePropertyを勉強しています。ふとチャタリング防止が簡単に書けるのでは！？
と思ったんですが意外と思いつきませんでした。簡単に説明。
押しボタンスイッチやリレーのメカニカルな接点はバネ駆動で信号のON/OFFを実現します。
その関係でON/OFFの切り替わりの瞬間に接点が微少に跳ねてごく短時間ON/OFFを繰り返す事があります。
これをチャタリングと呼びます。FA用の小型メカニカルリレーだと大体40msec程度ON/OFFが暴れます。例えばという制御をする装置が有ったとして、
スイッチ入力のチャタリングが起こるとします。
チャタリングの高速ON/OFFを全て拾ってしまうとモータの運転/停止を高速で繰り返すような出力をしてしまいます。モータのサイズやブレーキ機構によっては重大な故障を招くことも。と言う事でチャタリング防止としてある一定時間のONを維持した時にONとするディレイ回路を入れるのが一般的です。一定時間値が変化しなければその値を採用する。というのが言葉で表現すると適当かと思います。今までPLCとかFPGAを使ってた限りでは特に悩むことなくやってました。PLCはタイマーという機能があって簡単に実現できます。FPGAではクロックで周期的に入力端子を監視してバッファーに突っ込んでその中の値が変化しなければ・・・
といった感じで実現します。ReactiveなLinqで書くとどうなるんだ？？と悩んでしまいました。
まだまだ全然理解できてないなぁと痛感です。始めはDelayしてBufferしてシーケンスの中の値の変化を見て・・・。なんて考えてしまいましたが、これはReactiveな感じじゃないなぁと。(都合があって.NET4.0 C#4.0です)色々こねこねしてやっとここまで辿り着けました。
しかしメソッドを間違った使い方をしてしまってます。チャタリングしていないと判断できる時間Bufferしてlist.Countが0になったら、で実現できてしまいました。
が、値を自分のプロパティから取ってきたり、変なことをやってます。
もっと素直な方法がありました。@naminodarie さん
@herara_ofnir3 さん
にコメントで指摘いただきました通り、一定時間値が変化しなければその値を採用する。は正にThrottleと言うメソッドで実現できました。とてもストレートに分かりやすいですね！チャタリングで大抵欲しくなる、と言う機能を忘れてました。
あれー？こういったことはどうすれば？？
CombineLatestとかでまとめて・・・。
なんて思ってたらやっぱりThrottleだけで出来ました。Reactive Propertyって凄いですね。
自分の常識をぶっ壊してくれてる感じが溜まりません。
まだまだ全然使えてないですが、やる気が出てきます！もしModel側でReactive Propertyを使うときは、Schedulerの指定をした方が良いそうです。
Reactive PropertyはデフォルトでUIスレッドで動くそうなので。(参考)【C#】ReactivePropertyをModelで使う場合の留意点 コンソールの動きを見たらイメージとちょっと違いました。コンソールに出してみて初めてBufferの動きが分かりました。初めもっていたイメージはと思ってました。
つまり一定時間以上の変化が無ければ、Bufferは一旦終わるものかと思ってました。しかし、コンソールの動きを見てみると、と言う動きでした。しかし前者の考えで居た私はとかやってしまい、全然思った動きになりませんでした(汗


