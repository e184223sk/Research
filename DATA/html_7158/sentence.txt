早速ですがデモです。それっぽく実装できたので記事にまとめます😎 pic.twitter.com/yISTofPako音楽プレーヤーです。シークバーで再生箇所を変更できます。こちらをExtenjectとUniRxをうまいこと使ってMV(R)Pパターンで実装していきます。下記参考にさせていただきました。
【参考リンク】：UnityにおけるMVPパターンについて具体的な例を挙げて図解したものが下記です。ViewとModelどちらかを変更すればもう片方に変更に応じた処理が反映されます。途中寄り道しながらいろいろメモしていきます。まずはViewです。UIコンポーネントをSerializeFieldに設定して
public Button PlayButton =&gt; _playButton;で公開するというやり方は下記を参考にしました。【参考リンク】：Web出身のUnityエンジニアによる大規模ゲームの基盤設計やや冗長に感じましたが、View以外のクラスを肥大化させないためや
MonoBehaviorが必要のないクラスにMonoBehaviorの継承をさせないためには有効な手法のようです。
(教えてくださった方ありがとうございます！)続いてロジックを担うModelです。今回は再生中、停止中の切り替えにEnumのReactivePropertyを定義して利用しました。
(後々思いましたが、別にEnumの定義した値が2つならBoolReactivePropertyでも良かったかもです。)ViewとModelを繋ぐPresenterです。
MonoBehaviorは継承していません。
ですので、ここでExtenjectの機能を利用します。Extenjectには非MonoBehaviourをDIする際にMonoBehaviourのように振舞わせる仕組みがあるそうです。InitializableはStart関数と同様なタイミングのようです。
下記が対応表です。【引用元】：【Unity】【Zenject】非MonoBehaviourをDIする際にMonoBehaviourのように振舞わせるIInitializableの中で購読を開始することで、
Start関数で購読を開始するというお馴染みの流れを
非MonoBehavior継承クラスにて疑似的に実現できました。IDisposableはインスタンスが破棄されるタイミングで呼び出されます。AddTo(this)とすることで
Monobihaviorを継承したオブジェクトが破棄される際に
購読を自動的に停止することができます。これはAddToに下記のようなオーバーロードが実装されているからです。【引用元】：AddToメソッドしかし、非Monobihaviorの場合、上記表を見てわかる通りAddToの引数にthisは使えません。
なのでIDisposable.Dipose()の中で明示的に購読を停止される必要があるということです。Extenjectでお馴染みのInstallerです。
ViewとModelのインスタンスはヒエラルキー上のオブジェクトから参照したいので
FromComponentOnで指定しています。ExtenjectのライフサイクルイベントをきっかけにResolveしたいときの書き方を
今回調べて初めて知りました。【参考リンク】：【Unity】【Zenject】非MonoBehaviourをDIする際にMonoBehaviourのように振舞わせる個人的な学習用のサンプルなのでツッコミ大歓迎です。
下記に上げときます。
【GitHub】: MVP_DemoどんどんアップデートされてるVContainerも触っていきたいです。Zenjectを使うときに気を付けていること
[UniRx]購読を停止する
UIのシステムをUniRxで構築する
VContainerを組み込んだゲームサンプル
Unityで経過時間、制限時間を表示する機能を作成する
【Unityスクール】カウントダウンタイマーの制作方法


