public static IEnumerable&lt;TResult&gt; Select&lt;TSource, TResult&gt;(
    this IEnumerable&lt;TSource&gt; source, Func&lt;TSource, TResult&gt; selector)
{
    if (source == null)
    {
        ThrowHelper.ThrowArgumentNullException(ExceptionArgument.source);
    }

    if (selector == null)
    {
        ThrowHelper.ThrowArgumentNullException(ExceptionArgument.selector);
    }

    if (source is Iterator&lt;TSource&gt; iterator)
    {
        return iterator.Select(selector);
    }

    if (source is IList&lt;TSource&gt; ilist)
    {
        if (source is TSource[] array)
        {
            return array.Length == 0 ?
                Empty&lt;TResult&gt;() :
                new SelectArrayIterator&lt;TSource, TResult&gt;(array, selector);
        }

        if (source is List&lt;TSource&gt; list)
        {
            return new SelectListIterator&lt;TSource, TResult&gt;(list, selector);
        }

        return new SelectIListIterator&lt;TSource, TResult&gt;(ilist, selector);
    }

    if (source is IPartition&lt;TSource&gt; partition)
    {
        IEnumerable&lt;TResult&gt;? result = null;
        CreateSelectIPartitionIterator(selector, partition, ref result);
        if (result != null)
        {
            return result;
        }
    }

    return new SelectEnumerableIterator&lt;TSource, TResult&gt;(source, selector);
}

