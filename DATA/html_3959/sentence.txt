LINQが最適化のため使用しているテクニックをSelectの実装に沿って紹介したいと思います。
ここで紹介する最適化は他の似た系統の言語のイテレータアダプタ (mapやfilter等) にも適用できるはずです。
見たところKotlinのSequenceはここで紹介する最適化をしていないので貢献するチャンスかもしれません。Selectのソースコード: https://github.com/dotnet/runtime/blob/main/src/libraries/System.Linq/src/System/Linq/Select.csまずSelectメソッドは次のように定義されています。Nullチェックをした後に、sourceがよく使われる特定の型だった場合には専用のIEnumerableを返し、そうでなければ汎用的な実装であるSelectEnumerableIteratorを返すという形になっています。
最初の分岐にあるIteratorという型はSelectEnumerableIteratorなどLINQの返り値が継承している抽象クラスです。
つまり list.Where(...).Select(...) のようにメソッドチェインしている場合にあたる分岐になります。
iterator.Select() はIteratorのメソッドで (LINQのSelectと違って静的拡張メソッドでない) 、Selectの実装を各Iteratorに任せることによって最適化された実装を返しています。実際作成されるIteratorクラスの確認の前にIEnumerableとIEnumeratorの復習を軽くしておきます。IEnumerable&lt;T&gt;はループ可能なことを表すList&lt;T&gt;やHashSet&lt;T&gt;が実装するインターフェイスです。
IEnumerator&lt;T&gt; GetEnumerator()というメソッドだけを持ちループ変数の保持など実際のループ処理はIEnumerator&lt;T&gt;が担当します。
詳しくは公式ドキュメントを参照してください
: IEnumerable, IEnumeratorIteratorのソースコード: https://github.com/dotnet/runtime/blob/main/src/libraries/System.Linq/src/System/Linq/Iterator.csIteratorクラスのメンバとコンストラクタは次のようになっています。_currentはIEnumeratorとして現在保持している値です。
_threadIdと_stateについては後で説明します。注目すべきはIEnumerableとIEnumeratorの両方を実装していることです。
これがどういうことかを知るためにIEnumerableのメソッドGetEnumeratorの実装を見てみましょう。基本的には自分自身をIEnumeratorとして返すという実装になっています。
もしIEnumerableとIEnumeratorが別の型に分かれている場合、list.Select(...).ToList() としたときSelectでIEnumerableを作成して .ToList() で内部的にGetEnumeratorを呼び出してIEnumeratorを作成するという二度のインスタンス化が行われます。
IEnumerableとIEnumeratorを兼ねておくことでインスタンス化が一度で済むことになります。ただしそれを素朴に実装すると問題があるので分岐で少し処理をすることになっています。
次のようなコードを考えます。もし単純にenumerable.GetEnumerator()が常に自分自身を返すなら最終行のenumerator2.Currentは二番目の要素になってしまいます。
二度目以降のGetEnumerator()は新たなインスタンスを返さなければなりません。
ここで_stateが活用されます。
IteratorのGetEnumeratorの実装ではまず一度目の呼び出しでは_stateを0から1にしてGetEnumeratorが呼び出されたとマークしてから自分自身を返します。
そして二度目のGetEnumeratorの呼び出しでは_stateが0でないのでIteratorの抽象メソッドCloneを呼び出して作成した自分自身のクローンを返します。
CloneではIEnumerableで使用するフィールド (Selectではsourceなど) はそのままで、IEnumeratorで使用するフィールド (ループ変数など) は初期化するよう実装することにしておけば二度目以降のGetEnumeratorの呼び出しでは新しいIEnumeratorが作成されることになりうまくいきます。
_stateは0が作成後GetEnumerator呼び出し前、1以上がGetEnumerator呼び出し後Dispose呼び出し前、-1がDispose呼び出し後を表します。フィールドの_threadIdについてですが、二つのスレッドが同時にGetEnumeratorを呼び出したとき、両方のスレッドが _state == 0 だと判定してしまう恐れがあるので、enumerableを作成したスレッド自身以外が呼び出したときは常にクローンを返すことで意図せず同じIEnumeratorを返すことを防いでいます。では実際にSelectではどのようにIteratorを継承しているか見ていきましょう。Selectのソースコード: https://github.com/dotnet/runtime/blob/main/src/libraries/System.Linq/src/System/Linq/Select.csまずは汎用的に使われるSelectEnumerableIteratorを見ていきましょう。
フィールドとコンストラクタは次のようになっています。_sourceと_selectorに加えて、_sourceのenumeratorを保持する_enumeratorフィールドがあります。
Iterator.Select以外は普通に実装されています。CloneはIEnumerable部分だけ保持するということだったので次のようになっています。MoveNextは次のようになっています。まず初回の呼び出しで_sourceのEnumeratorを取得し、_state = 2 とすることで既にEnumeratorを取得していることをマークします。Iterator.Select はオーバーライドされています。
list.Select(hoge).Select(fuga) は list.Select(x =&gt; fuga(hoge(x))) と同等であるということから、SelectEnumerableIteratorがネストすることを回避し、MoveNextの呼び出しを浅くしています。CombineSelectorsは次のように定義されます。
ソース: https://github.com/dotnet/runtime/blob/main/src/libraries/System.Linq/src/System/Linq/Utilities.cs#L70L71sourceがListの場合のSelectの実装であるSelectListIteratorのフィールドは次のようになっています。ListのEnumeratorは構造体であり、これを汎用的な実装と違ってIEnumeratorでなく具体的な型として保持することでボクシングを回避しています。sourceが配列の場合のSelectArrayIteratorでは_stateの1以上の部分を利用してインデックスを保持しています。後半力尽きた感がありますが、なんとか書ききることができました。
最適化の話は面白いですね。
実際にIEnumerableを実装するときはyieldで事足りてしまいますが…


