More than 1 year has passed since last update.普段 C# を書いてるわけではないのですが、近年の Microsoft のオープンソースへの取り組みや、発表するプロダクトに面白さを感じていて、そろそろ食わず嫌いは辞めて、Microsoft な技術スタックも積極的に触っていこうと思っている今日この頃です。そんな中、キワモノ感があるけど面白そうだなと思っていた Blazor WebAssembly が GA になったというニュースを見かけたので、遅ればせながらどんな感じでアプリを書けるのか触ったみることにしました。特に作りたいものがあるわけではなかったので、題材は http://todomvc.com/ の ToDo アプリにしました。今回はクライアントサイドのみで完結するようにしたので、パブリッシュしたコンテンツを GitHub Pages に SPA としてホスティングしています。Blazor は React のようなコンポーネント指向なフレームワークなので、おそらく React と似たように書けるんだろうと思って、下記のソースコードを参考に Blazor に移植してみました。React 版の書き方は古い感がありますが、Blazor はクラスコンポーネントのコードの方が移植しやすそう。細かい部分は端折ったりしていて、完全に挙動が一致するようには作れていないのですが、概ね似たような雰囲気で書けることはわかりました。起動すると dll がたくさん落ちてきて WebAssembly で TODO アプリが動きます。細かいところは抜きにして、Blazor には（Razor にはと書くのが正しいかもしれませんが、以後全部 Blazor と書きます）ページという概念あるので、ルーティングのための記述は不要でした。
Pages ディレクトリ以下に各ページとページで使うコンポーネントを置きました。ページは Active, Completed, Index の3ページあって、それぞれの中身は @page ディレクティブと TodoPage コンポーネントを記述しているだけです。Filter パラメータに TODO 一覧の抽出条件を渡して、NowShowing パラメータ表示しているページ名を渡すようにしています。また、各ページで使用するモデルを Models にディレクトリ以下に置きました。主に上記が今回書いたコードの置き場所で、他は Visual Studio なり dotnet コマンドなりが吐き出してくれた雛形をちょっと書き換えたくらいです。一例として未完了（アクティブ）な TODO だけを表示するページのコードが下記です。
（Razor 記法用のシンタックスハイライトがない...）TodoPage.razor は https://github.com/tastejs/todomvc/blob/gh-pages/examples/react/js/app.jsx の app.jsx に相当するファイルで、このファイルを React と Blazor で見比べたら雰囲気わかるかなと思います。Razor 構文のシンタックスハイライトがないので、とりあえず C# のシンタックスハイライトを当てています。概ね似たような感じで書けている気がします。JSX を返す render メソッドのようなものがない分、Blazor の方がスッキリしているかもしれないです。後は https://github.com/tastejs/todomvc/blob/gh-pages/examples/react/js/todoItem.jsx に相当する TodoItem.razor や https://github.com/tastejs/todomvc/blob/gh-pages/examples/react/js/footer.jsx に相当する TodoFooter.razor というコンポーネントを用意しましたが、概ね React のコードをそのまま移植できたように思います。サンプルアプリを GitHub Pages に置いたのですが、GitHub Pages に SPA をホストするのは意外とノウハウが必要な感じで苦労しました。下記のページや記事などを参考に作業しました。まとめというか Blazor に触れてみた感想です。そもそも C# や .Net Core のアーキテクチャに不慣れだってのと、生まれて初めて Visual Studio を使ってみたってのもあって、デバッグが下手くそなだけかもしれませんが、クライアント側で実行時エラーが発生した場合などに _framework/blazor.webassembly.js などから吐かれるエラーメッセージからは、どこに問題があるのかよくわからないし、Blazor のコードにブレイクポイント貼ったところで非同期に実行されるフレームワーク内のソースコード内でエラーが発生しているため、うまくデバッグができずハマってる時間が結構ありました。
正直今も未解決の不具合があって、もう少し小さなサンプルで再現できるかを確認した上で開発者に質問を投げようかなと思っていたりします。。。食わず嫌いを克服して C# 愛が高まってきたらプライベートで使う可能性はあるかもしれませんが、今時点では TypeScript で React を書いた方が手が早いし、困った時の助けになる情報も多いし、エコシステムも充実しているし、C# のシャレオツな言語仕様の多くは TypeScript にすでに取り込まれていたりするので、バックエンドに C# を選択しない限りはなかなか手が出ない感じがします。ただ、C#での生産性が高い人やチームにとってはとても魅力的な技術だとは思いました。Blazor の今後のロードマップにデスクトップアプリケーションを開発するための Blazor Hybrid、ネイティブアプリケーションを開発するための Blazor Native が控えているらしいので、その動向次第ではまた再評価のタイミングが来そうです。言語は変わりますが、F# で Blazor する Bolero は後日試してみたいなと思っています。（こっちの方が個人的には本命だったりする）以上です。


