
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace RxPropLabWpf
{
    public class Sensor : INotifyPropertyChanged, IDisposable
    {
        private CancellationTokenSource _cancellationTokenSource;
        public string Name { get; }

        private int _value;
        public int Value
        {
            get =&gt; _value;
            private set
            {
                _value = value;
                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(Value)));
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;
        public Sensor(string name)
        {
            Name = name;

            // Dispose されるまで3秒間隔でランダムに Value を更新する
            _cancellationTokenSource = new CancellationTokenSource();
            Start(_cancellationTokenSource.Token);
        }

        private async void Start(CancellationToken token)
        {
            var random = new Random();
            while (!token.IsCancellationRequested)
            {
                Value = random.Next(100);
                await Task.Delay(3000);
            }
        }

        public void Dispose() =&gt; _cancellationTokenSource.Cancel();
    }
}

