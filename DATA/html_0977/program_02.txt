
using Reactive.Bindings;
using System;
using System.ComponentModel;
using System.Reactive.Linq;

namespace RxPropLabWpf
{
    // WPF のメモリリーク対策で INotifyPropertyChanged は実装しておく
    public class MainWindowViewModel : INotifyPropertyChanged 
    {
        public event PropertyChangedEventHandler PropertyChanged;

        // コマンドのソース用
        public ReactivePropertySlim&lt;bool&gt; IsChecked { get; }
        // コマンドを押したときに更新するメッセージ
        public ReadOnlyReactivePropertySlim&lt;string&gt; Message { get; }
        // コマンド
        public ReactiveCommand SampleCommand { get; }

        public MainWindowViewModel()
        {
            // デフォルト値が true の設定
            IsChecked = new ReactivePropertySlim&lt;bool&gt;(true);
            // ReactiveProperty は IObservable なので ReactiveCommand にできる
            SampleCommand = IsChecked.ToReactiveCommand();
            // ReactiveCommand は IObservable なので Select で加工して ReactiveProperty に出来る
            Message = SampleCommand.Select(_ =&gt; DateTime.Now.ToString())
                .ToReadOnlyReactivePropertySlim();
        }
    }
}

