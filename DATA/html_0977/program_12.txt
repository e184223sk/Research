
using Reactive.Bindings;
using Reactive.Bindings.Helpers;
using Reactive.Bindings.Extensions;
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Threading.Tasks;

namespace RxPropLabWpf
{
    // WPF のメモリリーク対策で INotifyPropertyChanged は実装しておく
    public class MainWindowViewModel : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        public ObservableCollection&lt;Sensor&gt; Sensors { get; }
        public IFilteredReadOnlyObservableCollection&lt;Sensor&gt; AlertTargets { get; }
        public ReactiveCommand SampleCommand { get; }
        public MainWindowViewModel()
        {
            Sensors = new ObservableCollection&lt;Sensor&gt;();
            AlertTargets = Sensors.ToFilteredReadOnlyObservableCollection(x =&gt; x.Value &gt;= 50);
            SampleCommand = new ReactiveCommand()
                .WithSubscribe(() =&gt;
                {
                    Sensors.Add(new Sensor(Guid.NewGuid().ToString()));
                });
        }
    }
}

