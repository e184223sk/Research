
using Reactive.Bindings;
using System.ComponentModel;
using System.Threading.Tasks;

namespace RxPropLabWpf
{
    // WPF のメモリリーク対策で INotifyPropertyChanged は実装しておく
    public class MainWindowViewModel : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        public AsyncReactiveCommand LongTimeProcess1Command { get; }
        public AsyncReactiveCommand LongTimeProcess2Command { get; }

        public MainWindowViewModel()
        {
            // 同じ ReactiveProperty&lt;bool&gt; から非同期コマンドを作成
            var sharedCanExecuteReactiveProperty = new ReactivePropertySlim&lt;bool&gt;(true);
            LongTimeProcess1Command = sharedCanExecuteReactiveProperty.ToAsyncReactiveCommand()
                .WithSubscribe(async () =&gt; await Task.Delay(3000));
            LongTimeProcess2Command = sharedCanExecuteReactiveProperty.ToAsyncReactiveCommand()
                .WithSubscribe(async () =&gt; await Task.Delay(3000));
        }
    }
}

