2020年7月9日更新：実装変更でメソッド名や使い方の紹介などの修正を行いました。unity1weekをきっかけに、Unity+Googleスプレッドシート+GASで簡易ランキング機能を作ってみました。この仕組みで、ランキングだけではなく、任意のデータをアップロード・ダウンロードできれば、一応汎用的なデータベースとして使えるのではないかと思いました。例えばゲームのマスタデータをGoogleスプレッドシートに保存することで、アプリのバージョン更新なしでゲームの調整ができてまうとか、ゲームの最新バージョンをGoogleスプレッドシートに書き込んで、アプリ起動時にそれを取得して古ければ強制アップデートポップアップを出すとか、さらにチャットやユーザー情報の管理もGoogleスプレッドシートでやりとりするなど、ユースケースがどんどん湧いてきます。
ということで、実装してみました。プロジェクトはUmbrella（トトロなので）という名でGithubに公開しました。最新パッケージのダウンロードはこちら。ちなみに、Umbrellaには単純なデータ通信管理システムDatabase以外に、簡易ランキングシステムRankingも含まれています。興味ある方はぜひ合わせていじってみてください。Googleスプレッドシートにデータを送信します。デモではデータ名と値のペアで複数データを送信しています。
Googleスプレッドシートにあるデータを更新します。デモではデータ名を指定して新しい値を送信しています。
他のクライアントとしてデータを送信します。Umbrellaではクライアントを識別するユニークIDをUnity側で生成してPlayerPrefsに保存しているため、PlayerPrefsをクリアしないまま送信すると既存のデータを上書きすることになります。
Googleスプレッドシートにあるデータを取得します。デモではデータ名のリストで複数のデータを取得しています。
セル参照で範囲内のデータを一気に取得する方法もあります。
GASはUnityから送ってきたデータに基づき、スプレッドシートの中身を更新します。saveDataとgetDataの実装詳細はここでは省略しますが、GASのAPIコールはコスト高いため、処理速度を高めるにはできる限りAPIコールの回数を減らす必要があります。例えばセルデータの取得で、各セルでsheet.getRange().getValue()の代わりに、予めvar data = sheet.getDataRange().getValues()で指定範囲のセルデータを一括で配列に格納し、後で配列から値を取るなどの策が考えられます。また、データの書き込みがある場合、排他処理（ロック）を入れる必要がありますが、一行のデータをまとめて一括でappendRow()を使えばセル単位でのロック処理をなくすテクニックもあります。appendRow()は不可分操作（Atomic Operation）なので排他処理が要らないからです。簡易のデータベース機能なので、特に通信の仕様とかは決めなく（暗号化？？）、完全にJSON形式で送信しています。JSON解析は軽量のMiniJsonを導入しています。WWWFormがLegacyになったので、IMultipartFormSectionでフォームデータを作成しています。フォームデータにGAS側で呼び出したいメソッド名とデータ内容を入れています。また、外部でyield returnをつけて待たせられるように、返り値のタイプをCustomYieldInstructionにしてcompleteがtrueになるまで処理を止めることを可能にしています。UnityWebRequestのPostメソッドでフォームデータを送信しています。返ってきた結果にError文字列（GAS側で入れている）が含まれたらエラーログを書き出し、なければ結果を処理するコールバックresponseHandlerを呼び出します。Unity+Googleスプレッドシート+GASでサーバーレスの簡易データベース機能を作ってみました。当然いくつか問題もあります。しかしながら個人プロジェクトレベルのものとしては十分機能できるのではないかと思います。何より、Googleスプレッドシートならではの機能が使えて、直接データを一目瞭然で見たり、気軽にデータを修正したりすることができる点から、普通のSQLデータベースよりも便利かもしれません？（？）Umbrellaにランキング機能も付いているので、それの使い方も紹介します。Googleスプレッドシートにスコア送信します。
Googleスプレッドシートにあるスコアを更新します。
Googleスプレッドシートのランキングリストを取得します。



