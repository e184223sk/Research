
    public class OxyPlot_Behavior : Behavior&lt;Plot&gt;
    {
        #region targetDataGridプロパティ
        public DataGrid targetDataGrid
        {
            get { return (DataGrid)GetValue(targetDataGridProperty); }
            set { SetValue(targetDataGridProperty, value); }
        }
        // Using a DependencyProperty as the backing store for targetDataGrid.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty targetDataGridProperty =
            DependencyProperty.Register("targetDataGrid", typeof(DataGrid), typeof(OxyPlot_Behavior), new PropertyMetadata(null));
        #endregion


        protected override void OnAttached()
        {
            AssociatedObject.ActualModel.TrackerChanged += ActualModel_TrackerChanged;
        }

        protected override void OnDetaching()
        {
            AssociatedObject.ActualModel.TrackerChanged -= ActualModel_TrackerChanged;
        }

        private void ActualModel_TrackerChanged(object sender, TrackerEventArgs e)
        {
            if (e.HitResult == null) return;
            var res = e.HitResult.Item as PointData;
            targetDataGrid.Focus();
            targetDataGrid.SelectedIndex = targetDataGrid.Items.IndexOf(res);
            targetDataGrid.CurrentCell = new DataGridCellInfo(res, targetDataGrid.Columns[0]);
        }
    }

