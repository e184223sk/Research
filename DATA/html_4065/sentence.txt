More than 1 year has passed since last update.ASP.NET Core で JSON ファイルから設定情報を得てアプリに反映する手順です。
設定を文字列として読み込むのではなく、クラスにバインドし型付けして安全に扱いたいと思います。1.NET Core SDK のバージョンは 2.1 で、 Visual Studio for Mac を使用しています。サンプルは以下の dotnet コマンド、もしくは Visual Srtuio で新規の Web API プロジェクトを作成したものです。参考にした URL
ASP.NET Core のオプション パターン
ASP.NET Core の AppSetting の構成方法appsettings.jsonに自分の設定情報を追記します。追記した設定情報をバインドするオプションクラスを作成します。
プロパティ名を JSON のキー名と同じにします。（大文字小文字は違っても大丈夫です。）
今回はstring型、int型、Guid型にバインドしてみます。Startup.csで設定情報をオプションクラスにバインドし、DI コンテナに登録します。これだけで準備完了です。設定情報をバインドしたオプションクラスを利用するには、クラスのコンストラクタ引数にIOptionsMonitor&lt;TOptions&gt;を持つとOptionsMonitor&lt;TOptions&gt;のインスタンスが DI されます。
オプションクラスはOptionsMonitor.CurrentValueプロパティから得られます。今回はコントローラークラスを作成して設定情報を利用してみたいと思います。デバッグしhttps://localhost:ポート番号/api/optionsにブラウザでアクセスします。
以下の画像の通り設定情報がクラスにバインドされているのが確認できます。

レスポンスが返えります。(※ Chrome 拡張の Json Viewer で見やすくしています。)
設定情報をセクションに分けて JSON に記述する場合、以下のように読み込みます。ネストした設定情報がバインドされているのが確認できます。

ASP.NET Core で JSON ファイルを読み込むには、ConfigurationBuilderのAddJsonFile拡張メソッドを呼び出します。
ただし、Program.csのCreateDefaultBuilderメソッドで新しいWebHostBuilderを初期化すると、appsettings.jsonとappsettings.{環境名}.jsonは自動で読み込まれるため、今回はそちらに設定を記述しました。GitHub の以下のリポジトリに今回のサンプルを置きました。
今回省略した名前空間のインポートなどを確認する場合、こちらで確認ください。
https://github.com/sano-suguru/OptionsPattern従来の .NET Framework ではApp.configxmlファイルからSystem.Configuration名前空間のConfigurationSettings.AppSettings("キー名")を使って設定情報を読み込んでいました。戻り値は文字列です。 ↩


