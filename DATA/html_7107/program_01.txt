
public class StateSequencer {

    public class Item {
        public Action&lt;float, string, string&gt; state; //例としてパラメータは２個
        public string p1;
        public string p2;
    }

    Queue&lt;Item&gt; m_queue; //保持用キュー
    float m_elapsed;     //ステート経過時間

    Item m_curState;     //現在実行中セット
    Item m_nextState;    //次実行のセット

    public StateSequencer()
    { 
        m_queue = new Queue&lt;Item&gt;();
        m_curState  = null;
        m_nextState = null;
    }

    //実行登録
    public void Command(Action&lt;float,string,string&gt; func,string p1=null, string p2=null)
    {
        var i = new Item();
        i.state = func;
        i.p1 = p1;
        i.p2 = p2;
        m_queue.Enqueue(i);
    }

    //更新処理　上位関数から更新時呼び出しを想定
    public void Update()
    {
        m_elapsed += Time.deltaTime;

        if (m_curState == null)
        {
            if (m_queue.Count != 0)
            {
                m_nextState = m_queue.Dequeue();
            }
        }
        if (m_nextState != null)
        {
            m_curState  = m_nextState;
            m_nextState = null;
            m_elapsed = 0;
        }
        if(m_curState != null)
        {
            m_curState.state(m_elapsed, m_curState.p1, m_curState.p2);
        }
    }

    //ステートの終了告知用
    public void Done()
    {
        m_curState = null;
    }
}


