More than 5 years have passed since last update.前回「ステート処理はナァラティブに」の続きになります。私の信条は『プログラムを物語のように書く』です。難読、または冗長になりやすいステート処理を記述する上で欠かせないのが『ステート関数』です。『ステート関数』はゲームでのステート処理を簡潔に表現でき、複数のステートを一つのクラス内に纏めて記述でき、ステート間の共有データを簡単に保持できる便利な手法です。今度はこの『ステート関数』をもう一工夫し、【バッチ処理】へ対応する手法を紹介します。ステートのバッチ処理は、あらかじめ一連のステートをパラメータ付きで登録しておき、それを自動で一気に処理します。※ただしステートは同時に複数を実行するのではなく、ステートの完了を待って次のステートを実行する【同期処理】とします。バッチ処理でのステート登録は、ステート名とパラメータが一組となり登録されます。その登録関数がCommandです。書式は次のようになります。例えば、以下のような戦闘アクションの指定があるとします。① カメラフォーカスを"マリー"に設定し、0.2秒でフォーカス完了
② 武器"UZI" で２回攻撃
③ 武器"手裏剣" で１回攻撃
④ ターン制御へCommand関数を使い、以下のような記述で処理を表す事が出来ます。上記の通り分かり易く表現でき、ステートがパラメータを扱うことで、汎用性の高いプログラミングが可能となります。次にバッチ用のステート関数と管理クラスを説明します。前回紹介した『ステート関数』をバッチ処理用に改造します。前回の『ステート関数』の『初回呼出しを知らせる'bool値'』が、『ステート時間'float値'』に変わります。ゲームにおいてはタイミングを扱うことが多いため、『ステート時間（ステート処理の経過時間）』があると何かと便利なのです。最初の更新時を０秒とし、その後は経過時間が設定されます。登録時に設定されたパラメータを受けるための引数を追加します。廃止されたbool値に代わり、ステート時間が０の時に初期化処理を行います。ステートの終了通知関数【Done】を追加します。バッチ処理では管理クラスが次のステートを決定します。よって『前ステート関数』の次ステート指定関数【Goto】は廃止します。結果、以下のように表記します。管理クラスに『ステート登録と実行機能』を追加し、『バッチ用ステート関数』用の変更を行います。ステートとパラメータを一組のアイテムとし、その登録キューが用意されます。登録関数【Command】が、登録キューへの登録を行います。更新関数【Update】は、実行中ステートがない場合に、登録キューから次アイテムを取り出します。次アイテムのステートとパラメータが実行用として取り扱われます。ステート処理（経過）時間(m_elapsed)がメンバ変数に追加します。
ステートの初回更新時に０、それ以降は更新時間の差分を加算した値に設定されます。ステートの完了通知をするDone関数が用意されます。例としてUnityで作成した管理クラスを以下に示します。ソース上ではバッチ用管理クラスを、都合上『ステートシーケンサー』と命名しています。サンプルの概要は以下の通りです。Start()にて、実行するステートを登録。
以下の４つステートをCommandで呼び出す。S_START : 引数なし、１秒待ち
S_WORK1 : 引数１個、引数表示、１秒待ち　…　引数を変え２回呼出し
S_WORK2 : 引数２個、引数表示、２番目引数の指定時間待ち　…　引数を変え２回呼出し
S_END   : 引数なし、引数表示、１秒待ちUpdate()にてシーケンサーの更新関数(Update)を呼び出します。以下、Ｃ＃によるプログラム例となります。C++の例を示します。バッチ処理は『ステート処理を部品化』し、『プログラム内にバッチとして記述』して、プログラム作業を捗らせる大変便利な手法です。さらに外部テキストファイルからの登録を可能にすれば、スクリプトエンジンとしての応用も可能です。スクリプト化は、プログラマ以外のチームメンバとのデータ連携を簡単にすることが出来ます。前回の記事で紹介した手法を（管理クラス名から）『ステートコントロール』、今回を『ステートシーケンサー』と呼んでいます。紹介した２つの手法を使うことで、大概のゲームのステート処理を実装することが出来ます。よろしければ、どうぞご自由に活用ください。以上


