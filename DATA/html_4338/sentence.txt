More than 1 year has passed since last update.エンティティなり集約ルートなりを生成する場合にはファクトリから生成するべきというのはわかったんですけど、値オブジェクトの生成についてはDDD本には記述が見つけられなかったんですよ(あったらごめんなさい)。
IDDD本では値オブジェクトのコンストラクタの実装についての記述はあったんですが使用しているコードが見つけられなくて。
なので値オブジェクトの生成に関して自分なりの考察を投稿してみます。以下、それぞれについて記載します。良くない気がします。
値オブジェクトの不変条件のチェックをどこでやるかっていう話にもなるとは思うんですけど、不変条件を値オブジェクト内に閉じ込めようと思うとコンストラクタでチェックをしないといけなくなります。そこで違反していた場合、違反していることを伝えるためには例外を投げるしか方法がなくなるんですよね。(C#とか想定)
あとはファクトリメソッドパターンを適用しようとか事前条件を加えたいとか考えると柔軟性に欠ける気がします。自分的にはベターな手法です。
事前条件や不変条件を修正しやすいですし、戻り値をboolと値オブジェクトのタプルで返すようなメソッドを用意すれば事前条件や不変条件の違反を伝える術が例外に頼らなくて済みます。
もしアプリ起動中ずっと生存していて良いのならシングルトンパターンで記述しても良いですし。staticメソッドのデメリットとしてクラス名が変更した時全直しが必要ですけど、値オブジェクトの名前なんてそうそう変わるはずないですよね？(願望)
あとは値オブジェクトに依存性を注入する必要が出た場合、注入するためには使用元のクラスで注入してからstaticファクトリーメソッドの引数として渡さないといけないところですかね。けど値オブジェクトに注入することってあるんですかね？設計を見直した方が良い気がします。これはやりすぎな気がします。
1つの値オブジェクトにつき、ファクトリのインターフェースとファクトリの実装クラスが必要になっちゃいます。
値オブジェクトファクトリみたいにひとつにまとめるのもなんか違う気がします。(値オブジェクトのサービスロケータになってしまう)
使用するときも使用先でファクトリを注入しないと使えません。結局は場合によりけりなんでしょうけど。
他にも生成の方法やテクニックがありましたらご教示頂きたいです。


