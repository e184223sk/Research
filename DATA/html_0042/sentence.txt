※本記事は下記のエントリから始まる連載記事となります。
.NET5.0/C#9.0でオートシェイプ風図形描画ライブラリを作ろう！(Chapter0)前回 ドラッグ操作で図形のサイズを変更してみよう(その1） からの続きです。Capter3の内容は下記ブランチにて実装されています。実装の詳細はこちらをご確認ください。
https://github.com/pierre3/CoreShape/tree/blog/capter3前回は図形のサイズ変更用のつまみ「リサイズハンドル」を作成して、図形のサイズ変更をドラッグ操作で行えるようにしました。
しかし、まだ下記のような問題が残っています。今回はこれらの問題を解決していきたいと思います。の問題ですが、こちらはIShapeに選択状態か否かを示すプロパティを追加することで対応します。としたいところなのですが、その前にIShapeの実装を見直したいと思います。前回、リサイズハンドルもIShapeを実装するようにしましたが、こちらは選択状態か否かのパラメータを持つ必要がありません。リサイズハンドルに必要なのは今のところDraw()メソッドとHitTest()メソッドのみで、IsSelectedプロパティやDrag()メソッドは不要です。（前回、Drag()メソッドはNotImplementExceptionをThrowする実装としていました。）そこで、IShapeインターフェースを分解して利用するもののみを実装できるようにします。そして、IShapeは上記全て＋IsSelectedプロパティを実装します。一方、リサイズハンドルはIShapeではなく、IDrawableとIHitTestのみを実装するように変更します。それでは、RectangleShapeにIsSelectedプロパティを追加してみましょう。追加したら、IsSelectedがTrueの場合の時のみリサイズハンドルの HitTest()とDraw()を実施するように変更します。※リサイズハンドルに加えて図形に外接する四角形（=Bounds）を選択枠として表示します。
ただし、RectangleShapeの場合は図形の輪郭と一致するため、輪郭を描画しない（Strokeがnull）の場合のみ描画するようにしています。後はサンプルアプリ（SampleWPF）側でIsSelectedプロパティを設定する処理を追加するだけですね。SkElementにMouseDownイベントを追加して、マウスの左ボタンをクリックした際にマウスカーソルにヒットしている図形（ActiveShape）のみを選択状態（IsSelected=true）とします。これで図形の選択処理の実装は完了しました。アプリを実行して確認してみましょう！うん、いい感じですね。次に、下記問題について考えましょう。実際に動きを見てみると、下記の問題があることがわかります。どちらも、幅・高さがマイナスにならなければ問題は発生しません。また、マイナスになった場合でも図形自体の描画には影響がありません。
ですので、ドラッグ処理を終了した時点で、マイナスになった幅または高さがプラスになるように座標を入れ替えてあげればよさそうです。下記の処理を追加して幅・高さが常にプラスの値となるように調整するようにします。ちなみにSetBounds()メソッドではBoundsに値を設定後、リサイズハンドルの座標をBoundsに合わせて再設定しています。ここでリサイズハンドルの位置関係も正常に戻るはずです。これでCoreShape側の実装は完了です。サンプルアプリ側でDrop()メソッドを実行するように変更して確認してみましょう!SkElementにMouseUpイベントを追加して、ドラッグしていた図形（ActiveShape）のDrop()メソッドを呼ぶだけです。では、実行してみましょう。いい感じです。
マウスカーソルの矢印の向きが入れ替わることがなくなりました。当たり判定もできていますね。次回は、サンプルアプリ（SampleWPF）側の実装について考えてみたいと思います。


