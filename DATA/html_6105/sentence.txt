More than 3 years have passed since last update.Xamarin.Macを初めて触る人に贈る、Xamarin公式 Hello, Mac の日本語訳記事に引き続き。Xamarin.Mac を開発するときに使う Storyboard やその中で扱う View Controller、 Segue、 Window Controller に馴染みがなかったので公式記事で勉強するついでに日本語訳しました。この記事の内容と一番下で紹介されている SourceWriter Sample App を追えば多少キャッチアップできるかなぁと思っています。Storyboard は、特定のアプリのすべての UI を View Controller の機能概要に分けて定義します。 Xcode の Interface Builder では、これらのコントローラーはそれぞれ独自の Scene に存在します。
Storyboard　は、Xamarin.Mac アプリケーションのバンドルがコンパイルされて送り出されるときに含まれるリソースファイル（拡張子は .storyboard ）です。アプリケーションの最初の Storyboard を定義するには Info.plist ファイルを編集し、ドロップダウンボックスから Main Interface を選択します。コードから特定の Storyboard をロードし、View Controller を手動で作成する必要がある場合があります。次のコードでそれが可能です。FromName は、アプリケーションのバンドルに含まれている特定の名前の Storyboard ファイルを読み込みます。InstantiateControllerWithIdentifier は、指定された ID を持つ View Controller のインスタンスを生成します。UI をデザインするときに、Xcode の Interface Builder で ID を設定します。必要に応じて、InstantiateInitialController メソッドを使用して、Interface Builder で最初の Controller が割り当てられた View Controller をロードすることができます。Storyboard Entry Point と矢印でマークされています。View Controller は、Mac アプリケーション内の特定の View の情報とその情報を提供するデータモデルとの関係を定義します。Storyboard　の各トップレベル scene は、Xamarin.Mac アプリのコード内の1つの View Controller を表します。macOS で Storyboard をサポートするために NSViewController クラスにいくつかの新しいメソッドが追加されました。最も重要なのは、特定の View Controllerによって制御されている View のライフサイクルに応答するために使用される以下のメソッドです。さらに、NSViewController は ウィンドウの Responder Chain の一部になりました。また、カット、コピー、ペーストのメニュー項目の選択などのイベントを受けて​​応答するために繋がれています。この自動の View Controller 配線は、Mac OS X Yosemite　（10.10）以上で動作するアプリでのみ発生します。Storyboard では、View Controller （ Split View Controller や Tab View Controller など）は、他のサブビューコントローラを「含む」ように、 Containment を実装できます。子 View Controller には、それらを親 View Controller に結びつけ、画面から View を表示または削除するためのメソッドとプロパティが含まれています。macOSに組み込まれているすべての Container View Controller には、独自のカスタム Container View Controller を作成する場合に Apple が推奨する特定のレイアウトがあります。Collection View Controller には、それぞれ独自の View を含む1つまたは複数の View Controller が含まれる Collection View Item の配列が含まれています。Segue は、アプリの UI を定義するすべての Scene 間の関係を提供します。iOS の Storyboard での作業に馴染みがある場合は、通常、iOS　向けの　Segue　ではフルスクリーンビュー間の遷移を定義していることをご存知でしょう。これは macOS と異なります。Segue は通常「 Containment 」を定義し、ある Scene は親 Scene の子です。macOSでは、ほとんどのアプリは Split View や Tab などの UI 要素を使用して同じウィンドウ内でビューをグループ化する傾向があります。物理的な表示スペースが限られているために画面の表示と非表示を切り替える必要があるiOSとは異なります。macOSの containment には Modal Window, Sheet View、Popover などのPresentation Segue の使用が多いです。macOS は次の組み込み segue タイプを提供します。Presentation Segue を使用する場合は、親 View Controller の PrepareForSegue メソッドを表示の初期化のためにオーバーライドし、 View Controller に任意のデータを提供できます。（訳注: ここ訳怪しい… variable が何の目的語かわかりません）Triggered Segue では、（ Interface Builder の Identifier プロパティーを介して）名前付き Segue を指定し、ユーザーがボタンをクリックするか、コード内の PerformSegue メソッドを呼び出すなどのイベントによってトリガーさせることができます。Segue ID は、アプリケーションの UI をレイアウトするときに、 Xcode の Interface Builder 内で定義されます。Segue のソースとして動作している View Controller では、Segueが実行されて指定された　View Controller　が表示される前に、PrepareForSegue メソッドをオーバーライドして初期化を行う必要があります。必要に応じて、ShouldPerfromSegue メソッドをオーバーライドして、Segue が C＃ コードで実際に実行されるかどうかを制御できます。手動で表示された View Controller の場合は、DismissController メソッドを呼び出して必要なくなったときに表示から削除します。アプリケーションを作成するにあたり、macOS の組み込み Segue では提供されていない Segue タイプが必要なときもあります。そういうときは、アプリの UI をレイアウトするときに Xcode の Interface Builder で　割り当てることができるカスタム Segue を作成することができます。たとえば、（新しいウィンドウでターゲット Scene を開く代わりに）ウィンドウ内の現在の View Controller を置き換える新しい Segue タイプを作成するには、次のコードを使用します。いくつか注意すべきことがあります。この新しい Segue タイプを Xcode の Interface Builder で使用するには、まずアプリケーションをコンパイルしてから Xcode に切り替え、2つの Scene の間に新しい Segue を追加する必要があります。 Style を Custom に設定し、 Segue Class を ReplaceViewSegue （カスタム Segue クラスの名前）に設定します。Window Controller は macOS アプリケーションが作成できるさまざまな Window タイプを含み、制御します。Storyboard　の場合、以下の機能があります。View Controller と同様に、Window Controller は PerformSegue、 PrepareForSegue、 ShouldPerfromSegue メソッドを実装し、Segue 操作のソースとして使用できます。Window Controller　は　macOS　アプリケーションの以下の機能を担います。macOS の　Gesture Recognizer　は、iOS の機能とほぼ同じです。開発者は、アプリの UI の要素にジェスチャー（マウスボタンをクリックするなど）を簡単に追加することができます。しかし、iOS のジェスチャーがアプリのデザイン（2本の指で画面をタップするなど）によって決まるとすると、macOS　のほとんどのジェスチャーはハードウェアによって決まります。Gesture Recognizer　を使用すると、UI　のアイテムにカスタムインタラクションを追加するのに必要なコード量を大幅に削減できます。ダブルクリックとシングルクリックを自動的に判断できます。View Controller で MouseDown イベントをオーバーライドする代わりに、Storyboard を操作する際に Gesture Recognizer を使用してユーザー入力イベントを処理すべきです。macOS　では、以下の Gesture Recognizer が利用できます。Storyboard Reference　を使用すると、大きく複雑な　Storyboard デザインを取り込んで、元の　Storyboard　から参照される小さな Storyboard に分割し、複雑さを排除します。その結果、個々の　Storyboard　の設計と保守を容易にすることができます。さらに、Storyboard Reference　は、同じ　Storyboard　内の別の Scene または別の Storyboard の特定の Scene に アンカー を提供することができます。外部 Storyboard への参照を追加するには、次の手順を実行します。ソリューションエクスプローラで、新しい Storyboard 名をダブルクリックし、Xcode のInterface Builderで編集するために開きます。いつものように新しい Storyboard の scene のレイアウトをデザインし、変更を保存します。アプリが実行され、ユーザーが Segue を作成した UI 要素をクリックすると、Storyboard Referenceで指定された外部 Storyboard の Initial Window Controller が表示されます。外部 Storyboard （で Initial Window Controller でないもの）の特定の Scene への参照を追加するには、以下を実行します。アプリが実行され、ユーザーが Segue を作成した UI 要素をクリックすると、Storyboard Referenceで指定された外部 Storyboard から特定の Storyboard ID を持つ Scene が表示されます。同じ Storyboard の特定の Scene への参照を追加するには、以下を実行します。アプリケーションが実行され、ユーザーが Segue を作成した UI 要素をクリックすると、Storyboard Reference で指定された同じ Storyboard 内の指定された Storyboard ID を持つ Scene
 が表示されます。Xamarin.Mac アプリケーションで Storyboards を操作する複雑な例については、SourceWriter Sample App を参照してください。SourceWriter は、コード補完と簡単な構文ハイライトをサポートするシンプルなソースコードエディタです。SourceWriter コードはコメント付きで、利用可能な場合は重要なテクノロジーや方法から Xamarin.Mac
 ガイドの関連情報へのリンクが提供されています。


