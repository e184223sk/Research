More than 1 year has passed since last update.　Prismを使ってプログレスバーの付いたダイアログを作りました。
　進捗の値0~100をダイアログに送り、100のときにダイアログを閉じることができるという仕様にしました。.Net Core 3.1
Prism.Wpf 7.2.0.1422　ダイアログ用にプログレスバーと閉じるボタンが付いたViewを作成します。
　prism:Dialog.WindowStyleタグでダイアログとして呼び出された際のWindowStyleを制御しています。今回はできるだけダイアログを閉じられたくなかったのでWindowStyleにNoneを指定しウィンドウの閉じるボタンを非表示にしています。　ViewModelではViewのプログレスバーにバインドする項目としてProgressプロパティを定義しています。
　CloseCommadではダイアログを閉じるときの動作を担当しています。使用可否条件としてProgressの値が100以上であることを指定しています。
　ダイアログとして利用するためにIDialogAwareを実装しています。　ModelではViewModelとバインドする項目としてProgressプロパティを定義しています。
　外部からの値受け取りはIEventAggregatorを介して行うものとしProgressMessageが発行されたときにProgressの値が変化するようにしています。　Moduleでは他のプロジェクトでダイアログを利用できるようDIコンテナにViewとModelを登録しています。ModelはシングルトンとしてDIコンテナに登録しました。　ダイアログのプロジェクトとは別の画面を作り、そのViewModelにShowDialogCommandというダイアログの動作確認をするためのコマンドを用意しました。
　ShowDialogCommandでは、非同期処理呼び出しとダイアログ呼び出しの2つを実行しています。
　非同期処理では処理中にIEventAggregatorを介してProgressMessageを発行しModelに進捗を表す数値を送っています。ここでは1秒間隔でModelの進捗の値を変更しています。ContinueWithの第一引数部分には非同期処理でエラーになった際の処理を書く予定です。
　ダイアログ呼び出しはIDialogServiceのShowDialogを使って定義したダイアログを呼び出しています。　プログレスバーの付いたダイアログを作ることができました。他の画面から呼び出せることとプログレスバーの値を処理の進み具合によって制御できることを確認できました。・ソースコード
https://github.com/ttlatex/PrismProgressDialog


