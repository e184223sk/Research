
using UnityEngine;

 #if UNITY_EDITOR
 using System.Reflection;
 using UnityEditor;
 #endif



 namespace Sample
 {
     /// &lt;summary&gt;
     /// サンプルクラス.
     /// &lt;/summary&gt;
     public class Sample : MonoBehaviour
     {
         /// &lt;summary&gt;
         /// 何かしらのデータクラス.
         /// &lt;/summary&gt;
         [System.Serializable]
         public class HogeParam
         {
             [SerializeField] int id;

             public HogeParam(
                 int argId)
             {
                 id = argId;
             }
         }


         [SerializeField] string characterName;
         [SerializeField] HogeParam hoge;


 #if UNITY_EDITOR
         [CustomEditor(typeof(Sample))]
         class Class1Editor : Editor
         {
             public override void OnInspectorGUI()
             {
                 var component = target as Sample;

                 EditorGUILayout.LabelField("エディタ拡張だべ");

                 component.characterName = EditorGUILayout.TextField("キャラ名", component.characterName);

                 EditorGUILayout.LabelField("Hoge");
                 EditorGUI.indentLevel++;
                 // Reflectionを利用してパラメータを操作.
                 {
                     System.Type fieldType = component.hoge.GetType();
                     FieldInfo fieldInfo = fieldType.GetField("id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.NonPublic);
                     int tempId = (int)fieldInfo.GetValue(component.hoge);
                     fieldInfo.SetValue(component.hoge, (int)EditorGUILayout.IntField("ID", tempId));
                }
                EditorGUI.indentLevel--;
             }
         }
 #endif
     }
 }

