using UnityEngine;

#if UNITY_EDITOR
using UnityEditor;
#endif



namespace Sample
{
    /// &lt;summary&gt;
    /// サンプルクラス.
    /// &lt;/summary&gt;
    public class Sample : MonoBehaviour
    {
        /// &lt;summary&gt;
        /// 何かしらのデータクラス.
        /// &lt;/summary&gt;
        [System.Serializable]
        public class HogeParam
        {
            [SerializeField] int id;
            public int Id =&gt; id;

            public HogeParam(
                int argId)
            {
                id = argId;
            }
        }


        [SerializeField] string characterName;
        [SerializeField] HogeParam hoge;


#if UNITY_EDITOR
        [CustomEditor(typeof(Sample))]
        class SampleEditor : Editor
        {
            public override void OnInspectorGUI()
            {
                var component = target as Sample;

                EditorGUILayout.LabelField("エディタ拡張だべ");

                component.characterName = EditorGUILayout.TextField("キャラ名", component.characterName);

                 // privateなメンバなためアクセスできない,プロパティもゲッターのみなので値のセットはできない.
                //component.hoge.Id = EditorGUILayout.IntField("ID", component.hoge.Id);

            }
        }
#endif
    }
}


