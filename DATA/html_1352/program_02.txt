
public class LifetimeEventsHostedService : IHostedService
{
    private readonly IHostApplicationLifetime appLifetime;
    private readonly ILogger&lt;LifetimeEventsHostedService&gt; logger;
    private readonly IOptions&lt;AppSettings&gt; options;

    public LifetimeEventsHostedService(
        IHostApplicationLifetime appLifetime
        , ILogger&lt;LifetimeEventsHostedService&gt; logger
        , IOptions&lt;AppSettings&gt; options)

    {
        this.appLifetime = appLifetime;
        this.logger = logger;
        this.options = options;
    }

    public Task StartAsync(CancellationToken cancellationToken)
    {
        appLifetime.ApplicationStarted.Register(OnStarted);
        appLifetime.ApplicationStopping.Register(OnStopping);
        appLifetime.ApplicationStopped.Register(OnStopped);

        logger.LogInformation("StartAsync");
        return Task.CompletedTask;
    }

    public Task StopAsync(CancellationToken cancellationToken)
    {
        logger.LogInformation("StopAsync");
        return Task.CompletedTask;
    }

    private void OnStarted()
    {
        logger.LogInformation("OnStarted");
        logger.LogInformation($"{options.Value.Group.Item1}{options.Value.Group.Item2}");
    }

    private void OnStopping()
    {
        logger.LogInformation("OnStopping");
    }

    private void OnStopped()
    {
        logger.LogInformation("OnStopped");
    }
}

