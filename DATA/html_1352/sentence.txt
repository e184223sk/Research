.NET Core 3.1 でバッチを作成する機会があり、Console Application 作成について調べたことのまとめ。ASP.NET Core では Web ホストを生成するが、Console Application では、汎用ホストを利用する。
汎用ホストを利用することで、DI や設定ファイルの取得などが簡単に実現できる。
https://docs.microsoft.com/ja-jp/aspnet/core/fundamentals/host/generic-host?view=aspnetcore-3.1汎用ホストを利用するために必要なパッケージをインストールする。NLog を利用したい場合は、以下パッケージも追加。Host.CreateDefaultBuilder の規定の動作に何も追加する必要がなければ、ConfigureAppConfiguration、ConfigureLogging、ConfigureServicesは不要。
（ただし、DI したい場合がほとんどだと思うので、ConfigureServices は必要になってくる）プロジェクトに appsettings.json を追加すれば、既定の動きとして値を取得してくれる。
また、appsettings.json 内に NLog の設定値を記載できる。（NLog.config の追加が不要）Host.CreateDefaultBuilder で appsettings.json の読み込みを行ってくれる。
読み込んだ値をクラスに展開（オプションパターン）しておくと、いろいろなところで使えて便利。
appsettings.json の形に合わせたクラスを定義する。実行時に appsettings.json が必要なため、ファイルのプロパティを以下に変更しておく。https://docs.microsoft.com/ja-jp/aspnet/core/fundamentals/host/generic-host?view=aspnetcore-3.1#ihostapplicationlifetime
上記を参考に、IHostedService を実装する。
logger と options を使えるようにしたサンプル。上記を実装後、Program.cs の ConfigureServices を修正すれば、logger と options の使用が可能。


