
public class RectangleShape : IShape
{
    //...(省略)
    protected ResizeHandleCollection ResizeHandles { get; set; }

    public RectangleShape(Rectangle bounds)
    {
        Bounds = bounds;
        HitTestStrategy = new RectangleHitTestStrategy();
        //ResizeHandleColection作成後、Boundsに合わせて配置
        ResizeHandles = new ResizeHandleCollection(8, 8);
        ResizeHandles.SetLocation(Bounds);
    }

    public RectangleShape(Rectangle bounds, IHitTestStrategy&lt;RectangleShape&gt; hitTestStrategy)
    {
        Bounds = bounds;
        HitTestStrategy = hitTestStrategy;
        //ResizeHandleColection作成後、Boundsに合わせて配置
        ResizeHandles = new ResizeHandleCollection(8, 8);
        ResizeHandles.SetLocation(Bounds);
    }

    //...(省略)

    public virtual void Draw(IGraphics g)
    {
        if (Fill is not null)
        {
            g.FillRectangle(Bounds, Fill);
        }
        if (Stroke is not null)
        {
            g.DrawRectangle(Bounds, Stroke);
        }
        //リサイズハンドルをまとめて描画
        ResizeHandles.Draw(g);
    }

    public virtual HitResult HitTest(Point p)
    {
        //リサイズハンドルにヒットしたらそのハンドルのHitResultを返却
        //図形本体にヒットしたらHitResult.Bodyを返却
        //ヒットしなかった場合はHitResult.Noneを返却
        var hitResult = ResizeHandles.HitTest(p);
        if (hitResult is not HitResult.None)
        {
            return hitResult;
        }
        return HitTestStrategy.HitTest(p, this) ? HitResult.Body : HitResult.None;
    }

    public virtual void Drag(Point oldPointer, Point currentPointer)
    {
        //ResizeHandleがActive(=ドラッグ対象)の場合
        //ハンドルのResize()メソッドを実行して、結果をRoundsに設定する
        if (ResizeHandles.ActiveHandle is not null)
        {
            SetBounds(ResizeHandles.Resize(currentPointer, Bounds));
            return;
        }
        //ハンドル以外では、図形全体の移動処理を行う
        var (dx, dy) = (currentPointer.X - oldPointer.X, currentPointer.Y - oldPointer.Y);
        SetBounds(new Rectangle(Bounds.Left + dx, Bounds.Top + dy, Bounds.Size.Width, Bounds.Size.Height));
    }

    protected void SetBounds(Rectangle bounds)
    {
        //図形の座標（Bounds）変更時、それに合わせてリサイズハンドルの位置も更新する
        Bounds = bounds;
        ResizeHandles.SetLocation(bounds);
    }
}

