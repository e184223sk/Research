※本記事は下記のエントリから始まる連載記事となります。
.NET5.0/C#9.0でオートシェイプ風図形描画ライブラリを作ろう！(Chapter0)今回は下準備として用意するものが多いので、複数回に分割して書きます。Capter3の内容は下記ブランチにて実装されています。実装の詳細はこちらをご確認ください。
https://github.com/pierre3/CoreShape/tree/blog/capter3通常図形のサイズを変更する場合、下図の□マークのような"つまみ"を操作すると思います。
まずは、この"つまみ"を表現するクラスを用意するところから始めましょう。
なお、以降ではこの"つまみ"の事を「リサイズハンドル」と呼ぶことにします。リサイズハンドルは、その位置によって動作が異なります。また、マウスポインタを重ねた際のカーソルの形状も異ります。そこで、当たり判定時でヒットした際にマウスポインタが図形のどの部分に位置しているかを示すHitResult列挙型を定義します。ResizeXXが各リサイズハンドルの位置に対応しています。
Resizeの後ろのアルファベットは、画面上を北とした際の方角の頭文字を表しています。
（例えば N = North, NE = North East）
また、Noneはヒットしていない状態、Bodyは図形の本体部分にヒットした場合を示す値です。次に全てのリサイズハンドルのベースとなる抽象クラスResizeHandleBaseを定義します。
リサイズハンドルも描画や当たり判定などを行う必要がありますので、IShapeインターフェースを実装して作成することとします。基本的にはRectangleShapeと同じように作りますが、リサイズハンドル用にカスタマイズします。それに伴ってIShapeのHitTestメソッドの戻り値もboolからHitResultに変更しますリサイズハンドルではDragメソッドを使いません。その代わりに（そのリサイズハンドルを持つ親の）図形の座標を変更するResizeメソッドを定義します。
また、図形の座標に追従してリサイズハンドルの位置も更新する必要があるため、これを行うメソッドSetLocationメソッドも定義します。基底クラスResizeHandleBaseの定義はこれで完了です。それでは、ResizeHandleNを例に具体的なハンドルの定義に取り掛かりましょう。ResizeHanldeBaseを継承し、抽象メソッドResize()メソッドとSetLocation()メソッドをオーバーライドします。Redizeメソッドではドラッグ先のマウス座標（p）と親となる図形のBounds（parentBounds）を受け取り、リサイズ後のBounds座標を返します。ResizeHandleNは Bounds の上辺中央のつまみを表します。
Resizeメソッドでは 上辺の位置がマウスポインタのY座標の位置に移動し、その結果図形の高さも変化します。SetLocationメソッドでは、変更された親図形のBoundsに合わせて自身の位置を再設定します。ResizeHandleNでは、親となる図形の Bounds の上辺中央に合わせるように設定します。他のリサイズハンドルも同様に作成します。リサイズハンドルの準備ができましたら、これら8つのハンドルをまとめて処理するためのクラスResizeHandleCollectionを定義します。各ハンドルはコンストラクタでItemsプロパティにReadOnlyCollection&lt;ResizeHandleBase&gt;として作成します。
コンストラクタでは、（今のところ）ハンドルのサイズのみが指定できるようにしています。そして、ハンドルを操作する下記の処理を追加します。それではハンドルの準備ができましたので、RectangleShapeのメンバーにResizeHandleColectionを追加して
図形の変形（リサイズ）機能を実装してみましょう。コンストラクタでハンドルの初期化を行ったら、 Draw（）、 HitTest()、Drag()メソッドの処理を下記のように書き換えます。処理の詳細はコード内のコメントを参照してください。ここまででライブラリ（CoreShape）側準備はできました。WPFアプリ側では大きな変更はありませんが、ヒットした部位に応じてマウスカーソルの形状を変更する必要があります。MouseMoveイベントハンドラ内でHitTest()で返却されたHitResultの値を見て、それに合ったカーソルに変更する処理を追加します。これでひとまず動かせる状態にはなりました。では、実際に動かしてみましょう！うん。ちゃんと動いていますね。ここまでで、基本的な動作の実装は完了しました。ですが、これではまだ下記のような問題があります。次回はこのあたりの問題を解消するよう実装を進めていきたいと思います。


