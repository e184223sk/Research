
...
public class JobCaptureExtAsync : JobAsync
{
    public int run;
    public int index;
    public bool anchor;
    public Vector4 intrinsics;
    public Matrix4x4 rotation;
    public Vector3 position;
    public double latitude;
    public double longitude;
    public double altitude;
    public string encodedImage;
    public string imagePath;
    public Action&lt;SDKImageResult&gt; OnResult;

    public override async Task RunJobAsync()
    {
        Debug.Log("*************************** JobCaptureAsync ***************************");
        this.OnStart?.Invoke();

        SDKImageRequestExt r = new SDKImageRequestExt();
        r.token = "自分のtokenを入れてください";
        r.run = this.run;
        r.index = this.index;
        r.anchor = this.anchor;
        r.px = position.x;
        r.py = position.y;
        r.pz = position.z;
        r.r00 = rotation.m00;
        r.r01 = rotation.m01;
        r.r02 = rotation.m02;
        r.r10 = rotation.m10;
        r.r11 = rotation.m11;
        r.r12 = rotation.m12;
        r.r20 = rotation.m20;
        r.r21 = rotation.m21;
        r.r22 = rotation.m22;
        r.fx = intrinsics.x;
        r.fy = intrinsics.y;
        r.ox = intrinsics.z;
        r.oy = intrinsics.w;
        r.latitude = latitude;
        r.longitude = longitude;
        r.altitude = altitude;
        byte[] image = File.ReadAllBytes(imagePath);
        r.b64 = System.Convert.ToBase64String(image);

        //JSON作成とアプリのデータパスに保存します。
        string jsonData = JsonUtility.ToJson(r);
        var pathJSON = Application.persistentDataPath + "/Capture_"+ this.index.ToString() +".json";
        StreamWriter writer = new StreamWriter(pathJSON, false);
        writer.WriteLine(jsonData);
        writer.Close();   

    }
}
...

