前回の記事でImmersalのサンプルをレビューしました。今回はImmersalのREST APIを話します。最近の携帯のカメラで写ったが画像はかなりすごいです。そのせいで、写った画像のサイズもかなり大きいです。一枚画像には3~10Mbまではかかりそう。自分のデータプランは最小の3Gb/月なので、アップロードが大変。アップロードスピードも携帯ネットワークを使用すれば遅いと思います。この記事でAPI叩きでマッピング方法を纏めます。前回の記事
https://qiita.com/brocolly/items/d97f406aa18440d291a3参考
https://immersal.gitbook.io/sdk/unity/unity-sample-project
https://immersal.gitbook.io/sdk/cloud-service/rest-apiこの記事ではARCoreサポートされたAndroid携帯、Xiaomi Redmi Note 7を利用します。手順を話す前に、基本の流れを説明します。SampleアプリのMappingシーンをベースとして、画像をアップロードしないように、新しスクリプトを作ります。まずはJSONスキームを作成します。Assets/ImmersalSDK/Core/Scripts/Rest.csと言うスクリプトを開けて、SDKImageRequestを検索します。これが元のJSONスキームです。新しいのJSONスキームで、endpointの編集を削除します。新しコードは下になります。このコードは上のImmersalRestExt.csに入れます。次は画像アップロードの機能をJSON作成に変更します。ベースコードはAssets/ImmersalSDK/Core/Scripts/RestJobAsync.csであります。このコードでImmersalのアップロード機能を新しいコードで削除します。新しコードは下になります。このコードは上のImmersalRestExt.csに入れます。これでアップロード機能JSON作成に変更します。次はAssets/ImmersalSDK/Samples/Scripts/Mapping/Mapper.csを編集します。protected override async void Capture(bool anchor)の下にJobCaptureAsyncからJobCaptureExtAsyncに変更します。これでコード編集は終わり、アプリをビルドします。ビルドする時PlayerSettingsでPackage Nameを覚えてください。
これでは実験します。Sample通り複数の画像を取ってください。撮影した時、画像の数はここに更新してないので、ご注意。JSONファイルはこれで保存しました。Androidをパソコンで繋がって、データを読み込みます。保存したデータのパスはAndroid/data/「packagename」/filesです。「packagename」は、先ほど説明した、PlayerSettingsでビルドする前です。「Capture_~」ファイルは全て画像とPoseのJSONデータです。そのファイルを全てパソコンの同じフォルダーで移動してください。まずはワークスペースをリセットしよう。参考
https://immersal.gitbook.io/sdk/cloud-service/rest-api/python-examples#clear-the-workspace-image-bankコードを実行して、ワークスペースがリセットになる。次は画像アップロードをします。
参考
https://immersal.gitbook.io/sdk/cloud-service/rest-api/python-examples#submit-an-image-to-workspace-image-bankコードを実行して、画像のアップロードします。アップロード時間は画像の数によって異なります。
画像アップロードが完了した場合は、次のマップ作成をします。13枚の画像でマップとモデルを作成します。作成したマップはポータルで見られる。参考
https://immersal.gitbook.io/sdk/cloud-service/rest-api/python-examples#start-map-constructionまずはREST APIでServer Localizationを試します。まず、さっきのロッカーの画像を撮影しました。
参考
https://immersal.gitbook.io/sdk/cloud-service/rest-api/python-examples#server-localizationコード実行します。画像はマップにいるなら、結果は下になります。画像はマップのリストの中に一部じゃない場合は結果はしたになります。前回の記事でモデル配置を説明したので、あのサンプルに参考して、今回はVPS(Visual Positioning Service)を試します。参考
https://qiita.com/brocolly/items/d97f406aa18440d291a3#content-placement--%E3%83%A2%E3%83%87%E3%83%AB%E9%85%8D%E7%BD%AE


