
public class GenericOperation&lt;T&gt;
{
    public GenericOperation()
    {
        var availableT = new Type[]
        {
            typeof(int), typeof(uint), typeof(short), typeof(ushort), typeof(long), typeof(ulong), typeof(byte),
            typeof(decimal), typeof(double)
        };
        if (!availableT.Contains(typeof(T)))
        {
            throw new NotSupportedException();
        }
        var p1 = Expression.Parameter(typeof(T));
        var p2 = Expression.Parameter(typeof(T));
        Add = Expression.Lambda&lt;Func&lt;T, T, T&gt;&gt;(Expression.Add(p1, p2), p1, p2).Compile();
        Subtract = Expression.Lambda&lt;Func&lt;T, T, T&gt;&gt;(Expression.Subtract(p1, p2), p1, p2).Compile();
        Multiply = Expression.Lambda&lt;Func&lt;T, T, T&gt;&gt;(Expression.Multiply(p1, p2), p1, p2).Compile();
        Divide = Expression.Lambda&lt;Func&lt;T, T, T&gt;&gt;(Expression.Divide(p1, p2), p1, p2).Compile();
        Modulo = Expression.Lambda&lt;Func&lt;T, T, T&gt;&gt;(Expression.Modulo(p1, p2), p1, p2).Compile();
        Equal = Expression.Lambda&lt;Func&lt;T, T, bool&gt;&gt;(Expression.Equal(p1, p2), p1, p2).Compile();
        GreaterThan = Expression.Lambda&lt;Func&lt;T, T, bool&gt;&gt;(Expression.GreaterThan(p1, p2), p1, p2).Compile();
        GreaterThanOrEqual = Expression.Lambda&lt;Func&lt;T, T, bool&gt;&gt;(Expression.GreaterThanOrEqual(p1, p2), p1, p2).Compile();
        LessThan = Expression.Lambda&lt;Func&lt;T, T, bool&gt;&gt;(Expression.LessThan(p1, p2), p1, p2).Compile();
        LessThanOrEqual = Expression.Lambda&lt;Func&lt;T, T, bool&gt;&gt;(Expression.LessThanOrEqual(p1, p2), p1, p2).Compile();
    }

    public Func&lt;T, T, T&gt; Add { get; private set; }
    public Func&lt;T, T, T&gt; Subtract { get; private set; }
    public Func&lt;T, T, T&gt; Multiply { get; private set; }
    public Func&lt;T, T, T&gt; Divide { get; private set; }
    public Func&lt;T, T, T&gt; Modulo { get; private set; }
    public Func&lt;T, T, bool&gt; Equal { get; private set; }
    public Func&lt;T, T, bool&gt; GreaterThan { get; private set; }
    public Func&lt;T, T, bool&gt; GreaterThanOrEqual { get; private set; }
    public Func&lt;T, T, bool&gt; LessThan { get; private set; }
    public Func&lt;T, T, bool&gt; LessThanOrEqual { get; private set; }
}

