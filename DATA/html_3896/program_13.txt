
public static async Task ForEachAsyncNoLock&lt;T&gt;(this IEnumerable&lt;T&gt; source, Func&lt;T, Task&gt; action, CancellationToken cancellationToken = default(CancellationToken), bool configureAwait = false)
{
    if (source == null) throw new ArgumentNullException("source");
    if (action == null) throw new ArgumentNullException("action");

    var tasks = new List&lt;Task&gt;();

    foreach (var item in source)
    {
        cancellationToken.ThrowIfCancellationRequested();

        var task = action(item);
        tasks.Add(task);
    }

    await Task.WhenAll(tasks).ConfigureAwait(configureAwait);
}

