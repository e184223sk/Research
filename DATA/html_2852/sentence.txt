More than 1 year has passed since last update.この記事はC#言語仕様を翻訳してみたシリーズの第2項である。
他の項の翻訳も見たい場合は以下のリンクから確認できる。また、この記事を書く経緯や翻訳方針についての説明は第1項 はじめに を参照していただきたい。この記事ではHello worldを翻訳する。“Hello, World”プログラムはプログラミング言語の紹介に伝統的に使われています。
これはC#のHello Worldプログラムです。通常、C#のソースファイルの拡張子は.csです。
この"Hello, World"プログラムがhello.csというファイルに保存されているとすると、マイクロソフトのC#コンパイラで以下のコマンドでコンパイルすることができます。hello.exeという実行可能なアセンブリが生成されます。このアプリケーションを実行した時の出力は以下の通りです。この"Hello, World"プログラムはusingディレクティブで始まっており、System名前空間を参照しています。名前空間はC#のプログラムとライブラリを階層的に整理するための手段です。名前空間は型と他の名前空間を含みます。
例えば、System名前空間はプログラムで参照されているConsoleクラスやIO、Collectionsといった名前空間を含んでいます。
特定の名前空間を参照するusingディレクティブを使用すると、その名前空間のメンバーである型を修飾せずに使用できます。
usingディレクティブのおかげで、System.Console.WriteLineをConsole.WriteLineと省略できます。"Hello, World"プログラムで宣言されたHelloクラスはMainと名付けられたメソッドを一つ持っています。
Mainメソッドはstatic修飾子で宣言されています。
インスタンスメソッドがthisを使って特定のインスタンスオブジェクトを参照できるのに対し、スタティックメソッドは特定のオブジェクトを参照せずに使用できます。
決まりごととして、Mainと名付けられたスタティックメソッドはエントリーポイントとして機能します。プログラムの出力はSystem名前空間のConsoleクラスのWriteLineメソッドによって生成されます。
このクラスはデフォルトではマイクロソフトのC#コンパイラによって自動的に参照される.NET Frameworkのクラスライブラリによって提供されます。
C#自身は個別のランタイムライブラリを持たないことに注意してください。
その代わり、.NET FrameworkはC#のランタイムライブラリです。Program structureを翻訳予定。それではまた。
TomoProg


