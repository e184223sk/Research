早速ですがYamlファイルで初期設定したいですよね。少なくとも私はそうでした.C#で使う方法としてはNuGetで配布されているYamlDotNetというパッケージを使うのが一番手っ取り早そうだったので今回触ってみたところ、参考資料が少なくて少し不便だったので備忘録も兼ねて今回共有できたらなと思いました。ドキュメントとか用意してくれてるんですけど少し古いっぽくてエラー出てきちゃったんですよね。。。元も子もないんですけど、一応最新のはずのGithubのリンクを貼っておきます。これを読んだらこんな記事読む必要無いです💦（ https://github.com/aaubry/YamlDotNet ）それでは書いていきます！Windows10
Visual Studio 2019
.NetCore 3.1.0
YamlDotNet 11.1.1「プロジェクト」タブ（①）→「NuGetパッケージの管理」（②）と選択
「参照」タブを選択して、検索ボックスに「YamlDotNet」と入力①、②の順にクリックしてインストールすれば完了、インストール済みのところにYamlDotNetが追加されているはず
チートシートを書きたいわけではない（書けるはずもない）のでここでは今回実装するにあたって知っておけば良さそうな情報をここでは共有します。Serializer.Serialize
TextWriterとシリアライズしたい情報をもったオブジェクトを渡すと、TextWriterで設定されている出力先パスにファイルを作成してくれます。また、オブジェクトのみを渡すとStringが返ってきて、オブジェクトの中身を見れる便利機能もありました。Deserializer.Deserialize
ジェネリックに自分で定義したオブジェクト型を渡して、引数にStreamReaderやSystem.Stringを渡すことで、文字列情報をオブジェクトにデシリアライズしてくれます。
また、横道に逸れますがDeserializerBuilderを使ってデシリアライザをビルドすることで、Yamlファイルに出力される文字列の表記をキャメルケースやスネークケースに変えてくれたりするような細かい設定ができるようになります。YamlStream
メンバ関数のLoadの引数にTextReaderを渡すと、辞書型で各ノードの情報が格納されたYamlStream型が取得できます。
メンバ変数のDocumentsには、Yamlの区切り文字---または終端文字...を認識して、複数のドキュメントとして配列にして返してくれます。Documents配列内の変数の型は、YamlNodeという基底クラスを継承したノード達が格納されています。厳密な部分は少し端折っていますが、このDocumentの中を型に注意しながら見ていけばいいんだなぁというのが伝われば幸いです。YamlNode
以下で紹介する各ノード種類の継承元クラス。以下がモデルの構成図です。

（引用元：https://yaml.org/spec/1.2/spec.html ）YamlScalarNode
子要素を持たないノード（葉ノード）です。アクセサであるValueを持っています。YamlSequenceNode
ノードが格納されている配列型です。子を持つ配列形式のノードはこの型になります。YamlMappingNode
ノードが格納されている辞書型です。子を持つハッシュ形式のノードはこの型になります。とりあえずこのくらいに対応すれば一通り流れがつかめると思うのでこれで行きます。それではやっていきましょう！まずは出力先のフォルダです。
私は今回、C\DQ\フォルダを作成し、そこに出力していきます。自分の中の勝手な風習として先に読み込みたいんですけど、先にファイル用意したほうが手打ちより楽そうなのでこっちから行きます（もうQiitaのマークダウンで書いているが）。それではオブジェクトを使うパターンとそうでないパターンの2種類のコードを書いていきます。まずは地道にオブジェクトを作ります。この時、変数名がYamlファイルのキーとして出力されてくるので、出力する分にはいいですが、読み込む際には十分に注意する必要があります。それでは適当な関数を用意して、シリアライズしていきます。出力結果はこんな感じ。
どうせなのでもう1パターン。YamlMappingNodeのAdd関数を使っていく方法です。自分的にはこっちの方が好みです。出力結果はこんな感じ

YamlStream.SaveでシリアライズしたYamlファイルの末尾には自動で終端記号の...がつくみたいですね。
気になるようでしたらオブジェクトを使って出力すれば解決できそう←こちらもオブジェクトを使うパターンとそうでないパターンの2種類のコードを書いていきます。オブジェクトは先ほど定義したものを再利用して、デシリアライザを使ってオブジェクトを取得する関数を作成します。ではこれで返ってくるオブジェクトを早速確認してみます。最後にわざわざオブジェクト作らないで省エネに行くコードを書きます。まずはストリームで読み込んだ後に、YamlStreamってところに渡したら勝手にドキュメントごとに分割して返してくれます。
ドキュメントごとというのは、Yamlファイルの区切り文字である---のことですね。今回は1つだけ（---は使っていない）なので、決め打ちで配列の0番を指定しちゃいます。また、仕様だと思いますが、終端文字の...を記述していても、Documentsには追加されてしまいます。繰り返しとはなりますが、DocumentのgetterにはAllNodesとRootNodeの2種類あります。今回はRootNodeからたどっていく方法で実装していきます。RootNodeからたどっていくとこんな感じの書き方になるんですかね？
最後のforeach内でYamlSequenceNodeにキャストしているのは、YamlNodeにGetEnumeratorが実装されていない（foreachが使えない）からです。一回子どもに行くとYamlNodeになってしまうのでキャストします。また、Classes以降はKeyは表示してないんですが、やるとしたらこんな感じになります。Classesは配列型で定義しているのでまずはYamlSequenceNodeにキャストしてから、その子要素が配列型じゃなくなるタイミングでKeyValuePairが継承されているYamlMappingNodeにキャストすることでKeyValueが取得できます。
ですのでこれらを踏まえると、YamlNodeのgetterに存在するNodeTypeをチェックして配列型の時のみYamlMappingNodeにキャストするみたいな方法をとればKeyの手打ち入力は完全に不要になるはずです。
これで得体のしれないYamlファイルを読み込めます！（そんな場面があるのかはさておき）どうですかYamlDotNet！すごい便利！ステマじゃないですよ？
日本語の資料が少ないのが自分としては本当にネックなので皆さんでこの閑散とした世界を活発にしていきましょう！また、配列の要素が1つしかないのに配列で定義していたりと意味の分からないコードになっていますが、サンプルになればいいなと思い書いたのでusing 温かい目で見守ってください。Githubにも今回のコードを全て関数にして置いておいたので、ぜひ使ってください。
https://github.com/miwazawa/YamlDotNetSample
少しでも実装の手助けになったらハピネスです。
最後までありがとうございました！全体的にはほぼGithubとドキュメント
Github : https://github.com/aaubry/YamlDotNet
ドキュメント : https://aaubry.net/pages/yamldotnet.htmlシリアライズ
https://csharp.hotexamples.com/jp/examples/YamlDotNet.RepresentationModel.Serialization/Serializer/Serialize/php-serializer-serialize-method-examples.htmlデシリアライズ
https://csharp.hotexamples.com/jp/examples/YamlDotNet.RepresentationModel.Serialization/Deserializer/Deserialize/php-deserializer-deserialize-method-examples.html


