More than 3 years have passed since last update.私はPLCに関しては完全に素人で触れたことがありませんでしたが、関わっていた案件で「シーケンサの制御をソフト側から行って欲しい」という要望があり、MXComponentを使って実現する流れになりました。
しかしマニュアルやI/F仕様書を読んでも初めは全く分からない状態でしたが、動かしたり試行錯誤するなかで色々分かってきたので書き記したいと思います。PLCは様々な機械（ロボットとか）の制御を行う制御装置です。
特に三菱電機製のPLCは「シーケンサ」と呼びます。MXComponentは三菱電機製のツールで、シーケンサをPCから制御できるツール・ライブラリ群です。MX Component v4をsetup.exeからインストールする。体験版の場合はsw4dnc-act-j_14q_try\EnvMEL\setup.exeスタートメニューの[MELSOFT]-[MX Component]配下に以下3つのアプリが登録されるはずです。
- シーケンサモニタユーティリティ
- ラベル管理ユーティリティ
- 通信設定ユーティリティ「通信設定ユーティリティ」を使用してシーケンサとの通信設定を作成します。
基本はウィザード通りに進めていけば良いですが、設定内容は使用するシーケンサと接続方法になりますので、環境に合ったものを選択していきます。
プログラムから呼び出す際に重要なのは「論理局番」です。C#側からはこの数値を指定して接続するシーケンサを識別します。ちなみにLAN接続の通信設定を行うと以下のような画面になります。
既にシーケンサと接続できる環境なら「通信テスト」を行いましょう。「ラベル管理ユーティリティ」を使用してデバイスに紐づくラベル（システムラベル）を設定します。以下の手順でシステムラベルを登録します。
1. 管理者権限で「ラベル管理ユーティリティ」を開く
2. 「ラベルスペース」を選択（もしくは新規作成）
3. 「論理局番」に先に設定した局番を指定
4. 「システムラベルリスト」を選択（もしくは新規作成）
5.  システムラベル名に適当な識別名を設定（”M”とか”1”とか”2”とかデバイス名と被る文字は使用できないようだ。ちょっと気持ち悪いけど日本語にしておくと確実に被らない）
6.  データ型とデバイスを指定し、保存する。
7.  Windowsサービスの「MX Label Management Service」を再起動する。プログラムとシーケンサを接続する為に、MXComponentは3種類のコントロールを提供しています。今回はC#からの使用を考えていますが、マニュアルを見る限りWindowsフォームコントロールしか提供されません。
しかしイマドキWindowsフォームは使いたくありませんし、ユーザー操作での制御ではなくプログラム制御を行いたかったので、普通にインスタンス化して使用しました。（マニュアル外の使用方法でしたが問題なく動作しました）.Netにもプロパティ設定のコントロールがあれば前述の「通信設定」と「ラベル設定」はユーティリティでの設定ではなくプログラムに書けるのに何故か無い。。。マニュアルにはライブラリ（dll）のプロパティで「相互運用型の埋め込み」をFalseにするよう記述があるが、デフォルトでFalseになっているので気にしなくて良い。DotUtlTypeのインスタンスを作成する。ActLogicalStationNumberには論理局番を設定する。
事前に論理局番:1を作成している為、ここでは1を設定PLCに接続していない状態でOpenするとアプリが固まる（デフォルトで60秒後にタイムアウトする）
この時アプリを強制終了するとブルースクリーンになるので注意デバイス1点のデータを取得する。
以下の例ではビットデバイス（内部リレー）のデバイス：M0からデータを1bit読み出す。
メソッドの第一引数はラベル名（ラベル管理ユーティリティで作成したシステムラベル）を指定する必要があるので注意&gt; READ : 1以下のようなデータが入っている場合、最下位ビットの1が返る基本はGetDeviceと同じだが、データをshortで取得する。
ビットデバイスを扱う分には1bitしかデータが返らないのでintでもshortでも変わらない。デバイスの一括読出しを行う。
以下の例ではデバイス：M0～M15まで一括で取得する。一括読出しの為、ビットデバイスの場合は16の倍数単位でしか読みだせない。&gt; READ : 25001以下のようなデータが入っている場合、下位16ビットが返る基本はReadDeviceBlockと同じだが、データをshort配列で取得する。
ReadDeviceBlockは取得できるデータがint配列の為、1要素で最大4Byte取得できると思えるが
1要素あたり16ラベル分2Byteしかデータが返らない。（上位2Byteは常に0)
その為ビットデバイスを扱う分にはどちらでもよいデバイス1点にデータを書き込む。
以下の例ではビットデバイス（内部リレー）のデバイス：M0にデータを書き込む。以下のようなデータが入っている場合、最下位ビットが書き換わる基本はSetDeviceと同じ、データをshortで書き込む。デバイスの一括書き込みを行う。
以下の例ではデバイス：M0～M15まで一括で書き込みする。Readと同様、ビットデバイスの場合は16の倍数単位でしか書き込めない&gt; WRITE : 44806以下のようなデータが格納される。sizeを増やすと16の倍数で書き込めるデバイスが増えていく
※デバイスの番号順に下位ビットから格納されていく基本はWriteDeviceBlockと同じだが、データをshort配列で取得する。
WriteDeviceBlockは書き込めるデータがint配列だが、下位2Byteしか書き込まれない（上位2Byteは常に0)。
その為ビットデバイスを扱う分にはどちらでもよい


