
public interface ITree
{
    ITree Parent{get;}
    IReadOnlyList&lt;ITree&gt; Children{get;}
}

public class Tree : ITree
{
    private sealed class ImaginaryRoot : ITree
    {
        public ITree Parent =&gt; throw new InvalidOperationException("Imaginary root doesn't have Parent element.");

        public IReadOnlyList&lt;ITree&gt; Children =&gt; throw new InvalidOperationException("Imaginary root doesn't have Children.");
    }

//パージされたなど弁別したいときは増やせる
    private sealed class PurgedRoot : ITree
    {
        public ITree Parent =&gt; throw new InvalidOperationException("Purged root doesn't have Parent element.");

        public IReadOnlyList&lt;ITree&gt; Children =&gt; throw new InvalidOperationException("Purged root doesn't have Children.");

    }

    public static ITree Root{get;}=new ImaginaryRoot();
    public static ITree Purged{get;}=new PurgedRoot();

    public ITree Parent {get;}

    public IReadOnlyList&lt;ITree&gt; Children {get;}
}

