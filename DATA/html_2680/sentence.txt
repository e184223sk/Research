More than 1 year has passed since last update.Nullを拒絶しつつRootをどのように表現するのかの一考察ただ、まだこの辺しっかり考察してないのでもっと妙案があれば、コメント下さい！ぐるぐる回るグラフはともかく木構造における双方向に移動できる構造を考えた場合、概ね以下のような構造になるかなって。このとき、Childrenに関してはCountが0のEntityを返せば空であることをNullを使わずに表現できる。反面、Parentに関しては、Root以外であれば親子関係が必ず存在するからParentがNullに成ることはないけど、Rootだったり、Purgeなど枝を無効化したばあい、ParentにNullを入れることなく表現できないか考えた結果、若干回りくどいけど、以下のような方法が使えた。とりあえず、現物のRootの上に仮想上のRootをもう一個こさえることで、なんとなくNull回避できないか考えたのが以下ImaginaryRootを作ることで本当のRootのParentをそのSingletonと比較することでRootか否かを確認できる。但し、結局ImaginaryRootはTreeの派生物なので結局Rootを持つことになり、そこに現状Nullを入れてしまってるので、Nullを拒絶できてない。なので、以下のようにしてみた早い話が、Nullじゃなくて問答無用で例外飛ばすという思想。このように、null非許容の参照型にしたくても、Rootのような特異点が解決できないみたいなとき、これまでの考察のように今までnullを返してなんとなく処理してきたことを例外を出して表現するというのはそれなりに有効じゃ無いかと思う。
但し、終端に辿り着けたかどうかをtryｰcatchで判別するのはnullを排除する以上に設計上マズいし、又パフォーマンスにもかなり響くので避けるべきかと。また、今回Parentの実装をvirtualにしたくなかったのでinterfaceをこさえたけど、型の継承というか契約関係の複雑性とのトレードオフになっているので、こんなことしたくないと言うことであれば、public virtual Tree Parent {get;}のようにして、interfaceを使わないと言う設計も有りだと思う。


