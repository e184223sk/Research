More than 1 year has passed since last update.基本的な構文は、戻り値は、基本的に Task / Task&lt;T&gt; 型と考えて問題ないかと思います。
（といいながら、サンプルは void で書いたりしています…）引数で指定されたミリ秒待機します。今回のサンプルでは、1000ミリ秒 = 1秒 待機するようにしたので、実行結果は以下のようになります。
直列処理できます。
非同期処理のメソッドも、ContinueWith でつなぐことで、直列化することができます。ちなみに ContinueWith を使わずに、普通に並列的に処理にしたければ、下のようになイメージになります。並列なので、
1. AsyncSample1 Start.
2. AsyncSample2 Start.
3. AsyncSample1 End.
4. AsyncSample2 End.
という結果になります。ContinueWith を使って直列処理（AsyncSample1 を実行完了後、 AsyncSample2 を実行）するサンプルは、注意点は、メソッドの返り値の型が Task になっていることくらいです。引数として与えられた処理を別スレッドで実行します。
用途として、重い処理を非同期にしたいときに使います。ちょっと良い例が思いつかないので、超簡単なサンプルだけ書きます。指定された Task が全て完了してから Task を実行することができます。AsyncSample1(), AsyncSample2() の実行が完了したら、 All Completed. を出力するようなサンプルです。
実行結果は、
戻り値が欲しい場合は Task&lt;T&gt; を使います。AsyncSample1() の結果が返ってくるまで、Debug.Log されると困るので、 await する必要があります。
（待ち受けするイメージです。）
結果は、
Unity 初心者なので、間違いがあったら教えてくれるとありがたいです。
Unity で Task 使うなら、 UniTask 使おう。(理由はいまいち知らない…）
理由は UniTask の記事を書くときに、調べたいと思います。https://docs.microsoft.com/ja-jp/dotnet/api/system.threading.tasks.task?view=netcore-3.1
https://torikasyu.com/?p=1554
https://docs.microsoft.com/ja-jp/dotnet/api/system.threading.tasks.task.whenall?view=netcore-3.1
https://www.slideshare.net/UnityTechnologiesJapan/unite-tokyo-2018asyncawait


