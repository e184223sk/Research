More than 1 year has passed since last update.前回は既存のライブラリではWindows7でWebSocketが使えないことで断念した接続処理を自作します。WebSocket接続にはwebsocket-sharp
sta/websocket-sharp: A C# implementation of the WebSocket protocol client and server
を使います。これならWindows7でも動作します。Slackは直接ws接続できるわけではなく、まずはトークンを利用したhttp通信でws用のURLを払いだしてもらう必要があります。
なので、wsクライアントだけではなくhttpクライアントも書く必要があります。C#にはHTTP用クラスがいくつかデフォルトで用意されているのですが、今回はアセンブリが見つからずHttpClientが使えなかったことと、同期的でいいのでWebClientを利用しました。JSONは標準ライブラリで解析する方法がやや長そうで読めなかったので、前回のSlackAPIを動かすために必要で用意していたJson.NETを使っちゃいます。参考を見るにJSONをデシリアライズするには構造体を宣言しなければならないと思い込み最初に少し作ったんですが、構造を暗黙的に知っている前提でJObjectだけで処理してもＯＫです。
もちろんちゃんと宣言したほうが親切ですが。RTMではユーザー名やチャンネル名はIDで来るので、そのままでは扱いづらいです。これらを表示名に変換するには事前にchannels.listやusers.listで事前に対応表を作っておく必要があるかもしれません。API Methods | SlackReal Time Messaging API | SlackSlackのRTM APIを直接呼ぶときに困ったこと - QiitaVisual Studio が無い Windows 環境で c# コードをコンパイルする - Qiitasta/websocket-sharp: A C# implementation of the WebSocket protocol client and server外部リソースの解放には using ステートメントを使う - QiitaJson.NET - NewtonsoftJson.NET (Newtonsoft.Json) の基本的な使い方 | @SubaruC#/JSON: Newtonsoft.Json の最も簡単な使い方 - C++ ときどき ごはん、わりとてぃーぶれいく☆Deserialize an ObjectC#でWebAPI叩いてJson形式の結果を受け取る処理メモ - QiitaC# HTTPクライアントまとめ - Qiita


