
using UnityEditor;

/// &lt;summary&gt;
/// 設定ファイルのInspectorを拡張
/// &lt;/summary&gt;
[CustomEditor(typeof(MaterialSettings))]
public class ExtendEditor : Editor
{
    /// &lt;summary&gt;
    /// 設定
    /// &lt;/summary&gt;
    private MaterialSettings _settings;

    /// &lt;summary&gt;
    /// 選択したマテリアルのインデックス
    /// &lt;/summary&gt;
    private static int _selectedMaterialIndex;

    void OnEnable()
    {
        _settings = (MaterialSettings) target;
    }

    public override void OnInspectorGUI()
    {
        base.OnInspectorGUI();

        //変更があったときだけ
        if (EditorGUI.EndChangeCheck())
        {
            //リストが空の時、エラーを吐くのでここで拾う
            if (_settings.MaterialList == null || _settings.MaterialNameList.Count == 0)
            {
                EditorGUILayout.HelpBox("マテリアルを設定してください", MessageType.Error);
                return;
            }

            //リストの設定漏れは一番若い数字に
            if (_settings.MaterialNameList.Count &lt;= _selectedMaterialIndex) _settings.SelectedMaterialIndex = 0;

            _selectedMaterialIndex = EditorGUILayout.Popup("使用するマテリアル", _settings.SelectedMaterialIndex, _settings.MaterialNameList.ToArray());

            //変更した値を設定側で保持
            _settings.SelectedMaterialName = _settings.MaterialNameList[_selectedMaterialIndex];
            _settings.SelectedMaterialIndex = _selectedMaterialIndex;

            Undo.RecordObject(_settings, "Settings Undo");
            EditorUtility.SetDirty(_settings);
        }
    }
}

