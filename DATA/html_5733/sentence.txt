Enumを毎回定義するのがめんどうなシチュエーションがありました。
例えば、事前にInspectorで登録しておいたマテリアル、あるいはResourcesからロードの中から
1つ選ぶようなシチュエーションです。Enumで下記のように定義してInspectorで選択するようにすれば実装可能です。
もしくは辞書でMaterialとEnumを紐づけるとかもあるかと思います。ただし、このやり方だとマテリアルを増やした際にEnumの定義を増やさないといけません。そこで下記のようにマテリアルの名前リストからEnumっぽいプルダウンを出すエディタ拡張を作りました。
プルダウンの中身が動的に反映されるのでコード変更の必要がなくなります。今回はScriptableObjectでデータを定義し、そのデータをEditor拡張内でいじっていきます。このコードによりメニューバー(あるいは右クリック)のCreateからScriptableObjectが作成できるようになります。
今回のデモではScriptableObjectをResourcesに保存しておきます。NonReorderableでリストの順番を固定しているのは、
動かす必要が無いからという理由と実装上都合が良かったからです。実装上の都合についてですが、まずリストの値の変更をEditor拡張側にも伝えるために
OnValidate内で変更があるたびに新たにリストを作成しています。
しかし、リストのマテリアルを追加・削除した以外にも順番の入れ替えがOnValidateで呼ばれてしまいます。
後ほど出てくるEditorGUILayout.Popupと合わせると都合が悪いため順番は入れ替えられないようにしています。
(リストの順番を動かしてもエラーが出て壊れるわけじゃないので別に入れ替え可能のままでも良いと思います。)次にエディタ拡張のコードです。マテリアル名前の文字列リストの中から選択したものをEditorGUILayout.Popupでプルダウン表示させています。
先ほどのNonReorderableでリストの順番を固定している理由は
このプルダウンが選択した要素のインデックスを返すからです。
リストの順番が変わると要素のインデックスも変わってしまうので考慮すると面倒でした。プルダウンで選択した値はScriptableObjectの変数に保存します。シリアライズされる状態にしたプロパティをUndo.RecordObjectでUndoできるようになります。
EditorUtility.SetDirtyでEditorを終了する際にも値を保存します。これらの処理を描画中ずっと繰り返すのは不安だったので
EditorGUI.EndChangeCheck()で変更時のみ処理が走るようにしました。(心なしか軽くなったような気が？)最後に使う側です。最近、社のツヨツヨエンジニアからLINQを教えてもらったのでちょっと使ってみました。これで選んだマテリアルが反映されるようになりました。【Unity】択一選択式プルダウンメニューを動的に変化させる【エディター拡張】
UnityEditorのUndo/Redoシステムについて【解決編】【最新】のコピーそして完結
第12章　Undo について


