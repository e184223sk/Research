
using System;
using System.IO;
using System.Text;
using System.Security.Cryptography;

namespace Crypto_Test
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.Write("契約書だよ。ここにパスワードを書きな。 &gt; ");
            string PlaneText = Console.ReadLine();
            Console.WriteLine($"PlaneText: {PlaneText}");

            byte[] PlaneByte = Encoding.UTF8.GetBytes(PlaneText);
            byte[] CipherByte = Encrypt(PlaneByte);
            string CipherText = Convert.ToBase64String(CipherByte);

            Console.WriteLine($"CipherText: {CipherText}");

            byte[] EncodingByte = Convert.FromBase64String(CipherText);
            byte[] DecryptByte = Decrypt(EncodingByte);
            string DecryptText = Encoding.UTF8.GetString(DecryptByte);

            Console.WriteLine($"DecryptText:{DecryptText}");
            Console.ReadLine();
        }

        /// &lt;summary&gt;復号&lt;/summary&gt;
        /// &lt;param name="encrypt"&gt;暗号化されたデータ&lt;/param&gt;
        public static byte[] Decrypt(byte[] encrypt)
        {
            var provider = new RSACryptoServiceProvider();
            provider.ImportParameters(CreateParameter(Properties.Resources.private_key));
            return provider.Decrypt(encrypt, false);
        }

        /// &lt;summary&gt;暗号化&lt;/summary&gt;
        /// &lt;param name="data"&gt;暗号元データ&lt;/param&gt;
        public static byte[] Encrypt(byte[] data)
        {
            var provider = new RSACryptoServiceProvider();
            provider.ImportParameters(CreatePublicParameter(Properties.Resources.public_key));
            return provider.Encrypt(data, false);
        }
        private static RSAParameters CreateParameter(byte[] der)
        {
            byte[] sequence = null;
            using (var reader = new BinaryReader(new MemoryStream(der)))
            {
                sequence = Read(reader);
            }

            var parameters = new RSAParameters();
            using (var reader = new BinaryReader(new MemoryStream(sequence)))
            {
                Read(reader); // version
                parameters.Modulus = Read(reader);
                parameters.Exponent = Read(reader);
                parameters.D = Read(reader);
                parameters.P = Read(reader);
                parameters.Q = Read(reader);
                parameters.DP = Read(reader);
                parameters.DQ = Read(reader);
                parameters.InverseQ = Read(reader);
            }
            return parameters;
        }

        private static RSAParameters CreatePublicParameter(byte[] der)
        {
            byte[] sequence1 = null;
            using (var reader = new BinaryReader(new MemoryStream(der)))
            {
                sequence1 = Read(reader);
            }

            byte[] sequence2 = null;
            using (var reader = new BinaryReader(new MemoryStream(sequence1)))
            {
                Read(reader); // sequence
                sequence2 = Read(reader); // bit string
            }

            byte[] sequence3 = null;
            using (var reader = new BinaryReader(new MemoryStream(sequence2)))
            {
                sequence3 = Read(reader); // sequence
            }

            var parameters = new RSAParameters();
            using (var reader = new BinaryReader(new MemoryStream(sequence3)))
            {
                parameters.Modulus = Read(reader); // モジュラス
                parameters.Exponent = Read(reader); // 公開指数
            }

            return parameters;
        }

        private static byte[] Read(BinaryReader reader)
        {
            // tag
            reader.ReadByte();

            // length
            int length = 0;
            byte b = reader.ReadByte();
            if ((b &amp; 0x80) == 0x80) // length が128 octet以上
            {
                int n = b &amp; 0x7F;
                byte[] buf = new byte[] { 0x00, 0x00, 0x00, 0x00 };
                for (var i = n - 1; i &gt;= 0; --i)
                    buf[i] = reader.ReadByte();
                length = BitConverter.ToInt32(buf, 0);
            }
            else // length が 127 octet以下
            {
                length = b;
            }

            // value
            if (length == 0)
                return new byte[0];
            byte first = reader.ReadByte();
            if (first == 0x00) length -= 1; // 最上位byteが0x00の場合は、除いておく
            else reader.BaseStream.Seek(-1, SeekOrigin.Current); // 1byte 読んじゃったので、streamの位置を戻しておく
            return reader.ReadBytes(length);
        }
    }
}


