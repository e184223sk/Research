using System;
using System.Collections.Generic;
using System.Linq;
using Object = System.Object;
using Random = UnityEngine.Random;

public static class IEnumarableExtensions
{
    private static readonly List&lt;int&gt; RandomIndexList = new List&lt;int&gt;();
    private static readonly Object LockObject = new Object();

    /// &lt;summary&gt;
    /// ieが空だと例外になるので要素の存在チェックを行ってから実行しましょう
    /// &lt;/summary&gt;
    public static T GetAtRandom&lt;T&gt;(this IEnumerable&lt;T&gt; ie, Func&lt;T,bool&gt; predicate)
    {
        if (!ie.Any())
        {
            throw new Exception("要素が空です！");
        }
        // 非同期実行時に同時アクセスしないようlockします
        lock (LockObject)
        {
            RandomIndexList.Clear();

            // 条件に一致する要素のindexを取得します
            for (int i = 0; i &lt; ie.Count(); i++)
            {
                if (predicate(ie.ElementAt(i)))
                {
                    RandomIndexList.Add(i);
                }
            }

            if (RandomIndexList.Count &lt; 1)
            {
                throw new Exception("一致する要素がありません！");
            }

            // 抽出したindexから抽選して返します
            int randomIndex = RandomIndexList[Random.Range(0, RandomIndexList.Count)];
            return ie.ElementAt(randomIndex);
        }
    }
}

