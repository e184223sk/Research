More than 3 years have passed since last update.この記事では、C# での FizzBuzz っぽいプログラム作成を通じて、NCrunch でライブユニットテストを試してみました。ライブユニットテストとは、コードを書きながら、リアルタイムで単体テストが走り、結果を教えてくれるものです。Visual Studio 2017 Enterprise に搭載されて話題になったようです。Microsoft、Visual Studio 2017にライブユニットテストを提供（InfoQ）使いこなせると非常に便利なのですが、予算の都合などで、Enterprise 版の Visual Studio を使えない人も多いかと思います。比較的安価なものとして、NCrunch というプラグインで、同様のことができるそうです。2017年4月現在、このツールは有料で、個人ライセンスが 159米ドル（1ドル110円として、17,490円）です。
企業向けライセンスは 289米ドル（同じく、31,790円）です。
30日の体験版があります。英語のツールですが、簡単な単語しか出てこないので安心してください。NCrunch は、以下のサイトからダウンロードできます。http://www.ncrunch.net/まず、Download NCrunch をクリックします。
お使いのバージョンの Visual Studio の Download Installer をクリックすると、インストーラがダウンロードされます。Visual Studio が起動している場合は終了してから、ダウンロードしたインストーラを実行し、NCrunch をインストールします。Visual Studio を起動したら、画面上部のメニューバーに「NCRUNCH」が追加されています。「Enable NCrunch」をクリックすると、NCrunch が起動します。ウィザード形式で質問されることがありますが、すべてデフォルト値のまま先に進んで構いません。いわゆる FizzBuzz のプログラムを作成します。
今回は、Wikipedia の例とは異なり、入力した値に対応した文字列を出力するプログラムとします。
また、負の数はすべて、入力値をそのまま文字列にします。ツールバーの「新しいプロジェクト」をクリックし、MyProgram プロジェクトを作成します。
コンソールアプリケーションとして作成します。MyProgram が、単体テストプロジェクトから見えるように、設定が必要です。
Properties の中にある AssemblyInfo.cs の末尾に、以下の行を追加します。FizzBuzz メソッドのスタブを作成します。。
以下のコードを、Program.cs の MyProgram クラスに追加します。ここで、先頭にスラッシュ3個のコメントや、XMLのタグがあります。
これは、ドキュメントコメントといいます。
ソースコードをツールに通すと、HTMLなどの形式で、ドキュメントが自動生成されます。また、先頭に TODO と書かれたコメントがあります。
TODO コメントは、Visual Studio のタスク一覧で、まとめて確認することができます。詳細は、MSDNの以下のページを参照してください。ドキュメント コメント用の推奨タグ（C# プログラミング ガイド）方法: タスク一覧のコメントを作成する作業中のソリューションに、単体テストプロジェクトを追加します。
ソリューション MyProgram を右クリックし、「追加」→「新しいプロジェクト」をクリックします。
名前を MyProgramTest とし、単体テストプロジェクトを作成します。MyProgramTest プロジェクトに UnitTest1.cs が作成されているので、FizzBuzzTest.cs にリネームします。ユニットテストプロジェクトから MyProgram が見えるように、設定が必要です。MyProgramTest の参照設定を右クリックし、参照の追加をクリックします。MyProgram にチェックを入れ、OKボタンをクリックします。FizzBuzzTest.cs に、テストを記述していきます。
今回作成するプログラムのテストとして、以下のようなケースが考えられます。上記に加えて、以下のようなテストケースも考えられます。上記のケースを、テストコードとして実装していきます。なお、1つのテストメソッド内に、複数のAssertを記述することについては、賛否両論あります。
今回は簡単な例なので、複数記述しています。それでは、MyProgram プロジェクトに戻り、スタブにしておいた FizzBuzz メソッドを実装してみましょう。
タスク一覧の TODO コメントをダブルクリックして、ジャンプすることもできます。※このコードは、ユニットテストのデモのため、わざと間違えています。コードを入力すると、エディタの左側に赤、緑、黒の丸印が表示されています。
これは、NCrunchのライブユニットテストによって付与されたマークです。return "Fizz"; の行の赤丸をクリックしてみましょう。
当該行に関連するテストが、ポップアップで一覧表示されます。赤いバツ印の付いているテストが、失敗しています。また、return "FizzBuzz"; の行は、黒丸がついています。
これは、この行に到達できるテストコードが存在しないことを意味しています。
「3の倍数かつ5の倍数のテスト」は用意しているのに、テストが走っていない。意図した動作ではないので、これもバグということになります。それでは、FizzBuzzメソッドを修正していきます。
修正作業中も、リアルタイムにテストが走り、エディタ左側の丸が更新されていきます。
最終的に、以下のコードになるように修正してみましょう。修正が終わると、エディタの左側の丸が、すべて緑色になりました。これで、用意したテストに、すべて合格しました。無事にテストを通過し、FizzBuzz メソッドが完成しました。
次は、Main メソッドを実装し、コンソールアプリケーションとして動作するようにします。なお、Main メソッドの単体テストは割愛します。終わったら、ビルドして、できあがった exe ファイルを動かしてみましょう。


