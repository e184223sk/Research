More than 5 years have passed since last update.前稿迄でカラムの直接編集ちっくは実現できました。でも、全てのカラムが編集対象になるとは限りません。
現状それをコントロールするには、どのカラムを編集対象とするかを外部に保持して、外部からコントロールする必要があります。許せんっ！
美しくないっ！きちんと役割毎に分離しなくては…前稿からの流れで行くと…と云う様な事がしたいんですよね。

んー、プロパティ追加するだけなら何てこたないんです。ってなサブクラスを定義して、Form1.cs の中に以下の様なコードを追加しておけばオッケー。ただ残念なのは、これではデザイナで列の定義が出来ないんですよ。
また折角定義したEditableプロパティを参照する際には、 (ColumnHeaderEx)(this.listView1.Columns[i]).Editableって記述しないといけないし…と云う事で今回の目的は以下とします。この右側にカスタムプロパティが出て欲しい訳です。
…頑張りましょっ！まず、ネットを漁りました。
イイ感じの日本語の情報には余り行き当たりません…断片的な話と、ColumnHeaderをサブクラス化した場合は、カスタムデザイナ(?)だかカスタムエディタ(?)を指定しないといけないだら、良く分かりません。おまけに、カスタム何ちゃらを作ってしまったら、標準の「列の編集」が効かなくなるんじゃないの？
とか、悶々、悶々。。。

そうこうのた打っているうちに、ふと…
ColumnHeader コレクションエディターなんてエラそーな名前が付いてるけど、所詮はプロパティエディタじゃないの？
だったら、ListView.Columnsの中身にColumnHeaderEx型のインスタンスが入っていれば、件のエディタ上にカスタムプロパティも一緒に表示されるのではっ？と思ったら、後は実験あるのみっ！

取り敢えず、ColumnHeaderのサブクラスを宣言。で、Form1.Designer.csを強引に編集。一旦ビルドしたのち、デザイナから「列の編集」を選択。
出たっ！　　Editableよしよし、方向性は間違っていないと見た！すっごい前が開けた様な気はするんですが、実はまだまだ問題は山積しています。でも実はこれら、全部根っこは一緒です。
つまりListView.Columnsの型がColumnHeaderExCollecctionであれば、キャストはいらなくなります。こうなればきっと、プロパティエディタ君はよしなに取り計らってくれて、ジェネレータ氏もDesigner.csのコード生成をうまい事処理してくれるんじゃないかなぁ？（希望的観測）
となれば、コードの直接編集もいらない筈です。後は、参考になりそうな情報を探すだけ…（何か振出しに戻ってるし）

で、ついに見つけました。残念ながら日本語でも英語でもないので、どんなやり取りがなされているのか（私には）微塵も分かりませんが、サンプルコードは（一揃い纏まってるという意味で）完璧です。
上のページの一番最後のスレッドにダウンロードリンクがあります。そのzipファイルの中にListViewExBarebone.zipってなファイルがあって、それが名前の通りColumnHeaderのサブクラス化の基本骨格だけにシェイプしたコード群です。でもやっぱり若干の贅肉は付いてますが…（多分骨格に対する視点が違うんだと思います）ただ一つ問題が解決されていません。
このBarebone、やっぱりカスタムデザイナを利用しています。多分この辺りかと…では、実際に確認してみましょう。危惧した通り、「列の編集」選択肢が出てきませんね。
列を追加するには、ここから「…」をクリックすれば
おー、見慣れた奴だ。Testカスタムプロパティも追加されてますね。
でもでも、ColumnsNewだとぉ？
なんじゃそら。取り敢えずBareboneから以下を読み取りました。（多分、こんな感じです）ソースで云うと重要なのはここら辺。何でここの二重管理をしているかと云うと、表向きは利用者にColumnsNewでサブクラス側を公開して、内部向けには既存のColumnsを操作して貰おう、と云う意図でしょうね。さて、ここで実験の成果が生きてきます。Malfuncさんはあくまでも、内部的にはColumnHeaderCollection型のColumnsを使って貰いたいと思っている様ですが、プロパティエディタとしてはそこの型は（余り）気にしていない模様。あくまでもそこに入っているオブジェクトが持っているプロパティを全部見せてくれるだけです。だからきっと、ColumnsがColumnHeaderのサブクラスを格納するコレクションである限り、何も破綻しないのではないだろうか？
どう？
そんな気がしませんか？となれば、前出の二重プロパティは次の様な形でも大丈夫な筈です。ここでは、表向きはサブクラス化されたColumns、内部で使って貰う方はbase.Columns=ColumnsOrgに分かれています。で、内部向けの方はinternal指定にして、公開プロパティにならない様に気を使っています。まぁこの入り口だけ修正してもダメで、同期更新の部分もそれなりに手を加えないといけません。
えー、例えばこんな感じ…取り敢えず一通り修正して、検証。
お、出た。勝った…さて、目的を達成するための部品は揃った様です。最後の仕上げとしてBareboneから贅肉落とした上で本稿の目的であるEditableを実装しましょう。
更に前稿の成果である直接編集ちっくListViewExとも合体させちゃうと、サブクラス化した甲斐があると云うものです。では―
まずは、ヘッダのサブクラス周りから…んー、ListViewEx.csはもう一回全体を載せちゃいます。差分だけ説明しながら…
とも思ったんですが、まどろっこしいので。で、こんな感じになりました。ごく一般的な操作で表示されたColumnHeaderEx コレクション エディターで、Editableプロパティが増えています。columnHeaderEx3のEditableをtrueにしてみます。

使い方としてはListViewExのMouseDoubleClickイベントハンドラに以下を記述するだけです。ダブルクリックされたらとにかくListViewEx.EditColumn()を呼んじゃって下さい。編集対象かどうかはListViewExが判断してくれます。（ま、このインタフェースが良いかどうかは議論の余地があると思いますが…）

ColumnHeaderEx3のカラムはダブルクリックで直接編集ちっくモードに入りました。でも、ColumnHeaderEx2やColumnHeaderEx4のカラムはダブルクリックしても反応しません。ぐー
完成！

後は、実用に耐えられる様にプロパティとか公開メソッドとか真面目に考えないといけないなぁ。
ま、技術的な面では一通り検証できたという事で…どっとはらい


