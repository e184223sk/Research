
namespace LINQCheatSheet
{
    class Generate
    {
        /// &lt;summary&gt;
        /// シーケンスを作成するメソッド
        /// &lt;/summary&gt;
        public static void Start()
        {

            //startからcount個の連番のシーケンスを生成します
            //0,1,2,3,4,5,6,7,8,9
            var enumerable = Enumerable.Range(0, 10);
            Program.Write("Range",enumerable);

            //Rangeにはいくつ飛ばすという引数がありませんが、もしそのようなシーケンスが作りたい場合は
            //Selectと合わせて作ります
            //0,2,4,6,8,10,12,14,16,18
            var evens = enumerable.Select(i =&gt; i*2);
            Program.Write("Range+Select", evens);

            //同じ値をcount回繰り返すシーケンスを作ります
            //4,4,4,4,4
            var repeat = Enumerable.Repeat(4, 5);
            Program.Write("Repeat", repeat);

            //Repeatは同じ値を繰り返すだけで毎回式を評価するわけではないことに注意

            //例えばこれはNext1回の結果が5回繰り返されるだけに注意
            //n,n,n,n,nになる(nは一つの同じ値)
            //var rnd = new Random();
            //Enumerable.Repeat(rnd.Next(), 5);

            //ランダムな5つの数値がほしいならこうすべき
            //(インスタンス生成とかも同じ要領で)
            //_は値を使わないことの明示(Rxとかの慣例ってだけです)
            var rnd = new Random();
            var rnds = new int[5].Select(_ =&gt; rnd.Next()); //new int[5]は0を5個の配列になる
            Program.Write("Randoms", rnds);

            //空のシーケンスを返すだけ(いわゆるφ空集合)
            //あんまり用途ないけど戻り値nullだと駄目なパターンとか
            //型引数は推論できないため明示してあげる必要あり
            //出力なし
            var empty = Enumerable.Empty&lt;int&gt;();
            Program.Write("Empty", empty);


        }
    }
}

