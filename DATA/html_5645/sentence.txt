More than 3 years have passed since last update.前回：「オブジェクト指向101：定石」※ 前回を読んだ前提で書いてます。さて、前回一度手続き的に書いたコードをオブジェクト指向に直すという組み方をしましたが、今回はしょっぱなからオブジェクト指向的に書いていきましょう。まず、ちょこっとプログラムに慣れたであろう読者は、プログラムを書く前にある程度全貌の想像がつくかと思います。もちろん、まだそのような思考ができない人でも話を追えるように、一度作った「じゃんけんゲーム」で話を進めていきましょう。じゃんけんゲームの流れは以下になります。
１）コンピュータの手を決める
２）プレイヤーの手を求める
３）じゃんけんの結果を表示するだいたいこんな感じになります。前回作った JankenService そのままですね。さて、これをインターフェイスベースで作ります。すでに知っちゃっているので Hand には数値を振っていますが、基本的に細かい処理はまだ確定していないので意味を確定させるために enum を使ってインターフェイスを構築します。「３）じゃんけんの結果を表示する」は「じゃんけんの結果を得る」と「出力する」に分けました。これはやはり事前知識があるのでこのような分け方になりますが、実際に作ってみても最終的にはこのような分け方になるかと思います。前回は「プレイヤー」と「コンピュータ」で「手を得る」処理を分けていましたが、今回はそれらの意味が同一であることを事前に知っている（というか違ったら困る）ので、同じインターフェイスを利用します。ただ、「コンピュータの手を得る」と「プレイヤーの手を得る」だと意味が違うからそこは分けるべき、という意見もあるかと思います。そこに関しては実際に作ってみ、運用してみて経験で学んでいくしかないかと思います（筆者もこれで正しいかどうかは答えかねるので）。みじけぇ。と自分でも思うのですが、詳細の実装は前回と同じなので省略します。まあこれを書いた理由なんですが、前回のテストコードなりなんなりを書いてると「ああ、だいたいここら辺がテストの値として取得できたりモックorスタブ作れないと困るから、インターフェイスにしておこう」という発想になってきます。そうすると、前回の最後に到達した「値を受け取って、他に投げる」だけのクラスをまず作り、いやむしろそれをテストコードとして書き、それをもとに本実装していく、というようなワークフローができるかと思います。これができるとテストコードをベースとした開発ができるようになり、エンバグしづらいコードを書く習慣が作れます。っていうか今どきのアプリケーションなんてほとんで「値を画面から受け取って、サーバに保存する」か「サーバからデータを受け取って、画面に表示する」だけなので、そこでエンバグするようじゃヤバいわけです。計算が少しでもあるならそこはすべてテストコードを書くことで、より堅牢なコードに仕上げることができます。ということで、これがある種「テストを意識したコードの書き方」にもなります。皆さんもぜひテストを意識したコードを書いて、バグのないプログラマを目指しましょう。次回があれば、本当にゼロからプログラムを書いていこうと思います。


