    internal enum Hand
    {
        Rock = 0,
        Scissors = 1,
        Paper = 2,
    }

    internal enum Result
    {
        PlayerWin,
        PlayerLose,
        Tie,
    }

    internal interface IHandProvider
    {
        Hand GetHand();
    }

    internal interface IJankenProcessor
    {
        Result Process(Hand player, Hand opponent);
    }

    internal interface IOutput
    {
        void WriteLine(string message);
    }

    internal class JankenService
    {
        private readonly IHandProvider _playerHandProvider;
        private readonly IHandProvider _opponentHandProvider;
        private readonly IJankenProcessor _processor;
        private readonly IOutput _output;

        public JankenService(
            IHandProvider playerHandProvider, 
            IHandProvider opponentHandProvider, 
            IJankenProcessor processor,
            IOutput output)
        {
            _playerHandProvider = playerHandProvider;
            _opponentHandProvider = opponentHandProvider;
            _processor = processor;
            _output = output;
        }

        void Execute()
        {
            _output.WriteLine("じゃんけんしましょ！");

            var player = _playerHandProvider.GetHand();
            var opponent = _opponentHandProvider.GetHand();

            var result = _processor.Process(player, opponent);

            switch (result)
            {
                case Result.PlayerWin: _output.WriteLine("勝ち！"); break;
                case Result.PlayerLose: _output.WriteLine("負け！"); break;
                case Result.Tie: _output.WriteLine("あいこでした！"); break;
                default: throw new ArgumentOutOfRangeException();
            }
        }
    }

