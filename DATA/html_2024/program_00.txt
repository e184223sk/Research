 private void button61_Click(object sender, EventArgs e)
        {
            const int NeedsCornerCnt = 6;
            CalcCorner();

            var stk = new Stack&lt;StackState2&gt;();
            StackState2 WillPush;

            foreach (int Each in cornerDict[3])
            {
                WillPush.cornerList = new List&lt;int&gt;() { 3 };
                WillPush.ValList = new List&lt;int&gt;() { Each };
                stk.Push(WillPush);
            }

            while (stk.Count &gt; 0)
            {
                StackState2 Popped = stk.Pop();

                if (Popped.cornerList.Count == NeedsCornerCnt)
                {
                    for(int i = 0; i &lt; Popped.cornerList.Count; i++)
                    {
                        textBox1.Text = string.Format("{0}角数の{1}", Popped.cornerList[i],Popped.ValList[i]);
                    }
                    label1.Text = string.Format("合計={0}", Popped.ValList.Sum());
                    for(int i=0;i&lt; Popped.cornerList.Count; i++)
                    textBox1.AppendText(string.Format("{0}角数の{1}, ", Popped.cornerList[i], Popped.ValList[i]));
                    continue;
                }

                for (int i = 3; i &lt;= 8; i++)
                {
                    if (Popped.cornerList.Contains(i)) continue;

                    foreach(int Each in cornerDict[i])
                    {
                        int ValsCnt = Popped.ValList.Count;
                        int LastVal = Popped.ValList[ValsCnt - 1];

                        Func&lt;int, int, bool&gt; isVisit = (pLast, pTop) =&gt;
                        {
                              return pLast % 100 == pTop / 100;
                        };

                        if (isVisit(LastVal, Each) == false) continue;
                        if (ValsCnt == NeedsCornerCnt - 1 &amp;&amp; isVisit(Each, Popped.ValList[0]) == false) continue;

                        WillPush.cornerList = new List&lt;int&gt;(Popped.cornerList) { i };
                        WillPush.ValList = new List&lt;int&gt;(Popped.ValList) { Each };
                        stk.Push(WillPush);
                    }
                }
            }


        }

        static void CalcCorner()
        {
            Action&lt;List&lt;int&gt;, Func&lt;int, int&gt;&gt; calcCorner = (pList, pFunc) =&gt;
              {
                  int n = 1, Result;
                  do
                  {
                      Result = pFunc(n++);
                      if (1000 &lt;= Result &amp;&amp; Result &lt;= 9999) pList.Add(Result);
                  } while (Result &lt;= 9999);
              };
            for (int i = 3; i &lt; 9; i++) cornerDict[i] = new List&lt;int&gt;();

            calcCorner(cornerDict[3], n =&gt; n * (n + 1) / 2);
            calcCorner(cornerDict[4], n =&gt; n * n);
            calcCorner(cornerDict[5], n =&gt; n * (3 * n - 1) / 2);
            calcCorner(cornerDict[6], n =&gt; n * (2 * n - 1));
            calcCorner(cornerDict[7], n =&gt; n * (5 * n - 3) / 2);
            calcCorner(cornerDict[8], n =&gt; n * (3 * n - 2));
        } 

