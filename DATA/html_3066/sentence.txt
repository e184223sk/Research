More than 1 year has passed since last update.データベースの場合は、挿入、更新、削除をやったあとで取り消したければロールバックできます。
地上の哀れな羊は、データベースと同様にファイルにおいてもコピー、移動、削除、変更を行ったあとで、やっぱり取り消しが行えるよう神たるマイクロソフトに祈りました。偉大なるマイクロソフトはVista開発時に、Transactional NTFS(TxF)を遣わし、哀れな羊を救いを与えました。しかし、この救いはWindows8の頃から非推奨となり、「Transaction NTFSの代替を考えておくよう」、ファイルだけでなく自分自身をロールバックするというアメリカンジョークをなさいました。神に見捨てられた哀れな羊たちはStackOverflowに集い、代替方法を考えることになりました。Alternatives to using Transactional NTFS
https://stackoverflow.com/questions/13420643/alternatives-to-using-transactional-ntfsこの際、NuGetより救いの手を差し伸べたのが.NET Transactional File Managerなのです。TransactionalFileMgr　.NET Transactional File Manager
https://archive.codeplex.com/?p=transactionalfilemgrNuGetでTxFileMangerをインストールしてください。
1.3と2.0があります。2.0は2019年の4月ころに追加されたもので、いくつかの機能が追加されているようですが、今回は1.3を使用することにします。(1)実行前
(2)Complete実行前
(3-1)Completeした場合

・・・(2)より変化なし(3-2)Completeしない場合

・・・(1)と同じになる・TransactionScope 内のTxFileManager経由のファイル操作についてトランザクション処理を行います。・scope1.Complete()を行った場合は、TxFileManager経由で行ったファイル操作は、そのままになります。
・Complete()を行わないでスコープを抜けた場合は元に戻ります。
※ただし、バックアップから地道に差し戻しているだけなので、ファイルがロックされていたり、アプリケーション自体が強制終了された場合は元に戻りません説明の詳細についてはTxFileManager.csと各操作の～Operation.csを見て記載しています。指定のファイルに追記を行う。トランザクションの外では「File.AppendAllText」を実行するのみトランザクション内では操作対象のファイルが存在する場合はバックアップとしてコピーしてから「File.AppendAllText」を実行する。
ロールバック時にバックアップから復元される。仮に今回のトランザクションで新規で作成したファイルだった場合は、ロールバック時に削除される。コピー元のパスからコピー先のパスにファイルのコピーを行うトランザクションの外では「File.Copy」を実行するのみトランザクション内ではコピー先のファイルが存在する場合はバックアップとしてコピーしてから「File.Copy」を実行する。
ロールバック時にバックアップから復元される。ディレクトリの作成を行う。トランザクション外では「Directory.CreateDirectory」を実行するのみ
トランザクション内ではすでに存在しているディレクトリか記憶してから「Directory.CreateDirectory」を実行する。
ロールバック時はすでに存在していた場合はなにもしないが、存在しておらずトランザクションで作成されたディレクトリの場合は削除をする。ディレクトリの削除を行う。トランザクション外では「Directory.Delete」を実行するのみ。
トランザクション内では削除対象のディレクトリをバックアップに移動する。
ロールバック時には、バックアップから、移動したディレクトリを元の位置に戻す。ファイルの削除を行う。トランザクション外では「File.Delete(path)」を実行する。
トランザクション内ではバックアップに削除対象のファイルをコピーしてから「File.Delete(path)」を実行する。
ロールバック時にバックアップから復元する。ファイルの移動を行う。
トランザクション外では「File.Move」を実行する。
トランザクション内では移動元と移動先を記憶してから「File.Move」を実行する。
ロールバック時には移動先から移動元にファイルを移動することで元に戻す。ファイルのスナップショットを保存しておく。
これにより、ロールバック時にファイルを元に戻すことができる。トランザクション外では何もしない指定のファイルの作成または上書きをする。トランザクションの外では「File.WriteAllText」を実行するのみトランザクション内では操作対象のファイルが存在する場合はバックアップとしてコピーしてから「File.WriteAllText」を実行する。
ロールバック時にバックアップから復元される。仮に今回のトランザクションで新規で作成したファイルだった場合は、ロールバック時に削除される。アプリケーションの強制終了や、別プロセスの操作などを考えた場合、完璧ではないとはいえませんが、簡単なファイル操作であればTransactionalFileMgrでロールバックが行えることがわかりました。また、ソースコードがダウンロードできるので、機能拡張もわりと容易に行えるかと思います。


