C#初心者の方の参考になれば幸いです。基本形。
条件文の結果により処理を分岐させます。「if else」「else」は不要なら省略が可能です。処理が1行だけの場合「{}」を省略できます。処理が極端に短い場合は、さらに改行も省略して1行で書いても大丈夫です。三項演算子(または条件演算子とも呼ばれます)も短い分岐処理に便利な構文です。短くて単純な条件判定に便利。
if文で書くと複数行かかるものが1行にできたりして、コードの見通しが良くなる場合に使えます。以下はif文で書いた場合です。上記を三項演算子で書くとスッキリ書けます。あまりに長いと見にくくなってしまいますので三項演算子で記述するのは避けたほうがいいですが、改行することである程度見やすく整えることもできます。
長い場合は以下のように改行しインデントを揃えると読みやすくなると思います。１行で書いた場合、長くなるほどだんだん見づらくなってきますが、区切りのいいところで改行を入れると見やすく書けます。
C#は文末に必ず「;」が必要なため、改行を途中で入れても大丈夫です。nullチェックでnullの場合の初期値を代入するようなときにスッキリ書ける構文です。三項演算子と同様に判定後の処理がシンプルな場合に便利です。nullチェックする値がnullでなければその値を返し、nullの場合は??の右側に指定した値を返します。if文で書いた例上記をnull合体演算子(??)で書いた例C# 8.0 以降
nullの場合の初期値を代入するようなときに便利です。nullチェックする値がnullでなければその値を返し、nullの場合は??=の左側(nullチェックする値)に右側に指定した値を代入します。if文で書いた例上記をnull合体割り当て演算子(??=)で書いた例(C# 8.0以降)シングルトンインスタンスの生成をnull合体割り当て演算子(??=)で書いた例C# 6 以降
こちらもnullチェックで使える書き方です。nullだった場合はnullを返すだけでいい場合に使えます。値がnullでない場合にのみ、メンバー(プロパティやメソッドなど)にアクセスできます。nullだった場合はnullを返します。if文で書いた例null条件演算子(?.)で書いた例(C# 6.0以降)イベントの呼び出しの例。イベントを呼び出す前に通常nullチェックが必要ですが、楽に書けるようになります。


