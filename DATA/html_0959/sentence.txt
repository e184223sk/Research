More than 1 year has passed since last update.あんまりこの辺の基本機能が有名ではないようなので紹介しておこうかと思います。
ちなみにですが XML でもまったく同じことが可能です。今回は以下のような JSON を利用していこうと思います。参照: Qiita API v2 | /api/v2/templates/:template_idこの JSON をクリップボードにコピーしておいてください。今回は Template.cs を追加しました。
[ 編集 ] → [ 形式を選択して貼り付け ] → [ JSON をクラスとして貼り付ける ]
Rootobject というクラスとともに関連クラスが自動で生成されるので, あとはお好みで修正していきます。
ここで注意しなければならないのは, "プロパティ名を変更してはならない" ということです。クラス名は変更しても問題ありません。今回は以下のようにしました。
ここで問題になってくるのが, プロパティ名が通常の C# コーディングガイドラインに則っていないことです。
そこで今回は System.Runtime.Serialization.DataMemberAttribute を利用していこうと思います。各プロパティにこの属性を利用してあげて、以下のようにします。
これで Upper Camel Case でプロパティを書きつつ正常にデシリアライズできるようになりました。
ここで注意ですが, 利用するデシリアライザによっては別の Attribute が用意されている可能性があるので, その辺りはドキュメントに従って良しなに対応してください。nugetから Utf8Json を導入してデシリアライズしてみます。実行結果は以下のようになります。
生成されるクラスが最初から Upper Camel だと, もっと使いやすいのですが…。
そこは今後に期待というところですね。


