
using Newtonsoft.Json;

class JsonPixelInitializerConverter : JsonConverter
{
    public override bool CanConvert(Type inType) =&gt; typeof(JsonPixelInitializer).IsAssignableFrom(inType);

    public override object ReadJson(JsonReader inReader, Type inObjectType, object inExistingValue, JsonSerializer inSerializer)
    {
        JObject jObject = JObject.Load(inReader);
        JsonPixelInitializer result = GenerateObject(jObject.Get&lt;string&gt;("@class", ""));
        if (result == null) {
            return null;
        }

        result.ReadFromJObject(jObject);
        return result;
    }

    public override void WriteJson(JsonWriter inWriter, object inValue, JsonSerializer inSerializer)
    {
        inWriter.WriteStartObject();
        inWriter.WritePropertyName("@class");

        inWriter.WriteValue(((JsonPixelInitializer)inValue).GetSubClassIdentifier());
        ((JsonPixelInitializer)inObject).WriteToWriter(inWriter);

        inWriter.WriteEndObject();
        return;
    }

    private JsonTexturePixelInitializer GenerateObject(string inSubClassIdentifier)
    {
        switch (inSubClassIdentifier) {
            case "Color":
                return new JsonTexturePixelColorInitializer();
            case "File":
                return new JsonTexturePixelFileInitializer();
            default:
                throw new JsonReaderException();
        }
    }
}

