
public override void WriteJson(JsonWriter inWriter, object inValue, JsonSerializer inSerializer)
{
    inWriter.WriteStartObject();
    inWriter.WritePropertyName("@class");
    inWriter.WriteValue(((JsonPixelInitializer)inValue).GetSubClassIdentifier());

    foreach (var prop in CollectProperties(inValue)) {
        inWriter.WritePropertyName(prop.Name);

        if (prop.Converter != null) {
            prop.Converter.WriteJson(inWriter, prop.GetValue(inValue), inSerializer);
        } else {
            inSerializer.Serialize(inWriter, prop.GetValue(inValue));
        }
    }

    inWriter.WriteEndObject();
    return;
}

private IEnumerable&lt;ExportTargetProperty&gt; CollectProperties(object inValue)
{
    foreach (var prop in inValue.GetType().GetProperties()) {
        var attributes = prop.GetCustomAttributes(true);
        if (attributes.FirstOrDefault(a =&gt; a is JsonIgnoreAttribute) != null) {
            continue;
        }

        var propAtt = (JsonPropertyAttribute)attributes.FirstOrDefault(a =&gt; a is JsonPropertyAttribute);
        var convAtt = (JsonConverterAttribute)attributes.FirstOrDefault(a =&gt; a is JsonConverterAttribute);

        string name = (propAtt?.PropertyName == null) ? prop.Name : propAtt.PropertyName;
        JsonConverter converter = null;
        if (convAtt != null) {
            converter = (JsonConverter)Activator.CreateInstance(convAtt.ConverterType, convAtt.ConverterParameters);
        }

        ExportTargetProperty property = new ExportTargetProperty(prop);
        property.Name = (propAtt?.PropertyName == null) ? prop.Name : propAtt.PropertyName;
        property.Converter = convAtt == null ? null 
                : (JsonConverter)Activator.CreateInstance(convAtt.ConverterType, convAtt.ConverterParameters);

        yield return property;
    }

    yield break;
}

private class ExportTargetProperty
{
    public ExportTargetProperty(PropertyInfo inProperty)
    {
        Property = inProperty;
        return;
    }

    public string Name { get; set; } = "";
    public JsonConverter Converter { get; set; } = null;

    public void SetValue(object inObject, object inValue) =&gt; Property.SetValue(inObject, inValue);
    public object GetValue(object inObject) =&gt; Property.GetValue(inObject);

    private PropertyInfo Property { get; } = null;
}

