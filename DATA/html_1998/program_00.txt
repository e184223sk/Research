using System.ComponentModel;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;

namespace WpfApp14
{
    /// &lt;summary&gt;
    /// MainWindow.xaml の相互作用ロジック
    /// &lt;/summary&gt;
    public partial class MainWindow : Window
    {
        // バインディングさせたいデータソース
        Class1 obj = new Class1(1);

        public MainWindow()
        {
            InitializeComponent();

            // 実質的なバインディングのコードは、ここの2行
            label1.DataContext = (object)obj;
            //label1.SetBinding(Label.ContentProperty, new Binding("val1")); // どちらでもできた
            label1.SetBinding(Label.ContentProperty, nameof(Class1.val1)); // どちらでもできた
        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            // バインディングさせたデータソース内のプロパティを更新
            obj.val1 += 1;
        }
    }

    class Class1 : INotifyPropertyChanged  // バインディングさせるソースは、INotifyPropertyChangedが必要
    {
        private int _val1;
        public int val1
        {
            get { return _val1; }
            set
            {
                _val1 = value;
                OnPropertyChanged(nameof(val1));
            }
        }
        public event PropertyChangedEventHandler PropertyChanged;

        private void OnPropertyChanged(string name)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(name));
            }
        }
        public Class1(int x)
        {
            val1 = x;
        }
    }
}

