
bool CalcCheckDigit(string barcode){
    //最終の桁がチェックディジットなので省く（呼び出し時に省いていたら不要）
    barcode = barcode.Substring(0, barcode.Length - 1); 

    // indexのリストを作り、奇数と偶数に仕分けする
    IEnumerable&lt;int&gt; idxList = Enumerable.Range(0, barcode.Length); 
    IEnumerable&lt;int&gt; oddList = idxList.Where(x =&gt; x % 2 == 0);     // 奇数桁目はindex=0,2,...
    IEnumerable&lt;int&gt; evenList = idxList.Where(x =&gt; x % 2 == 1);    // 偶数桁目はindex=1,3,...

    // 奇数／偶数のリストごとに、Selectで値を加工
    // （ここでは文字列.Substringにindexを渡して取り出し、数値リストに加工）
    // 下記のサブメソッドEncodeToIntに分けてもよいかも
    IEnumerable&lt;int&gt; oddDigit = EncodeToInt(oddList, barcode);
    IEnumerable&lt;int&gt; evenDigit = EncodeToInt(evenList, barcode);

    // それぞれSumで合計、奇数桁目は3倍の重み付け（ウェイト）
    int sumOdd = oddDigit.Sum(x =&gt; x * 3);  // 一旦Selectで(x =&gt; x * 3)、あるいは次で3倍してもOK
    int sumEven = evenDigit.Sum();          // こちらはそのまま

    // 合計をstringに変換
    int sumAll = sumOdd + sumEven;
    string sumStr = sumAll.ToString();

    // 10から「合計の下１桁」を引く
    int lastDigit = Integer.Parse(sumStr.Last());
    int checkDigit = lastDigit == 0 ? 0 : 10 - lastDigit;

    return checkDigit;
}

IEnumerable&lt;int&gt; EncodeToInt(IEnumerable&lt;int&gt; list, string barcode){
    // チェックディジットは数値であることが前提なので、例外は起こします
    // 必要に応じて例外処理を加えて下さい。
    return list.Select(idx =&gt; barcode.Substring(idx, 1))        // 文字列を切り出して
               .Select(chr =&gt; Integer.Parse(chr));              // 改めて数値リストに変換
}

