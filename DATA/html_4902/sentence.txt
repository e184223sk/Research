More than 3 years have passed since last update.バーコードが不正に作られたものではないことを保証するための、最後の桁として付与する数字。
いくつもの計算パターンがあるものの、規格ごとに１つに定められているので、バーコードの規格ごとに確認すると良いです。
一般に普及するJANコード（13桁：データ部12桁+チェックディジット1桁）の場合、データ部12桁に対するモジュラス10ウェイト3というパターンを用います。これは、という意味で、という計算になります。（LINQに起こすときに少し付け加えます）以上の通り、計算アルゴリズムの一種を用いるので、どのようにアルゴリズムを組むかが頭に入っていると良いです。
for文をベースにしてみましょう。変数barcodeでバーコードのデータ部12桁がstring型で渡されているとします。
また、バーコードは数値のみの文字列であると保証されているものとして、ここではParseメソッドの例外は取りません。
（取るならif文でTryParse？ VB.NetならIsNumericですね）先ほどのdigitSumを使い、チェックディジットを出します。
理由をあれこれ書いたものの、自信が無いので、早速LINQのメソッドを使います。
文字列をListのように見立てることが出来るので、「下1桁」を取るためにLast()メソッドを使います。こうすると見た目が悪いですが、メソッドやプロパティとして外出しすれば問題ないと思います。
あるいは、三項演算子が許されていれば、digitSum % 10 = 0のときは最終的にチェックディジットは0になるので、この場合だけ「0」固定にしても良いでしょう。とすることが出来ます。（正直こっちの方が好き）さて、LINQに書き換えるにあたって、注意することがあります。
LINQに書き換えられるのは、foreachでも扱えるIEnumerable&lt;T&gt;に属する型（例えばList）です。
しかし、このIEnumerable&lt;T&gt;系列の型は、「処理する順序は基本的に保証されない」ため、今回のように「奇数桁・偶数桁に分けて処理する」には前準備が必要になります。それは、あらかじめindexのリストを「奇数リスト・偶数リスト」に分けておくことです。
つまり、最初の手順にこれを加え、という手順になります。（③はLINQは関係無くなるので割愛します）最初にして一番の肝のところです。手順をさらに細分化します。
元ネタは、for-samprle01.csのfor文の()内、およびif文になります。サクッとサンプルを出しましょう。先ほどの1.～3.が各行に対応しています。idxList.Where(x =&gt; x % 2 == 1);をidxList.Expect(oddList);としても問題はないですが、else文くらいの感覚で使いましょう。（詳しいことは割愛）詳しいことはQiitaにたくさん記事があるので、ちゃんとした説明は概ね省きますが、ここでは「書き換え方」についてざっくりまとめます。
ラムダ式は、「簡単なメソッドを、(引数 =&gt; 引数を使った式やメソッドの返り値)の形式で書いたもの」くらいの認識で（自分は）書いています。
最初に「ワンライナーネタ」と書きましたが、「簡単なメソッドをワンライナーの中に埋め込んで、リストアップなどを楽にする」という感覚です。これは多くのLINQメソッドでも同じで、bool型を扱うメソッドでよく使うところだと、という扱いになります。あとはそれぞれ、同じように処理するので、まとめて書きます。後半のメソッド部分が本題です。
これはfor-samprle01.csで書いた、ifブロック内の値の加工をまとめたものです。.Select()を繋ぐことで、for-samprle02.csでやったような値の加工を、リストの値それぞれに行えます。.Sum()メソッドも、Select()と同じような形で、引数=&gt;返り値のラムダ式を作ることが出来ます。 
ラムダ式を入れない場合は、単にリストのすべてを合計した形です。
※補足：LINQ-sample03.csの時点で.Select(x =&gt; x * 3)としてもよいですが、どちらでやってもよく、デバッグ時のリストの確認やメソッドへの共通化のため、Sumでの加工にしました。あとはLINQを使わない形になるので割愛しますが、最後に全文を載せて終わりにします。


