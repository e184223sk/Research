More than 3 years have passed since last update.ポケモンのようなターン制のゲームを開発してまして、そこで上手く実装できた部分の書き方を共有します。続いたり続かなかったり。今回はターン終了時の処理です。以下の特徴を持ったゲームです
- ターン開始時にお互いがわざ選択を行う
- キャラクターは素早さ順に行動する
- わざはダメージを与えたり、特殊効果を持つ
- キャラクターが先に全滅すると負けざっとこんだけあります引用元これらの詳しい効果について知る必要はありません。
重要なのは、各処理は行われる場合と行われない場合があり、処理が行われる場合には、「順番に」エフェクトやUI表示を行う必要があるということです。ポケモンのようなターン制ゲームの場合、わざを選択するタイミング、わざを出すタイミング、ターン終了時の処理をするタイミングなど、ゲームの状態を見て進行を管理する仕組みが必要です。
そういった仕組みを「ステートマシン」と呼びます。詳しくは割愛するので知らない方は調べてみてください。簡単に言うと一定時間処理を止められる仕組みです。
今回で言えば、例えば毒状態で毒ダメージを受けている間は処理を止めておき、それが終わったら次は宿り木の種の処理を行う、といった制御が必要です。
そういった制御にピッタリなのがコルーチンで、これを使った実装方法を紹介します。論点でない部分のコードは割愛しています。以下がポイントです。砂嵐ダメージなどポケモン毎に行う処理は、素早さ順で行われる。
　→最初に素早さ順でListに追加しておき、List内の順番に沿って処理する。//2.参照素早さが同じ場合は処理毎に素早さ順の判定を行う。
　→素早さが同じ場合だけシャッフル処理を行う。//4.参照エフェクト表示やUI更新が必要な時だけ待機時間を設ける
　→個別の処理は処理の有無をbool値で返して、trueの時のみ待機する。//3,5.参照
　→コルーチンの待機時間はyield return new WaitForSeconds (float);で表せます。毒ダメージなどでターン終了時の処理中にポケモンが瀕死になる場合があるため、最後の方で再度勝敗判定を行う。//6.参照以上、マニアック気味の内容でした。
他のターン状態を管理する処理については割愛しています。もし参考になった場合はいいねをお願いします。


