using System;
using System.Linq;

namespace PlayGround
{
    class Data
    {
        public int Value { get; set; }
    }

    class Processor
    {
        public Data Do(Data data)
        {
            // process
            data.Value = 1;

            // and do something
            System.Threading.Thread.Sleep(1);

            return data;
        }
    }

    class Program
    {

        static void Main(string[] args)
        {
            const int N = 5000;
            var list = Enumerable.Range(1, N).Select(x =&gt; new Data() { Value = 1 }).ToArray();

            var sw = new System.Diagnostics.Stopwatch();

            // for
            sw.Restart();
            for (var i = 0; i &lt; list.Length; i++)
            {
                list[i] = new Processor().Do(list[i]);
            }
            Console.WriteLine("for      : " + sw.Elapsed);

            // LINQ
            sw.Restart();
            list = list.Select(x =&gt; new Processor().Do(x)).ToArray();
            Console.WriteLine("LINQ     : " + sw.Elapsed);

            // PLINQ(1)
            sw.Restart();
            var p = new Processor();
            list.AsParallel().ForAll(x =&gt; x = p.Do(x));
            Console.WriteLine("PLINQ(1) : " + sw.Elapsed);

            // PLINQ(1')
            sw.Restart();
            list.AsParallel().WithDegreeOfParallelism(8).ForAll(x =&gt; x = p.Do(x));
            Console.WriteLine("PLINQ(1'): " + sw.Elapsed);

            // PLINQ(2)
            sw.Restart();
            list.AsParallel().ForAll(x =&gt; x = new Processor().Do(x));
            Console.WriteLine("PLINQ(2) : " + sw.Elapsed);

            // PLINQ(2')
            sw.Restart();
            list.AsParallel().WithDegreeOfParallelism(8).ForAll(x =&gt; x = new Processor().Do(x));
            Console.WriteLine("PLINQ(2'): " + sw.Elapsed);

            Console.ReadKey();
        }
    }
}


