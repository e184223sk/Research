
    // ドロップアイテムのインタフェース
    public interface IDropItem {
        string Name { get; }
        int Price { get; }
        string Description { get; }
    }

    // ドロップアイテムとして扱える武器の列挙型
    public abstract class Weapon : IDropItem {
        public static Weapon Sword = new WeaponSword();
        private class WeaponSword : Weapon {
            // コンストラクタがpublicでもクラス自体はprivateなので外部からはインスタンス生成不可
            public WeaponSword() {}
            public override string Name { get { return "剣"; } }
            public override int Price { get { return 100; } }
            public override string Description { get { return "いい感じの説明"; } }
            public override void Attack() {
                base.Slash();
            }
        }

        public static Weapon Spear = new WeaponSpear();
        private class WeaponSpear : Weapon {
            public WeaponSpear() {}
            public override string Name { get { return "槍"; } }
            public override int Price { get { return 50; } }
            public override string Description { get { return "そんな感じの説明"; } }
            public override void Attack() {
                base.Pierce();
            }
        }

        public static Weapon Club = new WeaponClub();
        private class WeaponClub : Weapon {
            public WeaponClub() {}
            public override string Name { get { return "棍棒"; } }
            public override int Price { get { return 10; } }
            public override string Description { get { return "とてもアレな説明"; } }
            // Attack()の実装は省略可能
        }

        protected Weapon() {}

        // 名前、価格、説明は必ず列挙子で定義する
        public abstract string Name { get; }
        public abstract int Price { get; }
        public abstract string Description { get; }

        // 攻撃処理の実装は省略可能
        public virtual void Attack() {
            // オーバーライドしない場合はデフォルトとして殴る処理
            Strike();
        }

        // protectedで宣言したプロパティやメソッドは列挙子側からアクセスできる
        protected void Slash() {
            // 切る武器の処理
        }

        protected void Pierce() {
            // 刺す武器の処理
        }

        protected void Strike() {
            // 殴る武器の処理
        }

    }

