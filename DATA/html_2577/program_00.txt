/// &lt;summary&gt;
/// DragDropのイベントハンドラー
/// &lt;/summary&gt;
/// &lt;param name="sender"&gt;&lt;/param&gt;
/// &lt;param name="e"&gt;&lt;/param&gt;
private void pnlDragAndDrop_DragDrop(object sender, DragEventArgs e)
{
  // DataFormats.FileDropを与えて、GetDataPresent()メソッドを呼び出す。
  var files = (string[])e.Data.GetData(DataFormats.FileDrop, false);

  // GetDataの戻り値はstring型の配列であり、
  // 複数のファイルがドロップされた場合には
  // ドロップされた複数のファイル名が取得できる。

  for (int i = 0; i &lt; files.Length; i++) {
    // GetDataにより取得したString型の配列から要素を取り出す。
    var fileName = files[i];
    Console.Write(fileName);
  }
}

/// &lt;summary&gt;
/// DragEnterのイベントハンドラー
/// &lt;/summary&gt;
/// &lt;param name="sender"&gt;&lt;/param&gt;
/// &lt;param name="e"&gt;&lt;/param&gt;
private void pnlDragAndDrop_DragEnter(object sender, DragEventArgs e)
{
  // マウスポインター形状変更
  //
  // DragDropEffects
  //  Copy  :データがドロップ先にコピーされようとしている状態
  //  Move  :データがドロップ先に移動されようとしている状態
  //  Scroll:データによってドロップ先でスクロールが開始されようとしている状態、あるいは現在スクロール中である状態
  //  All   :上の3つを組み合わせたもの
  //  Link  :データのリンクがドロップ先に作成されようとしている状態
  //  None  :いかなるデータもドロップ先が受け付けようとしない状態

  if (e.Data.GetDataPresent(DataFormats.FileDrop))
  {
    e.Effect = DragDropEffects.Copy;
  }
  else
  {
    e.Effect = DragDropEffects.None;
  }
}

