Blazor WebAssemblyアプリケーションと静的サイトのホスティングサービスのNetlifyに関して下記の点を説明しようと思います。Blazor WebAssembly含めSPAアプリケーションのウリの一つとして、従来のWEBアプリケーションのようなサーバ実行環境を必要とせず、htmlファイルなど静的なファイルをホスティングするだけのサービスでアプリケーションがデプロイできる点が挙げられます。AWS,GCP,Azure等のメジャーなクラウドサービスも静的サイトをホスティングするサービスを提供していますが、個人のちょっとした趣味で開発する上ではシンプルかつ無料もしくは、無料枠が大きいサービスを使用できるのが望ましいです。そこでよく取り上げられるのが、Firebase,GitHub Page,Netlifyといった静的サイトのホスティングサービスになるかと思います。Blazorの例ですとGitHub Page、Firebaseのデプロイの手順を見かけます。
(手前味噌ですが以前私のほうでも記事を書いています。)
AdventCalenderで@jsakamotoさんがGitHub Pageで簡単にデプロイできるためのライブラリをNugetで公開していますね。
Blazor WebAssembly アプリの GitHub Pages への発行を、より楽にする今回はNetlifyにBlazorアプリケーションをデプロイする方法と認証機能の実装を試してみたいと思います。
本題ではないため詳細は省きますが、Netlifyの特徴として下記の点などが挙げられます。一方でFirebaseで提供されている、DBなどのデータストア機能は提供されていないので別サービスを使用する必要があります。予め下記を実施しておいてください。今回はGitHub Actionとの連携を行い、GitHubにコミットしたソースをビルドしてNetlifyにデプロイします。
そのためにはGitHub Action側に連携を行うための各種情報が必要になるので取得を行います。Netlifyの個人ページにアクセスして、New 　access tokenを選択します。入力欄にNETLIFY_AUTH_TOKENと入力して、Generate tokenを選択します。
トークンが発行されるのでメモします。
次にサイトIDの取得を行います。
先にIDの取得だけしたいので、フォルダと空のindex.htmlファイルを作成してください。Siteのページにアクセスして、Want to...のエリアにdummyフォルダをドラッグ＆ドロップしてください。ダミーのサイトが作成されます。
https://～のURLが今後デプロイ後にも使われるURLなのでメモします。
次にSite settingsを選択します。API IDの部分に記載された値をメモします。Netlifyから取得した情報を登録してGitHub Actionでデプロイできるように設定します。デプロイしたいBlazorのGitHubレポジトリを開いて、Settings→SecretsからNew repository Sercretを選択します。Netlifyで取得した２つのキーを登録します。
なお。APPIDはNETLIFY_SITE_IDというキーで設定します。下記のように２つのSecretsが登録できればOKです。
Actionのタブを選択します。スクロールして、More continuous integration workflows...を選択して .NET Coreの項目を見つけてSet up this workflowを選択します。 dotnet-core.ymlの編集画面が表示されます。
このymlファイルを編集して、BlazorアプリをNetlifyにデプロイできるように設定します。具体的に実施することとしては、下記になります。下記の例では、.NET5.0.100でビルドを行ってデプロイしています。ymlファイルの編集が終わったら、Start Commit → Commit new fileを選択します。以上で、Actionの設定は完了です。
今後GitHubにpushする度に自動でデプロイが実行されます。
(本格的に使用するならば、relaseブランチやmainブランチなど特定のブランチに限定してデプロイするなどの設定を行う必要があるかと思います。)Actionタブを選択
Create dotnet-core.ymlが☑マークになっていればビルド完了です。
(ビルドに2-3分程度かかります。)Netlifyの設定時にメモしたURLにアクセスして下記のようにBlazorアプリが起動すればデプロイ成功です。
以降、GitHubのmainにpushするたびにこのワークフローが実行されてNetlifyにデプロイされます。個々のコマンド実行時の実行結果が確認できるので、どの処理に問題があるのかも判別しやすいかと思います。Netlifyにデプロイする手順は以上です。次にNetlifyの機能をBlazorに組み込む方法を考えてみましょう。
Netlifyのサービスの１つであるNetlify Identityを使ってログイン機能の実装を考えてみます。
Netlify Identityには、下記の方法でログイン機能が実装できます。ウィジェットの使用を使用することでjsファイルの参照とタグを配置するだけでお手軽にログインが実装できますが、Blazorの動的にタグを配置するような仕組みだとうまくコンポーネントに適応されないようで諦めて、後者のGoTrue APIによる実装を行いました。初期アカウントの登録等に関しては割愛しますので、別途登録等を行ってください。
既に登録済みのアカウントを使用した例を紹介します。次に、これらを呼び出すサービスをクラスを作成します。
AuthenticationStateProviderなどの実装に関しては以前の認証方法に関して記載した記事で説明しているので参照ください。
https://qiita.com/nobu17/items/91c96ede1bd043fe1373これを組み込むことで下図のようなログイン機能を実装しています。時間がなかったため、かなり雑で本当に少し参考になる程度ですが下記にソースコードも入れていますので興味ある方は参照ください。GitHub LinkBlazor WebAssemblyをGitHub Actionを使用してNetlifyにデプロイする方法を紹介しました。
GitHubと連携してデプロイ可能な点は便利ですね。
今後、Functionとの連携なども試す事ができればと思います。下記のページなどを参考に試してみましたので、より詳細な情報をなどを確認したい場合には下記も合わせて参照ください。Hosting Blazor on Netlify using Github Actions (Part 1 of Series)
Deploying a .NET Core Blazor App to Netlify using GitHub Actions


