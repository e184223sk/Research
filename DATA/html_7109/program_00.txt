using UnityEngine;
using UnityEditor;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;

[CustomEditor(typeof(TargetClass))]
public class TargetClassEditor : Editor {

    TargetClass m_Target = null;

    GameObject m_PreviousObject = null;

    string[] m_Methods = new string[]{};

    /// &lt;summary&gt;
    /// 収集したメソッドをクリア
    /// &lt;/summary&gt;
    void ClearMethods()
    {
        m_Methods = new string[] { };
    }

    /// &lt;summary&gt;
    /// 登録されたオブジェクトのPublicメソッドを収集
    /// &lt;/summary&gt;
    void CollectMethods()
    {
        if (m_Target == null) {
            ClearMethods();
            return;
        }

        if (m_Target.GimmickTarget == null) {
            ClearMethods();
            return;
        }

        if (m_PreviousObject == m_Target.TargetObject) {
            return;
        }
        m_PreviousObject = m_Target.TargetObject;

        MonoBehaviour[] components = m_Target.TargetObject.GetComponents&lt;MonoBehaviour&gt;();

        ArrayList result = new ArrayList();
        result.Add("None");
        foreach (var component in components) {
            string[] methodsName = component.GetType().GetMethods(BindingFlags.Instance | BindingFlags.Public)
                                    .Where(x =&gt; x.DeclaringType == component.GetType())
                                    .Where(x =&gt; x.GetParameters().Length == 0)
                                    .Select(x =&gt; x.Name)
                                    .ToArray();
            result.AddRange(methodsName);
        }

        m_Methods = (string[])result.ToArray(typeof(string));
    }

    void OnEnable()
    {
        m_Target = target as TargetClass;
        CollectMethods();
    }

    public override void OnInspectorGUI()
    {
        base.OnInspectorGUI();

        CollectMethods();

        if (m_Target == null) {
            return;
        }

        if (m_Methods.Length == 0) {
            return;
        }

        int index = m_Methods
                        .Select((Name, Index) =&gt; new { Name, Index })
                        .First(x =&gt; x.Name == m_Target.CallbackName)
                        .Index;

        using (new EditorGUILayout.HorizontalScope()) {
            EditorGUILayout.LabelField("Trigger methods");
            m_Target.CallbackName = m_Methods[EditorGUILayout.Popup(index, m_Methods)];
        }
    }
}

