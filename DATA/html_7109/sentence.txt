More than 5 years have passed since last update.やりたかったことは、UIのclickイベントが発生した際に、アタッチしたオブジェクトに定義されているメソッド一覧から任意のメソッドを実行する、というのに似せた仕組みです。。
↑これ今回やりたかったことを実現するのに利用したもの。主に Reflection ですね。※ ちなみにカスタムエディタ部分はひとつ前の記事（[Unity] カスタムエディタを使ってインスペクタをリッチにする）にまとめたのでそちらを参照してください。基本的なフローは以下のようになります。という感じの流れです。
（自作しなくてもなんかありそうですが、見つからなかったので作りました( ;´Д`)）まずはざっとコード全体を載せます。今回の最大のポイントは、 Reflection を用いてランタイムにメソッド名などを取得している点です。
具体的には以下の部分がそれに該当します。メソッド実行対象となるオブジェクトがアタッチされている場合に、アタッチされたオブジェクトに紐づくメソッドリストを取得する部分です。GetComponents メソッドにて、アタッチされている MonoBehaviour クラスを継承したものを抜き出しています。
そしてそれを foreach で回しつつ、コンポーネント内で定義されているメソッド一覧を抜き出します。今回は仕様として「インスタンスメソッド」「publicメソッド」「引数0」という条件で抜き出しました。
（もちろん、用途によってここは変更可能です）GetMethods メソッドにフラグを渡してやることで、public / private などを選択してメソッド一覧を取得することができます。
戻り値は「MethodInfo[]」ですが、そこからさらにLINQを使ってメソッド名の文字列の配列としてフィルタしているのが該当の処理です。まぁコードを見ればなんとなく分かると思いますｗあとは、それでフィルタした文字列による配列をマージして、最終的にメソッド名一覧として利用します。インスペクタへの表示についてはカスタムエディタを利用して処理しています。
詳細については前の記事を参照してもらいたいですが、ポップアップ部分について補足しておきます。OnInspectorGUI メソッドをオーバーライドすることで実現します。
いくつかのNullExceptionに対する対応を入れていますが、見るべき部分は収集したメソッドリストである m_Methods の使い方です。m_Methods からLINQを用いて、現在選択されているindexを得ます。（ちなみに m_Target.CallbackName は、カスタムエディタの対象となるクラスのインスタンス変数です。当然、設定された値を利用するのはコンポーネント側なので当然ですね）さて、indexを取得したら、それを選択されたindexとして利用しつつ、カスタムエディタのインスペクタ上のGUIをレンダリングします。
それが以下の部分です。横方向にグルーピングする処理を入れていますが、主な部分は EditorGUILayout.Popup の部分です。
第一引数は選択されたインデックス。なのでその直前で取得したindexですね。
そして第二引数が実際に表示すべきポップアップのリストとなる配列です。
ここに、収集したメソッドリストを設定します。こうすることで、 Reflection によって取得したメソッドリストをポップアップで表示することができます。ハマった、というほどハマってはいませんが、最初実装した際、 CallbackName がプレイ時に初期化される、という現象がありました。
気づけばなんのことはないですが、 CallbackName のAttributeが SerializeField になっていなかったためにプレイ時に初期化されていたようです。
なので、変数宣言時にAttributeをつけるのを忘れないようにしないと選択したものが実行されずに混乱します。今回のものは、以下の記事をベースに作成しました。C#はまだまだ知らないことが多いですね；ということで、LINQで利用した「匿名型」について。
（ちなみにこちらを参考にしました）具体的にはこんな感じのやつです。普通に使う場合はこんな感じになります。以上のように使えるオブジェクトを生成します。
JavaScriptでいうところの Object に近いでしょうか。
LINQと併用するとだいぶ便利ですね。


