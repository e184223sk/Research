More than 3 years have passed since last update.巷では中々に評判の芳しくないDefaultValueアトリビュートの話です。イマイチその有用性が分かり難いアトリビュートではありますが、つい先日その有難味にどっぷり浸る体験をしてしまいました。簡単ではありますが、その顛末を纏めてみたいと思います。TextBoxのサブクラスを作ろうと思い立ったんですね。
非常に簡単な話だけしてしまうと、常にMultilinedなTextBoxを作ろうと思った訳です。因みに此処はツッコミどこじゃないですよ。究極に単純化した話ですから。でTextBoxExクラスを以下の様に定義します。Multilineプロパティには触って欲しくないので、getterだけ持った同名のプロパティをnewで被せます。で、コンストラクタ中で親クラスのMulitilineプロパティにtrueをセットすれば完成ですね。
ここで一旦ビルドしておきましょう。さっきビルドしたのでツールボックスウィンドウにTextBoxExが追加されています。
これをメインプロジェクトのForm上に配置します。よしよし。
コードビューに切り替えて…
とか思ったら、エラーが出てしまった。場所は以下にあるForm2.Designer.csの中の32行目。setterが無いのに、Multilineプロパティに値を設定しようとしてエラーになっています。
TextBoxExのコンストラクタでbaseの方に設定するから、勝手な事しないでくれよーう～～ん、コンストラクタで直接設定しちゃうからいけないのかと思って、以下の方法を試してみました。ま、何れもダメでしたけどね。
ここで得た結論は、（当然かも知れませんが）ビューデザイナさんはソースそのものを見てInitializeComponentメソッドを作り上げている訳ではないと云う事。何か初期値設定を抑制する様な機能はないかなー
って考えたら、やっぱりアトリビュートだよね。で、改めてアドリビュートを見返しても、それらしいのは見つかりません。
とか言いつつ、この記事の主題から考えれば、答えはDefaultDataAttributeであったと云う事は容易に想像がつくでしょう。実はそうなんですよ。ってして、Form上のTextBoxExを一旦削除、全体ビルドしてTextBoxExを再度配置したところ、Multilineアトリビュートへの代入文は生成されませんでした。めでたしめでたし…じゃなくて、最後の考察を…逆に[DefaultValue(true)]を指定したまま、コンストラクタのbase.Multiline = true;を消したら、Designer.cs内にthis.TextBoxEx1.Multiline = false;が出てきましたよ。ここで、一つの結論に至ります。
つまり、ビューデザイナさんはデザイン画面上に展開されたコントロールのプロパティ（コンストラクタは動くんでね）の値を見て、Designer.cs内のコントロールのインスタンス化コードを生成しているんじゃないでしょうか？で、プロパティの設定コードを出すか否かの判定にDefaultValueAttributeの値を利用している、んです。
あくまでもデザイナ向けのアトリビュートであって、自分のコードに反映される値ではないよー
と云う事をきちんと押さえておかないといけないんですね。こう考えると、DefaultValueAttributeはとっても大事な役割を持っていました。

でも、基本データ型以外は如何にも指定し難いのは何とかならんもんか。
いや、ここら辺もう少しきちんと理解すれば良いのかなぁ…ヨシ、今度もう少し掘り下げてみよう。（時間ができた時にね）


