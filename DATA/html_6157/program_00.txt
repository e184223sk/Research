using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Threading.Tasks;

namespace FunctionalTesting
{

    public class Target
    {
        private Func&lt;string, string&gt; bar;
        private Func&lt;string&gt; foo;
        private Action&lt;string&gt; some;
        public Target ()
        {
            bar = (a) =&gt;
            {
                Console.WriteLine($"GetBar: {a}");
                return $"Remote Call: GetBar: {a}";
            };
            foo = () =&gt;
            {
                Console.WriteLine($"Remote Call: GetFoo!");
                return "GetFoo!";
            };
            some = (a) =&gt; {
                Console.WriteLine($"Remote Call: Some {a}");
            };
        }

        public Target(Func&lt;string, string&gt; bar, Func&lt;string&gt; foo, Action&lt;string&gt; some)
        {
            this.bar = bar;
            this.foo = foo;
            this.some = some;
        }

        public async Task&lt;string&gt; GetBarAsync(string param)
        {
            return bar(param);
        }
        public async Task&lt;string&gt; GetFooAsync()
        {
            return foo();
        }

        public async Task SetSomeAsync(string param)
        {
            some(param);
        }


    }

    [TestClass]
    public class UnitTest1
    {
        [TestMethod]
        public async Task TestFunctionAsync()
        {
            var target = new Target();
            await target.GetFooAsync();
            await target.GetBarAsync("aaa");
            await target.SetSomeAsync("bbb");

            string someResult = "";
            target = new Target(
                (a) =&gt;
                {
                    Console.WriteLine("Mocked! Bar");
                    return $"Mocked Bar: {a}";
                },
                () =&gt;
                {
                    Console.WriteLine("Mocked! Foo");
                    return $"Mocked Foo:";
                },
                (a) =&gt;
                {
                    Console.WriteLine("Mocked! Some");
                    someResult = $"Some Parameter: {a}";
                });

            Assert.AreEqual("Mocked Bar: aaa",await target.GetBarAsync("aaa"));
            Assert.AreEqual("Mocked Foo:", await target.GetFooAsync());
            await target.SetSomeAsync("ccc");
            Assert.AreEqual("Some Parameter: ccc", someResult);


        }
    }
}


