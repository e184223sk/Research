More than 1 year has passed since last update.エンジニアが披露宴の余興を頼まれたらこちらの記事に感化されて、Microsoft Azure で作成してみました。コードは、Github に置いてあります。HappinessChecker【LINEとランキングページ】【ダウンロード機能】参加者で投稿画像を共有できるように、ダウンロード機能を設けています【リアルタイム通信】上記わかりづらいですが、異なるブラウザでランキングページを表示して、スマホから更新している状態です。ランキングページでは「新しい画像が投稿」された場合と「いいね！ボタン」が押下されたときに、ブラウザを更新なしで、変更がリアルタイムで反映されるようにしていますちなみに、「いいね！ボタン」はユーザ管理をしていないので、いいね！と思った分だけ押下可能です。LINEとの連携部分はDurable Functions を使い、Vue.js との連携部分はAzureFunctionsで使っています。LINE との連携部分では、HttpClient で通信を行っています。このクラスでは IDisposable が実装されますが、これを using ステートメント内で宣言およびインスタンス化することはお勧めできません。その理由は、HttpClient オブジェクトが破棄されても、基になるソケットがすぐに解放されず、ソケットの枯渇の問題が発生する可能性があるということにあります。 ドキュメントによるとHttpClient のインスタンスは使いまわしを行うことがベストプラクティスのため、IHttpClientFactory を DI して使うようにしました。今回の用途的に「型指定されたクライアント」で実装しました。各 DocumentClient インスタンスと CosmosClient インスタンスはスレッドセーフであり、直接モードで動作しているときには効率的な接続管理とアドレスのキャッシュが実行されます。 効率的な接続管理と SDK クライアントのパフォーマンス向上を実現するために、アプリケーションの有効期間中は、AppDomain ごとに単一のインスタンスを使用することをお勧めします。DocumentClient インスタンスを使いまわすことが、ベストプラクティスのため、こちらも DI して使います。投稿された画像を保存しているストレージアカウントのエンドポイントを表示したくなかったので、
Azure Functions Proxy 経由で画像表示を行うようにした。従量課金の AppService Plan だとコールドスタートなので、初回は画像表示に遅延が発生してしまうので、プラン変更を行うか、他の方法で実装すべきだったなと少し思っています。 今回、リアルタイムでのコンテンツ更新を行いたかったので Azure SignalR を使いました。ランキング情報の json をそのまま配信したかったので、シンプルにデフォルトで実装しています。Vue側で、negotiate にリクエストを送信して接続情報を取得して、受け取った json を表示するだけ以下を参照して、登録を行うチャンネルの作成が完了したら「Channel secret」と「Channel access token」を控えておくMicrosoft Azure で以下を作成する作成をしたら「キー」や「エンドポイント」を控えておくストレージアカウントの「BLOB」を使い、「uploadimage」というコンテナーを作成しておく以降の local.settings.json の項目を AzureFunctions のアプリケーション設定に登録するその際、SIGNALR_URL は Azure 上に作成した AzureFunctions のエンドポイントを設定する前述の作業で控えた「キー」と「エンドポイント」を設定するローカル実行する場合は、localhost の記載はそのままにしておく※HOSTの記載は変更しない
　ローカルデバック時の vue.js との連携のため投稿画像を保存するストレージアカウントのエンドポイントに書き換えVUE_APP_HOST の書き換えAzure Storage コンテナー に VScode からデプロイを行うAzure にデプロイした「LineBotHttpStart」のエンドポイントを設定すれば完了今回初めて、LINE Messaging API や Durable Function 、Cosmos DB 、SignalR 、Vue.js を使ってみました。まだまだ Durable Function や vue.js の実装方法など今後も引き続き、勉強していくしかないなと感じました。しかし、この個人プロジェクトかなり学びが多い！楽しかった！.NET Azure Functions で依存関係の挿入を使用するIHttpClientFactory を使用して回復力の高い HTTP 要求を実装するAzure Cosmos DB と .NET のパフォーマンスに関するヒントMessaging APIを利用するにはAzure SignalR サービスとは


