More than 3 years have passed since last update.ログを抽出するサンプルプログラムを通して、LINQPadの簡単な使い方と、C#で下記の操作をする方法を紹介する。
- ファイルの読み書き
- フィルタ、射影 (LINQ)
- 文字列から数値・日時に変換C#初心者。ただし、CやJavaなどほかの言語は経験し、下記については把握している前提で。.NETプログラムを「手軽」に書けて、「素早く」実行できて、「見やすい」実行結果を表示してくれる素敵な開発/実行環境。Visual Studio とは比にならないくらいお手軽なので、学習にとても向いている。（と思う）ただ、手軽さの反面、アプリケーションの生成や配布が必要な規模の開発には向かない。ちょっとした開発にはLINQPad, ちゃんとした開発には Visual Studio, というように使い分けるとよい。リンク：LINQPad - The .NET Programmer's Playgroundなお、LINQPadは無償で使えるが、有償版もある。課金することで下記のような便利機能も使えるようになる。特に入力補完とヘルプ表示があると学習が捗るので買おう！たったの $89 だ。(2017/4/25時点)リンク：LINQPad - Purchaseとりあえず動かしてみる。起動すると下図のような画面が表示される。左側の "Add connection" や "My Queries" はデータベースへの接続や、書いたプログラムの保存・再利用に使用するが、今はまだ気にしなくてよい。テキストエディタにコードを書く。
コンソールに文字列を出力するには、ConsoleクラスのWriteLineメソッドを使う。ちなみに課金プレイヤーは コードスニペット を使える。
c, w, Tab と打ってみると、下記のようにコードが自動入力されるはずだ。コードスニペットが使いこなせるようになると生産性が大きく上がるので、ぜひ慣れてほしい。cwのほかにもいろいろある。↓は個人的によく使うスニペット。テキストエディタ左上の実行ボタンを押すとコードが実行され、実行結果がテキストエディタの下に表示される。Visual Studio で Hello World するよりも10倍くらい楽だね！IISのログは↓みたいな感じ。このログを抽出するプログラムをLINQPadで書いてみる。※サンプルコードを動かしたい場合はこのサンプルログを C:\tmp\iis.log に保存してね。複数行にまたがるプログラムを書きたいときは、Language を C# Program に設定する。
File.ReadAllLines()はファイルから文字を読むメソッドの一つで、行単位で文字列の配列形式にしてくれる。
ReadAllLines()のほか、ReadAllText()や、ReadAllBytes()もある。Dump() は LINQPad が提供する便利メソッド。文字列、配列、オブジェクト、とりえあえずなんでも .Dump() をつければ、いい感じに表示してくれる。Visual Studio で開発するときは使えないので注意。※課金プレイヤーは、メソッドの入力中とメソッドにマウスカーソルを乗せたときに概要が表示される。使い方が分からなくなったらこれを見ればよい。それでもわからなければF1を押すとググってくれる。
文字列配列が良い感じに表示された。Dump()便利。#で始まる行は邪魔なので消したい。Where()は LINQ と呼ばれるメソッドの一つで、フィルタに使う。Func&lt;TSource, bool&gt; predicate はフィルタの条件で、条件にマッチした要素の IEnumerable&lt;T&gt; を返す。※とりあえず今は IEnumerable&lt;T&gt;は配列ではないけど配列のようなものくらいの認識で良い。FuncとかTSourceとかもとりあえずおいておいて、今回は使い方だけ。String.StartsWith() は文字列クラスのメソッド。文字列の先頭が指定した文字列と一致するかを判定し、一致したら true, 一致しなかったら false を返す。#で始まる行を取り除けた！Whereメソッドの引数に渡している式はラムダ式といって、簡単に書ける関数みたいなもの。↑のラムダ式は、↓のメソッドとだいたい同じ意味を持つ。なので実はこうも書ける。ただ、今のところはラムダ式がどーのこーのはあまり深く考えずに、こんな感じで書けるんだなーくらいで。ログの日時や、応答にかかった時間でフィルタしてみたい。それにはまずフィールドを分割する必要もある。String.Split() は文字列を separator で分割して、文字列配列にしてくれる。DateTime.Parse() は文字列を DateTime に変換してくれる。Int32.Parse() は文字列を int に変換してくれる。20日のログで、応答に20ミリ秒以上かかったリクエストを抽出するコードSelect()は要素を変換する。Func&lt;TSource, TResult&gt; selector は変換関数。ToArray() は IEnumerable&lt;T&gt; 型を配列に変換する。Where() とか Select() とかの戻り値は IEnumerable&lt;T&gt; という型で、配列ではない。File.WriteAllLines() ReadAllLines()と対になるメソッドで、文字列の配列形式を1行1要素で書いてくれる。WriteAllLines()のほか、WriteAllText()や、WriteAllBytes()もある。grep + awk で良くねLINQPadは学習にも向いているのでオススメ！
- Visual Studio よりもお手軽
- 出力がリッチで分かりやすい
- Visual Studio のような入力保管・ヘルプ表示もしてくれる（課金すれば）今回は下記についてほんの少しだけ触れただけだけど、気になったことがあったらどんどん学習してC#に慣れて行ってもらえれば。
- ファイルの読み書き
- フィルタ、射影 (LINQ)
- 文字列から数値・日時に変換


