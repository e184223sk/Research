More than 1 year has passed since last update.C#で開発時、ちょっとしたテストコードをスクリプト言語のようにコンパイルを挟まず実行できる環境を用意しておくと良いと考えています。C#はコンパイルして実行するまでに、そこそこ手間がかかりますし。ググるとC#インタラクティブ1、csi2という手段も出てきます。
ただし今回は以下の条件から、dotnet-scriptに採用します。
https://github.com/filipw/dotnet-script本家のマニュアルに従ってdotnet-scriptの環境を構築していきますが、実行させるにあたって.NET Core 2.1SDKは必須です。以下のサイトからダウンロードしてインストールしておきます。
https://dotnet.microsoft.com/download/dotnet-core
※C#8.0を使用する場合は.NET Core 3.1SDKをインストールします。ちなみに.NET Core3.1SDKだけではdotnet-scriptは動きません。プラットフォーム問わず、以下のコマンドでdotnet-scriptをインストールできます。macOSの場合は以下のcurlコマンドでもインストールできます。使用するエディタは何でも良いですが、僕はサクッと環境を構築できるVisualStudioCode(以下:VSCode)を使いました。この2つをExtensionsをインストールしておきます。
コード補完が利くようになりShift + Option + Fでソース整形されるようになります。これで環境構築は完了です。initコマンドを実行すると、以下のテンプレートファイルが生成されます。3以下のコマンドを実行するとHello world!と出力されます。指定したパスの扱いについて調査していきます。
以下のファイル構成をサンプルに調査を進めます。試しに以下のソースコードを実行してみます。以下のログ出力の通り、実行ファイル(Sample.csx)を起点にした相対パスのようです。上記のようにコマンドライン引数にarg1, arg2, arg3と3つの値をセットしてスクリプト側で受け取る方法です。このようにArgsに詰め込まれているので、上記のようなコードで受け取ることが出来ます。
ちなみにArgsは IList&lt;string&gt;ですので、要素数を取得したい場合は、LengthではなくCountを使用します。コマンドライン引数が必須のスクリプトの場合、以下のようにArgsがnullになる場合があり、以下のようなエラーが出力されます。このようなnullチェックを事前に走らせた方が良いでしょう。サンプルを１つ作ってみます。以下は指定ディレクトリ内の、.txtファイルを.csファイルにファイルリネームするというものです。全ソースはコチラ以下のように引数にディレクトリパスを指定してdotnet-scriptを実行します。dotnet-scriptを使うとC#をインタプリタ型言語のようにライトにC#を実行できるようになります。
本記事では触れていませんがREPLでも動作します。
テストコードを書いてサクッと挙動をチェックする時などに使えますのでC#を扱うエンジニアはdotnet-scriptが動く環境を作っておくと開発効率が上る可能性はあるなと思いました。dotnet-scriptコマンド実行時に以下のエラーが出た場合は.NET Core2.1が未インストールです。
インストールすると解決します。
バイナリはコチラからダウンロードできます。dotnet toolでインストールした場合はdotnet script、curlでインストールした場合はdotnet-scriptを使用します。少しハマりました。C#インタラクティブはVisualStudio依存 ↩csiはMac向けにリリースされていないため、本記事では扱わない(参考:https://www.buildinsider.net/language/csharpscript/01) ↩既にcsxファイルが存在する場合は生成されません ↩


