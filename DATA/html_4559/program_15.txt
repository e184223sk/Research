
public abstract class Response&lt;TErrorCode&gt; {
  private static readonly ConcurrentDictionary&lt;Type, Dictionary&lt;object, ErrorMessageAttribute&gt;&gt; cache = new ConcurrentDictionary&lt;Type, Dictionary&lt;object, ErrorMessageAttribute&gt;&gt;();

  // エラーがあるときに利用するコンストラクタ
  protected Response(TErrorCode error)
    : this(new[] {error}) {
  }

  protected Response(IEnumerable&lt;TErrorCode&gt; errors)
    : this(errors.Select(x =&gt; new ErrorContainer&lt;TErrorCode&gt;(x))) {
  }

  protected Response(IEnumerable&lt;ErrorContainer&lt;TErrorCode&gt;&gt; errors) {
    Errors = errors.ToArray();
  }

  // エラーがないときに利用するコンストラクタ
  protected Response() {
    Errors = new ErrorContainer&lt;TErrorCode&gt;[] { };
  }

  public ErrorContainer&lt;TErrorCode&gt;[] Errors { get; }

  public bool HasError() {
    return Errors.Any();
  }

  public string ToErrorMessage() {
    if (!HasError()) {
      return "";
    }

    var messages = Errors
      .Select(x =&gt; x.ErrorCode)
      .Select(getMessage);

    var message = string.Join(Environment.NewLine, messages);

    return message;
  }

  private string getMessage(TErrorCode code) {
    var errorMessageAttributes = cache.GetOrAdd(code.GetType(), type =&gt; {
      var lookup = type.GetFields()
        .Where(x =&gt; x.FieldType == type)
        .SelectMany(x =&gt; x.GetCustomAttributes(false), (x, attribute) =&gt; new {code = x.GetValue(null), attribute})
        .ToLookup(x =&gt; x.attribute.GetType());

      var dictionary = lookup[typeof(ErrorMessageAttribute)].ToDictionary(x =&gt; x.code, x =&gt; (ErrorMessageAttribute) x.attribute);
      return dictionary;
    });

    if (errorMessageAttributes.TryGetValue(code, out var errorMessageAttribute)) {
      return errorMessageAttribute.Message;
    } else {
      return "";
    }
  }
}

