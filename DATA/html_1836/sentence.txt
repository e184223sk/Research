More than 1 year has passed since last update.僕は1か月ちょっとの間Vue.jsとBlazor(Wasm)双方でMHWIルーレットを作っていました。
(モンスターハンターワールド:アイスボーン用に装備とかクエストを自動で決めるツール)Vue.jsとBlazorの書き心地って似てるよねってことでそれぞれ作ってみてその比較を書き留めます。Vue.js
Blazor
ソースコード◎&gt;〇&gt;△&gt;× の順で良い。機能的には全体的にVue.jsが勝っているなぁという印象でした。それぞれ初期化した時に作られるディレクトリ構成について。今回のMHWIルーレットでは一部ディレクトリ構成を下記のように追加しています。Babelの設定ファイル。プロジェクトの設定ファイル。TypeScriptの設定ファイル。ドメイン直下以外のパスに配置するとき以外は必要なファイルです。
記入したパス向けにビルドを行います。エントリーポイント。
App.vueとVue Routerを起動している様子。
テンプレート作成時にルーターを設定していれば改めて触る必要はないです。多分TypeScriptの型を定義しているファイル。ルーターで切り替えるページ数が増えるたびに追記する必要があります。
ページに割り当てたいコンポーネントをパスとともに記述します。ドメイン直下以外のパスに配置するとき以外は/wwwroot/index.htmlのbase要素のパスを変更する必要があります。
それを自動化するために作ったpatchファイルです。プロジェクトの設定ファイルです。エントリーポイント。
App.razorを起動しているみたいです。
サービスを追加する場合はここに追記します。
今回は状態管理用のクラスを追加するため追記しています。参考1 参考2razorファイルで常に参照できる名前空間を追記します。アプリを反映するための基本htmlファイルです。
アプリ起動に失敗した場合の処理はデフォルトで大体ここに書かれています。
head要素はここにしか書けないので結構重要そう。
Blazor的にはC#から呼び出せるjsファイルを配置できる唯一のファイルです。
Blazorはロードが凄く長いのでスプラッシュ画面を用意したりしました。基準となるコンポーネントファイルとルーターについて。最初に呼び出されるコンポーネントファイルはApp.vueとなります。
ルーターを使用する場合はルーター用のリンク(router-link)とページコンポーネントが表示される場所(router-view)を記載します。
ルーターのパス構成は/src/router/index.tsから行う必要があります。最初に呼び出されるコンポーネントファイルはApp.razorとなります。
デフォルトではルーターの設定だけが書かれており、レイアウトに関する情報は全てMainLayout.razorに書かれています。
ルーターを使用する場合はルーター用のリンク(NavLink)とページコンポーネントが表示される場所(@Body)を記載します。記事を分離しました。
つづきはこちらへ。


