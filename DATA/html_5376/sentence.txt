More than 1 year has passed since last update.メソッド内のローカル変数を宣言する際に型宣言の代わりに使用することができます。
コンパイラが自動で型を判断してくれます。長い型名の代わりに var を使うとコードをスッキリします。あくまで『暗黙の型指定』であって型がないわけではありません。
以下のコードはコンパイルが通らないので安心して使用できます。型を明示したコードと var を使ったコードは機能的には全く同じです。以下のように型が明示的な場合には var を使用します。右辺から型が明らかでない場合、var は推奨されません。
以下の例では result はユーザ定義の Result オブジェクトかもしれませんし、ただの文字列かもしれませんし型がよくわかりません。また複数の数値型を混在する場合にも var は避けられる傾向があるようです。nums の型は int[] になりますが、これに少数が混じれば double[] になります。
これにより不具合が発生するかもしれませんが、型を明示していれば防ぐことができます。変数名に含まれた型が正しいという保証はありません。
型が変わったのに放置されたままになった場合、読み手を混乱させます。冒頭でも書きましたが、 var はあくまで暗黙の型指定であって型付けは明示的に宣言した場合と全く同じです。
dynamic は動的型付け変数を定義するものなのでそもそも用途が異なります。今までの説明と矛盾するかもしれませんが、以下のような場合、でも var はよく使われます。
通常、読み手は GetProductByID の戻り値は Prodcut 型と推測できます。Visual Studioならマウスを合わせるだけで型がポップアップされますし、 varにカーソルを合わせて定義にジャンプすればで型の詳細がわかります。
ただ、GitHub 等では型が明示されないので読みにくいかもしれません。
また、命名規則にいい加減な開発者が、 単数を返す関数名なのにコレクション型List&lt;Product&gt; など読み手が予想しない型を返していた場合でも気づきにくくなります。上記の通り、 var は『型が明示的』な場合に使われることが多いですが、型が明示的の基準が開発者によって異なるかもしれません。例えばLINQです。慣れた開発者なら一目で query の型は IEnumerable&lt;IGrouping&lt;int, MyClass&gt;&gt; と理解できます。
LINQ に詳しくない開発者はコードの戻り値を理解するのは難しいかもしれません。
この他にも File.ReadLines() が IEnumrable&lt;string&gt; を返すなど慣れた人には当たり前と思うことも他の開発者にはわからないかもしれません。命名規則がしっかりしていて使用するライブラリがチームに浸透しているならこのような var の使用はアリだと思います。以上、C# の var についてまとめました。
Javaでも var が導入されるらしく、C#でも改めて使いどころ、利用指針を考えました。
（※ パッと見似ているようですがJavaの var が C# と同じかはわかりません。）


