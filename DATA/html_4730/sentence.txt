More than 3 years have passed since last update..NET Frameworkを使用したプログラムの場合、初回起動が遅いことがあるため、
調査手法の１つとしてNGENを使用してGACに登録したことがありました。
（JITコンパイルも調査対象として考えていた）その際に、GACから読み込めたのかを検証するために調査しました。
（結果的に速度はあまり変わらず、今回のケースはJITコンパイルがボトルネックではないという結論をくだしました）あとは、アセンブリ参照時に指定されたバージョンと異なっていて、
dllはあるけど読み込めないというエラーが発生したことがありました。
その際も似たような調査をしました。
（リフレクションを使用したときにエラーがでており、詳細はinner exceptionを見ないと分からない状況でした）ランタイムがアセンブリを検索する方法
Fuslogvw.exe (アセンブリ バインディング ログ ビューアー)参考サイトをみていただくのが一番良いかと思いますが、
簡単に説明すると以下の順番になります。　軽く補足します。（自分の理解度も低いため誤っていたらすみません）文字通りです。
既に読み込んでいる場合はそれを参照します。.NET FrameworkはJITコンパイルという方式を採用しているため、
各アセンブリは実行時に中間コードからコンパイルされます。実行時コンパイラJITコンパイルの短所は中間コードからのコンパイル時間がオーバーヘッドとなることです。この短所を補うために、.NET Framework本体（ランタイム）等のように修正頻度が低いアセンブリについては
事前コンパイル（AOT）されています。この事前コンパイルされたアセンブリが格納されている場所？（アセンブリ群？）を
グローバルアセンブリキャッシュ（GAC）といいます。
（GAC=事前コンパイルではないかもしれませんが、自分はこう捉えています）以下に格納されています。
%windir%\Microsoft.NET\Assemblyアセンブリと同名のconfig（hoge.exe.config）を作成することで
様々な設定ができます。その１つにcodeBase要素があります。codeBase要素を記載することでdllの参照先を指定できます。プローブは上記の参考サイトで以下のように説明されています。プローブとは、アセンブリの名前およびカルチャに基づいてアセンブリを特定するための一連のヒューリスティックです。ヒューリスティックとは、必ず正しい答えを導けるわけではないが、ある程度のレベルで正解に近い解を得ることができる方法とのことです。コードベースも記載せず、.NET Frameworkのランタイム以外のdllを参照する場合、
基本はGACにいないため、以下の順に探します。　ちなみにですが、プローブによる検索は遅いと言われることがあるようです。私の場合は一番先頭の「アプリケーションが実行されるルート位置」で大体が片付くので
体感することは今のところありません。※VisualStudioのインストールが必要です。VisualStudioをインストールすると、
Fuslogvw.exe (アセンブリ バインディング ログ ビューアー)が付属されています。このツールを使うことで、上記の流れを確認することができます。開発者コマンドを管理者権限で起動します。
「Fuslogvw」と入力し、実行します。
ツールが起動するので設定ボタンをクリックします。
初期は「ログを無効にする」なので、「すべてのバインドをディスクに記録する」を選びます。
なお、管理者権限で実行していない場合は設定変更ができません。これで準備完了です。例えば以下のようなdllを事前に作成します。　
このdllをConsoleApp.exeで参照して呼び出します。　参照先myApp.dllを削除してConsoleApp.exeを起動すると以下のようにログが表示されます。
ConsoleApp.exeは「C:\temp\ConsoleApp\bin\Release\app.publish」配下にあります。

　
2行目の説明欄がmyAppから始まるログをダブルクリックすると
アセンブリがどのようなルートで検索されたのかが分かるようになっています。
GACを参照したという形跡が見えませんが、
.NET Frameworkのランタイムを読み込んだ場合は以下のようなログがでます。ログ: GAC でアセンブリが見つかりました。確認後はログを無効にして終了です。正直、理解できていないことのほうが多いです。
codeBase指定の場合は厳密な名前付きアセンブリである必要があったかどうかも記憶があいまいだったりします。ただ、JITコンパイル、GACへの登録方法、exe.configの設定種類等、
これきっかけで横道にそれながら調べごとをすることも増えたのでいい経験にはなりました。


