More than 3 years have passed since last update.ミニゲームを作ってUnityを学ぶ！[3Dマインスイーパー編]フィールドの生成やブロックを操作する機能が完成したことでようやくマインスイーパーとしての形が見えてきました。
今回は実際にゲームをプレイできるよう、ゲーム起動直後から終了までの一連の流れを制御していきます。まず最初にゲームの進行に必要なUIを準備していきます。プレイ開始のタイミングを図るためのボタンを作成します。SceneMain.csに新しいメソッドOnStart()を追加して、ボタンを押した際に呼び出されるよう登録します。ゲームクリアまたはゲームオーバーになった際にその旨を表示するテキストを作成します。↓中央部分のテキストは非表示のため、ゲーム起動直後には表示されていません出来上がったUIを制御するためのマネージャーを実装します。1: 「ButtonStart/Text」をインスペクタから設定
2: 「TextResult」をインスペクタから設定これでUIの準備できましたので、続けてゲームの終了条件になる部分を実装していきます。BlockManagerのOnLeftClick()でコメントアウトしていたゲームクリアとゲームオーバーの判定を有効にして、それに対応するコードを追記します。いずれかの通常ブロックを開いた際に実行されるJudgeGameClear()では開かれていない状態の通常ブロックが存在するかの判定を行い、結果が0だった場合にゲームクリアのフラグを立てています。また爆弾ブロックを開いてしまった場合に実行されるGameOver()では、開いてしまったブロックに赤い爆弾マークを表示し、それ以外の爆弾ブロックには通常の黒い爆弾マークを表示した後、ゲームオーバーのフラグを立てています。終了条件の判定が実装できましたので、次はゲームを起動したときの処理からゲーム終了までの流れを制御していきます。1: 空オブジェクト「UiManager」をインスペクタから設定まず最初に、ゲームを起動してから1回目のUpdate()が呼ばれたタイミングでLoadStage()が実行され、難易度イージーのフィールドが生成されます。その後は先ほどボタンに登録したOnStart()が実行されるまで何もしない待機状態に入り、プレイヤーがスタートボタンを押したタイミングでゲームを開始します。以後はゲームクリアまたはゲームオーバーのフラグが立つまでプレイヤーの操作を受け付けるループ処理を行い、フラグが立ったタイミングで結果を表示するとともにループを抜け出します。また、ゲームの進行状況にあわせてスタートボタンの表記をそれぞれ「LOADING, START, RESET」に変更しています。この段階でプロジェクトを実行するとマインスイーパーを楽しむことができますが、いちどゲーム終了のフラグが立ってしまうと画面が結果表示で止まり、戻すにはプロジェクトを再実行する以外に方法がありません。
この状態を解消するために、SceneMainを修正してゲームをやり直す機能を実装していきます。これでスタートボタンの表記が「RESET」になっている状態でボタンを押すとステージが新しく生成され、何度でもゲームを楽しめるようになりました。次のページに進む
イントロダクションに戻る



