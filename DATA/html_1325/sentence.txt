More than 1 year has passed since last update.本記事は Unity 2019.3.3f1 及び Microsoft Visual Studio Community 2019 version 16.5.4 を使用しております。タイトルの通り、xsd ファイルを用いて xmlファイルの検証をします。
第1項 では、外部 xml,xsd ファイルから読み込み、検証を行い、
第2項 では、Resource.Load を用いて検証を行います。まず、外部 xsd,xml ファイルを読み込む場合には以下のようになります。これは、Unity のプロジェクトの外に XML,XSD ファイルが共にある場合に使えます。
その代わりに、プロジェクトをビルドした後に、自分でフォルダをビルドフォルダに加えなければいけません。
path は自分のファイルへのパスに適時置き換えて下さい。xmlReaderSetting の ValidationType に Schema をセットすることで、Load 時に検証も行っています。 しかし、Unity で Resource フォルダ下に XML,XSD ファイルを置きたい場合があります。今回はその例を紹介します。Resouce.Load を使う場合、そのファイル形式は Unity で対応していなければいけません。Unity が対応していないファイルを使う場合、ScriptedImporter クラスを使います。ScriptedImporter の詳しい説明はテラシュールブログさんを
参照して下さい。
テラシュールブログさん:
http://tsubakit1.hateblo.jp/entry/2017/12/14/012746ScriptedImporter を使って xsd を TextAsset として扱うクラスを作ります。これで xsd ファイルを Resource.Load で読み込むことが出来るようになりました。xsd ファイルを TextAsset として使う場合、StringReader クラスを使い、XmlReader インスタンスを生成します。AddSchemaFromTextAsset メソッドが、渡された TextAsset の text プロパティを使った StringReader を経由して XmlReader インスタンスを作成し、 XmlSchemaSet に変換します。xml も同様に TextAsset から StringReader を用いて XmlReader インスタンスを作成して下さい。しかし、ここでエラーが発生します。StringReader を使って XmlReader を作成すると、import した xsd ファイルを SchemaSet に Add する事が出来ません。そこで、少々周りくどいですが、一つづつ SchemaSet を Add していく手段を取ります。ついでにパスを一つづつ設定するのが嫌なのでパスジェネレーターも作りました。何か指摘ありましたら宜しくお願いします。参考にしたサイト。
xmlSchemaSet
https://docs.microsoft.com/ja-jp/dotnet/api/system.xml.schema.xmlschemaset?view=netcore-3.1XmlReader
https://docs.microsoft.com/ja-jp/dotnet/api/system.xml.xmlreader?view=netcore-3.1StringReader
https://docs.microsoft.com/ja-jp/dotnet/api/system.io.stringreader?view=netcore-3.1XDocument
https://docs.microsoft.com/ja-jp/dotnet/api/system.xml.linq.xdocument?view=netcore-3.1XmlSchema,Xml に関して参考にした書籍(「基礎 XML」著:山田祥寛)


