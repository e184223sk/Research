
public enum eSchema
{
    Event,
    Status
}

public class XmlGetter
{

    /// 中略
    /// SchemaPath は自分のスキーマフォルダへのパスを入れて下さい。

    public Dictionary&lt;string,string&gt; GeneratePathPair()
    {
        string lEventStr = eSchema.Event.ToString();
        string lStatusStr = eSchema.Status.ToString();

        PathGenerator lTnsGenerator = new PathGenerator("hogehoge");
        PathGenerator lPathGenerator = new PathGenerator(SchemaPath);
        Dictionary&lt;string, string&gt; lTnsPathPairInXsd = new Dictionary&lt;string, string&gt;
        {
            [lTnsGenerator.GeneratePath(lEvent)] = lPathGenerator.GeneratePath(lEvent),
            [lTnsGenerator.GeneratePath(lStatus)] =
lPathGenerator.GeneratePath(lStatus)
        };
        return lTnsPathPairInXsd;
    }

    public static XmlSchemaSet GetSchemaFromXSD(Dictionary&lt;string,string&gt; pXsd)
    {
        XmlSchemaSet lSchemas = new XmlSchemaSet();
        StringReader lStringReader = null;
        XmlReader lSchemaReader = null;

        foreach (KeyValuePair&lt;string, string&gt; item in pXsd)
        {
            try
            {
                TextAsset xsdAsset = Resources.Load&lt;TextAsset&gt;(item.Value);
                lStringReader = new StringReader(xsdAsset.text);
                lSchemaReader = XmlReader.Create(lStringReader);
                lSchemas.Add(item.Key, lSchemaReader);

            }
            catch (XmlSchemaValidationException e)
            {
                Debug.LogError(e.Message);
                Debug.LogError("error line : " + e.LineNumber);
                Debug.LogError("error position : " + e.LinePosition);
            }
            finally
            {
                if (lStringReader != null)
                {
                    lStringReader.Close();
                }
                if (lSchemaReader.ReadState != ReadState.Closed)
                {
                    lSchemaReader.Close();

                }
            }
        }
        return lSchemas;
    }

}

