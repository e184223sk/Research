using System.Collections;
using System.Collections.Generic;
using UnityEngine;

using System;

/// &lt;summary&gt;
/// 座標の変換用クラス。なるべくシンプルに必要な変換だけ。
/// 測地系はWGS84を使用。
/// 計算方法は「世界測地系と座標変換　飛田幹夫　日本測量協会」を参考にした。
/// &lt;/summary&gt;
public class CoordConv
{
    private const double a = 6378137.0;
    private const double f = 1.0 / 298.257223563;
    private const double e2 = f * (2.0 - f);

    /// &lt;summary&gt;
    /// 緯度経度（WGS84）から直交座標（ECEF）に変換するメソッド。
    /// &lt;/summary&gt;
    /// &lt;param name="b"&gt;緯度&lt;/param&gt;
    /// &lt;param name="l"&gt;経度&lt;/param&gt;
    /// &lt;param name="h"&gt;楕円体高&lt;/param&gt;
    /// &lt;returns&gt;直交座標のXYZ。+Zが北極、+Xが子午線、+Yが東経方向&lt;/returns&gt;
    public static (double x, double y, double z) BLH2XYZ(double b, double l, double h){
        b = Math.PI * b / 180.0;
        l = Math.PI * l / 180.0;

        double N = a / Math.Sqrt(1.0 - e2 * Math.Pow(Math.Sin(b),2.0));

        return (
            (N + h) * Math.Cos(b) * Math.Cos(l),
            (N + h) * Math.Cos(b) * Math.Sin(l),
            (N * (1.0 - e2) + h) * Math.Sin(b) 
        );
    }

    /// &lt;summary&gt;
    /// 直交座標（ECEF）から緯度経度（WGS84）に変換するメソッド。
    /// &lt;/summary&gt;
    /// &lt;param name="x"&gt;X&lt;/param&gt;
    /// &lt;param name="y"&gt;Y&lt;/param&gt;
    /// &lt;param name="z"&gt;Z&lt;/param&gt;
    /// &lt;returns&gt;緯度経度。b緯度、l経度、h楕円体高&lt;/returns&gt;
    public static (double b, double l, double h) XYZ2BLH(double x, double y, double z){
        double p = Math.Sqrt(x*x + y*y);
        double r = Math.Sqrt(p*p + z*z);
        double mu = Math.Atan(z / p * ((1.0 - f) + e2 * a/r));

        double B = Math.Atan( (z * (1.0-f) + e2*a*Math.Pow(Math.Sin(mu),3)) / ((1.0-f)*(p-e2*a*Math.Pow(Math.Cos(mu),3))) );
        return (
            180.0 * B / Math.PI,
            180.0 * Math.Atan2(y,x) / Math.PI,
            p * Math.Cos(B) + z*Math.Sin(B) - a*Math.Sqrt(1.0 - e2*Math.Pow(Math.Sin(B),2))
        );
    }
}

