More than 5 years have passed since last update.ASP.NET MVCでサーバーとブラウザ間での双方向通信を実現する SignalR を試してみました。こちらのページにSignalRについて書かれているのでご一読ください。
http://www.atmarkit.co.jp/ait/articles/1303/19/news099_2.htmlサーバーやブラウザ側がWebSocketに対応していればWebSocketを使うのですが、そうでなければロングポーリング（いわゆるComet？）等、他の方法での双方向通信に自動的に切り替えてくれるライブラリだそうです。VisualStudio上のNuGetでインストールします。以下の2つをインストールします。"SignalR"で検索すると色々出てきますが、上記の "Microsoft.AspNet.SignalR" をインストールすると、その他必要なものが入ります。ですが、"Microsoft.AspNet.SignalR.Client" が入りませんでしたので、別途インストールしました。ここではSignalRを利用したプログレスバー表示を実装してみます。サーバー側で時間のかかる処理をするときに、その進捗率をブラウザ側に表示することがSignalRで実装できます。まずView側のコードを書きます。編集するファイルは_Layout.cshtmlと/View/Home/Index.cshtmlの2つです。SignalR のJavaScriptファイルをインクルードします。VisualStudioでASP.NET MVCのソリューションを作り、自動生成された_Layout.cshtmlに以下のようにコードを追加します。「&lt;!-- 以下の2行を追加 --&gt;」というコメント行配下の2行を追加したのみで、それ以外は変更していません。追加する位置は、jQueryのインクルードの後（この場合は "@Scripts.Render("~/bundles/jquery")" の後）にしないと正常に動かないので注意してください。
あと、「~/signalR/hubs」というフォルダは存在しないのですが、上記のように追加は必要なようです。どうもSignalRが自動生成するフォルダのようです。次に、/Views/Home/Index.cshtmlにプログレスバーを表示させるためのコードを書きます。プログレスバーはbootstrapで描画します。ちょっと長いですが、以下にコードを示します。VisualStudioにより自動生成されたサンプルHTMLはすべて削除します（上記の例ではコメントアウトにしています）。「&lt;!-- 以下のコードを追加 --&gt;」というコメントの下すべてが、今回追加したコードです。まず、Startup.csファイルを編集します。次に、プロジェクトに任意の名前のフォルダを作成し、そこに1つファイルを作ります。作ったフォルダ内に、SignalRのハブクラスのを継承した*.csファイルを作成します。下図に示すように「新しい項目の追加」で「SignalRのハブクラス」が選べるようになっているので、それで作ると良いと思います。SignalRハブクラスのプログラムですが、今回はプログレスバーのサンプルプログラムということで、以下のようなプログラムを書きました。以上でサンプルプログラムはできました。これでVisualStudioからデバッグ実行でプログラムを開始すると、以下のような画面が表示されると思います。画面中の "SignalRテスト" ボタンをクリックすると、サーバー側のプログラムが動き出し、その結果がプログレスバーに反映されます。ブラウザとサーバー間の、お互いのメソッドの呼ばれ方を以下の図に示しました。図中にも書きましたが、ブラウザからサーバーへの呼び出しメソッド、サーバーからブラウザへの呼び出しメソッドともに、引数の数は自由に増減できます。


