More than 3 years have passed since last update.この文章はコーディングガイドライン作成のために調査・実験したノートです。
ごく短い時間で応答を返さなければならないソフトウェアを作る仕事のため、
と思っていただければありがたいです。
あと、最低でも24時間連続稼働できる必要があります。場合によっては、数年稼働状態もあり得ます。
更新するかもしれないし、しないかもしれません。コードはチームの共有物です。
あなたが書いたコードの責任をあなただけに押し付けることはありません。
チームメイトの書いたコードはあなたにも責任があります。classと上手く使い分けてください。十数バイト程度なら効率が良くなる場合もありますし、
メモリ効率という点でも有用です。nullを許容しない点も重要です。拡張メソッド使用に関する一般的ガイドライン
とりあえずこれを読んで、それでも必要と判断したなら使ってもいいですよ、という感じです。
Enumを拡張するぐらいは許してよいと思いますが、それもやりすぎ注意という感じでしょうか。
だったら素直にstructでも作ればいいと思いますよ。
チーム外のクラスライブラリを拡張することはやめましょう。通信データ定義が良い例ですが、自動生成したコードの拡張に有用です。
通信データ定義はC#のpartialを付加できるようにしています。少なくとも中間コードレベルでは、全く同じ式でも別の定義が生成されます。
ただの静的関数の場合とクラスメソッドが生成される場合があります。ローカル変数をキャプチャするために、コンパイラがクラスを生成します。
参照型のクラスを利用して、ローカル変数を保持しておくということです。
Javaの無名クラスをイメージしてください。
コンパイラにより生成されたクラスを経由してローカル変数の参照が保持されます。クラスメソッドの場合、そのクラスへの参照が保持されることに注意しましょう。
delegateがメモリリークを引き起こすわけではありません。
プログラマが正しく使用していないから、不具合を引き起こすのです。LINQが絶対に実現できないことがあることを理解しましょう。
Database Management Systemがなぜ高速に検索できるのか？を理解しましょう。


