

using System.Collections.Specialized;

    public struct _Sel {
　　　public int  Mode1;     // モード選択
　　　public int  Dmy1;      // 予約(0)
　　　public int  SelectCh;  // チャンネル選択
　　　public int  Dmy2;      // 予約(0)
　　　public int  Function1; // 機能ON/OFF設定
　　　public int  Dmy3;      // 予約(0)
　　}


//()内の数値はその区間が使用するビット数
//二つ目以降はビット数とそのセクションが始まる直前のセクションを書く

  public static BitVector32.Section Mode1     = BitVector32.CreateSection(5);
  public static BitVector32.Section Dmy1      = BitVector32.CreateSection(1, Mode1); 
  public static BitVector32.Section SelectCh  = BitVector32.CreateSection(3, Dmy1);  
  public static BitVector32.Section Dmy2      = BitVector32.CreateSection(1, SelectCh);
  public static BitVector32.Section Function1 = BitVector32.CreateSection(1,Dmy3);
  public static BitVector32.Section Dmy3      = BitVector32.CreateSection(7,Fuction1);

// ビットフィールドに構造体をセットする場合

public void SetConfig(ref _Sel sel){
  BitVector32 bv = new BitVector32();

  bv[Mode1]     = sel.Mode1;
  bv[SelectCh]  = sel.SelectCh;
  bv[Function1] = sel.Function1;

  WriteDevice(bv.Data);
}

// ビットフィールドから構造体へセットする場合

public void GetConfig(ref _Sel sel)
{
  int data = 0;
  ReadDevice(ref data);

//インスタンスを作るときに数値を入れるとそのビットフィールドが持つ数値を設定できる．
//bv.Dataのアクセサはgetだけなのでインスタンス生成時に引数として入れる必要がある

  BitVector32 bv = new BitVector32(data);

　sel.Mode1     = bv[Mode1];
  sel.SelectCh  = bv[SelectCh];
  sel.Function1 = bv[Function1];
}

