More than 1 year has passed since last update.UWPアプリでログを出力できるようにしようとNLogを使おうとしたのですが、出力できませんでした。
いろいろ調べてみたところ、以下が候補として上がりました。MetroLogは更新履歴が数年前で止まっていて、使えなさそうだと判断し、Serilogを使うことにしました。
また、日本語での情報がほとんどなかったので、記事として残そうと思います。
（UWPアプリ開発されている人が少ないんですね。。）公式サイトによると、.NET用の他の多くのライブラリと同様に、Serilogはファイル、コンソール、その他の場所への診断ロギングを提供します。セットアップが簡単で、APIがクリーンで、最近の.NETプラットフォーム間での移植性があります。他のロギングライブラリとは異なり、Serilogは強力な構造化イベントデータを念頭に置いて構築されています。とのことです。
プラットフォームとしては、NET 4.5+, Windows (8/WinRT/Universal+) and Windows Phone 8+をサポートしています。必要なのは、になります。[ツール] &gt; [NuGet パッケージ マネージャー] &gt; [パッケージ マネージャー コンソール]で下記のコマンドを実行するか、ソリューション エクスプローラーで [参照] を右クリックし、 [NuGet パッケージの管理] を選択し、「Serilog」で検索して最新版をインストールしてください。以下のようにLoggerConfigurationクラスを使って設定を行います。MinimumLevelはログ出力の最小レベル、WriteTo.Fileは出力先ファイルを示しています。
ApplicationData.Current.LocalFolder.Pathはローカルストアを示していて、その中にlogsフォルダを作成して、さらにその下にlogが保存される仕組みです。
また、rollingIntervalはファイルの分割単位を示していて、RollingInterval.Dayは日毎にログファイルを分割する設定です。
ちなみに、ファイル容量はデフォルトで1GB、ファイル数は直近の３１ファイルまで（1ヶ月分）保存されます。
（ファイル容量とファイル数の設定を変更することも可能ですが、今回は割愛します）上記のように設定すると、c:\users\&lt;user name&gt;\AppData\Local\Packages\&lt;app package identifier&gt;\LocalState\logsに、以下のようにログファイルが保存されていきます。他にも様々な設定ができるようなので、必要あればまた調べてみたいと思います。ログレベルごとに関数が用意されており、単純に出力したいログレベルの関数に文字列を渡すだけです。
ここは他のロガーライブラリと同様かと思います。一例として、以下のようなLogUtilクラス（ラッパークラス）を作っておくとかなり楽になります。
参考にしてみてください。


