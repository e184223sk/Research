,ok");
                                var mat = new Mat(decret.h, decret.w, MatType.CV_8UC3);
                                CopyMemory(mat.Data, decret.buff, (uint)decret.size);
                                var matCv = new Mat();
                                Cv2.CvtColor(mat, matCv, ColorConversionCodes.RGB2BGR);
                                video.Write(matCv);
                                FreeData(decret.buff);
                            }
                            else
                            {
                                Debug.Write(Marshal.PtrToStringAnsi(GetH264DecoderLastError()));
                            }
                            Marshal.FreeHGlobal(inPtr);


                            packetData = new byte[0];
                            ++cnt;

                        }
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine(ex.Message);
                    }

                }
                // 後片付けの方法はあとで考える。（呼ばれない）
                _TermH264Decoder();
                video.Release();
            });

        }

        // コマンド送信
        private void sendCmd(string cmd)
        {
            byte[] data = Encoding.ASCII.GetBytes(cmd);
            this.udpForCmd.Send(data, data.Length, "192.168.10.1", 8889);

        }

        // 開始ボタン
        private void btnStart_Click(object sender, EventArgs e)
        {
            SetupTello();

            this.txtRet.Text = "";
            this.btnCmd.Enabled = false;

            sendCmd("command");
        }

        // コマンド送信ボタン押下
        private void btnCmd_Click(object sender, EventArgs e)
        {
            this.txtRet.Text = "";
            this.btnCmd.Enabled = false;
            sendCmd(this.txtCmd.Text);
        }

    }
}


