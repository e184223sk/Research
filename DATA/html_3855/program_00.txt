using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Net;//for UDP
using System.Net.Sockets; //for UDP
using System.Threading;//for Interlocked
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;

namespace TelloSample
{
    public partial class Form1 : Form
    {
        private UdpClient udpForCmd;     //コマンド結果受信用クライアント
        private UdpClient udpForStsRecv; //ステータスの結果受信用クライアント

        public Form1()
        {
            InitializeComponent();
        }

        // コマンドの結果更新用
        private delegate void DelegateUpdateCmdResult(String ret);

        // ステータスの更新用
        private delegate void DelegateUpdateSts(String sts);

        // コマンド結果を更新。ワーカスレッドからの場合はメインスレッドで実行
        private void UpdateCmdResult(String ret)
        {
            if (this.InvokeRequired)
            {
                Object[] param = new Object[1] { ret };

                this.Invoke(new DelegateUpdateCmdResult(this.UpdateCmdResult), param);
                return;
            }
            this.txtRet.Text = ret;
            this.btnCmd.Enabled = true;
        }

        // ステータスを更新。ワーカスレッドからの場合はメインスレッドで実行
        private void UpdateSts(String sts)
        {
            if (this.InvokeRequired)
            {
                Object[] param = new Object[1] { sts };

                this.Invoke(new DelegateUpdateSts(this.UpdateSts), param);
                return;
            }
            this.txtSts.Text = sts;
        }



        // Telloとの通信を設定する
        private void SetupTello()
        {
            this.udpForCmd = new UdpClient(0);
            this.udpForStsRecv = new UdpClient(8890);


            // コマンド結果の受信処理
            Task.Run(() =&gt; {
                IPEndPoint remoteEP = null;//任意の送信元からのデータを受信
                while (true)
                {
                    try
                    {
                        String rcvMsg = "";
                        byte[] rcvBytes = udpForCmd.Receive(ref remoteEP);
                        Interlocked.Exchange(ref rcvMsg, Encoding.ASCII.GetString(rcvBytes));
                        this.UpdateCmdResult(rcvMsg);
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine(ex.Message);
                    }
                }

            });

            // ステータスの受信処理
            Task.Run(() =&gt; {
                IPEndPoint remoteEP = null;//任意の送信元からのデータを受信
                while (true)
                {
                    try
                    {
                        String rcvMsg = "";
                        byte[] rcvBytes = udpForStsRecv.Receive(ref remoteEP);
                        Interlocked.Exchange(ref rcvMsg, Encoding.ASCII.GetString(rcvBytes));
                        rcvMsg = rcvMsg.Replace(";", "\r\n");
                        this.UpdateSts(rcvMsg);
                    }
                    catch (Exception ex)
                    { 
                        Debug.WriteLine(ex.Message);
                    }

                }

            });

        // コマンド送信
        private void sendCmd(string cmd)
        {
            byte[] data = Encoding.ASCII.GetBytes(cmd);
            this.udpForCmd.Send(data, data.Length, "192.168.10.1", 8889);

        }

        // 開始ボタン
        private void btnStart_Click(object sender, EventArgs e)
        {
            SetupTello();

            this.txtRet.Text = "";
            this.btnCmd.Enabled = false;

            sendCmd("command");
        }

        // コマンド送信ボタン押下
        private void btnCmd_Click(object sender, EventArgs e)
        {
            this.txtRet.Text = "";
            this.btnCmd.Enabled = false;
            sendCmd(this.txtCmd.Text);
        }

    }
}


