More than 1 year has passed since last update.昨今、退職エントリーが流行っているので、昨年、勢いで会社を辞めてニートになった記念に何か書こうと思います。
おっさんは明るい未来に羽ばたくことはできませんでしたので、せめて、ドローンぐらいは明るい未来を羽ばたかせてみせよう、そう思ってこの記事を書いてみました。Telloは小型のドローンでカメラもついており、Android,iPadといった携帯端末で操作が可能です。
https://www.ryzerobotics.com/jp/telloこの度は無収入のくせに以下のセットを購入しました。
https://www.amazon.co.jp/gp/product/B07979Q4YS注意事項：
・充電用のUSBはついてこないので自前でそろえる必要があります。

機体にささないと充電できません。ただし別売りのバッテリーケースを購入すれば機体にささずに充電が可能のようですが、おっさんは無職なので購入してまでの検証はしてません。・ハードウェアの性能としてはカメラがついているので動画撮影が可能です。つまり、住宅地で飛ばすと覗きとまちがわれるので気をつけましょう。おっさんは無職なのでポリス沙汰になると無職で全国デビューになるので細心の注意しないといけません。・wifiでつなげて機体の操作をする必要があるため、操作側のリモコンはLANカードが2枚差しでないとインターネットにつなげながらの操作は行えません。おっさんはノートPCを10年ぶりくらいに有線のLANにつなげて作業しました。・羽に指が当たると、そこそこ痛いので、慣れない間は軍手をして操作したほうがいいです。たぶん、大型のドローンの羽だったら、ドローンのかわりに指が飛んでいたと思います。・可能なら外の広いところで運転した方が安全です。おっさんは引きこもりなので家でやりましたが、５回ほど壁にあたり墜落しました。TelloはSDKが提供されており、UDP経由で以下のことが行えます。
・機体の操作。
・機体の情報取得（傾きとか温度とかバッテリー情報）
・カメラからの撮影情報の取得UDPなので基本的に無線LANがつながればどんなプラットフォームでも動作させることができますが、検索してでてくるMacのPythonかC/C++でやった方が絶対にいいです。
ジャイアントロボのように音声で操作しようと思って、音声認識が簡単にできる.NETで始めたら、えらい苦労しました。また、SDKではなくて、バイナリデータを送信してSDKに書かれていない操作もできるようですが、ここでは割愛します。以下はTelloSDK1.3.0.0をそれっぽく翻訳したものです。Tello SDKはWi-Fi UDPポートを介して航空機に接続し、ユーザーはテキストコマンドでドローンを制御することができます。 Tello3.pyファイルをダウンロードするにはここをクリックしてください。Wi-Fiを使用してTelloとPC、Mac、またはモバイルデバイスとの間の通信を確立します。　Tello IP: 192.168.10.1 UDP PORT:8889 &lt;&lt;--&gt;&gt; PC/Mac/Mobile
　注意１：同じポートを介してTelloとメッセージを送受信するように、PC、Mac、またはモバイルデバイスでUDPクライアントを設定します。　注意２：他のコマンドを送信する前に、"command"コマンドをUDP ポート8889を介してTelloに送信してTelloのSDKモードを開始します。　Tello IP: 192.168.10.1 -&gt;&gt; PC/Mac/Mobile UDP Server: 0.0.0.0 UDP PORT:8890　注意３：PC、Mac、またはモバイルデバイスにUDPサーバーをセットアップし、UDP PORT 8890を介してIP 0.0.0.0からのメッセージを聞きます。まだ行っていない場合は、注意２を実行して状態データの受信を開始してください。**　Tello IP: 192.168.10.1 -&gt;&gt; PC/Mac/Mobile UDP Server:0.0.0.0 UDP PORT:11111
　注意４：PC、Mac、またはモバイルデバイスにUDPサーバーをセットアップし、UDP PORT 11111を介してIP 0.0.0.0からメッセージを受信します。
　注意５：もし実行していないなら注意２を実行してください。その後、UDP PORT 8889を介して「streamon」コマンドをTelloに送信してストリーミングを開始します。このSDKには3つの基本的なコマンドタイプが含まれています。コントロールコマンド(xxx)
・コマンドの実行が成功した場合、"ok"が戻ります
・成功しなかった場合、"error"または有益な結果コードが戻りますリードコマンド(xxx?)
・サブパラメータの現在値を戻します。設定コマンド（xxx a）は、新しいサブパラメータ値を設定しようとします
・コマンドの実行が成功した場合、"ok"が戻ります
・成功しなかった場合、"error"または有益な結果コードが戻ります訳者注
pitch roll yaw:参考：https://algorithm.joho.info/robotics/roll-pitch-yaw-matrix/
Tof:Time of Flightのことと思われる
SNR:信号対雑音比。SN比が高ければ伝送における雑音の影響が小さく、SN比が小さければ影響が大きい。データ型:String
Example:
“pitch:%d;roll:%d;yaw:%d;vgx:%d;vgy%d;vgz:%d;templ:%d;temph:%d;tof:%d;h:%d;bat:%d;baro: %.2f; time:%d;agx:%.2f;agy:%.2f;agz:%.2f;\r\n” 説明
o pitch: ピッチ角
o roll: ロール角
o yaw: ヨー角
o vgx: Speed x,
o vgy: Speed y,
o vgz: Speed z,
o templ: 最も低い温度, 摂氏℃
o temph: 最も高い温度、摂氏℃
o tof: TOF distance, cm
o h: Height, cm
o bat: 現在のバッテリーのパーセンテージ, %
o baro: バロメーター測定, cm
o time: モータの時間,
o agx: 加速度x,
o agy: 加速度y,
o agz: 加速度z, もしTelloが15秒間なにもコマンドを受信しなければ、自動で着陸をします電源ON状態のTelloに５秒間の長押しをするとインジケータライトが消えて黄色に点滅します。 インジケータランプが黄色のライトを点滅させると、Wi-Fi SSIDとパスワードは工場出荷時の設定にリセットされ、デフォルトではパスワードは設定されません。おとなしく、Mac＋Pythonで動かした方がいいです。やっている人がいっぱいいます。
それでもやるなら、以下を参考にしてみてください。・ステータス取得のための8890とビデオストリーム取得のためのポート11111を開けておきます。
　つながらない場合は、アプリケーション固有のファイアウォールの設定も確認してください。　
　Telloとのネットワークはパブリックのネットワークになっているはずなので、パブリックの設定もちゃんとみましょう（２敗）
　・WireShark等でネットワークの電文をみれるようにしておきます。
　https://www.wireshark.org/
　問題の切り分けにやくに立ちます。・ffmpegを用意する。
　Telloからのビデオ情報を表示するのに使用します。
　また、自前でデコードする場合もffmpegのAPIを使用しないと厳しいです。
　https://www.ffmpeg.org/画面
streamon コマンドを送信するとポート11111にビデオの情報が受信できます。
これを表示するにはffmpegのffplayを使用するといいでしょう。ウィンドウが起動して現在のカメラが表示されます。・コマンドを受け付けない
無線LANでつながっているかを確認する。
充電されているか確認する。USBさして青ランプが点灯されたらフル充電である。
WireSharkでパケットの送受信がされているか確認する。
送受信のポートが開いているか確認。規定値だとパブリックネットワークなので注意。・カメラが受信できない。
11111ポートが開いているか見直す。
WireSharkでパケットが届いているか確認する。・ステータスが受信できない。
8890ポートが開いているか見直す。・たまにコマンドの応答結果がとれない。
UDPなので仕様だと思われます。okが必ずくるという前提は多分まずいかもです。OpenCVSharpを使えば簡単にできます・・・（震え）・OpenCVSharp
OpenCvSharp3-AnyCPUとOpenCvSharp4.runtime.winをNuGetで取得していました。OpenCVのVideoCapture.FromFileはファイルといいつつ、UDPからのストリームもとれます。
まちがっても自分でUDPで11111ポートを監視してデコードしようとしてはいけません。
以下にその愚かな例をしめしますが、おとなしくOpenCVを使いましょう。簡単な流れとしては以下の通りになります。この挙動は下記を参考にしました。
https://github.com/dji-sdk/Tello-Python/blob/master/Tello_Video/tello.py
https://github.com/dji-sdk/Tello-Python/tree/master/Tello_Video/h264decoder.NETでつらいのは3と4です。
これをおこなうにはネイティブのDLLでffmpegのAPIを使い実行した結果をC#に渡す必要があります。・ffmpeg
https://ffmpeg.zeranoe.com/builds/
devにincludeファイルとlibファイル、sharedにdllがあるのでそれぞれダウンロードしました。
このライブラリはtelloから取得したh264形式をRGBに変換するために使用します。
ソースコードから自前でコンパイルもできますが、MSYS2をいれたりして結構、手間がかかるのでFormアプリでいいなら、おとなしく配布されているものを使った方がいいと思います。（一敗）先に紹介したPythonでh264のデコードをするためのコードを.NETでやるために改造しました。
https://github.com/mima3/Tello/tree/master/h264decoderおそらく、メモリ解放処理がうまくできていない気がするので参考程度にしてください。.NETでネイティブのDLLを使用する場合は、32bitか64bitかは意識してください。
今回は64bitで動かすためにAnyCPUをx64に変更するか、32bitを優先するフラグをオフにする必要があります。
もし、今まで動いていたアプリケーションが起動すらしない場合、DLLが32bitと64bitで混在している可能性を疑ってみてください。以下に移植したh264decoderを使用して動画を作成する実装例を記載します。とりあえず64bitで動くソースは以下に置いておきます。
https://github.com/mima3/Telloメモリ解放関係がだいぶ怪しいので、とりあえず動かす用としてくださいというか、そもそもOpenCVでやった方がはるかに楽です・・・orzここではTelloの最低限の機能を.NETで実装した例をしめしました。
基本的に文字のコマンドを送信するだけで、制御できますが、h264のデコード処理はネィティブのDLLを作ってOpenCVがとれるようにする必要があります。
そこを超えてしまえば、あとは.NETのライブラリを色々と利用してにTelloを活用する道筋が見えるかと思います。（たとえば、音声認識で飛行させるとか・・・）まぁ、.NETでTelloを使う道筋はみえても、おっさんの人生の道筋はみえないね。しかたないね。


