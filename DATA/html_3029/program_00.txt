using System;

namespace Fraction_cs
{
    class Fraction
    {
        public long numer { get; private set; }
        public long denom { get; private set; }

        public Fraction(long numer = 0)
        {
            this.numer = numer;
            this.denom = 1;
        }
        public Fraction(long numer, long denom)
        {
            this.numer = numer;
            this.denom = denom;
            Normal();
        }
        public Fraction(Fraction b)
        {
            this.numer = b.numer;
            this.denom = b.denom;
        }

        static void Swap&lt;T&gt;(ref T a, ref T b)
        {
            var tmp = a;
            a = b;
            b = tmp;
        }
        static long GCD(long a, long b)
        {
            a = Math.Abs(a);
            b = Math.Abs(b);

            if (a &lt; b) Swap(ref a, ref b);

            if (a == 1) return b;

            var tmp = a;
            while (b != 0)
            {
                tmp = b;
                b = a % b;
                a = tmp;
            }

            return tmp;
        }
        static long LCM(long a, long b)
        {
            a = Math.Abs(a);
            b = Math.Abs(b);
            if (a &gt; b) Swap(ref a, ref b);

            if (a == 1) return b;

            var tmp = a;
            while (tmp % b != 0)
            {
                tmp += a;
            }
            return tmp;
        }
        void Normal()
        {
            var gcd = GCD(numer, denom);

            numer /= gcd;
            denom /= gcd;

            if (denom &lt; 0)
            {
                numer *= -1;
                denom *= -1;
            }
        }

        public override string ToString()
        {
            if (denom == 1)
            {
                return numer.ToString();
            }
            else
            {
                return numer + "/" + denom;
            }
        }
        public override bool Equals(object b)
        {
            if (b is Fraction b2 &amp;&amp;
                this.numer == b2.numer &amp;&amp;
                this.denom == b2.denom)
            {
                return true;
            }

            return false;
        }
        public static long Compare(Fraction a, Fraction b)
        {
            var lcm = LCM(a.denom, b.denom);

            return (lcm / a.denom) * a.numer - (lcm / b.denom) * b.numer;
        }

        public static bool operator ==(Fraction a, Fraction b)
        {
            return a.Equals(b);
        }
        public static bool operator !=(Fraction a, Fraction b)
        {
            return !a.Equals(b);
        }
        public static bool operator &gt;=(Fraction a, Fraction b)
        {
            return Compare(a, b) &gt;= 0;
        }
        public static bool operator &gt;(Fraction a, Fraction b)
        {
            return Compare(a, b) &gt; 0;
        }
        public static bool operator &lt;=(Fraction a, Fraction b)
        {
            return Compare(a, b) &lt;= 0;
        }
        public static bool operator &lt;(Fraction a, Fraction b)
        {
            return Compare(a, b) &lt; 0;
        }

        public static Fraction operator +(Fraction a, Fraction b)
        {
            var lcm = LCM(a.denom, b.denom);
            var numer = a.numer * (lcm / a.denom) + b.numer * (lcm / b.denom);

            return new Fraction(numer, lcm);
        }
        public static Fraction operator -(Fraction a, Fraction b)
        {
            var lcm = LCM(a.denom, b.denom);
            var numer = a.numer * (lcm / a.denom) - b.numer * (lcm / b.denom);

            return new Fraction(numer, lcm);
        }
        public static Fraction operator *(Fraction a, Fraction b)
        {
            var gcd = GCD(a.numer, b.denom);
            var numer = a.numer / gcd;
            var denom = b.denom / gcd;

            gcd = GCD(b.numer, a.denom);
            numer *= b.numer / gcd;
            denom *= a.denom / gcd;

            return new Fraction(numer, denom);
        }
        public static Fraction operator /(Fraction a, Fraction b)
        {
            var gcd = GCD(a.numer, b.numer);
            var numer = a.numer / gcd;
            var denom = b.numer / gcd;

            gcd = GCD(b.denom, a.denom);
            numer *= b.denom / gcd;
            denom *= a.denom / gcd;

            return new Fraction(numer, denom);
        }

        public static Fraction operator +(Fraction a)
        {
            return new Fraction(a);
        }
        public static Fraction operator -(Fraction a)
        {
            var b = new Fraction(a);
            b.numer *= -1;
            return b;
        }

        public static Fraction operator ++(Fraction a)
        {
            a.numer++;
            a.Normal();
            return new Fraction(a);
        }
        public static Fraction operator --(Fraction a)
        {
            a.numer--;
            a.Normal();
            return new Fraction(a);
        }

        public static implicit operator Fraction(long a)
        {
            return new Fraction(a);
        }
        public static explicit operator double(Fraction a)
        {
            return (double)a.numer / (double)a.denom;
        }
    }
}

