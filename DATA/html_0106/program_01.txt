
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;

namespace DjKaosun.Extentions.ObservableCollection
{
    /// &lt;summary&gt;
    /// ObservableCollection&amp;lt;KeyValuePair&amp;lt;TKey, TValue&amp;gt;&amp;gt; をディクショナリ的に使うための拡張メソッド。
    /// &lt;/summary&gt;
    public static class ObservableCollectionExtentions
    {
        private const string ARGUMENT_NULL_EXCEPTION_MESSAGE = "Value cannot be null. (Parameter '{0}')";
        private const string KEY_NOT_FOUND_EXCEPTION_MESSAGE = "The given key '{0}' was not present in the dictionary.";
        private const string ARGUMENT_EXCEPTION_MESSAGE = "An item with the same key has already been added. Key: {0}";

        /// &lt;summary&gt;
        /// キーに対応する値を取得します。(インデクサーの代替)
        /// &lt;/summary&gt;
        /// &lt;param name="observableCollection"&gt;拡張メソッドの基となるオブジェクト。&lt;/param&gt;
        /// &lt;param name="key"&gt;キー。&lt;/param&gt;
        /// &lt;returns&gt;対応する値。&lt;/returns&gt;
        public static TValue GetValue&lt;TKey, TValue&gt;(this ObservableCollection&lt;KeyValuePair&lt;TKey, TValue&gt;&gt; observableCollection, TKey key)
        {
            if (key == null) throw new ArgumentNullException(String.Format(ARGUMENT_NULL_EXCEPTION_MESSAGE, nameof(key)));

            foreach (var keyValuePair in observableCollection)
            {
                if (keyValuePair.Key.Equals(key)) return keyValuePair.Value;
            }
            throw new KeyNotFoundException(String.Format(KEY_NOT_FOUND_EXCEPTION_MESSAGE, key.ToString()));
        }

        /// &lt;summary&gt;
        /// キーが既に存在する場合は更新、存在しない場合は追加します。(インデクサーの代替)
        /// &lt;/summary&gt;
        /// &lt;param name="observableCollection"&gt;拡張メソッドの基となるオブジェクト。&lt;/param&gt;
        /// &lt;param name="key"&gt;キー。&lt;/param&gt;
        /// &lt;param name="value"&gt;値。&lt;/param&gt;
        public static void AddOrUpdate&lt;TKey, TValue&gt;(this ObservableCollection&lt;KeyValuePair&lt;TKey, TValue&gt;&gt; observableCollection, TKey key, TValue value)
        {
            if (key == null) throw new ArgumentNullException(String.Format(ARGUMENT_NULL_EXCEPTION_MESSAGE, nameof(key)));

            foreach (var keyValuePair in observableCollection)
            {
                if (keyValuePair.Key.Equals(key))
                {
                    observableCollection.Remove(keyValuePair);
                    break;
                }
            }
            observableCollection.Add(new KeyValuePair&lt;TKey, TValue&gt;(key, value));
        }

        /// &lt;summary&gt;
        /// キーと値のペアを追加します。
        /// &lt;/summary&gt;
        /// &lt;param name="observableCollection"&gt;拡張メソッドの基となるオブジェクト。&lt;/param&gt;
        /// &lt;param name="key"&gt;キー。&lt;/param&gt;
        /// &lt;param name="value"&gt;値。&lt;/param&gt;
        public static void Add&lt;TKey, TValue&gt;(this ObservableCollection&lt;KeyValuePair&lt;TKey, TValue&gt;&gt; observableCollection, TKey key, TValue value)
        {
            if (key == null) throw new ArgumentNullException(String.Format(ARGUMENT_NULL_EXCEPTION_MESSAGE, nameof(key)));

            if (ContainsKey(observableCollection, key))
            {
                throw new ArgumentException(String.Format(ARGUMENT_EXCEPTION_MESSAGE, key));
            }
            observableCollection.Add(new KeyValuePair&lt;TKey, TValue&gt;(key, value));
        }

        /// &lt;summary&gt;
        /// キーに対応する値を更新します。
        /// &lt;/summary&gt;
        /// &lt;param name="observableCollection"&gt;拡張メソッドの基となるオブジェクト。&lt;/param&gt;
        /// &lt;param name="key"&gt;キー。&lt;/param&gt;
        /// &lt;param name="value"&gt;新しい値。&lt;/param&gt;
        public static void UpdateValue&lt;TKey, TValue&gt;(this ObservableCollection&lt;KeyValuePair&lt;TKey, TValue&gt;&gt; observableCollection, TKey key, TValue value)
        {
            if (key == null) throw new ArgumentNullException(String.Format(ARGUMENT_NULL_EXCEPTION_MESSAGE, nameof(key)));

            foreach (var keyValuePair in observableCollection)
            {
                if (keyValuePair.Key.Equals(key))
                {
                    observableCollection.Remove(keyValuePair);
                    observableCollection.Add(new KeyValuePair&lt;TKey, TValue&gt;(key, value));
                    return;
                }
            }
            throw new KeyNotFoundException(String.Format(KEY_NOT_FOUND_EXCEPTION_MESSAGE, key));
        }

        /// &lt;summary&gt;
        /// キーが含まれるか判断します。
        /// &lt;/summary&gt;
        /// &lt;param name="observableCollection"&gt;拡張メソッドの基となるオブジェクト。&lt;/param&gt;
        /// &lt;param name="key"&gt;キー。&lt;/param&gt;
        /// &lt;returns&gt;キーが含まれる場合 true。含まれない場合は false。&lt;/returns&gt;
        public static bool ContainsKey&lt;TKey,TValue&gt;(this ObservableCollection&lt;KeyValuePair&lt;TKey, TValue&gt;&gt; observableCollection, TKey key)
        {
            if (key == null) throw new ArgumentNullException(String.Format(ARGUMENT_NULL_EXCEPTION_MESSAGE, nameof(key)));

            foreach (var keyValuePair in observableCollection)
            {
                if (keyValuePair.Key.Equals(key)) return true;
            }
            return false;
        }

        /// &lt;summary&gt;
        /// 値が含まれるか判断します。
        /// &lt;/summary&gt;
        /// &lt;param name="observableCollection"&gt;拡張メソッドの基となるオブジェクト。&lt;/param&gt;
        /// &lt;param name="value"&gt;値。&lt;/param&gt;
        /// &lt;returns&gt;値が含まれる場合 true。含まれない場合は false。&lt;/returns&gt;
        public static bool ContainsValue&lt;TKey,TValue&gt;(this ObservableCollection&lt;KeyValuePair&lt;TKey, TValue&gt;&gt; observableCollection, TValue value)
        {
            foreach (var keyValuePair in observableCollection)
            {
                if (keyValuePair.Value == null)
                {
                    if (value == null) return true; 
                }
                else
                {
                    if (keyValuePair.Value.Equals(value)) return true;
                }
            }
            return false;
        }

        /// &lt;summary&gt;
        /// キーに対応するキー/値ペアを削除します。
        /// &lt;/summary&gt;
        /// &lt;param name="observableCollection"&gt;拡張メソッドの基となるオブジェクト。&lt;/param&gt;
        /// &lt;param name="key"&gt;キー。&lt;/param&gt;
        /// &lt;returns&gt;削除された場合 true。削除されなかった場合は false。&lt;/returns&gt;
        public static bool Remove&lt;TKey, TValue&gt;(this ObservableCollection&lt;KeyValuePair&lt;TKey, TValue&gt;&gt; observableCollection, TKey key)
        {
            if (key == null) throw new ArgumentNullException(String.Format(ARGUMENT_NULL_EXCEPTION_MESSAGE, nameof(key)));

            foreach (var keyValuePair in observableCollection)
            {
                if (keyValuePair.Key.Equals(key))
                {
                    observableCollection.Remove(keyValuePair);
                    return true;
                }
            }
            return false;
        }

        /// &lt;summary&gt;
        /// キーに対応するキー/値ペアを削除します。削除する対象が見つかったらその値を value パラメーターにコピーします。
        /// &lt;/summary&gt;
        /// &lt;param name="observableCollection"&gt;拡張メソッドの基となるオブジェクト。&lt;/param&gt;
        /// &lt;param name="key"&gt;キー。&lt;/param&gt;
        /// &lt;param name="value"&gt;削除された値。&lt;/param&gt;
        /// &lt;returns&gt;削除された場合 true。削除されなかった場合は false。&lt;/returns&gt;
        public static bool Remove&lt;TKey, TValue&gt;(this ObservableCollection&lt;KeyValuePair&lt;TKey, TValue&gt;&gt; observableCollection, TKey key, out TValue value)
        {
            if (key == null) throw new ArgumentNullException(String.Format(ARGUMENT_NULL_EXCEPTION_MESSAGE, nameof(key)));

            foreach (var keyValuePair in observableCollection)
            {
                if (keyValuePair.Key.Equals(key))
                {
                    value = keyValuePair.Value;
                    observableCollection.Remove(keyValuePair);
                    return true;
                }
            }

            value = default;
            return false;
        }
    }
}

