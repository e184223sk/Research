Unityで画面上に線を引くためには様々な手段がありますが、その中でもGLと言うOpenGLのイミディエイトモードと同様のコマンドを実行することができるグラフィックスライブラリがあるらしいです。今回はそれを使って数直線（数なし）←は？を作ってみたのでご紹介したいと思います。
※2D上でしか検証していないので3Dでの動作は保証できませんコードはGithubにて公開しています。https://github.com/HarumaroJP/GLMarkLineDrawerGithubに公開している二つのスクリプトをUnityに入れて、GLMarkLineDrawer.csをGameObjectにくっつけるだけです。設定欄はこんな感じです。最初はVector3型で指定するようにしようかなと思ったのですが、かなり面倒になるので、Transform型を使うことにしました。まず前提としてGLクラスでは、このような書き方で描画します。・GL.PushMatrix() , GL.PopMatrix()は、行列マトリックスが範囲外に漏れないようにするためのおまじないのようなものです。複雑な描画をする際には必要になります。今回は一応書いていますが、簡単な描画の場合は必要ないかも..?・GL.Begin() , GL.End()の間で、描画する頂点を指定することができます。また、引数でメッシュの形成方法を指定する方法ができます。「GL Primitives」で検索するといろいろな方法が出てくるので、調べてみてください。今回は、四角形を形成するように設定しています。・GL.Colorは色を設定するためのメソッドです。このメソッドで設定して実行された後に面が描画された場合、設定した色が反映されるようになります。・GL.Vertex3(x,y,z) or GL.Vertex(Vector3)で頂点を設定することができます。またブロック文で囲っている箇所がありますが、これは特に必要というわけではありません。可読性が上がるので、付けた方が良いというだけです。一旦コードを貼ります。こちらの方はあまり説明は必要ないと思いますが、一応補足をしておくと、MonobehaviourのOnRenderObject()はカメラがシーンをレンダリングした後に呼び出されるメソッドで、今回はこのメソッドを通して描画しています。また設定のパラメータは構造体で管理しています。あまり構造体で自前のコンストラクタは使いたくなかったのですが、入れたらすぐ使えるようにしたかったので、今回は自前のコンストラクタで初期化しています。次が本体のコードです。コードが長くなっているので、細かい説明は割愛します。Unity側で用意されているGLクラスには、ラインの幅を設定するための方法が用意されていません。
なので、自分でメッシュの頂点座標を計算して描画する必要があります。（OpenGLの方だとあるらしい）実装方法としては、ある直線があったとしてその直線を囲む四角形の頂点座標を算出し、描画すれば作ることができます。（要するに赤い点の座標を求めたい）ここからは少し、数学の話になります。
下のテキストを見てください。ここでは、上の図のような座標があったとして、まず頂点との差分（緑の線の部分）を求めます。
左のページでは、二つの頂点座標から垂直なベクトルを求めています。しかし、これだけだと二つの頂点の距離によって緑の線の長さも変わってしまいます。そこで長さを1に固定した単位ベクトルを求めることで、それに適当な幅をかけると狙い通りの長さにすることができます。
そして最後にその差分を、元の頂点座標に足し合わせることで４点が求まります。この部分の実装はこのようになっています。お気づきの方もいるかもしれませんが、1番の方法を利用すれば簡単に作ることができます。先ほどの４点をそれぞれv0,v1とし、新たにまた4点を求めるだけです。これを実装するのに約半日潰してしまった...
多分LineRendererよりは軽くなっている気がする（気がするだけ）。
正直線を引くだけならLineRendererで良い気がします。たくさん線を引きたいのであれば、GLの方が高速かも？たくさん機能を追加すれば、もっと利便性は上がると思います。でも僕はやりません（）


