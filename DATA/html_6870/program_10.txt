
namespace HigLabo.Core
{
    public class Operator
    {
        public static Boolean HasValue&lt;T&gt;(T value)
        {
            return value != null;
        }
        public static T Negate&lt;T&gt;(T value)
        {
            return Operator&lt;T&gt;.Negate(value);
        }
        public static T Not&lt;T&gt;(T value)
        {
            return Operator&lt;T&gt;.Not(value);
        }
        public static T Or&lt;T&gt;(T value1, T value2)
        {
            return Operator&lt;T&gt;.Or(value1, value2);
        }
        public static T And&lt;T&gt;(T value1, T value2)
        {
            return Operator&lt;T&gt;.And(value1, value2);
        }
        public static T Xor&lt;T&gt;(T value1, T value2)
        {
            return Operator&lt;T&gt;.Xor(value1, value2);
        }
        public static TResult Convert&lt;TFrom, TResult&gt;(TFrom value)
        {
            return Operator&lt;TFrom, TResult&gt;.Convert(value);
        }
        public static T Add&lt;T&gt;(T value1, T value2)
        {
            return Operator&lt;T&gt;.Add(value1, value2);
        }
        public static TArg1 Add&lt;TArg1, TArg2&gt;(TArg1 value1, TArg2 value2)
        {
            return Operator&lt;TArg2, TArg1&gt;.Add(value1, value2);
        }
        public static T Subtract&lt;T&gt;(T value1, T value2)
        {
            return Operator&lt;T&gt;.Subtract(value1, value2);
        }
        public static TArg1 Subtract&lt;TArg1, TArg2&gt;(TArg1 value1, TArg2 value2)
        {
            return Operator&lt;TArg2, TArg1&gt;.Subtract(value1, value2);
        }
        public static T Multiply&lt;T&gt;(T value1, T value2)
        {
            return Operator&lt;T&gt;.Multiply(value1, value2);
        }
        public static TArg1 Multiply&lt;TArg1, TArg2&gt;(TArg1 value1, TArg2 value2)
        {
            return Operator&lt;TArg2, TArg1&gt;.Multiply(value1, value2);
        }
        public static T Divide&lt;T&gt;(T value1, T value2)
        {
            return Operator&lt;T&gt;.Divide(value1, value2);
        }
        public static TArg1 Divide&lt;TArg1, TArg2&gt;(TArg1 value1, TArg2 value2)
        {
            return Operator&lt;TArg2, TArg1&gt;.Divide(value1, value2);
        }
        public static Boolean Equal&lt;T&gt;(T value1, T value2)
        {
            return Operator&lt;T&gt;.Equal(value1, value2);
        }
        public static Boolean NotEqual&lt;T&gt;(T value1, T value2)
        {
            return Operator&lt;T&gt;.NotEqual(value1, value2);
        }
        public static Boolean GreaterThan&lt;T&gt;(T value1, T value2)
        {
            return Operator&lt;T&gt;.GreaterThan(value1, value2);
        }
        public static Boolean LessThan&lt;T&gt;(T value1, T value2)
        {
            return Operator&lt;T&gt;.LessThan(value1, value2);
        }
        public static Boolean GreaterThanOrEqual&lt;T&gt;(T value1, T value2)
        {
            return Operator&lt;T&gt;.GreaterThanOrEqual(value1, value2);
        }
        public static Boolean LessThanOrEqual&lt;T&gt;(T value1, T value2)
        {
            return Operator&lt;T&gt;.LessThanOrEqual(value1, value2);
        }
        public static T Divide&lt;T&gt;(T value, Int32 divisor)
        {
            return Operator&lt;Int32, T&gt;.Divide(value, divisor);
        }

        public static Func&lt;TArg1, TResult&gt; CreateExpression&lt;TArg1, TResult&gt;(Func&lt;Expression, UnaryExpression&gt; body)
        {
            ParameterExpression p = Expression.Parameter(typeof(TArg1), "value");
            try
            {
                return Expression.Lambda&lt;Func&lt;TArg1, TResult&gt;&gt;(body(p), p).Compile();
            }
            catch (Exception ex)
            {
                return delegate { throw new InvalidOperationException(ex.Message); };
            }
        }
        public static Func&lt;TArg1, TArg2, TResult&gt; CreateExpression&lt;TArg1, TArg2, TResult&gt;(Func&lt;Expression, Expression, BinaryExpression&gt; body)
        {
            return CreateExpression&lt;TArg1, TArg2, TResult&gt;(body, false);
        }
        public static Func&lt;TArg1, TArg2, TResult&gt; CreateExpression&lt;TArg1, TArg2, TResult&gt;(Func&lt;Expression, Expression, BinaryExpression&gt; body, Boolean canCast)
        {
            ParameterExpression leftParameter = Expression.Parameter(typeof(TArg1), "leftParameter");
            ParameterExpression rightParameter = Expression.Parameter(typeof(TArg2), "rightParameter");

            try
            {
                return Expression.Lambda&lt;Func&lt;TArg1, TArg2, TResult&gt;&gt;(body(leftParameter, rightParameter), leftParameter, rightParameter).Compile();
            }
            catch (InvalidOperationException ex)
            {
                if (canCast == false)
                {
                    return delegate { throw new InvalidOperationException(ex.Message); };
                }
            }
            try
            {
                if (typeof(TArg1) != typeof(TResult) || typeof(TArg2) != typeof(TResult))
                {
                    Expression castLeftParameter = null;
                    Expression castRightParameter = null;

                    if (typeof(TArg1) == typeof(TResult))
                    {
                        castLeftParameter = (Expression)leftParameter;
                    }
                    else
                    {
                        castLeftParameter = (Expression)Expression.Convert(leftParameter, typeof(TResult));
                    }
                    if (typeof(TArg2) == typeof(TResult))
                    {
                        castRightParameter = (Expression)rightParameter;
                    }
                    else
                    {
                        castRightParameter = (Expression)Expression.Convert(rightParameter, typeof(TResult));
                    }
                    return Expression.Lambda&lt;Func&lt;TArg1, TArg2, TResult&gt;&gt;(body(castLeftParameter, castRightParameter)
                        , leftParameter, rightParameter).Compile();
                }
            }
            catch (Exception ex)
            {
                return delegate { throw new InvalidOperationException(ex.Message); };
            }
            return delegate { throw new InvalidOperationException(); };
        }
    }
    internal static class Operator&lt;T&gt;
    {
        private static readonly Func&lt;T, T&gt; _Negate = null;
        private static readonly Func&lt;T, T&gt; _Not = null;
        private static readonly Func&lt;T, T, T&gt; _Or = null;
        private static readonly Func&lt;T, T, T&gt; _And = null;
        private static readonly Func&lt;T, T, T&gt; _Xor = null;
        private static readonly Func&lt;T, T, T&gt; _Add = null;
        private static readonly Func&lt;T, T, T&gt; _Subtract = null;
        private static readonly Func&lt;T, T, T&gt; _Multiply = null;
        private static readonly Func&lt;T, T, T&gt; _Divide = null;
        private static readonly Func&lt;T, T, Boolean&gt; _Equal = null;
        private static readonly Func&lt;T, T, Boolean&gt; _NotEqual = null;
        private static readonly Func&lt;T, T, Boolean&gt; _GreaterThan = null;
        private static readonly Func&lt;T, T, Boolean&gt; _GreaterThanOrEqual = null;
        private static readonly Func&lt;T, T, Boolean&gt; _LessThan = null;
        private static readonly Func&lt;T, T, Boolean&gt; _LessThanOrEqual = null;

        public static Func&lt;T, T&gt; Negate
        {
            get { return _Negate; }
        }
        public static Func&lt;T, T&gt; Not
        {
            get { return _Not; }
        }
        public static Func&lt;T, T, T&gt; Or
        {
            get { return _Or; }
        }
        public static Func&lt;T, T, T&gt; And
        {
            get { return _And; }
        }
        public static Func&lt;T, T, T&gt; Xor
        {
            get { return _Xor; }
        }

        public static Func&lt;T, T, T&gt; Add
        {
            get { return _Add; }
        }
        public static Func&lt;T, T, T&gt; Subtract
        {
            get { return _Subtract; }
        }
        public static Func&lt;T, T, T&gt; Multiply
        {
            get { return _Multiply; }
        }
        public static Func&lt;T, T, T&gt; Divide
        {
            get { return _Divide; }
        }

        public static Func&lt;T, T, Boolean&gt; Equal
        {
            get { return _Equal; }
        }
        public static Func&lt;T, T, Boolean&gt; NotEqual
        {
            get { return _NotEqual; }
        }
        public static Func&lt;T, T, Boolean&gt; GreaterThan
        {
            get { return _GreaterThan; }
        }
        public static Func&lt;T, T, Boolean&gt; LessThan
        {
            get { return _LessThan; }
        }
        public static Func&lt;T, T, Boolean&gt; GreaterThanOrEqual
        {
            get { return _GreaterThanOrEqual; }
        }
        public static Func&lt;T, T, Boolean&gt; LessThanOrEqual
        {
            get { return _LessThanOrEqual; }
        }

        static Operator()
        {
            _Add = Operator.CreateExpression&lt;T, T, T&gt;(Expression.Add);
            _Subtract = Operator.CreateExpression&lt;T, T, T&gt;(Expression.Subtract);
            _Divide = Operator.CreateExpression&lt;T, T, T&gt;(Expression.Divide);
            _Multiply = Operator.CreateExpression&lt;T, T, T&gt;(Expression.Multiply);

            _GreaterThan = Operator.CreateExpression&lt;T, T, bool&gt;(Expression.GreaterThan);
            _GreaterThanOrEqual = Operator.CreateExpression&lt;T, T, bool&gt;(Expression.GreaterThanOrEqual);
            _LessThan = Operator.CreateExpression&lt;T, T, bool&gt;(Expression.LessThan);
            _LessThanOrEqual = Operator.CreateExpression&lt;T, T, bool&gt;(Expression.LessThanOrEqual);
            _Equal = Operator.CreateExpression&lt;T, T, bool&gt;(Expression.Equal);
            _NotEqual = Operator.CreateExpression&lt;T, T, bool&gt;(Expression.NotEqual);

            _Negate = Operator.CreateExpression&lt;T, T&gt;(Expression.Negate);
            _And = Operator.CreateExpression&lt;T, T, T&gt;(Expression.And);
            _Or = Operator.CreateExpression&lt;T, T, T&gt;(Expression.Or);
            _Not = Operator.CreateExpression&lt;T, T&gt;(Expression.Not);
            _Xor = Operator.CreateExpression&lt;T, T, T&gt;(Expression.ExclusiveOr);
        }
    }
    internal static class Operator&lt;TValue, TResult&gt;
    {
        private static readonly Func&lt;TValue, TResult&gt; _Convert = null;
        private static readonly Func&lt;TResult, TValue, TResult&gt; _Add = null;
        private static readonly Func&lt;TResult, TValue, TResult&gt; _Subtract = null;
        private static readonly Func&lt;TResult, TValue, TResult&gt; _Multiply = null;
        private static readonly Func&lt;TResult, TValue, TResult&gt; _Divide = null;

        static Operator()
        {
            _Convert = Operator.CreateExpression&lt;TValue, TResult&gt;(body =&gt; Expression.Convert(body, typeof(TResult)));
            _Add = Operator.CreateExpression&lt;TResult, TValue, TResult&gt;(Expression.Add, true);
            _Subtract = Operator.CreateExpression&lt;TResult, TValue, TResult&gt;(Expression.Subtract, true);
            _Multiply = Operator.CreateExpression&lt;TResult, TValue, TResult&gt;(Expression.Multiply, true);
            _Divide = Operator.CreateExpression&lt;TResult, TValue, TResult&gt;(Expression.Divide, true);
        }

        public static Func&lt;TValue, TResult&gt; Convert
        {
            get { return _Convert; }
        }
        public static Func&lt;TResult, TValue, TResult&gt; Add
        {
            get { return _Add; }
        }
        public static Func&lt;TResult, TValue, TResult&gt; Subtract
        {
            get { return _Subtract; }
        }
        public static Func&lt;TResult, TValue, TResult&gt; Multiply
        {
            get { return _Multiply; }
        }
        public static Func&lt;TResult, TValue, TResult&gt; Divide
        {
            get { return _Divide; }
        }
    }
}


