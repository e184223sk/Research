More than 3 years have passed since last update.Xamlを使うプロジェクトでMVVMを扱うフレームワークっていくつかあると思います・・・という訳でReactiveUIを試してみました。ドキュメントのGetting Startedに（自分の知る限り）日本では流行っていない写真投稿型のSNS「Ficker」のAPIを利用した簡単なサンプルがあるのでそれを写経します。サンプルのアプリケーションはフォーム上のテキストボックスに検索したい文字列を入力すると、APIをコールして検索結果の投稿写真と詳細をリストボックに表示する感じになっています。こんな感じ
まずは「新しいプロジェクト」→「Windowsデスクトップ」→「WPFアプリ」で新規にWPFフォームアプリケーションを作成します（プロジェクト名はFickerBrowserにしました）。次にNuGetなんですが、ドキュメントでは「ReactiveUI」だけ入れるように書いてありますが、「System.Reactive.Interfaces」「System.Reactive.Linq」「System.Reactive.PlatformServices」が足りないので追加で入れてます。ドキュメントとは順番が前後しますが、MVVMのMから書きます。
FickerのAPIの結果をあてるModelです。結果をあてるだけなのでほぼ空ですが、ViewModel側にあるAPIの結果をModelに落とす部分は役割的にこっちにあってもいい気がします。次に今回のメインとなるViewModelです。こやつのプロパティやコマンドがViewにバインドされます（今回はコマンドはバインドされません）。書き方的にはよくあるMVVMパターンの書き方と大差ありません。
重要なのはコンストラクタにあるプロパティ類の観測部分です（詳細はコード内のコメントを参照してください）。
API周りは今回の趣旨とズレるので解説は省略＋HttpUtilityって古いくさいのでWebUtilityに変更。次にViewです。
まずはクラス側。ビューモデルを初期化してビューのコンテキストに紐付けします。
ちゃんと調べてないけどPrismのような自動バインディングは無いっぽい？次にXaml本体。SourceやらTextにあるBindingがViewModelにバインドしてる部分です。
・・・いつまで経ってもXamlを好きになれん。特にTemplate定義。といった具合で割と簡単にMVVMの肝になるプロパティの監視と通知が実装できます。複雑になりがちなPrismよりはシンプルになりそうだけど、このサンプルだけじゃReactivePropertyで十分じゃん感じなのでもう少しちゃんとドキュメント読んで試してみたいと思いましたとさ（Chromeでドキュメントのツリーが壊れるの自分だけだろうか・・・）。


