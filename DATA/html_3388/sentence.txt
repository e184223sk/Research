今年リリースされた「.NET 5」。なんと Windows Forms に新しいコントロールが追加されていました。本記事ではそのうちの１つ「System.Windows.Forms.TaskDialog」をご紹介したいと思います。こちらの記事に詳しく書かれていますが、Vista 時点で Windows に搭載された機能のようです。
.NET Framework 時代でも Win32API を介せば使用できる機能だったようです。Win32API での使用例はこちらのページで詳しく紹介されています。.NET 5 で、フレームワークの標準機能として搭載されたということですね。TaskDialog のサンプルコードが公開されていたので、動作を確認してみました。※ 以下、掲載しているソースコードは上記のサンプルコードから引用しています従来のMessageBoxです。もちろん TaskDialog でも MessageBox と同様の表現が行えます。タスクダイアログ上のコントロールは TaskDialogPage クラスのプロパティとして設定するようです。「 CheckBox をONにすると、このメッセージを今後表示しない」という機能をもった、よく見かけるタイプのダイアログですね。TaskDialogVerificationCheckBox をプロパティとして設定することで実装できます。
ダイアログ上でチェックがONになったかはpage.Verification.Checkedで取得できます。これもよく見かけるタイプですね。
入力画面から遷移する際に「保存する（保存して遷移）／保存しない（保存しないで遷移）／キャンセル（画面にとどまる）」と選択肢を表示し、ユーザーに編集中の内容をどう扱うか確認させる、といった機能で見かけます。
これが MessageBox だとボタン名をカスタムできないので、表現できないんですよね。
TaskDialog であればわざわざデザイナーでダイアログを作成せずとも、表現できます。TaskDialogCommandLinkButton を配置することで、選択肢のあるダイアログを表現することもできます。
ボタンのTagプロパティによって、どのボタンを選択したかを判定できます。TaskDialogProgressBarを用いて、TaskDialog 上に プログレスバーを設置することも可能です。
このコードは一定時間経過後に自動で TaskDailog を閉じる実装になっています。
reconnectButton.PerformClick();により、ボタンクリックをコードで発火させることで、ダイアログを閉じることができるようです。１つの TaskDialog 内で ページを切り替えることが可能です。
サンプルコードでは「処理の実行確認 → 処理実行中 → 処理完了」といったパターンの例が実装されていました。
initialPage.Navigate(inProgressPage);といった形でTaskDialogPage間で遷移させることができるようです。ページ2の「詳細の表示」をクリックした状態「Restart now」をクリックすると、Windows のUAC（ユーザーアカウント制御）の確認画面が表示され、
「はい」をクリックすると TaskDialog は閉じられコマンドプロンプトが起動されます。
「いいえ」をクリックすると TaskDialog は表示されたままの状態でいます。TaskDialog 上に RadioButton ボタンを配置することも可能です。
RadioButton ボタンのCheckChangedイベントをはじめ、配置したコントロールのイベントを補足することが可能です。以上、「System.Windows.Forms.TaskDialog に触れてみた」でした。
TaskDialog を使用すれば、よくある機能のパターンを簡単に実装できそうですね。
数年前、Windowsフォームの案件に従事していた時代だったら、ぜひ使ってみたかったなと思います。しかし、これから .NET5 + Windowsフォームの案件は果たして出てるくのでしょうか・・・
私感ですが、Windowsフォーム自体の案件も少なくなってきているのかな・・・とは思います・・・


