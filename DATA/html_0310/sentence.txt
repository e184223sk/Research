こちらはDeNA 21 新卒 Advent Calendar 2020の10日目の記事です。正式リリースされたばかりの.NET 5についての情報を自分の中でまとめたかったため、今回の記事を書きました。
主にAnnouncing .NET 5.0の中から個人的に嬉しい変更点を紹介・説明していきます。2020/11/20に.NET 5.0が正式リリースされました。.NET系について簡単に整理すると、となっています。.NET Coreがバージョン4を飛ばした理由は、Introducing .NET 5に明記されています。We’re skipping the version 4 because it would confuse users that are familiar with the .NET Framework, which has been using the 4.x series for a long time. Additionally, we wanted to clearly communicate that .NET 5 is the future for the .NET platform.要約すると「長年使われている.NET Framework 4.x系と混同しちゃうかもしれないから」ということのようです。.NET 5.0では、主にパフォーマンス向上が重点的に行われました。加えて、いくつか新機能も追加されたようです。
今回は、その中でも個人的に嬉しかった変更点についてピックアップしたいと思います。HttpClient extension methodsC#でhttp経由の通信を行う際に、よくHttpClientが使われます。
いままで、JSON形式のレスポンスを取得する際は、以下のように3ステップに分けて実装を行う必要がありました。これだと、API通信をよく行うアプリでは、書き方が冗長で非常に面倒です。
.NET 5.0では、上記の実装がよりシンプルになりました。たったこれだけです。すごい！加えて、忘れがちな以下の処理が実装されています。ただし、レスポンスのContent-Typeがapplication/jsonになっているかは判定していない模様です。text/plainで試したところ、エラー無しでJSONとしてパースされました。（3/31時点の記事では判定していたようですが、その後削除された？）上記では、GETメソッドを例として書きましたが、POSTとPUTでも同様の拡張メソッドが追加されました。(PATCHやDELETEなどには追加されていない模様です)
もちろん、POSTとPUTでは引数に何らかのオブジェクトを渡すとJSONシリアライズして送信してくれます。HttpContentクラスに拡張メソッドとしてReadFromJsonAsyncが追加されました。
こちらを使うことで、任意のHttpContentからJSONデータを扱えるようになります。使用する場面としては、以下が挙げられます。HttpContentを継承したJsonContentクラスが、拡張メソッドの追加に伴って追加されました。以下のようなコードを書くことで、Content-Type: application/jsonを設定済みのJsonContentを生成できます。(charsetに応じてエンコードしてくれます。デフォルトではUTF-8).NET 5.0に変更せずとも、.NET Core 2.0または.NET Framework 4.6.1以上であればSystem.Net.Http.Jsonパッケージを追加すれば、同様の機能が使用できます。Windows Arm64ARM64環境において、いままでの.NET Coreと.NET Frameworkはx86エミュレーション環境で動作していました。
.NET 5.0では、ARM64にネイティブ対応するため、より高速に動作するようになるようです。ただし、Windows Forms及びWPFに関する機能は対応しておらず、.NET 5.0の今後のアップデートで提供するかもしれないみたいです。Apple Siliconには、現状ネイティブ対応していません。ネイティブ対応は.NET 6で提供予定とのことです。(該当Issue)
加えて、Rosetta 2でのデバッグにも対応しておらず、コンパイルはできますがデバッグすると以下のエラーで落ちます。既にIssueは上がっており、.NET 5のうちにRosetta 2上で対応する予定のようです。
手元の環境（M1 Mac mini）でもデバッグできませんでした。（デバッグなしで実行すれば動作しました）Single file applicationsシングルファイルアプリケーションとは、その名の通り単一の実行ファイルで動くアプリのことです。いままでは、各種バイナリを一つのファイルに圧縮し、実行時にそれらを一時ディレクトリに展開することで、単一ファイルを実現していました。ですが、.NET 5.0から一時ディレクトリに展開せずとも動作するようになります。
ただし、.NET 5.0からは単一ファイルと言いつつ複数ファイルが出力されるパターンがあります。以下の表に構成とファイル数を記しておきます。複数ファイルが出力される原因は、CLRなどのネイティブバイナリが別で出力されてしまうためです。これを解決するためには、ネイティブバイナリも含めて出力する必要があります。
これにはプロジェクトファイルのIncludeNativeLibrariesForSelfExtractをtrueに設定することで実現できます。ただし、この方法を用いると.NET Core 3.1と同じように一時ディレクトリに展開してから実行されるようになります。(参考).NET 5.0では、上述した機能の追加が行われました。加えて、パフォーマンスもかなり改善されました。RyuJITやGCレベルでのパフォーマンス改善のため、利用者側としては.NET 5.0に切り替えるだけでパフォーマンス向上が期待できます。
Apple Siliconにネイティブ対応するであろう.NET 6も楽しみです！この記事を読んで「面白かった」「学びがあった」と思っていただけた方、よろしければ LGTM、Twitter や Facebook、はてなブックマークにてコメントをお願いします！また DeNA 公式 Twitter アカウント @DeNAxTech では、 Blog 記事だけでなく色々な勉強会での登壇資料も発信しています。ぜひフォローして下さい！
Follow @DeNAxTechパブリッシュ方法。Self-Containedは.NETランタイムも含める。Framework-Dependentは.NETランタイムを除く。 ↩


