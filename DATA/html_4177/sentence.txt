More than 1 year has passed since last update.C++のとき構造体のデータのアレンジメントをよく注意しなればないですが、C#はほとんどは自動管理でやります。でも本当に何もしなくていいですか？これについて確認します。最初は簡単な構造体を作ります。Marshal.SizeOfを利用してメモリサイズを確認したら12 bytesを返します。つまりC#は自動的に4 byteのブロックを分けています。
現在のレイアウトは下のようにアレンジメントしています。こうする見ると、この中にはすでに4 bytesの無駄スペースを発生しました。
[byte][..][..][..]
[int][int][int][int]
[short][short][byte][..]今ブロックの長さは一番長いのintのサイズと一致ですから、intをdoubleに変わると24 Bytesになるはず。
早速確認すると、やっぱり24 bytesになりました。メモリレイアウトはこうになりました。無駄なメモリも12 bytesになりました。50％のスペースが使わないからなんかもったいないです。では、手動的にデータの順序でレイアウトを変わってみます。
[byte][..][..][..][..][..][..][..]
[double][double][double][double][double][double][double][double]
[short][short][byte][..][..][..][..][..]はじめてのメモリレイアウトを見ると、変数a、変数cと変数dのサイズの和は4 bytesです。一緒に並びましょう。今回SizeOfで確認すると8 bytesを返します。レイアウトをコンパクトしました。無駄にさようなら！
[byte][byte][short][short]
[int][int][int][int]そして２つのレイアウトは効率にも差があります。1000000の構造体を生成するテストプログラムを作ります。リザルト構造体だけではなく、クラスにも同じ原理です。日常のプログラミングには特にメモリレイアウトを書きながら変数を移動しなくてもいいです。ただ、同じタイプの変数を一緒に並ぶと無駄を結構減っています。


