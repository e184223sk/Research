More than 1 year has passed since last update.コッホ曲線とは、フラクタル図形の一種です。
線分を3等分し、分割した真ん中の線分を底辺とする正三角形を描く(ただし底辺は消す)ことを繰り返すことによって得られる図形です。
詳しくはこちら(Wikipoedia)をご覧ください。例えば、以下のような図形です。Wikipediaの定義によれば、作図手順を無限に繰り返して得られる図形を言うのだそうですが、無限に繰り返すことはできないので、ここでは、繰り返す回数を指定できるようにしました。僕のコードでは、それほど待たずにプログラムが終わるのは、 この繰り返し数が 7 くらいまでです。 それ以上大きい値だと、結構待つことになります。以下、ソースコードの簡単な説明です。プログラムをつかさどるクラス。KochCurveとDrawerを使って、図形を描画しています。
ここで、曲線の次数を与えています。中心的なメソッドは、Draw(Point p1, Point p2, int generation) メソッドです。generationは繰り返し回数で、再帰呼び出しのたびに、-1 され、0 になったら、再帰呼び出しをストップします。p1,p2は、線分の両端を示します。p1,p2の両端の位置が与えられると、その 3 等分した点と、そこから得られる正三角形の頂点を求め、４本の線分を引きます。ただ、このときに実際に線を引くのではなく、generation を  -1 し、Drawメソッドを再帰呼び出しすることで、図形を描いていきます。IObservable&lt;T&gt;を実装していて、実際に線分を描くのは、generationが 0になったときで、このときに、購読者オブジェクトに通知し、購読者オブジェクト側（Drawerクラス）で実際の描画を行なっています。描画を受け持つDrawerクラスは、IObserver&lt;T&gt;を実装している購読者クラスです。
DragonCurve からの通知を受け取り、線を描くのに、以下のEasyCanvasクラスを利用しています。NGraphicパッケージを利用して、線を描いています。結果はpngファイルにしています。※ ソースコードは、GitHubで公開しています。6次のコッホ曲線を示します。この記事は、Gushwell's C# Programming Pageで公開したものを大幅に変更・加筆したものです。


