
public void GenerateHelloWorldExe() {
    var compileUnit = new CodeCompileUnit();

    //名前空間を設定
    var name = new CodeNamespace("Namespace1");

    //Systemをインポート
    name.Imports.Add(new CodeNamespaceImport("System"));

    //クラス定義 引数にはクラス名を設定
    var classType = new CodeTypeDeclaration("HelloWorld");

    //public static void Main() を作成
    var method = new CodeEntryPointMethod();

    //Console.WriteLine("Hello World!"); を定義
    var writeLine = new CodeMethodInvokeExpression(
        new CodeTypeReferenceExpression("Console"), "WriteLine",
        new CodePrimitiveExpression("Hello World!")
    );

    //Console.ReadKey(); を定義
    var readKey = new CodeMethodInvokeExpression(
        new CodeTypeReferenceExpression("Console"), "ReadKey"
    );

    //上記で定義した処理をMain()に追加する
    method.Statements.Add(new CodeExpressionStatement(writeLine));
    method.Statements.Add(new CodeExpressionStatement(readKey));

    classType.Members.Add(method);

    name.Types.Add(classType);

    compileUnit.Namespaces.Add(name);

    var provider = new CSharpCodeProvider();

    //確認のため生成コードをコンソールへ出力
    provider.GenerateCodeFromCompileUnit(compileUnit, Console.Out, new CodeGeneratorOptions());

    //実行ファイル(HelloWorld.exe)を作成
    var param = new CompilerParameters { GenerateExecutable = true, OutputAssembly = "HelloWorld.exe" };
    CompilerResults result = provider.CompileAssemblyFromDom(param, new CodeCompileUnit[] { compileUnit });

}

