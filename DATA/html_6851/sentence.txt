More than 3 years have passed since last update.Entity Frameworkって便利ですよね
存在を知って､初めて使ったときの感動は今でも忘れられません｡そんなEntity Frameworkを使うためにはEntity Data Modelクラスが必要です｡
これもまた便利なもので､既存のDBをウィザードに従って設定するだけでVisual Studioが勝手にModelクラスを生成してくれます｡
カラムの変更などの対応も簡単です｡便利は便利なのですが､ふと疑問に思いました｡
｢これってどうやって生成しているんだろう｣
｢C#で実装してるのかな?それともC++とか?｣
｢よし､クラスファイルと言ってもテキストファイルなんだからC#で作ってみよう｣
というのが今回の趣旨です｡Google先生に聞いてみました｡
どうやらCodeDOM(Code Document Object Model)を使用することで実現できそうだということがわかりました｡
｢もしかしてString結合でやらなきゃできないのかな...｣という不安はひとまず解消
手段はわかったので実装してみます｡凝ったモノを作るつもりではないので､コンソールアプリで作成
DBはお手軽なSQLiteを使用します｡何はともあれNuGet
SQLはベタ書きするのでSQLite.Coreで十分です｡DB名はsample.dbとします｡
まずは以下のようなテーブル作成メソッドを作成します｡次にテーブルのカラム情報を格納するクラスを作成します｡
とは言っても､必要な情報はカラム名とデータ型のみです｡テーブル作成､カラム情報格納クラスができたところでテーブルの情報を取得します｡
恥ずかしながら､SQLiteのテーブル情報取得方法は知らなかったので､こちらの記事を参考にさせていただきました｡
PRAGMA TABLE_INFO(TABLE_NAME);で取得できるようです｡
取得できる内容は以下今回は上記記事を参考にcolumnとtypeだけ取得します｡
先程作成したTableInfo型のListを作成します｡ひとまずテーブルが正しく作成され､テーブル情報が取得できているか確認してみましょう｡どうやらうまく作成､取得できているみたいです｡
では今回のメインロジックを組んでいきます｡
まずはSQLiteのデータ型をC#のデータ型に変換するメソッドを作成BLOB型については､どう扱うべきか迷ったので面倒くさいし無視することにしました｡
次は実際にEntityクラスを生成するメソッドを実装します｡
CodeCompileUnitクラス等を使用して実装します｡
最終的にはStreamWriterでファイル出力します｡このメソッドをProgram.csのMain()で呼んであげます｡｢よすよす､これでOK､楽勝だった｣と思っていましたが､実際に生成されたEntityクラスはと言うと...ん?プロパティって最後にセミコロンいらないよね??
Visual Studioで開いてみると､案の定怒られました｡
このセミコロンでだいぶハマりました｡
ググっても解決策出てこないしどうしよう...最初のほうでも書きましたが､クラスファイルといっても所詮テキストファイルです｡
今回のケースであれば､ファイルを読み込んで};を}に置換してやればなんとかなります｡
そして以下のメソッドを追加我ながらゴリ押しが過ぎる気がしますが､これしか思いつきませんでした｡
正しい方法をご存知の方がいらっしゃればご教示頂きたい...と､とりあえずDeletePropertysEndSemicolon()メソッドをGenerateEntity()メソッドの最終行に追加してあげれば完成です(震え声)実行して生成されたクラスが以下期待通りの結果です｡
ただ､やはりセミコロンの部分が納得いきません...
一応stringで定義する方法もあったのですが､public int id { get; set; }とベタ書きしなければならないようだったので､今回は避けました｡(インデントも自分で入れないといけないし)クラスを生成､ビルドしてexeファイルも作れるみたいなのでHello Worldとコンソール出力するアプリを生成してみます｡HelloWorld.exeを実行してみます｡

うまく動いてくれました｡クラスを生成する手法を知ったからといって､これと言った使いみちが思いつきません｡
もう既に比べるのもおこがましい程高機能なツールがあるわけですし､クラスを動的に作ることも極々稀だと思います｡
でも､｢こんな感じで実装してるのかな?｣って考えるのは楽しいですね｡一応GitHubにアップしているので､死ぬほど暇で本当にやることが無い人がいらっしゃったら見てやってください｡


