
/// &lt;summary&gt;
/// テーブルに対応するクラスを作成する
/// &lt;/summary&gt;
/// &lt;param name="nameSpace"&gt;&lt;/param&gt;
/// &lt;param name="className"&gt;&lt;/param&gt;
/// &lt;param name="tableInfo"&gt;&lt;/param&gt;
public void GenerateEntity(string nameSpace, string className, List&lt;TableInfo&gt; tableInfo) {

    var compileUnit = new CodeCompileUnit();

    //名前空間を設定
    var name = new CodeNamespace(nameSpace);

    compileUnit.Namespaces.Add(name);

    //クラス定義 引数にはクラス名を設定
    var classType = new CodeTypeDeclaration(className);

    foreach (var t in tableInfo) {
        //propertyを定義
        var field = new CodeMemberField {
            Attributes = MemberAttributes.Public | MemberAttributes.Final,
            Name = $"{ t.ColumnName } {{ get; set; }}",
            Type = new CodeTypeReference(this.GetPropertyDataType(t.DataType)),
        };

        classType.Members.Add(field);
    }

    name.Types.Add(classType);

    var provider = new CSharpCodeProvider();

    //CSharpCodeProvider().FileExtensionで｢cs｣拡張子を取得できます
    var fileName = $"{ classType.Name }.{ provider.FileExtension }";

    //Entityクラスを出力
    using (var writer = File.CreateText(fileName)) {
        provider.GenerateCodeFromCompileUnit(
            compileUnit,
            writer,
            new CodeGeneratorOptions()
        );
    }

}

