    public GameObject pool_Bullet;
    public float _Velocity_0, Degree, Angle_Split;

    //とりあえずの配列数144*16
    GameObject[] Bullet = new GameObject[2304];

    float _theta, WaitFrame = 0;
    float PI = Mathf.PI;

    private void Start() {
        //配列に格納して子オブジェクトに
        for (int i = 0; i &lt; 1296; i++) {
            Bullet[i] = (GameObject)Instantiate(pool_Bullet);
            Bullet[i].transform.parent = gameObject.transform;
            Bullet[i].SetActive(false);
        }
    }

    void Update() {
        WaitFrame++;
        //10フレームに1回円形弾幕
        if (WaitFrame &gt; 10) {
            for (int i = 0; i &lt;= (Angle_Split - 1); i++) {
                //n-way弾流用。360度方向にだす
                float AngleRange = PI * (Degree / 180);

                //弾インスタンスに渡す角度の計算
                _theta = (AngleRange / (Angle_Split - 1)) * i + 0.5f * (PI - AngleRange);

                //弾インスタンスからスクリプト取得
                GameObject Bullet_obj = poolBullet(); 
                BulletSc2 bullet_cs = Bullet_obj.GetComponent&lt;BulletSc2&gt;();

                //アクティブになったフラッグ
                bullet_cs.Bulletmove_flag = true;

                //角度と初速に加えて、ランチャーの座標も渡す(消滅までの距離測るため)
                bullet_cs.Lpos = transform.position;
                bullet_cs.theta = _theta;
                bullet_cs.Velocity_0 = _Velocity_0;
            }
            WaitFrame = 0;
        }
    }

