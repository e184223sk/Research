class ComboBoxHelper : Behavior&lt;ComboBox&gt;
{
    public static readonly DependencyProperty IsWheelDisabledProperty =
        DependencyProperty.RegisterAttached("IsWheelDisabled", typeof(bool), typeof(ComboBoxHelper), new PropertyMetadata(false, PropertyChanged));

    public static bool GetIsWheelDisabled(DependencyObject obj)
    {
        return (bool)obj.GetValue(IsWheelDisabledProperty);
    }

    public static void SetIsWheelDisabled(DependencyObject obj, bool value)
    {
        obj.SetValue(IsWheelDisabledProperty, value);
    }

    private static void PropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
    {
        var comboBox = (ComboBox)d;

        if ((bool)e.NewValue)
        {
            comboBox.PreviewMouseWheel += ComboBox_PreviewMouseWheel;
        }
        else
        {
            comboBox.PreviewMouseWheel -= ComboBox_PreviewMouseWheel;
        }
    }

    private static void ComboBox_PreviewMouseWheel(object sender, MouseWheelEventArgs e)
    {
        var comboBox = (ComboBox)sender;

        if (!comboBox.IsDropDownOpen)
        {
            e.Handled = true;

            var parent = (FrameworkElement)comboBox.Parent;
            var args = new MouseWheelEventArgs(e.MouseDevice, e.Timestamp, e.Delta)
            {
                RoutedEvent = UIElement.MouseWheelEvent,
                Source = sender,
            };
            parent.RaiseEvent(args);
        }
    }
}

