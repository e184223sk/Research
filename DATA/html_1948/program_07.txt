
static double SolveCubicEquation(double a, double b, double c, double d)
{
    //負の値に対応した３乗根
    double Cbrt(double x) =&gt; Math.Sign(x) * Math.Pow(Math.Abs(x), 1.0 / 3);

    b /= a * 3;
    c /= a;
    d /= a;
    var p = c / 3 - b * b;
    var q = b * b * b - (b * c - d) / 2;
    var D = q * q + p * p * p;

    if (Math.Abs(D) &lt; 1.0E-12) //D = 0
    {
        var ret = Cbrt(q) - b;
        if (ret &gt;= 0)
            return Math.Min(ret, 1);
        else
            return Math.Min(ret * -2,1);
    }
    else if (D &gt; 0)
    {
        var sqrtD = Math.Sqrt(D);
        var u = Cbrt(-q + sqrtD);
        var v = Cbrt(-q - sqrtD);
        var ret = u + v - b;
        return  ret &lt; 0 ? 0 : ret &gt; 1 ? 1 : ret;
    }
    else //D &lt; 0
    {
        var tmp = 2 * Math.Sqrt(-p);
        var arg = Math.Atan2(Math.Sqrt(-D), -q) / 3;
        const double pi2d3 = 2 * Math.PI / 3;
        var ret1 = tmp * Math.Cos(arg) - b;
        if (0 &lt;= ret1 &amp;&amp; ret1 &lt;= 1) return ret1;
        var ret2 = tmp * Math.Cos(arg + pi2d3) - b;
        if (0 &lt;= ret2 &amp;&amp; ret2 &lt;= 1) return ret2;
        var ret3 = tmp * Math.Cos(arg - pi2d3) - b;
        if (0 &lt;= ret3 &amp;&amp; ret3 &lt;= 1) return ret3;
        throw new Exception($"Invalid solution: {ret1}, {ret2}, {ret3}");
    }
}

