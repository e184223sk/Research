static class EnumExtension
{

    #region Color属性
    /// &lt;summary&gt;
    /// Color属性
    /// &lt;/summary&gt;
    [AttributeUsage(AttributeTargets.Field, Inherited = false, AllowMultiple = false)]
    public sealed class ColorAttribute : Attribute
    {
        public Color Color { get; private set; }

        public ColorAttribute(KnownColor color)
        {
            this.Color = Color.FromKnownColor(color);
        }
    }
    /// &lt;summary&gt;
    /// Color属性の取得
    /// &lt;/summary&gt;
    public static Color GetColor(this Enum value)
        =&gt; value.GetAttribute&lt;ColorAttribute&gt;()?.Color
            ?? Color.Empty;
    #endregion

    #region Code属性
    /// &lt;summary&gt;
    /// Code属性
    /// &lt;/summary&gt;
    [AttributeUsage(AttributeTargets.Field, Inherited = false, AllowMultiple = false)]
    public sealed class CodeAttribute : Attribute
    {
        public int Code { get; private set; }

        public CodeAttribute(int Code)
        {
            this.Code = Code;
        }
    }
    /// &lt;summary&gt;
    /// Code属性の取得
    /// &lt;/summary&gt;
    public static int GetCode(this Enum value)
        =&gt; value.GetAttribute&lt;CodeAttribute&gt;()?.Code
            ?? -1;
    #endregion

    #region 短縮名属性
    /// &lt;summary&gt;
    /// 短縮名属性
    /// &lt;/summary&gt;
    [AttributeUsage(AttributeTargets.Field, Inherited = false, AllowMultiple = false)]
    public sealed class ShortNameAttribute : Attribute
    {
        public string ShortName { get; private set; }

        public ShortNameAttribute(string ShortName)
        {
            this.ShortName = ShortName;
        }
    }
    /// &lt;summary&gt;
    /// 短縮名属性の取得
    /// &lt;/summary&gt;
    public static string GetShortName(this Enum value)
        =&gt; value.GetAttribute&lt;ShortNameAttribute&gt;()?.ShortName
            ?? value.ToString();
    #endregion


    /// &lt;summary&gt;
    /// 特定の属性を取得する
    /// &lt;/summary&gt;
    /// &lt;typeparam name="TAttribute"&gt;属性型&lt;/typeparam&gt;
    private static TAttribute GetAttribute&lt;TAttribute&gt;(this Enum value) where TAttribute : Attribute
    {
        //リフレクションを用いて列挙体の型から情報を取得
        var fieldInfo = value.GetType().GetField(value.ToString());
        //指定した属性のリスト
        var attributes
            = fieldInfo.GetCustomAttributes(typeof(TAttribute), false)
            .Cast&lt;TAttribute&gt;();
        //属性がなかった場合、空を返す
        if ((attributes?.Count() ?? 0) &lt;= 0)
            return null;
        //同じ属性が複数含まれていても、最初のみ返す
        return attributes.First();
    }
}

