using System;
using System.Collections.Generic;

namespace Sumzap
{
    /// &lt;summary&gt;
    /// サービスロケーター
    /// &lt;/summary&gt;
    public static class Locator
    {
        /// &lt;summary&gt;
        /// 単一インスタンス用ディクショナリー
        /// &lt;/summary&gt;
        private static Dictionary&lt;Type, object&gt; _instanceDict = new Dictionary&lt;Type, object&gt;();

        /// &lt;summary&gt;
        /// 都度インスタンス生成用ディクショナリー
        /// &lt;/summary&gt;
        private static Dictionary&lt;Type, Type&gt; _typeDict = new Dictionary&lt;Type, Type&gt;();

        /// &lt;summary&gt;
        /// 単一インスタンスを登録する
        /// 呼び直すと上書き登録する
        /// &lt;/summary&gt;
        /// &lt;typeparam name="T"&gt;型&lt;/typeparam&gt;
        /// &lt;param name="instance"&gt;インスタンス&lt;/param&gt;
        public static void Register&lt;T&gt;(T instance) where T : class
        {
            _instanceDict[typeof(T)] = instance;
        }

        /// &lt;summary&gt;
        /// 型を登録する
        /// このメソッドで登録するとResolveしたときに都度インスタンス生成する
        /// &lt;/summary&gt;
        /// &lt;typeparam name="TContract"&gt;抽象型&lt;/typeparam&gt;
        /// &lt;typeparam name="TConcrete"&gt;具現型&lt;/typeparam&gt;
        public static void Register&lt;TContract, TConcrete&gt;() where TContract : class
        {
            _typeDict[typeof(TContract)] = typeof(TConcrete);
        }

        /// &lt;summary&gt;
        /// 型を指定して登録されているインスタンスを取得する
        /// &lt;/summary&gt;
        /// &lt;typeparam name="T"&gt;型&lt;/typeparam&gt;
        /// &lt;returns&gt;インスタンス&lt;/returns&gt;
        public static T Resolve&lt;T&gt;() where T : class
        {
            T instance = default;

            Type type = typeof(T);

            if (_instanceDict.ContainsKey(type))
            {
                // 事前に生成された単一インスタンスを返す
                instance = _instanceDict[type] as T;
                return instance;
            }

            if (_typeDict.ContainsKey(type))
            {
                // インスタンスを生成して返す
                instance = Activator.CreateInstance(_typeDict[type]) as T;
                return instance;
            }

            if (instance == null)
            {
                Debug.LogWarning($"Locator: {typeof(T).Name} not found.");
            }
            return instance;
        }
    }
}

