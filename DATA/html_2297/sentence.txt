実運用で使用しているアプリがリフレクションを頻繁に使用しているので、処理速度を改善出来る余地があるかどうかサンプルプログラムを作成して確認しました。
改善ポイントはループ内でリフレクションを行っていた点をループ外で行うようにしました。計測①ボタンは1000万回繰り返すループ内でリフレクションによるクラスの型取得とインスタンス化を行い、インスタンス化したクラスのメソッドを呼び出します。
ループを抜けた後は処理時間を計測②ボタンの隣のラベルに出力します。
計測①ボタンのコードは下記の通り。計測②ボタンはループの外でクラスの型取得とインスタンス化を行い、ループ内ではインスタンス化したオブジェクトを使いまわしてメソッドを実行します。
計測②ボタンのコードは下記の通り。処理速度を比較した結果、計測②が速くなっていました。サンプルプログラムは１クラス１メソッドの構成のため、劇的に速くなることはありませんでしたが、実運用で使用しているアプリの場合はクラスやメソッドの数が膨大であるため、さらに効果が上がるのではないかと感じました。これまでにも処理速度改善のアプローチとしてループ内で行っている重い処理をループ外に移動することで処理速度の改善を図ってきた経験はありましたが、リフレクションにおいても実際にサンプルプログラムを作成してみて効果があることが実感できました。


