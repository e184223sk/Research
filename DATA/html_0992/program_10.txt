
/// &lt;summary&gt;
/// 指定した配列インデックスを開始位置として，配列に ICollection&lt;T&gt; の要素をコピーします．
/// &lt;/summary&gt;
/// &lt;param name="array"&gt;ICollection&lt;T&gt; から要素がコピーされる 1 次元の配列． &lt;/param&gt;
/// &lt;param name="index"&gt;array 内のコピーの開始位置を示すインデックス．&lt;/param&gt;
public void CopyTo(KeyValuePair&lt;TKey, TValue&gt;[] array, int index)
{
    if (array == null) throw new ArgumentNullException(nameof(array));
    if (index &lt; 0 || index &gt; array.Length) throw new ArgumentOutOfRangeException(nameof(index));
    if (array.Length - index &lt; this.Count) throw new ArgumentException();
    foreach (var item in this._keyToValues)
    {
        array[index++] = new KeyValuePair&lt;TKey, TValue&gt;(item.Key, item.Value);
    }
}

/// &lt;summary&gt;
/// シーケンスの各要素の値を Func&lt;TValue, TValueResult&gt;　によって新しいフォームに射影し，既存のキーと新しい値による LinkedDictionary&lt;TKey, TValueResult&gt; を生成します．
/// &lt;/summary&gt;
/// &lt;typeparam name="TValueResult"&gt;変換後の要素の値の型．&lt;/typeparam&gt;
/// &lt;param name="valueSelector"&gt;要素の値の変換を表すデリゲート．&lt;/param&gt;
/// &lt;returns&gt;生成された LinkedDictionary&lt;TKey, TValueResult&gt;．&lt;/returns&gt;
public LinkedDictionary&lt;TKey, TValueResult&gt; SelectValue&lt;TValueResult&gt;(Func&lt;TValue, TValueResult&gt; valueSelector)
    =&gt; new LinkedDictionary&lt;TKey, TValueResult&gt;(this.KeyValuePairs.Select(item =&gt; new KeyValuePair&lt;TKey, TValueResult&gt;(item.Key, valueSelector(item.Value))));

/// &lt;summary&gt;
/// シーケンスの各要素の値を Func&lt;TKey, TKeyResult&gt;　によって新しいフォームに射影し，新しいキーと既存の値による LinkedDictionary&lt;TKeyResult, TValue&gt; を生成します．
/// &lt;/summary&gt;
/// &lt;typeparam name="TKeyResult"&gt;変換後の要素のキーの型．&lt;/typeparam&gt;
/// &lt;param name="keySelector"&gt;要素のキーの変換を表すデリゲート．&lt;/param&gt;
/// &lt;returns&gt;生成された LinkedDictionary&lt;TKey, TValueResult&gt;．&lt;/returns&gt;
public LinkedDictionary&lt;TKeyResult, TValue&gt; SelectKey&lt;TKeyResult&gt;(Func&lt;TKey, TKeyResult&gt; keySelector)
    =&gt; new LinkedDictionary&lt;TKeyResult, TValue&gt;(this.KeyValuePairs.Select(item =&gt; new KeyValuePair&lt;TKeyResult, TValue&gt;(keySelector(item.Key), item.Value)));

