smileBASICから始まり
pythonを学校で習い
luaで遊んで
C#を知る私は今、人生の岐路にいるif ～ elseif ～ else ～の処理直前と言ったところかとにかく、プログラミングを本気でやるのなら
動的とか静的とか
プロパティとかメソッドとか独学で感覚的に手に入れた知識をはっきりさせたいと思ったのだ今しがた列挙したプログラミング言語、
smile Basic, python, luaには存在しない(または、存在するのかもしれないがそのレベルまで到達できなかったのか)が
C#には存在する概念がある...
C#を初めて触れた時、今までやってきた言語とは全くの別物だと感じた。
そう、予約語の多さ、型の多さ、そして...修飾語である。うーむ、といあえずこの言葉があっているのかいささか心配なので検索にかける。修飾子だった。早速、自分がどのくらい知識がないか分かった。ともあれ、pyhtonにクラスやクラスの継承の概念は存在するのだが、
public, private, internal, protectedや
abstract, virtual, sealedなどなど...
修飾子の正確な使い方を知らない。そして動的、静的とか、
public &lt;型&gt; &lt;変数名&gt;;とpublic &lt;型&gt; &lt;プロパティ名&gt; { get; set; }とか
=と=&gt;とか
全然理解できていない。なんとなくでしか分からない。このなんとなくをはっきりさせたいのだ。疑問を解決するにあたって、とりあえず、今の認識や感覚を列挙していこう。まず、そもそもクラスとは何か、から今の私の認識は「自作の型をつくるもの」である。
pythonの時からそのような認識である。
もしかしたらこの時点でもう終わっているかもしれない。。。とりあえず、まず、どんどん今の認識を挙げていこう動的(変数?) -&gt; インスタンスを作成しないとアクセスできない変数
静的(変数?) -&gt; インスタンスを作成しなくてもアクセスできる変数
プロパティ -&gt; public &lt;型&gt; &lt;名前&gt; { get; set; }のやつ。この単語自体はVisual Studioで知った
インスタンス -&gt; クラス内の動的変数のこと
メソッド -&gt; 関数。 この単語もVisual Studioで知った
public -&gt; どのファイルからでもアクセスできる
private -&gt; アクセスできない 多分継承すればアクセスできるはず
internal -&gt; publicとは違うんだろうけど詳しくは分からない。アクセスできるっぽかったから
protected -&gt; これを使ったことはないし、知らないが、見たことはあるので挙げてみた
abstract -&gt; 継承元のクラスにつけるやつ。確か抽象クラスって名前だった
virtual -&gt; overrideしたいメソッドにつけるやつ
static -&gt; 静的にしたいときにつけるやつ
sealed -&gt; 継承禁止
override -&gt; override 継承クラスにおけるメソッド、プロパティの書き換え
=&gt;演算子 -&gt; プロパティにおける=の役割とりあえずあやふやな知っているものを列挙したここでVisual Studioを開いて、今作っているModのプロジェクト内で列挙していない、あやふやなものがないか確かめる。そう、私の初めてのC#はModなのだ。
TerrariaのMod。tModLoaderだ。
Example Modを元になんとなくでしか理解できなかった。そうだ、&lt;T&gt;()ってなんだろう。あと、System.collections.genericのList&lt;&gt;が列挙型([]のこと)より遥かに使いやすくて、Modでなければ結構使ってしまうのだが、
それははたしていいことなのか？一応、namespace(名前空間)もはっきりさせておこう。だいたい調べなければならないものが分かった。はっきりさせる方法は、まず、とにかく調べることだ。
あとは実際に使って、少しいじって、確かめていくしかない。本は期待が薄い。そもそも近くの本屋にはそういったことよりも、入門書ぐらいしかない。まずは後で挙がった、一応はっきりさせようと思ったnamespaceからだ。検索候補からいろんなプログラミング言語が表示された(phpとか)
そして、なんとwikipediaが最初に出てきた。名前空間（なまえくうかん）はNamespaceの訳語で、名前の集合を分割することで衝突の可能性を低減しつつ参照を容易にする概念である。
(wikipedia 名前空間 より)このくらいは知っている。例えばMinecraftのTNTのレシピを追加しようとする
↑の例を読みたい人向け

バニラのレシピはおなじみ火薬×5と砂×4のあの形
そのレシピを担うファイル名は確か、tnt.jsonである。

ここで、データパックで火薬×9でもTNTが作れるレシピを追加したい。
そして、ファイル名をtnt.jsonにする仮に名前空間という概念が存在しない場合、
バニラとデータパックのtnt.jsonのどちらに従えばいいのか分からずMinecraftがTNT2147483647個分の大爆発を起こす
仮にロードできたとしても、Minecraftかデータパックのどちらかのレシピが優先され、
2通りのレシピではなく、どちらかのレシピしか使えない。
バニラとModやMod同士の競合を防ぐため、どのコンテンツのものなのかを表すために名前空間が存在する。名前空間はソースコード上で冗長な命名規則を用いなくても名前の衝突が起こらないようにし、しかもそれを容易に記述できるようにするためだけの概念であり、普通はそれ以上の意味は持っていない
(wikipedia 名前空間 #プログラミング より)ただ単に競合しないためだけの概念らしい。
認識はあっていたっぽい。だいたいなんでも最初につけるが、そもそもこいつらの名前って何なんだ？
とりあえずpublic private internal protected 名前と検索をかけるMicrosoft公式のリファレンスが引っ掛かった。アクセス修飾子というらしい。そしてそこにそのまま解説があった。
要約しよう...と思ったのだが、アセンブリという聞いたり見たりしたことはあるが、あやふやな認識の単語が出てきた。まずいったん置いておいて
先にクラスについて理解しておこうクラスと構造体は、どちらも基本的にはデータと動作のセットを 1 つの論理単位としてカプセル化するデータ構造です。 データとビヘイビアーはクラス、構造体、またはレコードの "メンバー" です。この記事で後述するように、そのメソッド、プロパティ、イベントなどが含まれます。
(C# 公式リファレンスより)でたよ。
その単語を調べると、さらに分からない単語が増えていく現象！！！
まるでwikipediaで量子力学の単語の解説を適当に漁って見てるかのようだ！
この現象に名前をつけてやりたいほど嫌いだ。
さて、名前は...じゃなくて！
はっきりさせるためには、確かに全ての単語を理解した方がいいのかもしれない。
しかし、私には時間がないのだよ、諸君。
とりあえず、このまま続きを読もう。クラスまたはレコードは参照型です。 型のオブジェクトが作成されると、オブジェクトが割り当てられている変数にはそのメモリへの参照だけが設定されます。 オブジェクト参照が新しい変数に割り当てられると、新しい変数は元のオブジェクトを参照します。 いずれの変数も同じデータを参照しているため、1 つの変数に加えられた変更は他の変数にも反映されます。
(C# 公式リファレンスより)レコードってんのは聞いたことも見たこともない全く分からないものので、そこは飛ばす。
今回はっきりさせるのは認識があやふやな部分だ。
使う機会がある時に回そう。なぜだろう、ほとんどが知っている単語のはずなのに、全く頭に入ってこない。
__init__.pyの書き方を思い出すなぁ...一般に、クラスは、より複雑な動作、つまりクラス オブジェクトの作成後に変更されることを意図されたデータをモデル化するために使用されます。 構造体は、主として構造体の作成後に変更されることを意図しないデータを含む、小規模なデータ構造に最適です。
(C# 公式リファレンスより)ああああああ！もう！やめてくれ！！！！！！！やはり手っ取り早いのはプログラムの例をみることだろう。コメントから早速分かったことがある。まず、&lt;アクセス修飾子&gt; class &lt;クラス名&gt; { }の{ }内に書かれるものは、
そのクラスのメンバーだ。
そして&lt;アクセス修飾子&gt; &lt;型&gt; &lt;名前&gt; { get; set; }はプロパティと言い、
関数だと思っていたものはメソッドと言うらしい。
この認識は間違っていなかった。(メンバーという単語は知らなかったが)そして、少し衝撃を受けた。まじか
今まで&lt;型&gt; &lt;変数名&gt; = new &lt;型&gt;();のことを
インスタンスの作成だと思っていた。
正しくはオブジェクトの作成らしい。と思ったのだが、
上を見てみると、CustomClass のインスタンス (オブジェクト) が作成されなんやねん。既知(であると思っている)だったので挙げなかったが
全ての型はobjectクラス(object型)が基本クラスであるというのがある。
そのオブジェクトから来ているっぽそうだ。&lt;型&gt; &lt;変数名&gt; = new &lt;型&gt;();のことをインスタンスの作成と言うことについて
認識は正しかったようだ。さらに例から下にスクロールし、リファレンスを読み続けると、
私のあやふやな認識の答えが、初めて見た分からない単語とともに書いてあった。早速並べていきたいところだが、一度戻ろうではないか、
アクセス修飾子についていろいろ分かりそうになったものの、一旦、ざっとクラスのリファレンスを読んでみたが、
アクセス修飾子を理解しようとしてぶつかった壁、
問題のアセンブリという単語は１つも出てこなかったのである。アセンブリごときも知らねぇお前にC#をやる資格はねぇっていうほど基本中の基本なのかな？そんな基本ならば入門書にあるんじゃないかと思って、買ってあった本を読んでみた。なんと索引にアセンブリ名という単語があったものの。
やはり入門書はダメだ。私の知識を潤すには、あまりにも水が入っていなかった。
それどころかスポンジか？私の知識を乾かしていく。意味わかんないことを言い出したので、インターネットに逃げる。c# アセンブリとは　検索なんと一番上にヒットしたのはqiitaの記事であった...のだが
残念ながら私の求める答えではなかった。そしてまたヒットした、公式リファレンスアセンブリは、.NET ベースのアプリケーションの配置、バージョン管理、再利用、アクティベーション スコープ、およびセキュリティ権限の基本単位です。 アセンブリは、相互に連携して 1 つの論理的な機能単位を形成するように構築された型やリソースの集合です。 アセンブリは、実行可能 ( .exe) ファイルまたはダイナミック リンク ライブラリ ( .dll) ファイルの形を取る、.NET アプリケーションの構成要素です。 それらは、型の実装に関して必要な情報を共通言語ランタイムに提供します。期待を裏切らないですね。全く分かんねぇ。だが、適当にリファレンスをスクロールして、はっと気づいた。
TerrariaのModのプロジェクトを再度開く。
そして、依存関係を展開してみた。ビンゴだ。そこにはアセンブリがあり、さらに展開するとTerrariaがあった。
全て腑に落ちた。多分。だがしかし、納得した、でやめてはいけない。
本当に理解したのなら、自分の言葉で説明できるはずだ。
実践しよう。アセンブリとは.exeファイルとか.dllファイルのこと～おい、これじゃあさっきチラ見したQiitaの記事と変わんねぇじゃねぇか
確かに簡潔にまとめることは必要だが、
これは備忘録だ！
一回これで納得していないんだから
自分が納得できる言葉を選べよ！！！
後、Qiita的にも！！言いなおしますアセンブリとはコンパイルされてできた、アプリケーション(.exeファイル)や、Dynamic Link Library(.dllファイル)のことを指す
少なくともコードのことではないうん？あんまり変わってなくね？
...まぁ、これが正しいのならアクセス修飾子の説明が分かるはずだ。読んでみる。おぉ！読める読める読めるぞぉ！！分かったのはいいのだが、あまりにも、蛇足が多すぎて
記事がこんな長くなってしまったぞ...次回の記事の最初にまとめるとして、
私は早速だが
動的とか静的とか、プロパティとかメソッドとか、そういうのをはっきりさせたいだけ (2/?)を書き始めるぞ書き次第投稿するぜ！じゃぁな！


