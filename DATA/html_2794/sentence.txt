More than 1 year has passed since last update..NET Core環境におけるC#の定数畳み込みってば、相当簡単なことしか出来ないと思ってたら、それはILの話で、Native Codeまで話を落とすと結構積極的に定数畳み込みを実行していた。ついでに言うなら、変数であっても条件が合えば畳み込まれるみたいで、いつも通り沼にハマった🕵️‍♂️C#の定数畳み込みはconstの右辺に記載可能な単純な四則演算位しか対応してないと認識していた。C#というか、C#からILへコンパイルされる段階ではそれは正しい認識だったけど、最近 C#の重箱の隅をつつく　～引数の位置で処理効率がビミョーに変わる～とか、ValueTupleとローカル関数とか最近調べていく中でx64アセンブリと戯れる機会が増えた。で、ILの先のNative Codeに実行時コンパイルされていくなかで、結構積極的に定数の畳み込みしてる雰囲気があったので、適当に調べてみようかなって。C#をコンパイルするとILになるわけだけど、この段階で出来る定数畳み込みってばかなり限定的で、しっかり調べた訳ではないけど、const int add=42+114514みたいに、定数の右辺に記載が出来る程度のコトしか出来ない。なので、数学的には一意に決まるけど、const Angle=Math.Atan2(10,10)みたいなコトは残念ながら書けない。最初、引数が定数ならその部分がたたみ込まれるかなと思って、以下のようなコードを書いてばらしてみた。でこいつをdisassembleした結果のうち、FoldingSampleの部分がこんな感じになった。dasmの結果を眺めてみると00007FFBE38F1566～00007FFBE38F1578の部分で、xmm0とxmm1にリテラル42.0をコピーして、Atan2を実行しておりその結果はxmm0に入っている。1で、続く加算処理はループを指定回数回しちゃいるけど、加算する値は計算済みのxmm0を使い回している。このことから、Math.Atan2(42, 42)の部分がたたみ込まれていることがわかる。どこら辺まで複雑にしてもイケるのか気になったので、たたみ込まれているところに意地悪して、以下のように書いてみた。ループ内に、複数のExprがあってしかも、Exprが多少複雑になってる。でこいつはイケるかな?とおもってdisassembleしてみたらこんな感じのdasmをえた。そいでこいつを眺めてみると00007FFBF18F1579～00007FFBF18F15B0がMath.Sin(a) * Math.Cos(b) + Math.Cos(b) * Math.Sin(a)の畳み込みを行い結果をxmm9に突っ込んでる。で続く00007FFBF18F15B5～00007FFBF18F15E9でMath.Cos(a) * Math.Cos(b) - Math.Sin(a) * Math.Sin(b)の畳み込みを行い、結果をxmm0につっこんでいる。でループの内方ではこのxmm9とxmm0を指定回数xmm6に加算して結果を返してる。このことから、ボチボチ複雑な定数計算も畳み込んでくれるんじゃないかなと推測できる。実はここまでの結論で割と満足しちゃって、じゃあ、畳み込まれた場合と畳み込まれてない場合でどれくらい差が出るかなんてことやってまとめようと思って以下のようなコードを書いた上でBenchmarkDotnetで実行した。書いたコードの企図としては、定数使う方は定数畳み込みが行われて、変数使う方は変数だけに定数畳み込みが行われず、計算の実行スピードが大きく違いました。メデタシ メデタシで終わるつもりだった。。。そしたら実行結果がこんなことになって、どーも変数使っても畳み込まれてるかんじがして、いつも通り沼にハマってしまった😱ベンチマークの結果見ただけでほぼ確定だけど、ダメ押しでさっきのCalc.UseField()をdisassembleしてみることにした。そしたら、さっきの定数使った方と同じように、ループの外方にMath.Atan2(Field, Field)を括りだして、それをループの内方で加算してる。このことから、使ってる変数が変更されるか否かと言うフロー解析をRyu JITはちゃんとやっているという、割ととんでもない結論が出てきた。2実際これ見たとき、まじか～～～🤐🤐と言う独り言が口をついた本末転倒だけど、じゃあ畳み込まれない為にゃどーすりゃ良いか考えた。で、結果わりかし簡単に変数が変更されるシナリオこさえりゃ良いじゃ無いかと言うことで、さっきのベンチマークにこんなベンチマークを追加して実行してみた結果が以下。ということで、意図通り、UseFieldChangeで定数畳み込みが外れた結果を得ることが出来た。いつも通り、軽い気持ちで調べてみたら沼にハマったというお約束な展開だった。検証を追えてみての感想は、ILまでだとたいした畳み込みはしないけど、JITステージでかなり積極的に畳み込んでるな～～と思った。また、変数使えば流石にそこを畳み込むようなことはしないだろうと思ったら畳み込む結果になっており、これには相当驚いた。で、今回の積み残しは、さっきのUseFieldNoChangeとUseFieldChangeは同じCalc.UseFieldを呼び出してるけど、Native codeはまるっきし変わることになる。なので、この辺のNativeコンパイル済みのコードを使い回すのか新たにコンパイルし直すのかのJITの戦略がどうなっているのかは気になった。364bitWindowsのABIによれば、doubleの返却値はxmm0に突っ込まれてる。 ↩とはいえJITは結局のトコロ、実行時のコストなのでそこまで詳細な解析はしてないと思う。 ↩先にも言ったとおり、あくまで実行時のコストに直結するのでやり過ぎるとろくなことにならない ↩


