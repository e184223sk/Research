ドラッグアンドドロップはPCを使っていれば当たり前の機能ですが、デスクトップアプリで実装しようと思うと結構な手間です。
マイクロソフトのドキュメントでWPFでのドラッグ アンド ドロップの概要を見ると、ドラッグアンドドロップの説明があり仕組みを学べます。この記事では、自分が勉強した復習をかねて、ReactivePropertyとgong-wpf-dragdropを利用した実装を書かせていただきます。(追記)2021/8/12　gong-wpf-dragdrop利用した実装例として、リスト同士のデータの入れ替え、リスト内でのデータの入れ替えを作成しました。
記事の内容を工夫することでこんな感じのカレンダーっぽいスケジュール登録画面が作れるようになります。
環境
Visual Studio 2019
Prism8.1.97 (*記事作成時に使用した環境で今回の記事に関係するところはあまりありません)
ReactiveProperty7.11.0
gong-wpf-dragdrop2.3.2まずはNuGetでReactivePropertyをインストール
ここで大切なのは、ReactiveProperty.WPFを入れておくことです
ViewModelで以下の参照を行いますドロップ先となるコントロールで AllowDrop="True" とします。
ここではBorderをドロップ先として使用します。
ついでにBoder.Styleを設定してDragEnterしたら色が変わるようにしています。
そして、i:Interaction.TriggersでDropイベントを購読して、EventToReactiveCommandでCommandに渡します。
ドロップしたら、TextBlockにその内容が表示されるようにします。Viewのxaml内にあるFileDropCommandとDropFileをコーディングします。
FileDropCommandでDragEventArgsを引数として、これを利用して、ドロップファイルのファイルパスを取得、DropFileに渡して、Viewに表示させています。GetDataPresent メソッドを使用して、ドラッグされたデータがファイルかどうかを確認し、GetData メソッドを使用して、それを抽出します。実行するとこんな感じです
さて、ここまでは外部のファイルをアプリにDrag&amp;Dropする方法でしたが、次は、アプリ内でのDrag&amp;Dropを実装していきたいと思います。最初に紹介したマイクロソフトのドキュメントを活用して実装していくのはかなり手間なので、NuGetからgong-wpf-dragdropを参照します。gong-wpf-dragdropの製作者はMahAppのリポジトリにアクセスできる人でとても信用できると思っています。
gong-wpf-dragdropのコードを見ると、Drag&amp;Dropの動作の勉強になります。さらに、これを利用した実装例がShowcaseとして示されているので、これを参考に実装をしていきたいと思います。ソース側のListBoxでdd:DragDrop.IsDragSource="True"をセット、ターゲット側のListBoxでdd:DragDrop.IsDropTarget="True"とします。
dd:DragDrop.UseDefaultDragAdorner="True"を使うと、Adornerを使って、Dragしているデータを表示させることができます。さきほどのViewに以下のxamlを追加しています
参照追加xamlSampleデータ用のクラスを作成
このデータクラス内でコレクションを記載しています。
あとで、TextBoxとのDrag&amp;Dropを実装する際に利用できるようにするためです。ViewModel内でSamleDataの初期値を入れておきます実行するとこんな感じです
ListBox同士の場合は、コーディングはあまりないのですが、異なるコントロールとなった場合、少々コーディングが必要となります。
gong-wpf-dragdropのShowCaseのコードを見ていくことで、実装方法を参考することができます。ターゲット側にIDropTargetを実装させたDropHandlerを作成します。
Dropメソッドで元となったリストから項目を削除させることでMoveとして実装させています。削除しなければCopyとなります。DropTargetHighlightAdorner は、ドロップ時にTextBoxの表示が変化するためのクラスです。これはShowCaceのコードを使用しています。そして、さきほどのSampleDataにこのDropHandlerを追記しますさきほどのTextBoxCustomDropHandlerをTextBoxのdd:DragDrop.DropHandlerに設定します実行するとこんな感じです
gong-wpf-dragdropのデフォルトでの動作は、ListBoxに対しListBoxItemの移動もしくは追加のようです。
ただ、実際にアプリ開発をしようと思うと、ListBoxItemの位置は変更せずにしたいとか、追加や移動ではなくデータの入れ替えを行いたい場合があります。
この場合、どのようにできるのか、記事を書いた後、いろいろと試して一つの実装例ができたので、記事の追記をさせていただきます。どんな動作となるか、先に実行した結果をみてください
ポイントは、DragDrop.DropHandlerです。ここにIDropTargetを実装したクラスを指定することで、Drop時の動作を自作することができます。今回は、GridにIDropTargetを実装されたGridCustomDropHandlerを作成して動作を実現させています。
同じListBox内では、１列目の行番号は変化していないと思います。ID列とText列のみが入れ替わっていると思います。
また、別のListBoxからデータがきたときにも対応しています。
あとAdornerをデフォルトではなくTemplateを変更して実装する方法も記載していますSampleData2用のデータクラス初期データGridCustomDropHandler以上ですが、ご参考にしていただければ幸いです。


