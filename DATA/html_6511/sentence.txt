More than 3 years have passed since last update.　時にコントロールをアニメーションさせたくなることがあります。と言っても、そんな派手なものは必要ありません。たとえばエレベーターの中で現在の階を見てしまう時を思い出してください。ほんの少しの待ち時間がある時、それを短く感じさせ、ユーザーのストレスを軽減するのにアニメーションは効果的です。また、フェードインを使えば描画の際のちらつきを無くすこともできます。
　コントロールをアニメーションさせるのは簡単です。時間を置いて少しずつプロパティを変化させればいいのです。しかし、ユーザーそれぞれの環境で処理速度の違いがありますから、適当にループしたのでは速すぎたり遅すぎたりします。
　そこでタイマーを使います。一定時間毎にプロパティを変化させればどの環境でもだいたい同じように見えるはずです。この処理をサポートさせるために作ったのが、次に挙げる Animator クラスです。　Animator の使い方は簡単です。例えば Form を一つ作り、そのコンストラクタと Load イベントハンドラを次のように書き換えてみてください。これでフェードインする Form の完成です。簡単でしょ？　まずコンストラクタで Opacity を 0 にしています。Opacity というのは、Form の透明度を取得・設定するプロパティです。これを 0 にすると完全に透明になり、1 にすると完全に不透明になります。そして Load イベントハンドラで Animator.Animate() メソッドを呼びます。
　第一引数の 150 はアニメーションの持続時間です。単位はミリ秒ですので、150 ミリ秒かけてフェードインせよという意味になります。
　第二引数はラムダ式でコールバックを指定しています。コールバックの引数 frame は、コールバックが呼ばれた回数を示します。これが 0 の時、コールバックは初めて呼ばれました。1 の時は 2 回目、2 の時は 3 回目というふうに、ゼロベースの数字がコールバックに渡されます。frequency は呼ばれる回数を表しますが、例えば 10 回呼ばれる時には 9 になります。なぜこんなややこしい仕様になっているかというと、frame / frequency が 0 から 1 までの値を取るようにするためです。
　if (!Visible || IsDisposed) return false; は、アニメーション中にフォームが閉じられた時、アニメーションを中止せよとの命令です。コールバックは、続行するときには true を返し、キャンセルするときには false を返してください。
　次の Opacity = (double)frame / frequency; で Opacity の値が最初は 0 に、最後は 1 になります。　コントロールには、Region というプロパティがあります。このプロパティを変更すると、コントロールを好きな形にすることができます。上記コードは、コンストラクタで Region を無にし、Load で 300 ミリ秒かけて円形のフォームを次第に大きくしていき、最後に Region = null で通常の形に戻しています。
　Form に限らずコントロールには Region プロパティがあり、これを使えば、星形だろうが渦巻だろうが名前を言ってはいけないあのネズミだろうが、好きな形のコントロールを作ることができます。
　あまり時間をとったり派手な動きをしたりするアニメーションはかえってユーザーのストレスを増大させることになりますので、ほどほどにしなければなりません(Windows のメニューに動きが追加された時の気持ちを思い出してください)が、効果的な場面でのほんの少しのアニメーションは使いどころがありますので、どうぞ使ってみてください。


