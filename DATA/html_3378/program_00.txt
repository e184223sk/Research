
using System;
using System.Reactive.Disposables

    public class Foo : IDisposable
    {
        private CompositeDisposable Disposable { get; } = new CompositeDisposable();

        ~Foo ()
        {
            Dispose(false);
        }

        public void Dispose()
        {
            Dispose(true);
            // GC.SuppressFinalize(this); if overrided "virtual void Dispose(bool disposing)"
        }

        protected virtual void Dispose(bool disposing)
        {
            if (disposing)
            {
                // managed?.Free();
                // managed = null;
                Disposable.Dispose();
            }
            // unmanaged?.Free();
            // unmanaged = null;
        }

        public Foo ()
        {
            // Disposable.Add(DisposableInstances);
            // rxprop = model.ToReactivePropertyAsSynchronized(m=&gt;m.Value).AddTo(Disposable);
            // rxprop = model.ObserveProperty(m=&gt;m.Value).ToReactiveProperty().AddTo(Disposable);
        }
    }

