More than 1 year has passed since last update.何度か同じ内容で検索している気がしたので、備忘録として残すことにしました。
バリデーションエラーの処理を追加する際は、ボタンのアクティブ状態についても実装することが多いのであわせて残しておきます。ValidationDemo左が初期状態。ボタンは非アクティブ状態。
真ん中がエラーとなる文字列を入力した場合。
右がエラーなしの状態。ボタンはアクティブ状態。
今回はWPFで実装しました。
IntValidationAttribute, DoubleValidationAttributeは、自作のバリデーション属性クラスです。
自作のバリデーション属性のクラス名はHogeValidationAttributeという規則で作成しましたが、実際に属性として使用する際にはAttributeは省略できるようですね。少し話が逸れますが、ここではエラーテキストの表示等にLabelを使用しています。
気になる方は適宜TextBlockに置き換えてください。一般的に、ユーザー インターフェイス (UI) で短い文を使用するなど限定的なテキストのサポートが必要な場合は、TextBlock 要素を使用するべきです。 最小限のテキスト サポートが必要な場合には、Label を使用します。
パフォーマンスの最適化:テキストMVVM をリアクティブプログラミングで快適に ReactiveProperty オーバービュー 2020 年版 前編
【C#】ReactiveProperty全然分からねぇ！って人向けのFAQ集【修正済】
Xamarin.FormsでReactivePropertyとDataAnnotationsを使ってバリデーションを行うサンプル（独自の検証ルールも作ってみる）


