
using Microsoft.Win32

    public class ContextMenuExtension : IShellExtInit, IContextMenu
    {
        private const string Description = "ContextMenuExtention Class";
        private const string TargetFileType = "*";

        [ComRegisterFunction()]
        public static void Register(Type t)
        {
            try
            {
                Guid clsid = t.GUID;
                if (clsid == Guid.Empty)
                {
                    throw new ArgumentException("clsid must not be empty");
                }
                string keyName = string.Format("{0}\\shellex\\ContextMenuHandlers\\{1}", TargetFileType, clsid.ToString("B"));
                using (RegistryKey key = Registry.ClassesRoot.CreateSubKey(keyName))
                {
                    if (key != null &amp;&amp; !string.IsNullOrEmpty(Description))
                    {
                        key.SetValue(null, Description);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                throw;
            }
        }

        [ComUnregisterFunction()]
        public static void Unregister(Type t)
        {
            try
            {
                Guid clsid = t.GUID;
                if (clsid == Guid.Empty)
                {
                    throw new ArgumentException("clsid must not be empty");
                }
                string keyName = string.Format("{0}\\shellex\\ContextMenuHandlers\\{1}", TargetFileType, clsid.ToString("B"));
                Registry.ClassesRoot.DeleteSubKeyTree(keyName, false);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                throw;
            }
        }

