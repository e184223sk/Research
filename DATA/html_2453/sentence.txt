More than 1 year has passed since last update.入れ子集合モデルから木構造を作るのプログラムを書いてるときに、思ったとおりに動かなくて困ったので、そのメモ。型を、List&lt;T&gt;にするかIList&lt;T&gt;にするかで挙動がガラッと変わる話です。いろんなメソッドをまたいで、リストの要素を順番に使う必要があった。
→そうだ、IEnumeratorを渡せばいいじゃん！
（インタフェースは参照型なので、メソッド呼び出し先での変更が呼び出し元に反映される）
→呼び出し先で値を消費しても、呼び出し元で反映されない…実行する。速度のため、ですね？
IEnumerable&lt;T&gt;のGetEnumeratorはIEnumeratorを返すけど、List&lt;T&gt;とかStack&lt;T&gt;とかは、独自のEnumerator（構造体）を返すようになっていた。同じ関数名だから引っかかった…これで、返ってくる型がIEnumerator&lt;T&gt;だと思い込んでた失敗でもある。すなわち、先にList&lt;T&gt;をIEnumerable&lt;T&gt;に変換しておくとか、構造体のEnumeratorをIEnumerator&lt;T&gt;の変数で受けるとかすれば、ボクシングされてうまくいく。
入れ子集合モデルから木構造を作るでは、前者の方法、仮引数でList&lt;T&gt;じゃなくてIEnumerable&lt;T&gt;を受け取るようにした。実際に欲しい機能は、IEnumerable&lt;T&gt;インタフェースだからね。今回はIEnumerable&lt;T&gt;にすることで解決したんだけど、インタフェースであればいいので、IEnumerable&lt;T&gt;じゃなくてIList&lt;T&gt;にしてもちゃんと思った通りに動く。
List&lt;T&gt;にするかIList&lt;T&gt;にするかで変わっちゃうのは、なかなかですね…


