
public ApplyedMotion[] GetMotion() {
    var tmp = new ApplyedMotion[motionList.Length];
    var nowFrame = NowFrame;

    for(int i = 0;i &lt; tmp.Length; i++) {
        tmp[i] = new ApplyedMotion();
        var nowList = motionList[i].MotionList;

        //このボーンのモーションがない場合
        if(nowList.Count == 0) continue;
        int startFrm = motionList[i].StartFrame;
        int endFrm = motionList[i].EndFrame;

        //最後のモーションが終わっている場合
        if(endFrm &lt;= nowFrame) {
            var nowAt = nowList.Last();
            tmp[i].Rotate = nowAt.Rotate;
            tmp[i].Translate = nowAt.Translate;
        //最初のモーションが始まっていない場合
        } else if(nowFrame &lt; startFrm) {
            int nowIdx = 0;
            var t = (nowFrame) / (nowList[nowIdx].FrameCount);
            tmp[i].Translate = Vector3.Lerp(Vector3.Zero, nowList[nowIdx].Translate, t);
            tmp[i].Rotate = Quaternion.Lerp(Quaternion.Identity, nowList[nowIdx].Rotate, t);
        } else {
            int nowIdx = 0;
            while(nowList[nowIdx].FrameCount &lt;= nowFrame) nowIdx++;
            if(nowIdx &gt; 0) nowIdx--;
            var t = (nowFrame - nowList[nowIdx].FrameCount) / (nowList[nowIdx + 1].FrameCount - nowList[nowIdx].FrameCount);
            tmp[i].Translate = Vector3.Lerp(nowList[nowIdx].Translate, nowList[nowIdx + 1].Translate, t);
            tmp[i].Rotate = Quaternion.Lerp(nowList[nowIdx].Rotate, nowList[nowIdx + 1].Rotate, t);
        }
    }

    return tmp;
}

public class ApplyedMotion {
    public Quaternion Rotate;
    public Vector3 Translate;
}

