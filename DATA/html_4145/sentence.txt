More than 1 year has passed since last update.UIGestureRecognizer とその継承クラスはなんらかのビューにジェスチャを付けたいときに使います。たとえば UIView がタップされたことを検知したいなら次のようになるでしょう。おめでとうございます。これであなたは解放されない ViewController を手に入れました。
サンプルはこちらです。https://github.com/ailen0ada/XamarinAdvent18Sample
色の名前をタップすると全面に色を表示する画面に遷移し，タップすると透明度が変化するようになっています。行をタップしたときに GC.Collect を走らせているので，きちんと解放されればファイナライザが呼ばれてデバッグコンソールに出力が行われるはずです。解放されれば。Action を渡すコンストラクタの内部で，別のクラスが作られてにここで渡した Action が抱え込まれるからです。おおよそ次のようなコードに展開されます。ネイティブ側の UIGestureRecognizer が要求するのはセレクタと，そのセレクタを受け取るターゲットのポインタです。いろいろXamarin側でコンストラクタを定義していますが最終的にはそこに行き着きます。詳しくは拙著 Xamarin Myth Busters をどうぞ。プッシュ遷移の際には，必ず DidMoveToParentViewController を通ることになっているので，これを使います。これで ViewController については解放されます。次のように書き換えて，ネイティブ呼び出しに近い形にしてしまいましょう。これでターゲットである UIViewController のポインタと，セレクタが渡されるだけになったので参照が弱くなりました。Xamarin.iOS 12.2.1.12 の時点ではまだ実装が入っていませんが，きちんと UIGestureRecognizer.Dispose() を呼べば抱えているものをすべて解放する実装がそのうち入ります。
https://github.com/xamarin/xamarin-macios/issues/4190マージされた箇所を見ると，どこにアタッチされたかを保持しておいて全部解除していくという動きをしています。Aパターンとやることは同じで方向が逆ということですね。


