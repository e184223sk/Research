using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UniRx;
using UnityEngine;
using UnityEngine.Networking;

#if !UniRxLibrary
using ObservableUnity = UniRx.Observable;
#endif

namespace UniRx.WebRequest
{
    public static class ObservableWebRequest
    {
        public static IObservable&lt;UnityWebRequest&gt; ToRequestObservable(this UnityWebRequest request, IProgress&lt;float&gt; progress = null)
        {
            return ObservableUnity.FromCoroutine&lt;UnityWebRequest&gt;((observer, cancellation) =&gt; Fetch(request, null, observer, progress, cancellation));
        }

        public static IObservable&lt;string&gt; ToObservable(this UnityWebRequest request, IProgress&lt;float&gt; progress = null)
        {
            return ObservableUnity.FromCoroutine&lt;string&gt;((observer, cancellation) =&gt; FetchText(request, null, observer, progress, cancellation));
        }

        public static IObservable&lt;byte[]&gt; ToBytesObservable(this UnityWebRequest request, IProgress&lt;float&gt; progress = null)
        {
            return ObservableUnity.FromCoroutine&lt;byte[]&gt;((observer, cancellation) =&gt; Fetch(request, null, observer, progress, cancellation));
        }

        public static IObservable&lt;string&gt; Get(string url, IDictionary&lt;string,string&gt; headers = null, IProgress&lt;float&gt; progress = null)
        {
            return
                ObservableUnity.FromCoroutine&lt;string&gt;(
                    (observer, cancellation) =&gt;
                        FetchText(UnityWebRequest.Get(url), headers, observer, progress, cancellation));
        }

        public static IObservable&lt;byte[]&gt; GetAndGetBytes(string url, IDictionary&lt;string, string&gt; headers = null, IProgress&lt;float&gt; progress = null)
        {
            return ObservableUnity.FromCoroutine&lt;byte[]&gt;((observer, cancellation) =&gt; FetchBytes(UnityWebRequest.Get(url),headers, observer, progress, cancellation));
        }
        public static IObservable&lt;UnityWebRequest&gt; GetRequest(string url, IDictionary&lt;string, string&gt; headers = null, IProgress&lt;float&gt; progress = null)
        {
            return ObservableUnity.FromCoroutine&lt;UnityWebRequest&gt;((observer, cancellation) =&gt; Fetch(UnityWebRequest.Get(url), headers, observer, progress, cancellation));
        }

        public static IObservable&lt;string&gt; Post(string url, Dictionary&lt;string, string&gt; postData,
            IDictionary&lt;string, string&gt; headers = null, IProgress&lt;float&gt; progress = null)
        {
            return ObservableUnity.FromCoroutine&lt;string&gt;((observer, cancellation) =&gt; FetchText(UnityWebRequest.Post(url, postData), headers, observer, progress, cancellation)); 

        }

        public static IObservable&lt;byte[]&gt; PostAndGetBytes(string url, Dictionary&lt;string, string&gt; postData, IProgress&lt;float&gt; progress = null)
        {
            return ObservableUnity.FromCoroutine&lt;byte[]&gt;((observer, cancellation) =&gt; FetchBytes(UnityWebRequest.Post(url, postData),null, observer, progress, cancellation));
        }

        public static IObservable&lt;byte[]&gt; PostAndGetBytes(string url, Dictionary&lt;string, string&gt; postData, IDictionary&lt;string, string&gt; headers, IProgress&lt;float&gt; progress = null)
        {
            return ObservableUnity.FromCoroutine&lt;byte[]&gt;((observer, cancellation) =&gt; FetchBytes(UnityWebRequest.Post(url, postData),headers, observer, progress, cancellation));
        }

        public static IObservable&lt;UnityWebRequest&gt; PostRequest(string url, Dictionary&lt;string, string&gt; postData, IProgress&lt;float&gt; progress = null)
        {
            return ObservableUnity.FromCoroutine&lt;UnityWebRequest&gt;((observer, cancellation) =&gt; Fetch(UnityWebRequest.Post(url, postData), null, observer, progress, cancellation));
        }

        public static IObservable&lt;UnityWebRequest&gt; PostRequest(string url, Dictionary&lt;string, string&gt; postData, IDictionary&lt;string, string&gt; headers , IProgress&lt;float&gt; progress = null)
        {
            return ObservableUnity.FromCoroutine&lt;UnityWebRequest&gt;((observer, cancellation) =&gt; Fetch(UnityWebRequest.Post(url, postData), headers, observer, progress, cancellation));
        }


        public static IObservable&lt;AssetBundle&gt; LoadFromCacheOrDownload(string url, uint version, uint crc, IProgress&lt;float&gt; progress = null)
        {
            return ObservableUnity.FromCoroutine&lt;AssetBundle&gt;((observer, cancellation) =&gt; FetchAssetBundle(UnityWebRequest.GetAssetBundle(url, version, crc),null, observer, progress, cancellation));
        }


        static IEnumerator Fetch&lt;T&gt;(UnityWebRequest request, IDictionary&lt;string, string&gt; headers, IObserver&lt;T&gt; observer,
            IProgress&lt;float&gt; reportProgress, CancellationToken cancel)
        {

            if (headers != null)
            {
                foreach (var header in headers)
                {
                    request.SetRequestHeader(header.Key, header.Value);
                }

            }

            if (reportProgress != null)
            {
                var operation = request.Send();
                while (!operation.isDone &amp;&amp; !cancel.IsCancellationRequested)
                {
                    try
                    {
                        reportProgress.Report(operation.progress);
                    }
                    catch (Exception ex)
                    {
                        observer.OnError(ex);
                        yield break;
                    }
                    yield return null;
                }
            }
            else
            {
                yield return request.Send();
            }



            if (cancel.IsCancellationRequested)
            {
                yield break;
            }

            if (reportProgress != null)
            {
                try
                {
                    reportProgress.Report(request.downloadProgress);
                }
                catch (Exception ex)
                {
                    observer.OnError(ex);
                    yield break;
                }
            }
        }







        static IEnumerator FetchRequest(UnityWebRequest request, IDictionary&lt;string, string&gt; headers, IObserver&lt;UnityWebRequest&gt; observer,
            IProgress&lt;float&gt; reportProgress, CancellationToken cancel)
        {
            using (request)
            {


                yield return Fetch(request, headers, observer, reportProgress, cancel);

                if (cancel.IsCancellationRequested)
                {
                    yield break;
                }

                if (!string.IsNullOrEmpty(request.error))
                {
                    observer.OnError(new UnityWebRequestErrorException(request));
                }
                else
                {
                    observer.OnNext(request);
                    observer.OnCompleted();
                }
            }
        }

        static IEnumerator FetchText(UnityWebRequest request, IDictionary&lt;string, string&gt; headers, IObserver&lt;string&gt; observer,
    IProgress&lt;float&gt; reportProgress, CancellationToken cancel)
        {
            using (request)
            {
                yield return Fetch(request, headers, observer, reportProgress, cancel);

                if (cancel.IsCancellationRequested)
                {
                    yield break;
                }

                if (!string.IsNullOrEmpty(request.error))
                {
                    observer.OnError(new UnityWebRequestErrorException(request));
                }
                else
                {
                    var text = System.Text.Encoding.UTF8.GetString(request.downloadHandler.data);
                    observer.OnNext(text);
                    observer.OnCompleted();
                }
            }
        }

        static IEnumerator FetchAssetBundle(UnityWebRequest request, IDictionary&lt;string, string&gt; headers, IObserver&lt;AssetBundle&gt; observer,
    IProgress&lt;float&gt; reportProgress, CancellationToken cancel)
        {
            using (request)
            {
                yield return Fetch(request, headers, observer, reportProgress, cancel);

                if (cancel.IsCancellationRequested)
                {
                    yield break;
                }

                if (!string.IsNullOrEmpty(request.error))
                {
                    observer.OnError(new UnityWebRequestErrorException(request));
                }
                else
                {
                    var handler = request.downloadHandler as DownloadHandlerAssetBundle;
                    var assetBundle = (handler != null) ? handler.assetBundle : null;

                    observer.OnNext(assetBundle);
                    observer.OnCompleted();
                }
            }
        }

        static IEnumerator FetchBytes(UnityWebRequest request, IDictionary&lt;string, string&gt; headers, IObserver&lt;byte[]&gt; observer,
    IProgress&lt;float&gt; reportProgress, CancellationToken cancel)
        {
            using (request)
            {
                yield return Fetch(request, headers, observer, reportProgress, cancel);

                if (cancel.IsCancellationRequested)
                {
                    yield break;
                }

                if (!string.IsNullOrEmpty(request.error))
                {
                    observer.OnError(new UnityWebRequestErrorException(request));
                }
                else
                {
                    observer.OnNext(request.downloadHandler.data);
                    observer.OnCompleted();
                }
            }
        }




    }

    public class UnityWebRequestErrorException : Exception
    {
        public string RawErrorMessage { get; private set; }
        public bool HasResponse { get; private set; }
        public string Text { get; private set; }
        public System.Net.HttpStatusCode StatusCode { get; private set; }
        public System.Collections.Generic.Dictionary&lt;string, string&gt; ResponseHeaders { get; private set; }
        public UnityWebRequest Request { get; private set; }

        // cache the text because if www was disposed, can't access it.
        public UnityWebRequestErrorException(UnityWebRequest request)
        {
            this.Request = request;
            this.RawErrorMessage = request.error;
            this.ResponseHeaders = request.GetResponseHeaders();
            this.HasResponse = false;

            StatusCode = (System.Net.HttpStatusCode)request.responseCode;


            if (request.downloadHandler != null)
            {
                Text = request.downloadHandler.text;
            }

            if (request.responseCode != 0)
            {
                this.HasResponse = true;
            }
        }

        public override string ToString()
        {
            var text = this.Text;
            if (string.IsNullOrEmpty(text))
            {
                return RawErrorMessage;
            }
            else
            {
                return RawErrorMessage + " " + text;
            }
        }
    }
}


