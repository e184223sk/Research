

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UniRx.WebRequest;
using UnityEngine;
using UniRx;
using UnityEngine.Networking;

namespace Assets.Editor
{
    class UnityWebRequestSample: MonoBehaviour
    {

        void Start()
        {
            // Basic: Download from google.
            {
                ObservableWebRequest.Get("http://example.com/")
                    .Subscribe(
                        x =&gt; Debug.Log(x.Substring(0, 100)), // onSuccess
                        ex =&gt; Debug.LogException(ex)); // onError
            }

            // Linear Pattern with LINQ Query Expressions
            // download after google, start bing download
            {
                var query = from google in ObservableWebRequest.Get("http://google.com/")
                            from bing in ObservableWebRequest.Get("http://bing.com/")
                            select new { google, bing };

                var cancel = query.Subscribe(x =&gt; Debug.Log(x.google.Substring(0, 100) + ":" + x.bing.Substring(0, 100)));

                // Call Dispose is cancel downloading.
                cancel.Dispose();
            }

            // Observable.WhenAll is for parallel asynchronous operation
            // (It's like Observable.Zip but specialized for single async operations like Task.WhenAll of .NET 4)
            {
                var parallel = Observable.WhenAll(
                    ObservableWebRequest.Get("http://google.com/"),
                    ObservableWebRequest.Get("http://bing.com/"),
                    ObservableWebRequest.Get("http://unity3d.com/"));

                parallel.Subscribe(xs =&gt;
                {
                    Debug.Log(xs[0].Substring(0, 100)); // google
                    Debug.Log(xs[1].Substring(0, 100)); // bing
                    Debug.Log(xs[2].Substring(0, 100)); // unity
                });
            }

            // with Progress
            {
                // notifier for progress
                var progressNotifier = new ScheduledNotifier&lt;float&gt;();
                progressNotifier.Subscribe(x =&gt; Debug.Log(x)); // write www.progress

                // pass notifier to WWW.Get/Post
                ObservableWebRequest.Get("http://google.com/", progress: progressNotifier).Subscribe();
            }

            // with Error
            {
                // If WWW has .error, ObservableWWW throws WWWErrorException to onError pipeline.
                // WWWErrorException has RawErrorMessage, HasResponse, StatusCode, ResponseHeaders
                ObservableWebRequest.Get("http://www.google.com/404")
                    .CatchIgnore((UnityWebRequestErrorException ex) =&gt;
                    {
                        Debug.Log(ex.RawErrorMessage);
                        if (ex.HasResponse)
                        {
                            Debug.Log(ex.StatusCode);
                        }
                        foreach (var item in ex.ResponseHeaders)
                        {
                            Debug.Log(item.Key + ":" + item.Value);
                        }
                    })
                    .Subscribe();
            }

            {
                var uwq = UnityWebRequest.Get("http://google.com/");
                uwq.ToObservable().Subscribe(x =&gt;
                Debug.Log(x.Substring(0, 100))
                );


            }
        }
    }
}



