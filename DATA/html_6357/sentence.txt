More than 3 years have passed since last update.パート2ではマスタデータの読み込みについて書かせていただきました。
パート3以降ではいよいよダンジョンの作成を行っていきます！ざっくりとした手順です。
1. 任意のブロックを配置する関数を用意
2. 1の関数を使って四角形の部屋を作成
3. マスタデータの通りに作成するようにして完成ありきたりですが、配置するオブジェクトは2次元の配列で管理します。
床だったり壁だったりと、様々なオブジェクトを配置します。
配置するルールは以下のとおりです。
画像の例は3つの部屋を作ったときです。

最初にある程度の配列を確保し、なるべく全体で正方形を描くように配置します。まずは単純なオブジェクトを生成する関数を用意します。
床や壁を指定できるようにしておくと後で拡張しやすいです。また、ダンジョンを生成するクラスはpartialなクラスでそれぞれ作成し、
Generator.Block（ブロックを配置）、Generator.Room（部屋を配置）
といった役割ごとにクラスを分けていこうと思います。（あとで説明します）とりあえずキューブを配置する処理を書いてます。
一番最後に種類に応じたブロックを生成するように拡張します。配置するオブジェクトの情報クラスと、
それを配列で持つフロアの情報クラスを準備します。これで配置物を格納するクラスが準備できました。次に、部屋を作成する関数を準備します。
引数に部屋1つ1つランダムで大きさを決めるため、最小サイズと最大サイズをそれぞれ渡します。
戻り値は先程作ったフロア情報クラスです。生成された情報が格納されてます。
また、最初ですべての値が最大だったときの広さ分の配列を確保して部屋を生成していきます。上記のようなまず部屋の規模を計算する関数を用意し、
その中で部屋1つについて配置していく関数を呼んでいます。部屋を1つ分だけ配置する関数を用意します。
先ほどの関数で使われていたもので、外枠なら壁を、それ以外はとりあえず床を配置していきます。Generator.Room.Generate を呼んでみます。
部屋の大きさや、数を渡してあげればランダムな大きさの部屋がいくつか生成できると思います。下の図のようにいくつものブロックが配置されていると思います。
最後にブロックの見た目を変えましょう。↓変更例
※素材はこちらを使用しております。以上で部屋の作成が完了しました！
次回は部屋と部屋をつなぐ仕組みを考えてみる予定です。
お疲れ様でした。


