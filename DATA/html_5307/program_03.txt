
public class CalcExpression : IExpression
{
    private readonly Func&lt;int, int, int&gt; _calc;
    private readonly IList&lt;IExpression&gt; _expressions;

    public CalcExpression(CalcMethod calcMethod, IList&lt;IExpression&gt; expressions)
    {
        _expressions = expressions;
        switch (calcMethod)
        {
            case CalcMethod.Addition:
                _calc = (x, y) =&gt; x + y;
                break;
            case CalcMethod.Subtraction:
                _calc = (x, y) =&gt; x - y;
                break;
            case CalcMethod.Multiplication:
                _calc = (x, y) =&gt; x * y;
                break;
            case CalcMethod.Division:
                _calc = (x, y) =&gt; x / y;
                break;
            default:
                throw new ArgumentOutOfRangeException(nameof(calcMethod), calcMethod, null);
        }
    }

    public int Operate()
    {
        var result = _expressions.First().Operate();
        for (var i = 1; i &lt; _expressions.Count; i++)
        {
            result = _calc(result, _expressions[i].Operate());
        }
        return result;
    }
}

