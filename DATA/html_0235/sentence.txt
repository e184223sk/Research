以前書いた C#で&lt;任意の数値型&gt;のような型制約を実現する の類似例です。高速化のほか演算子オーバーロードのジェネリック対応などにも応用が効く手法です。公式の用語ではないですが、本記事ではのように引数に対する演算を定義する型を 演算インターフェイス と呼ぶことにします。このような演算インターフェイスのような機能を実現するには大きく2つのアプローチがあります。のような方式です。Javaではデリゲートが存在しないのですべてこのような形式です。のような方式です。演算インターフェイスを直接受け取らずに、ジェネリック型制約で渡します。TOp型を struct で実装することで高速化が期待できます。二分探索で関数の極小値を求めるコードで試してみます。演算インターフェイスをジェネリックで定義して構造体で渡すと高速になる。
性能向上を目指したいがコードを共通化したい場合などに有効。


