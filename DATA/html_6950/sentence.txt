AtCoder Beginner Contest 212に参加したので、その時に考えていたこととか、解法のメモなんかを。
「C# .NET Core 3.1.201」での参加。
A,BはAC。Cで時間切れ。D以降は未回答。与えられたAとBを、示されている条件通りに分岐処理すればOK。与えられる4桁の暗証番号について、次のいずれかの条件を満たすと「弱い」暗証番号となる問題。
いずれか、なのでどちらか一方でも満たせば答えは"Weak"となる。二つの条件のうち、少し考えたのが二つ目のほう。
次の数字が+1になっていれば「弱い」暗証番号であるが、肝心なのは
$ i $ が $1 \leq i\leq 3$を満たす任意の整数であるということ。
一回目の提出の時、この文言を完全に読み飛ばしており、
どこか一つでも$ X_{i + 1} $が$ X_1 $の次の数字になっていればよい、という条件で提出してしまい惨敗。
落ち着いてサンプル問題を見直して、条件の読み取り間違いに気付きかろうじてAC。与えられる二つの数列から一つずつ要素を選択して、差が最小になる組み合わせを探す問題。
制約から単純に組み合わせ総当たりでは間に合わないため、何らかの工夫が必要。おそらくソートしてどうにかこうにかするんだろうなぁ…というところで時間切れ。解法のポイントは、$A_i$と$B_j$の大小関係。
二つの数列の並びが昇順となっている場合、
$A_i \leq B_j $であるなら、$j \leq j'$ について常に$|A_i - B_j| \leq |A_i - B_{j'}|$が成り立つ。
そのため、$j'$以降を調べる必要がなくなる。
同様の考え方で、$A_i &gt; B_j$のとき、$j' &lt; j$について、常に$|A_i - B_j| &lt; |A_{i+1} - B_j'|$が成り立つ。つまり、順に走査していくなかで、$A_i$より$B_j$が大きい時点で、$B_j$よりさらに大きい$B_{j+1}$以降については差がさらに開く一方であることが明らかであり、
$B_{j-1}$以下についても$A_{i+1}$との差は$A_i$と$B_j$の差より大きくなるということ。まずは問題の条件をしっかりを読んで理解すること。
今回のC問題のようなときは、具体例を紙に書いてシミュレーションしてみること。


