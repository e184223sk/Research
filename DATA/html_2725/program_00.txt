using System.Linq;
using UnityEngine;

[System.Serializable]
public class ExpLevelClass
{
    [SerializeField] int _exp;
    [SerializeField] int _remainExp;
    [SerializeField] int _minLevel;
    [SerializeField] int _level = 1;

    public int Exp =&gt; _exp;
    public int RemainExp =&gt; _remainExp;
    public int MinLevel =&gt; _minLevel;
    public int Level =&gt; _level;

    // Expを加算してLvを初期化する
    public void AddExp(int exp, int[] expArray)
    {
        //カンストを考慮して加算
        _exp = Mathf.Clamp(_exp + exp, 0, expArray[expArray.Length - 1]);
        // 値の更新
        UpdateLevel(expArray);
        UpdateRemainExp(expArray);
    }

    void UpdateLevel(int[] expArray)
    {
        // 現Exp以下の値の中で最大の値のインデックスを取得
        var maxIdx = expArray.Where(x =&gt; x &lt;= _exp).Select((val, idx) =&gt; new {V = val, I = idx})
            .Aggregate((max, working) =&gt; (max.V &gt; working.V) ? max : working).I;
        _level = maxIdx + 1;
    }

    void UpdateRemainExp(int[] expArray)
    {
        // 現Expより大きい値の中で最小の値のインデックスを取得
        var minIdx = expArray.Where(x =&gt; x &gt; _exp).Select((val, idx) =&gt; new {V = val, I = idx})
            .Aggregate((min, working) =&gt; (min.V &lt; working.V) ? min : working).I;
        _remainExp = expArray[minIdx] - _exp;
    }
}

