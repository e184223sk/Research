
/// &lt;summary&gt;課金失敗&lt;/summary&gt;
public void OnPurchaseFailed (Product product, PurchaseFailureReason reason) {
    Debug.LogError ($"Purchaser.PurchaseFailed Reason={reason}\n{product.GetProperties ()}");
}

/// &lt;summary&gt;課金結果 有効な消耗品なら保留、それ以外は完了とする&lt;/summary&gt;
public PurchaseProcessingResult ProcessPurchase (PurchaseEventArgs eventArgs) {
    var validated = ValidateReceipt (eventArgs.purchasedProduct);
    Inventory [eventArgs.purchasedProduct] = validated;
    Debug.Log ($"Purchaser.ProcessPurchase {(validated ? "Validated" : "ValidationError")} {eventArgs.purchasedProduct.GetProperties ()}");
    return (validated &amp;&amp; eventArgs.purchasedProduct.definition.type == ProductType.Consumable) ? PurchaseProcessingResult.Pending : PurchaseProcessingResult.Complete;
}

