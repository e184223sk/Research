More than 1 year has passed since last update.筆休めのための、ちょっとした小ネタです。C# 9.0 が今年の秋くらいに出ると思われるのですが、今の最新の C# 8.0 すらキャッチアップできてないのに…という気持ちになりますね。ということで、完全な機能の網羅は岩永さんのサイトにお任せするとして、ここでは C# 8.0 らしい書き方で書いた方が良さそうなもので、自分的に利用頻度高めかな？と思うものを書いていこうと思います。因みにここで紹介するものは C# 6 や 7 あたりで追加されたものとかも入ると思います。最近の C# の書き方って感じです。あまり引数の型を判定して何か処理するみたいなのが多くあると、ちょっとどうかな？という感じですが、変数の型判定する事はありますよね。古き良き書き方だと大体以下のような感じですね。前は as で型変換してから、変換がうまくいっているかチェックするという二段構えになっていました。他の方法としては is 演算子で型チェックをしてからキャストする方法もありました。以下のような感じですね。因みに、この方法は内部的には is で型をチェックして、さらにキャストするという感じなのでちょっと無駄があるので as の方がいいと言われてました。最近は is での型判定のところで、そのまま変数を定義できるようになっているので以下のように書くのがスムーズです。out 引数で結果を受け取るときは、昔は以下のように書いてました。out 引数に渡すための変数をあらかじめ定義しておいて渡すという感じですね。型の判定のところでも説明したのと同じように out 引数のところで変数の定義ができます。例えば X, Y という int 型のプロパティのある Point 型で (0, 0) と (1, 1) と (1, 任意の値) と (任意の値, 1) と (任意の値, 任意の値) で処理がわかれるようなケースを考えてみましょう。素直に書くとこんな感じですねコンパイル通してないので、間違えてるかもしれませんが素直に書くとこんな感じですよね。最近の C# ではパターンマッチがあるので、こんな感じに書けます。もし上のような switch での分岐の結果行う処理が単一ステートメントの実行結果を返すだけなら switch 式も使えます。_ を指定することで値を捨てることができます、_ の代わりに var x のように書くとプロパティの値を変数に入れることができます。因みに、この { ... } の書き方は型の判定も併せて行いたい場合は型名と合わせて使うこともできます。switch 式に特化した書き方でもないので if 文の中でも使うことができます。タプルを返すようにすると擬似的に複数の戻り値を返すようなメソッドを定義できます。今までは out 引数を使うか、戻り値を表すクラスを定義するとかしないといけなかったのですが、タプルを使うという選択肢が追加されてます。TryParse をラップして戻り値で bool と int を返すようにしてみようと思います。戻り値を Task&lt;(bool ok, int result)&gt; のようにすると非同期メソッドでも複数の値を返すことができます。因みにタプルは以下のように代入したり switch に渡したり色々できるので便利です。地味にめんどくさかったんですよね。var が使えなくて。引数が多くなってくるとめんどくささが上がります。こんな時はメソッド内でもメソッドを定義できるようになったので、それを使うと同じようなことができます。今までは if(x == null) { x = "xxx"; } みたいにするか下の例に書くように、初見殺し的に書くしかなかったのですが ??= 演算子でさくっと出来るようになりました。便利！！前は void Main() みたいに void や int じゃないとだめだったのですが async Task Main() のように async もいけるようになりました。今までは、以下のようにしてお茶を濁してたのでとても便利です。ということで、思いついた機能をつらつらと書いていきました。
因みに、iPad でコンパイルせずに書いてるので typo があったり間違ったことを言ってたら教えてください。ではでは。


