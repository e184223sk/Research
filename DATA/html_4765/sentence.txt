More than 3 years have passed since last update.AWS S3 の API を使うプログラムを LINQPad で作成し、AWS SDK for .NET の使い方を把握する。※LINQPad には無料の Free Edition もあるが、この記事では有償版である Premium Edition を前提に書く。まだ持ってない？買おう！LINQPad は Visual Studio よりも一億万倍くらいお手軽に .NET プログラムを作成できる開発・実行環境。小さいプログラムの作成に特化していて、プログラミングやAPIの学習にとても向いている。LINQPad を使って学習すると次のような良いことがある。また、実際の開発現場でも下記のようなときに役立つ。AWS SDK for .NET を使うには、まず AWS の認証情報を開発端末に登録する必要がある。手順：まず AWSSDK を使用するための NuGet パッケージをインストールする。手順：LINQPadを起動後、エディタで右クリック、NuGet Package ManagerSearch online に ASSDK と入力、リストに表示された AWSSDK - Core Runtime を Add To Queryするこれで LINQPad の準備は完了。開発用の認証情報を発行する。手順：AWSコンソールにログイン
⇒ IAM
⇒ Users
⇒ 開発用のユーザを選択(なかったら作る)
⇒ Security credentials
⇒ Access keys
⇒ Create access keyここに表示された Key は次で使う。※Secret access key は絶対に他の人に見せてはいけない。認証情報の登録がすんだら速やかに破棄すること。万が一漏洩した場合は、この画面でキーを削除して無効化できる。LINQPad に戻って、Language を C# Program にして認証情報を登録するコードを書く。5, 6行目に先に発行したKeyを設定し実行すると開発端末に認証情報が登録され、以後特に指定しない限りはこの認証情報が使われるようになる。コードを実行するにはF5キーまたはエディタ左上の ▶ をクリック。実行が完了したら LINQPad を再起動する。（再起動しないとAWSSDKが認証情報を読み込んでくれないっぽい）これで AWS SDK for .NET を使う準備が整った。ここではS3に次の操作を実行するプログラムを作成する。プログラム作成を通して、AWS SDK for .NET のお作法的なことを把握してもらえるとよい。非同期メソッドを使おう！.NET Framework 版の AWSSDK には同期版・非同期版それぞれの API が提供されているが、.NET Core 版には非同期版しかない。なので特に理由がなければ非同期版APIを使っておくのがよい。非同期で書いておくと LINQPad で書いたコードを後で Lambda に移植したりするのも楽だし。.NET Framework 版の ListBucket には同期・非同期両方のメソッドがある.NET Core版 の ListBucket には非同期のメソッドしかない※毎回 Language を C# Program に変えるのがめんどくさいときは、デフォルト設定を変えられる。手順：メニュー Edit ⇒ Preferences ⇒ Query ⇒ Default Query Language を C# Programこれで準備完了。S3 を使うには NuGet パッケージ AWSSDK.S3 をインストールする。手順：エディタで右クリック、NuGet Package ManagerSearch online に ASSDK.S3 と入力、リストに表示された AWSSDK - Simple Storage Service を Add To Query するなお、S3以外のサービスも同様に AWSSDK.{サービス名} という NuGet パッケージで提供されている。EC2 なら AWSSDK.EC2、SQS なら AWSSDK.SQS など。S3 の API を呼ぶには Amazon.S3.AmazonS3Client クラスを使う。LINQPad は入力の候補を提示・補完してくれるので、クラスの名前を覚えてなくても Amazon. と入力すればだいたいなんとかなる。S3 の API も同様に、s3. と入力すれば一覧表示される。ちなみにこの入力候補は、. や ( を打った時のほか、Ctrl+Space で表示させることもできる。バケット一覧を表示してみる。レスポンスを確認したかったらとりあえず Dump() しておくとよい。下記のように出力できる。Dumpされた内容から、バケットに関する情報は Buckets プロパティに入ってきそうだなーと推測できる。(まだバケット無いけど)バケットを作ってみる。作成したバケットの名前と作成時刻が表示された。ここから次のようなことがわかる。(ドキュメントを読まなくても！)AWS コンソール上でもちゃんと作成されてることが確認できる。バケットの中にオブジェクト(ファイル)を作ってみる。PutObjectにはS3のバケット名やキー名、コンテンツをパラメータとして渡す必要がある。このパラメータに PutObjectRequest というクラスを使っている。また、APIのレスポンスは PutObjectResponse というクラスのオブジェクトで帰ってくる。PutObjectRequest や PutObjectRequest クラスは別の名前空間にあるので using が必要な点に注意。AWSコンソール上でもこのコードで作成したオブジェクトを確認。上記のコードで使ったクラスは下記の構造になっている。これはS3に限らず、他のAWSサービスのAPIでも同様なので覚えておこう。あらかじめ名前空間 Amazon.{サービス名} と Amazon.{サービス名}.Model を using しておくのもよい。バケットの中のオブジェクト一覧を取得する。PutObject で作成した test が表示された。キー名を取得したかったら string key = listObjRes.S3Objects[0].Key; のようにすれば良い。オブジェクトの中身を取得する。これはひと手間必要。GetObjectResponse を Dump() するとわかるが、GetObjectResponse にはコンテンツを直接取得するためのプロパティやメソッドがない。その代わりに ResponseStream が用意されているのでここから読みとる必要がある。上で作ったオブジェクトやバケットはいらないので削除する。と、ここまでに使用したAPIの名前は {List/Get/Put/Delete}+{Bucket/Object} という規則になっている。これは他のAWSサービスのAPIでも同様の規則となっているので覚えておくとよい。S3 を操作するコードを LINQPad で作成した。また、作成を通して AWS SDK for .NET の使う上で押さえておきたいポイントも書いた。これらのポイントは S3 に限らず、ほかのAWSサービスでも共通。


