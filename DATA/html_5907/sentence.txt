Microsoftの公式解説書『プログラミング ASP.NET Core』を読んで強く型指定を行った上でビューにデータを渡す方法を知ったので備忘録としてまとめたいと思います。恥ずかしながら今まではViewDataやViewBagを利用してControllerからViewへデータを渡す方法しか知りませんでした。
こんな感じ↓便利ではあるのですがViewDataのキー（上記のコードでいうと"Title"や"Number"）をtypoして実行時エラーを出したり、（ViewBagなどで）インテリジェンスがなくて効率が落ちるたびに「ぐぬぬ。。。」と思っていました。そこでViewModelを作成してビューにデータを渡していきます。具体的にASP.NET Core MVCを利用して書いていこうと思います。
VisualStudio 2019を立ち上げて『新しいプロジェクトの作成』&gt;『ASP.NET Core Webアプリ(Model-View-Controller)』を起動します。
ビルドして実行すると以下の画面になるかと思いますが、以下の赤枠部分をテキトーに「Test」と変えてみましょう。
今までの僕だとこんな感じで書いていたでしょう。それを・・・ViewModelを用いるとこんな感じ。
Modelフォルダ内にViewModelフォルダを作成し、HomeViewModel.csを新規作成しています。実行結果↓
ちゃんと変更できましたね！
これなら型が異なっていた際にも実行前にビルドエラーで気づけますし、Viewではインテリジェンスが効いてより書きやすくなります。もちろんViewDataやViewBagを利用するのは悪いことではありません。
最初に取り上げたMicrosoftの公式解説書『プログラミング ASP.NET Core』でも手っ取り早く実装できる利点があると書かれていますし、実際のところ確かにその通りです。
ただし大きなアプリを作る際にはやはり保守性が微妙になってくるのでViewModelを用いる設計を基本としていきましょ～！


