（※2020/5/07時点の CSVHelper 14.x では動作していましたが、2021年度2月時点の 23.x では仕様が変わり手直しが必要です）　1つの CSV ファイルには、1種類のフォーマットが一般的だと思います。データの途中でデータのフォーマットが変わってしまうと、読み込み処理も書き込み処理も煩雑になるためです。しかし、たまに複数のフォーマットを含む CSV ファイルがあり、どうしても読み込んで処理しなければならない場合があります。（汎用機からのデータで多いような気がします）　CsvHelper は、1つのCSVファイルに2つ以上のレコードフォーマットが定義されている場合にも対応しています。読み込み時の csv.Configuration.RegisterClassMap は、複数定義することができ、読み込んだヘッダの項目名を判別させることで、異なるフォーマットの読み込みを実現させます。1種類のフォーマットの場合の CSV ファイルの読み込み方と、2種類のフォーマットが含まれる CSV ファイルの読み込み方を、サンプルで見比べてみます。　下のサンプルでは、test.csv ファイルに入っているデータを、TestDataMap が指定する順番に従って TestData クラスにマッピングし、records に登録していきます。見慣れてしまうと、難しいところは特にありません。　2種類のフォーマットの混在の仕方に特に共通にルールがあるわけではないので、CsvHelper を使ったとしても、仕様に従ってある程度の実装が必要です。とりあえずの例として、次のようなフォーマットだったとします。1つめのフォーマットは、Id、Name の2つの項目です。2つめのフォーマットは、Name、Param1、Param2 の3つの項目によるフォーマットで、1つ目の Name 項目に関するパラメータを扱っています。
なお、フォーマット間は空行で区分けされているとします。ただし、空行は1行のみとします。簡単に解説します。IgnoreBlankLines = false とすることで、空行の読み飛ばしを無効にします。これでフォーマットの仕切りを認識できるようになります。RegisterClassMap に2種類のマッピングクラスを登録します。それぞれのフォーマットの保存先を用意します。ヘッダ行かどうかを判断するフラグを定義します。1行目はヘッダでしょうから、初期値は true です。空行を判断した場合の処理です。空行の次はヘッダですので、isHeader を true にして、次のループに移ります。現在のヘッダ情報から、フォーマットを判別して、それぞれの保存先に格納します。想定していないヘッダだと、throw で例外が発生します。読み込んだデータを出力します。1つめのフォーマットで定義された Name を使って、2つ目のフォーマットで定義される Param1 と Param2 を表示しています。出力結果は次のようになります。


