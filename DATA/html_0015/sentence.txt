2021/04/25 追記
こちらの記事見返してて思ったんですが、
Sliderの値をReactivePropertyに代入して公開するのではなくて、
Sliderそのものを公開すればいいのでは？ってなりました。
以下の記事ではそうしてます。
【参考リンク】：【Unity(C#)】UniRxとExtenjectでMV(R)Pやってみる早速ですがデモです。
Sliderの値を変更するとCubeがそれぞれの軸を基準に回転します。このコード自体は簡単ですが、一つのコードにべた書きするとロジックやUIが絡み合ってくるので
クラスが肥大化し、それぞれの役割を差し替えたりテストしたりが難しくなります。そこでMV(R)Pパターンを使います。UniRxを使ったデザインパターンです。
Model、View、Presenterがそれぞれ役割を持ちます。詳細な説明は最後に参考リンクを貼ってます。PresenterはModelとViewを繋ぎ、
ModelとViewがお互いに依存関係のない状態を作り出せます。クラス図にすると下記です。
正確には、ViewとModelの変更がReactiveに互いに反映されるつくりのことを指すようですが、
今回は下記のような一方通行の変更通知パターンを実際に作りながら学びます。
・Viewの変更→Presenterに通知→Modelに反映逆に下記のようなパターンは参考リンクの図がイメージしやすいと思います。
・Modelの変更→Presenterに通知→Viewに反映
【参考リンク】：プログラミング MVPパターン ~理論編①~Unity 2019.4.8f1
UniRx 7.1.0まずはModelを作ります。Cubeを回転させる というロジックを持ちます。
Viewの存在は知りません。Model内の公開された機能(パブリックなメソッド)はPresenterにて呼び出します。
Model内では使いません。ViewはSliderの変更をPresenterに通知する役割を持ちます。
Modelの存在は知りません。ReactivePropertyの購読機能のみ外部に公開します。
これによりPresenter側で通知を受け取ることができます。ModelとViewを繋ぐPresenterです。
Model、Viewの存在を知っています。View側で公開されている購読機能の中でModel側で公開されている機能を利用します。一応GitHubに置いときました。
MVP_Demo続きとして、MonoBehaviourを継承していないクラス間でのMVPパターンを
Extenjectと合わせて作ってみようと思ってます。2021/04/25 追記
やってみました。
【参考リンク】：【Unity(C#)】UniRxとExtenjectでMV(R)PやってみるUnityにおけるMVPパターンについて
Web出身のUnityエンジニアによる大規模ゲームの基盤設計
UniRxでMV(R)Pパターンをやってみた
UniRxとZenjectを使ってMV(R)Pで南京錠を作る
Unityで学ぶMVPパターン ~ UniRxを使って体力Barを作成する ~


