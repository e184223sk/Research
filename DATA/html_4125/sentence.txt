More than 1 year has passed since last update.皆様は
何らかの理由で開発を行わなければならないが、開発環境は自由に入れられないしもちろんOSはWindows
という環境に追い込まれたことはあるでしょうか。はっきりいってそんな環境で開発などやりたくありませんが、セキュリティの制限でアプリのダウンロードが許可されておらず、上記のような環境に追い込まれることはよくあります。
……ありますよね？とにかく、そんな貧弱な環境でもアプリの開発を行えるよう、備忘録もかねて対策を書きます。極限環境にもいろいろあると思いますが、本記事はとりあえず以下のような環境での開発を想定しています。※ごめんなさい、若干盛りました。私もここまでひどい環境では開発していません。ただ、この記事では上記の条件を想定します。
※この記事に掲載される手法は、やむを得ない場合にのみ利用してください。通常の開発でマネをすると開発効率やメンテナンス性を損ないます。極限環境下でも利用可能な言語として以下があります。先頭に☆を付けた言語が、私がお勧めする言語になります。まず、バッチは手軽に利用できるため、極限環境で最も利用する言語といってよいでしょう。JavaScript については、ランタイムがブラウザでローカルファイルへの書き込みができなかったりと制限こそ厳しいですが、やはり手軽に利用でき、何よりブラウザの開発者ツールを利用すれば、コードにブレークポイントを設定したり、ステップ実行したり、変数をウォッチしたりと、まともな開発環境で開発している気分を味わえます。しかもCDNにリンクすれば外部ファイルはダウンロードしていない（ように見える）という屁理屈が通る場合もあります。どうしても高度なことをする必要がでた場合には、C# を利用するとよいでしょう。
組み込みの機能が豊富なため、ライブラリを利用できない極限環境プログラミングでは非常に重宝します。しかも、microsoft.comのリファレンスページは有害サイトフィルタに弾かれにくいため、極限環境下でもリファレンスが読める場合があります。
ただし、.netのバージョンだけでなく、コンパイラのバージョンまで気にしなくてはならないのが玉に瑕です。
コンパイルには コマンドラインコンパイラ csc.exe で C# コードをコンパイルするが参考になります。
また、Windows7 以降ではC# や Visual Basic のためのビルドツールである、MSBuild が標準で利用できます。
こちら→MSBuildで始めるWPF(C#、VB)の記事などを参考にしてください。以降では、簡単なツール開発を例に、極限環境プログラミングの流れを追っていきます。送られてきたメールに対する返信の候補を返す、以下のようなツールを作成します。
作成するツールの設計はこんな感じ。設計のやり方は、通常の開発でも極限環境でもそんなに変わりませんね。
強いて違いを挙げるなら、極限環境では細部にこだわらずざっくりやった方が良いということでしょうか。
どうせ大規模アプリなんて作れないので、脳内設計図でも管理できなくなることはまずありません。プログラムの開発にはエディタが必須ですが、極限環境では贅沢を言えません。最悪の場合はメモ帳での開発となります。ただ、ローカルにエディタを落とすことが許されていなくても、ブラウザ上で動作するエディタが利用できる場合があります。
コードハイライトや自動インデントなど、メモ帳よりはずっと効率が良いものがあるので、可能ならこれらを利用しましょう。例えばJDOODLEのサイトなど、便利なものがいくつかあります。ウェブページの開発を行う際など、文字コードがShift_JIS ではまずい場合があります。最近のメモ帳は文字コードを指定して保存することができますが、それができない古い時代のOSの場合は、以下のように文字コード変換ツールを作成するとよいでしょう。C#コードのコンパイルは、コマンドラインコンパイラ csc.exe で C# コードをコンパイルする の記事を参考に、OS付属のCSCコンパイラを利用します。CSCコンパイラは、エクスプローラの検索機能で、csc.exe を検索するとよいでしょう。
あとは、 {コンパイラのパス}\csc.exe ChangeEncode.csとすればコンパイルが実行できます。極限環境では、テスティングフレームワークを自分で用意する必要があります。今回はHTML+JavaScript でツールを作成するので、テストツールもJavaScript で記述しましょう。ここで重要なのは、こだわりすぎない ことです。
極限環境プログラミングでは、エディタのサポートが受けられないため、コーディングには非常に多くの時間を要します。そのため、細部にはこだわらず、とにかく必要最低限の機能の実装を目指しましょう。例えば、こんな感じで実装します。グローバル汚染？　describeをネストできない？　そんなことは知ったこっちゃありません。
欲をかくと肝心の本体が完成しなくなるので、このくらいの簡単な設計がいいでしょう。これで、以下のようにテストを書けるようになりました。見づらければ、スタイルを適当に設定します。テストツールも完成したので、テスト本体の実装を行いましょう。Browserify などでトランスパイルができないことを忘れてはいけません。
テスト実行の際は、対応しなければいけない環境の中で最も機能の少ないものを利用します。セキュリティが厳しい環境でも、互換性の関係で IE が生き残っている場合が多いので、今回は IE11 をサポートする体で作成していきます。開発は、テストファーストで行うのが良いでしょう（自作のテストツールを利用する場合、テストツール自体にバグがある可能性があるため）。先に合格しないテストを記述して確認することで、テストツール自体の検証にもなります。完成したら、先ほど作成したテスト実行用のHTMLファイル (runtest.html) で読み込むようにしましょう。
全てのテストが不合格ならOKです。バージョン管理などという贅沢は言えませんが、バックアップくらいはないと不安で変更をためらってしまうことがあります。
不安な時は、適当にバックアップ用のバッチを記述しておきましょう。などとしておけば十分でしょう。
複数バージョン保存しておきたい場合は、日付時刻をつけたフォルダに保存するなどしてください。
こちらの記事が参考になります。では、いよいよツール本体の実装に移ります。注意点はテスト作成のときといっしょで、こだわりすぎないこと、トランスパイルできないことを忘れないこと の二つだけです。こちらもテスト実行用の HTMLファイル (runtest.html) で読み込むようにし、テストの合格を確認します。あとは適当にツールの起動ページとなる HTML を作成し、最後に動作確認を行ってください。
一人で開発しているということは、バグがあったときに全責任を負わされるリスクがあるので、デバッグは慎重に行いましょう。運用実績の無いテストツールを利用しているので、手動でのテストもしっかり行います。
注意する項目はこのあたりです。普段ツールなどで自動処理していたり、バージョン管理システムに頼っている作業は、極限環境では忘れがちです。気を付けてください。以上で開発は終了です。お疲れさまでした。小細工を弄するより先に、開発環境改善の交渉をしましょう。


