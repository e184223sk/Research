using System;
using System.Drawing;
using System.Windows.Forms;

namespace _3D
{
    class G3D
    {
        private Bitmap canvas;
        private Graphics g;
        private PictureBox pictureBox;
        private double x_adj, y_adj;
        private double x_theta = 0, y_theta = 0, z_theta = 0;

        public G3D(PictureBox p)
        {
            pictureBox = p;
            canvas = new Bitmap(p.Width, p.Height);
            g = Graphics.FromImage(canvas);
            x_adj = p.Width / 2;
            y_adj = p.Height / 2;
        }

        public void cuboid(double x1, double y1, double z1, double x2, double y2, double z2)
        {
            g.Clear(Color.Black);

            Point[] p = { point_culc(x_theta, y_theta, z_theta, x1, y1, z1),
                 point_culc(x_theta, y_theta, z_theta, x2, y1, z1),
                 point_culc(x_theta, y_theta, z_theta, x2, y2, z1),
                 point_culc(x_theta, y_theta, z_theta, x1, y2, z1)};

            g.DrawPolygon(Pens.White, p);

            Point[] p1 = { point_culc(x_theta, y_theta, z_theta, x2, y1, z1),
                 point_culc(x_theta, y_theta, z_theta, x2, y2, z1),
                 point_culc(x_theta, y_theta, z_theta, x2, y2, z2),
                 point_culc(x_theta, y_theta, z_theta, x2, y1, z2)};

            g.DrawPolygon(Pens.White, p1);

            Point[] p2 = { point_culc(x_theta, y_theta, z_theta, x1, y1, z1),
                 point_culc(x_theta, y_theta, z_theta, x1, y2, z1),
                 point_culc(x_theta, y_theta, z_theta, x1, y2, z2),
                 point_culc(x_theta, y_theta, z_theta, x1, y1, z2)};

            g.DrawPolygon(Pens.White, p2);

            Point[] p3 = { point_culc(x_theta, y_theta, z_theta, x1, y1, z2),
                 point_culc(x_theta, y_theta, z_theta, x2, y1, z2),
                 point_culc(x_theta, y_theta, z_theta, x2, y2, z2),
                 point_culc(x_theta, y_theta, z_theta, x1, y2, z2)};

            g.DrawPolygon(Pens.White, p3);

            Point[] p4 = { point_culc(x_theta, y_theta, z_theta, x1, y1, z1),
                 point_culc(x_theta, y_theta, z_theta, x2, y1, z1),
                 point_culc(x_theta, y_theta, z_theta, x2, y1, z2),
                 point_culc(x_theta, y_theta, z_theta, x1, y1, z2)};

            g.DrawPolygon(Pens.White, p4);

            Point[] p5 = { point_culc(x_theta, y_theta, z_theta, x1, y2, z1),
                 point_culc(x_theta, y_theta, z_theta, x2, y2, z1),
                 point_culc(x_theta, y_theta, z_theta, x2, y2, z2),
                 point_culc(x_theta, y_theta, z_theta, x1, y2, z2)};

            g.DrawPolygon(Pens.White, p5);

            g.DrawLine(Pens.Red,
                point_culc(x_theta, y_theta, z_theta, 100, 0, 0),
                point_culc(x_theta, y_theta, z_theta, 0, 0, 0)
                );
            g.DrawLine(Pens.Green,
                point_culc(x_theta, y_theta, z_theta, 0, 100, 0),
                point_culc(x_theta, y_theta, z_theta, 0, 0, 0)
                );
            g.DrawLine(Pens.Yellow,
                point_culc(x_theta, y_theta, z_theta, 0, 0, 100),
                point_culc(x_theta, y_theta, z_theta, 0, 0, 0)
                );

            pictureBox.Image = canvas;
        }

        public void camera_change(double rotx,double roty,double rotz)
        {
            x_theta = rotx;
            y_theta = roty;
            z_theta = rotz;
            theta_lim(ref x_theta);
            theta_lim(ref y_theta);
            theta_lim(ref z_theta);
        }

        public void camera_step(double rotx, double roty, double rotz)
        {
            x_theta += rotx;
            y_theta += roty;
            z_theta += rotz;
            theta_lim(ref x_theta);
            theta_lim(ref y_theta);
            theta_lim(ref z_theta);
        }

        private void theta_lim(ref double t)
        {
            if (t &gt; 360)
            {
                t -= 360;
            }
            if (t &lt; 0)
            {
                t = 360 + t;
            }
        }
        /// &lt;summary&gt;
        /// 
        /// &lt;/summary&gt;
        /// &lt;param name="rotx"&gt;X軸回転角度&lt;/param&gt;
        /// &lt;param name="roty"&gt;Y軸回転角度&lt;/param&gt;
        /// &lt;param name="rotz"&gt;Z軸回転角度&lt;/param&gt;
        /// &lt;param name="x"&gt;X座標&lt;/param&gt;
        /// &lt;param name="y"&gt;Y座標&lt;/param&gt;
        /// &lt;param name="z"&gt;Z座標&lt;/param&gt;
        private Point point_culc(double rotx, double roty, double rotz, double x, double y, double z)
        {
            //X軸周りで回転
            double X_x = x * 1;
            double Y_x = y * Math.Cos(rotx * (Math.PI / 180)) - z * Math.Sin(rotx * (Math.PI / 180));
            double Z_x = y * Math.Sin(rotx * (Math.PI / 180)) + z * Math.Cos(rotx * (Math.PI / 180));

            //Y軸周りで回転
            double X_y = X_x * Math.Cos(roty * (Math.PI / 180)) + Z_x * Math.Sin(roty * (Math.PI / 180));
            double Y_y = Y_x * 1;
            double Z_y = -X_x * Math.Sin(roty * (Math.PI / 180)) + Z_x * Math.Cos(roty * (Math.PI / 180));

            //Z軸周りで回転
            double X_z = X_y * Math.Cos(rotz * (Math.PI / 180)) - Y_y * Math.Sin(rotz * (Math.PI / 180));
            double Y_z = X_y * Math.Sin(rotz * (Math.PI / 180)) + Y_y * Math.Cos(rotz * (Math.PI / 180));
            double Z_z = Z_y * 1;

            return new Point((int)(X_z + x_adj), (int)(Y_z + y_adj));
        }
    }
}

