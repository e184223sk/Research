Unityで経路探索やAIを使うにあたって、
どんなものがあるのか？
どんな違いがあるのか？
どうやって使うのか？
を以下に絞って比較し、それぞれの簡単な使用方法を紹介します。主に見かけるのは以下の2つです。簡易なAIの手法として2つピックアップします。
（オープンワールドやMMOなどのスケールの大きいゲームでの複雑なAIでは、これらを組み合わせたり、別の手法にしたりといったアプローチが必要になると思われます。）AIに後述するアセット（ImtStateMachine, FluidBehaviorTree）を使用した場合における比較です。
（AIの比較と重複する部分もあります。）Window → AI → Navigation を開きます。Objectタブを選択した状態で、Hierarchyからマップとなる床や壁のオブジェクトを選択すると、対象オブジェクトの設定を変更できます。
Navigation Static にチェックして、Navigation Area を床であれば Walkable, 壁であれば Not Walkable にします。すべてのマップ用オブジェクトを設定したら、Bakeタブの中にあるBakeボタンを押してNavMeshを生成します。
SceneビューでBakeした結果を確認できます。実行中にNavMeshを生成・更新するには、NavMeshComponentsという追加機能群が必要です。
https://github.com/Unity-Technologies/NavMeshComponents
NavMeshSurfaceコンポーネントを使用することで、動的生成が可能になります。キャラクターなどの移動させたいオブジェクトに、NavMeshAgentコンポーネントを追加します。
SetDestination() で移動先座標を設定すると、自動で移動し始めます。または、移動経路となるパスのみを取得することもできます。Free版があるので、ダウンロードしてみて採用するかどうか検討できます。
https://arongranberg.com/astar/download
（Pro版の機能が不要であればFree版を採用することもできます。）空オブジェクトを生成して、 Component → Pathfinding → Pathfinder でコンポーネントを追加します。InspectorでAdd Mesh Graphから設定したいタイプを選択して追加し、Scanボタンで経路を生成します。
なお、NavMeshを使用する場合、Meshデータが必要となります。(アセット内にサンプルが入っています。)
GridGraphの場合は、NodeSize, Width, Depth等の数値設定のみで生成できます。
SceneビューでScanした結果を確認できます。実行中にNavMeshやGridGraphを生成・更新するには、Inspectorで設定済みのNavGraphを取得して、設定を更新するなどしてからScanします。キャラクターなどの移動させたいオブジェクトに、Seekerコンポーネントを追加して、移動経路を取得できます。IceMilkTeaというフレームワークの一部として公開されている、ImtStateMachineを使用する例です。
https://github.com/Sinoa/IceMilkTea/blob/develop/Packages/IceMilkTea/Runtime/Core/UnitCode/PureCsharp/StateMachine.cs参照用のメンバを用意しておきます。ステートごとの挙動を記述したクラスを作成します。Enter(), Update() 以外にも、終了処理・特定時の遷移ガードといった機能もあります。初期化として、StateMachineを生成して、ステートの遷移条件を設定します。後は、ImtStateMachine.Update()を呼ぶことで、現在のステートのクラスのUpdateが動作します。GitHubで公開されているFluidBehaviorTreeを使用する例です。
https://github.com/ashblue/fluid-behavior-tree
コードからTreeを作成し、Editorでの実行中にTreeの状態をGUIで確認することができます。
（蛇足ですが、Behavior / Bihaviour のuが入るかどうかはアメリカ式かイギリス式かの違いで、意味は同じです。）Treeを生成します。Selector(), Sequence()は子をすべて処理するけれど途中の成否によって処理を終了する仕組みで、
Condition()は条件判定、Do()は内包する処理を実行する仕組みです。
他にも、処理の待機／継続・成否の反転・Treeのパーツ化といった機能もあります。後は、BehaviorTree.Tick()により、Treeを走査します。
MonoBehaviour.Update()で呼べば、毎フレーム走査することになります。結局の所どれを使えば良いのかは、ゲームの規模やジャンルによっても変わります。
いずれも一長一短あるため、GridGraphが使いたい、複雑なAIは不要、などの要望・状況に応じて選択できると良いかと思います。
Unityで経路探索・AIを実装したいけれどとりあえずどうしたらいいのか、といった方へのとっかかりとなることができれば幸いです。


