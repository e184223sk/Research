More than 1 year has passed since last update.以前の記事を書いてみて、Taskの使い方を何となくわかった気になっていたが、人が書いたTaskを使うコードを見て、何をしてるかよくわからなかったので復習したい。とくに、async/awaitをつける、つけないで動きがどう変わるのか、試してみたい。各箇所でスレッドIDを表示させて、どこが同じIDでどこが異なるIDなのか見た。
結果、Task.Run()の中が、別スレッドになっている。
Taskを返すメソッド(ここではTaskFunc())の中は、画面の処理と同じスレッド。(当たり前？)以下、1番からいくつかの実験をしているが、上から順番に少しずつコードを変えて(asyncやawaitをつけたり消したりして)実験することにする。※呼ぶ側：下でいうところのButton_Click_5のこと。画面のボタンのハンドラ。
　呼ばれる側：下でいうところのTaskFuncの中の処理のこと。実行順：ADGBCEF
       ADEGBCF
※何度もやると、上のように何パターンか実行順ができる。
　最初がAD、最後がFだけ1000msSleppするので決まっていて、あとは順番が保証されないと思われる。コンパイルは通るが、ワーニングあり。
実行順：ADGBECF
　　　　ADEGBCF
　　　　ADGBCEF　
※何度もやると、上のように何パターンか実行順ができる。
　最初がAD、最後がFだけ1000msSleppするので決まっていて、あとは順番が保証されないと思われる。実行順：コンパイルエラー
実行順：ADBECFG
　　　　ADBCEFG
　　　　ADEBCFG
※何度もやると、上のように何パターンか実行順ができる。
　最初がAD、最後がFGだけ決まっていて、あとは順番が保証されないと思われる。
　最後がFGになるのは、Task.Runの完了に1秒かかり、その完了をawaitしているから。実行順：ADBEFGC
　　　　ADEBFGC
※何度もやると、上のように2パターン実行順ができる。実行順：コンパイルエラー
実行順：ADEFGBC
　　　　この1パターン。このパターンは、全部の処理を上から順に実施するので、Taskに分けている意味がないと思われる。実行順：ADGEFBC
　　　　ADEGFBC
　　　　実際には起きなかったが、ADEFGBCもあり得るとおもう。


