More than 1 year has passed since last update.MVVMモデルを採用したWPFにおいて、Viewの状態変化に伴って実行される処理を定義したい場合に使用されるテクニックです。
MVVMの思想上View、つまりコードビハインドに処理を書くのはご法度ですが、
Viewで完結する処理をViewModelに書くのもあまりいいとは言えません。そこで、WPFの添付プロパティを自作する処理にまとめてコードビハインドに書きたかった処理を記載することで
Viewのビヘイビア（= 振る舞い）を表現するテクニックになります。ざっくりとした添付ビヘイビアのイメージは以下の通りです。
実際に作成してみたビヘイビアがこちら。添付プロパティで True を指定したコントロールで右クリックするとポップアップが表示されるものになります。まずは DependencyProperty.RegisterAttached() を利用してDependencyPropertyインスタンスを 生成します。
DependencyProperty.RegisterAttached() が要求する4つの引数には次の内容を記載します。DependencyProperty インスタンスの生成に必要な PropertyMetadata インスタンスですが、
デフォルトコンストラクタの他に4種類のオーバーロードで用意されていて、状況に応じて使い分けることになります。
各コンストラクタの引数は以下の通りです。今回使用したのはこのコンストラクタです。添付プロパティのデフォルト値と、値が変更された際のcallbackを指定しています。
※callbackがどのように使用されるかは後述添付プロパティの値を取得するためのメソッドを定義します。
引数の DependencyObject の GetValue() メソッドの戻り値を
「1. DependencyPropertyインスタンスを生成」でRegisterAttached() の第2引数に指定した
型でキャストして返します。
※第2引数はプロパティの型でしたGetterのメソッド名は必ず Get + プロパティ名 とする必要があります。
今回の場合だとプロパティ名を ShowMessage としているので、Geeterのメソッド名は GetShowMessage となります。添付プロパティの値を設定するためのメソッドを定義します。
引数の DependencyObject の SetValue() メソッドを使用して設定を行います。Getterと同じく、Setterのメソッド名も必ず Set + プロパティ名 とする必要があります。
そのため今回の場合だと、メソッド名は SetShowMessage となります。値が変更されたときに実行するcallbackメソッドを定義しています。
これは「1. DependencyPropertyインスタンスを生成」で登場した
PropertyMetadata コンストラクタの第2引数として使用されています。この中で少し独特だなと感じたのはこの部分でした。DependencyPropertyChangedEventArgs の e で変更前と変更後の値を取得できるのですが
今回は特に何かしらの処理で値を変更するといった処理は行っていません。
にもかかわらず、変更前・変更後どちらからも値が取得できるようになっていました。
デバッグして確認してみたところ、どうやら値を変更するような処理を行っていなくても
変更前の値である e.OldValue にはデフォルト値が設定されているようでした。
で、このデフォルト値がどこで指定されているかというと...DependencyProperty インスタンス作成時に指定していました！
初期値がfalseなので実質添付プロパティでTrueを指定するとcallbackメソッドが実行されるとなっています。このビヘイビアを実際に使用するためのXAMLと使用結果は以下の通りです。実行結果はこんな感じ。


