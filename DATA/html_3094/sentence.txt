c#からSlackにメッセージを投稿したかったのでやってみました。
Incoming WebHooksを使って投稿するなどの記事が多く見かけますがこれだとスレッドに返信できないので。
今回ではchat.postMessageを使用します。なぜ今回c#でのSlackに投稿したいかなのですが
Windowsサービスアプリでリモート接続検知→PCが接続した（切断した）をSlackに投稿したかったからです。
また頻繁に接続するとチャンネルが接続通知であふれかえるのでスレッドに返信できるようにして見た目をすっきりしたい目的もあります。※2021/0524リモート接続検知してSlackに投稿する記事を書きました。
【c#】リモートディスクトップ接続を検知してSlackに投稿するWindowsサービスを作成する・Visual Studio 2019
・Slackアプリ(Windowsアプリ版)確認などのために自分のSlackアカウントは作成しておきましょう。
最終的には投稿したいSlackのワークスペースでAPIを作成して運用することになると思います。Slack APIからアプリを作成します。よくサイトの場所を忘れるので私はいつも・Slackアプリから設定と管理 &gt; App管理からSlackの管理サイトへ行き・ビルドを選択します・Create New Appから・今回はゼロからアプリの設定をしていきます。ワークスペースは後で変更できないので注意してください。・Slackの通知でよく見かけるIncoming WebHooks今回は使いません。・OAuth&amp;PremissionsからScopesを設定します。・メッセージを投稿したいのでchat:writeに設定します。・ここまで設定するとワークスペースにインストールできるようになるのでインストールします。・リクエスト権限を聞かれた場合は許可しましょう。・今回はbotとして投稿したいのでBot User OAuth Tokenのxoxb-・・・を使用します。・投稿したいチャンネルに対して詳細&gt;その他&gt;"アプリを追加する"・先ほど作成したアプリを追加します。・Slackに投稿するための準備はできましたのでWindowsコンソールアプリから投稿してみましょう。
新しいプロジェクトを作成を選択して。・コンソールアプリを選択
(Windowsアプリでもいいですがボタンを作ったり面倒なので簡単な確認ではいつもコンソールアプリを選択しているだけです。)コンソールアプリで作成したプロジェクトをこのようにします。チャンネルに投稿したメッセージの戻り値のtsをスレッドに投稿したいメッセージのthread_tsに入れることによってスレッドの投稿を可能にしています。・デバッグ実行・無事に投稿できスレッドに投稿もできました。chat.postMessage/test・SlackAPIをやり取りするときにjsonで情報が返ってきますがjsonを手動で定義するのが面倒です。
上記のメッセージのテストが成功すると下記のようなjsonが返ってくるのでコピーしてください。・貼り付けたい行で編集&gt;形式を選択して貼り付け&gt;JSONをクラスとして貼り付けると
コードにも書かれているRootobjectクラス以下が自動で生成されます。c#なのでUnityなどを使ってもよかったですがコンソールアプリで行っています。(最終的にはWindowsサービスを作りたかったので)
SlackのAPIは様々なことができるので他の設定にした場合どのようなことができるのかいろいろ試すといいかもしれません。
次回はリモートデスクトップ接続を検知してこちらで作成したSlackAPIを使ってメッセージを投稿する記事を書ければと思っています。Slack APIを使用してメッセージを送信する
VisualStudio コピペ JSONをClassとして貼り付けられるtips


