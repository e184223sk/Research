
var PlayerForward = Player.transform.forward;
var ToEnemyVec = Enemy.transform.position - Player.transform.position;
ToEnemyVec = ToEnemyVec.normalized;

float SinPlayerToEnemy = cross_2d(PlayerForward, ToEnemyVec);
float CosPlayerToEnemy = dot_2d(PlayerForward, ToEnemyVec);

//第何象限に敵が位置しているか
int State = 0;
//第一象限のとき
if (SinPlayerToEnemy &gt; 0 &amp;&amp; CosPlayerToEnemy &gt; 0)
{
    State = 0;
}
//第二象限のとき
else if (SinPlayerToEnemy &gt; 0 &amp;&amp; CosPlayerToEnemy &lt; 0)
{
    State = 1;
}
//第三象限のとき
else if (SinPlayerToEnemy &lt; 0 &amp;&amp; CosPlayerToEnemy &lt; 0)
{
    State = 2;
}
//第四象限のとき
else if (SinPlayerToEnemy &lt; 0 &amp;&amp; CosPlayerToEnemy &gt; 0)
{
    State = 3;
}

float Rad = Mathf.Asin(SinPlayerToEnemy);

//Asinでは(-π/2,π/2)の範囲しか表せないので、象限によって範囲を(-π,π)に拡張する
switch (State)
{
    case 0:
        break;
    case 1:
        Rad = Mathf.PI - Rad;
        break;
    case 2:
        Rad = -Mathf.PI - Rad;
        break;
    case 3:
        break;
}

RadText.text = "Rad:" + Rad;

