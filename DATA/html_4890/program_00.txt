private static void Zundoko()
{
    var output = new StringBuilder();
    var rnd = new Random();

    string[] seedArr = new string[] { "ズン", "ドコ", "キ・ヨ・シ！！" };    // 出力の配列
    var answerArr = new int[] { 0, 0, 0, 0, 1 }.ToList();   // 正解の配列(ToListはindexのため利用)
    var idxs = Enumerable.Range(0, answerArr.Count);        // 整列のためのindex
    var resBytes = new byte[answerArr.Count];               // 乱数を格納するbyte配列

    while (true)
    {
        rnd.NextBytes(resBytes);    // byte列を一括で取得
        var rdmList = resBytes.Select(x =&gt; x % 2).ToList();                     // Mod 2で0,1のindexに変換
        var results = idxs.Select(idx =&gt; answerArr[idx].Equals(rdmList[idx]));  // 並び順の比較

        // results(IEnumerate&lt;bool&gt;)の結果がすべてtrueなら
        if (results.All(x =&gt; x))
        {
            // キ・ヨ・シ！！のindexを追加
            answerArr.Add(2);
            var resStr = string.Concat(answerArr.Select(x =&gt; seedArr[x]));  // 出力の文字列を生成
            output.AppendLine(resStr);
            break;
        }
        else
        {
            var resStr = string.Concat(rdmList.Select(x =&gt; seedArr[x]));    // 出力の文字列を生成
            output.AppendLine(resStr);
        }
    }

    Debug.Print(output.ToString());     // 結果の出力
}

