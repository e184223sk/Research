
private static string Zundoko4(string inputStr, string lastStr = "")
{
     // ここが重要
     // inputStrを分解し、重複を削除してから結合
     var seedArr = string.Concat(inputStr.Select(x =&gt; x).Distinct());  
     // inputStrをseedArrのindexに置き換え  
     var answerArr = inputStr.Select(x =&gt; seedArr.IndexOf(x));    

     var resStack = new Stack&lt;int&gt;();
     int lastIdx = answerArr.Max() + 1;
     var rnd = new Random();
     int rndTimes = 0;
     string resStr = string.Empty;
     sw.Reset();
     sw.Start();

     Debug.Print("seedArr: {0}", seedArr);
     while (!resStack.Contains(lastIdx) &amp;&amp; sw.ElapsedMilliseconds &lt; 1000)
     {
        rndTimes++;
        // 0～lastIdx未満の整数を追加
        resStack.Push(rnd.Next(0, lastIdx));
        // 比較用に反転
        var revStack = resStack.Reverse();

        // 答えと並びが一緒であること
        if (!revStack.SequenceEqual(answerArr.Take(resStack.Count)))
        {
            resStack.Pop();
        }
        else if (resStack.Count == answerArr.Count())
        {
            resStack.Push(lastIdx);
            resStr = string.Concat(inputStr, lastStr);
        }
     }

     sw.Stop();
     return string.Format("{0}, {1}, {2}", rndTimes, sw.ElapsedMilliseconds, resStr);
 }

