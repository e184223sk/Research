今回はNUnitのAttributeで最も重要な
テストメソッド、テストクラスに付けるAttributeを調べてみた。▼NUnit関連記事
[.NET][C#]NUnitを使用して単体テスト自動化　基本編
[.NET][C#]NUnitを使用した単体テストのカバレッジレポートを自動生成する
[.NET][C#]NUnitのClassic Modelアサーションメソッド一覧 ※Assertクラス
[.NET][C#]NUnitのStringAssertアサーションメソッド一覧
[.NET][C#]NUnitのCollectionAssertアサーションメソッド一覧
[.NET][C#]NUnitのFileAssert・DirectoryAssertアサーションメソッド一覧.NET：3.1.401
C#：8.0
NUnit：3.12.0ソースコードがテスト用のものであることを実行環境に伝えるマーキングで
テスト用のクラスやメソッドに付ける。
また、テスト用のパラメータの指定や事前・事後処理などの実行順序の定義するものなど、様々なAttributeがある。今回はNUnitを実行するために必須である
テストクラス、テストメソッド系のAttributeを試す。テストクラスであることを示すAttribute。上記のようにクラスに付ける。
クラスに[TestFixture]が付いているだけではテストが実行されるわけではなく、
[Test]や[TestCase]といったAttributeが付いたテストメソッドを持たないといけない。
逆にテストメソッドがあるのであれば[TestFixture]は無くてもいい。上記のようにテストコード中の型を固定したくない場合は、
テストクラスにジェネリクスを付け、[TestFixture]の引数にType型を指定する。上記のようにテストクラスのコンストラクタの引数を指定することもできる。
引数の型と数は、テストクラスのコンストラクタの引数と一致させる必要がある。
上記の場合、テスト実行時に各パラメータがコンストラクタに指定されたParamTestFixtureオブジェクトが3つ生成され、それぞれのテストメソッドが実行される。テストクラス内の各メソッドで一貫したテストパラメータを使用したい場合は使うと良さそう。テストクラスに付けるAttribute。
変数等の要素をテストのパラメータとして指定することが可能。クラス内のフィールド、プロパティ、メソッドをテスト用のパラメータとして指定できる。
フィールドの場合、上記のように変数名を指定する。
指定するパラメータはいずれもstaticである必要がある。上記例ではパラメータに配列を使用しているが、コレクション（IEnumerable実装クラス）でも可。
[TestFixture]でパラメータを指定するのと同様、
コンストラクタのメソッドシグニチャとパラメータの位置や型を一致させる必要がある。上記のように別クラスの変数、プロパティ、メソッドを指定することも可能。
[TestFixtureSource]の第一引数にパラメータを持つクラスのType型、第二引数に変数名などを指定。使用できるパラメータの条件などは、パラメータのみ指定する場合と同じ。上記のようにパラメータを生成するメソッドを指定することもできる。
上記例では単純にパラメータの配列を返しているだけだが、
ロジカルにパラメータを増幅、生成することも可能だ。テストメソッドであることを示すAttribute。このAttributeを付けたメソッドがテストメソッドとして実行される。
下記のAttributeパラメータを指定できる。Description：テストの説明
ExpectedResult：テスト想定結果ExpectedResultを指定する場合は、メソッド中Assertクラスによるアサーションはせず、テスト対象の実行結果を戻り値として返すようにする。簡単なテストなら上記で良いが、
後記の[TestCase]では上記以上のことができるため、
[Test]は使わず[TestCase]で統一していいかもしれない。テストメソッドであることを示すAttribute。
[Test]よりも多機能。[TestCase]のみの指定であれば[Test]のみ指定するのと同じ。
上から2番目の例のようにテストメソッドに引数を指定することが可能。
また、3番目のように引数と想定結果を指定することも可能。ExpectedResultの他にも様々なAttributeパラメータが指定できる。
あまり指定しすぎるとゴチャゴチャするので、
[Category]などはそれ用のAttributeを指定するのがいいかもしれない。テストメソッドであることを示すAttribute。
変数等の要素をテストのパラメータとして指定することが可能。
[TestFixtureSource]のテストメソッド版。上記例のように自クラスの配列もしくはコレクションをテストメソッドのパラメータとして指定できる。
パラメータとして指定するものはstaticである必要がある。
使用時の制約としては、[TestFixtureSource]と概ね同じ。上記のように外部のクラスが持つstaticフィールド等をパラメータとして指定することも可能。また、上記のように[TestCaseSource]の第一引数に配列・コレクションを返すメソッド、第二引数にそのメソッドの引数を指定することで、
パラメータをロジカルに生成することが可能。
上記のテスト実行結果は下記となる。場合によっては様々なパターンのパラメータをテストすることもあるだろうし、それをテストコードにハードコードするのは苦しい場面もあるだろう。
そういったときにこれは便利な機能だと思う。今回記載したAttributeとアサーションメソッドを知っておけば
最低限のテスト実施自体はできると思う。
が、やはりテストのパフォーマンス等を求めるとなると事前・事後処理用のAttributeは欲しいし、
カテゴライズしたり無効にしたりするAttributeも使う機会はあるだろう。そこらへんはまた今度NUnit公式：Attribute一覧ページ


