using System;
using System.Collections.Generic;
using System.Linq;

namespace Gushwell.Etude {
    class Program {
        static void Main(string[] args) {
            var pn = new NParasiticNumber();
            for (int n = 1; n &lt;= 9; n++) {
                var ans = pn.Get(n);
                Console.WriteLine("{0}: {1}", n, ans);
            }
        }
    }

    // n 倍すると右へローテートシフトする数を求める
    class NParasiticNumber {

        public string Get(int n) {
            var candidates = Candidates(n).ToArray();
            var min = candidates.Min(s =&gt; s[0]);
            return candidates.First(x =&gt; x[0] == min);
        }

        public IEnumerable&lt;string&gt; Candidates(int n) {
            var found = false;
            for (int digits = 1; digits &lt; int.MaxValue; digits++) {
                for (int i = 1; i &lt;= 9; i++) {
                    var candidate = GetCandidate(n, i, digits);
                    if (candidate != null) {
                        yield return candidate;
                        found = true;
                    }
                }
                if (found == true)
                    break;
            }
        }

        // 1桁目がfirstDigitであるn-Parasitic_numberを求める。
        // ただし、最大桁はmaxDigitsまでとし、これを超えたら、nullを返す。
        private string GetCandidate(int n, int firstDigit, int maxDigits) {
            int b = firstDigit;            // 求める数値の現時点での最上位桁の数
            string r = b.ToString();       // 求める数を文字列として保持
            int carry = 0;                 // 繰り上がりの数
            while (true) {
                                           // 例えば N=6,firstDigit=4の場合、最初のループでは、
                int a = b * n + carry;     //   a &lt;- 24 (= 6 * 4 + 0)
                int m = a % 10;            //   m &lt;- 4 (= 24 % 10)
                carry = a / 10;            //   carry &lt;- 2 (= 24 / 10)
                b = m;                     //   現時点での最上位の桁の数は 4 である。
                if (carry == 0 &amp;&amp; b == firstDigit &amp;&amp; r[0] != '0')
                    break;
                r = b.ToString() + r;
                if (r.Length &gt; maxDigits)
                    return null;
            }
            return r;
        }
    }
}

