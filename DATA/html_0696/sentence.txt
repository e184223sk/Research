この記事は昔はてなブログに書いた記事C#でC++のcinっぽいのに詳細説明を加筆し、細部を修正したものです。入力コード出力（入力と全く同様）C++ではcinを用いて空白・改行区切りのテキストデータを簡単に読み込むことができます。先ほども例示したというデータは、というC++コードで読み込めます。
標準出力への書き出しのために用いているcoutについての説明は割愛し、cin周りのコードについて説明します。
cin &gt;&gt; N;では標準入力から数値を読み込んでおり、cin &gt;&gt; name; では標準入力から文字列を読み込んでいます。また、 cin &gt;&gt; A &gt;&gt; str &gt;&gt; B のように、コード１行で複数の値を読み込むこともできます。読み取られるデータは空白・改行に従って適切にトークン化されてから解釈されます。ここから考えるに、上のcinの用法が使い勝手が良い理由には以下のエッセンスがありそうです。上記エッセンスを実現したCinクラスを作成します。標準入力はクラスの初期化時にまとめて読み込むことにし、tokenに区切ってtokensプライベートフィールドに保存しておくこととします。tokensフィールドは先頭から一つづつ値を取り出していく用途で用いられるので、 Queueというデータ構造で持ちます。int N = cin; のような書き味を目指します。
Cinクラスのインスタンスcinからint型の値を取り出すために暗黙の型変換を活用（悪用？）します。queueからtokenを一つ取り出し、intにパースした結果を返す型変換子を定義しています。この型変換は副作用を持っています。(Dequeueメソッドはqueueの先頭の値を返して、queueからその値を削除します。）行儀が悪いですが、行儀にはcinっぽい書き味の尊い犠牲になってもらい、今回は気にしないこととします。ここまでで以下のようなコードが動くようになっています。トークンごとに整数型の値を読みだせるようになりました。書き手は変換メソッドを明示的に呼ぶ必要がありません。string str = cin; のような書き味を目指します。
実装は整数型の読み込みとほぼ変わりません。整数へのパースが不要な分、よりシンプルになっています。ここまでで以下のようなコードが動きます。整数型か文字列型かを区別せずに、同一の = cin で値が取り出せています。(int A, string str, int B) = cin;のような書き味を目指します。
csharp　にはユーザー定義クラスによる分割代入を可能にするための機能があります。今回はこれを使用します。(int a, string b) = cin を可能にするためには以下のdeconstructメソッドを定義すればよいです。少し複雑なので順を追って説明します。まずo1, o2にはthisが代入されているので、(int a, string b) = cinは(int a, string b)=(cin, cin)と同じになります。この左右のcinがそれぞれ先ほど定義した暗黙の型変換子によりint, stringに変換されます。
これと同様のdeconstructメソッドを実用しそうなタプルの要素数まで定義します。以下では要素数８のタプルまで定義しました。ここまでで以下のコードが動きます。1行で複数の変数に値を取り出せるようになりました。C#でもC++のcinと似た使い勝手のクラスを作成することができました。
今回のコードはここです。


