using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CornerKick : MonoBehaviour {

    [SerializeField] Transform m_Target; // 目標地点
    [SerializeField] Transform m_KickerTransform; // コーナーキックの位置
    [SerializeField] GameObject m_ProjectilePrefab; // ボールのプレファブ
    public float gravity = 9.8f;
    public float firingAngle = 45.0f;

    void Awake() {
        m_KickerTransform = transform;
    }

    void Update () {
        if(Input.GetKeyDown(KeyCode.R)) {
            RightShoot();
        }
        if(Input.GetKeyDown(KeyCode.L)) {
            LeftShoot();
        }
    }

    void RightShoot() {
        m_KickerTransform.position = new Vector3(17f, 0, 32f);
        StartCoroutine ("Shoot");
    }
    void LeftShoot() {
        m_KickerTransform.position = new Vector3(-17f, 0, 32f);
        StartCoroutine ("Shoot");
    }

    IEnumerator Shoot() {
        Transform m_ProjectileTransform = Instantiate (
            m_ProjectilePrefab,
            m_KickerTransform.position + new Vector3 (0f,0f,0f),
            Quaternion.identity
        ).transform;

        float target_distance = Vector3.Distance (m_ProjectileTransform.position, m_Target.position);
        float projectile_velocity = target_distance / (Mathf.Sin(2 * firingAngle * Mathf.Deg2Rad) / gravity);

        float vx = Mathf.Sqrt (projectile_velocity) * Mathf.Cos (firingAngle * Mathf.Deg2Rad);
        float vy = Mathf.Sqrt (projectile_velocity) * Mathf.Sin (firingAngle * Mathf.Deg2Rad);

        float flight_duration = target_distance / vx;

        m_ProjectileTransform.rotation = Quaternion.LookRotation (m_Target.position - m_ProjectileTransform.position);

        float elapsed_time = 0;

        while(elapsed_time &lt; flight_duration){
            m_ProjectileTransform.Translate (
                0f,
                (vy - (gravity * elapsed_time)) * Time.deltaTime,
                vx * Time.deltaTime
            );
            elapsed_time += Time.deltaTime;
            yield return null;
        }

        // 到達した後の処理はこの下に
    }
}

