More than 3 years have passed since last update.C++にとってGUI開発はお手軽ではなくGUI部をC#で開発することもよくあります。しかし、残念ながらC#とC++間のデータ交換は容易ではなく結構苦労します。
私はC++用のシリアライザTheolizerを開発してますが、これはメタ・シリアライザ機能を実験的に持っており、それを使ってC#とC++を簡単に連携できる可能性がありますのでトライしようと考えています。（Javaなどの他の言語とのお手軽連携も可能ですが、私がC#に慣れているので）しかし、C#がC++の速度に追いついたという記事をちらほら見かけます。もし、それが多くのケースで成り立つのであれば、わざわざ連携するより最初からC#で全て開発した方が速いです。（C++erにとってC#の構文をマスターするのはそれ程難易度の高いことではないです。びっくりする程似てますので。）
そこで、実際のところどうなのか比較してみました。結論としては、C#の方が高速な場面はありますが、多くの場面でC++の方が高速です。CPUをぶん回すようなプログラムを開発する必要がある時、C#でC++を凌駕するのは現実的ではありません。やはり適材適所で使い分けするのが妥当という、ある意味当たり前の結論となりました。
それぞれの言語の狙い通り、C#は処理速度と生産性のバランスが重要な時、C++は多少生産性を犠牲にしても処理速度が必要な時に用いると良いです。評価に用いたソース・コードはGitHubのリポジトリCompareSpeedにてMITライセンスにて公開しています。興味のある方は御覧ください。評価時に使用した環境は以下の通りです。また、計測した時間の単位は特記無き場合mSecです。「C# C++ 速度」で検索するとトップの方に出て来る気づいたら、C# が C++ の速度を凌駕している！のシリーズから続) 気づいたら、C# が C++ の速度を凌駕している！を検証してみました。（メモリ獲得／解放を除いた部分を比較しているので分かりやすいです。）リンク先の記事の評価対象のソースを引用させて頂き、C#側はStopwatch、C++はstd::chrono::system_clockを使用して処理時間を計測しました。
計測はそれぞれ100回測定し、平均値と3σ(簡単のため母分散を使用)を求めました。リンク先の記事とほぼ同じ結果がでてます。この検証についてですが、他の検証記事でC#の方がそれなりに遅いという結果がでている場合もあります。一見矛盾するようにも見えますが、当記事の最後の方に記載しているようにC#の処理速度は再現性が微妙です。ソースを修正すると修正していない部分の速度が遅くなることが時々あります。
今回の記事は気がついた範囲ではC#側が高速になるよう安定する状態で計測しています。そこまで追求しなかった場合、C#側の速度が遅くなる結果になることは十分に考えられます。C#は思わぬ時に速度が低下します。リンク先記事は、4321 x 6789ピクセルの1ピクセル1バイトのグレイスケールの画像を想定し、アラインを取るため1行は4324バイト確保しています。合計4324*6789バイトのメモリを用意し、内4321*6789バイトへバイト書き込みしています。このままでは、獲得するメモリ・サイズなど条件を振る際に手間がかかりそうですので少し単純化しました。4321*6789バイト確保し、その全てへバイト書き込みます。なお、このテスト以降、各テストに「係数(sFactor)」を導入し、テストに掛かるリアル時間を100ミリ秒～1秒程度に収めるようにsFactorの値を設定しています。（テストの繰り返し数をsFactorで割り、計測した時間をsFactor倍して換算してます。）最初にトライしたものは、C#マネージド1（平均1,584mSec）とC#アンセーフ1（平均1,780mSec）でした。何故かマネージドの方が速いのです。元の評価記事とあまりに異なりますし、一般的に知られている傾向とも異なりますので少し追求しました。最初に処理時間を計測したソースは以下の通りです。
kCountLai=4321*6789、kCountLao=100、sFactor=1です。
C++は元サイトの検証時と同等ですが、C#は随分異なります。ほぼ元サイトのパラメータと同じなのでこんなに差がでるのは変です。C++：平均時間1,615mSec（元サイト検証プログラムの平均時間1,622mSec）C#マネージド1：平均時間1,584mSec（元サイト検証プログラムの平均時間2,371mSec）C#アンセーフ1：平均時間1,780mSec（元サイト検証プログラムの平均時間1,593mSec）大きな差は、内側のループを別メソッドで処理しているかいないかのように思いました。流石に100回程度のメソッド・コールでこんな差がでるとは思えないのですが、やってみたらビンゴ！でした。C#マネージド2：平均時間2,370mSec（元サイト検証プログラムの平均時間2,371mSec）100回しか呼び出しておらずメソッド・コールがそんなに遅いとか有り得ないため、試しに設定バイト数を半分に減らしてみました。平均時間はほぼ半減しました。ある意味当たり前ですね。
しかし、メソッド呼び出し回数はどちらも100回ですから、処理時間のほとんどがメソッド呼び出し時間ではなくメモリ書き込み時間であることが分かります。
2-2-1.と2-2-2.のマネージドの結果はメソッド呼び出しするかしないかのみの相違です。メソッド呼び出しそのものの時間はほぼ無視できるため、メソッド呼び出しを挟むことによりメモリ書き込み時間が遅くなる（1,589mSec → 2,373mSec）と結論できます。メソッド呼び出しの有無でメモリ書き込み時間が変わる理由は分かりませんが、1回目の書き込み時に物理アドレスが割り当たっていることをチェックするので遅く、2回目以降は割り当て済みなので速く、メソッド呼び出しを挟むと常にチェックが働いて遅いのかも？と想像してます。　真の原因は掴めていません。C#マネージド3：平均時間1,187mSec（全バイト書込時の平均時間2,370mSec）こちらも元サイトと異なる結果になりました。差はメソッド呼び出しているかどうかですが、先の検証からメソッド呼び出し自体は原因ではない筈ですので、ポインタ渡しをシミュレート（aArrayFixed2へ設定してアクセスする）してみたところ再現しました。C++erにとっては意外なことで速度が変わります。C#アンセーフ2：平均時間1,581mSec（元サイト検証プログラムの平均時間1,593mSec）大きくC#にC++が負けているのが約200バイトまでのメモリ獲得と設定処理です。
10バイト～10,000,000バイトまでを10倍づつ増やして計測しました。1,000バイト以上についてsFactorを10から10倍づつ増やしてリアル時間がほど同等になるよう制御しています。（計測に多量の時間がかかると辛いので）
（対数目盛です。ご注意下さい。）グラフをざっと読んで約200バイトを超えるとC++のほうが高速ですが、それ未満の場合C#の方が速く、10バイトくらいですと4～5倍の差が開いてます。
元々C++で高速処理が必要なループ内でnew/deleteすることは無いとは思いますが、もしどうしてもそれが必要な時はC#の方が高速そうです。（他にガベージコレクションの影響が有る筈ですので状況によります。）C++のソース：C#マネージドのソース：C#アンセーフのソース：単に10,000,000回のループを回して処理時間を計測しました。volatile変数へ設定
最適化でループの外に追い出されるのを回避するため、Volatileメモリへ設定しています。C#の方が高速ですが微差です。通常変数へ設定
ループ最適化されるかどうかを比較するため、１つだけ通常のメモリへ設定してみました。C++は最適化によりループが消えてしまいました。C#はそのような最適化はされないようです。i^j計算とi%10計算
作業途中で剰余を使うとC#が遅くなることに気がついたので、元サイトで使っている排他的論理和(i^j)と剰余(i%10)の処理時間を比較してみました。
C++の方が高速です。(i^j)は微差ですが(i%10)はそこそこ差がつきました。インライン展開
インライン展開はinline指定せず最適化による自動展開の有無を計測しています。残念ながらC#は最適化では展開されないようです。C++の方が大幅に高速です。文字列を1文字づつ増やす(最大100文字)
文字列処理もちょっと気になったので比較してみました。1文字づつ増やして最大100文字まで増やす処理です。
C++は小メモリ獲得が遅いためC++の方が遅いと予想したのですが、意外にC++の方が大幅に高速でした。文字列処理に大幅な速度差があるのかも知れません。１．「volatile変数へ設定」のソース２．「通常変数へ設定」のソース３．「i^j計算とi%10計算」のソース４．「インライン展開」のソース５．「文字列を1文字づつ増やす(最大100文字)」のソースdouble型メンバ２つのみ持つComplexクラスをローカル変数としてコンストラクトしメンバ変数読み出しで比較しました。
C#でスタックに獲得するにはかなり特殊なことをするしかなく一般にヒープから獲得するのでヒープを使いました。
C++は一般にスタックに獲得するのでスタック変数としています。比較のためヒープからも獲得してみていますが、予想通り非常に遅いです。C++のソース：C#のソース：ジェネリック関数と関数テンプレートはC#とC++の同等な機能です。単純な2変数のmax()関数について比較してみました。比較のため非ジェネリック、非テンプレートのint型処理max()関数も測定しています。なお、string型は最適化を防止するため、ループ変数のi, jを文字列へ変換後、辞書順比較して、結果をint型へ戻してます。ですので、ジェネリック／テンプレート処理だけでなく数値と文字列変換時間も含まれています。C++のソース：C#のソース：検証していてC#側は結果がなかなか安定せずたいへんでした。他のテストも纏めてテストしているのですが、テストを追加していくと、何も修正していない別のテストが遅くなることが時々あります。１つの関数を大きくしない方が安定する傾向があったため、現在はかなり細切れにすることでできるだけC#側で良い結果が出る状況でテストしています。
C++ではそのような不安定さには気が付きませんでした。意外にC#は検討しています。巷で言われているようにC#がC++を凌駕している部分も確かにありました。特に顕著な差があるのは小サイズのメモリ獲得(new)です。しかし、それはC++で高速処理を書く際には一般に避ける使い方です。逆にC#がC++より遅い部分をC#の世界だけで回避するのは現実的ではなさそうです。また、C#は比較的頻繁に他の部分のソース修正の影響を受けて修正していない関数の処理時間が変わってしまうため、C#で高速に計算処理するプログラムを追求するのはかなり苦労しそうです。更に、今回、ガベージコレクションを積極的には発生させていません。メモリ使用後、直ぐに参照を外しているため、重たいコンパクションは発生していない筈です。
マイクロソフトはGarbage Collection Notificationsにて記述していますが、サーバ側でガベージコレクションが発生すると最悪クライアントにてタイムアウトする。GCが近づいたことの通知を受け取って他のサーバへ処理をリダイレクトすることができる旨を記載しています。この影響については計測できていません。やはりC#は処理速度よりプログラムの開発生産性を上げる方を優先した言語です。生産性を優先しているとはいえ十分高速ですから、CPUをぶん回すような処理ではなくGUI周辺や他のコンピュータとの通信処理、データベース処理等を記述するにはたいへん優れた言語と思います。そして、CPUをぶん回す必要がある処理はC++で記述し、それ以外の部分をC#で開発することで高速性と納期のバランスを取れるのは良い選択の１つと思います。【補足】
C++とC#の組み合わせだけに言及していますが、実際には他の組み合わせも当然有りえます。可能であれば、JavaとC++の比較もしてみたいのですが、私はJavaの使用経験がほとんどないので適切な評価を行うのはちょっと難しいのです。C++はマルチプラットフォームでビルド出来るようにしてますので、MinGW 5.4.0とgcc
 5.4.0でも走らせてみました。なお、gccは上記Windows 10上のVirtualBoxにインストールしたubuntu 16.04にてテストしました。おまけなので100回ではなく3回の平均です。
また、最適化オプションはCMAKE_BUILD_TYPE=ReleaseにてCMakeにお任せし、64ビットのコンパイラにてビルドしています。MinGW/gccの大量メモリ設定が高速なようですが、恐らくこれはループのオーバーヘッドが少ないのだろうと思います。
gccはMinGWより遅いように見えますがVirtualBoxで動作している影響があるかもしれません。その中で小メモリ獲得と設定性能が優れています。C#に迫る勢いですね。調査中にThe Computer Language Benchmarks Gameを見つけました。
様々な言語で様々なアルゴリズムの性能比較をしています。4コアのコンピュータにてマルチスレッド環境でテストしています。


