
// テスト用の通常メソッド
static int maxInt(int iLhs, int iRhs)
{
    return (iLhs &gt; iRhs)?iLhs:iRhs;
}

// テスト用のジェネリック・メソッド
static Type max&lt;Type&gt;(Type iLhs, Type iRhs) where Type : IComparable
{
    return (iLhs.CompareTo(iRhs) &gt; 0)?iLhs:iRhs;
}

// 通常関数
static void normalInt()
{
    for (int j=0; j &lt; kCount0o/sFactor; ++j)
    {
        for (int i=0; i &lt; kCount0i; ++i)
        {
            sVolatileInt = maxInt(i, j);
        }
    }
}

// int型
static void genericsInt()
{
    for (int j=0; j &lt; kCount0o/sFactor; ++j)
    {
        for (int i=0; i &lt; kCount0i; ++i)
        {
            sVolatileInt = max&lt;int&gt;(i, j);
        }
    }
}

// double型
static void genericsDouble()
{
    for (int j=0; j &lt; kCount0o/sFactor; ++j)
    {
        for (int i=0; i &lt; kCount0i; ++i)
        {
            sVolatileInt = (int)max&lt;double&gt;(i, j);
        }
    }
}

// string型
static void genericsString()
{
    for (int j=0; j &lt; kCount0o/sFactor; ++j)
    {
        for (int i=0; i &lt; kCount0i; ++i)
        {
            sVolatileInt =
                int.Parse(max&lt;String&gt;(i.ToString(), j.ToString()));
        }
    }
}

