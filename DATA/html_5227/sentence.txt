TerrariaPlugin継承して警告を適当に直していればこんな形になりますビルド後はプラグイン名.dllをServerPluginsディレクトリに入れるサーバー通信量増やせばできるけど、まあできません短距離テレポートさせればいいじゃない
※移動加速も1秒に60回通常移動以上の距離テレポートさせれば可能です。通信量の無駄基本的にTerrariaのプレイヤーの移動はPlayerUpdateパケットで送られます。ゴーストも例に漏れません。
なので、PlayerUpdateフックを探してそこで処理します。
HookはOTAPI.HooksかServerApi.Hooks、TShockAPI.Hooksのどれかに大体あります。
...ありませんでした！通信を受け取るところにHookして処理を書きますこれでゴーストが移動しようとしたときに何かしらの処理ができるようになりました。この2つの条件から、ダブルタップ(同じキーを2度押し)でテレポートさせるのが良さそうと考えました。実装する前に、「ダブルタップ」がどういう状態なのかを考えます。
1個の入力に対し、「入力あり」と「入力なし」の2つの状態があります。
「入力あり」から「入力なし」への切り替わりでタイマーをスタートさせ、「入力なし」から「入力あり」への切り替わりでタイマーをストップ、そのタイマーの時間でダブルタップを判断することにしました。実際の実装では、処理速度低減のため、常に1個だけタイマーを動かし、そのタイマーの時間を切り替わりで個別に記録することで判定させています。ゴーストの移動も検知でき、ダブルタップ検知もでき、あとはゴーストをテレポートさせるだけで完成です。楽勝ですね。
しかも、テレポート関数が最初から用意されています！最高です！...とはいかないんですね。テラリアなので。
この関数で、ちゃんとテレポートします(ディスコ杖のテレポートと同じです)。何が問題なのでしょうか？それは、他のプレイヤーからテレポートエフェクトが見える上、ゴーストになったプレイヤーが見えてしまいます。妥協しません。
player.Teleport()がゴミ使えないということがわかったので、※今回のケース
別の方法を使います。テラリアはサーバーから送られてきたプレイヤーデータを正とすることは少なく、例えばテレポートなどがクライアントで処理され、反映されます。他のもの(プレイヤー移動、武器使用など)はクライアントに無視されます。しかし、例外があります。キャラクターがサーバーで管理されている場合です。長かったですが、これで終わりです。
キャラクターを一時的にサーバーサイドキャラクターとして扱い、その後戻すことによってテレポートを実現させています。


