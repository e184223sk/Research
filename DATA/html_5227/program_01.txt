
public override void Initialize()
{
    ServerApi.Hooks.NetGetData.Register(this, OnGetData);
}

protected override void Dispose(bool disposing)
{
    if (disposing)
    {
        ServerApi.Hooks.NetGetData.Deregister(this, OnGetData);
    }
}

private void OnGetData(GetDataEventArgs args)
{
    if (args.Handled)
    {
        return;
    }

    switch (args.MsgID)
    {
        case PacketTypes.PlayerUpdate:
            OnPlayerUpdate(args);
            break;
    }
}

private void OnPlayerUpdate(GetDataEventArgs args)
{
    // ゴーストの時だけ処理
    if (!Main.player[args.Msg.whoAmI].ghost)
    {
        return;
    }

    // 処理するので処理しましたフラグを建てる
    args.Handled = true;

    // 今回はゴーストが移動したときにテレポートさせたいだけなので、一度テラリアサーバーが行う処理と同じことをする。
    BinaryReader reader = new BinaryReader(new MemoryStream(args.Msg.readBuffer, args.Index, args.Length));
    int playerIndex = reader.ReadByte();
    if (playerIndex != Main.myPlayer || Main.ServerSideCharacter)
    {
        Player player = Main.player[playerIndex];

        BitsByte bitsByte = reader.ReadByte();
        BitsByte bitsByte1 = reader.ReadByte();
        BitsByte bitsByte2 = reader.ReadByte();
        BitsByte bitsByte3 = reader.ReadByte();
        player.controlUp = bitsByte[0];
        player.controlDown = bitsByte[1];
        player.controlLeft = bitsByte[2];
        player.controlRight = bitsByte[3];
        player.controlJump = bitsByte[4];
        player.controlUseItem = bitsByte[5];
        player.direction = (bitsByte[6] ? 1 : (-1));
        if (bitsByte1[0])
        {
            player.pulley = true;
            player.pulleyDir = (byte)((!bitsByte1[1]) ? 1 : 2);
        }
        else
        {
            player.pulley = false;
        }

        player.vortexStealthActive = bitsByte1[3];
        player.gravDir = (bitsByte1[4] ? 1 : (-1));
        player.TryTogglingShield(bitsByte1[5]);
        player.ghost = bitsByte1[6];
        player.selectedItem = reader.ReadByte();
        player.position = reader.ReadVector2();
        if (bitsByte1[2])
        {
            player.velocity = reader.ReadVector2();
        }
        else
        {
            player.velocity = Vector2.Zero;
        }

        if (bitsByte2[6])
        {
            player.PotionOfReturnOriginalUsePosition = reader.ReadVector2();
            player.PotionOfReturnHomePosition = reader.ReadVector2();
        }
        else
        {
            player.PotionOfReturnOriginalUsePosition = null;
            player.PotionOfReturnHomePosition = null;
        }

        player.tryKeepingHoveringUp = bitsByte2[0];
        player.IsVoidVaultEnabled = bitsByte2[1];
        player.sitting.isSitting = bitsByte2[2];
        player.downedDD2EventAnyDifficulty = bitsByte2[3];
        player.isPettingAnimal = bitsByte2[4];
        player.isTheAnimalBeingPetSmall = bitsByte2[5];
        player.tryKeepingHoveringDown = bitsByte2[7];
        player.sleeping.SetIsSleepingAndAdjustPlayerRotation(player, bitsByte3[0]);

        // ゴーストを短距離テレポート
        ShortTeleportGhost(player);

        // ゴーストにタイル情報送信
        RemoteClient.CheckSection(playerIndex, player.position);
    }
}

private void ShortTeleportGhost(Player player)
{
    // 今は何もしない
}

