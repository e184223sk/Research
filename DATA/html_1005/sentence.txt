More than 1 year has passed since last update.Seleniumを使ったOutDoc（オープンソースのOutSystemsドキュメント出力モジュール）を操作するコードを書いてみました。
ログインから生成されたドキュメントのスクリーンショットを取るところまで。
ただし、長くなったので、1ページずつ取得する画像を1枚にまとめる手順は別途。Personal Environment(Version 11.8.0 (Build 12006))
Service Studio(Version 11.7.15)
Visual Studio Code(Version 1.47.2)あと、NuGetで、以下のSeleniumライブラリを入れています。
Selenium.WebDriver(Version 3.141.0)
Selenium.WebDriver.ChromeDriver(Version 84.0.4147.3001)
Selenium.Support(Version 3.141.0)ChromeDriverを使う時は、Chromeとバージョンを揃えないと以下のようなエラーが発生しました。型 'System.InvalidOperationException' のハンドルされていない例外が WebDriver.dll で発生しました: 'session not created: This version of ChromeDriver only supports Chrome version 84 (SessionNotCreated)'ビルドしたら、.exeと同じ場所にappsettings.jsonをコピーして、PEのURLとログインアカウント、パスワードを設定。実行は、以下のようにモジュール名をパラメータにする。
.\OutDocExporter.exe HousesoftSampleReactiveログインからドキュメント出力までは以下のように動きます。
なお、OutDocはTraditional Webという種類のモジュールであるため、各要素のセレクターにidを使うことができません。idが自動生成されるため。UIテストの文脈で進められているデザインパターン。
各ページ毎に操作用のクラスを分割し、ページ内の操作をクラス内に閉じ込めることで、読みやすく、変更に強くなる。
これから作るのはUIテストではないが、わかりやすさのために踏襲する。このページは中身がないので、赤枠のタブを開くだけの処理。トップメニューで、「eSpaces」を選択すると開く画面。画面を開くと、ローディングアイコンが表示されます。しばらくしてドキュメントの準備ができると「Open Documentation」というボタンが表示される。このボタンをクリックすると、目標のドキュメントが開きます。以前は、FirefoxDriverを使うと、ページ全体のスクリーンショットを取れたようですが、今は仕様変更でだめでした。
よって、スクリーンショット撮影　→　縦方向にスクロールを繰り返してページ全体のスクリーンショット群を取得する処理にしています。処理が長くなりすぎたので、画像を1枚にまとめるのは別の機会に。Chromeでフルサイズのスクリーンショットを撮るためのパッチ
を参考にしました。OutDocの場合は、横スクロールが必要ないので、縦方向のみにしています。


