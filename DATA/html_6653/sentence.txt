More than 3 years have passed since last update.2017/3/1追記 : Pythonの説明がやや不正確だったため追加の記事を書きました → 参照についてもう少し詳しく ~PythonとJavaを例に~ありきたりな話題ではあるけど、値渡しとか参照渡しとか、変数を関数に渡した時の挙動について自分もまとめてみることにした。ほとんどの言語では、プリミティブ型とそれ以外で挙動が違う。
言語によって若干異なるものの、プリミティブ型は概ねこんな感じ。それ以外の配列、クラス、構造体などをここではオブジェクトと呼んでいる。関数に渡した際にその値をコピーした新しい変数が作られ、それが仮引数になる。
関数内で仮引数を変更しても呼び出し元の変数は変化しない。
C++、Java、Pythonの例。結果はいずれも以下の通り。こんな感じでプリミティブ型はほとんどの言語で値渡しになる。
また構造体とクラスの区別がある言語だと、C#やSwiftのように構造体を値渡し、クラスを参照渡しや参照の値渡しと規定してたりする。関数に渡される実引数と仮引数がメモリ上で同じ場所を指すようになる。いわば同じものに対する「別名」を作る感じ。
関数内で仮引数を変更するとそれが呼び出し元にも反映される。
C++、C#、Swiftの例。結果はこんな感じ。共有渡しとも。大抵の言語はオブジェクトを渡すときこの形態になる。
これを参照渡しと呼ぶこともあるけど、以下のように実際には少し違う。
Java、C#、Pythonの例。結果はこう。このように、仮引数に新しいオブジェクトを割り当てた時の挙動が参照渡しと違っている。
C++では、以下のようにポインタを渡すようにすると上と同じ挙動になる。実用上は生ポインタじゃなくてstd::shared_ptrとかを使うべきなんだけど、今回は比較のためにあえてこれで。
「参照の値渡し」と言うと混乱しそうだけど、要するにここでいう「参照」とは「ポインタ」のこと。つまりポインタの値渡し。
そう考えると、barで行なっている処理は、・参照渡しの場合
1. barに渡された実引数と同じオブジェクトを指す仮引数boxを作る
2. boxが指した場所にあるオブジェクトをBox(42)に置き換える
3. boxと呼び出し元のbox2は同じ場所を指しているので後者も変化する・参照の値渡しの場合
1. barに渡された実引数と同じオブジェクトを指す仮引数boxを作る
2. boxが指す場所を新しく作ったオブジェクトBox(42)の方に変える
3. 呼び出し元のbox2が指しているオブジェクトはそのままということになる。図に描くとこんな感じ。もしポインタを使ったコードで参照渡しの方の挙動を再現するなら、の部分がになる。
因みにObjective-Cのコードなら、この「オブジェクトがポインタで扱われている」ということがよりはっきりする。・値渡し
実引数の値がコピーされた新しい変数が作られる。プリミティブ型を渡した時はこれ。
仮引数を変更しても呼び出し元には影響なし。
言語によっては構造体なども値渡しになることがある。・参照渡し
実引数と仮引数がメモリ上の同じ場所を指すようになる。
仮引数を変更するとそれが呼び出し元にも反映される。
この形態はサポートしていない言語も少なくない。・参照の値渡し
CやC++でいうポインタ渡し。メモリ上の場所を仮引数に与えることで、その場所を通じて実引数と同じオブジェクトを操作できる。
参照渡しと似ているが、仮引数の値自体を書き換えた時の挙動は要注意。
多くの言語はオブジェクトを渡す時この形態になる。


