
    private float NormalizedSwingLikeBell
    {
        set
        {
            float t = Mathf.Clamp(value, 0.0f, 1.0f);

            float r = 1 - Mathf.Abs(Mathf.Lerp(-1, 1, t));
            float s = 1 - Mathf.Abs(Mathf.Lerp(-1, 1, r));

            float angle = s * Mathf.Sign(value - 0.5f)*10;

            transform.rotation= Quaternion.AngleAxis(angle, Vector3.back);
        }
    }

    public void SwingLikeBell(float t)
    {
        StartCoroutine(CoSwingLikeBell(t));
    }

    IEnumerator CoSwingLikeBell(float t)
    {
        float current_time = 0;
        while (t &gt; current_time)
        {
            yield return null;
            current_time += Time.deltaTime;
            NormalizedSwingLikeBell = current_time / t;
        }
        NormalizedSwingLikeBell = 0;
    }

