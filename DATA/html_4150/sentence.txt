More than 1 year has passed since last update.実行環境に合わせてアプリケーションの動作を変更したり、必要な情報を指定したりするために動作設定ファイルを用いることがあります。私はそのような場合に XmlSerializer クラスでシリアライズした XML ファイルを利用することが多いです。シリアライズ対象の型やメンバに属性を付与することによって、シリアライズ処理を制御することができます。動作設定クラスのシリアライズに用いることが多いと考えられる属性を紹介します。タグとして型名が使用されるとき、型名の代わりに任意の名称を指定することができます。プロパティの場合は型名ではなくプロパティ名が使用されますので、DatabaseConfig クラスに付与した XmlTypeAttribute は適用されません。 メンバがシリアライズされるとき、メンバ名の代わりに任意の名称を指定することができます。対象のメンバが配列やリストである場合、格納オブジェクトがネストされずに出力されます。配列またはリストのメンバがシリアライズされるとき、メンバ名の代わりに任意の名称を指定することができます。配列またはリストのメンバがシリアライズされるとき、格納オブジェクトのタグに任意の名称を指定することができます。この属性は配列またはリストに格納できる派生オブジェクトの型を指定するときにも使用します。派生オブジェクトの型については後述します。列挙体型のメンバがシリアライズされるとき、列挙値名の代わりに任意の名称を指定することができます。メンバがシリアライズされるとき、入れ子ではなく属性として出力します。List&lt;T&gt; はサポートされています。格納オブジェクトのタグは型名になります。格納オブジェクトのタグを変更したい場合は、XmlArrayItem 属性を付与します。Dictionary&lt;T&gt; はサポートされていません。InvalidOperationException がスローされます。
IXmlSerializable インターフェースを実装した Dictionary&lt;T&gt; 継承クラスを定義し、Dictionary&lt;T&gt; の代わりに用いる方法があります。Dictionary&lt;TKey, TValue&gt; の代わりに XmlSerializableDictionary&lt;TKey, TValue&gt; を使用します。次の Serialize メソッドでは例外が発生します。
XmlSerializer クラスではシリアライズ対象の型の定義から必要な型情報を読み込みます。SampleAppConfig クラスの型情報の中には DatabaseConfig クラスの型情報は含まれていますが、DatabaseConfig クラスから派生した PostgreSqlConfig クラスの情報は含まれていません。Databases プロパティに格納されている PostgreSqlConfig クラスのインスタンスをシリアライズしようとして型情報不足が発生し、シリアライズに失敗します。シリアライザに PostgreSqlConfig クラスの型情報を与えることによって、シリアライズできるようになります。いくつかの方法があります。XmlSerializer に ExtraTypes として指定した場合、または XmlIncludeAttribute を付与した場合は、PostgreSqlConfig であることが属性で表されます。XmlArrayItemAttribute を付与した場合は、PostgreSqlConfig であることがタグで表されます。XmlArrayItemAttribute で名前が指定されている場合はその名前になります。VisualStudio のデザイナによる UI サポートを受けられますが、キーと数値や文字列などの単純な値で表すことができるものがターゲットとされており、入れ子やリストなどの構造を管理するのには向いていません。
各アプリケーションが一つのアプリケーション構成ファイルを持つ仕組みであるため、複数のアプリケーションで動作設定を共有したい場合には共有部分を外部ファイルに分離する必要があります。
何れも方法がないわけではありませんが、それをするぐらいなら XmlSerializer クラスを使ったほうが簡単です。私は次のように使い分けることが多いです。DataContract という名が表す通り、データ通信で使用することを目的としていると考えられます。private メンバをシリアライズできたり XmlSerializer クラスよりも高機能ではあるのですが、定義された順番どおりにメンバを記述しないといけません。動作設定ファイルはテキストエディタで記述することもあるため、これは扱いにくさにつながります。最近は JSON ファイルを動作設定ファイルに用いることも増えてきました。DataContractJsonSerializer クラスや Json.NET など、JSON を扱うためのライブラリも整備され扱いやすいフォーマットですが、コメントを記述しづらいのがネックです。特段の理由がない限り、これから新規開発するアプリケーションで INI ファイルを用いることはないと思います。
ですが、「これまで INI ファイルを使っていた」という理由だけで用いられ続けているケースがあるもの実態です。過去のアプリケーションの思想をそのまま受け継いだアプリケーションの開発で当たり前のように INI ファイルが用いられていて、INI ファイルに纏わる不便さを感じたことがあれば、是非 ここで紹介したようなその他の方法を検討してみてください。XmlSerializer クラスはシリアライズ速度やシリアライズデータサイズなどの面ではその他のシリアライザに劣ります。データ通信などの用途に使われることは少なくなっていますが、今でも、動作設定ファイルのシリアライズフォーマットとしてはバランスが取れた良い手段の一つだと思います。


