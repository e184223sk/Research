More than 3 years have passed since last update.この記事は「async/await 構文を使い始めの時期に私が勘違いしていたこと」を元に、「もしかして私も勘違いしているかもしれない…？」と自信がない方へ向けての「async/await を間違えて使わない」ための記事です。C# / .NET を前提にしています。Taskを極めろ！async/await完全攻略と併せて読んでいただくことで、より理解が深まると思います。この記事では次のような方を対象としています。これらのモヤモヤをひも解いていこうと思います。メソッドに async ってつけたことがありますか？
この記事を読んでいる方は、きっと1回くらいはつけたことがある方だと思います。下記の2つメソッドを、それぞれ DoSomething(); DoSomethingAsync(); と呼び出したときの違いはなんでしょう？「下のメソッドは非同期メソッドなのでバックグラウンドで実行される…？」と思いましたか？
残念！2つのメソッドは実質同じ(*1)です。実質同じとは、つまり以下のように呼び出した場合、10秒かかるのは DoSomethingAsync 呼び出しである、ということです。2行目、予想に反したのではないでしょうか？
私にも2行目が 0ms とか 1ms とかになると思っていた時期がありました……おいおい、async って言ってるのに「非同期」じゃないじゃないか……それもそのはずです。async 修飾子の意味はただ一つ。await を使うメソッドには async をつけなければならないというルールだからつける（＝ async をつけると await キーワードが使えるようになる）。これだけです。async 自体は await を使うためのマーカーにすぎません。async をつけてもつけなくても、それだけなら何も変わらない 1 のです。冒頭に書かれていた この非同期メソッドには 'await' 演算子がないため、同期的に実行されます。～(中略)～を検討してください。 という警告。これは「await が使われていない async メソッドがあるとき」に出る警告です。先の説明の通り、await を使わない async とつけたメソッドには(async をつける)意味がないため、「何か勘違いしとらんか？非同期になっとらんやでそれ」という意味で警告が出るのです。ここまでで「いやいや、戻り値の型が void から Task に変わっとるがな！一緒じゃなくね？」と思った方はいい気づき 2 です。これについては後ほど触れるとして、async をつけて使いたい await というのはなんなのか？
次回はそこに焦点を当てたいと思います。実際には async でマークされたメソッドはビルド時に特殊な形に展開されます。また、その関係で例外発生時の挙動が変わります。ただし「非同期になるか？同期のままか？」の観点で言えば async をつけただけでは何も変わらないと考えて OK です ↩この変化が「実際には async でマークされたメソッドはビルド時に特殊な形に展開されます。また、その関係で例外発生時の挙動が変わります。」と関連します。 ↩


