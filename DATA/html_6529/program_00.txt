namespace Com.Domain.Sample
{
    public sealed class SingletonClass
    {
        #region singleton pattern

        private static SingletonClass Instance;

        private SingletonClass() { }

        public static SingletonClass GetInstance()
        {
            if (SingletonClass.Instance == null)
            {
                SingletonClass.Instance = new SingletonClass();
            }
            return SingletonClass.Instance;
        }

        #endregion

        public void DoSomething(params string[] args)
        {
            if (args == null)
            {
                return;
            }

            bool exists = args.Any(x =&gt; !String.IsNullOrWhiteSpace(x));
            int count = args.Count(x =&gt; !String.IsNullOrWhiteSpace(x));
            var strings = args.Where(x =&gt; !String.IsNullOrWhiteSpace(x));

            foreach (var s in strings)
            {
                Console.WriteLine(s);
            }
        }
    }

    public class FieldAndProperty
    {
        private int privateField;
        private readonly int readonlyPrivateField;

        // "const" is pascal case.
        // don't use "const". "readonly" instead.
        //private const float Zero = 0f;
        //public const float Pi = 3.1415927f;

        // "static" is pascal case.
        private static int PrivateStaticField;
        private static readonly int DaysInWeek = 7;
        public static readonly int DayOfWeekCount = 7;

        // don't use public fields. properties instead.
        //public int PublicField;
        //public readonly int ReadonlyPublicField;
        //public static int ClassField;

        // "property" is pascal case.
        public Color Color { get; set; }
    }
}

