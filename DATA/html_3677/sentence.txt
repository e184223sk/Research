More than 1 year has passed since last update.C#8.0 の再帰パターンで色々な書き方ができるようになったので、今のうちに書きなれておきたい、というのがこの記事の趣旨です。気になる点があれば、遠慮なくコメントしてください。再帰パターンはパターンマッチング(C#7.0)の拡張です。
が、実際のところはC#7.0のパターンマッチングは機能としてはごくごく限定的で、C#8.0で完全版になったというのが正直なところだったりします。is式でできることが、switch文やswitch式でできるようになっている、と考えられそうです。
なので、まずはis式で色々なパターンを書いてみます。おさらいとして、is式でこれまでのバージョンでもできたことを挙げておきます。一言でいうと、obj is [型名] [変数名] の型名と変数名の間にパターンを差し込むことができるようになった、ということです。
つまりobj is [型名] [パターン] [変数名]と書けるようになりました。
この[パターン]の部分こそがパターンマッチングの主役で、このパターンが再帰的に書けるので再帰パターンと呼ばれるわけです。パターンを書くために、以下のクラスを用意しました。パターンには位置パターンとプロパティパターンの2種類があり、またこれらを組み合わせることができます。まずはシンプルに定数とマッチさせるパターンを書いてみます。Deconstruct()が定義された型で、出力引数の順番に評価されます。
自然な順序が定義できる型であれば、この書き方が簡便で便利そうです。※System.Runtime.CompilerServices.ITupleを実装したクラスでも位置パターンは利用できますが、Deconstruct()メソッドによるものと少し考え方が違うようです。プロパティ名（または変数名）に一致したものが評価されます。
使用するのに特別なクラスの造りが必要なく、気軽な使い方ができそうです。定数と一致させる以外に、その場で宣言した変数で受け取ることもできます。再帰パターンで書く前に以下のクラスを追加します。そして再帰パターンで書いてみます。全部混ぜこぜにした場合、かなり複雑な見た目のコードになります。
位置パターンとプロパティパターンと途中で変数宣言ができることなどが一通りが分かっていれば読めなくはない、といったところでしょうか。再帰パターンはswitch文とC#8.0で追加されるswitch式でも利用できます。is式でパターンに慣れておけば、戸惑うことは少ないはずです。地味ですが嬉しいものがこれです。
switchを使う機会が割と増えるかも、と思っていたりします。
タプル(C#7.0)の機能が存分に生かされています。case毎の値を返すだけのswitchを書きたいとき、既存のswitch文はかなりまどろっこしい構文になっていると思います。
そこで便利なのがC#8.0で導入されるswitch式です。
caseやbreakやdefaultなどのキーワードが不要なだけでも、かなり嬉しい構文になっていることがわかります。※C#8.0は現在Preview版です。記事の内容と異なる構文になる可能性もありますのでご了承ください。


