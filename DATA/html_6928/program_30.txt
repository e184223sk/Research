
using System;
using System.Threading;
using System.Threading.Tasks;

class Program
{
    ReaderWriterLockSlim _rwLock = new ReaderWriterLockSlim();

    volatile int _value1 = 0;
    int Value1
    {
        get
        {
            _rwLock.EnterReadLock();
            try
            {
                Thread.Sleep(1000);
                return _value1;
            }
            finally
            {
                _rwLock.ExitReadLock();
            }
        }

        set
        {
            _rwLock.EnterWriteLock();
            try
            {
                Thread.Sleep(3000);
                _value1 = value;
            }
            finally
            {
                _rwLock.ExitWriteLock();
            }
        }
    }

    static void Main(string[] args)
    {
        var p = new Program();

        var task1 = Task.Run(() =&gt;
        {
            Console.WriteLine(p.Value1);
        });
        var task2 = Task.Run(() =&gt;
        {
            Console.WriteLine(p.Value1);
        });
        Task.WhenAll(task1, task2).Wait();

        task1 = Task.Run(() =&gt;
        {
            Thread.Sleep(500);
            Console.WriteLine(p.Value1);
        });
        task2 = Task.Run(() =&gt;
        {
            p.Value1 = 10;
        });
        Task.WhenAll(task1, task2).Wait();

        Console.ReadLine();
    }
}

