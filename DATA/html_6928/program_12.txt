
using System;
using System.Threading;
using System.Threading.Tasks;

class Program
{
    static void Main(string[] args)
    {
        var tokenSource = new CancellationTokenSource();
        tokenSource.Cancel();

        Task.CompletedTask
            .ContinueWith(task =&gt; Console.WriteLine("OK"), TaskContinuationOptions.OnlyOnRanToCompletion);
        Task.FromCanceled(tokenSource.Token)
            .ContinueWith(task =&gt; Console.WriteLine("NG"), TaskContinuationOptions.OnlyOnRanToCompletion);
        Task.FromException(new Exception())
            .ContinueWith(task =&gt; Console.WriteLine("NG"), TaskContinuationOptions.OnlyOnRanToCompletion);

        Task.CompletedTask
            .ContinueWith(task =&gt; Console.WriteLine("NG"), TaskContinuationOptions.NotOnRanToCompletion);
        Task.FromCanceled(tokenSource.Token)
            .ContinueWith(task =&gt; Console.WriteLine("OK"), TaskContinuationOptions.NotOnRanToCompletion);
        Task.FromException(new Exception())
            .ContinueWith(task =&gt; Console.WriteLine("OK"), TaskContinuationOptions.NotOnRanToCompletion);

        Task.CompletedTask
            .ContinueWith(task =&gt; Console.WriteLine("NG"), TaskContinuationOptions.OnlyOnCanceled);
        Task.FromCanceled(tokenSource.Token)
            .ContinueWith(task =&gt; Console.WriteLine("OK"), TaskContinuationOptions.OnlyOnCanceled);
        Task.FromException(new Exception())
            .ContinueWith(task =&gt; Console.WriteLine("NG"), TaskContinuationOptions.OnlyOnCanceled);

        Task.CompletedTask
            .ContinueWith(task =&gt; Console.WriteLine("NG"), TaskContinuationOptions.OnlyOnFaulted);
        Task.FromCanceled(tokenSource.Token)
            .ContinueWith(task =&gt; Console.WriteLine("NG"), TaskContinuationOptions.OnlyOnFaulted);
        Task.FromException(new Exception())
            .ContinueWith(task =&gt; Console.WriteLine("OK"), TaskContinuationOptions.OnlyOnFaulted);

        Console.ReadLine();
    }
}

