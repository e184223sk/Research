More than 1 year has passed since last update.NLogのチュートリアルを踏襲していくNuGetパッケージの管理から「NLog」,「NLog.Config」をインストールする。
「NLog.Config」に「NLog」も同梱されているのでこのパッケージだけで問題ない。Configファイルで設定する方法と、ソースコードで設定する方法を記載した。どちらも同じ設定となる。本稿では設定ファイルでの方法を採用している。NLog.configパッケージをインストールすると、プロジェクトディレクトリにNLog.configファイルが作成されているので、内容を下記の通り書き換える。NLogをラップするNLogServiceクラスを作成し、ログレベル"Info"のログを出力してみる。[結果]
 コンソールに下記のログメッセージが出力された。また、同じログメッセージを記載したfile.txtも出力された。上記の通り、NLog.LogManager.GetCurrentClassLogger()を使用した場合、呼び出し側のクラス名でロガーを作成する。NLog.LogManager.GetLogger（ "MyLogger"）を呼び出した場合、明示的なロガーの名前を指定することも出来る。下記のように、NLog.congigファイルを書き換えてみる。[結果]
コンソールに下記のログメッセージは表示されたが、ログファイルは出力されなかった。minLevelで設定したログレベル以上のログメッセージを出力する。1つのロガーに書き込まれたメッセージは、logging-rules設定に基づいて複数のターゲットに出力する。下記の設定ファイルの場合、ログレベルInfo以上の情報はコンソールに出力し、ログレベルError以上の情報はログファイルに出力する。ログレベルは、メッセージの重要度や詳細度を示します。ログメッセージのレイアウトを設定することができる。下記のプログラムで出力するメッセージを比較する。他にもCSVやJSONでのフォーマットが存在する。ロガーは各クラスの静的変数であるべきです。新しくロガーを作成することでロックを取得してオブジェクトを割り当てる必要があるので、無駄な処理となります。そのため、下記のようにロガーをあらかじめ作成することが効率が良いです。ロガーに文字列フォーマットを操作させてください。文字列の連結やフォーマット処理を直前に行わないでください。代わりにLoggerにフォーマット処理をさせてください。これにより無駄な処理を減らすことができます。下記のように実行してください。ロガーに例外を与えてください。ロガーに例外をフォーマットのパラメータとして与えないでください。代わりに下記のように、最初の引数として与えて下さい。NLogはデフォルトですべての例外を飲み込むので、ログの出力中に問題が発生してもアプリケーションを終了することはありません。しかし、初期のNLogの設定に失敗した場合は、ロキング出来なくなるのでアプリケーションにとって致命的な問題です。そこで、throwConfigExceptions = "true"をNLog.Configに追加することで、設定に問題があった時にエラーを発生することが出来ます。※ throwExceptions = "true"という設定もありますがこれは本番環境では使用しないでください。アプリケーションに致命的な問題を与える可能性があります。これは、単体テストとローカルのトラブルシューティングを目的としています。手動でクローズしてください。NLogはデフォルトでアプリケーションのシャットダウン時に自動的にクローズしようとします。Microsoft Windowsが提供する.NETアプリケーションではアプリケーションが終了するまでの時間（通常2秒）以内にシャットダウンすることが出来ます。ネットワークトラフィック(Http,Mail,Tcp)を利用するNLog設定の場合は、手動でクローズ/シャットダウンすることをお勧めします。Mono/Linux上で実行している.NETアプリケーションではアプリケーションのシャットダウン時に上記の停止処理をする必要があります。処理を行わない場合、未処理の例外やセグメンテーション違反、その他予測不可能な動作が発生する可能性があります。NLogではラッパーを設定することが出来ます。よく使われるWrapperは下記の通りです。下記はAsyncWrapperの短縮形「async="true"」のサンプルとなります。
これによって、ファイルへのすべての書き込みが非同期となります。NLog Home


