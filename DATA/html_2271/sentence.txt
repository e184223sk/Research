More than 1 year has passed since last update.C# その2 Advent Calendar 2019 の 11 日目の記事です。今まで、記事とか書いたこともないし、他の方々と違いレベルの低い話題なので、そこのところご承知おきください。業務上、Excel ファイル にエクスポートされたデータを取り扱うことが多く、VBA でマクロを書くのもVBE がアレすぎて面倒なため、C#で処理したいなーと今回作るにあたっては、読み込んで値を変える程度ですが、業務によっては読み込んだものを加工して転記したり、DB に登録したりすると思うので自分用にメモなお、今回ClosedXMLについては、2019/12/01時点の最新版を使ってますこんな感じでサンプルデータを XLSX ファイルとして作成サンプルに使えそうな人な名前が思いつかないということで、DynamicObject を継承する形で作成
基本的には、TryGetMember と TrySetMember を override する
なお、ベースは IDictionaryとしてフィールド名にあたるものとその値を用意 （状況によっては、TrySetIndex、TrySetIndex も override してもいいのかも）XLSX を ClosedXML で読み込み項目名称の取得やデータ取得の仕方は Excel ファイルのデータ次第なので、そこは適宜に
今回は RangeUsed メソッドからテーブル変換し、 Fields プロパティから項目名称を、データについては DataRange プロパティを用いて取得します。んで、テストコードExcel の内容を読み込みすることに成功し、また書き換えた後の出力も問題ありません。今回はテキストにしただけですが、読み込みして書き換えできるようにすることができました。
そもそも、ClosedXML だと自動マッピングできるかといわれるとそこらへんは勉強不足です。（できるんだったらそっち使ったほうがいいかもです）
リフレクション使ってのマッピングということで自分で実装するのがベターなのかもしれません、というより実際にテストした際も実行速度については、普通に型マッピングしたほうが早かったですしただ、業務で使うとなると、データ都合上Excel 中に 50 列くらい普通に並ぶものもあると思うので、マッピングしたい項目数が多い場合だったり、とりあえず意識しとうないときとかは dynamic を使うこともありなのかもしれません。
（そもそも、項目が多い時点で「孟徳！なぜ俺がこんなものを見なきゃならん！」的な作業なので）サンプルは以下
https://github.com/exactead/ExcelReaderDynamic・ClosedXML (https://github.com/ClosedXML/ClosedXML )・「C# DynamicObjectの基本と細かい部分について」 
(http://neue.cc/2010/05/06_257.html )・「【C#】ClosedXML で Excel テーブルを IEnumerableオブジェクトに変換」
（https://qiita.com/penguinshunya/items/dd586b1e42b7a66e552e ）


