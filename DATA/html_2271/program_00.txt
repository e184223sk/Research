
private readonly IDictionary&lt;string, object&gt; dictionary;

public DataRecord(IDictionary&lt;string, object&gt; dictionary) =&gt; this.dictionary = dictionary;

public override bool TrySetMember(SetMemberBinder binder, object value)
{
    if (!IsTypeCheck(binder.Name, value)) return false;
    dictionary[binder.Name] = value;
    return true;
}

private bool IsTypeCheck(string key, object value)
{
    // キーがないならNG
    if (!dictionary.TryGetValue(key, out var result)) return false;

    // 型が一致しない場合はNG
    return IsTypeMatch(result.GetType(), value.GetType());
}

private bool IsTypeMatch(Type baseType, Type valueType)
    =&gt; valueType.Equals(baseType) || valueType.IsSubclassOf(baseType);


public override bool TryGetMember(GetMemberBinder binder, out object result)
    =&gt; dictionary.TryGetValue(binder.Name, out result);

