
// 型情報を提供するstruct
public struct TypeHint&lt;T1, T2&gt;
{
    public TypeHint&lt;T1&gt; Arg1 =&gt; default;
    public TypeHint&lt;T2&gt; Arg2 =&gt; default;
}

// 二つの異なる型のIStoreを取る
public static void HogeG&lt;TStore1, T1, TStore2, T2&gt;(TStore1 store1, TStore2 store2, TypeHint&lt;T1, T2&gt; __ = default)
    where TStore1 : IStore&lt;T1&gt;
    where TStore2 : IStore&lt;T2&gt;
{
    _ = store1.Value;
    _ = store2.Value;
}

// 1型引数のTypeHintから2型引数のTypeHintを作る
public static TypeHint&lt;T1, T2&gt; CreateTypeHint&lt;T1, T2&gt;(TypeHint&lt;T1&gt; _, TypeHint&lt;T2&gt; __) =&gt; default;

public static void Piyo()
{
    var s1 = Create((1, 2, 3u, (byte)4, Create((5f, 6.0, "7")), '8'));
    var s2 = Create(((9, 10, "11"), new [] { 12, 13 }, (14u, 15f)));

    // 型引数を書かなくてよい!!
    HogeG(s1, s2, CreateTypeHint(GetTypeHint(s1), GetTypeHint(s2)));

    // こんなこともできる
    var s3 = Create((s1, s2));
    var s4 = Create((s1, s2, s3));
    HogeG(s3, s4, CreateTypeHint(GetTypeHint(s3), GetTypeHint(s4)));
}

