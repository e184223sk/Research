.NETを使った暗号化の実装について気になることがあったので、メモ。オンラインドキュメントの日本語訳が無茶苦茶だったので、英語から引用です。
要するに、AesCryptoServiceProviderやAesManagedとかは普通は使わないでよくて、Aesを使うとよい、というように読めます。ネットのサイトを色々見てると作り方が色々のようで、どのクラスを使うのか迷ったのだけれど。どうも見ていると、基本はAes.Create()でインスタンスを作れば設定値は推奨のものが自動で入るっぽいですね（そんな風に読めた）。In most cases, you don't need to directly reference an algorithm implementation class, such as AesCryptoServiceProvider. The methods and properties you typically need are on the base algorithm class, such as Aes.確かに、MSサイトの例を見ると、Aes aes = Aes.Create()という例が多いですね。ちなみに、このCreateのFactoryメソッドの引数にはアルゴリズム（AES、AesManaged、AesCryptoServiceProvider）が指定できるので、何の型が返ってくるのか調べてみました。検証コード、出力結果は以下です。"AES"の場合はAesImplementationなので、AesManagedとは別のクラスが使用されているようですね。下にも書いていますが、AesCryptoServiceProviderはWindowsの実装を呼び出すためのラッパーです。アルゴリズムの名称にMagagedが付くものは文字通り完全なマネージドとして記述されているものなのですが、MSのドキュメントによるとFIPS認定されていません。FIPS (Federal Information Processing Standards)は、アメリカの政府調達に関する標準です（FIPS 140-2については暗号化モジュールが満たすべき要件について定義している）。要するに、FIPS認定がないものは第三者のお墨付きがないから、それ以外を使った方が無難ということでしょうか（むしろ詳しい方がいれば教えてほしい）。AesCryptoServiceProviderは、Windowsの機能（CAPI）のラッパーのようです。このソースを見ると、AllowOnlyFipsAlgorithmsは見ていないようです。FIPS認証されているということでいいんですかね？.NETのRijndael (とそれを継承したRijndaelManaged)は、SymmetricAlgorithmクラスを継承していますが、Aesも同様にSymmetricAlgorithmを継承しています。RijndaelはAESと比べ、ブロック長が256bitまでの32bitの倍数で選べるが（鍵長についても同様）、AESは鍵長が128bit、192bit、256bitの3種類のみ。あと、ブロック長が128bitしか選べない。要するに、AESとは別クラス。どちらが良いか…は何ともいえないけれど、AESは秘密鍵暗号方式としては標準と言ってよいほど色んなプログラムで実装されていて、今のところ危殆化とかそういう話題は見ない（今のところ）。むしろ、あれば大騒ぎになるはず。広く使われているので。MSの記事で、こんなのを見つけた（英語ですが）。上で書いたFIPS認定の使用を強制させることができるらしいが、グループポリシーの編集で可能になるらしい。ただ、変更した後にどうなるかが怖いので、検証はしていません。半ばメモなので、Qiitaの記事っぽくないかもしれませんが、ご了承下さい。


