More than 1 year has passed since last update.C#でEF6 CodeFirst+SQLite+Migrationを実現する方法です。
Windows用の小規模をアプリを作るときにオススメです。
※注意：EF Coreではありません。以下に実際に動作するコードを置いてます。
https://github.com/minoru-nagasawa/SQLiteMigrationSampleプロジェクトを右クリックし、「NuGetパッケージの管理」を選択します。
「参照」タブからSystem.Data.SQLite.EF6.Migrationsを検索し、インストールします。
インストール後、「インストール済み」タブに以下の6つが表示されればOKです。
EntityFrameworkの6.2が欲しい場合は、個別に更新してください。
- EntityFramework
- System.Data.SQLite
- System.Data.SQLite.Core
- System.Data.SQLite.EF6
- System.Data.SQLite.EF6.Migrations
- System.Data.SQLite.Linq
作業後のイメージです。
「2. 必要なクラスを作成」が完了したら、以下の構成になります。
まず、以下の2つのフォルダを作ります。(任意です)
- DataAccess
- Modelsデータベースのテーブルに対応するクラスを作成します。
いわゆるPOCOなクラスです。
EntityFrameworkが使用するためデフォルトコンストラクタは必須です。DbContextを継承したクラスを作成します。
このクラスを使ってデータベースにアクセスします。今回はUpdate-Databaseの結果を保存するデータベースを、プロジェクトと同じパスにします。
そのため、そのパスをs_migrationSqlitePathにセットして、デフォルトコンストラクタで指定しています。
このデータベースはアプリケーションの実行時には使用しません。
あくまでUpdate-Databaseで使用するだけです。デフォルトコンストラクタはEnable-Migrationsなどで使用されるため必須です。
また、baseの第2引数をfalseにしないとUpdate-Databaseで例外が発生します。コンフィグレーションクラスを作成します。
クラスを作らずに、同様の内容をApp.configに書く方法でもいいと思いますが、個人的な好みでコードに書きます。[表示]-[その他のウィンドウ]-[パッケージマネージャーコンソール]を選択します。
パッケージマネージャコンソールで"Enable-Migrations"を実行します。
実行するとMigrations/Configuration.csが自動生成されます。
「既定のプロジェクト」が間違っているとエラーになるので注意してください。
自動生成されたConfigurationクラスのコンストラクタで、AutomaticMigrationsEnabledをtrueにします。
また、SetSqlGeneratorを呼び出すようにします。パッケージマネージャコンソールで"Add-Migration InitialMigration"を実行します。
パラメータの「InitialMigration」の部分は任意の文字列で、クラス名に使われます。
実行すると201805061344319_InitialMigration.csのようなコードが自動生成されます。
パッケージマネージャコンソールで"Update-Database"を実行します。
実行するとプロジェクトと同じフォルダにMigrationDb.sqlite3が生成されます。
以下のコードが具体例です。
実行すると、exeと同じ場所にdb.sqlite3が生成されます。
また、マイグレーションも実施されます。
つまり、何もなければSampleテーブルを作り、存在していれば何もしません。ポイントは以下です。例えば以下のような新規のテーブル用クラスを作成します。クラスを追加した場合はApplicationDbContextにメンバを追加します。
クラスの変更の場合は不要です。パッケージマネージャコンソールで"Add-Migration AddTestTableMigration"を実行します。
パラメータの「AddTestTableMigration」の部分は任意の文字列で、クラス名に使われます。
実行すると201805061529099_AddTestTableMigration.csのようなコードが自動生成されます。パッケージマネージャコンソールで"Update-Database"を実行します。
実行するとプロジェクトと同じフォルダのMigrationDb.sqlite3が更新されます。既存コードのmigrator.Update()のタイミングで、データベースが更新されます。
そのため、以下のようなコードで更新したデータベースにアクセスできます。


