More than 3 years have passed since last update.いままで適当にしか .NET や C# に取り組んでいなかったですが、いまの職場はC#/.NETのプロジェクトが多いので、色々と見直しておこうと思い、まずは LINQ の自分用メモです。LINQ (クエリ式)
SQL文に似ている宣言クエリ構文を用いた記述方法。LINQ to Objectsの方がやれることが多いので読めるようにはなっておいた方が良いが、積極的に使う必要はないかと。LINQ to Objects
任意のコレクションを照会するための方法。foreachでごりごりとした実装から開放され、宣言的なコードによって、強力なフィルター処理、並べ替え、およびグループ化機能を最小限のアプリケーション コードで実現できます。Parallel LINQ (PLINQ)
LINQ to Objectsを並列実行するためのAPI。クエリの処理速度が大幅に向上します。LINQプロバイダー
直接LINQ to Objectsを使わずに、データソースに特化したプロバイダーがあります。LINQプロバイダーは自作することが出来ますので、他にもサードパーティから LINQ to LDAP、LINQ To Oracle、LINQ to CSV、LINQ to Wiki、LINQ to JSON、LINQ to EXCEL、LINQ to twitter などが存在しますし、なければ作るだ。キホンというのは使い方ではなくて、仕組みです。コレクションに対してwhereやらselectやらsumやらを使って処理するのは見れば分かります。表面的な使い方だけを知っても、パフォーマンスが悪い、動きが意図しないという事態に対して対処できませんから。LINQ to Objects は、IEnumerableインターフェース、IEnumeratorインターフェース、Enumerableクラスの拡張メソッドという3つの構成になっています。拡張メソッドは、既存クラスにメソッドを追加する仕組みで、既存クラスにはいっさいの変更を加えません。これいいですよね。自分の作るアーキテクチャーの参考になります。LINQ to Objects は以下の特徴を備えています。これらによって効率よく高速に動作し、メモリも消費しないという作りになっています。（この内容は「基礎からわかるLINQマジック」を参考というか、ほぼそのまま）以下のように複数行に分かれていても、実行時に分解・再構築して一つのループにしてくれます。コードの可読性を重視できるので良いですね。LINQは中間結果を持つための別途コレクションを作ることはありません。MoveNext()を持つIEnumeratorが繰り返し実行されるわけですが、Currentプロパティしか更新しないように作られています。LINQは分解・再構築されてから実行されるので、コードが記述してある箇所で実行されるわけではありません。すなわち遅延実行されているということです。　ToList()、Average、Count、First、Max といった非IEnumerableを返す場合に連鎖的にすべての処理が実行されます。標準で様々な拡張メソッドがあります。
MSDNのIEnumerable インターフェイスを見ると載っています。
https://msdn.microsoft.com/ja-jp/library/9eekhta0.aspxしかし、いざ実装すると要件に対してもっと便利なフィルターが欲しくなる時があります。そんな時は自分で拡張メソッドを作ることが出来ます。拡張メソッドはLINQのメリットを損なわないように次の特徴を持たせるように実装します。yield (イールド) というのは、メソッド、演算子、または get アクセサーが反復子であることを示すことになります。これを使うとカスタム コレクション型の IEnumerable および IEnumerator パターンを実装するときに明示的な余分なクラスが不要になります。遅延評価の行われる反復処理を容易に実装することができます。IEnumerable を受けつけるようにすれば拡張メソッドですが、IEnumerable を持つようにすればデータソースになれます。yield のおかげでこちらもすっきりとした実装で済みます。
要件によって特殊なデータソースがある場合、標準のLINQのままがんばるより、LINQデータソースを作ってしまった方がスッキリするでしょう。LINQプロバイダーは IQueryable と IQueryProviderインターフェイスで構成されます。で、ちょっと目の前に作るものがないので、具体的なコードは割愛します。というのも、LINQプロバイダーはデータベースやネットワークから条件を絞り込みながら取得したい場合に作成するもので、簡単な要件で作るものではないからです。MSDNでは、米国の航空画像のデータベースからMCFを用いてアクセスするサンプルが掲載されています。
https://msdn.microsoft.com/ja-jp/library/bb546158(v=vs.120).aspxまた「LINQ IQueryable Toolkit」というのが公開されています。少ない実装でLINQプロバイダーを作ることが出来るらしいので、機会を見つけて使ってみようと思います。
https://blogs.msdn.microsoft.com/mattwar/2008/11/18/linq-building-an-iqueryable-provider-series/
https://github.com/mattwar/iqtoolkitJavaでもラムダ式と StreamAPI があるわけですが、機能差が歴然としています。StreamAPI が未だ途上なせいもありますが、.NET の LINQ をJavaに移植するプロジェクトもあるくらいなので、Microsoftの作り込みは素晴らしいと言えます。別に肩持つわけじゃないし、アンチな時もありますけどね。


