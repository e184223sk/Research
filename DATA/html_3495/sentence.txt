More than 1 year has passed since last update.前回  は、マウスやキーボードが使えなくて、入力装置がLeapMotionしかない状況で、 Main Camera を平行移動する方法を考えました。今回は、カメラの回転やズームも制御します。実際に作ったのはこんな感じです。Looking Glass ミートアップ（るきみと） に展示させていただきました。両手グーでズーム・回転等をできるようにしました。地図アプリのピンチアウトとかの操作の3D版という感じでしょうか。ちょっと癖はあるけど、慣れると便利！デバッグでマウス触らなくてよくなるのが地味に嬉しい。#LeapMotion #LookingGlass pic.twitter.com/NhizrDS7Tj両手がグーの時に、カメラを動かします。両手の動きに合わせて、の３つの操作を実装しました。こんな感じのコードです。 Main Camera にアタッチすることを想定しています。IsDoubleRockGrip  で判定しています。前回 は片手グーの判定をしましたが、今回は両手グーの判定をします。まず、 hands.Count で、LeapMotionが検出している手の数が２つかどうかを確認しています。
そして、 hands[0].Fingers.ToArray().Count(x =&gt; x.IsExtended) で、開いている指の数を数えています。この数が0ならじゃんけんの グー だと判断します。という仕様にしてみました。コードを抜粋して、コメントをつけるとこんな感じです。PalmPosition が手のひらの位置です。hands[0].PalmPosition.DistanceTo(hands[1].PalmPosition) で hand[0] と hand[1] の距離を算出しています。この距離の変化量でカメラのスケールを制御します。これは文章での説明が難しいですが、両手をグーにしてから、車のハンドルを回すように両手を動かすと、その方向にカメラも回転します。コードはこんな感じです。両手のベクトルの差の回転量を、そのままカメラの回転に適用します。具体的には以下の通りです。右手と左手の中点の変化量を、カメラの移動に適用することにしました。これにより、というのを要件を満たせました。コードはこんな感じです。(hands[0].PalmPosition + hands[1].PalmPosition) * 0.5f で、 hand[0] と hand[1] の中点を求めています。LeapMotionに慣れていない人にこのUIをデモしたところ、すぐには理解してくれなくて、説明が必要だったのですが、 Looking Glass ミートアップ（るきみと） に展示したところ、ほとんどの人が一瞬で操作を理解してくれて、「るきみとすげえ！」って思いました。


