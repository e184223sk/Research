More than 1 year has passed since last update..NET開発する事になったので、チュートリアルでもやってみるかなーと思ったら、思いの外やりたい事が出来てなくて、追加でいろいろやってみた時の話。.NET開発が初めて。
C#も触った事ないし、もちろんXAMLもない。
SQLServerも触った事なければ、VisualStudioすら初めて。.NET童貞。.NET開発の中でもデスクトップアプリケーション(WPF)をする事になったので、これの公式のチュートリアルを進めた。筆おろし。チュートリアル:初めての WPF デスクトップ アプリケーション - Microsoft
進めていきながら「なるほど、こうすればいいのか」という感触はあったけど、終わってから気付いたのが２点。アプリやサービスを作る上で、ディレクトリ構成は重要な構成要素の一つ。
チュートリアルだから仕方ないのかもしれないけど、適当に作ってしまっては、後からリファクタリングするのが大変だ。データソースはXAML内にべた書きしてそれを読み込んでるけど、実際の業務でそんな事しない。
チュートリアルだから仕方ないのかもしれないけど、データベースと接続して、それを表示させなきゃ意味がない。
という事で、ディレクトリ構成とデータ周りを改変した。参考にしたのはこちら。MVVM を意識した内部構造 - YKSoftware重要なのはここ。具体的には次のような作業となります。
・MainWindow.xaml（およびMainWindow.xaml.cs）を削除
・"Views"、"ViewModels"、"Models"という名前のフォルダをツリーに追加
・"Views"フォルダに"MainView.xaml"をウィンドウとして追加
・"ViewModels"フォルダに"MainViewModel.cs"をクラスとして追加
・App.xaml内で定義されているStartupUri属性を削除
・App.xaml.cs内でOnStartup()メソッドをオーバーライド、編集これはまっさらな状態からMVVMモデル形式でディレクトリ構成を作る場合なので、構築済みの場合は以下のようにするといい。プロジェクト直下にフォルダ「Models」「Views」「ViewModels」「Resources」を作成。（mkdirコマンドで作ったら、何故かVisual Studioに反映されず「クソが」ってなったので、Visual Studioから作るのがベター）「Models」「Resources」 はここでは使用しない。「Views」 に以下を作成。（Visual Studioから作成すると*.xaml.csも作成されるが、これは削除しておく。邪魔。）「ViewModels」 に以下を作成。（*.xaml.csでなく*.csでよい）「Models」「Resources」 はここでは使用しない。「Views」「ViewModels」 配下のファイルに対して、以下のコマンドを実行する。（Visual Studioでコピペしてもいいけどしんどいし、こっちの方が早い）｢Models｣｢Views｣｢ViewModels｣ はここでは使用しない。「Resources」 に画像ファイルを移動する。（Visual Studio上でドラッグ＆ドロップでOK）プロジェクト直下にある以下のファイルを削除する。（Visual Studio上で右クリック→削除でOK）これで、 MVVMモデル に沿ったディレクトリ構成に変更完了。ビルドが通って実行できればOK。ちなみにこの時点のディレクトリ構成はこんな感じ。やる事は以下の通り。C#で使えるO/Rマッパーは調べたら色々あったけど、「Entity Framework」 を採用した。
（Microsoft謹製だし、検索したらQAも結構転がってたので）NuGetからパッケージをインストールする。（以下はVisual StudioでNuGetパッケージマネージャーコンソールを開いた時に入力するコマンド）公式サイトからインストーラーをダウンロードし、インストーラーの指示通りにデフォルトのまま進めればOK。管理ツールである「SQLServer Management Studio」もインストールしておく。SQLServerをインストールしただけでは使えない。データベースエンジンに接続する必要がある。手順としては、公式ドキュメントを参照する。(「レッスン 1:データベース エンジンへの接続」)「テーブルを作成する」とは言ったものの、そもそもどんなテーブルを作るべきなのかが決まっていない。という事で、現状のデータソース（ ./Views/ExpenseItHomeView.xaml ）を見てみる。つまり、以下のような感じだろうか。これでテーブル定義はできたので、作っていく。
この時点だとデータベースも作成されていないので、データベースも作成する。
データも投入していく。以下を参考にした。Entity Frameworkコードファーストで開発してみよう - CodeZine上記のSQLに沿った接続設定にする必要があるため、以下のようにする。以下を参考にした。Entity Frameworkコードファーストで開発してみよう - CodeZineModelフォルダにMyContext.cs、User.cs、Expense.csを作成。
ついでにDaoクラスも作っておく。（Data Access Object）それぞれの内容を以下に示す。さて、ここからが本題。データバインディング。僕の苦手な部分。まずはViews側から片付けていく。次にViewModels。元々のソースコードでの実行結果と見た目が異なるのは許して、ごめん。（疲れた）
ただ、これでデータソースをXMLからデータベースに切り替える事ができた。新しい言語やフレームワークに触れる時はチュートリアル使う事が多いけど、痒いところに手が届かない事も多くて辛い。その辺に転がってる一般人が取り上げてる記事だと「それでは早速パッケージをインストールします」とか言い始めるし。
それはある程度できる人の応用編であって、基本編ではない( '-' )チュートリアルだから仕方ない部分もあるだろうし、パッケージ使って開発する方が早いのかもしれないけど、基本部分を包括的に取り扱ってくれるものがあるといいなぁ。


