More than 3 years have passed since last update.ミニゲームを作ってUnityを学ぶ！[ひつじコレクション編]前回はゴールエリアやスコアの概念を追加し、プレイヤーがフォロワーをゴールエリアに連れ帰ることでスコアが加算される仕組みを実装しました。
今回はそんなプレイヤーの目的を邪魔する敵キャラクターを3種類作成し、それぞれについて別の行動パターンを実装していきます。尚、ひつじさんやウサギさんをフォロワーと呼んでいるのと同じく、プレイヤーを追いかけてくる敵キャラクターについても以後は「チェイサー」と呼称します。まずはチェイサーとして使用するアセットをストアからインポートします。
フォロワーの作成でインポートがすでに完了している場合はこの項目を飛ばしてください。Level1 Monster Packアセットに4種類含まれているクリーチャーのうち、スライム型を利用してチェイサーのオブジェクトを作成していきます。次に、新しいスクリプト「ChaserModel」を作成して上記のプレハブにアタッチします。まだ行動AIの部分を実装していないため、移動速度に関するフィールドとbool型のIsActiveプロパティをもっただけの特に説明の必要もないシンプルなクラスになっています。このタイミングで残り2種類のチェイサーについてもプレハブを作ってしまいます。
下記アセットについて、上と全く同じ方法でそれぞれChaserYellowとChaserRedのプレハブを書き出してください。アニメーションコントローラーとChaseModelスクリプトについては新しく用意するのではなく、ChaserBlueにアタッチしているモノを同じくアタッチします。それでは、StageConstructorに対応するコードを追加してファイルからチェイサーを読み込んでいきます。＊prefabChaser~プロパティにはインスペクタからそれぞれの色に対応したチェイサーのプレハブを設定。InstantiateChaser()では識別子が@chaserの行から取得した「行動AIの種類・速度・位置」の情報をもとにチェイサーオブジェクトを生成した後、それぞれのChaserModelの参照をリストに保持しています。これでファイルからチェイサーを生成できるようになりました。
続いて、行動Aiの実装を行っていきます。それぞれの行動AIを実装していく前に、StageManagerを修正してPlayerオブジェクトとポップアップポイントの位置を取得できるようにしておきます。異なる3種の行動AIについて今回はベースとなる抽象クラスを用意して、そのクラスを継承する形でそれぞれ独自の行動パターンを持つAIクラスを作成します。抽象クラスの意味は割愛させていただきますが、このAiBaseには初期化を行うInit()と目的地を設定するSetDestination()という2つの抽象メソッドが定義されています。
この「初期化と目的地の設定」をそれぞれの行動パターンに合わせてオーバーライドすることで複数のチェイサーにそれぞれのAIを実装していきます。先ほど作成したAiBaseの具体例として、まずはAiNormalクラスを作成します。AiNormalは常にプレイヤーを追ってくるシンプルな行動パターンです。
Init()では何も行わず、SetDestination()でNavMeshAgentの目的地にプレイヤーの現在位置を設定しています。続いて、このAiNormalをチェイサーの行動パターンとして利用するためにChaserModelを修正します。Awake()で自身にアタッチされているAiBaseを継承したクラスを取得し、Update()のmAi.SetDestination()によってNavMeshAgentに新しい目的地を設定しています。ここで一度、AiNormalの挙動を確認してみます。
青・赤・黄色のチェイサーそれぞれにAiNormalをアタッチしてからプロジェクトを実行してください。正しく動作している場合、チェイサーは常にプレイヤーの現在位置に向かって移動してきます。続いてAnticipater型のAIを作成します。
こちらは「予想する者」の名前の通り、プレイヤーの先回りをするように動く行動パターンです。このAIを作成するための準備として、Playerオブジェクトにタグの設定とプレイヤーの移動先を予想するための仕組みを導入します。1: Player/RaycastPointを設定
2: Bushレイヤーを指定プレイヤーの進行方向に向かってRayを飛ばし、ブッシュに当たった場合はその手前の座標を返します。少しわかりずらいですがコメントアウトしているOnDrawGizmos()を解放すると、上画像のようにRayの状態を確認することができます。
プレイヤーから伸びた赤いラインがBushオブジェクトの手前で終了していて、この終了部分をプレイヤーの向かっている座標と判断しています。ちょっと雑ではありますがプレイヤーの移動先を予測することができましたので、この座標を材料にして行動パターンを作成していきます。Aiticipater型のチェイサーはAiBaseで定義されているbool型のmIsExcitedによって行動パターンが変化します。ゲーム開始時にはプレイヤーの視線の先に向かって移動しますが、プレイヤーが近くにいてBushに遮られることなく視認できる状態になると今度はプレイヤーに向かって移動を開始します。
その後、プレイヤーとの距離が一定以上開くとゲーム開始時と同じ移動方法に戻ります。出来上がったAiticipater型の行動パターンは黄色いチェイサーに実装します。これで2つめの行動パターンを実装できました。続いてAiWanderを実装します。
Wander型はステージ上のポップアップポイントを巡回していて、その道中でプレイヤーを見つけた場合にプレイヤーを追いかける行動に切り替わるAIです。Init()でステージ上に存在する全てのポップアップポイントの座標を保持し、mIsExcitedによってポイントを巡回するかプレイヤーを追いかけるか分岐しています。このWander型の行動パターンは赤色のチェイサーに実装します。これで3つめの行動パターンを実装することができました。
まだチェイサーに対しての当たり判定はありませんが、プロジェクトを実行してフォロワーを4匹同時にゴールエリアに連れ帰ってみてください。次のページに進む
イントロダクションに戻る

この作品はユニティちゃんライセンス条項の元に提供されています


