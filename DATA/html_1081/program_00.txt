using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CSharpStudy.Image
{
    public class CatDrawer
    {
        /// &lt;summary&gt;
        /// 猫のイラストを描画するBitmapオブジェクト。
        /// &lt;/summary&gt;
        Bitmap bmp;

        /// &lt;summary&gt;
        /// コンストラクタ。
        /// &lt;/summary&gt;
        public CatDrawer()
        {
            // キャンバスサイズは横500px、縦400px。
            this.bmp = new Bitmap(500, 400);
        }

        /// &lt;summary&gt;
        /// 猫のイラストを描画する。
        /// &lt;/summary&gt;
        public void Draw(string filePath)
        {
            using (Graphics g = Graphics.FromImage(bmp))
            {
                // 顔の輪郭を描く。
                g.DrawEllipse(new Pen(GetFaceBorderColor(), 5), GetFacePosition());
                g.DrawPolygon(new Pen(GetFaceBorderColor(), 5), GetLeftEarPosition());
                g.DrawPolygon(new Pen(GetFaceBorderColor(), 5), GetRightEarPosition());

                // 顔の色を塗る。
                g.FillEllipse(new SolidBrush(GetFaceColor()), GetFacePosition());
                g.FillPolygon(new SolidBrush(GetFaceColor()), GetLeftEarPosition());
                g.FillPolygon(new SolidBrush(GetFaceColor()), GetRightEarPosition());

                // その他の顔のパーツを作る。
                g.FillEllipse(Brushes.Black, 190, 200, 15, 50);  // 右目
                g.FillEllipse(Brushes.Black, 295, 200, 15, 50);  // 左目
                g.DrawArc(new Pen(Color.Black, 5), new Rectangle(190, 270, 60, 60), 0, 180);    // 口（右側）
                g.DrawArc(new Pen(Color.Black, 5), new Rectangle(250, 270, 60, 60), 0, 180);    // 口（左側）
                g.DrawLine(new Pen(Color.Black, 5), new Point(5, 210), new Point(120, 225));    // ひげ1（右側）
                g.DrawLine(new Pen(Color.Black, 5), new Point(0, 250), new Point(120, 250));    // ひげ2（右側）
                g.DrawLine(new Pen(Color.Black, 5), new Point(5, 290), new Point(120, 275));    // ひげ3（右側）


                g.DrawLine(new Pen(Color.Black, 5), new Point(380, 225), new Point(495, 210));    // ひげ1（左側）
                g.DrawLine(new Pen(Color.Black, 5), new Point(380, 250), new Point(500, 250));    // ひげ2（左側）
                g.DrawLine(new Pen(Color.Black, 5), new Point(380, 275), new Point(495, 290));    // ひげ3（左側）

            }

            // 画像をPNG形式で保存する。
            bmp.Save(filePath, System.Drawing.Imaging.ImageFormat.Png);
        }

        /// &lt;summary&gt;
        /// 猫の顔の色を返す。
        /// &lt;/summary&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        private Color GetFaceColor()
        {
            return Color.FromArgb(255, 221, 209, 174);
        }

        /// &lt;summary&gt;
        /// 猫の顔の枠線の色を返す。
        /// &lt;/summary&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        private Color GetFaceBorderColor()
        {
            return Color.FromArgb(255, 182, 156, 78);
        }

        /// &lt;summary&gt;
        /// 顔を描画する座標（外接する長方形）を返す。
        /// &lt;/summary&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        private Rectangle GetFacePosition()
        {
            return new Rectangle(50, 100, 400, 280);
        }

        /// &lt;summary&gt;
        /// 左耳を描画する座標を返す。
        /// &lt;/summary&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        private Point[] GetLeftEarPosition()
        {
            return new Point[] {
                new Point(430, 30),
                new Point(430, 210),
                new Point(300, 110)
            };
        }

        /// &lt;summary&gt;
        /// 右耳を描画する座標を返す。
        /// &lt;/summary&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        private Point[] GetRightEarPosition()
        {
            return new Point[] {
                new Point(70, 30),
                new Point(70, 210),
                new Point(200, 110)
            };
        }
    }
}

