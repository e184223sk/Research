More than 1 year has passed since last update.C#, vb.netにおける簡易コピーと詳細コピーについての記事です。
少し詰まってしまったので簡単なサンプルを使いながらまとめてみました。初心者の方も理解出来るようにわかりやすく書いたつもりです。
そのためコードのコメント量が少し多いかもしれません。
コードはC#, vb.netの両方を載せています。筆者はvb.netを主に使用しているため、C#の知識はかなり浅いです。
コードの書き方に問題がありましたら指摘をお願いします。まずは基本となるクラス,メソッドを作成しました。vb.netのコードここからC#のコード実行結果コードについて簡単に説明すると、特に難しい動作もなく実行結果も予想通りのものですね。さてここに新しい人物を追加したいと思います。
「山田太郎」さんが20歳のときに生まれた息子「山田太郎Jr」さんです。
「山田太郎Jr」さんは「山田太郎」さんと共通点があるのでコピーを行ってから、データの編集を行いたいと思います。Programクラスに以下のコードを追加しました。「山田太郎」さんのデータが「山田太郎Jr」さんのデータに置き換わってます。
クラスは参照型であるのため、値を変更すると元のデータの値も変更されるためです。この部分の理解があやふやな方は以下の記事を参考にして下さい。
「値型と参照型の区別と違い、クラスと構造体の違い」それでは値渡しでクラスのデータを渡す方法を考えます。
少し調べてみると.netでは「Object.MemberwiseClone」といった「現在のObjectの簡易コピーを作成する」メソッドが用意されているようです。
さっそくこのメソッドをPersonクラスに作成し、実際に使用してみます。名前と年齢は無事値渡しを行えたようです。
しかし所持資格の部分は参照渡しのままのようです。
これはPersonのメンバーであるcapacityが配列(参照型)であるためです。簡易コピーでは参照先オブジェクトをコピーすることが出来ません。このままではcapacityを値渡しすることが出来ません。
そのためcapacityをさらに簡易コピーすることにします。capacityはString型の配列であるため「Array.Clone」メソッド(配列の簡易コピー。.Netで用意してあるメソッド)を使用して簡易コピーします。
これを利用することですべてのデータを値渡しすることが出来ます。
Personクラスに以下のようにDeepCloneメソッドを作成しました。参考にさせていただいたサイト。「オブジェクトの複製」
この記事では説明していない、コピーコンストラクタ、シリアライズによる複製の説明もありますのでより詳しく学習したい方は一度目を通すことをおすすめします。ここまででしたら上記のサイトを参考にしたりしてスムーズに行えましたが、次のようなクラスの詳細コピーを行う際に少し詰まってしまいました。[会社クラス]
{
会社名(String型)
社長(Personクラス)
従業員(Personクラスの配列)
}クラスの中に別のクラス、または別のクラスの配列が存在する場合です。
こちらの詳細コピーは以下のようにして行いました。ここからC#サンプルを使ったほうがわかりやすいかと思いましたが、かなり長くなってしまいました……。
またコメントも適切ではないかもしれませんが、参考にしていただければ幸いです。


