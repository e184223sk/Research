どのプログラミング言語でもあるように、C#でも値同士の計算や評価の為の "演算子" が存在します。
演算子を有効に活用することでソースコードが簡潔に分かりやすくなるので、積極的に使っていきましょう本文は以下の記事の内容を前提に記述しています。演算子にはいくつかの種類があります。変数1つだけで作用する「単項演算子」変数2つの間で作用する「二項演算子」変数3つで作用する「三項演算子」普段使用するのはほとんどが二項演算子なので、まずそれから書いていきます。たくさんありますが、基本的に値型に対して適用できます。値型に対する二項演算子文字列型に対する二項演算子その他、参照型に対しては代入演算子以外は基本的に定義されていません。
ただし、自分で定義することもできます。次に二項演算子の中でも少し特殊な "複合代入演算子" を列挙していきます
上記二項演算子と代入演算子を組み合わせた内容になっています。複合代入演算子次に変数1つに対して作用する演算子を紹介していきます。単項演算子さて、インクリメント・デクリメントには前置/後置の2種類がありますが、どちらもそれ単体としては結果が変わらないように見えます。
ではどういう使い分けがあるかというと「結果を返すタイミング」が違います。a++は、aを返してからaに+1します++aは、aに+1してからaを返します例).デクリメントについても全く同じ動作になります。次に、C#における唯一の三項演算子を紹介します。三項演算子三項演算子は適度に使用することで有効に活用することができますが、
使い方や頻度によっては著しくソースコードの可読性を落とすこともある諸刃の剣です。使う場面は慎重に選んで使っていきましょう最後に、nullという特殊な概念を扱う為の演算子を紹介します。"null" とは、他の言語ではnullptrやNothing, nilなどとも表現される、「何ものでもない」「何も指していない」ことを表現します。
プログラムにおいてnullに対してアクセスするとエラーになる為、慎重に扱う必要がありますが、それを簡潔にする演算子がnull合体演算子になります。三項演算子でnullかどうかのチェックを使用したパターンを1つにまとめたものです。null合体演算子なお、このnull合体演算子は古い開発環境では認識できない場合もあるので注意しましょう（.NET Coreであれば大丈夫のはず）C#で使用される代表的な演算子は以上になります。
最後に参考URLを貼っておきます。C# 演算子と式 (Microsoft Docs)組込み演算子 (未確認飛行C)


