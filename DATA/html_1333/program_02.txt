
public class ParseSelectTest {
    // (snip)
    [Test]
    public void _数字リテラルのパーズ_小数の場合() {
        var unum_p = Parser.Digit.AtLeastOnceString();
        var frac_num_p = Parser.Char('.').Then(unum_p, (left, right) =&gt; left + right);

        var result4 = frac_num_p.Parse(".654");
        Assert.That(result4.Success, Is.True, "[4]パーズは成功しなければならない");
        Assert.That(result4.Value, Is.EqualTo(".654"), "[4]取り出された数字リテラル");

        var decimal_p = unum_p
            .Then(frac_num_p.Optional(), (left, right) =&gt; right.HasValue ? left + right.Value : left)
        ;

        var result5 = decimal_p.Parse("1234.567");
        Assert.That(result5.Success, Is.True, "[5]パーズは成功しなければならない");
        Assert.That(result5.Value, Is.EqualTo("1234.567"), "[5]取り出された数字リテラル");

        var result6 = decimal_p.Parse("567");
        Assert.That(result6.Success, Is.True, "[6]パーズは成功しなければならない");
        Assert.That(result6.Value, Is.EqualTo("567"), "[6]取り出された数字リテラル");

        var decimal_p2 = decimal_p.Then(Parser&lt;char&gt;.End, (l, r) =&gt; l);

        var result7 = decimal_p2.Parse("5678UV");
        Assert.That(result7.Success, Is.Not.True, "[7]パーズは失敗しなければならない");
        Assert.That(result7.Error, Is.Not.Null, "[7]エラーあり");
        Assert.That(result7.Error.ErrorPos.Col, Is.EqualTo(5), "数字ではないところで失敗");
    }
}

