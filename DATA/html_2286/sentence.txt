More than 1 year has passed since last update.ゲームをする側でいる時、前回プレイした時に獲得したアイテムがまだ手元に残っているのを当たり前のように思っていましたが、いざ自分自身がゲームを作る側になると、どういう仕組みでそれが成立しているのか不思議なります。今回はアイテムなどのオブジェクトのセーブ/ロードに関しての話です。（今回話すのはローカルセーブについてです。）セーブするとはどのような仕組みによって成立しているのでしょうか？ざっくり言うとセーブ対象となるオブジェクトの状態(クラスのフィールドと思って大丈夫かと)を保存することです。オブジェクトの状態を保存をする際にシリアル化と言う重要なプロセスがあります。シリアル化についての説明は、Microsoft Documentによるとシリアル化は、オブジェクトを格納するか、メモリ、データベース、またはファイルに転送するためにバイト ストリームに変換するプロセスです。 その主な目的は、必要なときに再作成できるように、オブジェクトの状態を保存しておくことです。 逆のプロセスは、逆シリアル化と呼ばれます。引用したドキュメントにはわかりやすい図もあったので載せておきます
Unityではセーブ機能を実装するための様々な方法があります。それぞれ長所、短所があり一概にどれが一番良いと言うことはできませんし、自分にあった方法を見つけていただければと思います。以下の表にざっくりとまとめました。githubにサンプルを上げていますので、興味があればご自由に見てください。
本サンプルでは、Custom Binary Fileでセーブ機能を実装しています。シーン1: 新しくゲームを始めるか、登録済みのプレイヤーをロードするかの選択。（ロードを選択するとシーン3へ行きます）
シーン2: セーブするプレイヤーの情報を入力。
シーン3: ゲームシーン。セーブデータが正しく保存されているか確かめるためにセーブデータをロードしてプレイヤーに反映します。
全部を紹介すると長くなるのでセーブ、ロードに関するところをピックアップして以下に紹介します。シーン1はシーン遷移のみなので飛ばします。まずセーブするプレイヤーのデータセーブするクラスにはSystem.Serializableと言う属性をつけることでシリアル化を可能にします。
Monobehaviourを継承しているとシリアル化できないの注意しましょう。次にユーザーの入力をもとにセーブデータを作りシリアル化する箇所です。セーブしたファイルをロードする部分はこちらです。それほど難しくないですね！シリアライズなど使えるようになると、ランキングやら簡単なログイン機能の実装やら色々できることの幅が広がりそうですね！Unite 2016 - Best Practices in Persisting Player Data on mobile
Unite Europe 2017 - How Unity's Serialization system works
Saving Game Data in Unity
How to Save and Load a Game in Unity
シリアル化
Script Serialization
オブジェクトのシリアル化以下の観点でコメントいただけると嬉しく思います！


