More than 3 years have passed since last update.関数呼び出しで、関数(メソッド)のパラメータの渡し方には「値渡し」と「参照渡し」というのがあります。ただ、Java や JavaScript には言語仕様としての参照渡しはなく、常に値渡しになります。参照渡しの例ですが、最初に C# を例にして説明します。次のサンプルは２つのパラメータの値を交換するのに参照渡しを使っています。これの IL (中間コード) は次のようになります。コメントに動作を書きましたが、正確かどうかは別として、スタックマシン (仮想マシン) を使って、スタックフレーム上のデータをプッシュしたりポップしたりして計算を行っています。このまま実行すると遅いので、通常、さらにネイティブコードに変換されて実行されます。参照渡しに関わる部分は Main では、IL_0005 と IL_0006 のあたりです。ここで、スタックフレーム上のデータ x, y のアドレスをスタックに積んでいます。関数 Swap 側で参照渡しに関わる部分は、ldind 命令を使っているあたりです。この命令は指定したオペランドの内容をアドレスとみなして、そのアドレスの行った先のデータをスタックに積んでいます。次に、C 言語の例を見てみます。C 言語の場合、VM (仮想マシン) は使用しない、つまり、いきなりネイティブコードを生成します。ここでは、PC で使われている x86 と x64 について述べます。RISC や IBM などでは、基本的考え方は同じはずですが、Calling Convention (呼び出し規約) がそれぞれ異なるのでいろいろ異なります。まず、C のソースですが、下のようなものとします。これのコンパイル結果は、次のようになります。(x86 の場合)x64 の場合は、関数の呼び出し規約が異なっており、整数や浮動小数点数は最適化しなくてもレジスタ渡しになります。これは、x64 では、汎用レジスタが8本から16本に増えたためで、余ったレジスタを関数のパラメータとして活用しています。参照渡しができない言語の場合、言語仕様として参照表現がないというだけで、参照渡しは使われています。パラメータが値渡しされる場合は、汎用レジスタに値がロードできるもの、具体的には整数や浮動小数点数が値渡しになり、汎用レジスタに値がロードできないもの、具体的には配列や一般のオブジェクトが参照渡しになります。したがって、参照渡しされる型を利用すれば、swap 関数と同様の機能が実現できます。つぎのコードは JavaScript で参照渡しと同様の機能を実現する例です。配列は参照渡しなので、swap 関数により２つのパラメータの中身が交換されます。–


